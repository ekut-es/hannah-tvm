
test:     file format elf32-littleriscv


Disassembly of section .init:

20400000 <_start>:
_start:
	.cfi_startproc
	.cfi_undefined ra
.option push
.option norelax
	la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	1a018193          	addi	gp,gp,416 # 800011a0 <__global_pointer$>
.option pop
	la sp, _sp
20400008:	60c00117          	auipc	sp,0x60c00
2040000c:	ff810113          	addi	sp,sp,-8 # 81000000 <_sp>
 	la	a5, trap_entry
20400010:	00000797          	auipc	a5,0x0
20400014:	08c78793          	addi	a5,a5,140 # 2040009c <trap_entry>
 	csrw mtvec,a5
20400018:	30579073          	csrw	mtvec,a5
	/* Load data section */
	la a0, _data_lma
2040001c:	00022517          	auipc	a0,0x22
20400020:	2d050513          	addi	a0,a0,720 # 204222ec <__fini_array_end>
	la a1, _data
20400024:	5fc00597          	auipc	a1,0x5fc00
20400028:	fdc58593          	addi	a1,a1,-36 # 80000000 <_data>
	la a2, _edata
2040002c:	5fc01617          	auipc	a2,0x5fc01
20400030:	a3460613          	addi	a2,a2,-1484 # 80000a60 <_PathLocale>
	bgeu a1, a2, 2f
20400034:	00c5fc63          	bleu	a2,a1,2040004c <_start+0x4c>
1:
	lw t0, (a0)
20400038:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
2040003c:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
20400040:	00450513          	addi	a0,a0,4
	addi a1, a1, 4
20400044:	00458593          	addi	a1,a1,4
	bltu a1, a2, 1b
20400048:	fec5e8e3          	bltu	a1,a2,20400038 <_start+0x38>
2:

	/* Clear bss section */
	la a0, __bss_start
2040004c:	5fc01517          	auipc	a0,0x5fc01
20400050:	a1450513          	addi	a0,a0,-1516 # 80000a60 <_PathLocale>
	la a1, _end
20400054:	5fc03597          	auipc	a1,0x5fc03
20400058:	e9c58593          	addi	a1,a1,-356 # 80002ef0 <_end>
	bgeu a0, a1, 2f
2040005c:	00b57863          	bleu	a1,a0,2040006c <_start+0x6c>
1:
	sw zero, (a0)
20400060:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
20400064:	00450513          	addi	a0,a0,4
	bltu a0, a1, 1b
20400068:	feb56ce3          	bltu	a0,a1,20400060 <_start+0x60>
2:

	/* Call global constructors */
	la a0, __libc_fini_array
2040006c:	00013517          	auipc	a0,0x13
20400070:	cf450513          	addi	a0,a0,-780 # 20412d60 <__libc_fini_array>
	call atexit
20400074:	4c3120ef          	jal	ra,20412d36 <atexit>
	call __libc_init_array
20400078:	63b120ef          	jal	ra,20412eb2 <__libc_init_array>

	auipc ra, 0
2040007c:	00000097          	auipc	ra,0x0
	addi sp, sp, -16
20400080:	ff010113          	addi	sp,sp,-16
#if __riscv_xlen == 32
	sw ra, 8(sp)
20400084:	00112423          	sw	ra,8(sp)
#else
	sd ra, 8(sp)
#endif

	/* argc = argv = 0 */
	li a0, 0
20400088:	00000513          	li	a0,0
	li a1, 0
2040008c:	00000593          	li	a1,0
	call main
20400090:	295000ef          	jal	ra,20400b24 <main>
	tail exit
20400094:	4af1206f          	j	20412d42 <exit>
1:
	j 1b
20400098:	0000006f          	j	20400098 <_start+0x98>

Disassembly of section .text:

2040009c <trap_entry>:

  .section      .text.entry
  .align 2
  .weak trap_entry
trap_entry:
  addi sp, sp, -32*REGBYTES
2040009c:	f8010113          	addi	sp,sp,-128

  STORE x1, 1*REGBYTES(sp)
204000a0:	00112223          	sw	ra,4(sp)
  STORE x2, 2*REGBYTES(sp)
204000a4:	00212423          	sw	sp,8(sp)
  STORE x3, 3*REGBYTES(sp)
204000a8:	00312623          	sw	gp,12(sp)
  STORE x4, 4*REGBYTES(sp)
204000ac:	00412823          	sw	tp,16(sp)
  STORE x5, 5*REGBYTES(sp)
204000b0:	00512a23          	sw	t0,20(sp)
  STORE x6, 6*REGBYTES(sp)
204000b4:	00612c23          	sw	t1,24(sp)
  STORE x7, 7*REGBYTES(sp)
204000b8:	00712e23          	sw	t2,28(sp)
  STORE x8, 8*REGBYTES(sp)
204000bc:	02812023          	sw	s0,32(sp)
  STORE x9, 9*REGBYTES(sp)
204000c0:	02912223          	sw	s1,36(sp)
  STORE x10, 10*REGBYTES(sp)
204000c4:	02a12423          	sw	a0,40(sp)
  STORE x11, 11*REGBYTES(sp)
204000c8:	02b12623          	sw	a1,44(sp)
  STORE x12, 12*REGBYTES(sp)
204000cc:	02c12823          	sw	a2,48(sp)
  STORE x13, 13*REGBYTES(sp)
204000d0:	02d12a23          	sw	a3,52(sp)
  STORE x14, 14*REGBYTES(sp)
204000d4:	02e12c23          	sw	a4,56(sp)
  STORE x15, 15*REGBYTES(sp)
204000d8:	02f12e23          	sw	a5,60(sp)
  STORE x16, 16*REGBYTES(sp)
204000dc:	05012023          	sw	a6,64(sp)
  STORE x17, 17*REGBYTES(sp)
204000e0:	05112223          	sw	a7,68(sp)
  STORE x18, 18*REGBYTES(sp)
204000e4:	05212423          	sw	s2,72(sp)
  STORE x19, 19*REGBYTES(sp)
204000e8:	05312623          	sw	s3,76(sp)
  STORE x20, 20*REGBYTES(sp)
204000ec:	05412823          	sw	s4,80(sp)
  STORE x21, 21*REGBYTES(sp)
204000f0:	05512a23          	sw	s5,84(sp)
  STORE x22, 22*REGBYTES(sp)
204000f4:	05612c23          	sw	s6,88(sp)
  STORE x23, 23*REGBYTES(sp)
204000f8:	05712e23          	sw	s7,92(sp)
  STORE x24, 24*REGBYTES(sp)
204000fc:	07812023          	sw	s8,96(sp)
  STORE x25, 25*REGBYTES(sp)
20400100:	07912223          	sw	s9,100(sp)
  STORE x26, 26*REGBYTES(sp)
20400104:	07a12423          	sw	s10,104(sp)
  STORE x27, 27*REGBYTES(sp)
20400108:	07b12623          	sw	s11,108(sp)
  STORE x28, 28*REGBYTES(sp)
2040010c:	07c12823          	sw	t3,112(sp)
  STORE x29, 29*REGBYTES(sp)
20400110:	07d12a23          	sw	t4,116(sp)
  STORE x30, 30*REGBYTES(sp)
20400114:	07e12c23          	sw	t5,120(sp)
  STORE x31, 31*REGBYTES(sp)
20400118:	07f12e23          	sw	t6,124(sp)

  csrr a0, mcause
2040011c:	34202573          	csrr	a0,mcause
  csrr a1, mepc
20400120:	341025f3          	csrr	a1,mepc
  mv a2, sp
20400124:	00010613          	mv	a2,sp
  call handle_trap
20400128:	65c0b0ef          	jal	ra,2040b784 <handle_trap>
  csrw mepc, a0
2040012c:	34151073          	csrw	mepc,a0

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
20400130:	000022b7          	lui	t0,0x2
20400134:	80028293          	addi	t0,t0,-2048 # 1800 <__stack_size+0x1000>
  csrs mstatus, t0
20400138:	3002a073          	csrs	mstatus,t0

  LOAD x1, 1*REGBYTES(sp)
2040013c:	00412083          	lw	ra,4(sp)
  LOAD x2, 2*REGBYTES(sp)
20400140:	00812103          	lw	sp,8(sp)
  LOAD x3, 3*REGBYTES(sp)
20400144:	00c12183          	lw	gp,12(sp)
  LOAD x4, 4*REGBYTES(sp)
20400148:	01012203          	lw	tp,16(sp)
  LOAD x5, 5*REGBYTES(sp)
2040014c:	01412283          	lw	t0,20(sp)
  LOAD x6, 6*REGBYTES(sp)
20400150:	01812303          	lw	t1,24(sp)
  LOAD x7, 7*REGBYTES(sp)
20400154:	01c12383          	lw	t2,28(sp)
  LOAD x8, 8*REGBYTES(sp)
20400158:	02012403          	lw	s0,32(sp)
  LOAD x9, 9*REGBYTES(sp)
2040015c:	02412483          	lw	s1,36(sp)
  LOAD x10, 10*REGBYTES(sp)
20400160:	02812503          	lw	a0,40(sp)
  LOAD x11, 11*REGBYTES(sp)
20400164:	02c12583          	lw	a1,44(sp)
  LOAD x12, 12*REGBYTES(sp)
20400168:	03012603          	lw	a2,48(sp)
  LOAD x13, 13*REGBYTES(sp)
2040016c:	03412683          	lw	a3,52(sp)
  LOAD x14, 14*REGBYTES(sp)
20400170:	03812703          	lw	a4,56(sp)
  LOAD x15, 15*REGBYTES(sp)
20400174:	03c12783          	lw	a5,60(sp)
  LOAD x16, 16*REGBYTES(sp)
20400178:	04012803          	lw	a6,64(sp)
  LOAD x17, 17*REGBYTES(sp)
2040017c:	04412883          	lw	a7,68(sp)
  LOAD x18, 18*REGBYTES(sp)
20400180:	04812903          	lw	s2,72(sp)
  LOAD x19, 19*REGBYTES(sp)
20400184:	04c12983          	lw	s3,76(sp)
  LOAD x20, 20*REGBYTES(sp)
20400188:	05012a03          	lw	s4,80(sp)
  LOAD x21, 21*REGBYTES(sp)
2040018c:	05412a83          	lw	s5,84(sp)
  LOAD x22, 22*REGBYTES(sp)
20400190:	05812b03          	lw	s6,88(sp)
  LOAD x23, 23*REGBYTES(sp)
20400194:	05c12b83          	lw	s7,92(sp)
  LOAD x24, 24*REGBYTES(sp)
20400198:	06012c03          	lw	s8,96(sp)
  LOAD x25, 25*REGBYTES(sp)
2040019c:	06412c83          	lw	s9,100(sp)
  LOAD x26, 26*REGBYTES(sp)
204001a0:	06812d03          	lw	s10,104(sp)
  LOAD x27, 27*REGBYTES(sp)
204001a4:	06c12d83          	lw	s11,108(sp)
  LOAD x28, 28*REGBYTES(sp)
204001a8:	07012e03          	lw	t3,112(sp)
  LOAD x29, 29*REGBYTES(sp)
204001ac:	07412e83          	lw	t4,116(sp)
  LOAD x30, 30*REGBYTES(sp)
204001b0:	07812f03          	lw	t5,120(sp)
  LOAD x31, 31*REGBYTES(sp)
204001b4:	07c12f83          	lw	t6,124(sp)

  addi sp, sp, 32*REGBYTES
204001b8:	08010113          	addi	sp,sp,128
  mret
204001bc:	30200073          	mret

.weak handle_trap
handle_trap:
1:
  j 1b
204001c0:	0000006f          	j	204001c0 <trap_entry+0x124>

204001c4 <advance_head_pointer>:
{
	return (value + 1) % max;
}

static void advance_head_pointer(cbuf_handle_t me)
{
204001c4:	ff010113          	addi	sp,sp,-16
204001c8:	00112623          	sw	ra,12(sp)
204001cc:	00812423          	sw	s0,8(sp)
204001d0:	00912223          	sw	s1,4(sp)
204001d4:	01212023          	sw	s2,0(sp)
	assert(me);
204001d8:	06050263          	beqz	a0,2040023c <advance_head_pointer+0x78>

	if(circular_buf_full(me))
204001dc:	01054783          	lbu	a5,16(a0)
204001e0:	00050493          	mv	s1,a0
204001e4:	00852403          	lw	s0,8(a0)
204001e8:	00c52903          	lw	s2,12(a0)
204001ec:	00078c63          	beqz	a5,20400204 <advance_head_pointer+0x40>
	return (value + 1) % max;
204001f0:	00140513          	addi	a0,s0,1
204001f4:	00090593          	mv	a1,s2
204001f8:	61c1f0ef          	jal	ra,2041f814 <__umodsi3>
204001fc:	00050413          	mv	s0,a0
	{
		me->tail = advance_headtail_value(me->tail, me->max);
20400200:	00a4a423          	sw	a0,8(s1)
	return (value + 1) % max;
20400204:	0044a503          	lw	a0,4(s1)
20400208:	00090593          	mv	a1,s2
2040020c:	00150513          	addi	a0,a0,1
20400210:	6041f0ef          	jal	ra,2041f814 <__umodsi3>
	}

	me->head = advance_headtail_value(me->head, me->max);
	me->full = (me->head == me->tail);
20400214:	40850433          	sub	s0,a0,s0
20400218:	00143413          	seqz	s0,s0
2040021c:	00848823          	sb	s0,16(s1)
}
20400220:	00c12083          	lw	ra,12(sp)
20400224:	00812403          	lw	s0,8(sp)
	me->head = advance_headtail_value(me->head, me->max);
20400228:	00a4a223          	sw	a0,4(s1)
}
2040022c:	00012903          	lw	s2,0(sp)
20400230:	00412483          	lw	s1,4(sp)
20400234:	01010113          	addi	sp,sp,16
20400238:	00008067          	ret
	assert(me);
2040023c:	0001f697          	auipc	a3,0x1f
20400240:	76068693          	addi	a3,a3,1888 # 2041f99c <__func__.2128+0x14>
20400244:	0001f617          	auipc	a2,0x1f
20400248:	65c60613          	addi	a2,a2,1628 # 2041f8a0 <__func__.2072>
2040024c:	01b00593          	li	a1,27
20400250:	0001f517          	auipc	a0,0x1f
20400254:	75050513          	addi	a0,a0,1872 # 2041f9a0 <__func__.2128+0x18>
20400258:	299120ef          	jal	ra,20412cf0 <__assert_func>

2040025c <circular_buf_init>:

#pragma mark - APIs -

cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
{
2040025c:	ff010113          	addi	sp,sp,-16
20400260:	00112623          	sw	ra,12(sp)
20400264:	00812423          	sw	s0,8(sp)
20400268:	00912223          	sw	s1,4(sp)
	assert(buffer && size);
2040026c:	04050263          	beqz	a0,204002b0 <circular_buf_init+0x54>
20400270:	00058493          	mv	s1,a1
20400274:	02058e63          	beqz	a1,204002b0 <circular_buf_init+0x54>
20400278:	00050413          	mv	s0,a0

	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
2040027c:	01400513          	li	a0,20
20400280:	6b9110ef          	jal	ra,20412138 <__wrap_malloc>
	assert(cbuf);
20400284:	04050663          	beqz	a0,204002d0 <circular_buf_init+0x74>

	cbuf->buffer = buffer;
20400288:	00852023          	sw	s0,0(a0)
	circular_buf_reset(cbuf);

	assert(circular_buf_empty(cbuf));

	return cbuf;
}
2040028c:	00c12083          	lw	ra,12(sp)
20400290:	00812403          	lw	s0,8(sp)
	cbuf->max = size;
20400294:	00952623          	sw	s1,12(a0)

void circular_buf_reset(cbuf_handle_t me)
{
	assert(me);

	me->head = 0;
20400298:	00052223          	sw	zero,4(a0)
	me->tail = 0;
2040029c:	00052423          	sw	zero,8(a0)
	me->full = false;
204002a0:	00050823          	sb	zero,16(a0)
}
204002a4:	00412483          	lw	s1,4(sp)
204002a8:	01010113          	addi	sp,sp,16
204002ac:	00008067          	ret
	assert(buffer && size);
204002b0:	0001f697          	auipc	a3,0x1f
204002b4:	70468693          	addi	a3,a3,1796 # 2041f9b4 <__func__.2128+0x2c>
204002b8:	0001f617          	auipc	a2,0x1f
204002bc:	60060613          	addi	a2,a2,1536 # 2041f8b8 <__func__.2077>
204002c0:	02a00593          	li	a1,42
204002c4:	0001f517          	auipc	a0,0x1f
204002c8:	6dc50513          	addi	a0,a0,1756 # 2041f9a0 <__func__.2128+0x18>
204002cc:	225120ef          	jal	ra,20412cf0 <__assert_func>
	assert(cbuf);
204002d0:	0001f697          	auipc	a3,0x1f
204002d4:	6f468693          	addi	a3,a3,1780 # 2041f9c4 <__func__.2128+0x3c>
204002d8:	0001f617          	auipc	a2,0x1f
204002dc:	5e060613          	addi	a2,a2,1504 # 2041f8b8 <__func__.2077>
204002e0:	02d00593          	li	a1,45
204002e4:	0001f517          	auipc	a0,0x1f
204002e8:	6bc50513          	addi	a0,a0,1724 # 2041f9a0 <__func__.2128+0x18>
204002ec:	205120ef          	jal	ra,20412cf0 <__assert_func>

204002f0 <circular_buf_free>:
	assert(me);
204002f0:	00050463          	beqz	a0,204002f8 <circular_buf_free+0x8>
	free(me);
204002f4:	6951106f          	j	20412188 <__wrap_free>
{
204002f8:	ff010113          	addi	sp,sp,-16
	assert(me);
204002fc:	0001f697          	auipc	a3,0x1f
20400300:	6a068693          	addi	a3,a3,1696 # 2041f99c <__func__.2128+0x14>
20400304:	0001f617          	auipc	a2,0x1f
20400308:	5c860613          	addi	a2,a2,1480 # 2041f8cc <__func__.2082>
2040030c:	03a00593          	li	a1,58
20400310:	0001f517          	auipc	a0,0x1f
20400314:	69050513          	addi	a0,a0,1680 # 2041f9a0 <__func__.2128+0x18>
{
20400318:	00112623          	sw	ra,12(sp)
	assert(me);
2040031c:	1d5120ef          	jal	ra,20412cf0 <__assert_func>

20400320 <circular_buf_reset>:
	assert(me);
20400320:	00050a63          	beqz	a0,20400334 <circular_buf_reset+0x14>
	me->head = 0;
20400324:	00052223          	sw	zero,4(a0)
	me->tail = 0;
20400328:	00052423          	sw	zero,8(a0)
	me->full = false;
2040032c:	00050823          	sb	zero,16(a0)
20400330:	00008067          	ret
{
20400334:	ff010113          	addi	sp,sp,-16
	assert(me);
20400338:	0001f697          	auipc	a3,0x1f
2040033c:	66468693          	addi	a3,a3,1636 # 2041f99c <__func__.2128+0x14>
20400340:	0001f617          	auipc	a2,0x1f
20400344:	5a060613          	addi	a2,a2,1440 # 2041f8e0 <__func__.2086>
20400348:	04000593          	li	a1,64
2040034c:	0001f517          	auipc	a0,0x1f
20400350:	65450513          	addi	a0,a0,1620 # 2041f9a0 <__func__.2128+0x18>
{
20400354:	00112623          	sw	ra,12(sp)
	assert(me);
20400358:	199120ef          	jal	ra,20412cf0 <__assert_func>

2040035c <circular_buf_size>:
}

size_t circular_buf_size(cbuf_handle_t me)
{
	assert(me);
2040035c:	02050a63          	beqz	a0,20400390 <circular_buf_size+0x34>

	size_t size = me->max;

	if(!circular_buf_full(me))
20400360:	01054703          	lbu	a4,16(a0)
20400364:	00050793          	mv	a5,a0
	size_t size = me->max;
20400368:	00c52503          	lw	a0,12(a0)
	if(!circular_buf_full(me))
2040036c:	00071c63          	bnez	a4,20400384 <circular_buf_size+0x28>
	{
		if(me->head >= me->tail)
20400370:	0047a703          	lw	a4,4(a5)
20400374:	0087a783          	lw	a5,8(a5)
20400378:	00f77863          	bleu	a5,a4,20400388 <circular_buf_size+0x2c>
		{
			size = (me->head - me->tail);
		}
		else
		{
			size = (me->max + me->head - me->tail);
2040037c:	00a70533          	add	a0,a4,a0
20400380:	40f50533          	sub	a0,a0,a5
		}
	}

	return size;
}
20400384:	00008067          	ret
			size = (me->head - me->tail);
20400388:	40f70533          	sub	a0,a4,a5
2040038c:	00008067          	ret
{
20400390:	ff010113          	addi	sp,sp,-16
	assert(me);
20400394:	0001f697          	auipc	a3,0x1f
20400398:	60868693          	addi	a3,a3,1544 # 2041f99c <__func__.2128+0x14>
2040039c:	0001f617          	auipc	a2,0x1f
204003a0:	55860613          	addi	a2,a2,1368 # 2041f8f4 <__func__.2090>
204003a4:	04900593          	li	a1,73
204003a8:	0001f517          	auipc	a0,0x1f
204003ac:	5f850513          	addi	a0,a0,1528 # 2041f9a0 <__func__.2128+0x18>
{
204003b0:	00112623          	sw	ra,12(sp)
	assert(me);
204003b4:	13d120ef          	jal	ra,20412cf0 <__assert_func>

204003b8 <circular_buf_capacity>:

size_t circular_buf_capacity(cbuf_handle_t me)
{
	assert(me);
204003b8:	00050663          	beqz	a0,204003c4 <circular_buf_capacity+0xc>

	return me->max;
}
204003bc:	00c52503          	lw	a0,12(a0)
204003c0:	00008067          	ret
{
204003c4:	ff010113          	addi	sp,sp,-16
	assert(me);
204003c8:	0001f697          	auipc	a3,0x1f
204003cc:	5d468693          	addi	a3,a3,1492 # 2041f99c <__func__.2128+0x14>
204003d0:	0001f617          	auipc	a2,0x1f
204003d4:	53860613          	addi	a2,a2,1336 # 2041f908 <__func__.2095>
204003d8:	05e00593          	li	a1,94
204003dc:	0001f517          	auipc	a0,0x1f
204003e0:	5c450513          	addi	a0,a0,1476 # 2041f9a0 <__func__.2128+0x18>
{
204003e4:	00112623          	sw	ra,12(sp)
	assert(me);
204003e8:	109120ef          	jal	ra,20412cf0 <__assert_func>

204003ec <circular_buf_put>:

void circular_buf_put(cbuf_handle_t me, uint8_t data)
{
	assert(me && me->buffer);
204003ec:	00050e63          	beqz	a0,20400408 <circular_buf_put+0x1c>
204003f0:	00052783          	lw	a5,0(a0)
204003f4:	00078a63          	beqz	a5,20400408 <circular_buf_put+0x1c>

	me->buffer[me->head] = data;
204003f8:	00452703          	lw	a4,4(a0)
204003fc:	00e787b3          	add	a5,a5,a4
20400400:	00b78023          	sb	a1,0(a5)

	advance_head_pointer(me);
20400404:	dc1ff06f          	j	204001c4 <advance_head_pointer>
{
20400408:	ff010113          	addi	sp,sp,-16
	assert(me && me->buffer);
2040040c:	0001f697          	auipc	a3,0x1f
20400410:	5c068693          	addi	a3,a3,1472 # 2041f9cc <__func__.2128+0x44>
20400414:	0001f617          	auipc	a2,0x1f
20400418:	50c60613          	addi	a2,a2,1292 # 2041f920 <__func__.2100>
2040041c:	06500593          	li	a1,101
20400420:	0001f517          	auipc	a0,0x1f
20400424:	58050513          	addi	a0,a0,1408 # 2041f9a0 <__func__.2128+0x18>
{
20400428:	00112623          	sw	ra,12(sp)
	assert(me && me->buffer);
2040042c:	0c5120ef          	jal	ra,20412cf0 <__assert_func>

20400430 <circular_buf_try_put>:
}

int circular_buf_try_put(cbuf_handle_t me, uint8_t data)
{
20400430:	ff010113          	addi	sp,sp,-16
20400434:	00112623          	sw	ra,12(sp)
	int r = -1;

	assert(me && me->buffer);
20400438:	02050e63          	beqz	a0,20400474 <circular_buf_try_put+0x44>
2040043c:	00052703          	lw	a4,0(a0)
20400440:	02070a63          	beqz	a4,20400474 <circular_buf_try_put+0x44>

	if(!circular_buf_full(me))
20400444:	01054683          	lbu	a3,16(a0)
20400448:	02069263          	bnez	a3,2040046c <circular_buf_try_put+0x3c>
	{
		me->buffer[me->head] = data;
2040044c:	00452783          	lw	a5,4(a0)
20400450:	00f70733          	add	a4,a4,a5
20400454:	00b70023          	sb	a1,0(a4)
		advance_head_pointer(me);
20400458:	d6dff0ef          	jal	ra,204001c4 <advance_head_pointer>
		r = 0;
2040045c:	00000513          	li	a0,0
	}

	return r;
}
20400460:	00c12083          	lw	ra,12(sp)
20400464:	01010113          	addi	sp,sp,16
20400468:	00008067          	ret
	int r = -1;
2040046c:	fff00513          	li	a0,-1
	return r;
20400470:	ff1ff06f          	j	20400460 <circular_buf_try_put+0x30>
	assert(me && me->buffer);
20400474:	0001f697          	auipc	a3,0x1f
20400478:	55868693          	addi	a3,a3,1368 # 2041f9cc <__func__.2128+0x44>
2040047c:	0001f617          	auipc	a2,0x1f
20400480:	4b860613          	addi	a2,a2,1208 # 2041f934 <__func__.2106>
20400484:	07000593          	li	a1,112
20400488:	0001f517          	auipc	a0,0x1f
2040048c:	51850513          	addi	a0,a0,1304 # 2041f9a0 <__func__.2128+0x18>
20400490:	061120ef          	jal	ra,20412cf0 <__assert_func>

20400494 <circular_buf_get>:

int circular_buf_get(cbuf_handle_t me, uint8_t* data)
{
20400494:	ff010113          	addi	sp,sp,-16
20400498:	00112623          	sw	ra,12(sp)
2040049c:	00812423          	sw	s0,8(sp)
	assert(me && data && me->buffer);
204004a0:	06050a63          	beqz	a0,20400514 <circular_buf_get+0x80>
204004a4:	06058863          	beqz	a1,20400514 <circular_buf_get+0x80>
204004a8:	00052783          	lw	a5,0(a0)
204004ac:	00050413          	mv	s0,a0
204004b0:	06078263          	beqz	a5,20400514 <circular_buf_get+0x80>

bool circular_buf_empty(cbuf_handle_t me)
{
	assert(me);

	return (!circular_buf_full(me) && (me->head == me->tail));
204004b4:	01054683          	lbu	a3,16(a0)
204004b8:	00852703          	lw	a4,8(a0)
204004bc:	02068e63          	beqz	a3,204004f8 <circular_buf_get+0x64>
		*data = me->buffer[me->tail];
204004c0:	00e787b3          	add	a5,a5,a4
204004c4:	0007c783          	lbu	a5,0(a5)
204004c8:	00f58023          	sb	a5,0(a1)
	return (value + 1) % max;
204004cc:	00842503          	lw	a0,8(s0)
204004d0:	00c42583          	lw	a1,12(s0)
204004d4:	00150513          	addi	a0,a0,1
204004d8:	33c1f0ef          	jal	ra,2041f814 <__umodsi3>
		me->tail = advance_headtail_value(me->tail, me->max);
204004dc:	00a42423          	sw	a0,8(s0)
		me->full = false;
204004e0:	00040823          	sb	zero,16(s0)
}
204004e4:	00c12083          	lw	ra,12(sp)
204004e8:	00812403          	lw	s0,8(sp)
		r = 0;
204004ec:	00000513          	li	a0,0
}
204004f0:	01010113          	addi	sp,sp,16
204004f4:	00008067          	ret
	return (!circular_buf_full(me) && (me->head == me->tail));
204004f8:	00452683          	lw	a3,4(a0)
	int r = -1;
204004fc:	fff00513          	li	a0,-1
	return (!circular_buf_full(me) && (me->head == me->tail));
20400500:	fce690e3          	bne	a3,a4,204004c0 <circular_buf_get+0x2c>
}
20400504:	00c12083          	lw	ra,12(sp)
20400508:	00812403          	lw	s0,8(sp)
2040050c:	01010113          	addi	sp,sp,16
20400510:	00008067          	ret
	assert(me && data && me->buffer);
20400514:	0001f697          	auipc	a3,0x1f
20400518:	4cc68693          	addi	a3,a3,1228 # 2041f9e0 <__func__.2128+0x58>
2040051c:	0001f617          	auipc	a2,0x1f
20400520:	43060613          	addi	a2,a2,1072 # 2041f94c <__func__.2111>
20400524:	07e00593          	li	a1,126
20400528:	0001f517          	auipc	a0,0x1f
2040052c:	47850513          	addi	a0,a0,1144 # 2041f9a0 <__func__.2128+0x18>
20400530:	7c0120ef          	jal	ra,20412cf0 <__assert_func>

20400534 <circular_buf_empty>:
	assert(me);
20400534:	02050663          	beqz	a0,20400560 <circular_buf_empty+0x2c>
	return (!circular_buf_full(me) && (me->head == me->tail));
20400538:	01054703          	lbu	a4,16(a0)
2040053c:	00000793          	li	a5,0
20400540:	00071c63          	bnez	a4,20400558 <circular_buf_empty+0x24>
20400544:	00452783          	lw	a5,4(a0)
20400548:	00852503          	lw	a0,8(a0)
2040054c:	40a787b3          	sub	a5,a5,a0
20400550:	0017b793          	seqz	a5,a5
20400554:	0ff7f793          	andi	a5,a5,255
}
20400558:	00078513          	mv	a0,a5
2040055c:	00008067          	ret
{
20400560:	ff010113          	addi	sp,sp,-16
	assert(me);
20400564:	0001f697          	auipc	a3,0x1f
20400568:	43868693          	addi	a3,a3,1080 # 2041f99c <__func__.2128+0x14>
2040056c:	0001f617          	auipc	a2,0x1f
20400570:	3f460613          	addi	a2,a2,1012 # 2041f960 <__func__.2116>
20400574:	08f00593          	li	a1,143
20400578:	0001f517          	auipc	a0,0x1f
2040057c:	42850513          	addi	a0,a0,1064 # 2041f9a0 <__func__.2128+0x18>
{
20400580:	00112623          	sw	ra,12(sp)
	assert(me);
20400584:	76c120ef          	jal	ra,20412cf0 <__assert_func>

20400588 <circular_buf_full>:

bool circular_buf_full(cbuf_handle_t me)
{
	assert(me);
20400588:	00050663          	beqz	a0,20400594 <circular_buf_full+0xc>

	return me->full;
}
2040058c:	01054503          	lbu	a0,16(a0)
20400590:	00008067          	ret
{
20400594:	ff010113          	addi	sp,sp,-16
	assert(me);
20400598:	0001f697          	auipc	a3,0x1f
2040059c:	40468693          	addi	a3,a3,1028 # 2041f99c <__func__.2128+0x14>
204005a0:	0001f617          	auipc	a2,0x1f
204005a4:	3d460613          	addi	a2,a2,980 # 2041f974 <__func__.2120>
204005a8:	09600593          	li	a1,150
204005ac:	0001f517          	auipc	a0,0x1f
204005b0:	3f450513          	addi	a0,a0,1012 # 2041f9a0 <__func__.2128+0x18>
{
204005b4:	00112623          	sw	ra,12(sp)
	assert(me);
204005b8:	738120ef          	jal	ra,20412cf0 <__assert_func>

204005bc <circular_buf_peek>:

int circular_buf_peek(cbuf_handle_t me, uint8_t* data, unsigned int look_ahead_counter)
{
204005bc:	fe010113          	addi	sp,sp,-32
204005c0:	00112e23          	sw	ra,28(sp)
204005c4:	00812c23          	sw	s0,24(sp)
204005c8:	00912a23          	sw	s1,20(sp)
204005cc:	01212823          	sw	s2,16(sp)
204005d0:	01312623          	sw	s3,12(sp)
	int r = -1;
	size_t pos;

	assert(me && data && me->buffer);
204005d4:	0a050c63          	beqz	a0,2040068c <circular_buf_peek+0xd0>
204005d8:	00058413          	mv	s0,a1
204005dc:	0a058863          	beqz	a1,2040068c <circular_buf_peek+0xd0>
204005e0:	00052483          	lw	s1,0(a0)
204005e4:	00050913          	mv	s2,a0
204005e8:	0a048263          	beqz	s1,2040068c <circular_buf_peek+0xd0>
	return (!circular_buf_full(me) && (me->head == me->tail));
204005ec:	01054783          	lbu	a5,16(a0)
204005f0:	00060993          	mv	s3,a2
204005f4:	06078263          	beqz	a5,20400658 <circular_buf_peek+0x9c>

	// We can't look beyond the current buffer size
	if(circular_buf_empty(me) || look_ahead_counter > circular_buf_size(me))
204005f8:	00090513          	mv	a0,s2
204005fc:	d61ff0ef          	jal	ra,2040035c <circular_buf_size>
20400600:	09356263          	bltu	a0,s3,20400684 <circular_buf_peek+0xc8>
	{
		return r;
	}

	pos = me->tail;
20400604:	00892503          	lw	a0,8(s2)
	for(unsigned int i = 0; i < look_ahead_counter; i++)
20400608:	02098863          	beqz	s3,20400638 <circular_buf_peek+0x7c>
2040060c:	013409b3          	add	s3,s0,s3
20400610:	0080006f          	j	20400618 <circular_buf_peek+0x5c>
20400614:	00092483          	lw	s1,0(s2)
	{
		data[i] = me->buffer[pos];
20400618:	00a484b3          	add	s1,s1,a0
2040061c:	0004c783          	lbu	a5,0(s1)
20400620:	00140413          	addi	s0,s0,1
	return (value + 1) % max;
20400624:	00150513          	addi	a0,a0,1
		data[i] = me->buffer[pos];
20400628:	fef40fa3          	sb	a5,-1(s0)
	return (value + 1) % max;
2040062c:	00c92583          	lw	a1,12(s2)
20400630:	1e41f0ef          	jal	ra,2041f814 <__umodsi3>
	for(unsigned int i = 0; i < look_ahead_counter; i++)
20400634:	fe8990e3          	bne	s3,s0,20400614 <circular_buf_peek+0x58>
		pos = advance_headtail_value(pos, me->max);
	}

	return 0;
20400638:	00000513          	li	a0,0
}
2040063c:	01c12083          	lw	ra,28(sp)
20400640:	01812403          	lw	s0,24(sp)
20400644:	01412483          	lw	s1,20(sp)
20400648:	01012903          	lw	s2,16(sp)
2040064c:	00c12983          	lw	s3,12(sp)
20400650:	02010113          	addi	sp,sp,32
20400654:	00008067          	ret
	return (!circular_buf_full(me) && (me->head == me->tail));
20400658:	00852703          	lw	a4,8(a0)
2040065c:	00452783          	lw	a5,4(a0)
		return r;
20400660:	fff00513          	li	a0,-1
	return (!circular_buf_full(me) && (me->head == me->tail));
20400664:	f8f71ae3          	bne	a4,a5,204005f8 <circular_buf_peek+0x3c>
}
20400668:	01c12083          	lw	ra,28(sp)
2040066c:	01812403          	lw	s0,24(sp)
20400670:	01412483          	lw	s1,20(sp)
20400674:	01012903          	lw	s2,16(sp)
20400678:	00c12983          	lw	s3,12(sp)
2040067c:	02010113          	addi	sp,sp,32
20400680:	00008067          	ret
		return r;
20400684:	fff00513          	li	a0,-1
20400688:	fb5ff06f          	j	2040063c <circular_buf_peek+0x80>
	assert(me && data && me->buffer);
2040068c:	0001f697          	auipc	a3,0x1f
20400690:	35468693          	addi	a3,a3,852 # 2041f9e0 <__func__.2128+0x58>
20400694:	0001f617          	auipc	a2,0x1f
20400698:	2f460613          	addi	a2,a2,756 # 2041f988 <__func__.2128>
2040069c:	0a000593          	li	a1,160
204006a0:	0001f517          	auipc	a0,0x1f
204006a4:	30050513          	addi	a0,a0,768 # 2041f9a0 <__func__.2128+0x18>
204006a8:	648120ef          	jal	ra,20412cf0 <__assert_func>

204006ac <__cxa_pure_virtual>:
204006ac:	ff010113          	addi	sp,sp,-16
204006b0:	00812623          	sw	s0,12(sp)
204006b4:	01010413          	addi	s0,sp,16
204006b8:	0000006f          	j	204006b8 <__cxa_pure_virtual+0xc>

204006bc <uart1_init>:
#include "platform.h"

#include <stdio.h>
#include <stdint.h>

static void uart1_init(size_t baud_rate){
204006bc:	fe010113          	addi	sp,sp,-32
204006c0:	00112e23          	sw	ra,28(sp)
204006c4:	00812c23          	sw	s0,24(sp)
204006c8:	02010413          	addi	s0,sp,32
204006cc:	fea42623          	sw	a0,-20(s0)
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART1_MASK;
204006d0:	100127b7          	lui	a5,0x10012
204006d4:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1001183c>
204006d8:	0007a683          	lw	a3,0(a5)
204006dc:	100127b7          	lui	a5,0x10012
204006e0:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1001183c>
204006e4:	fd000737          	lui	a4,0xfd000
204006e8:	fff70713          	addi	a4,a4,-1 # fcffffff <pulp__FC+0xfd000000>
204006ec:	00e6f733          	and	a4,a3,a4
204006f0:	00e7a023          	sw	a4,0(a5)
  GPIO_REG(GPIO_IOF_EN) |= IOF0_UART1_MASK;
204006f4:	100127b7          	lui	a5,0x10012
204006f8:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x10011838>
204006fc:	0007a683          	lw	a3,0(a5)
20400700:	100127b7          	lui	a5,0x10012
20400704:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x10011838>
20400708:	03000737          	lui	a4,0x3000
2040070c:	00e6e733          	or	a4,a3,a4
20400710:	00e7a023          	sw	a4,0(a5)
  UART1_REG(UART_REG_DIV) = get_cpu_freq() / baud_rate - 1;
20400714:	75d0a0ef          	jal	ra,2040b670 <get_cpu_freq>
20400718:	00050793          	mv	a5,a0
2040071c:	fec42583          	lw	a1,-20(s0)
20400720:	00078513          	mv	a0,a5
20400724:	0c41f0ef          	jal	ra,2041f7e8 <__udivsi3>
20400728:	00050793          	mv	a5,a0
2040072c:	00078713          	mv	a4,a5
20400730:	100237b7          	lui	a5,0x10023
20400734:	01878793          	addi	a5,a5,24 # 10023018 <__stack_size+0x10022818>
20400738:	fff70713          	addi	a4,a4,-1 # 2ffffff <__stack_size+0x2fff7ff>
2040073c:	00e7a023          	sw	a4,0(a5)
  UART1_REG(UART_REG_TXCTRL) |= UART_TXEN;
20400740:	100237b7          	lui	a5,0x10023
20400744:	00878793          	addi	a5,a5,8 # 10023008 <__stack_size+0x10022808>
20400748:	0007a703          	lw	a4,0(a5)
2040074c:	100237b7          	lui	a5,0x10023
20400750:	00878793          	addi	a5,a5,8 # 10023008 <__stack_size+0x10022808>
20400754:	00176713          	ori	a4,a4,1
20400758:	00e7a023          	sw	a4,0(a5)
  UART1_REG(UART_REG_RXCTRL) |= UART_RXEN;
2040075c:	100237b7          	lui	a5,0x10023
20400760:	00c78793          	addi	a5,a5,12 # 1002300c <__stack_size+0x1002280c>
20400764:	0007a703          	lw	a4,0(a5)
20400768:	100237b7          	lui	a5,0x10023
2040076c:	00c78793          	addi	a5,a5,12 # 1002300c <__stack_size+0x1002280c>
20400770:	00176713          	ori	a4,a4,1
20400774:	00e7a023          	sw	a4,0(a5)
}
20400778:	00000013          	nop
2040077c:	01c12083          	lw	ra,28(sp)
20400780:	01812403          	lw	s0,24(sp)
20400784:	02010113          	addi	sp,sp,32
20400788:	00008067          	ret

2040078c <uart1_write>:


static ssize_t uart1_write(const void* ptr, size_t len){
2040078c:	fd010113          	addi	sp,sp,-48
20400790:	02812623          	sw	s0,44(sp)
20400794:	03010413          	addi	s0,sp,48
20400798:	fca42e23          	sw	a0,-36(s0)
2040079c:	fcb42c23          	sw	a1,-40(s0)
  const uint8_t * current = (const char *)ptr;
204007a0:	fdc42783          	lw	a5,-36(s0)
204007a4:	fef42423          	sw	a5,-24(s0)

  for (size_t jj = 0; jj < len; jj++) {
204007a8:	fe042623          	sw	zero,-20(s0)
204007ac:	0380006f          	j	204007e4 <uart1_write+0x58>
  	while(UART1_REG(UART_REG_TXFIFO) & 0x80000000) ;
204007b0:	00000013          	nop
204007b4:	100237b7          	lui	a5,0x10023
204007b8:	0007a783          	lw	a5,0(a5) # 10023000 <__stack_size+0x10022800>
204007bc:	fe07cce3          	bltz	a5,204007b4 <uart1_write+0x28>
  	UART1_REG(UART_REG_TXFIFO) = current[jj];
204007c0:	fe842703          	lw	a4,-24(s0)
204007c4:	fec42783          	lw	a5,-20(s0)
204007c8:	00f707b3          	add	a5,a4,a5
204007cc:	0007c703          	lbu	a4,0(a5)
204007d0:	100237b7          	lui	a5,0x10023
204007d4:	00e7a023          	sw	a4,0(a5) # 10023000 <__stack_size+0x10022800>
  for (size_t jj = 0; jj < len; jj++) {
204007d8:	fec42783          	lw	a5,-20(s0)
204007dc:	00178793          	addi	a5,a5,1
204007e0:	fef42623          	sw	a5,-20(s0)
204007e4:	fec42703          	lw	a4,-20(s0)
204007e8:	fd842783          	lw	a5,-40(s0)
204007ec:	fcf762e3          	bltu	a4,a5,204007b0 <uart1_write+0x24>
  }
  return len;
204007f0:	fd842783          	lw	a5,-40(s0)
}
204007f4:	00078513          	mv	a0,a5
204007f8:	02c12403          	lw	s0,44(sp)
204007fc:	03010113          	addi	sp,sp,48
20400800:	00008067          	ret

20400804 <uart1_read>:

static ssize_t uart1_read(void* ptr, size_t len)
{
20400804:	fd010113          	addi	sp,sp,-48
20400808:	02812623          	sw	s0,44(sp)
2040080c:	03010413          	addi	s0,sp,48
20400810:	fca42e23          	sw	a0,-36(s0)
20400814:	fcb42c23          	sw	a1,-40(s0)
  uint8_t * current = (uint8_t *)ptr;
20400818:	fdc42783          	lw	a5,-36(s0)
2040081c:	fef42623          	sw	a5,-20(s0)
  volatile uint32_t * uart_rx = (uint32_t *)(UART1_CTRL_ADDR + UART_REG_RXFIFO);
20400820:	100237b7          	lui	a5,0x10023
20400824:	00478793          	addi	a5,a5,4 # 10023004 <__stack_size+0x10022804>
20400828:	fef42223          	sw	a5,-28(s0)


  ssize_t result = 0;
2040082c:	fe042423          	sw	zero,-24(s0)

  for (current = (uint8_t *)ptr;
20400830:	fdc42783          	lw	a5,-36(s0)
20400834:	fef42623          	sw	a5,-20(s0)
20400838:	0400006f          	j	20400878 <uart1_read+0x74>
      current < ((uint8_t *)ptr) + len;
      current ++) {
    uint32_t current_data = *uart_rx;
2040083c:	fe442783          	lw	a5,-28(s0)
20400840:	0007a783          	lw	a5,0(a5)
20400844:	fef42023          	sw	a5,-32(s0)
    if((current_data & 0x80000000)){
20400848:	fe042783          	lw	a5,-32(s0)
2040084c:	0407c263          	bltz	a5,20400890 <uart1_read+0x8c>
        break;
    }
    *current = current_data;
20400850:	fe042783          	lw	a5,-32(s0)
20400854:	0ff7f713          	andi	a4,a5,255
20400858:	fec42783          	lw	a5,-20(s0)
2040085c:	00e78023          	sb	a4,0(a5)
    result++;
20400860:	fe842783          	lw	a5,-24(s0)
20400864:	00178793          	addi	a5,a5,1
20400868:	fef42423          	sw	a5,-24(s0)
      current ++) {
2040086c:	fec42783          	lw	a5,-20(s0)
20400870:	00178793          	addi	a5,a5,1
20400874:	fef42623          	sw	a5,-20(s0)
      current < ((uint8_t *)ptr) + len;
20400878:	fdc42703          	lw	a4,-36(s0)
2040087c:	fd842783          	lw	a5,-40(s0)
20400880:	00f707b3          	add	a5,a4,a5
  for (current = (uint8_t *)ptr;
20400884:	fec42703          	lw	a4,-20(s0)
20400888:	faf76ae3          	bltu	a4,a5,2040083c <uart1_read+0x38>
2040088c:	0080006f          	j	20400894 <uart1_read+0x90>
        break;
20400890:	00000013          	nop
  }
  return result;
20400894:	fe842783          	lw	a5,-24(s0)
}
20400898:	00078513          	mv	a0,a5
2040089c:	02c12403          	lw	s0,44(sp)
204008a0:	03010113          	addi	sp,sp,48
204008a4:	00008067          	ret

204008a8 <write_serial>:

#define CIRCULAR_BUFFER_SIZE (8192)
char circular_buffer_data[CIRCULAR_BUFFER_SIZE];

// Called by TVM to write serial data to the UART.
ssize_t write_serial(const uint8_t* data, size_t size) {
204008a8:	fd010113          	addi	sp,sp,-48
204008ac:	02112623          	sw	ra,44(sp)
204008b0:	02812423          	sw	s0,40(sp)
204008b4:	03010413          	addi	s0,sp,48
204008b8:	fca42e23          	sw	a0,-36(s0)
204008bc:	fcb42c23          	sw	a1,-40(s0)
  size_t written = 0;
204008c0:	fe042623          	sw	zero,-20(s0)

  while(written < size){
204008c4:	03c0006f          	j	20400900 <write_serial+0x58>
    written += uart1_write(data+written, size-written);
204008c8:	fdc42703          	lw	a4,-36(s0)
204008cc:	fec42783          	lw	a5,-20(s0)
204008d0:	00f706b3          	add	a3,a4,a5
204008d4:	fd842703          	lw	a4,-40(s0)
204008d8:	fec42783          	lw	a5,-20(s0)
204008dc:	40f707b3          	sub	a5,a4,a5
204008e0:	00078593          	mv	a1,a5
204008e4:	00068513          	mv	a0,a3
204008e8:	ea5ff0ef          	jal	ra,2040078c <uart1_write>
204008ec:	00050793          	mv	a5,a0
204008f0:	00078713          	mv	a4,a5
204008f4:	fec42783          	lw	a5,-20(s0)
204008f8:	00e787b3          	add	a5,a5,a4
204008fc:	fef42623          	sw	a5,-20(s0)
  while(written < size){
20400900:	fec42703          	lw	a4,-20(s0)
20400904:	fd842783          	lw	a5,-40(s0)
20400908:	fcf760e3          	bltu	a4,a5,204008c8 <write_serial+0x20>
  }

  return size;
2040090c:	fd842783          	lw	a5,-40(s0)
}
20400910:	00078513          	mv	a0,a5
20400914:	02c12083          	lw	ra,44(sp)
20400918:	02812403          	lw	s0,40(sp)
2040091c:	03010113          	addi	sp,sp,48
20400920:	00008067          	ret

20400924 <TVMPlatformFormatMessage>:

// Called by TVM when a message needs to be formatted.
size_t TVMPlatformFormatMessage(char* out_buf, size_t out_buf_size_bytes, const char* fmt,
                                va_list args) {
20400924:	fe010113          	addi	sp,sp,-32
20400928:	00112e23          	sw	ra,28(sp)
2040092c:	00812c23          	sw	s0,24(sp)
20400930:	02010413          	addi	s0,sp,32
20400934:	fea42623          	sw	a0,-20(s0)
20400938:	feb42423          	sw	a1,-24(s0)
2040093c:	fec42223          	sw	a2,-28(s0)
20400940:	fed42023          	sw	a3,-32(s0)
  return vsnprintf(out_buf, out_buf_size_bytes, fmt, args);
20400944:	fe042683          	lw	a3,-32(s0)
20400948:	fe442603          	lw	a2,-28(s0)
2040094c:	fe842583          	lw	a1,-24(s0)
20400950:	fec42503          	lw	a0,-20(s0)
20400954:	53e160ef          	jal	ra,20416e92 <vsnprintf>
20400958:	00050793          	mv	a5,a0
}
2040095c:	00078513          	mv	a0,a5
20400960:	01c12083          	lw	ra,28(sp)
20400964:	01812403          	lw	s0,24(sp)
20400968:	02010113          	addi	sp,sp,32
2040096c:	00008067          	ret

20400970 <TVMPlatformAbort>:

// Called by TVM when an internal invariant is violated, and execution cannot continue.
void TVMPlatformAbort(tvm_crt_error_t error) {
20400970:	fe010113          	addi	sp,sp,-32
20400974:	00112e23          	sw	ra,28(sp)
20400978:	00812c23          	sw	s0,24(sp)
2040097c:	02010413          	addi	s0,sp,32
20400980:	fea42623          	sw	a0,-20(s0)
  TVMLogf("TVMError: 0x%x", error);
20400984:	fec42583          	lw	a1,-20(s0)
20400988:	0001f517          	auipc	a0,0x1f
2040098c:	07450513          	addi	a0,a0,116 # 2041f9fc <__func__.2128+0x74>
20400990:	0c80d0ef          	jal	ra,2040da58 <TVMLogf>
  exit(-1);
20400994:	fff00513          	li	a0,-1
20400998:	3aa120ef          	jal	ra,20412d42 <exit>

2040099c <TVMPlatformGenerateRandom>:
}

// Called by TVM to generate random data.
tvm_crt_error_t TVMPlatformGenerateRandom(uint8_t* buffer, size_t num_bytes) {
2040099c:	fd010113          	addi	sp,sp,-48
204009a0:	02812623          	sw	s0,44(sp)
204009a4:	03010413          	addi	s0,sp,48
204009a8:	fca42e23          	sw	a0,-36(s0)
204009ac:	fcb42c23          	sw	a1,-40(s0)
  //TODO: generate actual random numbers
  for(size_t i = 0; i < num_bytes; i++){
204009b0:	fe042623          	sw	zero,-20(s0)
204009b4:	0280006f          	j	204009dc <TVMPlatformGenerateRandom+0x40>
    buffer[i] = i % 256;
204009b8:	fdc42703          	lw	a4,-36(s0)
204009bc:	fec42783          	lw	a5,-20(s0)
204009c0:	00f707b3          	add	a5,a4,a5
204009c4:	fec42703          	lw	a4,-20(s0)
204009c8:	0ff77713          	andi	a4,a4,255
204009cc:	00e78023          	sb	a4,0(a5)
  for(size_t i = 0; i < num_bytes; i++){
204009d0:	fec42783          	lw	a5,-20(s0)
204009d4:	00178793          	addi	a5,a5,1
204009d8:	fef42623          	sw	a5,-20(s0)
204009dc:	fec42703          	lw	a4,-20(s0)
204009e0:	fd842783          	lw	a5,-40(s0)
204009e4:	fcf76ae3          	bltu	a4,a5,204009b8 <TVMPlatformGenerateRandom+0x1c>
  }

  return kTvmErrorNoError;
204009e8:	00000793          	li	a5,0
}
204009ec:	00078513          	mv	a0,a5
204009f0:	02c12403          	lw	s0,44(sp)
204009f4:	03010113          	addi	sp,sp,48
204009f8:	00008067          	ret

204009fc <TVMPlatformMemoryAllocate>:


// Called by TVM to allocate memory.
tvm_crt_error_t TVMPlatformMemoryAllocate(size_t num_bytes, DLDevice dev, void** out_ptr) {
204009fc:	fe010113          	addi	sp,sp,-32
20400a00:	00112e23          	sw	ra,28(sp)
20400a04:	00812c23          	sw	s0,24(sp)
20400a08:	02010413          	addi	s0,sp,32
20400a0c:	fea42623          	sw	a0,-20(s0)
20400a10:	feb42223          	sw	a1,-28(s0)
20400a14:	fec42423          	sw	a2,-24(s0)
20400a18:	fed42023          	sw	a3,-32(s0)
  *out_ptr =  malloc(num_bytes);
20400a1c:	fec42503          	lw	a0,-20(s0)
20400a20:	718110ef          	jal	ra,20412138 <__wrap_malloc>
20400a24:	00050793          	mv	a5,a0
20400a28:	00078713          	mv	a4,a5
20400a2c:	fe042783          	lw	a5,-32(s0)
20400a30:	00e7a023          	sw	a4,0(a5)
  return (*out_ptr == NULL) ? kTvmErrorPlatformNoMemory : kTvmErrorNoError;
20400a34:	fe042783          	lw	a5,-32(s0)
20400a38:	0007a783          	lw	a5,0(a5)
20400a3c:	00079663          	bnez	a5,20400a48 <TVMPlatformMemoryAllocate+0x4c>
20400a40:	50300793          	li	a5,1283
20400a44:	0080006f          	j	20400a4c <TVMPlatformMemoryAllocate+0x50>
20400a48:	00000793          	li	a5,0
}
20400a4c:	00078513          	mv	a0,a5
20400a50:	01c12083          	lw	ra,28(sp)
20400a54:	01812403          	lw	s0,24(sp)
20400a58:	02010113          	addi	sp,sp,32
20400a5c:	00008067          	ret

20400a60 <TVMPlatformMemoryFree>:

// Called by TVM to deallocate memory.
tvm_crt_error_t TVMPlatformMemoryFree(void* ptr, DLDevice dev) {
20400a60:	fe010113          	addi	sp,sp,-32
20400a64:	00112e23          	sw	ra,28(sp)
20400a68:	00812c23          	sw	s0,24(sp)
20400a6c:	02010413          	addi	s0,sp,32
20400a70:	fea42623          	sw	a0,-20(s0)
20400a74:	feb42223          	sw	a1,-28(s0)
20400a78:	fec42423          	sw	a2,-24(s0)
  free(ptr);
20400a7c:	fec42503          	lw	a0,-20(s0)
20400a80:	708110ef          	jal	ra,20412188 <__wrap_free>
  return kTvmErrorNoError;
20400a84:	00000793          	li	a5,0
}
20400a88:	00078513          	mv	a0,a5
20400a8c:	01c12083          	lw	ra,28(sp)
20400a90:	01812403          	lw	s0,24(sp)
20400a94:	02010113          	addi	sp,sp,32
20400a98:	00008067          	ret

20400a9c <TVMPlatformTimerStart>:


// Called to start system timer.
tvm_crt_error_t TVMPlatformTimerStart() {
20400a9c:	ff010113          	addi	sp,sp,-16
20400aa0:	00812623          	sw	s0,12(sp)
20400aa4:	01010413          	addi	s0,sp,16
  //TODO
  return kTvmErrorNoError;
20400aa8:	00000793          	li	a5,0
}
20400aac:	00078513          	mv	a0,a5
20400ab0:	00c12403          	lw	s0,12(sp)
20400ab4:	01010113          	addi	sp,sp,16
20400ab8:	00008067          	ret

20400abc <TVMPlatformTimerStop>:

// Called to stop system timer.
tvm_crt_error_t TVMPlatformTimerStop(double* elapsed_time_seconds) {
20400abc:	fe010113          	addi	sp,sp,-32
20400ac0:	00812e23          	sw	s0,28(sp)
20400ac4:	02010413          	addi	s0,sp,32
20400ac8:	fea42623          	sw	a0,-20(s0)
  //TODO
  return kTvmErrorNoError;
20400acc:	00000793          	li	a5,0
}
20400ad0:	00078513          	mv	a0,a5
20400ad4:	01c12403          	lw	s0,28(sp)
20400ad8:	02010113          	addi	sp,sp,32
20400adc:	00008067          	ret

20400ae0 <uart_irq_cb>:


// UART interrupt callback.
void uart_irq_cb(const struct device* dev, void* user_data) {
20400ae0:	fe010113          	addi	sp,sp,-32
20400ae4:	00812e23          	sw	s0,28(sp)
20400ae8:	02010413          	addi	s0,sp,32
20400aec:	fea42623          	sw	a0,-20(s0)
20400af0:	feb42423          	sw	a1,-24(s0)

}
20400af4:	00000013          	nop
20400af8:	01c12403          	lw	s0,28(sp)
20400afc:	02010113          	addi	sp,sp,32
20400b00:	00008067          	ret

20400b04 <TVMSystemLibEntryPoint>:

const void* TVMSystemLibEntryPoint(void) {
20400b04:	ff010113          	addi	sp,sp,-16
20400b08:	00812623          	sw	s0,12(sp)
20400b0c:	01010413          	addi	s0,sp,16
  return NULL;
20400b10:	00000793          	li	a5,0
}
20400b14:	00078513          	mv	a0,a5
20400b18:	00c12403          	lw	s0,12(sp)
20400b1c:	01010113          	addi	sp,sp,16
20400b20:	00008067          	ret

20400b24 <main>:

// The main function of this application.
void main(void) {
20400b24:	fd010113          	addi	sp,sp,-48
20400b28:	02112623          	sw	ra,44(sp)
20400b2c:	02812423          	sw	s0,40(sp)
20400b30:	03010413          	addi	s0,sp,48
  uart1_init(115200);
20400b34:	0001c7b7          	lui	a5,0x1c
20400b38:	20078513          	addi	a0,a5,512 # 1c200 <__stack_size+0x1ba00>
20400b3c:	b81ff0ef          	jal	ra,204006bc <uart1_init>

  cbuf_handle_t circular_buffer = circular_buf_init(circular_buffer_data, CIRCULAR_BUFFER_SIZE);
20400b40:	000025b7          	lui	a1,0x2
20400b44:	5fc00517          	auipc	a0,0x5fc00
20400b48:	3a050513          	addi	a0,a0,928 # 80000ee4 <circular_buffer_data>
20400b4c:	f10ff0ef          	jal	ra,2040025c <circular_buf_init>
20400b50:	fea42623          	sw	a0,-20(s0)

  // Initialize microTVM RPC server, which will receive commands from the UART and execute them.
  microtvm_rpc_server_t server = MicroTVMRpcServerInit(write_serial, NULL);
20400b54:	00000593          	li	a1,0
20400b58:	00000517          	auipc	a0,0x0
20400b5c:	d5050513          	addi	a0,a0,-688 # 204008a8 <write_serial>
20400b60:	5c10c0ef          	jal	ra,2040d920 <MicroTVMRpcServerInit>
20400b64:	fea42423          	sw	a0,-24(s0)
  TVMLogf("microTVM Zephyr runtime - running");
20400b68:	0001f517          	auipc	a0,0x1f
20400b6c:	ea450513          	addi	a0,a0,-348 # 2041fa0c <__func__.2128+0x84>
20400b70:	6e90c0ef          	jal	ra,2040da58 <TVMLogf>
    uint8_t* data;
    size_t bytes_read;
    //unsigned int key = irq_lock();
    //size_t bytes_read =  circular_buf_size(circular_buffer);
    //data = circular_buf_get_head(circular_buffer, );
    if (bytes_read > 0) {
20400b74:	fe442783          	lw	a5,-28(s0)
20400b78:	fe078ee3          	beqz	a5,20400b74 <main+0x50>
      size_t bytes_remaining = bytes_read;
20400b7c:	fe442783          	lw	a5,-28(s0)
20400b80:	fcf42a23          	sw	a5,-44(s0)
      while (bytes_remaining > 0) {
20400b84:	03c0006f          	j	20400bc0 <main+0x9c>
        // Pass the received bytes to the RPC server.
        tvm_crt_error_t err = MicroTVMRpcServerLoop(server, &data, &bytes_remaining);
20400b88:	fd440713          	addi	a4,s0,-44
20400b8c:	fd840793          	addi	a5,s0,-40
20400b90:	00070613          	mv	a2,a4
20400b94:	00078593          	mv	a1,a5
20400b98:	fe842503          	lw	a0,-24(s0)
20400b9c:	0280d0ef          	jal	ra,2040dbc4 <MicroTVMRpcServerLoop>
20400ba0:	fca42e23          	sw	a0,-36(s0)
        if (err != kTvmErrorNoError && err != kTvmErrorFramingShortPacket) {
20400ba4:	fdc42783          	lw	a5,-36(s0)
20400ba8:	00078c63          	beqz	a5,20400bc0 <main+0x9c>
20400bac:	fdc42703          	lw	a4,-36(s0)
20400bb0:	20100793          	li	a5,513
20400bb4:	00f70663          	beq	a4,a5,20400bc0 <main+0x9c>
          TVMPlatformAbort(err);
20400bb8:	fdc42503          	lw	a0,-36(s0)
20400bbc:	db5ff0ef          	jal	ra,20400970 <TVMPlatformAbort>
      while (bytes_remaining > 0) {
20400bc0:	fd442783          	lw	a5,-44(s0)
20400bc4:	fc0792e3          	bnez	a5,20400b88 <main+0x64>
        }
      }
      //int err = circular_buf_get_finish(circular_buffer, bytes_read);
      int err;
      if (err != 0) {
20400bc8:	fe042783          	lw	a5,-32(s0)
20400bcc:	fa0784e3          	beqz	a5,20400b74 <main+0x50>
        TVMPlatformAbort((tvm_crt_error_t)0xbeef6);
20400bd0:	000bf7b7          	lui	a5,0xbf
20400bd4:	ef678513          	addi	a0,a5,-266 # beef6 <__stack_size+0xbe6f6>
20400bd8:	d99ff0ef          	jal	ra,20400970 <TVMPlatformAbort>

20400bdc <TVMBackendAllocWorkspace>:
#include <tvm/runtime/crt/platform.h>

#include "crt_config.h"

void* TVMBackendAllocWorkspace(int device_type, int device_id, uint64_t nbytes, int dtype_code_hint,
                               int dtype_bits_hint) {
20400bdc:	fb010113          	addi	sp,sp,-80
20400be0:	04912223          	sw	s1,68(sp)
20400be4:	04112623          	sw	ra,76(sp)
20400be8:	00068493          	mv	s1,a3
20400bec:	04812423          	sw	s0,72(sp)
20400bf0:	05212023          	sw	s2,64(sp)
20400bf4:	03312e23          	sw	s3,60(sp)
20400bf8:	03412c23          	sw	s4,56(sp)
20400bfc:	03512a23          	sw	s5,52(sp)
  tvm_crt_error_t err = kTvmErrorNoError;
  void* ptr = 0;
20400c00:	02012623          	sw	zero,44(sp)
  DLDevice dev = {device_type, device_id};
  assert(nbytes > 0);
20400c04:	00d666b3          	or	a3,a2,a3
20400c08:	04068e63          	beqz	a3,20400c64 <TVMBackendAllocWorkspace+0x88>
20400c0c:	00060413          	mv	s0,a2
20400c10:	00058993          	mv	s3,a1
20400c14:	00050913          	mv	s2,a0
  err = TVMPlatformMemoryAllocate(nbytes, dev, &ptr);
20400c18:	00050593          	mv	a1,a0
20400c1c:	02c10693          	addi	a3,sp,44
20400c20:	00098613          	mv	a2,s3
20400c24:	00040513          	mv	a0,s0
20400c28:	00078a93          	mv	s5,a5
20400c2c:	00070a13          	mv	s4,a4
20400c30:	dcdff0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20400c34:	00050793          	mv	a5,a0
  CHECK_EQ(err, kTvmErrorNoError,
20400c38:	04051663          	bnez	a0,20400c84 <TVMBackendAllocWorkspace+0xa8>
           "TVMBackendAllocWorkspace(%d, %d, %" PRIu64 ", %d, %d) -> %" PRId32, device_type,
           device_id, nbytes, dtype_code_hint, dtype_bits_hint, err);
  return ptr;
}
20400c3c:	04c12083          	lw	ra,76(sp)
20400c40:	04812403          	lw	s0,72(sp)
20400c44:	02c12503          	lw	a0,44(sp)
20400c48:	04412483          	lw	s1,68(sp)
20400c4c:	04012903          	lw	s2,64(sp)
20400c50:	03c12983          	lw	s3,60(sp)
20400c54:	03812a03          	lw	s4,56(sp)
20400c58:	03412a83          	lw	s5,52(sp)
20400c5c:	05010113          	addi	sp,sp,80
20400c60:	00008067          	ret
  assert(nbytes > 0);
20400c64:	0001f697          	auipc	a3,0x1f
20400c68:	de868693          	addi	a3,a3,-536 # 2041fa4c <__func__.3409+0x1c>
20400c6c:	0001f617          	auipc	a2,0x1f
20400c70:	dc460613          	addi	a2,a2,-572 # 2041fa30 <__func__.3409>
20400c74:	02800593          	li	a1,40
20400c78:	0001f517          	auipc	a0,0x1f
20400c7c:	de050513          	addi	a0,a0,-544 # 2041fa58 <__func__.3409+0x28>
20400c80:	070120ef          	jal	ra,20412cf0 <__assert_func>
  CHECK_EQ(err, kTvmErrorNoError,
20400c84:	0001f517          	auipc	a0,0x1f
20400c88:	e2050513          	addi	a0,a0,-480 # 2041faa4 <__func__.3409+0x74>
20400c8c:	00f12823          	sw	a5,16(sp)
20400c90:	01512623          	sw	s5,12(sp)
20400c94:	01412423          	sw	s4,8(sp)
20400c98:	00812023          	sw	s0,0(sp)
20400c9c:	00912223          	sw	s1,4(sp)
20400ca0:	00098813          	mv	a6,s3
20400ca4:	00090793          	mv	a5,s2
20400ca8:	0001f717          	auipc	a4,0x1f
20400cac:	de070713          	addi	a4,a4,-544 # 2041fa88 <__func__.3409+0x58>
20400cb0:	0001f697          	auipc	a3,0x1f
20400cb4:	dec68693          	addi	a3,a3,-532 # 2041fa9c <__func__.3409+0x6c>
20400cb8:	0001f617          	auipc	a2,0x1f
20400cbc:	de860613          	addi	a2,a2,-536 # 2041faa0 <__func__.3409+0x70>
20400cc0:	02c00593          	li	a1,44
20400cc4:	5950c0ef          	jal	ra,2040da58 <TVMLogf>
20400cc8:	50000513          	li	a0,1280
20400ccc:	ca5ff0ef          	jal	ra,20400970 <TVMPlatformAbort>

20400cd0 <TVMBackendFreeWorkspace>:

int TVMBackendFreeWorkspace(int device_type, int device_id, void* ptr) {
20400cd0:	00058713          	mv	a4,a1
20400cd4:	00060793          	mv	a5,a2
  tvm_crt_error_t err = kTvmErrorNoError;
  DLDevice dev = {device_type, device_id};
  err = TVMPlatformMemoryFree(ptr, dev);
20400cd8:	00050593          	mv	a1,a0
20400cdc:	00070613          	mv	a2,a4
20400ce0:	00078513          	mv	a0,a5
20400ce4:	d7dff06f          	j	20400a60 <TVMPlatformMemoryFree>

20400ce8 <TVMBackendParallelLaunch>:
  return err;
}

int TVMBackendParallelLaunch(FTVMParallelLambda flambda, void* cdata, int num_task) {
20400ce8:	fe010113          	addi	sp,sp,-32
  TVMParallelGroupEnv env;
  env.num_task = 1;
20400cec:	00100713          	li	a4,1
int TVMBackendParallelLaunch(FTVMParallelLambda flambda, void* cdata, int num_task) {
20400cf0:	00112e23          	sw	ra,28(sp)
20400cf4:	00050793          	mv	a5,a0
  flambda(0, &env, cdata);
20400cf8:	00058613          	mv	a2,a1
  env.num_task = 1;
20400cfc:	00e12623          	sw	a4,12(sp)
  flambda(0, &env, cdata);
20400d00:	00810593          	addi	a1,sp,8
20400d04:	00000513          	li	a0,0
20400d08:	000780e7          	jalr	a5
  return 0;
}
20400d0c:	01c12083          	lw	ra,28(sp)
20400d10:	00000513          	li	a0,0
20400d14:	02010113          	addi	sp,sp,32
20400d18:	00008067          	ret

20400d1c <TVMBackendRegisterSystemLibSymbol>:

int TVMBackendRegisterSystemLibSymbol(const char* name, void* ptr) {
  return TVMFuncRegisterGlobal(name, ptr, 0);
20400d1c:	00000613          	li	a2,0
20400d20:	7300006f          	j	20401450 <TVMFuncRegisterGlobal>

20400d24 <TVMAPISetLastError>:

// Handle internal errors

static char g_last_error[1024];

void TVMAPISetLastError(const char* msg) {
20400d24:	fe010113          	addi	sp,sp,-32
20400d28:	00112e23          	sw	ra,28(sp)
20400d2c:	00812c23          	sw	s0,24(sp)
20400d30:	02010413          	addi	s0,sp,32
20400d34:	fea42623          	sw	a0,-20(s0)
  strncpy(g_last_error, msg, sizeof(g_last_error) - 1);
20400d38:	3ff00613          	li	a2,1023
20400d3c:	fec42583          	lw	a1,-20(s0)
20400d40:	5fc00517          	auipc	a0,0x5fc00
20400d44:	d3050513          	addi	a0,a0,-720 # 80000a70 <g_last_error>
20400d48:	63c120ef          	jal	ra,20413384 <strncpy>
  g_last_error[sizeof(g_last_error) - 1] = 0;
20400d4c:	5fc00797          	auipc	a5,0x5fc00
20400d50:	d2478793          	addi	a5,a5,-732 # 80000a70 <g_last_error>
20400d54:	3e078fa3          	sb	zero,1023(a5)
}
20400d58:	00000013          	nop
20400d5c:	01c12083          	lw	ra,28(sp)
20400d60:	01812403          	lw	s0,24(sp)
20400d64:	02010113          	addi	sp,sp,32
20400d68:	00008067          	ret

20400d6c <TVMAPIErrorf>:

__attribute__((format(printf, 1, 2))) int TVMAPIErrorf(const char* msg, ...) {
20400d6c:	fb010113          	addi	sp,sp,-80
20400d70:	02112623          	sw	ra,44(sp)
20400d74:	02812423          	sw	s0,40(sp)
20400d78:	03010413          	addi	s0,sp,48
20400d7c:	fca42e23          	sw	a0,-36(s0)
20400d80:	00b42223          	sw	a1,4(s0)
20400d84:	00c42423          	sw	a2,8(s0)
20400d88:	00d42623          	sw	a3,12(s0)
20400d8c:	00e42823          	sw	a4,16(s0)
20400d90:	00f42a23          	sw	a5,20(s0)
20400d94:	01042c23          	sw	a6,24(s0)
20400d98:	01142e23          	sw	a7,28(s0)
  va_list args;
  int to_return;

  va_start(args, msg);
20400d9c:	02040793          	addi	a5,s0,32
20400da0:	fe478793          	addi	a5,a5,-28
20400da4:	fef42423          	sw	a5,-24(s0)
  to_return = vsnprintf(g_last_error, sizeof(g_last_error), msg, args);
20400da8:	fe842783          	lw	a5,-24(s0)
20400dac:	00078693          	mv	a3,a5
20400db0:	fdc42603          	lw	a2,-36(s0)
20400db4:	40000593          	li	a1,1024
20400db8:	5fc00517          	auipc	a0,0x5fc00
20400dbc:	cb850513          	addi	a0,a0,-840 # 80000a70 <g_last_error>
20400dc0:	0d2160ef          	jal	ra,20416e92 <vsnprintf>
20400dc4:	fea42623          	sw	a0,-20(s0)
  va_end(args);

  return to_return;
20400dc8:	fec42783          	lw	a5,-20(s0)
}
20400dcc:	00078513          	mv	a0,a5
20400dd0:	02c12083          	lw	ra,44(sp)
20400dd4:	02812403          	lw	s0,40(sp)
20400dd8:	05010113          	addi	sp,sp,80
20400ddc:	00008067          	ret

20400de0 <TVMGetLastError>:

const char* TVMGetLastError(void) { return g_last_error; }
20400de0:	ff010113          	addi	sp,sp,-16
20400de4:	00812623          	sw	s0,12(sp)
20400de8:	01010413          	addi	s0,sp,16
20400dec:	5fc00797          	auipc	a5,0x5fc00
20400df0:	c8478793          	addi	a5,a5,-892 # 80000a70 <g_last_error>
20400df4:	00078513          	mv	a0,a5
20400df8:	00c12403          	lw	s0,12(sp)
20400dfc:	01010113          	addi	sp,sp,16
20400e00:	00008067          	ret

20400e04 <TVMArrayAlloc>:

// Manipulate NDArray on target device

int TVMArrayAlloc(const tvm_index_t* shape, int ndim, int dtype_code, int dtype_bits,
                  int dtype_lanes, int device_type, int device_id, TVMArrayHandle* out) {
20400e04:	f9010113          	addi	sp,sp,-112
20400e08:	06112623          	sw	ra,108(sp)
20400e0c:	06812423          	sw	s0,104(sp)
20400e10:	07010413          	addi	s0,sp,112
20400e14:	faa42623          	sw	a0,-84(s0)
20400e18:	fab42423          	sw	a1,-88(s0)
20400e1c:	fac42223          	sw	a2,-92(s0)
20400e20:	fad42023          	sw	a3,-96(s0)
20400e24:	f8e42e23          	sw	a4,-100(s0)
20400e28:	f8f42c23          	sw	a5,-104(s0)
20400e2c:	f9042a23          	sw	a6,-108(s0)
20400e30:	f9142823          	sw	a7,-112(s0)
  DLDataType dtype;
  dtype.code = dtype_code;
20400e34:	fa442783          	lw	a5,-92(s0)
20400e38:	0ff7f793          	andi	a5,a5,255
20400e3c:	fef40423          	sb	a5,-24(s0)
  dtype.bits = dtype_bits;
20400e40:	fa042783          	lw	a5,-96(s0)
20400e44:	0ff7f793          	andi	a5,a5,255
20400e48:	fef404a3          	sb	a5,-23(s0)
  dtype.lanes = dtype_lanes;
20400e4c:	f9c42783          	lw	a5,-100(s0)
20400e50:	01079793          	slli	a5,a5,0x10
20400e54:	0107d793          	srli	a5,a5,0x10
20400e58:	fef41523          	sh	a5,-22(s0)
  DLDevice dev;
  dev.device_type = (DLDeviceType)device_type;
20400e5c:	f9842783          	lw	a5,-104(s0)
20400e60:	fef42023          	sw	a5,-32(s0)
  dev.device_id = device_id;
20400e64:	f9442783          	lw	a5,-108(s0)
20400e68:	fef42223          	sw	a5,-28(s0)
  TVMNDArray arr;
  int status = TVMNDArray_Empty(ndim, shape, dtype, dev, &arr);
20400e6c:	fb840793          	addi	a5,s0,-72
20400e70:	fe042683          	lw	a3,-32(s0)
20400e74:	fe442703          	lw	a4,-28(s0)
20400e78:	fe842603          	lw	a2,-24(s0)
20400e7c:	fac42583          	lw	a1,-84(s0)
20400e80:	fa842503          	lw	a0,-88(s0)
20400e84:	669010ef          	jal	ra,20402cec <TVMNDArray_Empty>
20400e88:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20400e8c:	fec42783          	lw	a5,-20(s0)
20400e90:	00078663          	beqz	a5,20400e9c <TVMArrayAlloc+0x98>
    return status;
20400e94:	fec42783          	lw	a5,-20(s0)
20400e98:	02c0006f          	j	20400ec4 <TVMArrayAlloc+0xc0>
  }
  **out = arr.dl_tensor;
20400e9c:	f9042783          	lw	a5,-112(s0)
20400ea0:	0007a783          	lw	a5,0(a5)
20400ea4:	00078693          	mv	a3,a5
20400ea8:	fb840793          	addi	a5,s0,-72
20400eac:	02800713          	li	a4,40
20400eb0:	00070613          	mv	a2,a4
20400eb4:	00078593          	mv	a1,a5
20400eb8:	00068513          	mv	a0,a3
20400ebc:	134120ef          	jal	ra,20412ff0 <memcpy>
  return 0;
20400ec0:	00000793          	li	a5,0
}
20400ec4:	00078513          	mv	a0,a5
20400ec8:	06c12083          	lw	ra,108(sp)
20400ecc:	06812403          	lw	s0,104(sp)
20400ed0:	07010113          	addi	sp,sp,112
20400ed4:	00008067          	ret

20400ed8 <TVMArrayFree>:

int TVMArrayFree(TVMArrayHandle handle) {
20400ed8:	fb010113          	addi	sp,sp,-80
20400edc:	04112623          	sw	ra,76(sp)
20400ee0:	04812423          	sw	s0,72(sp)
20400ee4:	05010413          	addi	s0,sp,80
20400ee8:	faa42e23          	sw	a0,-68(s0)
  TVMNDArray arr;
  arr.dl_tensor = *handle;
20400eec:	fbc42703          	lw	a4,-68(s0)
20400ef0:	fc840793          	addi	a5,s0,-56
20400ef4:	00070693          	mv	a3,a4
20400ef8:	02800713          	li	a4,40
20400efc:	00070613          	mv	a2,a4
20400f00:	00068593          	mv	a1,a3
20400f04:	00078513          	mv	a0,a5
20400f08:	0e8120ef          	jal	ra,20412ff0 <memcpy>
  return TVMNDArray_Release(&arr);
20400f0c:	fc840793          	addi	a5,s0,-56
20400f10:	00078513          	mv	a0,a5
20400f14:	418020ef          	jal	ra,2040332c <TVMNDArray_Release>
20400f18:	00050793          	mv	a5,a0
}
20400f1c:	00078513          	mv	a0,a5
20400f20:	04c12083          	lw	ra,76(sp)
20400f24:	04812403          	lw	s0,72(sp)
20400f28:	05010113          	addi	sp,sp,80
20400f2c:	00008067          	ret

20400f30 <TVMDeviceAllocDataSpace>:

int TVMDeviceAllocDataSpace(DLDevice dev, size_t nbytes, size_t alignment, DLDataType type_hint,
                            void** out_data) {
20400f30:	fd010113          	addi	sp,sp,-48
20400f34:	02112623          	sw	ra,44(sp)
20400f38:	02812423          	sw	s0,40(sp)
20400f3c:	03010413          	addi	s0,sp,48
20400f40:	fea42423          	sw	a0,-24(s0)
20400f44:	feb42623          	sw	a1,-20(s0)
20400f48:	fec42223          	sw	a2,-28(s0)
20400f4c:	fed42023          	sw	a3,-32(s0)
20400f50:	fce42e23          	sw	a4,-36(s0)
20400f54:	fcf42c23          	sw	a5,-40(s0)
  if (alignment != 1) {
20400f58:	fe042703          	lw	a4,-32(s0)
20400f5c:	00100793          	li	a5,1
20400f60:	02f70c63          	beq	a4,a5,20400f98 <TVMDeviceAllocDataSpace+0x68>
    nbytes = (nbytes + alignment - 1) / alignment * alignment;
20400f64:	fe442703          	lw	a4,-28(s0)
20400f68:	fe042783          	lw	a5,-32(s0)
20400f6c:	00f707b3          	add	a5,a4,a5
20400f70:	fff78793          	addi	a5,a5,-1
20400f74:	fe042583          	lw	a1,-32(s0)
20400f78:	00078513          	mv	a0,a5
20400f7c:	06d1e0ef          	jal	ra,2041f7e8 <__udivsi3>
20400f80:	00050793          	mv	a5,a0
20400f84:	00078593          	mv	a1,a5
20400f88:	fe042503          	lw	a0,-32(s0)
20400f8c:	7e01e0ef          	jal	ra,2041f76c <__mulsi3>
20400f90:	00050793          	mv	a5,a0
20400f94:	fef42223          	sw	a5,-28(s0)
  }
  return TVMPlatformMemoryAllocate(nbytes, dev, out_data);
20400f98:	fd842683          	lw	a3,-40(s0)
20400f9c:	fe842583          	lw	a1,-24(s0)
20400fa0:	fec42603          	lw	a2,-20(s0)
20400fa4:	fe442503          	lw	a0,-28(s0)
20400fa8:	a55ff0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20400fac:	00050793          	mv	a5,a0
}
20400fb0:	00078513          	mv	a0,a5
20400fb4:	02c12083          	lw	ra,44(sp)
20400fb8:	02812403          	lw	s0,40(sp)
20400fbc:	03010113          	addi	sp,sp,48
20400fc0:	00008067          	ret

20400fc4 <TVMDeviceAllocDataSpaceWithScope>:

int TVMDeviceAllocDataSpaceWithScope(DLDevice dev, int ndim, const int64_t* shape, DLDataType dtype,
                                     const char* mem_scope, void** out_data) {
20400fc4:	fc010113          	addi	sp,sp,-64
20400fc8:	02112e23          	sw	ra,60(sp)
20400fcc:	02812c23          	sw	s0,56(sp)
20400fd0:	04010413          	addi	s0,sp,64
20400fd4:	fca42c23          	sw	a0,-40(s0)
20400fd8:	fcb42e23          	sw	a1,-36(s0)
20400fdc:	fcc42a23          	sw	a2,-44(s0)
20400fe0:	fcd42823          	sw	a3,-48(s0)
20400fe4:	fce42623          	sw	a4,-52(s0)
20400fe8:	fcf42423          	sw	a5,-56(s0)
20400fec:	fd042223          	sw	a6,-60(s0)
  size_t nbytes = 1;
20400ff0:	00100793          	li	a5,1
20400ff4:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < ndim; ++i) {
20400ff8:	fe042423          	sw	zero,-24(s0)
20400ffc:	03c0006f          	j	20401038 <TVMDeviceAllocDataSpaceWithScope+0x74>
    nbytes *= shape[i];
20401000:	fe842783          	lw	a5,-24(s0)
20401004:	00379793          	slli	a5,a5,0x3
20401008:	fd042703          	lw	a4,-48(s0)
2040100c:	00f707b3          	add	a5,a4,a5
20401010:	0047a803          	lw	a6,4(a5)
20401014:	0007a783          	lw	a5,0(a5)
20401018:	00078593          	mv	a1,a5
2040101c:	fec42503          	lw	a0,-20(s0)
20401020:	74c1e0ef          	jal	ra,2041f76c <__mulsi3>
20401024:	00050793          	mv	a5,a0
20401028:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < ndim; ++i) {
2040102c:	fe842783          	lw	a5,-24(s0)
20401030:	00178793          	addi	a5,a5,1
20401034:	fef42423          	sw	a5,-24(s0)
20401038:	fe842703          	lw	a4,-24(s0)
2040103c:	fd442783          	lw	a5,-44(s0)
20401040:	fcf740e3          	blt	a4,a5,20401000 <TVMDeviceAllocDataSpaceWithScope+0x3c>
  }
  nbytes *= (dtype.bits * dtype.lanes + 7) / 8;
20401044:	fcd44783          	lbu	a5,-51(s0)
20401048:	00078713          	mv	a4,a5
2040104c:	fce45783          	lhu	a5,-50(s0)
20401050:	00078593          	mv	a1,a5
20401054:	00070513          	mv	a0,a4
20401058:	7141e0ef          	jal	ra,2041f76c <__mulsi3>
2040105c:	00050793          	mv	a5,a0
20401060:	00778793          	addi	a5,a5,7
20401064:	41f7d713          	srai	a4,a5,0x1f
20401068:	00777713          	andi	a4,a4,7
2040106c:	00f707b3          	add	a5,a4,a5
20401070:	4037d793          	srai	a5,a5,0x3
20401074:	00078593          	mv	a1,a5
20401078:	fec42503          	lw	a0,-20(s0)
2040107c:	6f01e0ef          	jal	ra,2041f76c <__mulsi3>
20401080:	00050793          	mv	a5,a0
20401084:	fef42623          	sw	a5,-20(s0)

  int kAllocAlignment = 128;
20401088:	08000793          	li	a5,128
2040108c:	fef42023          	sw	a5,-32(s0)
  size_t align = (dtype.bits / 8) * dtype.lanes;
20401090:	fcd44783          	lbu	a5,-51(s0)
20401094:	0037d793          	srli	a5,a5,0x3
20401098:	0ff7f793          	andi	a5,a5,255
2040109c:	00078713          	mv	a4,a5
204010a0:	fce45783          	lhu	a5,-50(s0)
204010a4:	00078593          	mv	a1,a5
204010a8:	00070513          	mv	a0,a4
204010ac:	6c01e0ef          	jal	ra,2041f76c <__mulsi3>
204010b0:	00050793          	mv	a5,a0
204010b4:	fef42223          	sw	a5,-28(s0)
  if (align < kAllocAlignment) align = kAllocAlignment;
204010b8:	fe042783          	lw	a5,-32(s0)
204010bc:	fe442703          	lw	a4,-28(s0)
204010c0:	00f77663          	bleu	a5,a4,204010cc <TVMDeviceAllocDataSpaceWithScope+0x108>
204010c4:	fe042783          	lw	a5,-32(s0)
204010c8:	fef42223          	sw	a5,-28(s0)
  return TVMDeviceAllocDataSpace(dev, nbytes, align, dtype, out_data);
204010cc:	fc442783          	lw	a5,-60(s0)
204010d0:	fcc42703          	lw	a4,-52(s0)
204010d4:	fe442683          	lw	a3,-28(s0)
204010d8:	fec42603          	lw	a2,-20(s0)
204010dc:	fd842503          	lw	a0,-40(s0)
204010e0:	fdc42583          	lw	a1,-36(s0)
204010e4:	e4dff0ef          	jal	ra,20400f30 <TVMDeviceAllocDataSpace>
204010e8:	00050793          	mv	a5,a0
}
204010ec:	00078513          	mv	a0,a5
204010f0:	03c12083          	lw	ra,60(sp)
204010f4:	03812403          	lw	s0,56(sp)
204010f8:	04010113          	addi	sp,sp,64
204010fc:	00008067          	ret

20401100 <TVMDeviceFreeDataSpace>:

int TVMDeviceFreeDataSpace(DLDevice dev, void* ptr) { return TVMPlatformMemoryFree(ptr, dev); }
20401100:	fe010113          	addi	sp,sp,-32
20401104:	00112e23          	sw	ra,28(sp)
20401108:	00812c23          	sw	s0,24(sp)
2040110c:	02010413          	addi	s0,sp,32
20401110:	fea42423          	sw	a0,-24(s0)
20401114:	feb42623          	sw	a1,-20(s0)
20401118:	fec42223          	sw	a2,-28(s0)
2040111c:	fe842583          	lw	a1,-24(s0)
20401120:	fec42603          	lw	a2,-20(s0)
20401124:	fe442503          	lw	a0,-28(s0)
20401128:	939ff0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
2040112c:	00050793          	mv	a5,a0
20401130:	00078513          	mv	a0,a5
20401134:	01c12083          	lw	ra,28(sp)
20401138:	01812403          	lw	s0,24(sp)
2040113c:	02010113          	addi	sp,sp,32
20401140:	00008067          	ret

20401144 <IsContiguous>:

static bool IsContiguous(const DLTensor* arr) {
20401144:	fd010113          	addi	sp,sp,-48
20401148:	02112623          	sw	ra,44(sp)
2040114c:	02812423          	sw	s0,40(sp)
20401150:	03010413          	addi	s0,sp,48
20401154:	fca42e23          	sw	a0,-36(s0)
  if (arr->strides == NULL) return true;
20401158:	fdc42783          	lw	a5,-36(s0)
2040115c:	0187a783          	lw	a5,24(a5)
20401160:	00079663          	bnez	a5,2040116c <IsContiguous+0x28>
20401164:	00100793          	li	a5,1
20401168:	0c40006f          	j	2040122c <IsContiguous+0xe8>
  int64_t expected_stride = 1;
2040116c:	00100793          	li	a5,1
20401170:	00000813          	li	a6,0
20401174:	fef42423          	sw	a5,-24(s0)
20401178:	ff042623          	sw	a6,-20(s0)
  for (int32_t i = arr->ndim; i != 0; --i) {
2040117c:	fdc42783          	lw	a5,-36(s0)
20401180:	00c7a783          	lw	a5,12(a5)
20401184:	fef42223          	sw	a5,-28(s0)
20401188:	0980006f          	j	20401220 <IsContiguous+0xdc>
    int32_t k = i - 1;
2040118c:	fe442783          	lw	a5,-28(s0)
20401190:	fff78793          	addi	a5,a5,-1
20401194:	fef42023          	sw	a5,-32(s0)
    if (arr->strides[k] != expected_stride) return false;
20401198:	fdc42783          	lw	a5,-36(s0)
2040119c:	0187a703          	lw	a4,24(a5)
204011a0:	fe042783          	lw	a5,-32(s0)
204011a4:	00379793          	slli	a5,a5,0x3
204011a8:	00f707b3          	add	a5,a4,a5
204011ac:	0047a803          	lw	a6,4(a5)
204011b0:	0007a783          	lw	a5,0(a5)
204011b4:	fe842703          	lw	a4,-24(s0)
204011b8:	00078693          	mv	a3,a5
204011bc:	00d71863          	bne	a4,a3,204011cc <IsContiguous+0x88>
204011c0:	fec42703          	lw	a4,-20(s0)
204011c4:	00080793          	mv	a5,a6
204011c8:	00f70663          	beq	a4,a5,204011d4 <IsContiguous+0x90>
204011cc:	00000793          	li	a5,0
204011d0:	05c0006f          	j	2040122c <IsContiguous+0xe8>
    expected_stride *= arr->shape[k];
204011d4:	fdc42783          	lw	a5,-36(s0)
204011d8:	0147a703          	lw	a4,20(a5)
204011dc:	fe042783          	lw	a5,-32(s0)
204011e0:	00379793          	slli	a5,a5,0x3
204011e4:	00f707b3          	add	a5,a4,a5
204011e8:	0047a803          	lw	a6,4(a5)
204011ec:	0007a783          	lw	a5,0(a5)
204011f0:	00078613          	mv	a2,a5
204011f4:	00080693          	mv	a3,a6
204011f8:	fe842503          	lw	a0,-24(s0)
204011fc:	fec42583          	lw	a1,-20(s0)
20401200:	5841e0ef          	jal	ra,2041f784 <__muldi3>
20401204:	00050793          	mv	a5,a0
20401208:	00058813          	mv	a6,a1
2040120c:	fef42423          	sw	a5,-24(s0)
20401210:	ff042623          	sw	a6,-20(s0)
  for (int32_t i = arr->ndim; i != 0; --i) {
20401214:	fe442783          	lw	a5,-28(s0)
20401218:	fff78793          	addi	a5,a5,-1
2040121c:	fef42223          	sw	a5,-28(s0)
20401220:	fe442783          	lw	a5,-28(s0)
20401224:	f60794e3          	bnez	a5,2040118c <IsContiguous+0x48>
  }
  return true;
20401228:	00100793          	li	a5,1
}
2040122c:	00078513          	mv	a0,a5
20401230:	02c12083          	lw	ra,44(sp)
20401234:	02812403          	lw	s0,40(sp)
20401238:	03010113          	addi	sp,sp,48
2040123c:	00008067          	ret

20401240 <TVMDeviceCopyDataFromTo>:

int TVMDeviceCopyDataFromTo(DLTensor* from, DLTensor* to, TVMStreamHandle stream) {
20401240:	fd010113          	addi	sp,sp,-48
20401244:	02112623          	sw	ra,44(sp)
20401248:	02812423          	sw	s0,40(sp)
2040124c:	03010413          	addi	s0,sp,48
20401250:	fca42e23          	sw	a0,-36(s0)
20401254:	fcb42c23          	sw	a1,-40(s0)
20401258:	fcc42a23          	sw	a2,-44(s0)
  assert(IsContiguous(from) && IsContiguous(to));
2040125c:	fdc42503          	lw	a0,-36(s0)
20401260:	ee5ff0ef          	jal	ra,20401144 <IsContiguous>
20401264:	00050793          	mv	a5,a0
20401268:	00078a63          	beqz	a5,2040127c <TVMDeviceCopyDataFromTo+0x3c>
2040126c:	fd842503          	lw	a0,-40(s0)
20401270:	ed5ff0ef          	jal	ra,20401144 <IsContiguous>
20401274:	00050793          	mv	a5,a0
20401278:	02079263          	bnez	a5,2040129c <TVMDeviceCopyDataFromTo+0x5c>
2040127c:	0001f697          	auipc	a3,0x1f
20401280:	8ac68693          	addi	a3,a3,-1876 # 2041fb28 <__func__.3409+0xf8>
20401284:	0001f617          	auipc	a2,0x1f
20401288:	a6460613          	addi	a2,a2,-1436 # 2041fce8 <__func__.3846>
2040128c:	07800593          	li	a1,120
20401290:	0001f517          	auipc	a0,0x1f
20401294:	8c050513          	addi	a0,a0,-1856 # 2041fb50 <__func__.3409+0x120>
20401298:	259110ef          	jal	ra,20412cf0 <__assert_func>
  size_t size = 1;
2040129c:	00100793          	li	a5,1
204012a0:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < from->ndim; ++i) {
204012a4:	fe042423          	sw	zero,-24(s0)
204012a8:	0400006f          	j	204012e8 <TVMDeviceCopyDataFromTo+0xa8>
    size *= from->shape[i];
204012ac:	fdc42783          	lw	a5,-36(s0)
204012b0:	0147a703          	lw	a4,20(a5)
204012b4:	fe842783          	lw	a5,-24(s0)
204012b8:	00379793          	slli	a5,a5,0x3
204012bc:	00f707b3          	add	a5,a4,a5
204012c0:	0047a803          	lw	a6,4(a5)
204012c4:	0007a783          	lw	a5,0(a5)
204012c8:	00078593          	mv	a1,a5
204012cc:	fec42503          	lw	a0,-20(s0)
204012d0:	49c1e0ef          	jal	ra,2041f76c <__mulsi3>
204012d4:	00050793          	mv	a5,a0
204012d8:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < from->ndim; ++i) {
204012dc:	fe842783          	lw	a5,-24(s0)
204012e0:	00178793          	addi	a5,a5,1
204012e4:	fef42423          	sw	a5,-24(s0)
204012e8:	fdc42783          	lw	a5,-36(s0)
204012ec:	00c7a783          	lw	a5,12(a5)
204012f0:	fe842703          	lw	a4,-24(s0)
204012f4:	faf74ce3          	blt	a4,a5,204012ac <TVMDeviceCopyDataFromTo+0x6c>
  }
  size *= (from->dtype.bits * from->dtype.lanes + 7) / 8;
204012f8:	fdc42783          	lw	a5,-36(s0)
204012fc:	0117c783          	lbu	a5,17(a5)
20401300:	00078713          	mv	a4,a5
20401304:	fdc42783          	lw	a5,-36(s0)
20401308:	0127d783          	lhu	a5,18(a5)
2040130c:	00078593          	mv	a1,a5
20401310:	00070513          	mv	a0,a4
20401314:	4581e0ef          	jal	ra,2041f76c <__mulsi3>
20401318:	00050793          	mv	a5,a0
2040131c:	00778793          	addi	a5,a5,7
20401320:	41f7d713          	srai	a4,a5,0x1f
20401324:	00777713          	andi	a4,a4,7
20401328:	00f707b3          	add	a5,a4,a5
2040132c:	4037d793          	srai	a5,a5,0x3
20401330:	00078593          	mv	a1,a5
20401334:	fec42503          	lw	a0,-20(s0)
20401338:	4341e0ef          	jal	ra,2041f76c <__mulsi3>
2040133c:	00050793          	mv	a5,a0
20401340:	fef42623          	sw	a5,-20(s0)
  memcpy(((uint8_t*)to->data) + to->byte_offset, ((uint8_t*)from->data) + from->byte_offset, size);
20401344:	fd842783          	lw	a5,-40(s0)
20401348:	0007a703          	lw	a4,0(a5)
2040134c:	fd842783          	lw	a5,-40(s0)
20401350:	0247a803          	lw	a6,36(a5)
20401354:	0207a783          	lw	a5,32(a5)
20401358:	00f706b3          	add	a3,a4,a5
2040135c:	fdc42783          	lw	a5,-36(s0)
20401360:	0007a703          	lw	a4,0(a5)
20401364:	fdc42783          	lw	a5,-36(s0)
20401368:	0247a803          	lw	a6,36(a5)
2040136c:	0207a783          	lw	a5,32(a5)
20401370:	00f707b3          	add	a5,a4,a5
20401374:	fec42603          	lw	a2,-20(s0)
20401378:	00078593          	mv	a1,a5
2040137c:	00068513          	mv	a0,a3
20401380:	471110ef          	jal	ra,20412ff0 <memcpy>
  return 0;
20401384:	00000793          	li	a5,0
}
20401388:	00078513          	mv	a0,a5
2040138c:	02c12083          	lw	ra,44(sp)
20401390:	02812403          	lw	s0,40(sp)
20401394:	03010113          	addi	sp,sp,48
20401398:	00008067          	ret

2040139c <TVMStreamCreate>:

int TVMStreamCreate(int device_type, int device_id, TVMStreamHandle* out) {
2040139c:	fe010113          	addi	sp,sp,-32
204013a0:	00812e23          	sw	s0,28(sp)
204013a4:	02010413          	addi	s0,sp,32
204013a8:	fea42623          	sw	a0,-20(s0)
204013ac:	feb42423          	sw	a1,-24(s0)
204013b0:	fec42223          	sw	a2,-28(s0)
  out = NULL;
204013b4:	fe042223          	sw	zero,-28(s0)
  return 0;
204013b8:	00000793          	li	a5,0
}
204013bc:	00078513          	mv	a0,a5
204013c0:	01c12403          	lw	s0,28(sp)
204013c4:	02010113          	addi	sp,sp,32
204013c8:	00008067          	ret

204013cc <TVMStreamFree>:

int TVMStreamFree(int device_type, int device_id, TVMStreamHandle stream) { return 0; }
204013cc:	fe010113          	addi	sp,sp,-32
204013d0:	00812e23          	sw	s0,28(sp)
204013d4:	02010413          	addi	s0,sp,32
204013d8:	fea42623          	sw	a0,-20(s0)
204013dc:	feb42423          	sw	a1,-24(s0)
204013e0:	fec42223          	sw	a2,-28(s0)
204013e4:	00000793          	li	a5,0
204013e8:	00078513          	mv	a0,a5
204013ec:	01c12403          	lw	s0,28(sp)
204013f0:	02010113          	addi	sp,sp,32
204013f4:	00008067          	ret

204013f8 <TVMSetStream>:

int TVMSetStream(int device_type, int device_id, TVMStreamHandle stream) { return 0; }
204013f8:	fe010113          	addi	sp,sp,-32
204013fc:	00812e23          	sw	s0,28(sp)
20401400:	02010413          	addi	s0,sp,32
20401404:	fea42623          	sw	a0,-20(s0)
20401408:	feb42423          	sw	a1,-24(s0)
2040140c:	fec42223          	sw	a2,-28(s0)
20401410:	00000793          	li	a5,0
20401414:	00078513          	mv	a0,a5
20401418:	01c12403          	lw	s0,28(sp)
2040141c:	02010113          	addi	sp,sp,32
20401420:	00008067          	ret

20401424 <TVMSynchronize>:

int TVMSynchronize(int device_type, int device_id, TVMStreamHandle stream) { return 0; }
20401424:	fe010113          	addi	sp,sp,-32
20401428:	00812e23          	sw	s0,28(sp)
2040142c:	02010413          	addi	s0,sp,32
20401430:	fea42623          	sw	a0,-20(s0)
20401434:	feb42423          	sw	a1,-24(s0)
20401438:	fec42223          	sw	a2,-28(s0)
2040143c:	00000793          	li	a5,0
20401440:	00078513          	mv	a0,a5
20401444:	01c12403          	lw	s0,28(sp)
20401448:	02010113          	addi	sp,sp,32
2040144c:	00008067          	ret

20401450 <TVMFuncRegisterGlobal>:

static TVMMutableFuncRegistry global_func_registry;

int TVMFuncRegisterGlobal(const char* name, TVMFunctionHandle f, int override) {
20401450:	fe010113          	addi	sp,sp,-32
20401454:	00112e23          	sw	ra,28(sp)
20401458:	00812c23          	sw	s0,24(sp)
2040145c:	02010413          	addi	s0,sp,32
20401460:	fea42623          	sw	a0,-20(s0)
20401464:	feb42423          	sw	a1,-24(s0)
20401468:	fec42223          	sw	a2,-28(s0)
  return TVMMutableFuncRegistry_Set(&global_func_registry, name, f, override != 0);
2040146c:	fe842703          	lw	a4,-24(s0)
20401470:	fe442783          	lw	a5,-28(s0)
20401474:	00f037b3          	snez	a5,a5
20401478:	0ff7f793          	andi	a5,a5,255
2040147c:	00078693          	mv	a3,a5
20401480:	00070613          	mv	a2,a4
20401484:	fec42583          	lw	a1,-20(s0)
20401488:	5fc00517          	auipc	a0,0x5fc00
2040148c:	9e850513          	addi	a0,a0,-1560 # 80000e70 <global_func_registry>
20401490:	460010ef          	jal	ra,204028f0 <TVMMutableFuncRegistry_Set>
20401494:	00050793          	mv	a5,a0
}
20401498:	00078513          	mv	a0,a5
2040149c:	01c12083          	lw	ra,28(sp)
204014a0:	01812403          	lw	s0,24(sp)
204014a4:	02010113          	addi	sp,sp,32
204014a8:	00008067          	ret

204014ac <DecodeModuleHandle>:
static const tvm_module_index_t kGlobalFuncModuleIndex = TVM_CRT_MAX_REGISTERED_MODULES;

/*! \brief Special module handle for retur values from RPCTimeEvaluator. */
static const tvm_module_index_t kTimeEvaluatorModuleIndex = 0x7fff;

static int DecodeModuleHandle(TVMModuleHandle handle, tvm_module_index_t* out_module_index) {
204014ac:	fd010113          	addi	sp,sp,-48
204014b0:	02112623          	sw	ra,44(sp)
204014b4:	02812423          	sw	s0,40(sp)
204014b8:	03010413          	addi	s0,sp,48
204014bc:	fca42e23          	sw	a0,-36(s0)
204014c0:	fcb42c23          	sw	a1,-40(s0)
  tvm_module_index_t module_index;

  module_index = ((tvm_module_index_t)((uintptr_t)handle)) & ~0x8000;
204014c4:	fdc42783          	lw	a5,-36(s0)
204014c8:	01079713          	slli	a4,a5,0x10
204014cc:	01075713          	srli	a4,a4,0x10
204014d0:	000087b7          	lui	a5,0x8
204014d4:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x77ff>
204014d8:	00f777b3          	and	a5,a4,a5
204014dc:	fef41723          	sh	a5,-18(s0)
  if (module_index > TVM_CRT_MAX_REGISTERED_MODULES || registered_modules[module_index] == NULL) {
204014e0:	fee45703          	lhu	a4,-18(s0)
204014e4:	00200793          	li	a5,2
204014e8:	02e7e063          	bltu	a5,a4,20401508 <DecodeModuleHandle+0x5c>
204014ec:	fee45783          	lhu	a5,-18(s0)
204014f0:	5fc00717          	auipc	a4,0x5fc00
204014f4:	98c70713          	addi	a4,a4,-1652 # 80000e7c <registered_modules>
204014f8:	00279793          	slli	a5,a5,0x2
204014fc:	00f707b3          	add	a5,a4,a5
20401500:	0007a783          	lw	a5,0(a5)
20401504:	02079063          	bnez	a5,20401524 <DecodeModuleHandle+0x78>
    TVMAPIErrorf("invalid module handle: %08x", module_index);
20401508:	fee45783          	lhu	a5,-18(s0)
2040150c:	00078593          	mv	a1,a5
20401510:	0001e517          	auipc	a0,0x1e
20401514:	67050513          	addi	a0,a0,1648 # 2041fb80 <__func__.3409+0x150>
20401518:	855ff0ef          	jal	ra,20400d6c <TVMAPIErrorf>
    return -1;
2040151c:	fff00793          	li	a5,-1
20401520:	0140006f          	j	20401534 <DecodeModuleHandle+0x88>
  }

  *out_module_index = module_index;
20401524:	fd842783          	lw	a5,-40(s0)
20401528:	fee45703          	lhu	a4,-18(s0)
2040152c:	00e79023          	sh	a4,0(a5)
  return 0;
20401530:	00000793          	li	a5,0
}
20401534:	00078513          	mv	a0,a5
20401538:	02c12083          	lw	ra,44(sp)
2040153c:	02812403          	lw	s0,40(sp)
20401540:	03010113          	addi	sp,sp,48
20401544:	00008067          	ret

20401548 <EncodeModuleHandle>:

static TVMModuleHandle EncodeModuleHandle(tvm_module_index_t module_index) {
20401548:	fe010113          	addi	sp,sp,-32
2040154c:	00812e23          	sw	s0,28(sp)
20401550:	02010413          	addi	s0,sp,32
20401554:	00050793          	mv	a5,a0
20401558:	fef41723          	sh	a5,-18(s0)
  return (TVMModuleHandle)((uintptr_t)(module_index | 0x8000));
2040155c:	fee45703          	lhu	a4,-18(s0)
20401560:	ffff87b7          	lui	a5,0xffff8
20401564:	00f767b3          	or	a5,a4,a5
20401568:	01079793          	slli	a5,a5,0x10
2040156c:	0107d793          	srli	a5,a5,0x10
}
20401570:	00078513          	mv	a0,a5
20401574:	01c12403          	lw	s0,28(sp)
20401578:	02010113          	addi	sp,sp,32
2040157c:	00008067          	ret

20401580 <TVMModCreateFromCModule>:

int TVMModCreateFromCModule(const TVMModule* mod, TVMModuleHandle* out_handle) {
20401580:	fd010113          	addi	sp,sp,-48
20401584:	02112623          	sw	ra,44(sp)
20401588:	02812423          	sw	s0,40(sp)
2040158c:	03010413          	addi	s0,sp,48
20401590:	fca42e23          	sw	a0,-36(s0)
20401594:	fcb42c23          	sw	a1,-40(s0)
  tvm_module_index_t idx;

  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
20401598:	fe041723          	sh	zero,-18(s0)
2040159c:	0680006f          	j	20401604 <TVMModCreateFromCModule+0x84>
    if (registered_modules[idx] == NULL) {
204015a0:	fee45783          	lhu	a5,-18(s0)
204015a4:	5fc00717          	auipc	a4,0x5fc00
204015a8:	8d870713          	addi	a4,a4,-1832 # 80000e7c <registered_modules>
204015ac:	00279793          	slli	a5,a5,0x2
204015b0:	00f707b3          	add	a5,a4,a5
204015b4:	0007a783          	lw	a5,0(a5) # ffff8000 <pulp__FC+0xffff8001>
204015b8:	04079063          	bnez	a5,204015f8 <TVMModCreateFromCModule+0x78>
      registered_modules[idx] = mod;
204015bc:	fee45783          	lhu	a5,-18(s0)
204015c0:	5fc00717          	auipc	a4,0x5fc00
204015c4:	8bc70713          	addi	a4,a4,-1860 # 80000e7c <registered_modules>
204015c8:	00279793          	slli	a5,a5,0x2
204015cc:	00f707b3          	add	a5,a4,a5
204015d0:	fdc42703          	lw	a4,-36(s0)
204015d4:	00e7a023          	sw	a4,0(a5)
      *out_handle = EncodeModuleHandle(idx);
204015d8:	fee45783          	lhu	a5,-18(s0)
204015dc:	00078513          	mv	a0,a5
204015e0:	f69ff0ef          	jal	ra,20401548 <EncodeModuleHandle>
204015e4:	00050713          	mv	a4,a0
204015e8:	fd842783          	lw	a5,-40(s0)
204015ec:	00e7a023          	sw	a4,0(a5)
      return 0;
204015f0:	00000793          	li	a5,0
204015f4:	0200006f          	j	20401614 <TVMModCreateFromCModule+0x94>
  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
204015f8:	fee45783          	lhu	a5,-18(s0)
204015fc:	00178793          	addi	a5,a5,1
20401600:	fef41723          	sh	a5,-18(s0)
20401604:	fee45703          	lhu	a4,-18(s0)
20401608:	00100793          	li	a5,1
2040160c:	f8e7fae3          	bleu	a4,a5,204015a0 <TVMModCreateFromCModule+0x20>
    }
  }

  return -1;
20401610:	fff00793          	li	a5,-1
}
20401614:	00078513          	mv	a0,a5
20401618:	02c12083          	lw	ra,44(sp)
2040161c:	02812403          	lw	s0,40(sp)
20401620:	03010113          	addi	sp,sp,48
20401624:	00008067          	ret

20401628 <TVMModFree>:

static const TVMModuleHandle kTVMModuleHandleUninitialized = (TVMModuleHandle)(~0UL);

static TVMModuleHandle system_lib_handle;

int TVMModFree(TVMModuleHandle mod) {
20401628:	fd010113          	addi	sp,sp,-48
2040162c:	02112623          	sw	ra,44(sp)
20401630:	02812423          	sw	s0,40(sp)
20401634:	03010413          	addi	s0,sp,48
20401638:	fca42e23          	sw	a0,-36(s0)
  /* Never free system_lib_handler */
  if (mod == system_lib_handle && system_lib_handle != kTVMModuleHandleUninitialized) {
2040163c:	5fc00797          	auipc	a5,0x5fc00
20401640:	84878793          	addi	a5,a5,-1976 # 80000e84 <system_lib_handle>
20401644:	0007a783          	lw	a5,0(a5)
20401648:	fdc42703          	lw	a4,-36(s0)
2040164c:	02f71063          	bne	a4,a5,2040166c <TVMModFree+0x44>
20401650:	5fc00797          	auipc	a5,0x5fc00
20401654:	83478793          	addi	a5,a5,-1996 # 80000e84 <system_lib_handle>
20401658:	0007a703          	lw	a4,0(a5)
2040165c:	fff00793          	li	a5,-1
20401660:	00f70663          	beq	a4,a5,2040166c <TVMModFree+0x44>
    return 0;
20401664:	00000793          	li	a5,0
20401668:	0400006f          	j	204016a8 <TVMModFree+0x80>
  }

  tvm_module_index_t module_index;
  if (DecodeModuleHandle(mod, &module_index) != 0) {
2040166c:	fee40793          	addi	a5,s0,-18
20401670:	00078593          	mv	a1,a5
20401674:	fdc42503          	lw	a0,-36(s0)
20401678:	e35ff0ef          	jal	ra,204014ac <DecodeModuleHandle>
2040167c:	00050793          	mv	a5,a0
20401680:	00078663          	beqz	a5,2040168c <TVMModFree+0x64>
    return -1;
20401684:	fff00793          	li	a5,-1
20401688:	0200006f          	j	204016a8 <TVMModFree+0x80>
  }

  registered_modules[module_index] = NULL;
2040168c:	fee45783          	lhu	a5,-18(s0)
20401690:	5fbff717          	auipc	a4,0x5fbff
20401694:	7ec70713          	addi	a4,a4,2028 # 80000e7c <registered_modules>
20401698:	00279793          	slli	a5,a5,0x2
2040169c:	00f707b3          	add	a5,a4,a5
204016a0:	0007a023          	sw	zero,0(a5)
  return 0;
204016a4:	00000793          	li	a5,0
}
204016a8:	00078513          	mv	a0,a5
204016ac:	02c12083          	lw	ra,44(sp)
204016b0:	02812403          	lw	s0,40(sp)
204016b4:	03010113          	addi	sp,sp,48
204016b8:	00008067          	ret

204016bc <SystemLibraryCreate>:

int SystemLibraryCreate(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                        int* ret_type_codes) {
204016bc:	fc010113          	addi	sp,sp,-64
204016c0:	02112e23          	sw	ra,60(sp)
204016c4:	02812c23          	sw	s0,56(sp)
204016c8:	04010413          	addi	s0,sp,64
204016cc:	fca42e23          	sw	a0,-36(s0)
204016d0:	fcb42c23          	sw	a1,-40(s0)
204016d4:	fcc42a23          	sw	a2,-44(s0)
204016d8:	fcd42823          	sw	a3,-48(s0)
204016dc:	fce42623          	sw	a4,-52(s0)
  const TVMModule* system_lib;

  if (system_lib_handle == kTVMModuleHandleUninitialized) {
204016e0:	5fbff797          	auipc	a5,0x5fbff
204016e4:	7a478793          	addi	a5,a5,1956 # 80000e84 <system_lib_handle>
204016e8:	0007a703          	lw	a4,0(a5)
204016ec:	fff00793          	li	a5,-1
204016f0:	02f71c63          	bne	a4,a5,20401728 <SystemLibraryCreate+0x6c>
    system_lib = TVMSystemLibEntryPoint();
204016f4:	c10ff0ef          	jal	ra,20400b04 <TVMSystemLibEntryPoint>
204016f8:	fea42623          	sw	a0,-20(s0)
    if (TVMModCreateFromCModule(system_lib, &system_lib_handle) != 0) {
204016fc:	5fbff597          	auipc	a1,0x5fbff
20401700:	78858593          	addi	a1,a1,1928 # 80000e84 <system_lib_handle>
20401704:	fec42503          	lw	a0,-20(s0)
20401708:	e79ff0ef          	jal	ra,20401580 <TVMModCreateFromCModule>
2040170c:	00050793          	mv	a5,a0
20401710:	00078c63          	beqz	a5,20401728 <SystemLibraryCreate+0x6c>
      TVMAPIErrorf("error registering system lib");
20401714:	0001e517          	auipc	a0,0x1e
20401718:	48850513          	addi	a0,a0,1160 # 2041fb9c <__func__.3409+0x16c>
2040171c:	e50ff0ef          	jal	ra,20400d6c <TVMAPIErrorf>
      return -1;
20401720:	fff00793          	li	a5,-1
20401724:	0280006f          	j	2040174c <SystemLibraryCreate+0x90>
    }
  }

  ret_val[0].v_handle = system_lib_handle;
20401728:	5fbff797          	auipc	a5,0x5fbff
2040172c:	75c78793          	addi	a5,a5,1884 # 80000e84 <system_lib_handle>
20401730:	0007a703          	lw	a4,0(a5)
20401734:	fd042783          	lw	a5,-48(s0)
20401738:	00e7a023          	sw	a4,0(a5)
  ret_type_codes[0] = kTVMModuleHandle;
2040173c:	fcc42783          	lw	a5,-52(s0)
20401740:	00900713          	li	a4,9
20401744:	00e7a023          	sw	a4,0(a5)
  return 0;
20401748:	00000793          	li	a5,0
}
2040174c:	00078513          	mv	a0,a5
20401750:	03c12083          	lw	ra,60(sp)
20401754:	03812403          	lw	s0,56(sp)
20401758:	04010113          	addi	sp,sp,64
2040175c:	00008067          	ret

20401760 <EncodeFunctionHandle>:

static TVMFunctionHandle EncodeFunctionHandle(tvm_module_index_t module_index,
                                              tvm_function_index_t function_index) {
20401760:	fe010113          	addi	sp,sp,-32
20401764:	00812e23          	sw	s0,28(sp)
20401768:	02010413          	addi	s0,sp,32
2040176c:	00050793          	mv	a5,a0
20401770:	00058713          	mv	a4,a1
20401774:	fef41723          	sh	a5,-18(s0)
20401778:	00070793          	mv	a5,a4
2040177c:	fef41623          	sh	a5,-20(s0)
  return (TVMFunctionHandle)(
      (((uintptr_t)(module_index | 0x8000) << (sizeof(tvm_function_index_t) * 8)) |
20401780:	fee45703          	lhu	a4,-18(s0)
20401784:	ffff87b7          	lui	a5,0xffff8
20401788:	00f767b3          	or	a5,a4,a5
2040178c:	01079793          	slli	a5,a5,0x10
20401790:	0107d793          	srli	a5,a5,0x10
20401794:	01079793          	slli	a5,a5,0x10
       (function_index | 0x8000)));
20401798:	fec45683          	lhu	a3,-20(s0)
2040179c:	ffff8737          	lui	a4,0xffff8
204017a0:	00e6e733          	or	a4,a3,a4
204017a4:	01071713          	slli	a4,a4,0x10
204017a8:	01075713          	srli	a4,a4,0x10
      (((uintptr_t)(module_index | 0x8000) << (sizeof(tvm_function_index_t) * 8)) |
204017ac:	00e7e7b3          	or	a5,a5,a4
}
204017b0:	00078513          	mv	a0,a5
204017b4:	01c12403          	lw	s0,28(sp)
204017b8:	02010113          	addi	sp,sp,32
204017bc:	00008067          	ret

204017c0 <DecodeFunctionHandle>:

static int DecodeFunctionHandle(TVMFunctionHandle handle, tvm_module_index_t* module_index,
                                tvm_function_index_t* function_index) {
204017c0:	fd010113          	addi	sp,sp,-48
204017c4:	02112623          	sw	ra,44(sp)
204017c8:	02812423          	sw	s0,40(sp)
204017cc:	03010413          	addi	s0,sp,48
204017d0:	fca42e23          	sw	a0,-36(s0)
204017d4:	fcb42c23          	sw	a1,-40(s0)
204017d8:	fcc42a23          	sw	a2,-44(s0)
  tvm_module_index_t unvalidated_module_index;
  unvalidated_module_index =
      (tvm_module_index_t)(((uintptr_t)handle) >> (sizeof(tvm_function_index_t) * 8));
204017dc:	fdc42783          	lw	a5,-36(s0)
204017e0:	0107d793          	srli	a5,a5,0x10
  unvalidated_module_index =
204017e4:	fef41723          	sh	a5,-18(s0)
  unvalidated_module_index &= ~0x8000;
204017e8:	fee45703          	lhu	a4,-18(s0)
204017ec:	000087b7          	lui	a5,0x8
204017f0:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x77ff>
204017f4:	00f777b3          	and	a5,a4,a5
204017f8:	fef41723          	sh	a5,-18(s0)

  if (unvalidated_module_index != kTimeEvaluatorModuleIndex) {
204017fc:	000087b7          	lui	a5,0x8
20401800:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x77ff>
20401804:	fee45703          	lhu	a4,-18(s0)
20401808:	06f70863          	beq	a4,a5,20401878 <DecodeFunctionHandle+0xb8>
    if (unvalidated_module_index > kGlobalFuncModuleIndex) {
2040180c:	00200793          	li	a5,2
20401810:	fee45703          	lhu	a4,-18(s0)
20401814:	02e7f063          	bleu	a4,a5,20401834 <DecodeFunctionHandle+0x74>
      TVMAPIErrorf("invalid module handle: index=%08x", unvalidated_module_index);
20401818:	fee45783          	lhu	a5,-18(s0)
2040181c:	00078593          	mv	a1,a5
20401820:	0001e517          	auipc	a0,0x1e
20401824:	39c50513          	addi	a0,a0,924 # 2041fbbc <__func__.3409+0x18c>
20401828:	d44ff0ef          	jal	ra,20400d6c <TVMAPIErrorf>
      return -1;
2040182c:	fff00793          	li	a5,-1
20401830:	0800006f          	j	204018b0 <DecodeFunctionHandle+0xf0>
    } else if (unvalidated_module_index < kGlobalFuncModuleIndex &&
20401834:	00200793          	li	a5,2
20401838:	fee45703          	lhu	a4,-18(s0)
2040183c:	02f77e63          	bleu	a5,a4,20401878 <DecodeFunctionHandle+0xb8>
               registered_modules[unvalidated_module_index] == NULL) {
20401840:	fee45783          	lhu	a5,-18(s0)
20401844:	5fbff717          	auipc	a4,0x5fbff
20401848:	63870713          	addi	a4,a4,1592 # 80000e7c <registered_modules>
2040184c:	00279793          	slli	a5,a5,0x2
20401850:	00f707b3          	add	a5,a4,a5
20401854:	0007a783          	lw	a5,0(a5)
    } else if (unvalidated_module_index < kGlobalFuncModuleIndex &&
20401858:	02079063          	bnez	a5,20401878 <DecodeFunctionHandle+0xb8>
      TVMAPIErrorf("unregistered module: index=%08x", unvalidated_module_index);
2040185c:	fee45783          	lhu	a5,-18(s0)
20401860:	00078593          	mv	a1,a5
20401864:	0001e517          	auipc	a0,0x1e
20401868:	37c50513          	addi	a0,a0,892 # 2041fbe0 <__func__.3409+0x1b0>
2040186c:	d00ff0ef          	jal	ra,20400d6c <TVMAPIErrorf>
      return -1;
20401870:	fff00793          	li	a5,-1
20401874:	03c0006f          	j	204018b0 <DecodeFunctionHandle+0xf0>
    }
  }

  *function_index = ((uint32_t)((uintptr_t)handle)) & ~0x8000;
20401878:	fdc42783          	lw	a5,-36(s0)
2040187c:	01079713          	slli	a4,a5,0x10
20401880:	01075713          	srli	a4,a4,0x10
20401884:	000087b7          	lui	a5,0x8
20401888:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x77ff>
2040188c:	00f777b3          	and	a5,a4,a5
20401890:	01079713          	slli	a4,a5,0x10
20401894:	01075713          	srli	a4,a4,0x10
20401898:	fd442783          	lw	a5,-44(s0)
2040189c:	00e79023          	sh	a4,0(a5)
  *module_index = unvalidated_module_index;
204018a0:	fd842783          	lw	a5,-40(s0)
204018a4:	fee45703          	lhu	a4,-18(s0)
204018a8:	00e79023          	sh	a4,0(a5)
  return 0;
204018ac:	00000793          	li	a5,0
}
204018b0:	00078513          	mv	a0,a5
204018b4:	02c12083          	lw	ra,44(sp)
204018b8:	02812403          	lw	s0,40(sp)
204018bc:	03010113          	addi	sp,sp,48
204018c0:	00008067          	ret

204018c4 <TVMByteArrayFree>:

int TVMByteArrayFree(TVMByteArray* arr) {
204018c4:	fd010113          	addi	sp,sp,-48
204018c8:	02112623          	sw	ra,44(sp)
204018cc:	02812423          	sw	s0,40(sp)
204018d0:	03010413          	addi	s0,sp,48
204018d4:	fca42e23          	sw	a0,-36(s0)
  DLDevice dev = {kDLCPU, 0};
204018d8:	00100793          	li	a5,1
204018dc:	fef42223          	sw	a5,-28(s0)
204018e0:	fe042423          	sw	zero,-24(s0)
  int to_return = TVMPlatformMemoryFree((void*)arr->data, dev);
204018e4:	fdc42783          	lw	a5,-36(s0)
204018e8:	0007a783          	lw	a5,0(a5)
204018ec:	fe442583          	lw	a1,-28(s0)
204018f0:	fe842603          	lw	a2,-24(s0)
204018f4:	00078513          	mv	a0,a5
204018f8:	968ff0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
204018fc:	00050793          	mv	a5,a0
20401900:	fef42623          	sw	a5,-20(s0)
  if (to_return != 0) {
20401904:	fec42783          	lw	a5,-20(s0)
20401908:	00078663          	beqz	a5,20401914 <TVMByteArrayFree+0x50>
    return to_return;
2040190c:	fec42783          	lw	a5,-20(s0)
20401910:	0180006f          	j	20401928 <TVMByteArrayFree+0x64>
  }

  return TVMPlatformMemoryFree((void*)arr, dev);
20401914:	fe442583          	lw	a1,-28(s0)
20401918:	fe842603          	lw	a2,-24(s0)
2040191c:	fdc42503          	lw	a0,-36(s0)
20401920:	940ff0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20401924:	00050793          	mv	a5,a0
}
20401928:	00078513          	mv	a0,a5
2040192c:	02c12083          	lw	ra,44(sp)
20401930:	02812403          	lw	s0,40(sp)
20401934:	03010113          	addi	sp,sp,48
20401938:	00008067          	ret

2040193c <TVMFuncCall>:
tvm_crt_error_t RunTimeEvaluator(tvm_function_index_t function_index, TVMValue* args,
                                 int* type_codes, int num_args, TVMValue* ret_val,
                                 int* ret_type_code);

int TVMFuncCall(TVMFunctionHandle func_handle, TVMValue* arg_values, int* type_codes, int num_args,
                TVMValue* ret_val, int* ret_type_code) {
2040193c:	fc010113          	addi	sp,sp,-64
20401940:	02112e23          	sw	ra,60(sp)
20401944:	02812c23          	sw	s0,56(sp)
20401948:	04010413          	addi	s0,sp,64
2040194c:	fca42e23          	sw	a0,-36(s0)
20401950:	fcb42c23          	sw	a1,-40(s0)
20401954:	fcc42a23          	sw	a2,-44(s0)
20401958:	fcd42823          	sw	a3,-48(s0)
2040195c:	fce42623          	sw	a4,-52(s0)
20401960:	fcf42423          	sw	a5,-56(s0)
  tvm_function_index_t function_index;
  void* resource_handle;
  const TVMFuncRegistry* registry;
  TVMBackendPackedCFunc func;

  if (DecodeFunctionHandle(func_handle, &module_index, &function_index) != 0) {
20401964:	fe440713          	addi	a4,s0,-28
20401968:	fe640793          	addi	a5,s0,-26
2040196c:	00070613          	mv	a2,a4
20401970:	00078593          	mv	a1,a5
20401974:	fdc42503          	lw	a0,-36(s0)
20401978:	e49ff0ef          	jal	ra,204017c0 <DecodeFunctionHandle>
2040197c:	00050793          	mv	a5,a0
20401980:	00078663          	beqz	a5,2040198c <TVMFuncCall+0x50>
    return -1;
20401984:	fff00793          	li	a5,-1
20401988:	10c0006f          	j	20401a94 <TVMFuncCall+0x158>
  }

  if (module_index == kTimeEvaluatorModuleIndex) {
2040198c:	fe645703          	lhu	a4,-26(s0)
20401990:	000087b7          	lui	a5,0x8
20401994:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x77ff>
20401998:	02f71463          	bne	a4,a5,204019c0 <TVMFuncCall+0x84>
    return RunTimeEvaluator(function_index, arg_values, type_codes, num_args, ret_val,
2040199c:	fe445503          	lhu	a0,-28(s0)
204019a0:	fc842783          	lw	a5,-56(s0)
204019a4:	fcc42703          	lw	a4,-52(s0)
204019a8:	fd042683          	lw	a3,-48(s0)
204019ac:	fd442603          	lw	a2,-44(s0)
204019b0:	fd842583          	lw	a1,-40(s0)
204019b4:	0c1000ef          	jal	ra,20402274 <RunTimeEvaluator>
204019b8:	00050793          	mv	a5,a0
204019bc:	0d80006f          	j	20401a94 <TVMFuncCall+0x158>
                            ret_type_code);
  } else if (module_index == kGlobalFuncModuleIndex) {
204019c0:	fe645703          	lhu	a4,-26(s0)
204019c4:	00200793          	li	a5,2
204019c8:	00f71c63          	bne	a4,a5,204019e0 <TVMFuncCall+0xa4>
    resource_handle = NULL;
204019cc:	fe042623          	sw	zero,-20(s0)
    registry = &global_func_registry.registry;
204019d0:	5fbff797          	auipc	a5,0x5fbff
204019d4:	4a078793          	addi	a5,a5,1184 # 80000e70 <global_func_registry>
204019d8:	fef42423          	sw	a5,-24(s0)
204019dc:	0440006f          	j	20401a20 <TVMFuncCall+0xe4>
  } else {
    resource_handle = (void*)registered_modules[module_index]->registry;
204019e0:	fe645783          	lhu	a5,-26(s0)
204019e4:	5fbff717          	auipc	a4,0x5fbff
204019e8:	49870713          	addi	a4,a4,1176 # 80000e7c <registered_modules>
204019ec:	00279793          	slli	a5,a5,0x2
204019f0:	00f707b3          	add	a5,a4,a5
204019f4:	0007a783          	lw	a5,0(a5)
204019f8:	0007a783          	lw	a5,0(a5)
204019fc:	fef42623          	sw	a5,-20(s0)
    registry = registered_modules[module_index]->registry;
20401a00:	fe645783          	lhu	a5,-26(s0)
20401a04:	5fbff717          	auipc	a4,0x5fbff
20401a08:	47870713          	addi	a4,a4,1144 # 80000e7c <registered_modules>
20401a0c:	00279793          	slli	a5,a5,0x2
20401a10:	00f707b3          	add	a5,a4,a5
20401a14:	0007a783          	lw	a5,0(a5)
20401a18:	0007a783          	lw	a5,0(a5)
20401a1c:	fef42423          	sw	a5,-24(s0)
  }

  if (TVMFuncRegistry_GetByIndex(registry, function_index, &func) != 0) {
20401a20:	fe445783          	lhu	a5,-28(s0)
20401a24:	fe040713          	addi	a4,s0,-32
20401a28:	00070613          	mv	a2,a4
20401a2c:	00078593          	mv	a1,a5
20401a30:	fe842503          	lw	a0,-24(s0)
20401a34:	595000ef          	jal	ra,204027c8 <TVMFuncRegistry_GetByIndex>
20401a38:	00050793          	mv	a5,a0
20401a3c:	02078063          	beqz	a5,20401a5c <TVMFuncCall+0x120>
    TVMAPIErrorf("invalid function index: %04" PRIx16, function_index);
20401a40:	fe445783          	lhu	a5,-28(s0)
20401a44:	00078593          	mv	a1,a5
20401a48:	0001e517          	auipc	a0,0x1e
20401a4c:	1b850513          	addi	a0,a0,440 # 2041fc00 <__func__.3409+0x1d0>
20401a50:	b1cff0ef          	jal	ra,20400d6c <TVMAPIErrorf>
    return -1;
20401a54:	fff00793          	li	a5,-1
20401a58:	03c0006f          	j	20401a94 <TVMFuncCall+0x158>
  }

  ret_type_code[0] = kTVMNullptr;
20401a5c:	fc842783          	lw	a5,-56(s0)
20401a60:	00400713          	li	a4,4
20401a64:	00e7a023          	sw	a4,0(a5)
  ret_val[0].v_handle = NULL;
20401a68:	fcc42783          	lw	a5,-52(s0)
20401a6c:	0007a023          	sw	zero,0(a5)
  return func(arg_values, type_codes, num_args, ret_val, ret_type_code, resource_handle);
20401a70:	fe042803          	lw	a6,-32(s0)
20401a74:	fec42783          	lw	a5,-20(s0)
20401a78:	fc842703          	lw	a4,-56(s0)
20401a7c:	fcc42683          	lw	a3,-52(s0)
20401a80:	fd042603          	lw	a2,-48(s0)
20401a84:	fd442583          	lw	a1,-44(s0)
20401a88:	fd842503          	lw	a0,-40(s0)
20401a8c:	000800e7          	jalr	a6
20401a90:	00050793          	mv	a5,a0
}
20401a94:	00078513          	mv	a0,a5
20401a98:	03c12083          	lw	ra,60(sp)
20401a9c:	03812403          	lw	s0,56(sp)
20401aa0:	04010113          	addi	sp,sp,64
20401aa4:	00008067          	ret

20401aa8 <FindFunctionOrSetAPIError>:

static tvm_crt_error_t FindFunctionOrSetAPIError(tvm_module_index_t module_index,
                                                 const TVMFuncRegistry* registry, const char* name,
                                                 TVMFunctionHandle* out) {
20401aa8:	fd010113          	addi	sp,sp,-48
20401aac:	02112623          	sw	ra,44(sp)
20401ab0:	02812423          	sw	s0,40(sp)
20401ab4:	03010413          	addi	s0,sp,48
20401ab8:	00050793          	mv	a5,a0
20401abc:	fcb42c23          	sw	a1,-40(s0)
20401ac0:	fcc42a23          	sw	a2,-44(s0)
20401ac4:	fcd42823          	sw	a3,-48(s0)
20401ac8:	fcf41f23          	sh	a5,-34(s0)
  tvm_function_index_t function_index;
  tvm_crt_error_t err = TVMFuncRegistry_Lookup(registry, name, &function_index);
20401acc:	fea40793          	addi	a5,s0,-22
20401ad0:	00078613          	mv	a2,a5
20401ad4:	fd442583          	lw	a1,-44(s0)
20401ad8:	fd842503          	lw	a0,-40(s0)
20401adc:	451000ef          	jal	ra,2040272c <TVMFuncRegistry_Lookup>
20401ae0:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20401ae4:	fec42783          	lw	a5,-20(s0)
20401ae8:	00078663          	beqz	a5,20401af4 <FindFunctionOrSetAPIError+0x4c>
    return err;
20401aec:	fec42783          	lw	a5,-20(s0)
20401af0:	0280006f          	j	20401b18 <FindFunctionOrSetAPIError+0x70>
  }

  *out = EncodeFunctionHandle(module_index, function_index);
20401af4:	fea45703          	lhu	a4,-22(s0)
20401af8:	fde45783          	lhu	a5,-34(s0)
20401afc:	00070593          	mv	a1,a4
20401b00:	00078513          	mv	a0,a5
20401b04:	c5dff0ef          	jal	ra,20401760 <EncodeFunctionHandle>
20401b08:	00050713          	mv	a4,a0
20401b0c:	fd042783          	lw	a5,-48(s0)
20401b10:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
20401b14:	00000793          	li	a5,0
}
20401b18:	00078513          	mv	a0,a5
20401b1c:	02c12083          	lw	ra,44(sp)
20401b20:	02812403          	lw	s0,40(sp)
20401b24:	03010113          	addi	sp,sp,48
20401b28:	00008067          	ret

20401b2c <TVMFuncGetGlobal>:

int TVMFuncGetGlobal(const char* name, TVMFunctionHandle* out) {
20401b2c:	fd010113          	addi	sp,sp,-48
20401b30:	02112623          	sw	ra,44(sp)
20401b34:	02812423          	sw	s0,40(sp)
20401b38:	03010413          	addi	s0,sp,48
20401b3c:	fca42e23          	sw	a0,-36(s0)
20401b40:	fcb42c23          	sw	a1,-40(s0)
  tvm_crt_error_t to_return =
      FindFunctionOrSetAPIError(kGlobalFuncModuleIndex, &global_func_registry.registry, name, out);
20401b44:	00200793          	li	a5,2
  tvm_crt_error_t to_return =
20401b48:	fd842683          	lw	a3,-40(s0)
20401b4c:	fdc42603          	lw	a2,-36(s0)
20401b50:	5fbff597          	auipc	a1,0x5fbff
20401b54:	32058593          	addi	a1,a1,800 # 80000e70 <global_func_registry>
20401b58:	00078513          	mv	a0,a5
20401b5c:	f4dff0ef          	jal	ra,20401aa8 <FindFunctionOrSetAPIError>
20401b60:	fea42623          	sw	a0,-20(s0)
  // For compatibility with the C++ runtime equivalent, in src/runtime/registry.cc.
  if (to_return == kTvmErrorFunctionNameNotFound) {
20401b64:	fec42703          	lw	a4,-20(s0)
20401b68:	10000793          	li	a5,256
20401b6c:	00f71863          	bne	a4,a5,20401b7c <TVMFuncGetGlobal+0x50>
    *out = NULL;
20401b70:	fd842783          	lw	a5,-40(s0)
20401b74:	0007a023          	sw	zero,0(a5)
    to_return = kTvmErrorNoError;
20401b78:	fe042623          	sw	zero,-20(s0)
  }
  return to_return;
20401b7c:	fec42783          	lw	a5,-20(s0)
}
20401b80:	00078513          	mv	a0,a5
20401b84:	02c12083          	lw	ra,44(sp)
20401b88:	02812403          	lw	s0,40(sp)
20401b8c:	03010113          	addi	sp,sp,48
20401b90:	00008067          	ret

20401b94 <TVMModGetFunction>:

int TVMModGetFunction(TVMModuleHandle mod, const char* func_name, int query_imports,
                      TVMFunctionHandle* out) {
20401b94:	fd010113          	addi	sp,sp,-48
20401b98:	02112623          	sw	ra,44(sp)
20401b9c:	02812423          	sw	s0,40(sp)
20401ba0:	03010413          	addi	s0,sp,48
20401ba4:	fca42e23          	sw	a0,-36(s0)
20401ba8:	fcb42c23          	sw	a1,-40(s0)
20401bac:	fcc42a23          	sw	a2,-44(s0)
20401bb0:	fcd42823          	sw	a3,-48(s0)
  tvm_module_index_t module_index;
  if (DecodeModuleHandle(mod, &module_index) != 0) {
20401bb4:	fee40793          	addi	a5,s0,-18
20401bb8:	00078593          	mv	a1,a5
20401bbc:	fdc42503          	lw	a0,-36(s0)
20401bc0:	8edff0ef          	jal	ra,204014ac <DecodeModuleHandle>
20401bc4:	00050793          	mv	a5,a0
20401bc8:	00078663          	beqz	a5,20401bd4 <TVMModGetFunction+0x40>
    return -1;
20401bcc:	fff00793          	li	a5,-1
20401bd0:	0380006f          	j	20401c08 <TVMModGetFunction+0x74>
  }

  return FindFunctionOrSetAPIError(module_index, registered_modules[module_index]->registry,
20401bd4:	fee45503          	lhu	a0,-18(s0)
20401bd8:	fee45783          	lhu	a5,-18(s0)
20401bdc:	5fbff717          	auipc	a4,0x5fbff
20401be0:	2a070713          	addi	a4,a4,672 # 80000e7c <registered_modules>
20401be4:	00279793          	slli	a5,a5,0x2
20401be8:	00f707b3          	add	a5,a4,a5
20401bec:	0007a783          	lw	a5,0(a5)
20401bf0:	0007a783          	lw	a5,0(a5)
20401bf4:	fd042683          	lw	a3,-48(s0)
20401bf8:	fd842603          	lw	a2,-40(s0)
20401bfc:	00078593          	mv	a1,a5
20401c00:	ea9ff0ef          	jal	ra,20401aa8 <FindFunctionOrSetAPIError>
20401c04:	00050793          	mv	a5,a0
                                   func_name, out);
}
20401c08:	00078513          	mv	a0,a5
20401c0c:	02c12083          	lw	ra,44(sp)
20401c10:	02812403          	lw	s0,40(sp)
20401c14:	03010113          	addi	sp,sp,48
20401c18:	00008067          	ret

20401c1c <ModuleGetFunction>:

int ModuleGetFunction(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_value,
                      int* ret_type_codes) {
20401c1c:	fc010113          	addi	sp,sp,-64
20401c20:	02112e23          	sw	ra,60(sp)
20401c24:	02812c23          	sw	s0,56(sp)
20401c28:	04010413          	addi	s0,sp,64
20401c2c:	fca42e23          	sw	a0,-36(s0)
20401c30:	fcb42c23          	sw	a1,-40(s0)
20401c34:	fcc42a23          	sw	a2,-44(s0)
20401c38:	fcd42823          	sw	a3,-48(s0)
20401c3c:	fce42623          	sw	a4,-52(s0)
  TVMModuleHandle mod;
  const char* name;
  int to_return;
  int query_imports;

  ret_value[0].v_handle = NULL;
20401c40:	fd042783          	lw	a5,-48(s0)
20401c44:	0007a023          	sw	zero,0(a5)
  ret_type_codes[0] = kTVMNullptr;
20401c48:	fcc42783          	lw	a5,-52(s0)
20401c4c:	00400713          	li	a4,4
20401c50:	00e7a023          	sw	a4,0(a5)
  if (num_args != 3 || type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
20401c54:	fd442703          	lw	a4,-44(s0)
20401c58:	00300793          	li	a5,3
20401c5c:	02f71c63          	bne	a4,a5,20401c94 <ModuleGetFunction+0x78>
20401c60:	fd842783          	lw	a5,-40(s0)
20401c64:	0007a703          	lw	a4,0(a5)
20401c68:	00900793          	li	a5,9
20401c6c:	02f71463          	bne	a4,a5,20401c94 <ModuleGetFunction+0x78>
20401c70:	fd842783          	lw	a5,-40(s0)
20401c74:	00478793          	addi	a5,a5,4
20401c78:	0007a703          	lw	a4,0(a5)
20401c7c:	00b00793          	li	a5,11
20401c80:	00f71a63          	bne	a4,a5,20401c94 <ModuleGetFunction+0x78>
      type_codes[2] != kDLInt) {
20401c84:	fd842783          	lw	a5,-40(s0)
20401c88:	00878793          	addi	a5,a5,8
20401c8c:	0007a783          	lw	a5,0(a5)
  if (num_args != 3 || type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
20401c90:	00078663          	beqz	a5,20401c9c <ModuleGetFunction+0x80>
    return 0;
20401c94:	00000793          	li	a5,0
20401c98:	0900006f          	j	20401d28 <ModuleGetFunction+0x10c>
  }

  mod = (TVMModuleHandle)args[0].v_handle;
20401c9c:	fdc42783          	lw	a5,-36(s0)
20401ca0:	0007a783          	lw	a5,0(a5)
20401ca4:	fef42423          	sw	a5,-24(s0)
  name = args[1].v_str;
20401ca8:	fdc42783          	lw	a5,-36(s0)
20401cac:	00878793          	addi	a5,a5,8
20401cb0:	0007a783          	lw	a5,0(a5)
20401cb4:	fef42223          	sw	a5,-28(s0)
  query_imports = args[2].v_int64 != 0;
20401cb8:	fdc42783          	lw	a5,-36(s0)
20401cbc:	01078793          	addi	a5,a5,16
20401cc0:	0047a803          	lw	a6,4(a5)
20401cc4:	0007a783          	lw	a5,0(a5)
20401cc8:	0107e7b3          	or	a5,a5,a6
20401ccc:	00f037b3          	snez	a5,a5
20401cd0:	0ff7f793          	andi	a5,a5,255
20401cd4:	fef42023          	sw	a5,-32(s0)
  to_return = TVMModGetFunction(mod, name, query_imports, &ret_value->v_handle);
20401cd8:	fd042783          	lw	a5,-48(s0)
20401cdc:	00078693          	mv	a3,a5
20401ce0:	fe042603          	lw	a2,-32(s0)
20401ce4:	fe442583          	lw	a1,-28(s0)
20401ce8:	fe842503          	lw	a0,-24(s0)
20401cec:	ea9ff0ef          	jal	ra,20401b94 <TVMModGetFunction>
20401cf0:	fea42623          	sw	a0,-20(s0)

  if (to_return == 0) {
20401cf4:	fec42783          	lw	a5,-20(s0)
20401cf8:	00079a63          	bnez	a5,20401d0c <ModuleGetFunction+0xf0>
    ret_type_codes[0] = kTVMPackedFuncHandle;
20401cfc:	fcc42783          	lw	a5,-52(s0)
20401d00:	00a00713          	li	a4,10
20401d04:	00e7a023          	sw	a4,0(a5)
20401d08:	00c0006f          	j	20401d14 <ModuleGetFunction+0xf8>
  } else {
    ret_value->v_handle = NULL;
20401d0c:	fd042783          	lw	a5,-48(s0)
20401d10:	0007a023          	sw	zero,0(a5)
  }

  // NOTE: For compatibility with C++ runtime API, return no error (but NULL function) when the
  // function lookup failed.
  if (to_return == kTvmErrorFunctionNameNotFound) {
20401d14:	fec42703          	lw	a4,-20(s0)
20401d18:	10000793          	li	a5,256
20401d1c:	00f71463          	bne	a4,a5,20401d24 <ModuleGetFunction+0x108>
    to_return = kTvmErrorNoError;
20401d20:	fe042623          	sw	zero,-20(s0)
  }
  return to_return;
20401d24:	fec42783          	lw	a5,-20(s0)
}
20401d28:	00078513          	mv	a0,a5
20401d2c:	03c12083          	lw	ra,60(sp)
20401d30:	03812403          	lw	s0,56(sp)
20401d34:	04010113          	addi	sp,sp,64
20401d38:	00008067          	ret

20401d3c <TVMCFuncSetReturn>:
typedef struct TVMCReturnValue {
  TVMValue* ret_val;
  int* ret_type_code;
} TVMCReturnValue;

int TVMCFuncSetReturn(TVMRetValueHandle ret, TVMValue* value, int* type_code, int num_ret) {
20401d3c:	fd010113          	addi	sp,sp,-48
20401d40:	02812623          	sw	s0,44(sp)
20401d44:	03010413          	addi	s0,sp,48
20401d48:	fca42e23          	sw	a0,-36(s0)
20401d4c:	fcb42c23          	sw	a1,-40(s0)
20401d50:	fcc42a23          	sw	a2,-44(s0)
20401d54:	fcd42823          	sw	a3,-48(s0)
  TVMCReturnValue* ret_val;
  int idx;

  ret_val = (TVMCReturnValue*)ret;
20401d58:	fdc42783          	lw	a5,-36(s0)
20401d5c:	fef42423          	sw	a5,-24(s0)
  for (idx = 0; idx < num_ret; idx++) {
20401d60:	fe042623          	sw	zero,-20(s0)
20401d64:	0700006f          	j	20401dd4 <TVMCFuncSetReturn+0x98>
    ret_val->ret_val[idx] = value[idx];
20401d68:	fec42783          	lw	a5,-20(s0)
20401d6c:	00379793          	slli	a5,a5,0x3
20401d70:	fd842703          	lw	a4,-40(s0)
20401d74:	00f707b3          	add	a5,a4,a5
20401d78:	fe842703          	lw	a4,-24(s0)
20401d7c:	00072683          	lw	a3,0(a4)
20401d80:	fec42703          	lw	a4,-20(s0)
20401d84:	00371713          	slli	a4,a4,0x3
20401d88:	00e68733          	add	a4,a3,a4
20401d8c:	0047a803          	lw	a6,4(a5)
20401d90:	0007a783          	lw	a5,0(a5)
20401d94:	00f72023          	sw	a5,0(a4)
20401d98:	01072223          	sw	a6,4(a4)
    ret_val->ret_type_code[idx] = type_code[idx];
20401d9c:	fec42783          	lw	a5,-20(s0)
20401da0:	00279793          	slli	a5,a5,0x2
20401da4:	fd442703          	lw	a4,-44(s0)
20401da8:	00f70733          	add	a4,a4,a5
20401dac:	fe842783          	lw	a5,-24(s0)
20401db0:	0047a683          	lw	a3,4(a5)
20401db4:	fec42783          	lw	a5,-20(s0)
20401db8:	00279793          	slli	a5,a5,0x2
20401dbc:	00f687b3          	add	a5,a3,a5
20401dc0:	00072703          	lw	a4,0(a4)
20401dc4:	00e7a023          	sw	a4,0(a5)
  for (idx = 0; idx < num_ret; idx++) {
20401dc8:	fec42783          	lw	a5,-20(s0)
20401dcc:	00178793          	addi	a5,a5,1
20401dd0:	fef42623          	sw	a5,-20(s0)
20401dd4:	fec42703          	lw	a4,-20(s0)
20401dd8:	fd042783          	lw	a5,-48(s0)
20401ddc:	f8f746e3          	blt	a4,a5,20401d68 <TVMCFuncSetReturn+0x2c>
  }

  return 0;
20401de0:	00000793          	li	a5,0
}
20401de4:	00078513          	mv	a0,a5
20401de8:	02c12403          	lw	s0,44(sp)
20401dec:	03010113          	addi	sp,sp,48
20401df0:	00008067          	ret

20401df4 <TVMFuncFree>:

int TVMFuncFree(TVMFunctionHandle func) {
20401df4:	fe010113          	addi	sp,sp,-32
20401df8:	00812e23          	sw	s0,28(sp)
20401dfc:	02010413          	addi	s0,sp,32
20401e00:	fea42623          	sw	a0,-20(s0)
  // A no-op, since we don't actually allocate anything in GetFunction.
  return 0;
20401e04:	00000793          	li	a5,0
}
20401e08:	00078513          	mv	a0,a5
20401e0c:	01c12403          	lw	s0,28(sp)
20401e10:	02010113          	addi	sp,sp,32
20401e14:	00008067          	ret

20401e18 <RPCGetCRTMaxPacketSize>:
int RPCTimeEvaluator(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                     int* ret_type_code);

// Sends CRT max packet size.
int RPCGetCRTMaxPacketSize(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_value,
                           int* ret_type_codes) {
20401e18:	fd010113          	addi	sp,sp,-48
20401e1c:	02812623          	sw	s0,44(sp)
20401e20:	03010413          	addi	s0,sp,48
20401e24:	fea42623          	sw	a0,-20(s0)
20401e28:	feb42423          	sw	a1,-24(s0)
20401e2c:	fec42223          	sw	a2,-28(s0)
20401e30:	fed42023          	sw	a3,-32(s0)
20401e34:	fce42e23          	sw	a4,-36(s0)
  // 11 bytes is for microtvm overhead:
  // packet start(2), length(4), session header(3), crc(2)
  ret_value[0].v_int64 = TVM_CRT_MAX_PACKET_SIZE_BYTES - 11;
20401e38:	fe042703          	lw	a4,-32(s0)
20401e3c:	000027b7          	lui	a5,0x2
20401e40:	ff578793          	addi	a5,a5,-11 # 1ff5 <__stack_size+0x17f5>
20401e44:	00000813          	li	a6,0
20401e48:	00f72023          	sw	a5,0(a4)
20401e4c:	01072223          	sw	a6,4(a4)
  ret_type_codes[0] = kTVMArgInt;
20401e50:	fdc42783          	lw	a5,-36(s0)
20401e54:	0007a023          	sw	zero,0(a5)
  return 0;
20401e58:	00000793          	li	a5,0
}
20401e5c:	00078513          	mv	a0,a5
20401e60:	02c12403          	lw	s0,44(sp)
20401e64:	03010113          	addi	sp,sp,48
20401e68:	00008067          	ret

20401e6c <TVMInitializeRuntime>:

int TVMContribRandomFill(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                         int* ret_type_code);
tvm_crt_error_t TVMInitializeRuntime() {
20401e6c:	fd010113          	addi	sp,sp,-48
20401e70:	02112623          	sw	ra,44(sp)
20401e74:	02812423          	sw	s0,40(sp)
20401e78:	03010413          	addi	s0,sp,48
  int idx = 0;
20401e7c:	fe042623          	sw	zero,-20(s0)
  tvm_crt_error_t error = kTvmErrorNoError;
20401e80:	fe042423          	sw	zero,-24(s0)

  DLDevice dev = {kDLCPU, 0};
20401e84:	00100793          	li	a5,1
20401e88:	fef42023          	sw	a5,-32(s0)
20401e8c:	fe042223          	sw	zero,-28(s0)

  void* registry_backing_memory;
  error = TVMPlatformMemoryAllocate(TVM_CRT_GLOBAL_FUNC_REGISTRY_SIZE_BYTES, dev,
20401e90:	fdc40793          	addi	a5,s0,-36
20401e94:	00078693          	mv	a3,a5
20401e98:	fe042583          	lw	a1,-32(s0)
20401e9c:	fe442603          	lw	a2,-28(s0)
20401ea0:	10000513          	li	a0,256
20401ea4:	b59fe0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20401ea8:	fea42423          	sw	a0,-24(s0)
                                    &registry_backing_memory);
  if (error != kTvmErrorNoError) {
20401eac:	fe842783          	lw	a5,-24(s0)
20401eb0:	00078663          	beqz	a5,20401ebc <TVMInitializeRuntime+0x50>
    return error;
20401eb4:	fe842783          	lw	a5,-24(s0)
20401eb8:	1500006f          	j	20402008 <TVMInitializeRuntime+0x19c>
  }

  system_lib_handle = kTVMModuleHandleUninitialized;
20401ebc:	fff00713          	li	a4,-1
20401ec0:	5fbff797          	auipc	a5,0x5fbff
20401ec4:	fc478793          	addi	a5,a5,-60 # 80000e84 <system_lib_handle>
20401ec8:	00e7a023          	sw	a4,0(a5)

  error = TVMMutableFuncRegistry_Create(&global_func_registry, registry_backing_memory,
20401ecc:	fdc42783          	lw	a5,-36(s0)
20401ed0:	10000613          	li	a2,256
20401ed4:	00078593          	mv	a1,a5
20401ed8:	5fbff517          	auipc	a0,0x5fbff
20401edc:	f9850513          	addi	a0,a0,-104 # 80000e70 <global_func_registry>
20401ee0:	165000ef          	jal	ra,20402844 <TVMMutableFuncRegistry_Create>
20401ee4:	fea42423          	sw	a0,-24(s0)
                                        TVM_CRT_GLOBAL_FUNC_REGISTRY_SIZE_BYTES);
  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
20401ee8:	fe042623          	sw	zero,-20(s0)
20401eec:	0280006f          	j	20401f14 <TVMInitializeRuntime+0xa8>
    registered_modules[idx] = NULL;
20401ef0:	5fbff717          	auipc	a4,0x5fbff
20401ef4:	f8c70713          	addi	a4,a4,-116 # 80000e7c <registered_modules>
20401ef8:	fec42783          	lw	a5,-20(s0)
20401efc:	00279793          	slli	a5,a5,0x2
20401f00:	00f707b3          	add	a5,a4,a5
20401f04:	0007a023          	sw	zero,0(a5)
  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
20401f08:	fec42783          	lw	a5,-20(s0)
20401f0c:	00178793          	addi	a5,a5,1
20401f10:	fef42623          	sw	a5,-20(s0)
20401f14:	fec42703          	lw	a4,-20(s0)
20401f18:	00100793          	li	a5,1
20401f1c:	fce7dae3          	ble	a4,a5,20401ef0 <TVMInitializeRuntime+0x84>
  }

  if (error == kTvmErrorNoError) {
20401f20:	fe842783          	lw	a5,-24(s0)
20401f24:	02079263          	bnez	a5,20401f48 <TVMInitializeRuntime+0xdc>
    error = TVMFuncRegisterGlobal("runtime.SystemLib", &SystemLibraryCreate, 0);
20401f28:	00000613          	li	a2,0
20401f2c:	fffff597          	auipc	a1,0xfffff
20401f30:	79058593          	addi	a1,a1,1936 # 204016bc <SystemLibraryCreate>
20401f34:	0001e517          	auipc	a0,0x1e
20401f38:	cec50513          	addi	a0,a0,-788 # 2041fc20 <__func__.3409+0x1f0>
20401f3c:	d14ff0ef          	jal	ra,20401450 <TVMFuncRegisterGlobal>
20401f40:	00050793          	mv	a5,a0
20401f44:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
20401f48:	fe842783          	lw	a5,-24(s0)
20401f4c:	02079263          	bnez	a5,20401f70 <TVMInitializeRuntime+0x104>
    error = TVMFuncRegisterGlobal("tvm.rpc.server.ModuleGetFunction", &ModuleGetFunction, 0);
20401f50:	00000613          	li	a2,0
20401f54:	00000597          	auipc	a1,0x0
20401f58:	cc858593          	addi	a1,a1,-824 # 20401c1c <ModuleGetFunction>
20401f5c:	0001e517          	auipc	a0,0x1e
20401f60:	cd850513          	addi	a0,a0,-808 # 2041fc34 <__func__.3409+0x204>
20401f64:	cecff0ef          	jal	ra,20401450 <TVMFuncRegisterGlobal>
20401f68:	00050793          	mv	a5,a0
20401f6c:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
20401f70:	fe842783          	lw	a5,-24(s0)
20401f74:	02079263          	bnez	a5,20401f98 <TVMInitializeRuntime+0x12c>
    error = TVMFuncRegisterGlobal("runtime.RPCTimeEvaluator", &RPCTimeEvaluator, 0);
20401f78:	00000613          	li	a2,0
20401f7c:	00000597          	auipc	a1,0x0
20401f80:	0a058593          	addi	a1,a1,160 # 2040201c <RPCTimeEvaluator>
20401f84:	0001e517          	auipc	a0,0x1e
20401f88:	cd450513          	addi	a0,a0,-812 # 2041fc58 <__func__.3409+0x228>
20401f8c:	cc4ff0ef          	jal	ra,20401450 <TVMFuncRegisterGlobal>
20401f90:	00050793          	mv	a5,a0
20401f94:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
20401f98:	fe842783          	lw	a5,-24(s0)
20401f9c:	02079263          	bnez	a5,20401fc0 <TVMInitializeRuntime+0x154>
    error = TVMFuncRegisterGlobal("tvm.rpc.server.GetCRTMaxPacketSize", &RPCGetCRTMaxPacketSize, 0);
20401fa0:	00000613          	li	a2,0
20401fa4:	00000597          	auipc	a1,0x0
20401fa8:	e7458593          	addi	a1,a1,-396 # 20401e18 <RPCGetCRTMaxPacketSize>
20401fac:	0001e517          	auipc	a0,0x1e
20401fb0:	cc850513          	addi	a0,a0,-824 # 2041fc74 <__func__.3409+0x244>
20401fb4:	c9cff0ef          	jal	ra,20401450 <TVMFuncRegisterGlobal>
20401fb8:	00050793          	mv	a5,a0
20401fbc:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
20401fc0:	fe842783          	lw	a5,-24(s0)
20401fc4:	02079263          	bnez	a5,20401fe8 <TVMInitializeRuntime+0x17c>
    error = TVMFuncRegisterGlobal("tvm.contrib.random.random_fill", &TVMContribRandomFill, 0);
20401fc8:	00000613          	li	a2,0
20401fcc:	00000597          	auipc	a1,0x0
20401fd0:	5fc58593          	addi	a1,a1,1532 # 204025c8 <TVMContribRandomFill>
20401fd4:	0001e517          	auipc	a0,0x1e
20401fd8:	cc450513          	addi	a0,a0,-828 # 2041fc98 <__func__.3409+0x268>
20401fdc:	c74ff0ef          	jal	ra,20401450 <TVMFuncRegisterGlobal>
20401fe0:	00050793          	mv	a5,a0
20401fe4:	fef42423          	sw	a5,-24(s0)
  }

  if (error != kTvmErrorNoError) {
20401fe8:	fe842783          	lw	a5,-24(s0)
20401fec:	00078c63          	beqz	a5,20402004 <TVMInitializeRuntime+0x198>
    TVMPlatformMemoryFree(registry_backing_memory, dev);
20401ff0:	fdc42783          	lw	a5,-36(s0)
20401ff4:	fe042583          	lw	a1,-32(s0)
20401ff8:	fe442603          	lw	a2,-28(s0)
20401ffc:	00078513          	mv	a0,a5
20402000:	a61fe0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
  }

  return error;
20402004:	fe842783          	lw	a5,-24(s0)
}
20402008:	00078513          	mv	a0,a5
2040200c:	02c12083          	lw	ra,44(sp)
20402010:	02812403          	lw	s0,40(sp)
20402014:	03010113          	addi	sp,sp,48
20402018:	00008067          	ret

2040201c <RPCTimeEvaluator>:
} time_evaluator_state_t;

static time_evaluator_state_t g_time_evaluator_state;

int RPCTimeEvaluator(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                     int* ret_type_code) {
2040201c:	fc010113          	addi	sp,sp,-64
20402020:	02112e23          	sw	ra,60(sp)
20402024:	02812c23          	sw	s0,56(sp)
20402028:	04010413          	addi	s0,sp,64
2040202c:	fca42e23          	sw	a0,-36(s0)
20402030:	fcb42c23          	sw	a1,-40(s0)
20402034:	fcc42a23          	sw	a2,-44(s0)
20402038:	fcd42823          	sw	a3,-48(s0)
2040203c:	fce42623          	sw	a4,-52(s0)
  ret_val[0].v_handle = NULL;
20402040:	fd042783          	lw	a5,-48(s0)
20402044:	0007a023          	sw	zero,0(a5)
  ret_type_code[0] = kTVMNullptr;
20402048:	fcc42783          	lw	a5,-52(s0)
2040204c:	00400713          	li	a4,4
20402050:	00e7a023          	sw	a4,0(a5)
  if (num_args < 8) {
20402054:	fd442703          	lw	a4,-44(s0)
20402058:	00700793          	li	a5,7
2040205c:	00e7ce63          	blt	a5,a4,20402078 <RPCTimeEvaluator+0x5c>
    TVMAPIErrorf("not enough args");
20402060:	0001e517          	auipc	a0,0x1e
20402064:	c5850513          	addi	a0,a0,-936 # 2041fcb8 <__func__.3409+0x288>
20402068:	d05fe0ef          	jal	ra,20400d6c <TVMAPIErrorf>
    return kTvmErrorFunctionCallNumArguments;
2040206c:	000017b7          	lui	a5,0x1
20402070:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20402074:	1ec0006f          	j	20402260 <RPCTimeEvaluator+0x244>
  }
  if (type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
20402078:	fd842783          	lw	a5,-40(s0)
2040207c:	0007a703          	lw	a4,0(a5)
20402080:	00900793          	li	a5,9
20402084:	06f71e63          	bne	a4,a5,20402100 <RPCTimeEvaluator+0xe4>
20402088:	fd842783          	lw	a5,-40(s0)
2040208c:	00478793          	addi	a5,a5,4
20402090:	0007a703          	lw	a4,0(a5)
20402094:	00b00793          	li	a5,11
20402098:	06f71463          	bne	a4,a5,20402100 <RPCTimeEvaluator+0xe4>
      type_codes[2] != kTVMArgInt || type_codes[3] != kTVMArgInt || type_codes[4] != kTVMArgInt ||
2040209c:	fd842783          	lw	a5,-40(s0)
204020a0:	00878793          	addi	a5,a5,8
204020a4:	0007a783          	lw	a5,0(a5)
  if (type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
204020a8:	04079c63          	bnez	a5,20402100 <RPCTimeEvaluator+0xe4>
      type_codes[2] != kTVMArgInt || type_codes[3] != kTVMArgInt || type_codes[4] != kTVMArgInt ||
204020ac:	fd842783          	lw	a5,-40(s0)
204020b0:	00c78793          	addi	a5,a5,12
204020b4:	0007a783          	lw	a5,0(a5)
204020b8:	04079463          	bnez	a5,20402100 <RPCTimeEvaluator+0xe4>
204020bc:	fd842783          	lw	a5,-40(s0)
204020c0:	01078793          	addi	a5,a5,16
204020c4:	0007a783          	lw	a5,0(a5)
204020c8:	02079c63          	bnez	a5,20402100 <RPCTimeEvaluator+0xe4>
      type_codes[5] != kTVMArgInt || type_codes[6] != kTVMArgInt || type_codes[7] != kTVMStr) {
204020cc:	fd842783          	lw	a5,-40(s0)
204020d0:	01478793          	addi	a5,a5,20
204020d4:	0007a783          	lw	a5,0(a5)
      type_codes[2] != kTVMArgInt || type_codes[3] != kTVMArgInt || type_codes[4] != kTVMArgInt ||
204020d8:	02079463          	bnez	a5,20402100 <RPCTimeEvaluator+0xe4>
      type_codes[5] != kTVMArgInt || type_codes[6] != kTVMArgInt || type_codes[7] != kTVMStr) {
204020dc:	fd842783          	lw	a5,-40(s0)
204020e0:	01878793          	addi	a5,a5,24
204020e4:	0007a783          	lw	a5,0(a5)
204020e8:	00079c63          	bnez	a5,20402100 <RPCTimeEvaluator+0xe4>
204020ec:	fd842783          	lw	a5,-40(s0)
204020f0:	01c78793          	addi	a5,a5,28
204020f4:	0007a703          	lw	a4,0(a5)
204020f8:	00b00793          	li	a5,11
204020fc:	00f70e63          	beq	a4,a5,20402118 <RPCTimeEvaluator+0xfc>
    TVMAPIErrorf("one or more invalid arg types");
20402100:	0001e517          	auipc	a0,0x1e
20402104:	bc850513          	addi	a0,a0,-1080 # 2041fcc8 <__func__.3409+0x298>
20402108:	c65fe0ef          	jal	ra,20400d6c <TVMAPIErrorf>
    return kTvmErrorFunctionCallWrongArgType;
2040210c:	000017b7          	lui	a5,0x1
20402110:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
20402114:	14c0006f          	j	20402260 <RPCTimeEvaluator+0x244>
  }

  TVMModuleHandle mod = (TVMModuleHandle)args[0].v_handle;
20402118:	fdc42783          	lw	a5,-36(s0)
2040211c:	0007a783          	lw	a5,0(a5)
20402120:	fef42623          	sw	a5,-20(s0)
  const char* name = args[1].v_str;
20402124:	fdc42783          	lw	a5,-36(s0)
20402128:	00878793          	addi	a5,a5,8
2040212c:	0007a783          	lw	a5,0(a5)
20402130:	fef42423          	sw	a5,-24(s0)
  g_time_evaluator_state.device.device_type = args[2].v_int64;
20402134:	fdc42783          	lw	a5,-36(s0)
20402138:	01078793          	addi	a5,a5,16
2040213c:	0047a803          	lw	a6,4(a5)
20402140:	0007a783          	lw	a5,0(a5)
20402144:	00078713          	mv	a4,a5
20402148:	5fbff797          	auipc	a5,0x5fbff
2040214c:	d4078793          	addi	a5,a5,-704 # 80000e88 <g_time_evaluator_state>
20402150:	00e7a423          	sw	a4,8(a5)
  g_time_evaluator_state.device.device_id = args[3].v_int64;
20402154:	fdc42783          	lw	a5,-36(s0)
20402158:	01878793          	addi	a5,a5,24
2040215c:	0047a803          	lw	a6,4(a5)
20402160:	0007a783          	lw	a5,0(a5)
20402164:	00078713          	mv	a4,a5
20402168:	5fbff797          	auipc	a5,0x5fbff
2040216c:	d2078793          	addi	a5,a5,-736 # 80000e88 <g_time_evaluator_state>
20402170:	00e7a623          	sw	a4,12(a5)
  g_time_evaluator_state.number = args[4].v_int64;
20402174:	fdc42783          	lw	a5,-36(s0)
20402178:	02078793          	addi	a5,a5,32
2040217c:	0047a803          	lw	a6,4(a5)
20402180:	0007a783          	lw	a5,0(a5)
20402184:	00078713          	mv	a4,a5
20402188:	5fbff797          	auipc	a5,0x5fbff
2040218c:	d0078793          	addi	a5,a5,-768 # 80000e88 <g_time_evaluator_state>
20402190:	00e7a823          	sw	a4,16(a5)
  g_time_evaluator_state.repeat = args[5].v_int64;
20402194:	fdc42783          	lw	a5,-36(s0)
20402198:	02878793          	addi	a5,a5,40
2040219c:	0047a803          	lw	a6,4(a5)
204021a0:	0007a783          	lw	a5,0(a5)
204021a4:	00078713          	mv	a4,a5
204021a8:	5fbff797          	auipc	a5,0x5fbff
204021ac:	ce078793          	addi	a5,a5,-800 # 80000e88 <g_time_evaluator_state>
204021b0:	00e7aa23          	sw	a4,20(a5)
  g_time_evaluator_state.min_repeat_ms = args[6].v_int64;
204021b4:	fdc42783          	lw	a5,-36(s0)
204021b8:	03078793          	addi	a5,a5,48
204021bc:	0047a803          	lw	a6,4(a5)
204021c0:	0007a783          	lw	a5,0(a5)
204021c4:	00078713          	mv	a4,a5
204021c8:	5fbff797          	auipc	a5,0x5fbff
204021cc:	cc078793          	addi	a5,a5,-832 # 80000e88 <g_time_evaluator_state>
204021d0:	00e7ac23          	sw	a4,24(a5)

  int ret_code =
204021d4:	5fbff697          	auipc	a3,0x5fbff
204021d8:	cb868693          	addi	a3,a3,-840 # 80000e8c <g_time_evaluator_state+0x4>
204021dc:	00000613          	li	a2,0
204021e0:	fe842583          	lw	a1,-24(s0)
204021e4:	fec42503          	lw	a0,-20(s0)
204021e8:	9adff0ef          	jal	ra,20401b94 <TVMModGetFunction>
204021ec:	fea42223          	sw	a0,-28(s0)
      TVMModGetFunction(mod, name, /* query_imports */ 0, &g_time_evaluator_state.func_to_time);
  if (ret_code != 0) {
204021f0:	fe442783          	lw	a5,-28(s0)
204021f4:	00078663          	beqz	a5,20402200 <RPCTimeEvaluator+0x1e4>
    return ret_code;
204021f8:	fe442783          	lw	a5,-28(s0)
204021fc:	0640006f          	j	20402260 <RPCTimeEvaluator+0x244>
  }

  g_time_evaluator_state.function_index++;
20402200:	5fbff797          	auipc	a5,0x5fbff
20402204:	c8878793          	addi	a5,a5,-888 # 80000e88 <g_time_evaluator_state>
20402208:	0007d783          	lhu	a5,0(a5)
2040220c:	00178793          	addi	a5,a5,1
20402210:	01079713          	slli	a4,a5,0x10
20402214:	01075713          	srli	a4,a4,0x10
20402218:	5fbff797          	auipc	a5,0x5fbff
2040221c:	c7078793          	addi	a5,a5,-912 # 80000e88 <g_time_evaluator_state>
20402220:	00e79023          	sh	a4,0(a5)
  ret_val[0].v_handle =
      EncodeFunctionHandle(kTimeEvaluatorModuleIndex, g_time_evaluator_state.function_index);
20402224:	000087b7          	lui	a5,0x8
20402228:	fff78713          	addi	a4,a5,-1 # 7fff <__stack_size+0x77ff>
2040222c:	5fbff797          	auipc	a5,0x5fbff
20402230:	c5c78793          	addi	a5,a5,-932 # 80000e88 <g_time_evaluator_state>
20402234:	0007d783          	lhu	a5,0(a5)
20402238:	00078593          	mv	a1,a5
2040223c:	00070513          	mv	a0,a4
20402240:	d20ff0ef          	jal	ra,20401760 <EncodeFunctionHandle>
20402244:	00050713          	mv	a4,a0
  ret_val[0].v_handle =
20402248:	fd042783          	lw	a5,-48(s0)
2040224c:	00e7a023          	sw	a4,0(a5)
  ret_type_code[0] = kTVMPackedFuncHandle;
20402250:	fcc42783          	lw	a5,-52(s0)
20402254:	00a00713          	li	a4,10
20402258:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
2040225c:	00000793          	li	a5,0
}
20402260:	00078513          	mv	a0,a5
20402264:	03c12083          	lw	ra,60(sp)
20402268:	03812403          	lw	s0,56(sp)
2040226c:	04010113          	addi	sp,sp,64
20402270:	00008067          	ret

20402274 <RunTimeEvaluator>:

tvm_crt_error_t RunTimeEvaluator(tvm_function_index_t function_index, TVMValue* args,
                                 int* type_codes, int num_args, TVMValue* ret_val,
                                 int* ret_type_code) {
20402274:	f8010113          	addi	sp,sp,-128
20402278:	06112e23          	sw	ra,124(sp)
2040227c:	06812c23          	sw	s0,120(sp)
20402280:	08010413          	addi	s0,sp,128
20402284:	f8b42c23          	sw	a1,-104(s0)
20402288:	f8c42a23          	sw	a2,-108(s0)
2040228c:	f8d42823          	sw	a3,-112(s0)
20402290:	f8e42623          	sw	a4,-116(s0)
20402294:	f8f42423          	sw	a5,-120(s0)
20402298:	00050793          	mv	a5,a0
2040229c:	f8f41f23          	sh	a5,-98(s0)
  if (function_index != g_time_evaluator_state.function_index) {
204022a0:	5fbff797          	auipc	a5,0x5fbff
204022a4:	be878793          	addi	a5,a5,-1048 # 80000e88 <g_time_evaluator_state>
204022a8:	0007d783          	lhu	a5,0(a5)
204022ac:	f9e45703          	lhu	a4,-98(s0)
204022b0:	00f70863          	beq	a4,a5,204022c0 <RunTimeEvaluator+0x4c>
    return kTvmErrorTimeEvaluatorBadHandle;
204022b4:	000017b7          	lui	a5,0x1
204022b8:	90078793          	addi	a5,a5,-1792 # 900 <__stack_size+0x100>
204022bc:	2cc0006f          	j	20402588 <RunTimeEvaluator+0x314>
  }

  // TODO(areusch): should *really* rethink needing to return doubles
  DLDevice result_byte_dev = {kDLCPU, 0};
204022c0:	00100793          	li	a5,1
204022c4:	faf42823          	sw	a5,-80(s0)
204022c8:	fa042a23          	sw	zero,-76(s0)
  TVMByteArray* result_byte_arr = NULL;
204022cc:	fa042623          	sw	zero,-84(s0)
  tvm_crt_error_t err =
204022d0:	fac40793          	addi	a5,s0,-84
204022d4:	00078693          	mv	a3,a5
204022d8:	fb042583          	lw	a1,-80(s0)
204022dc:	fb442603          	lw	a2,-76(s0)
204022e0:	00800513          	li	a0,8
204022e4:	f18fe0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
204022e8:	fea42623          	sw	a0,-20(s0)
      TVMPlatformMemoryAllocate(sizeof(TVMByteArray), result_byte_dev, (void*)&result_byte_arr);
  if (err != kTvmErrorNoError) {
204022ec:	fec42783          	lw	a5,-20(s0)
204022f0:	22079063          	bnez	a5,20402510 <RunTimeEvaluator+0x29c>
    goto release_and_return;
  }
  result_byte_arr->data = NULL;
204022f4:	fac42783          	lw	a5,-84(s0)
204022f8:	0007a023          	sw	zero,0(a5)
  size_t data_size = sizeof(double) * g_time_evaluator_state.repeat;
204022fc:	5fbff797          	auipc	a5,0x5fbff
20402300:	b8c78793          	addi	a5,a5,-1140 # 80000e88 <g_time_evaluator_state>
20402304:	0147a783          	lw	a5,20(a5)
20402308:	00379793          	slli	a5,a5,0x3
2040230c:	fcf42423          	sw	a5,-56(s0)
  err = TVMPlatformMemoryAllocate(data_size, result_byte_dev, (void*)&result_byte_arr->data);
20402310:	fac42783          	lw	a5,-84(s0)
20402314:	00078693          	mv	a3,a5
20402318:	fb042583          	lw	a1,-80(s0)
2040231c:	fb442603          	lw	a2,-76(s0)
20402320:	fc842503          	lw	a0,-56(s0)
20402324:	ed8fe0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20402328:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
2040232c:	fec42783          	lw	a5,-20(s0)
20402330:	1e079463          	bnez	a5,20402518 <RunTimeEvaluator+0x2a4>
    goto release_and_return;
  }
  result_byte_arr->size = data_size;
20402334:	fac42783          	lw	a5,-84(s0)
20402338:	fc842703          	lw	a4,-56(s0)
2040233c:	00e7a223          	sw	a4,4(a5)
  double min_repeat_seconds = ((double)g_time_evaluator_state.min_repeat_ms) / 1000;
20402340:	5fbff797          	auipc	a5,0x5fbff
20402344:	b4878793          	addi	a5,a5,-1208 # 80000e88 <g_time_evaluator_state>
20402348:	0187a783          	lw	a5,24(a5)
2040234c:	00078513          	mv	a0,a5
20402350:	0ba1b0ef          	jal	ra,2041d40a <__floatsidf>
20402354:	0001e797          	auipc	a5,0x1e
20402358:	9ac78793          	addi	a5,a5,-1620 # 2041fd00 <__func__.3846+0x18>
2040235c:	0007a603          	lw	a2,0(a5)
20402360:	0047a683          	lw	a3,4(a5)
20402364:	6581a0ef          	jal	ra,2041c9bc <__divdf3>
20402368:	00050793          	mv	a5,a0
2040236c:	00058813          	mv	a6,a1
20402370:	fcf42023          	sw	a5,-64(s0)
20402374:	fd042223          	sw	a6,-60(s0)
  double* iter = (double*)result_byte_arr->data;
20402378:	fac42783          	lw	a5,-84(s0)
2040237c:	0007a783          	lw	a5,0(a5)
20402380:	fef42423          	sw	a5,-24(s0)
  for (int i = 0; i < g_time_evaluator_state.repeat; i++) {
20402384:	fe042223          	sw	zero,-28(s0)
20402388:	1540006f          	j	204024dc <RunTimeEvaluator+0x268>
    double repeat_res_seconds = 0.0;
2040238c:	fc042c23          	sw	zero,-40(s0)
20402390:	fc042e23          	sw	zero,-36(s0)
    int exec_count = 0;
20402394:	fc042a23          	sw	zero,-44(s0)
    // do-while structure ensures we run even when `min_repeat_ms` isn't set (i.e., is 0).
    do {
      err = TVMPlatformTimerStart();
20402398:	f04fe0ef          	jal	ra,20400a9c <TVMPlatformTimerStart>
2040239c:	fea42623          	sw	a0,-20(s0)
      if (err != kTvmErrorNoError) {
204023a0:	fec42783          	lw	a5,-20(s0)
204023a4:	16079e63          	bnez	a5,20402520 <RunTimeEvaluator+0x2ac>
        goto release_and_return;
      }

      for (int j = 0; j < g_time_evaluator_state.number; j++) {
204023a8:	fc042823          	sw	zero,-48(s0)
204023ac:	0440006f          	j	204023f0 <RunTimeEvaluator+0x17c>
        err = TVMFuncCall(g_time_evaluator_state.func_to_time, args, type_codes, num_args, ret_val,
204023b0:	5fbff797          	auipc	a5,0x5fbff
204023b4:	ad878793          	addi	a5,a5,-1320 # 80000e88 <g_time_evaluator_state>
204023b8:	0047a503          	lw	a0,4(a5)
204023bc:	f8842783          	lw	a5,-120(s0)
204023c0:	f8c42703          	lw	a4,-116(s0)
204023c4:	f9042683          	lw	a3,-112(s0)
204023c8:	f9442603          	lw	a2,-108(s0)
204023cc:	f9842583          	lw	a1,-104(s0)
204023d0:	d6cff0ef          	jal	ra,2040193c <TVMFuncCall>
204023d4:	00050793          	mv	a5,a0
204023d8:	fef42623          	sw	a5,-20(s0)
                          ret_type_code);
        if (err != kTvmErrorNoError) {
204023dc:	fec42783          	lw	a5,-20(s0)
204023e0:	14079463          	bnez	a5,20402528 <RunTimeEvaluator+0x2b4>
      for (int j = 0; j < g_time_evaluator_state.number; j++) {
204023e4:	fd042783          	lw	a5,-48(s0)
204023e8:	00178793          	addi	a5,a5,1
204023ec:	fcf42823          	sw	a5,-48(s0)
204023f0:	5fbff797          	auipc	a5,0x5fbff
204023f4:	a9878793          	addi	a5,a5,-1384 # 80000e88 <g_time_evaluator_state>
204023f8:	0107a783          	lw	a5,16(a5)
204023fc:	fd042703          	lw	a4,-48(s0)
20402400:	faf748e3          	blt	a4,a5,204023b0 <RunTimeEvaluator+0x13c>
          goto release_and_return;
        }
      }
      exec_count += g_time_evaluator_state.number;
20402404:	5fbff797          	auipc	a5,0x5fbff
20402408:	a8478793          	addi	a5,a5,-1404 # 80000e88 <g_time_evaluator_state>
2040240c:	0107a783          	lw	a5,16(a5)
20402410:	fd442703          	lw	a4,-44(s0)
20402414:	00f707b3          	add	a5,a4,a5
20402418:	fcf42a23          	sw	a5,-44(s0)

      double curr_res_seconds;
      err = TVMPlatformTimerStop(&curr_res_seconds);
2040241c:	fa040793          	addi	a5,s0,-96
20402420:	00078513          	mv	a0,a5
20402424:	e98fe0ef          	jal	ra,20400abc <TVMPlatformTimerStop>
20402428:	fea42623          	sw	a0,-20(s0)
      if (err != kTvmErrorNoError) {
2040242c:	fec42783          	lw	a5,-20(s0)
20402430:	10079063          	bnez	a5,20402530 <RunTimeEvaluator+0x2bc>
        goto release_and_return;
      }
      repeat_res_seconds += curr_res_seconds;
20402434:	fa042783          	lw	a5,-96(s0)
20402438:	fa442803          	lw	a6,-92(s0)
2040243c:	00078613          	mv	a2,a5
20402440:	00080693          	mv	a3,a6
20402444:	fd842503          	lw	a0,-40(s0)
20402448:	fdc42583          	lw	a1,-36(s0)
2040244c:	737190ef          	jal	ra,2041c382 <__adddf3>
20402450:	00050793          	mv	a5,a0
20402454:	00058813          	mv	a6,a1
20402458:	fcf42c23          	sw	a5,-40(s0)
2040245c:	fd042e23          	sw	a6,-36(s0)
    } while (repeat_res_seconds < min_repeat_seconds);
20402460:	fc042603          	lw	a2,-64(s0)
20402464:	fc442683          	lw	a3,-60(s0)
20402468:	fd842503          	lw	a0,-40(s0)
2040246c:	fdc42583          	lw	a1,-36(s0)
20402470:	27b1a0ef          	jal	ra,2041ceea <__ledf2>
20402474:	00050793          	mv	a5,a0
20402478:	f207c0e3          	bltz	a5,20402398 <RunTimeEvaluator+0x124>
    double mean_exec_seconds = repeat_res_seconds / exec_count;
2040247c:	fd442503          	lw	a0,-44(s0)
20402480:	78b1a0ef          	jal	ra,2041d40a <__floatsidf>
20402484:	00050793          	mv	a5,a0
20402488:	00058813          	mv	a6,a1
2040248c:	00078613          	mv	a2,a5
20402490:	00080693          	mv	a3,a6
20402494:	fd842503          	lw	a0,-40(s0)
20402498:	fdc42583          	lw	a1,-36(s0)
2040249c:	5201a0ef          	jal	ra,2041c9bc <__divdf3>
204024a0:	00050793          	mv	a5,a0
204024a4:	00058813          	mv	a6,a1
204024a8:	faf42c23          	sw	a5,-72(s0)
204024ac:	fb042e23          	sw	a6,-68(s0)
    *iter = mean_exec_seconds;
204024b0:	fe842703          	lw	a4,-24(s0)
204024b4:	fb842783          	lw	a5,-72(s0)
204024b8:	fbc42803          	lw	a6,-68(s0)
204024bc:	00f72023          	sw	a5,0(a4)
204024c0:	01072223          	sw	a6,4(a4)
    iter++;
204024c4:	fe842783          	lw	a5,-24(s0)
204024c8:	00878793          	addi	a5,a5,8
204024cc:	fef42423          	sw	a5,-24(s0)
  for (int i = 0; i < g_time_evaluator_state.repeat; i++) {
204024d0:	fe442783          	lw	a5,-28(s0)
204024d4:	00178793          	addi	a5,a5,1
204024d8:	fef42223          	sw	a5,-28(s0)
204024dc:	5fbff797          	auipc	a5,0x5fbff
204024e0:	9ac78793          	addi	a5,a5,-1620 # 80000e88 <g_time_evaluator_state>
204024e4:	0147a783          	lw	a5,20(a5)
204024e8:	fe442703          	lw	a4,-28(s0)
204024ec:	eaf740e3          	blt	a4,a5,2040238c <RunTimeEvaluator+0x118>
  }

  *ret_type_code = kTVMBytes;
204024f0:	f8842783          	lw	a5,-120(s0)
204024f4:	00c00713          	li	a4,12
204024f8:	00e7a023          	sw	a4,0(a5)
  ret_val->v_handle = result_byte_arr;
204024fc:	fac42703          	lw	a4,-84(s0)
20402500:	f8c42783          	lw	a5,-116(s0)
20402504:	00e7a023          	sw	a4,0(a5)
  return err;
20402508:	fec42783          	lw	a5,-20(s0)
2040250c:	07c0006f          	j	20402588 <RunTimeEvaluator+0x314>
    goto release_and_return;
20402510:	00000013          	nop
20402514:	0200006f          	j	20402534 <RunTimeEvaluator+0x2c0>
    goto release_and_return;
20402518:	00000013          	nop
2040251c:	0180006f          	j	20402534 <RunTimeEvaluator+0x2c0>
        goto release_and_return;
20402520:	00000013          	nop
20402524:	0100006f          	j	20402534 <RunTimeEvaluator+0x2c0>
          goto release_and_return;
20402528:	00000013          	nop
2040252c:	0080006f          	j	20402534 <RunTimeEvaluator+0x2c0>
        goto release_and_return;
20402530:	00000013          	nop

release_and_return : {
  tvm_crt_error_t release_err =
      TVMPlatformMemoryFree((void*)&result_byte_arr->data, result_byte_dev);
20402534:	fac42783          	lw	a5,-84(s0)
  tvm_crt_error_t release_err =
20402538:	fb042583          	lw	a1,-80(s0)
2040253c:	fb442603          	lw	a2,-76(s0)
20402540:	00078513          	mv	a0,a5
20402544:	d1cfe0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20402548:	fca42623          	sw	a0,-52(s0)
  if (release_err != kTvmErrorNoError) {
2040254c:	fcc42783          	lw	a5,-52(s0)
20402550:	00078e63          	beqz	a5,2040256c <RunTimeEvaluator+0x2f8>
    release_err = TVMPlatformMemoryFree((void*)&result_byte_arr, result_byte_dev);
20402554:	fac40793          	addi	a5,s0,-84
20402558:	fb042583          	lw	a1,-80(s0)
2040255c:	fb442603          	lw	a2,-76(s0)
20402560:	00078513          	mv	a0,a5
20402564:	cfcfe0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20402568:	fca42623          	sw	a0,-52(s0)
  }

  if (err == kTvmErrorNoError && release_err != kTvmErrorNoError) {
2040256c:	fec42783          	lw	a5,-20(s0)
20402570:	00079a63          	bnez	a5,20402584 <RunTimeEvaluator+0x310>
20402574:	fcc42783          	lw	a5,-52(s0)
20402578:	00078663          	beqz	a5,20402584 <RunTimeEvaluator+0x310>
    err = release_err;
2040257c:	fcc42783          	lw	a5,-52(s0)
20402580:	fef42623          	sw	a5,-20(s0)
  }
}
  return err;
20402584:	fec42783          	lw	a5,-20(s0)
}
20402588:	00078513          	mv	a0,a5
2040258c:	07c12083          	lw	ra,124(sp)
20402590:	07812403          	lw	s0,120(sp)
20402594:	08010113          	addi	sp,sp,128
20402598:	00008067          	ret

// Default implementation, overridden by the platform runtime.
__attribute__((weak)) tvm_crt_error_t TVMPlatformGenerateRandom(uint8_t* buffer, size_t num_bytes) {
2040259c:	fe010113          	addi	sp,sp,-32
204025a0:	00812e23          	sw	s0,28(sp)
204025a4:	02010413          	addi	s0,sp,32
204025a8:	fea42623          	sw	a0,-20(s0)
204025ac:	feb42423          	sw	a1,-24(s0)
  return kTvmErrorFunctionCallNotImplemented;
204025b0:	000017b7          	lui	a5,0x1
204025b4:	80278793          	addi	a5,a5,-2046 # 802 <__stack_size+0x2>
}
204025b8:	00078513          	mv	a0,a5
204025bc:	01c12403          	lw	s0,28(sp)
204025c0:	02010113          	addi	sp,sp,32
204025c4:	00008067          	ret

204025c8 <TVMContribRandomFill>:

// Fill the tensor in args[0] with random data using TVMPlatformGenerateRandom.
// Named to correspond with the analogous function in the C++ runtime.
int TVMContribRandomFill(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                         int* ret_type_code) {
204025c8:	fa010113          	addi	sp,sp,-96
204025cc:	04112e23          	sw	ra,92(sp)
204025d0:	04812c23          	sw	s0,88(sp)
204025d4:	06010413          	addi	s0,sp,96
204025d8:	faa42e23          	sw	a0,-68(s0)
204025dc:	fab42c23          	sw	a1,-72(s0)
204025e0:	fac42a23          	sw	a2,-76(s0)
204025e4:	fad42823          	sw	a3,-80(s0)
204025e8:	fae42623          	sw	a4,-84(s0)
  if (num_args != 1) {
204025ec:	fb442703          	lw	a4,-76(s0)
204025f0:	00100793          	li	a5,1
204025f4:	00f70863          	beq	a4,a5,20402604 <TVMContribRandomFill+0x3c>
    return kTvmErrorFunctionCallNumArguments;
204025f8:	000017b7          	lui	a5,0x1
204025fc:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20402600:	05c0006f          	j	2040265c <TVMContribRandomFill+0x94>
  }

  if (type_codes[0] != kTVMDLTensorHandle) {
20402604:	fb842783          	lw	a5,-72(s0)
20402608:	0007a703          	lw	a4,0(a5)
2040260c:	00700793          	li	a5,7
20402610:	00f70863          	beq	a4,a5,20402620 <TVMContribRandomFill+0x58>
    return kTvmErrorFunctionCallWrongArgType;
20402614:	000017b7          	lui	a5,0x1
20402618:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
2040261c:	0400006f          	j	2040265c <TVMContribRandomFill+0x94>
  }

  DLTensor* tensor = (DLTensor*)args[0].v_handle;
20402620:	fbc42783          	lw	a5,-68(s0)
20402624:	0007a783          	lw	a5,0(a5)
20402628:	fef42623          	sw	a5,-20(s0)
  TVMNDArray arr = {*tensor};
2040262c:	fec42703          	lw	a4,-20(s0)
20402630:	fc040793          	addi	a5,s0,-64
20402634:	00070693          	mv	a3,a4
20402638:	02800713          	li	a4,40
2040263c:	00070613          	mv	a2,a4
20402640:	00068593          	mv	a1,a3
20402644:	00078513          	mv	a0,a5
20402648:	1a9100ef          	jal	ra,20412ff0 <memcpy>
  return TVMNDArray_RandomFill(&arr);
2040264c:	fc040793          	addi	a5,s0,-64
20402650:	00078513          	mv	a0,a5
20402654:	469000ef          	jal	ra,204032bc <TVMNDArray_RandomFill>
20402658:	00050793          	mv	a5,a0
}
2040265c:	00078513          	mv	a0,a5
20402660:	05c12083          	lw	ra,92(sp)
20402664:	05812403          	lw	s0,88(sp)
20402668:	06010113          	addi	sp,sp,96
2040266c:	00008067          	ret

20402670 <strcmp_cursor>:
 *
 * \param cursor Pointer to cursor to first string to compare.
 * \param name Pointer to reference string.
 * \return 0 if the string pointed to by cursor == name; non-zero otherwise.
 */
int strcmp_cursor(const char** cursor, const char* name) {
20402670:	fd010113          	addi	sp,sp,-48
20402674:	02812623          	sw	s0,44(sp)
20402678:	03010413          	addi	s0,sp,48
2040267c:	fca42e23          	sw	a0,-36(s0)
20402680:	fcb42c23          	sw	a1,-40(s0)
  int return_value = 0;
20402684:	fe042623          	sw	zero,-20(s0)
  while (return_value == 0) {
20402688:	0600006f          	j	204026e8 <strcmp_cursor+0x78>
    char c = **cursor;
2040268c:	fdc42783          	lw	a5,-36(s0)
20402690:	0007a783          	lw	a5,0(a5)
20402694:	0007c783          	lbu	a5,0(a5)
20402698:	fef405a3          	sb	a5,-21(s0)
    char n = *name;
2040269c:	fd842783          	lw	a5,-40(s0)
204026a0:	0007c783          	lbu	a5,0(a5)
204026a4:	fef40523          	sb	a5,-22(s0)
    return_value = ((int)c) - ((int)n);
204026a8:	feb44703          	lbu	a4,-21(s0)
204026ac:	fea44783          	lbu	a5,-22(s0)
204026b0:	40f707b3          	sub	a5,a4,a5
204026b4:	fef42623          	sw	a5,-20(s0)

    if (n == 0 || c == 0) {
204026b8:	fea44783          	lbu	a5,-22(s0)
204026bc:	04078663          	beqz	a5,20402708 <strcmp_cursor+0x98>
204026c0:	feb44783          	lbu	a5,-21(s0)
204026c4:	04078263          	beqz	a5,20402708 <strcmp_cursor+0x98>
      break;
    }

    name++;
204026c8:	fd842783          	lw	a5,-40(s0)
204026cc:	00178793          	addi	a5,a5,1
204026d0:	fcf42c23          	sw	a5,-40(s0)
    (*cursor)++;
204026d4:	fdc42783          	lw	a5,-36(s0)
204026d8:	0007a783          	lw	a5,0(a5)
204026dc:	00178713          	addi	a4,a5,1
204026e0:	fdc42783          	lw	a5,-36(s0)
204026e4:	00e7a023          	sw	a4,0(a5)
  while (return_value == 0) {
204026e8:	fec42783          	lw	a5,-20(s0)
204026ec:	fa0780e3          	beqz	a5,2040268c <strcmp_cursor+0x1c>
  }

  while (**cursor != 0) {
204026f0:	0180006f          	j	20402708 <strcmp_cursor+0x98>
    (*cursor)++;
204026f4:	fdc42783          	lw	a5,-36(s0)
204026f8:	0007a783          	lw	a5,0(a5)
204026fc:	00178713          	addi	a4,a5,1
20402700:	fdc42783          	lw	a5,-36(s0)
20402704:	00e7a023          	sw	a4,0(a5)
  while (**cursor != 0) {
20402708:	fdc42783          	lw	a5,-36(s0)
2040270c:	0007a783          	lw	a5,0(a5)
20402710:	0007c783          	lbu	a5,0(a5)
20402714:	fe0790e3          	bnez	a5,204026f4 <strcmp_cursor+0x84>
  }

  return return_value;
20402718:	fec42783          	lw	a5,-20(s0)
}
2040271c:	00078513          	mv	a0,a5
20402720:	02c12403          	lw	s0,44(sp)
20402724:	03010113          	addi	sp,sp,48
20402728:	00008067          	ret

2040272c <TVMFuncRegistry_Lookup>:

tvm_crt_error_t TVMFuncRegistry_Lookup(const TVMFuncRegistry* reg, const char* name,
                                       tvm_function_index_t* function_index) {
2040272c:	fd010113          	addi	sp,sp,-48
20402730:	02112623          	sw	ra,44(sp)
20402734:	02812423          	sw	s0,40(sp)
20402738:	03010413          	addi	s0,sp,48
2040273c:	fca42e23          	sw	a0,-36(s0)
20402740:	fcb42c23          	sw	a1,-40(s0)
20402744:	fcc42a23          	sw	a2,-44(s0)
  tvm_function_index_t idx;
  const char* reg_name_ptr;

  idx = 0;
20402748:	fe041723          	sh	zero,-18(s0)
  // NOTE: reg_name_ptr starts at index 1 to skip num_funcs.
  for (reg_name_ptr = reg->names + 1; *reg_name_ptr != '\0'; reg_name_ptr++) {
2040274c:	fdc42783          	lw	a5,-36(s0)
20402750:	0007a783          	lw	a5,0(a5)
20402754:	00178793          	addi	a5,a5,1
20402758:	fef42423          	sw	a5,-24(s0)
2040275c:	0480006f          	j	204027a4 <TVMFuncRegistry_Lookup+0x78>
    if (!strcmp_cursor(&reg_name_ptr, name)) {
20402760:	fe840793          	addi	a5,s0,-24
20402764:	fd842583          	lw	a1,-40(s0)
20402768:	00078513          	mv	a0,a5
2040276c:	f05ff0ef          	jal	ra,20402670 <strcmp_cursor>
20402770:	00050793          	mv	a5,a0
20402774:	00079c63          	bnez	a5,2040278c <TVMFuncRegistry_Lookup+0x60>
      *function_index = idx;
20402778:	fd442783          	lw	a5,-44(s0)
2040277c:	fee45703          	lhu	a4,-18(s0)
20402780:	00e79023          	sh	a4,0(a5)
      return kTvmErrorNoError;
20402784:	00000793          	li	a5,0
20402788:	02c0006f          	j	204027b4 <TVMFuncRegistry_Lookup+0x88>
    }

    idx++;
2040278c:	fee45783          	lhu	a5,-18(s0)
20402790:	00178793          	addi	a5,a5,1
20402794:	fef41723          	sh	a5,-18(s0)
  for (reg_name_ptr = reg->names + 1; *reg_name_ptr != '\0'; reg_name_ptr++) {
20402798:	fe842783          	lw	a5,-24(s0)
2040279c:	00178793          	addi	a5,a5,1
204027a0:	fef42423          	sw	a5,-24(s0)
204027a4:	fe842783          	lw	a5,-24(s0)
204027a8:	0007c783          	lbu	a5,0(a5)
204027ac:	fa079ae3          	bnez	a5,20402760 <TVMFuncRegistry_Lookup+0x34>
  }

  return kTvmErrorFunctionNameNotFound;
204027b0:	10000793          	li	a5,256
}
204027b4:	00078513          	mv	a0,a5
204027b8:	02c12083          	lw	ra,44(sp)
204027bc:	02812403          	lw	s0,40(sp)
204027c0:	03010113          	addi	sp,sp,48
204027c4:	00008067          	ret

204027c8 <TVMFuncRegistry_GetByIndex>:

tvm_crt_error_t TVMFuncRegistry_GetByIndex(const TVMFuncRegistry* reg,
                                           tvm_function_index_t function_index,
                                           TVMBackendPackedCFunc* out_func) {
204027c8:	fd010113          	addi	sp,sp,-48
204027cc:	02812623          	sw	s0,44(sp)
204027d0:	03010413          	addi	s0,sp,48
204027d4:	fca42e23          	sw	a0,-36(s0)
204027d8:	00058793          	mv	a5,a1
204027dc:	fcc42a23          	sw	a2,-44(s0)
204027e0:	fcf41d23          	sh	a5,-38(s0)
  uint8_t num_funcs;

  num_funcs = reg->names[0];
204027e4:	fdc42783          	lw	a5,-36(s0)
204027e8:	0007a783          	lw	a5,0(a5)
204027ec:	0007c783          	lbu	a5,0(a5)
204027f0:	fef407a3          	sb	a5,-17(s0)
  if (function_index >= num_funcs) {
204027f4:	fef44783          	lbu	a5,-17(s0)
204027f8:	01079793          	slli	a5,a5,0x10
204027fc:	0107d793          	srli	a5,a5,0x10
20402800:	fda45703          	lhu	a4,-38(s0)
20402804:	00f76663          	bltu	a4,a5,20402810 <TVMFuncRegistry_GetByIndex+0x48>
    return kTvmErrorFunctionIndexInvalid;
20402808:	10100793          	li	a5,257
2040280c:	0280006f          	j	20402834 <TVMFuncRegistry_GetByIndex+0x6c>
  }

  *out_func = reg->funcs[function_index];
20402810:	fdc42783          	lw	a5,-36(s0)
20402814:	0047a703          	lw	a4,4(a5)
20402818:	fda45783          	lhu	a5,-38(s0)
2040281c:	00279793          	slli	a5,a5,0x2
20402820:	00f707b3          	add	a5,a4,a5
20402824:	0007a703          	lw	a4,0(a5)
20402828:	fd442783          	lw	a5,-44(s0)
2040282c:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
20402830:	00000793          	li	a5,0
}
20402834:	00078513          	mv	a0,a5
20402838:	02c12403          	lw	s0,44(sp)
2040283c:	03010113          	addi	sp,sp,48
20402840:	00008067          	ret

20402844 <TVMMutableFuncRegistry_Create>:

tvm_crt_error_t TVMMutableFuncRegistry_Create(TVMMutableFuncRegistry* reg, uint8_t* buffer,
                                              size_t buffer_size_bytes) {
20402844:	fe010113          	addi	sp,sp,-32
20402848:	00112e23          	sw	ra,28(sp)
2040284c:	00812c23          	sw	s0,24(sp)
20402850:	02010413          	addi	s0,sp,32
20402854:	fea42623          	sw	a0,-20(s0)
20402858:	feb42423          	sw	a1,-24(s0)
2040285c:	fec42223          	sw	a2,-28(s0)
  if (buffer_size_bytes < kTvmAverageFuncEntrySizeBytes) {
20402860:	00f00793          	li	a5,15
20402864:	fe442703          	lw	a4,-28(s0)
20402868:	00f77663          	bleu	a5,a4,20402874 <TVMMutableFuncRegistry_Create+0x30>
    return kTvmErrorBufferTooSmall;
2040286c:	10400793          	li	a5,260
20402870:	06c0006f          	j	204028dc <TVMMutableFuncRegistry_Create+0x98>
  }

  reg->registry.names = (const char*)buffer;
20402874:	fec42783          	lw	a5,-20(s0)
20402878:	fe842703          	lw	a4,-24(s0)
2040287c:	00e7a023          	sw	a4,0(a5)
  buffer[0] = 0;  // number of functions present in buffer.
20402880:	fe842783          	lw	a5,-24(s0)
20402884:	00078023          	sb	zero,0(a5)
  buffer[1] = 0;  // end of names list marker.
20402888:	fe842783          	lw	a5,-24(s0)
2040288c:	00178793          	addi	a5,a5,1
20402890:	00078023          	sb	zero,0(a5)

  // compute a guess of the average size of one entry:
  //  - assume average function name is around ~10 bytes
  //  - 1 byte for \0
  //  - size of 1 function pointer
  reg->max_functions = buffer_size_bytes / kTvmAverageFuncEntrySizeBytes;
20402894:	00f00793          	li	a5,15
20402898:	00078593          	mv	a1,a5
2040289c:	fe442503          	lw	a0,-28(s0)
204028a0:	7491c0ef          	jal	ra,2041f7e8 <__udivsi3>
204028a4:	00050793          	mv	a5,a0
204028a8:	00078713          	mv	a4,a5
204028ac:	fec42783          	lw	a5,-20(s0)
204028b0:	00e7a423          	sw	a4,8(a5)
  reg->registry.funcs =
      (TVMBackendPackedCFunc*)(buffer + buffer_size_bytes - reg->max_functions * sizeof(void*));
204028b4:	fec42783          	lw	a5,-20(s0)
204028b8:	0087a783          	lw	a5,8(a5)
204028bc:	00279793          	slli	a5,a5,0x2
204028c0:	fe442703          	lw	a4,-28(s0)
204028c4:	40f707b3          	sub	a5,a4,a5
204028c8:	fe842703          	lw	a4,-24(s0)
204028cc:	00f70733          	add	a4,a4,a5
  reg->registry.funcs =
204028d0:	fec42783          	lw	a5,-20(s0)
204028d4:	00e7a223          	sw	a4,4(a5)

  return kTvmErrorNoError;
204028d8:	00000793          	li	a5,0
}
204028dc:	00078513          	mv	a0,a5
204028e0:	01c12083          	lw	ra,28(sp)
204028e4:	01812403          	lw	s0,24(sp)
204028e8:	02010113          	addi	sp,sp,32
204028ec:	00008067          	ret

204028f0 <TVMMutableFuncRegistry_Set>:

tvm_crt_error_t TVMMutableFuncRegistry_Set(TVMMutableFuncRegistry* reg, const char* name,
                                           TVMBackendPackedCFunc func, int override) {
204028f0:	fd010113          	addi	sp,sp,-48
204028f4:	02112623          	sw	ra,44(sp)
204028f8:	02812423          	sw	s0,40(sp)
204028fc:	03010413          	addi	s0,sp,48
20402900:	fca42e23          	sw	a0,-36(s0)
20402904:	fcb42c23          	sw	a1,-40(s0)
20402908:	fcc42a23          	sw	a2,-44(s0)
2040290c:	fcd42823          	sw	a3,-48(s0)
  size_t idx;
  char* reg_name_ptr;

  idx = 0;
20402910:	fe042623          	sw	zero,-20(s0)
  // NOTE: safe to discard const qualifier here, since reg->registry.names was set from
  // TVMMutableFuncRegistry_Create above.
  // NOTE: reg_name_ptr starts at index 1 to skip num_funcs.
  for (reg_name_ptr = (char*)reg->registry.names + 1; *reg_name_ptr != 0; reg_name_ptr++) {
20402914:	fdc42783          	lw	a5,-36(s0)
20402918:	0007a783          	lw	a5,0(a5)
2040291c:	00178793          	addi	a5,a5,1
20402920:	fef42023          	sw	a5,-32(s0)
20402924:	0680006f          	j	2040298c <TVMMutableFuncRegistry_Set+0x9c>
    if (!strcmp_cursor((const char**)&reg_name_ptr, name)) {
20402928:	fe040793          	addi	a5,s0,-32
2040292c:	fd842583          	lw	a1,-40(s0)
20402930:	00078513          	mv	a0,a5
20402934:	d3dff0ef          	jal	ra,20402670 <strcmp_cursor>
20402938:	00050793          	mv	a5,a0
2040293c:	02079c63          	bnez	a5,20402974 <TVMMutableFuncRegistry_Set+0x84>
      if (override == 0) {
20402940:	fd042783          	lw	a5,-48(s0)
20402944:	00079663          	bnez	a5,20402950 <TVMMutableFuncRegistry_Set+0x60>
        return kTvmErrorFunctionAlreadyDefined;
20402948:	10300793          	li	a5,259
2040294c:	1200006f          	j	20402a6c <TVMMutableFuncRegistry_Set+0x17c>
      }
      ((TVMBackendPackedCFunc*)reg->registry.funcs)[idx] = func;
20402950:	fdc42783          	lw	a5,-36(s0)
20402954:	0047a703          	lw	a4,4(a5)
20402958:	fec42783          	lw	a5,-20(s0)
2040295c:	00279793          	slli	a5,a5,0x2
20402960:	00f707b3          	add	a5,a4,a5
20402964:	fd442703          	lw	a4,-44(s0)
20402968:	00e7a023          	sw	a4,0(a5)
      return kTvmErrorNoError;
2040296c:	00000793          	li	a5,0
20402970:	0fc0006f          	j	20402a6c <TVMMutableFuncRegistry_Set+0x17c>
    }

    idx++;
20402974:	fec42783          	lw	a5,-20(s0)
20402978:	00178793          	addi	a5,a5,1
2040297c:	fef42623          	sw	a5,-20(s0)
  for (reg_name_ptr = (char*)reg->registry.names + 1; *reg_name_ptr != 0; reg_name_ptr++) {
20402980:	fe042783          	lw	a5,-32(s0)
20402984:	00178793          	addi	a5,a5,1
20402988:	fef42023          	sw	a5,-32(s0)
2040298c:	fe042783          	lw	a5,-32(s0)
20402990:	0007c783          	lbu	a5,0(a5)
20402994:	f8079ae3          	bnez	a5,20402928 <TVMMutableFuncRegistry_Set+0x38>
  }

  if (reg_name_ptr > ((const char*)reg->registry.funcs)) {
20402998:	fdc42783          	lw	a5,-36(s0)
2040299c:	0047a703          	lw	a4,4(a5)
204029a0:	fe042783          	lw	a5,-32(s0)
204029a4:	00f77663          	bleu	a5,a4,204029b0 <TVMMutableFuncRegistry_Set+0xc0>
    return kTvmErrorFunctionRegistryFull;
204029a8:	10200793          	li	a5,258
204029ac:	0c00006f          	j	20402a6c <TVMMutableFuncRegistry_Set+0x17c>
  }

  size_t name_len = strlen(name);
204029b0:	fd842503          	lw	a0,-40(s0)
204029b4:	195100ef          	jal	ra,20413348 <strlen>
204029b8:	fea42423          	sw	a0,-24(s0)
  size_t names_bytes_remaining = ((const char*)reg->registry.funcs) - reg_name_ptr;
204029bc:	fdc42783          	lw	a5,-36(s0)
204029c0:	0047a783          	lw	a5,4(a5)
204029c4:	00078713          	mv	a4,a5
204029c8:	fe042783          	lw	a5,-32(s0)
204029cc:	40f707b3          	sub	a5,a4,a5
204029d0:	fef42223          	sw	a5,-28(s0)
  if (idx >= reg->max_functions || name_len + 1 > names_bytes_remaining) {
204029d4:	fdc42783          	lw	a5,-36(s0)
204029d8:	0087a783          	lw	a5,8(a5)
204029dc:	fec42703          	lw	a4,-20(s0)
204029e0:	00f77a63          	bleu	a5,a4,204029f4 <TVMMutableFuncRegistry_Set+0x104>
204029e4:	fe842783          	lw	a5,-24(s0)
204029e8:	00178793          	addi	a5,a5,1
204029ec:	fe442703          	lw	a4,-28(s0)
204029f0:	00f77663          	bleu	a5,a4,204029fc <TVMMutableFuncRegistry_Set+0x10c>
    return kTvmErrorFunctionRegistryFull;
204029f4:	10200793          	li	a5,258
204029f8:	0740006f          	j	20402a6c <TVMMutableFuncRegistry_Set+0x17c>
  }

  memcpy(reg_name_ptr, name, name_len + 1);
204029fc:	fe042703          	lw	a4,-32(s0)
20402a00:	fe842783          	lw	a5,-24(s0)
20402a04:	00178793          	addi	a5,a5,1
20402a08:	00078613          	mv	a2,a5
20402a0c:	fd842583          	lw	a1,-40(s0)
20402a10:	00070513          	mv	a0,a4
20402a14:	5dc100ef          	jal	ra,20412ff0 <memcpy>
  reg_name_ptr += name_len + 1;
20402a18:	fe042703          	lw	a4,-32(s0)
20402a1c:	fe842783          	lw	a5,-24(s0)
20402a20:	00178793          	addi	a5,a5,1
20402a24:	00f707b3          	add	a5,a4,a5
20402a28:	fef42023          	sw	a5,-32(s0)
  *reg_name_ptr = 0;
20402a2c:	fe042783          	lw	a5,-32(s0)
20402a30:	00078023          	sb	zero,0(a5)
  ((TVMBackendPackedCFunc*)reg->registry.funcs)[idx] = func;
20402a34:	fdc42783          	lw	a5,-36(s0)
20402a38:	0047a703          	lw	a4,4(a5)
20402a3c:	fec42783          	lw	a5,-20(s0)
20402a40:	00279793          	slli	a5,a5,0x2
20402a44:	00f707b3          	add	a5,a4,a5
20402a48:	fd442703          	lw	a4,-44(s0)
20402a4c:	00e7a023          	sw	a4,0(a5)
  ((char*)reg->registry.names)[0]++;  // increment num_funcs.
20402a50:	fdc42783          	lw	a5,-36(s0)
20402a54:	0007a783          	lw	a5,0(a5)
20402a58:	0007c703          	lbu	a4,0(a5)
20402a5c:	00170713          	addi	a4,a4,1
20402a60:	0ff77713          	andi	a4,a4,255
20402a64:	00e78023          	sb	a4,0(a5)

  return kTvmErrorNoError;
20402a68:	00000793          	li	a5,0
}
20402a6c:	00078513          	mv	a0,a5
20402a70:	02c12083          	lw	ra,44(sp)
20402a74:	02812403          	lw	s0,40(sp)
20402a78:	03010113          	addi	sp,sp,48
20402a7c:	00008067          	ret

20402a80 <TVMNDArray_Create>:
#include <tvm/runtime/crt/platform.h>

#include "crt_config.h"

int TVMNDArray_Create(int32_t ndim, const tvm_index_t* shape, DLDataType dtype, DLDevice dev,
                      TVMNDArray* array) {
20402a80:	fc010113          	addi	sp,sp,-64
20402a84:	02112e23          	sw	ra,60(sp)
20402a88:	02812c23          	sw	s0,56(sp)
20402a8c:	04010413          	addi	s0,sp,64
20402a90:	fca42e23          	sw	a0,-36(s0)
20402a94:	fcb42c23          	sw	a1,-40(s0)
20402a98:	fcc42a23          	sw	a2,-44(s0)
20402a9c:	fcd42623          	sw	a3,-52(s0)
20402aa0:	fce42823          	sw	a4,-48(s0)
20402aa4:	fcf42423          	sw	a5,-56(s0)
  memset(array, 0, sizeof(TVMNDArray));
20402aa8:	02800613          	li	a2,40
20402aac:	00000593          	li	a1,0
20402ab0:	fc842503          	lw	a0,-56(s0)
20402ab4:	5fa100ef          	jal	ra,204130ae <memset>
  array->dl_tensor.ndim = ndim;
20402ab8:	fc842783          	lw	a5,-56(s0)
20402abc:	fdc42703          	lw	a4,-36(s0)
20402ac0:	00e7a623          	sw	a4,12(a5)
  tvm_crt_error_t err;
  DLDevice dldev = {kDLCPU, 0};
20402ac4:	00100793          	li	a5,1
20402ac8:	fef42223          	sw	a5,-28(s0)
20402acc:	fe042423          	sw	zero,-24(s0)
  err = TVMPlatformMemoryAllocate(sizeof(int64_t) * ndim, dldev, (void*)&array->dl_tensor.shape);
20402ad0:	fdc42783          	lw	a5,-36(s0)
20402ad4:	00379713          	slli	a4,a5,0x3
20402ad8:	fc842783          	lw	a5,-56(s0)
20402adc:	01478793          	addi	a5,a5,20
20402ae0:	00078693          	mv	a3,a5
20402ae4:	fe442583          	lw	a1,-28(s0)
20402ae8:	fe842603          	lw	a2,-24(s0)
20402aec:	00070513          	mv	a0,a4
20402af0:	f0dfd0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20402af4:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20402af8:	fec42783          	lw	a5,-20(s0)
20402afc:	00078663          	beqz	a5,20402b08 <TVMNDArray_Create+0x88>
    return -1;
20402b00:	fff00793          	li	a5,-1
20402b04:	0500006f          	j	20402b54 <TVMNDArray_Create+0xd4>
  }
  memcpy(array->dl_tensor.shape, shape, sizeof(int64_t) * ndim);
20402b08:	fc842783          	lw	a5,-56(s0)
20402b0c:	0147a703          	lw	a4,20(a5)
20402b10:	fdc42783          	lw	a5,-36(s0)
20402b14:	00379793          	slli	a5,a5,0x3
20402b18:	00078613          	mv	a2,a5
20402b1c:	fd842583          	lw	a1,-40(s0)
20402b20:	00070513          	mv	a0,a4
20402b24:	4cc100ef          	jal	ra,20412ff0 <memcpy>
  array->dl_tensor.dtype = dtype;
20402b28:	fc842783          	lw	a5,-56(s0)
20402b2c:	fd442703          	lw	a4,-44(s0)
20402b30:	00e7a823          	sw	a4,16(a5)
  array->dl_tensor.device = dev;
20402b34:	fc842703          	lw	a4,-56(s0)
20402b38:	fcc42783          	lw	a5,-52(s0)
20402b3c:	fd042803          	lw	a6,-48(s0)
20402b40:	00f72223          	sw	a5,4(a4)
20402b44:	01072423          	sw	a6,8(a4)
  array->dl_tensor.data = 0;
20402b48:	fc842783          	lw	a5,-56(s0)
20402b4c:	0007a023          	sw	zero,0(a5)
  return 0;
20402b50:	00000793          	li	a5,0
}
20402b54:	00078513          	mv	a0,a5
20402b58:	03c12083          	lw	ra,60(sp)
20402b5c:	03812403          	lw	s0,56(sp)
20402b60:	04010113          	addi	sp,sp,64
20402b64:	00008067          	ret

20402b68 <TVMNDArray_DataSizeBytes>:

int64_t TVMNDArray_DataSizeBytes(TVMNDArray* array) {
20402b68:	fb010113          	addi	sp,sp,-80
20402b6c:	04112623          	sw	ra,76(sp)
20402b70:	04812423          	sw	s0,72(sp)
20402b74:	05212223          	sw	s2,68(sp)
20402b78:	05312023          	sw	s3,64(sp)
20402b7c:	03412e23          	sw	s4,60(sp)
20402b80:	03512c23          	sw	s5,56(sp)
20402b84:	03612a23          	sw	s6,52(sp)
20402b88:	03712823          	sw	s7,48(sp)
20402b8c:	03812623          	sw	s8,44(sp)
20402b90:	03912423          	sw	s9,40(sp)
20402b94:	05010413          	addi	s0,sp,80
20402b98:	faa42e23          	sw	a0,-68(s0)
  int64_t num_elems = 1;
20402b9c:	00100793          	li	a5,1
20402ba0:	00000813          	li	a6,0
20402ba4:	fcf42423          	sw	a5,-56(s0)
20402ba8:	fd042623          	sw	a6,-52(s0)
  int32_t idx;
  for (idx = 0; idx < array->dl_tensor.ndim; ++idx) {
20402bac:	fc042223          	sw	zero,-60(s0)
20402bb0:	0500006f          	j	20402c00 <TVMNDArray_DataSizeBytes+0x98>
    num_elems *= array->dl_tensor.shape[idx];
20402bb4:	fbc42783          	lw	a5,-68(s0)
20402bb8:	0147a703          	lw	a4,20(a5)
20402bbc:	fc442783          	lw	a5,-60(s0)
20402bc0:	00379793          	slli	a5,a5,0x3
20402bc4:	00f707b3          	add	a5,a4,a5
20402bc8:	0047a803          	lw	a6,4(a5)
20402bcc:	0007a783          	lw	a5,0(a5)
20402bd0:	00078613          	mv	a2,a5
20402bd4:	00080693          	mv	a3,a6
20402bd8:	fc842503          	lw	a0,-56(s0)
20402bdc:	fcc42583          	lw	a1,-52(s0)
20402be0:	3a51c0ef          	jal	ra,2041f784 <__muldi3>
20402be4:	00050793          	mv	a5,a0
20402be8:	00058813          	mv	a6,a1
20402bec:	fcf42423          	sw	a5,-56(s0)
20402bf0:	fd042623          	sw	a6,-52(s0)
  for (idx = 0; idx < array->dl_tensor.ndim; ++idx) {
20402bf4:	fc442783          	lw	a5,-60(s0)
20402bf8:	00178793          	addi	a5,a5,1
20402bfc:	fcf42223          	sw	a5,-60(s0)
20402c00:	fbc42783          	lw	a5,-68(s0)
20402c04:	00c7a783          	lw	a5,12(a5)
20402c08:	fc442703          	lw	a4,-60(s0)
20402c0c:	faf744e3          	blt	a4,a5,20402bb4 <TVMNDArray_DataSizeBytes+0x4c>
  }
  return (num_elems * array->dl_tensor.dtype.bits + 7) / 8;
20402c10:	fbc42783          	lw	a5,-68(s0)
20402c14:	0117c783          	lbu	a5,17(a5)
20402c18:	00078c13          	mv	s8,a5
20402c1c:	00000c93          	li	s9,0
20402c20:	fc842603          	lw	a2,-56(s0)
20402c24:	fcc42683          	lw	a3,-52(s0)
20402c28:	000c0513          	mv	a0,s8
20402c2c:	000c8593          	mv	a1,s9
20402c30:	3551c0ef          	jal	ra,2041f784 <__muldi3>
20402c34:	00050793          	mv	a5,a0
20402c38:	00058813          	mv	a6,a1
20402c3c:	00078693          	mv	a3,a5
20402c40:	00080713          	mv	a4,a6
20402c44:	00700593          	li	a1,7
20402c48:	00000613          	li	a2,0
20402c4c:	00b687b3          	add	a5,a3,a1
20402c50:	00078513          	mv	a0,a5
20402c54:	00d53533          	sltu	a0,a0,a3
20402c58:	00c70833          	add	a6,a4,a2
20402c5c:	01050733          	add	a4,a0,a6
20402c60:	00070813          	mv	a6,a4
20402c64:	00078693          	mv	a3,a5
20402c68:	00080713          	mv	a4,a6
20402c6c:	41f75793          	srai	a5,a4,0x1f
20402c70:	00078b13          	mv	s6,a5
20402c74:	41f7d793          	srai	a5,a5,0x1f
20402c78:	00078b93          	mv	s7,a5
20402c7c:	007b7913          	andi	s2,s6,7
20402c80:	000bf993          	andi	s3,s7,0
20402c84:	00d907b3          	add	a5,s2,a3
20402c88:	00078613          	mv	a2,a5
20402c8c:	01263633          	sltu	a2,a2,s2
20402c90:	00e98833          	add	a6,s3,a4
20402c94:	01060733          	add	a4,a2,a6
20402c98:	00070813          	mv	a6,a4
20402c9c:	01d81713          	slli	a4,a6,0x1d
20402ca0:	0037da13          	srli	s4,a5,0x3
20402ca4:	01476a33          	or	s4,a4,s4
20402ca8:	40385a93          	srai	s5,a6,0x3
20402cac:	000a0793          	mv	a5,s4
20402cb0:	000a8813          	mv	a6,s5
}
20402cb4:	00078513          	mv	a0,a5
20402cb8:	00080593          	mv	a1,a6
20402cbc:	04c12083          	lw	ra,76(sp)
20402cc0:	04812403          	lw	s0,72(sp)
20402cc4:	04412903          	lw	s2,68(sp)
20402cc8:	04012983          	lw	s3,64(sp)
20402ccc:	03c12a03          	lw	s4,60(sp)
20402cd0:	03812a83          	lw	s5,56(sp)
20402cd4:	03412b03          	lw	s6,52(sp)
20402cd8:	03012b83          	lw	s7,48(sp)
20402cdc:	02c12c03          	lw	s8,44(sp)
20402ce0:	02812c83          	lw	s9,40(sp)
20402ce4:	05010113          	addi	sp,sp,80
20402ce8:	00008067          	ret

20402cec <TVMNDArray_Empty>:

int TVMNDArray_Empty(int32_t ndim, const tvm_index_t* shape, DLDataType dtype, DLDevice dev,
                     TVMNDArray* array) {
20402cec:	fc010113          	addi	sp,sp,-64
20402cf0:	02112e23          	sw	ra,60(sp)
20402cf4:	02812c23          	sw	s0,56(sp)
20402cf8:	03212a23          	sw	s2,52(sp)
20402cfc:	03312823          	sw	s3,48(sp)
20402d00:	04010413          	addi	s0,sp,64
20402d04:	fca42e23          	sw	a0,-36(s0)
20402d08:	fcb42c23          	sw	a1,-40(s0)
20402d0c:	fcc42a23          	sw	a2,-44(s0)
20402d10:	fcd42623          	sw	a3,-52(s0)
20402d14:	fce42823          	sw	a4,-48(s0)
20402d18:	fcf42423          	sw	a5,-56(s0)
  int status = TVMNDArray_Create(ndim, shape, dtype, dev, array);
20402d1c:	fc842783          	lw	a5,-56(s0)
20402d20:	fcc42683          	lw	a3,-52(s0)
20402d24:	fd042703          	lw	a4,-48(s0)
20402d28:	fd442603          	lw	a2,-44(s0)
20402d2c:	fd842583          	lw	a1,-40(s0)
20402d30:	fdc42503          	lw	a0,-36(s0)
20402d34:	d4dff0ef          	jal	ra,20402a80 <TVMNDArray_Create>
20402d38:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20402d3c:	fec42783          	lw	a5,-20(s0)
20402d40:	00078663          	beqz	a5,20402d4c <TVMNDArray_Empty+0x60>
    return status;
20402d44:	fec42783          	lw	a5,-20(s0)
20402d48:	0740006f          	j	20402dbc <TVMNDArray_Empty+0xd0>
  }
  int total_elem_bytes = TVMNDArray_DataSizeBytes(array);
20402d4c:	fc842503          	lw	a0,-56(s0)
20402d50:	e19ff0ef          	jal	ra,20402b68 <TVMNDArray_DataSizeBytes>
20402d54:	00050793          	mv	a5,a0
20402d58:	00058813          	mv	a6,a1
20402d5c:	fef42423          	sw	a5,-24(s0)
  array->dl_tensor.data =
      TVMBackendAllocWorkspace(kDLCPU, 0, total_elem_bytes, dtype.code, dtype.bits);
20402d60:	fe842783          	lw	a5,-24(s0)
20402d64:	00078913          	mv	s2,a5
20402d68:	41f7d793          	srai	a5,a5,0x1f
20402d6c:	00078993          	mv	s3,a5
20402d70:	fd444783          	lbu	a5,-44(s0)
20402d74:	00078713          	mv	a4,a5
20402d78:	fd544783          	lbu	a5,-43(s0)
20402d7c:	00090613          	mv	a2,s2
20402d80:	00098693          	mv	a3,s3
20402d84:	00000593          	li	a1,0
20402d88:	00100513          	li	a0,1
20402d8c:	e51fd0ef          	jal	ra,20400bdc <TVMBackendAllocWorkspace>
20402d90:	00050713          	mv	a4,a0
  array->dl_tensor.data =
20402d94:	fc842783          	lw	a5,-56(s0)
20402d98:	00e7a023          	sw	a4,0(a5)
  memset(array->dl_tensor.data, 0, total_elem_bytes);
20402d9c:	fc842783          	lw	a5,-56(s0)
20402da0:	0007a783          	lw	a5,0(a5)
20402da4:	fe842703          	lw	a4,-24(s0)
20402da8:	00070613          	mv	a2,a4
20402dac:	00000593          	li	a1,0
20402db0:	00078513          	mv	a0,a5
20402db4:	2fa100ef          	jal	ra,204130ae <memset>
  return 0;
20402db8:	00000793          	li	a5,0
}
20402dbc:	00078513          	mv	a0,a5
20402dc0:	03c12083          	lw	ra,60(sp)
20402dc4:	03812403          	lw	s0,56(sp)
20402dc8:	03412903          	lw	s2,52(sp)
20402dcc:	03012983          	lw	s3,48(sp)
20402dd0:	04010113          	addi	sp,sp,64
20402dd4:	00008067          	ret

20402dd8 <TVMNDArray_Load>:

int TVMNDArray_Load(TVMNDArray* ret, const char** strm) {
20402dd8:	f6010113          	addi	sp,sp,-160
20402ddc:	08112e23          	sw	ra,156(sp)
20402de0:	08812c23          	sw	s0,152(sp)
20402de4:	08912a23          	sw	s1,148(sp)
20402de8:	09212823          	sw	s2,144(sp)
20402dec:	09312623          	sw	s3,140(sp)
20402df0:	0a010413          	addi	s0,sp,160
20402df4:	f6a42623          	sw	a0,-148(s0)
20402df8:	f6b42423          	sw	a1,-152(s0)
  int32_t status = 0;
20402dfc:	fc042e23          	sw	zero,-36(s0)
  uint64_t header, reserved;
  memcpy(&header, *strm, sizeof(header));
20402e00:	f6842783          	lw	a5,-152(s0)
20402e04:	0007a783          	lw	a5,0(a5)
20402e08:	0047a803          	lw	a6,4(a5)
20402e0c:	0007a783          	lw	a5,0(a5)
20402e10:	fcf42023          	sw	a5,-64(s0)
20402e14:	fd042223          	sw	a6,-60(s0)
  *strm += sizeof(header);
20402e18:	f6842783          	lw	a5,-152(s0)
20402e1c:	0007a783          	lw	a5,0(a5)
20402e20:	00878713          	addi	a4,a5,8
20402e24:	f6842783          	lw	a5,-152(s0)
20402e28:	00e7a023          	sw	a4,0(a5)
  if (header != kTVMNDArrayMagic) {
20402e2c:	fc042683          	lw	a3,-64(s0)
20402e30:	fc442703          	lw	a4,-60(s0)
20402e34:	0001d797          	auipc	a5,0x1d
20402e38:	fac78793          	addi	a5,a5,-84 # 2041fde0 <__func__.3846+0xf8>
20402e3c:	0047a803          	lw	a6,4(a5)
20402e40:	0007a783          	lw	a5,0(a5)
20402e44:	00068593          	mv	a1,a3
20402e48:	00078613          	mv	a2,a5
20402e4c:	00c59663          	bne	a1,a2,20402e58 <TVMNDArray_Load+0x80>
20402e50:	00080793          	mv	a5,a6
20402e54:	02f70a63          	beq	a4,a5,20402e88 <TVMNDArray_Load+0xb0>
    fprintf(stderr, "Invalid DLTensor file format\n");
20402e58:	5fbfe797          	auipc	a5,0x5fbfe
20402e5c:	be078793          	addi	a5,a5,-1056 # 80000a38 <_impure_ptr>
20402e60:	0007a783          	lw	a5,0(a5)
20402e64:	00c7a783          	lw	a5,12(a5)
20402e68:	00078693          	mv	a3,a5
20402e6c:	01d00613          	li	a2,29
20402e70:	00100593          	li	a1,1
20402e74:	0001d517          	auipc	a0,0x1d
20402e78:	e9450513          	addi	a0,a0,-364 # 2041fd08 <__func__.3846+0x20>
20402e7c:	028100ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20402e80:	fff00793          	li	a5,-1
20402e84:	fcf42e23          	sw	a5,-36(s0)
  }
  memcpy(&reserved, *strm, sizeof(reserved));
20402e88:	f6842783          	lw	a5,-152(s0)
20402e8c:	0007a783          	lw	a5,0(a5)
20402e90:	0047a803          	lw	a6,4(a5)
20402e94:	0007a783          	lw	a5,0(a5)
20402e98:	faf42c23          	sw	a5,-72(s0)
20402e9c:	fb042e23          	sw	a6,-68(s0)
  *strm += sizeof(reserved);
20402ea0:	f6842783          	lw	a5,-152(s0)
20402ea4:	0007a783          	lw	a5,0(a5)
20402ea8:	00878713          	addi	a4,a5,8
20402eac:	f6842783          	lw	a5,-152(s0)
20402eb0:	00e7a023          	sw	a4,0(a5)
  DLDevice dev;
  int ndim;  // sizeof ndim should match dlpack
  DLDataType dtype;
  memcpy(&dev, *strm, sizeof(dev));
20402eb4:	f6842783          	lw	a5,-152(s0)
20402eb8:	0007a783          	lw	a5,0(a5)
20402ebc:	0047a803          	lw	a6,4(a5)
20402ec0:	0007a783          	lw	a5,0(a5)
20402ec4:	faf42823          	sw	a5,-80(s0)
20402ec8:	fb042a23          	sw	a6,-76(s0)
  *strm += sizeof(dev);
20402ecc:	f6842783          	lw	a5,-152(s0)
20402ed0:	0007a783          	lw	a5,0(a5)
20402ed4:	00878713          	addi	a4,a5,8
20402ed8:	f6842783          	lw	a5,-152(s0)
20402edc:	00e7a023          	sw	a4,0(a5)
  memcpy(&ndim, *strm, sizeof(ndim));
20402ee0:	f6842783          	lw	a5,-152(s0)
20402ee4:	0007a783          	lw	a5,0(a5)
20402ee8:	0007a783          	lw	a5,0(a5)
20402eec:	faf42623          	sw	a5,-84(s0)
  *strm += sizeof(ndim);
20402ef0:	f6842783          	lw	a5,-152(s0)
20402ef4:	0007a783          	lw	a5,0(a5)
20402ef8:	00478713          	addi	a4,a5,4
20402efc:	f6842783          	lw	a5,-152(s0)
20402f00:	00e7a023          	sw	a4,0(a5)
  memcpy(&dtype, *strm, sizeof(dtype));
20402f04:	f6842783          	lw	a5,-152(s0)
20402f08:	0007a783          	lw	a5,0(a5)
20402f0c:	0007a783          	lw	a5,0(a5)
20402f10:	faf42423          	sw	a5,-88(s0)
  *strm += sizeof(dtype);
20402f14:	f6842783          	lw	a5,-152(s0)
20402f18:	0007a783          	lw	a5,0(a5)
20402f1c:	00478713          	addi	a4,a5,4
20402f20:	f6842783          	lw	a5,-152(s0)
20402f24:	00e7a023          	sw	a4,0(a5)
  if ((ndim < 0) || (ndim > TVM_CRT_MAX_NDIM)) {
20402f28:	fac42783          	lw	a5,-84(s0)
20402f2c:	0007c863          	bltz	a5,20402f3c <TVMNDArray_Load+0x164>
20402f30:	fac42703          	lw	a4,-84(s0)
20402f34:	00600793          	li	a5,6
20402f38:	02e7dc63          	ble	a4,a5,20402f70 <TVMNDArray_Load+0x198>
    fprintf(stderr, "Invalid ndim=%d: expected to be 0 ~ %d.\n", ndim, TVM_CRT_MAX_NDIM);
20402f3c:	5fbfe797          	auipc	a5,0x5fbfe
20402f40:	afc78793          	addi	a5,a5,-1284 # 80000a38 <_impure_ptr>
20402f44:	0007a783          	lw	a5,0(a5)
20402f48:	00c7a783          	lw	a5,12(a5)
20402f4c:	fac42703          	lw	a4,-84(s0)
20402f50:	00600693          	li	a3,6
20402f54:	00070613          	mv	a2,a4
20402f58:	0001d597          	auipc	a1,0x1d
20402f5c:	dd058593          	addi	a1,a1,-560 # 2041fd28 <__func__.3846+0x40>
20402f60:	00078513          	mv	a0,a5
20402f64:	6a70f0ef          	jal	ra,20412e0a <fprintf>
    status = -1;
20402f68:	fff00793          	li	a5,-1
20402f6c:	fcf42e23          	sw	a5,-36(s0)
  }
  if (dev.device_type != kDLCPU) {
20402f70:	fb042703          	lw	a4,-80(s0)
20402f74:	00100793          	li	a5,1
20402f78:	02f70a63          	beq	a4,a5,20402fac <TVMNDArray_Load+0x1d4>
    fprintf(stderr, "Invalid DLTensor device: can only save as CPU tensor\n");
20402f7c:	5fbfe797          	auipc	a5,0x5fbfe
20402f80:	abc78793          	addi	a5,a5,-1348 # 80000a38 <_impure_ptr>
20402f84:	0007a783          	lw	a5,0(a5)
20402f88:	00c7a783          	lw	a5,12(a5)
20402f8c:	00078693          	mv	a3,a5
20402f90:	03500613          	li	a2,53
20402f94:	00100593          	li	a1,1
20402f98:	0001d517          	auipc	a0,0x1d
20402f9c:	dbc50513          	addi	a0,a0,-580 # 2041fd54 <__func__.3846+0x6c>
20402fa0:	7050f0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20402fa4:	fff00793          	li	a5,-1
20402fa8:	fcf42e23          	sw	a5,-36(s0)
  }
  int64_t shape[TVM_CRT_MAX_NDIM] = {0};
20402fac:	f6042c23          	sw	zero,-136(s0)
20402fb0:	f6042e23          	sw	zero,-132(s0)
20402fb4:	f8042023          	sw	zero,-128(s0)
20402fb8:	f8042223          	sw	zero,-124(s0)
20402fbc:	f8042423          	sw	zero,-120(s0)
20402fc0:	f8042623          	sw	zero,-116(s0)
20402fc4:	f8042823          	sw	zero,-112(s0)
20402fc8:	f8042a23          	sw	zero,-108(s0)
20402fcc:	f8042c23          	sw	zero,-104(s0)
20402fd0:	f8042e23          	sw	zero,-100(s0)
20402fd4:	fa042023          	sw	zero,-96(s0)
20402fd8:	fa042223          	sw	zero,-92(s0)
  int32_t idx;
  if (ndim != 0) {
20402fdc:	fac42783          	lw	a5,-84(s0)
20402fe0:	06078063          	beqz	a5,20403040 <TVMNDArray_Load+0x268>
    for (idx = 0; idx < ndim; idx++) {
20402fe4:	fc042c23          	sw	zero,-40(s0)
20402fe8:	04c0006f          	j	20403034 <TVMNDArray_Load+0x25c>
      memcpy(&shape[idx], *strm, sizeof(int64_t));
20402fec:	f7840713          	addi	a4,s0,-136
20402ff0:	fd842783          	lw	a5,-40(s0)
20402ff4:	00379793          	slli	a5,a5,0x3
20402ff8:	00f70733          	add	a4,a4,a5
20402ffc:	f6842783          	lw	a5,-152(s0)
20403000:	0007a783          	lw	a5,0(a5)
20403004:	00800613          	li	a2,8
20403008:	00078593          	mv	a1,a5
2040300c:	00070513          	mv	a0,a4
20403010:	7e10f0ef          	jal	ra,20412ff0 <memcpy>
      *strm += sizeof(shape[idx]);
20403014:	f6842783          	lw	a5,-152(s0)
20403018:	0007a783          	lw	a5,0(a5)
2040301c:	00878713          	addi	a4,a5,8
20403020:	f6842783          	lw	a5,-152(s0)
20403024:	00e7a023          	sw	a4,0(a5)
    for (idx = 0; idx < ndim; idx++) {
20403028:	fd842783          	lw	a5,-40(s0)
2040302c:	00178793          	addi	a5,a5,1
20403030:	fcf42c23          	sw	a5,-40(s0)
20403034:	fac42783          	lw	a5,-84(s0)
20403038:	fd842703          	lw	a4,-40(s0)
2040303c:	faf748e3          	blt	a4,a5,20402fec <TVMNDArray_Load+0x214>
    }
  }
  status = TVMNDArray_Empty(ndim, shape, dtype, dev, ret);
20403040:	fac42503          	lw	a0,-84(s0)
20403044:	f7840593          	addi	a1,s0,-136
20403048:	f6c42783          	lw	a5,-148(s0)
2040304c:	fb042683          	lw	a3,-80(s0)
20403050:	fb442703          	lw	a4,-76(s0)
20403054:	fa842603          	lw	a2,-88(s0)
20403058:	c95ff0ef          	jal	ra,20402cec <TVMNDArray_Empty>
2040305c:	fca42e23          	sw	a0,-36(s0)
  if (status != 0) {
20403060:	fdc42783          	lw	a5,-36(s0)
20403064:	00078663          	beqz	a5,20403070 <TVMNDArray_Load+0x298>
    return status;
20403068:	fdc42783          	lw	a5,-36(s0)
2040306c:	1b00006f          	j	2040321c <TVMNDArray_Load+0x444>
  }
  int64_t num_elems = 1;
20403070:	00100793          	li	a5,1
20403074:	00000813          	li	a6,0
20403078:	fcf42823          	sw	a5,-48(s0)
2040307c:	fd042a23          	sw	a6,-44(s0)
  int elem_bytes = (ret->dl_tensor.dtype.bits + 7) / 8;
20403080:	f6c42783          	lw	a5,-148(s0)
20403084:	0117c783          	lbu	a5,17(a5)
20403088:	00778793          	addi	a5,a5,7
2040308c:	41f7d713          	srai	a4,a5,0x1f
20403090:	00777713          	andi	a4,a4,7
20403094:	00f707b3          	add	a5,a4,a5
20403098:	4037d793          	srai	a5,a5,0x3
2040309c:	fcf42623          	sw	a5,-52(s0)
  for (idx = 0; idx < ret->dl_tensor.ndim; ++idx) {
204030a0:	fc042c23          	sw	zero,-40(s0)
204030a4:	0500006f          	j	204030f4 <TVMNDArray_Load+0x31c>
    num_elems *= ret->dl_tensor.shape[idx];
204030a8:	f6c42783          	lw	a5,-148(s0)
204030ac:	0147a703          	lw	a4,20(a5)
204030b0:	fd842783          	lw	a5,-40(s0)
204030b4:	00379793          	slli	a5,a5,0x3
204030b8:	00f707b3          	add	a5,a4,a5
204030bc:	0047a803          	lw	a6,4(a5)
204030c0:	0007a783          	lw	a5,0(a5)
204030c4:	00078613          	mv	a2,a5
204030c8:	00080693          	mv	a3,a6
204030cc:	fd042503          	lw	a0,-48(s0)
204030d0:	fd442583          	lw	a1,-44(s0)
204030d4:	6b01c0ef          	jal	ra,2041f784 <__muldi3>
204030d8:	00050793          	mv	a5,a0
204030dc:	00058813          	mv	a6,a1
204030e0:	fcf42823          	sw	a5,-48(s0)
204030e4:	fd042a23          	sw	a6,-44(s0)
  for (idx = 0; idx < ret->dl_tensor.ndim; ++idx) {
204030e8:	fd842783          	lw	a5,-40(s0)
204030ec:	00178793          	addi	a5,a5,1
204030f0:	fcf42c23          	sw	a5,-40(s0)
204030f4:	f6c42783          	lw	a5,-148(s0)
204030f8:	00c7a783          	lw	a5,12(a5)
204030fc:	fd842703          	lw	a4,-40(s0)
20403100:	faf744e3          	blt	a4,a5,204030a8 <TVMNDArray_Load+0x2d0>
  }
  int64_t data_byte_size;
  memcpy(&data_byte_size, *strm, sizeof(data_byte_size));
20403104:	f6842783          	lw	a5,-152(s0)
20403108:	0007a783          	lw	a5,0(a5)
2040310c:	0047a803          	lw	a6,4(a5)
20403110:	0007a783          	lw	a5,0(a5)
20403114:	f6f42823          	sw	a5,-144(s0)
20403118:	f7042a23          	sw	a6,-140(s0)
  *strm += sizeof(data_byte_size);
2040311c:	f6842783          	lw	a5,-152(s0)
20403120:	0007a783          	lw	a5,0(a5)
20403124:	00878713          	addi	a4,a5,8
20403128:	f6842783          	lw	a5,-152(s0)
2040312c:	00e7a023          	sw	a4,0(a5)
  if (!(data_byte_size == num_elems * elem_bytes)) {
20403130:	fcc42783          	lw	a5,-52(s0)
20403134:	00078913          	mv	s2,a5
20403138:	41f7d793          	srai	a5,a5,0x1f
2040313c:	00078993          	mv	s3,a5
20403140:	fd042603          	lw	a2,-48(s0)
20403144:	fd442683          	lw	a3,-44(s0)
20403148:	00090513          	mv	a0,s2
2040314c:	00098593          	mv	a1,s3
20403150:	6341c0ef          	jal	ra,2041f784 <__muldi3>
20403154:	00050793          	mv	a5,a0
20403158:	00058813          	mv	a6,a1
2040315c:	00078693          	mv	a3,a5
20403160:	00080713          	mv	a4,a6
20403164:	f7042783          	lw	a5,-144(s0)
20403168:	f7442803          	lw	a6,-140(s0)
2040316c:	00068593          	mv	a1,a3
20403170:	00078613          	mv	a2,a5
20403174:	00c59663          	bne	a1,a2,20403180 <TVMNDArray_Load+0x3a8>
20403178:	00080793          	mv	a5,a6
2040317c:	04f70c63          	beq	a4,a5,204031d4 <TVMNDArray_Load+0x3fc>
    fprintf(stderr,
20403180:	5fbfe797          	auipc	a5,0x5fbfe
20403184:	8b878793          	addi	a5,a5,-1864 # 80000a38 <_impure_ptr>
20403188:	0007a783          	lw	a5,0(a5)
2040318c:	00c7a483          	lw	s1,12(a5)
20403190:	f7042783          	lw	a5,-144(s0)
20403194:	f7442803          	lw	a6,-140(s0)
20403198:	00078913          	mv	s2,a5
2040319c:	fd042783          	lw	a5,-48(s0)
204031a0:	fcc42703          	lw	a4,-52(s0)
204031a4:	00070593          	mv	a1,a4
204031a8:	00078513          	mv	a0,a5
204031ac:	5c01c0ef          	jal	ra,2041f76c <__mulsi3>
204031b0:	00050793          	mv	a5,a0
204031b4:	00078693          	mv	a3,a5
204031b8:	00090613          	mv	a2,s2
204031bc:	0001d597          	auipc	a1,0x1d
204031c0:	bd058593          	addi	a1,a1,-1072 # 2041fd8c <__func__.3846+0xa4>
204031c4:	00048513          	mv	a0,s1
204031c8:	4430f0ef          	jal	ra,20412e0a <fprintf>
            "invalid DLTensor file format: data_byte_size=%d, "
            "while num_elems*elem_bytes=%d\n",
            (int)data_byte_size, (int)(num_elems * elem_bytes));  // NOLINT(*)
    status = -1;
204031cc:	fff00793          	li	a5,-1
204031d0:	fcf42e23          	sw	a5,-36(s0)
  }
  memcpy(ret->dl_tensor.data, *strm, data_byte_size);
204031d4:	f6c42783          	lw	a5,-148(s0)
204031d8:	0007a703          	lw	a4,0(a5)
204031dc:	f6842783          	lw	a5,-152(s0)
204031e0:	0007a683          	lw	a3,0(a5)
204031e4:	f7042783          	lw	a5,-144(s0)
204031e8:	f7442803          	lw	a6,-140(s0)
204031ec:	00078613          	mv	a2,a5
204031f0:	00068593          	mv	a1,a3
204031f4:	00070513          	mv	a0,a4
204031f8:	5f90f0ef          	jal	ra,20412ff0 <memcpy>
  *strm += data_byte_size;
204031fc:	f6842783          	lw	a5,-152(s0)
20403200:	0007a703          	lw	a4,0(a5)
20403204:	f7042783          	lw	a5,-144(s0)
20403208:	f7442803          	lw	a6,-140(s0)
2040320c:	00f70733          	add	a4,a4,a5
20403210:	f6842783          	lw	a5,-152(s0)
20403214:	00e7a023          	sw	a4,0(a5)

  return status;
20403218:	fdc42783          	lw	a5,-36(s0)
}
2040321c:	00078513          	mv	a0,a5
20403220:	09c12083          	lw	ra,156(sp)
20403224:	09812403          	lw	s0,152(sp)
20403228:	09412483          	lw	s1,148(sp)
2040322c:	09012903          	lw	s2,144(sp)
20403230:	08c12983          	lw	s3,140(sp)
20403234:	0a010113          	addi	sp,sp,160
20403238:	00008067          	ret

2040323c <TVMNDArray_CreateView>:

int TVMNDArray_CreateView(TVMNDArray* arr, const tvm_index_t* shape, int32_t ndim, DLDataType dtype,
                          TVMNDArray* array_view) {
2040323c:	fc010113          	addi	sp,sp,-64
20403240:	02112e23          	sw	ra,60(sp)
20403244:	02812c23          	sw	s0,56(sp)
20403248:	04010413          	addi	s0,sp,64
2040324c:	fca42e23          	sw	a0,-36(s0)
20403250:	fcb42c23          	sw	a1,-40(s0)
20403254:	fcc42a23          	sw	a2,-44(s0)
20403258:	fcd42823          	sw	a3,-48(s0)
2040325c:	fce42623          	sw	a4,-52(s0)
  int status = TVMNDArray_Create(ndim, shape, dtype, arr->dl_tensor.device, array_view);
20403260:	fdc42703          	lw	a4,-36(s0)
20403264:	fcc42783          	lw	a5,-52(s0)
20403268:	00472683          	lw	a3,4(a4)
2040326c:	00872703          	lw	a4,8(a4)
20403270:	fd042603          	lw	a2,-48(s0)
20403274:	fd842583          	lw	a1,-40(s0)
20403278:	fd442503          	lw	a0,-44(s0)
2040327c:	805ff0ef          	jal	ra,20402a80 <TVMNDArray_Create>
20403280:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20403284:	fec42783          	lw	a5,-20(s0)
20403288:	00078663          	beqz	a5,20403294 <TVMNDArray_CreateView+0x58>
    return status;
2040328c:	fec42783          	lw	a5,-20(s0)
20403290:	0180006f          	j	204032a8 <TVMNDArray_CreateView+0x6c>
  }
  array_view->dl_tensor.data = arr->dl_tensor.data;
20403294:	fdc42783          	lw	a5,-36(s0)
20403298:	0007a703          	lw	a4,0(a5)
2040329c:	fcc42783          	lw	a5,-52(s0)
204032a0:	00e7a023          	sw	a4,0(a5)
  return 0;
204032a4:	00000793          	li	a5,0
}
204032a8:	00078513          	mv	a0,a5
204032ac:	03c12083          	lw	ra,60(sp)
204032b0:	03812403          	lw	s0,56(sp)
204032b4:	04010113          	addi	sp,sp,64
204032b8:	00008067          	ret

204032bc <TVMNDArray_RandomFill>:

int TVMNDArray_RandomFill(TVMNDArray* arr) {
204032bc:	fd010113          	addi	sp,sp,-48
204032c0:	02112623          	sw	ra,44(sp)
204032c4:	02812423          	sw	s0,40(sp)
204032c8:	03010413          	addi	s0,sp,48
204032cc:	fca42e23          	sw	a0,-36(s0)
  int64_t num_bytes = TVMNDArray_DataSizeBytes(arr);
204032d0:	fdc42503          	lw	a0,-36(s0)
204032d4:	895ff0ef          	jal	ra,20402b68 <TVMNDArray_DataSizeBytes>
204032d8:	fea42423          	sw	a0,-24(s0)
204032dc:	feb42623          	sw	a1,-20(s0)
  if (num_bytes < 0 || num_bytes > SIZE_MAX) {
204032e0:	fec42783          	lw	a5,-20(s0)
204032e4:	0207c663          	bltz	a5,20403310 <TVMNDArray_RandomFill+0x54>
204032e8:	fec42783          	lw	a5,-20(s0)
204032ec:	02f04263          	bgtz	a5,20403310 <TVMNDArray_RandomFill+0x54>
    return kTvmErrorFunctionCallInvalidArg;
  }

  return TVMPlatformGenerateRandom(arr->dl_tensor.data, (size_t)num_bytes);
204032f0:	fdc42783          	lw	a5,-36(s0)
204032f4:	0007a783          	lw	a5,0(a5)
204032f8:	fe842703          	lw	a4,-24(s0)
204032fc:	00070593          	mv	a1,a4
20403300:	00078513          	mv	a0,a5
20403304:	e98fd0ef          	jal	ra,2040099c <TVMPlatformGenerateRandom>
20403308:	00050793          	mv	a5,a0
2040330c:	00c0006f          	j	20403318 <TVMNDArray_RandomFill+0x5c>
    return kTvmErrorFunctionCallInvalidArg;
20403310:	000017b7          	lui	a5,0x1
20403314:	80378793          	addi	a5,a5,-2045 # 803 <__stack_size+0x3>
}
20403318:	00078513          	mv	a0,a5
2040331c:	02c12083          	lw	ra,44(sp)
20403320:	02812403          	lw	s0,40(sp)
20403324:	03010113          	addi	sp,sp,48
20403328:	00008067          	ret

2040332c <TVMNDArray_Release>:

int TVMNDArray_Release(TVMNDArray* arr) {
2040332c:	fd010113          	addi	sp,sp,-48
20403330:	02112623          	sw	ra,44(sp)
20403334:	02812423          	sw	s0,40(sp)
20403338:	03010413          	addi	s0,sp,48
2040333c:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t err;
  DLDevice dev = {kDLCPU, 0};
20403340:	00100793          	li	a5,1
20403344:	fef42223          	sw	a5,-28(s0)
20403348:	fe042423          	sw	zero,-24(s0)

  err = TVMPlatformMemoryFree(arr->dl_tensor.data, dev);
2040334c:	fdc42783          	lw	a5,-36(s0)
20403350:	0007a783          	lw	a5,0(a5)
20403354:	fe442583          	lw	a1,-28(s0)
20403358:	fe842603          	lw	a2,-24(s0)
2040335c:	00078513          	mv	a0,a5
20403360:	f00fd0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20403364:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20403368:	fec42783          	lw	a5,-20(s0)
2040336c:	00078663          	beqz	a5,20403378 <TVMNDArray_Release+0x4c>
    return err;
20403370:	fec42783          	lw	a5,-20(s0)
20403374:	0440006f          	j	204033b8 <TVMNDArray_Release+0x8c>
  }

  arr->dl_tensor.data = 0;
20403378:	fdc42783          	lw	a5,-36(s0)
2040337c:	0007a023          	sw	zero,0(a5)
  err = TVMPlatformMemoryFree(arr->dl_tensor.shape, dev);
20403380:	fdc42783          	lw	a5,-36(s0)
20403384:	0147a783          	lw	a5,20(a5)
20403388:	fe442583          	lw	a1,-28(s0)
2040338c:	fe842603          	lw	a2,-24(s0)
20403390:	00078513          	mv	a0,a5
20403394:	eccfd0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20403398:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
2040339c:	fec42783          	lw	a5,-20(s0)
204033a0:	00078663          	beqz	a5,204033ac <TVMNDArray_Release+0x80>
    return err;
204033a4:	fec42783          	lw	a5,-20(s0)
204033a8:	0100006f          	j	204033b8 <TVMNDArray_Release+0x8c>
  }

  arr->dl_tensor.shape = 0;
204033ac:	fdc42783          	lw	a5,-36(s0)
204033b0:	0007aa23          	sw	zero,20(a5)
  return 0;
204033b4:	00000793          	li	a5,0
}
204033b8:	00078513          	mv	a0,a5
204033bc:	02c12083          	lw	ra,44(sp)
204033c0:	02812403          	lw	s0,40(sp)
204033c4:	03010113          	addi	sp,sp,48
204033c8:	00008067          	ret

204033cc <String2DLDataType>:
#include <stdio.h>
#include <string.h>
#include <tvm/runtime/crt/logging.h>
#include <tvm/runtime/crt/packed_func.h>

DLDataType String2DLDataType(const char* s) {
204033cc:	fc010113          	addi	sp,sp,-64
204033d0:	02112e23          	sw	ra,60(sp)
204033d4:	02812c23          	sw	s0,56(sp)
204033d8:	04010413          	addi	s0,sp,64
204033dc:	fca42623          	sw	a0,-52(s0)
  DLDataType t;
  // handle None type
  if (strlen(s) == 0) {
204033e0:	fcc42783          	lw	a5,-52(s0)
204033e4:	0007c783          	lbu	a5,0(a5)
204033e8:	00079e63          	bnez	a5,20403404 <String2DLDataType+0x38>
    t.bits = 0;
204033ec:	fe0402a3          	sb	zero,-27(s0)
    t.lanes = 0;
204033f0:	fe041323          	sh	zero,-26(s0)
    t.code = kTVMOpaqueHandle;
204033f4:	00300793          	li	a5,3
204033f8:	fef40223          	sb	a5,-28(s0)
    return t;
204033fc:	fe442783          	lw	a5,-28(s0)
20403400:	2340006f          	j	20403634 <String2DLDataType+0x268>
  }
  t.bits = 32;
20403404:	02000793          	li	a5,32
20403408:	fef402a3          	sb	a5,-27(s0)
  t.lanes = 1;
2040340c:	00100793          	li	a5,1
20403410:	fef41323          	sh	a5,-26(s0)
  const char* scan;
  if (!strncmp(s, "int", 3)) {
20403414:	00300613          	li	a2,3
20403418:	0001d597          	auipc	a1,0x1d
2040341c:	9d058593          	addi	a1,a1,-1584 # 2041fde8 <__func__.3846+0x100>
20403420:	fcc42503          	lw	a0,-52(s0)
20403424:	7370f0ef          	jal	ra,2041335a <strncmp>
20403428:	00050793          	mv	a5,a0
2040342c:	00079c63          	bnez	a5,20403444 <String2DLDataType+0x78>
    t.code = kDLInt;
20403430:	fe040223          	sb	zero,-28(s0)
    scan = s + 3;
20403434:	fcc42783          	lw	a5,-52(s0)
20403438:	00378793          	addi	a5,a5,3
2040343c:	fef42623          	sw	a5,-20(s0)
20403440:	1400006f          	j	20403580 <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "uint", 4)) {
20403444:	00400613          	li	a2,4
20403448:	0001d597          	auipc	a1,0x1d
2040344c:	9a458593          	addi	a1,a1,-1628 # 2041fdec <__func__.3846+0x104>
20403450:	fcc42503          	lw	a0,-52(s0)
20403454:	7070f0ef          	jal	ra,2041335a <strncmp>
20403458:	00050793          	mv	a5,a0
2040345c:	00079e63          	bnez	a5,20403478 <String2DLDataType+0xac>
    t.code = kDLUInt;
20403460:	00100793          	li	a5,1
20403464:	fef40223          	sb	a5,-28(s0)
    scan = s + 4;
20403468:	fcc42783          	lw	a5,-52(s0)
2040346c:	00478793          	addi	a5,a5,4
20403470:	fef42623          	sw	a5,-20(s0)
20403474:	10c0006f          	j	20403580 <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "float", 5)) {
20403478:	00500613          	li	a2,5
2040347c:	0001d597          	auipc	a1,0x1d
20403480:	97858593          	addi	a1,a1,-1672 # 2041fdf4 <__func__.3846+0x10c>
20403484:	fcc42503          	lw	a0,-52(s0)
20403488:	6d30f0ef          	jal	ra,2041335a <strncmp>
2040348c:	00050793          	mv	a5,a0
20403490:	00079e63          	bnez	a5,204034ac <String2DLDataType+0xe0>
    t.code = kDLFloat;
20403494:	00200793          	li	a5,2
20403498:	fef40223          	sb	a5,-28(s0)
    scan = s + 5;
2040349c:	fcc42783          	lw	a5,-52(s0)
204034a0:	00578793          	addi	a5,a5,5
204034a4:	fef42623          	sw	a5,-20(s0)
204034a8:	0d80006f          	j	20403580 <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "bfloat", 6)) {
204034ac:	00600613          	li	a2,6
204034b0:	0001d597          	auipc	a1,0x1d
204034b4:	94c58593          	addi	a1,a1,-1716 # 2041fdfc <__func__.3846+0x114>
204034b8:	fcc42503          	lw	a0,-52(s0)
204034bc:	69f0f0ef          	jal	ra,2041335a <strncmp>
204034c0:	00050793          	mv	a5,a0
204034c4:	00079e63          	bnez	a5,204034e0 <String2DLDataType+0x114>
    t.code = kDLBfloat;
204034c8:	00400793          	li	a5,4
204034cc:	fef40223          	sb	a5,-28(s0)
    scan = s + 6;
204034d0:	fcc42783          	lw	a5,-52(s0)
204034d4:	00678793          	addi	a5,a5,6
204034d8:	fef42623          	sw	a5,-20(s0)
204034dc:	0a40006f          	j	20403580 <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "handle", 6)) {
204034e0:	00600613          	li	a2,6
204034e4:	0001d597          	auipc	a1,0x1d
204034e8:	92058593          	addi	a1,a1,-1760 # 2041fe04 <__func__.3846+0x11c>
204034ec:	fcc42503          	lw	a0,-52(s0)
204034f0:	66b0f0ef          	jal	ra,2041335a <strncmp>
204034f4:	00050793          	mv	a5,a0
204034f8:	02079263          	bnez	a5,2040351c <String2DLDataType+0x150>
    t.code = kTVMOpaqueHandle;
204034fc:	00300793          	li	a5,3
20403500:	fef40223          	sb	a5,-28(s0)
    t.bits = 64;  // handle uses 64 bit by default.
20403504:	04000793          	li	a5,64
20403508:	fef402a3          	sb	a5,-27(s0)
    scan = s + 6;
2040350c:	fcc42783          	lw	a5,-52(s0)
20403510:	00678793          	addi	a5,a5,6
20403514:	fef42623          	sw	a5,-20(s0)
20403518:	0680006f          	j	20403580 <String2DLDataType+0x1b4>
  } else if (!strcmp(s, "bool")) {
2040351c:	0001d597          	auipc	a1,0x1d
20403520:	8f058593          	addi	a1,a1,-1808 # 2041fe0c <__func__.3846+0x124>
20403524:	fcc42503          	lw	a0,-52(s0)
20403528:	5030f0ef          	jal	ra,2041322a <strcmp>
2040352c:	00050793          	mv	a5,a0
20403530:	02079263          	bnez	a5,20403554 <String2DLDataType+0x188>
    t.code = kDLUInt;
20403534:	00100793          	li	a5,1
20403538:	fef40223          	sb	a5,-28(s0)
    t.bits = 1;
2040353c:	00100793          	li	a5,1
20403540:	fef402a3          	sb	a5,-27(s0)
    t.lanes = 1;
20403544:	00100793          	li	a5,1
20403548:	fef41323          	sh	a5,-26(s0)
    return t;
2040354c:	fe442783          	lw	a5,-28(s0)
20403550:	0e40006f          	j	20403634 <String2DLDataType+0x268>
  } else {
    scan = s;
20403554:	fcc42783          	lw	a5,-52(s0)
20403558:	fef42623          	sw	a5,-20(s0)
    fprintf(stderr, "unknown type %s\n", s);
2040355c:	5fbfd797          	auipc	a5,0x5fbfd
20403560:	4dc78793          	addi	a5,a5,1244 # 80000a38 <_impure_ptr>
20403564:	0007a783          	lw	a5,0(a5)
20403568:	00c7a783          	lw	a5,12(a5)
2040356c:	fcc42603          	lw	a2,-52(s0)
20403570:	0001d597          	auipc	a1,0x1d
20403574:	8a458593          	addi	a1,a1,-1884 # 2041fe14 <__func__.3846+0x12c>
20403578:	00078513          	mv	a0,a5
2040357c:	08f0f0ef          	jal	ra,20412e0a <fprintf>
  }
  char* xdelim;
  uint8_t bits = (uint8_t)(strtoul(scan, &xdelim, 10));
20403580:	fe040793          	addi	a5,s0,-32
20403584:	00a00613          	li	a2,10
20403588:	00078593          	mv	a1,a5
2040358c:	fec42503          	lw	a0,-20(s0)
20403590:	114100ef          	jal	ra,204136a4 <strtoul>
20403594:	00050793          	mv	a5,a0
20403598:	fef405a3          	sb	a5,-21(s0)
  if (bits != 0) t.bits = bits;
2040359c:	feb44783          	lbu	a5,-21(s0)
204035a0:	00078663          	beqz	a5,204035ac <String2DLDataType+0x1e0>
204035a4:	feb44783          	lbu	a5,-21(s0)
204035a8:	fef402a3          	sb	a5,-27(s0)
  char* endpt = xdelim;
204035ac:	fe042783          	lw	a5,-32(s0)
204035b0:	fcf42e23          	sw	a5,-36(s0)
  if (*xdelim == 'x') {
204035b4:	fe042783          	lw	a5,-32(s0)
204035b8:	0007c703          	lbu	a4,0(a5)
204035bc:	07800793          	li	a5,120
204035c0:	02f71863          	bne	a4,a5,204035f0 <String2DLDataType+0x224>
    t.lanes = (uint16_t)(strtoul(xdelim + 1, &endpt, 10));
204035c4:	fe042783          	lw	a5,-32(s0)
204035c8:	00178793          	addi	a5,a5,1
204035cc:	fdc40713          	addi	a4,s0,-36
204035d0:	00a00613          	li	a2,10
204035d4:	00070593          	mv	a1,a4
204035d8:	00078513          	mv	a0,a5
204035dc:	0c8100ef          	jal	ra,204136a4 <strtoul>
204035e0:	00050793          	mv	a5,a0
204035e4:	01079793          	slli	a5,a5,0x10
204035e8:	0107d793          	srli	a5,a5,0x10
204035ec:	fef41323          	sh	a5,-26(s0)
  }
  if (!(endpt == s + strlen(s))) {
204035f0:	fcc42503          	lw	a0,-52(s0)
204035f4:	5550f0ef          	jal	ra,20413348 <strlen>
204035f8:	00050713          	mv	a4,a0
204035fc:	fcc42783          	lw	a5,-52(s0)
20403600:	00e78733          	add	a4,a5,a4
20403604:	fdc42783          	lw	a5,-36(s0)
20403608:	02f70463          	beq	a4,a5,20403630 <String2DLDataType+0x264>
    fprintf(stderr, "unknown type %s\n", s);
2040360c:	5fbfd797          	auipc	a5,0x5fbfd
20403610:	42c78793          	addi	a5,a5,1068 # 80000a38 <_impure_ptr>
20403614:	0007a783          	lw	a5,0(a5)
20403618:	00c7a783          	lw	a5,12(a5)
2040361c:	fcc42603          	lw	a2,-52(s0)
20403620:	0001c597          	auipc	a1,0x1c
20403624:	7f458593          	addi	a1,a1,2036 # 2041fe14 <__func__.3846+0x12c>
20403628:	00078513          	mv	a0,a5
2040362c:	7de0f0ef          	jal	ra,20412e0a <fprintf>
  }
  return t;
20403630:	fe442783          	lw	a5,-28(s0)
}
20403634:	00078513          	mv	a0,a5
20403638:	03c12083          	lw	ra,60(sp)
2040363c:	03812403          	lw	s0,56(sp)
20403640:	04010113          	addi	sp,sp,64
20403644:	00008067          	ret

20403648 <TVMPackedFunc_InitGlobalFunc>:

int TVMPackedFunc_InitGlobalFunc(TVMPackedFunc* pf, const char* name, const TVMArgs* args) {
20403648:	fd010113          	addi	sp,sp,-48
2040364c:	02112623          	sw	ra,44(sp)
20403650:	02812423          	sw	s0,40(sp)
20403654:	03010413          	addi	s0,sp,48
20403658:	fca42e23          	sw	a0,-36(s0)
2040365c:	fcb42c23          	sw	a1,-40(s0)
20403660:	fcc42a23          	sw	a2,-44(s0)
  int status = 0;
20403664:	fe042623          	sw	zero,-20(s0)

  pf->Call = &TVMPackedFunc_Call;
20403668:	fdc42783          	lw	a5,-36(s0)
2040366c:	00000717          	auipc	a4,0x0
20403670:	22870713          	addi	a4,a4,552 # 20403894 <TVMPackedFunc_Call>
20403674:	1ce7a823          	sw	a4,464(a5)
  pf->SetArgs = &TVMPackedFunc_SetArgs;
20403678:	fdc42783          	lw	a5,-36(s0)
2040367c:	00000717          	auipc	a4,0x0
20403680:	29470713          	addi	a4,a4,660 # 20403910 <TVMPackedFunc_SetArgs>
20403684:	1ce7aa23          	sw	a4,468(a5)

  status = TVMFuncGetGlobal(name, &pf->fexec);
20403688:	fdc42783          	lw	a5,-36(s0)
2040368c:	0c878793          	addi	a5,a5,200
20403690:	00078593          	mv	a1,a5
20403694:	fd842503          	lw	a0,-40(s0)
20403698:	c94fe0ef          	jal	ra,20401b2c <TVMFuncGetGlobal>
2040369c:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
204036a0:	fec42783          	lw	a5,-20(s0)
204036a4:	00078663          	beqz	a5,204036b0 <TVMPackedFunc_InitGlobalFunc+0x68>
    return status;
204036a8:	fec42783          	lw	a5,-20(s0)
204036ac:	0300006f          	j	204036dc <TVMPackedFunc_InitGlobalFunc+0x94>
  }

  snprintf(pf->name, sizeof(pf->name), "%s", name);
204036b0:	fdc42783          	lw	a5,-36(s0)
204036b4:	fd842683          	lw	a3,-40(s0)
204036b8:	0001c617          	auipc	a2,0x1c
204036bc:	77060613          	addi	a2,a2,1904 # 2041fe28 <__func__.3846+0x140>
204036c0:	0c800593          	li	a1,200
204036c4:	00078513          	mv	a0,a5
204036c8:	2f70f0ef          	jal	ra,204131be <snprintf>
  TVMPackedFunc_SetArgs(pf, args);
204036cc:	fd442583          	lw	a1,-44(s0)
204036d0:	fdc42503          	lw	a0,-36(s0)
204036d4:	23c000ef          	jal	ra,20403910 <TVMPackedFunc_SetArgs>
  return status;
204036d8:	fec42783          	lw	a5,-20(s0)
}
204036dc:	00078513          	mv	a0,a5
204036e0:	02c12083          	lw	ra,44(sp)
204036e4:	02812403          	lw	s0,40(sp)
204036e8:	03010113          	addi	sp,sp,48
204036ec:	00008067          	ret

204036f0 <TVMPackedFunc_InitModuleFunc>:

int TVMPackedFunc_InitModuleFunc(TVMPackedFunc* pf, TVMModuleHandle module, const char* name,
                                 const TVMArgs* args) {
204036f0:	fd010113          	addi	sp,sp,-48
204036f4:	02112623          	sw	ra,44(sp)
204036f8:	02812423          	sw	s0,40(sp)
204036fc:	03010413          	addi	s0,sp,48
20403700:	fca42e23          	sw	a0,-36(s0)
20403704:	fcb42c23          	sw	a1,-40(s0)
20403708:	fcc42a23          	sw	a2,-44(s0)
2040370c:	fcd42823          	sw	a3,-48(s0)
  int status = 0;
20403710:	fe042623          	sw	zero,-20(s0)

  pf->Call = &TVMPackedFunc_Call;
20403714:	fdc42783          	lw	a5,-36(s0)
20403718:	00000717          	auipc	a4,0x0
2040371c:	17c70713          	addi	a4,a4,380 # 20403894 <TVMPackedFunc_Call>
20403720:	1ce7a823          	sw	a4,464(a5)
  pf->SetArgs = &TVMPackedFunc_SetArgs;
20403724:	fdc42783          	lw	a5,-36(s0)
20403728:	00000717          	auipc	a4,0x0
2040372c:	1e870713          	addi	a4,a4,488 # 20403910 <TVMPackedFunc_SetArgs>
20403730:	1ce7aa23          	sw	a4,468(a5)

  status = TVMModGetFunction(module, name, 0, &pf->fexec);
20403734:	fdc42783          	lw	a5,-36(s0)
20403738:	0c878793          	addi	a5,a5,200
2040373c:	00078693          	mv	a3,a5
20403740:	00000613          	li	a2,0
20403744:	fd442583          	lw	a1,-44(s0)
20403748:	fd842503          	lw	a0,-40(s0)
2040374c:	c48fe0ef          	jal	ra,20401b94 <TVMModGetFunction>
20403750:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20403754:	fec42783          	lw	a5,-20(s0)
20403758:	00078663          	beqz	a5,20403764 <TVMPackedFunc_InitModuleFunc+0x74>
    return status;
2040375c:	fec42783          	lw	a5,-20(s0)
20403760:	0300006f          	j	20403790 <TVMPackedFunc_InitModuleFunc+0xa0>
  }

  snprintf(pf->name, sizeof(pf->name), "%s", name);
20403764:	fdc42783          	lw	a5,-36(s0)
20403768:	fd442683          	lw	a3,-44(s0)
2040376c:	0001c617          	auipc	a2,0x1c
20403770:	6bc60613          	addi	a2,a2,1724 # 2041fe28 <__func__.3846+0x140>
20403774:	0c800593          	li	a1,200
20403778:	00078513          	mv	a0,a5
2040377c:	2430f0ef          	jal	ra,204131be <snprintf>
  TVMPackedFunc_SetArgs(pf, args);
20403780:	fd042583          	lw	a1,-48(s0)
20403784:	fdc42503          	lw	a0,-36(s0)
20403788:	188000ef          	jal	ra,20403910 <TVMPackedFunc_SetArgs>
  return status;
2040378c:	fec42783          	lw	a5,-20(s0)
}
20403790:	00078513          	mv	a0,a5
20403794:	02c12083          	lw	ra,44(sp)
20403798:	02812403          	lw	s0,40(sp)
2040379c:	03010113          	addi	sp,sp,48
204037a0:	00008067          	ret

204037a4 <TVMArgs_Create>:

TVMArgs TVMArgs_Create(TVMValue* values, uint32_t* tcodes, uint32_t values_count) {
204037a4:	f5010113          	addi	sp,sp,-176
204037a8:	0a112623          	sw	ra,172(sp)
204037ac:	0a812423          	sw	s0,168(sp)
204037b0:	0b010413          	addi	s0,sp,176
204037b4:	f4a42e23          	sw	a0,-164(s0)
204037b8:	f4b42c23          	sw	a1,-168(s0)
204037bc:	f4c42a23          	sw	a2,-172(s0)
204037c0:	f4d42823          	sw	a3,-176(s0)
  uint32_t idx;
  TVMArgs args;
  memset(&args, 0, sizeof(args));
204037c4:	f6840793          	addi	a5,s0,-152
204037c8:	08000613          	li	a2,128
204037cc:	00000593          	li	a1,0
204037d0:	00078513          	mv	a0,a5
204037d4:	0db0f0ef          	jal	ra,204130ae <memset>
  for (idx = 0; idx < values_count; idx++) {
204037d8:	fe042623          	sw	zero,-20(s0)
204037dc:	0700006f          	j	2040384c <TVMArgs_Create+0xa8>
    memcpy(args.values + idx, values + idx, sizeof(TVMValue));
204037e0:	fec42783          	lw	a5,-20(s0)
204037e4:	00379793          	slli	a5,a5,0x3
204037e8:	f6840713          	addi	a4,s0,-152
204037ec:	00f706b3          	add	a3,a4,a5
204037f0:	fec42783          	lw	a5,-20(s0)
204037f4:	00379793          	slli	a5,a5,0x3
204037f8:	f5842703          	lw	a4,-168(s0)
204037fc:	00f707b3          	add	a5,a4,a5
20403800:	00800613          	li	a2,8
20403804:	00078593          	mv	a1,a5
20403808:	00068513          	mv	a0,a3
2040380c:	7e40f0ef          	jal	ra,20412ff0 <memcpy>
    args.tcodes[idx] = tcodes[idx];
20403810:	fec42783          	lw	a5,-20(s0)
20403814:	00279793          	slli	a5,a5,0x2
20403818:	f5442703          	lw	a4,-172(s0)
2040381c:	00f707b3          	add	a5,a4,a5
20403820:	0007a783          	lw	a5,0(a5)
20403824:	00078713          	mv	a4,a5
20403828:	fec42783          	lw	a5,-20(s0)
2040382c:	01478793          	addi	a5,a5,20
20403830:	00279793          	slli	a5,a5,0x2
20403834:	ff040693          	addi	a3,s0,-16
20403838:	00f687b3          	add	a5,a3,a5
2040383c:	f6e7ac23          	sw	a4,-136(a5)
  for (idx = 0; idx < values_count; idx++) {
20403840:	fec42783          	lw	a5,-20(s0)
20403844:	00178793          	addi	a5,a5,1
20403848:	fef42623          	sw	a5,-20(s0)
2040384c:	fec42703          	lw	a4,-20(s0)
20403850:	f5042783          	lw	a5,-176(s0)
20403854:	f8f766e3          	bltu	a4,a5,204037e0 <TVMArgs_Create+0x3c>
  }
  args.values_count = values_count;
20403858:	f5042783          	lw	a5,-176(s0)
2040385c:	fef42023          	sw	a5,-32(s0)
  return args;
20403860:	f5c42783          	lw	a5,-164(s0)
20403864:	00078693          	mv	a3,a5
20403868:	f6840793          	addi	a5,s0,-152
2040386c:	08000713          	li	a4,128
20403870:	00070613          	mv	a2,a4
20403874:	00078593          	mv	a1,a5
20403878:	00068513          	mv	a0,a3
2040387c:	7740f0ef          	jal	ra,20412ff0 <memcpy>
}
20403880:	f5c42503          	lw	a0,-164(s0)
20403884:	0ac12083          	lw	ra,172(sp)
20403888:	0a812403          	lw	s0,168(sp)
2040388c:	0b010113          	addi	sp,sp,176
20403890:	00008067          	ret

20403894 <TVMPackedFunc_Call>:

int TVMPackedFunc_Call(TVMPackedFunc* pf) {
20403894:	fe010113          	addi	sp,sp,-32
20403898:	00112e23          	sw	ra,28(sp)
2040389c:	00812c23          	sw	s0,24(sp)
204038a0:	02010413          	addi	s0,sp,32
204038a4:	fea42623          	sw	a0,-20(s0)
  pf->ret_value.values_count = 1;
204038a8:	fec42783          	lw	a5,-20(s0)
204038ac:	00100713          	li	a4,1
204038b0:	1ce7a423          	sw	a4,456(a5)
  pf->ret_value.tcodes[0] = kTVMNullptr;
204038b4:	fec42783          	lw	a5,-20(s0)
204038b8:	00400713          	li	a4,4
204038bc:	1ae7a023          	sw	a4,416(a5)
  return TVMFuncCall(pf->fexec, pf->args.values, pf->args.tcodes, pf->args.values_count,
204038c0:	fec42783          	lw	a5,-20(s0)
204038c4:	0c87a503          	lw	a0,200(a5)
204038c8:	fec42783          	lw	a5,-20(s0)
204038cc:	0d078593          	addi	a1,a5,208
204038d0:	fec42783          	lw	a5,-20(s0)
204038d4:	12078613          	addi	a2,a5,288
204038d8:	fec42783          	lw	a5,-20(s0)
204038dc:	1487a783          	lw	a5,328(a5)
204038e0:	00078693          	mv	a3,a5
                     pf->ret_value.values, pf->ret_value.tcodes);
204038e4:	fec42783          	lw	a5,-20(s0)
204038e8:	15078713          	addi	a4,a5,336
204038ec:	fec42783          	lw	a5,-20(s0)
204038f0:	1a078793          	addi	a5,a5,416
  return TVMFuncCall(pf->fexec, pf->args.values, pf->args.tcodes, pf->args.values_count,
204038f4:	848fe0ef          	jal	ra,2040193c <TVMFuncCall>
204038f8:	00050793          	mv	a5,a0
}
204038fc:	00078513          	mv	a0,a5
20403900:	01c12083          	lw	ra,28(sp)
20403904:	01812403          	lw	s0,24(sp)
20403908:	02010113          	addi	sp,sp,32
2040390c:	00008067          	ret

20403910 <TVMPackedFunc_SetArgs>:

void TVMPackedFunc_SetArgs(TVMPackedFunc* pf, const TVMArgs* args) {
20403910:	fe010113          	addi	sp,sp,-32
20403914:	00112e23          	sw	ra,28(sp)
20403918:	00812c23          	sw	s0,24(sp)
2040391c:	02010413          	addi	s0,sp,32
20403920:	fea42623          	sw	a0,-20(s0)
20403924:	feb42423          	sw	a1,-24(s0)
  memcpy(&(pf->args), args, sizeof(TVMArgs));
20403928:	fec42783          	lw	a5,-20(s0)
2040392c:	0d078793          	addi	a5,a5,208
20403930:	08000613          	li	a2,128
20403934:	fe842583          	lw	a1,-24(s0)
20403938:	00078513          	mv	a0,a5
2040393c:	6b40f0ef          	jal	ra,20412ff0 <memcpy>
}
20403940:	00000013          	nop
20403944:	01c12083          	lw	ra,28(sp)
20403948:	01812403          	lw	s0,24(sp)
2040394c:	02010113          	addi	sp,sp,32
20403950:	00008067          	ret

20403954 <Shape_Accumulate>:

#ifndef MAX
#define MAX(a, b) (((a) > (b)) ? (a) : (b))
#endif  // MAX

uint32_t Shape_Accumulate(int64_t* shape, uint32_t ndim) {
20403954:	fd010113          	addi	sp,sp,-48
20403958:	02112623          	sw	ra,44(sp)
2040395c:	02812423          	sw	s0,40(sp)
20403960:	03010413          	addi	s0,sp,48
20403964:	fca42e23          	sw	a0,-36(s0)
20403968:	fcb42c23          	sw	a1,-40(s0)
  int64_t accum = 1;
2040396c:	00100793          	li	a5,1
20403970:	00000813          	li	a6,0
20403974:	fef42423          	sw	a5,-24(s0)
20403978:	ff042623          	sw	a6,-20(s0)
  uint32_t idx;
  for (idx = 0; idx < ndim; idx++) {
2040397c:	fe042223          	sw	zero,-28(s0)
20403980:	0700006f          	j	204039f0 <Shape_Accumulate+0x9c>
    if (shape[idx] == 0) {
20403984:	fe442783          	lw	a5,-28(s0)
20403988:	00379793          	slli	a5,a5,0x3
2040398c:	fdc42703          	lw	a4,-36(s0)
20403990:	00f707b3          	add	a5,a4,a5
20403994:	0007a683          	lw	a3,0(a5)
20403998:	0047a703          	lw	a4,4(a5)
2040399c:	00068793          	mv	a5,a3
204039a0:	00e7e7b3          	or	a5,a5,a4
204039a4:	04078e63          	beqz	a5,20403a00 <Shape_Accumulate+0xac>
      break;
    }
    accum *= shape[idx];
204039a8:	fe442783          	lw	a5,-28(s0)
204039ac:	00379793          	slli	a5,a5,0x3
204039b0:	fdc42703          	lw	a4,-36(s0)
204039b4:	00f707b3          	add	a5,a4,a5
204039b8:	0047a803          	lw	a6,4(a5)
204039bc:	0007a783          	lw	a5,0(a5)
204039c0:	00078613          	mv	a2,a5
204039c4:	00080693          	mv	a3,a6
204039c8:	fe842503          	lw	a0,-24(s0)
204039cc:	fec42583          	lw	a1,-20(s0)
204039d0:	5b51b0ef          	jal	ra,2041f784 <__muldi3>
204039d4:	00050793          	mv	a5,a0
204039d8:	00058813          	mv	a6,a1
204039dc:	fef42423          	sw	a5,-24(s0)
204039e0:	ff042623          	sw	a6,-20(s0)
  for (idx = 0; idx < ndim; idx++) {
204039e4:	fe442783          	lw	a5,-28(s0)
204039e8:	00178793          	addi	a5,a5,1
204039ec:	fef42223          	sw	a5,-28(s0)
204039f0:	fe442703          	lw	a4,-28(s0)
204039f4:	fd842783          	lw	a5,-40(s0)
204039f8:	f8f766e3          	bltu	a4,a5,20403984 <Shape_Accumulate+0x30>
204039fc:	0080006f          	j	20403a04 <Shape_Accumulate+0xb0>
      break;
20403a00:	00000013          	nop
  }
  return accum;
20403a04:	fe842783          	lw	a5,-24(s0)
}
20403a08:	00078513          	mv	a0,a5
20403a0c:	02c12083          	lw	ra,44(sp)
20403a10:	02812403          	lw	s0,40(sp)
20403a14:	03010113          	addi	sp,sp,48
20403a18:	00008067          	ret

20403a1c <NodeEntry_Load>:

int NodeEntry_Load(TVMGraphExecutorNodeEntry* entry, JSONReader* reader) {
20403a1c:	fd010113          	addi	sp,sp,-48
20403a20:	02112623          	sw	ra,44(sp)
20403a24:	02812423          	sw	s0,40(sp)
20403a28:	03010413          	addi	s0,sp,48
20403a2c:	fca42e23          	sw	a0,-36(s0)
20403a30:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
20403a34:	fe042623          	sw	zero,-20(s0)
  reader->BeginArray(reader);
20403a38:	fd842783          	lw	a5,-40(s0)
20403a3c:	0307a783          	lw	a5,48(a5)
20403a40:	fd842503          	lw	a0,-40(s0)
20403a44:	000780e7          	jalr	a5
  if (!(reader->NextArrayItem(reader))) {
20403a48:	fd842783          	lw	a5,-40(s0)
20403a4c:	03c7a783          	lw	a5,60(a5)
20403a50:	fd842503          	lw	a0,-40(s0)
20403a54:	000780e7          	jalr	a5
20403a58:	00050793          	mv	a5,a0
20403a5c:	02079a63          	bnez	a5,20403a90 <NodeEntry_Load+0x74>
    fprintf(stderr, "invalid json format: failed to parse `node_id`\n");
20403a60:	5fbfd797          	auipc	a5,0x5fbfd
20403a64:	fd878793          	addi	a5,a5,-40 # 80000a38 <_impure_ptr>
20403a68:	0007a783          	lw	a5,0(a5)
20403a6c:	00c7a783          	lw	a5,12(a5)
20403a70:	00078693          	mv	a3,a5
20403a74:	02f00613          	li	a2,47
20403a78:	00100593          	li	a1,1
20403a7c:	0001c517          	auipc	a0,0x1c
20403a80:	3b450513          	addi	a0,a0,948 # 2041fe30 <__func__.3846+0x148>
20403a84:	4200f0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20403a88:	fff00793          	li	a5,-1
20403a8c:	fef42623          	sw	a5,-20(s0)
  }
  reader->ReadUnsignedInteger(reader, &(entry->node_id));
20403a90:	fd842783          	lw	a5,-40(s0)
20403a94:	0247a703          	lw	a4,36(a5)
20403a98:	fdc42783          	lw	a5,-36(s0)
20403a9c:	00078593          	mv	a1,a5
20403aa0:	fd842503          	lw	a0,-40(s0)
20403aa4:	000700e7          	jalr	a4
  if (!(reader->NextArrayItem(reader))) {
20403aa8:	fd842783          	lw	a5,-40(s0)
20403aac:	03c7a783          	lw	a5,60(a5)
20403ab0:	fd842503          	lw	a0,-40(s0)
20403ab4:	000780e7          	jalr	a5
20403ab8:	00050793          	mv	a5,a0
20403abc:	02079a63          	bnez	a5,20403af0 <NodeEntry_Load+0xd4>
    fprintf(stderr, "invalid json format: failed to parse `index`\n");
20403ac0:	5fbfd797          	auipc	a5,0x5fbfd
20403ac4:	f7878793          	addi	a5,a5,-136 # 80000a38 <_impure_ptr>
20403ac8:	0007a783          	lw	a5,0(a5)
20403acc:	00c7a783          	lw	a5,12(a5)
20403ad0:	00078693          	mv	a3,a5
20403ad4:	02d00613          	li	a2,45
20403ad8:	00100593          	li	a1,1
20403adc:	0001c517          	auipc	a0,0x1c
20403ae0:	38450513          	addi	a0,a0,900 # 2041fe60 <__func__.3846+0x178>
20403ae4:	3c00f0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20403ae8:	fff00793          	li	a5,-1
20403aec:	fef42623          	sw	a5,-20(s0)
  }
  reader->ReadUnsignedInteger(reader, &(entry->index));
20403af0:	fd842783          	lw	a5,-40(s0)
20403af4:	0247a703          	lw	a4,36(a5)
20403af8:	fdc42783          	lw	a5,-36(s0)
20403afc:	00478793          	addi	a5,a5,4
20403b00:	00078593          	mv	a1,a5
20403b04:	fd842503          	lw	a0,-40(s0)
20403b08:	000700e7          	jalr	a4
  if (reader->NextArrayItem(reader)) {
20403b0c:	fd842783          	lw	a5,-40(s0)
20403b10:	03c7a783          	lw	a5,60(a5)
20403b14:	fd842503          	lw	a0,-40(s0)
20403b18:	000780e7          	jalr	a5
20403b1c:	00050793          	mv	a5,a0
20403b20:	06078663          	beqz	a5,20403b8c <NodeEntry_Load+0x170>
    reader->ReadUnsignedInteger(reader, &(entry->version));
20403b24:	fd842783          	lw	a5,-40(s0)
20403b28:	0247a703          	lw	a4,36(a5)
20403b2c:	fdc42783          	lw	a5,-36(s0)
20403b30:	00878793          	addi	a5,a5,8
20403b34:	00078593          	mv	a1,a5
20403b38:	fd842503          	lw	a0,-40(s0)
20403b3c:	000700e7          	jalr	a4
    if (reader->NextArrayItem(reader)) {
20403b40:	fd842783          	lw	a5,-40(s0)
20403b44:	03c7a783          	lw	a5,60(a5)
20403b48:	fd842503          	lw	a0,-40(s0)
20403b4c:	000780e7          	jalr	a5
20403b50:	00050793          	mv	a5,a0
20403b54:	04078063          	beqz	a5,20403b94 <NodeEntry_Load+0x178>
      fprintf(stderr, "invalid json format: failed to parse `version`\n");
20403b58:	5fbfd797          	auipc	a5,0x5fbfd
20403b5c:	ee078793          	addi	a5,a5,-288 # 80000a38 <_impure_ptr>
20403b60:	0007a783          	lw	a5,0(a5)
20403b64:	00c7a783          	lw	a5,12(a5)
20403b68:	00078693          	mv	a3,a5
20403b6c:	02f00613          	li	a2,47
20403b70:	00100593          	li	a1,1
20403b74:	0001c517          	auipc	a0,0x1c
20403b78:	31c50513          	addi	a0,a0,796 # 2041fe90 <__func__.3846+0x1a8>
20403b7c:	3280f0ef          	jal	ra,20412ea4 <fwrite>
      status = -1;
20403b80:	fff00793          	li	a5,-1
20403b84:	fef42623          	sw	a5,-20(s0)
20403b88:	00c0006f          	j	20403b94 <NodeEntry_Load+0x178>
    }
  } else {
    entry->version = 0;
20403b8c:	fdc42783          	lw	a5,-36(s0)
20403b90:	0007a423          	sw	zero,8(a5)
  }
  return status;
20403b94:	fec42783          	lw	a5,-20(s0)
}
20403b98:	00078513          	mv	a0,a5
20403b9c:	02c12083          	lw	ra,44(sp)
20403ba0:	02812403          	lw	s0,40(sp)
20403ba4:	03010113          	addi	sp,sp,48
20403ba8:	00008067          	ret

20403bac <TVMGraphExecutorNode_LoadAttrs>:

void TVMGraphExecutorNode_LoadAttrs(TVMGraphExecutorNode* node, JSONReader* reader,
                                    TVMOpParam* param) {
20403bac:	f4010113          	addi	sp,sp,-192
20403bb0:	0a112e23          	sw	ra,188(sp)
20403bb4:	0a812c23          	sw	s0,184(sp)
20403bb8:	0c010413          	addi	s0,sp,192
20403bbc:	f4a42623          	sw	a0,-180(s0)
20403bc0:	f4b42423          	sw	a1,-184(s0)
20403bc4:	f4c42223          	sw	a2,-188(s0)
  int bitmask = 0;
20403bc8:	fe042623          	sw	zero,-20(s0)
  char key[20], value[TVM_CRT_MAX_STRLEN_FUNCTION_NAME];
  memset(param, 0, sizeof(TVMOpParam));
20403bcc:	08400613          	li	a2,132
20403bd0:	00000593          	li	a1,0
20403bd4:	f4442503          	lw	a0,-188(s0)
20403bd8:	4d60f0ef          	jal	ra,204130ae <memset>
  memset(key, 0, sizeof(key));
20403bdc:	fd440793          	addi	a5,s0,-44
20403be0:	01400613          	li	a2,20
20403be4:	00000593          	li	a1,0
20403be8:	00078513          	mv	a0,a5
20403bec:	4c20f0ef          	jal	ra,204130ae <memset>
  memset(value, 0, sizeof(value));
20403bf0:	f5c40793          	addi	a5,s0,-164
20403bf4:	07800613          	li	a2,120
20403bf8:	00000593          	li	a1,0
20403bfc:	00078513          	mv	a0,a5
20403c00:	4ae0f0ef          	jal	ra,204130ae <memset>
  reader->BeginObject(reader);
20403c04:	f4842783          	lw	a5,-184(s0)
20403c08:	0347a783          	lw	a5,52(a5)
20403c0c:	f4842503          	lw	a0,-184(s0)
20403c10:	000780e7          	jalr	a5
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20403c14:	1840006f          	j	20403d98 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    int status = reader->ReadString(reader, value, sizeof(value));
20403c18:	f4842783          	lw	a5,-184(s0)
20403c1c:	02c7a703          	lw	a4,44(a5)
20403c20:	f5c40793          	addi	a5,s0,-164
20403c24:	07800613          	li	a2,120
20403c28:	00078593          	mv	a1,a5
20403c2c:	f4842503          	lw	a0,-184(s0)
20403c30:	000700e7          	jalr	a4
20403c34:	fea42423          	sw	a0,-24(s0)
    if (status != 0) {
20403c38:	fe842783          	lw	a5,-24(s0)
20403c3c:	02078863          	beqz	a5,20403c6c <TVMGraphExecutorNode_LoadAttrs+0xc0>
      fprintf(stderr, "error reading value for key: %s\n", key);
20403c40:	5fbfd797          	auipc	a5,0x5fbfd
20403c44:	df878793          	addi	a5,a5,-520 # 80000a38 <_impure_ptr>
20403c48:	0007a783          	lw	a5,0(a5)
20403c4c:	00c7a783          	lw	a5,12(a5)
20403c50:	fd440713          	addi	a4,s0,-44
20403c54:	00070613          	mv	a2,a4
20403c58:	0001c597          	auipc	a1,0x1c
20403c5c:	26858593          	addi	a1,a1,616 # 2041fec0 <__func__.3846+0x1d8>
20403c60:	00078513          	mv	a0,a5
20403c64:	1a60f0ef          	jal	ra,20412e0a <fprintf>
      break;
20403c68:	1540006f          	j	20403dbc <TVMGraphExecutorNode_LoadAttrs+0x210>
    }
    if (!strcmp(key, "func_name")) {
20403c6c:	fd440793          	addi	a5,s0,-44
20403c70:	0001c597          	auipc	a1,0x1c
20403c74:	27458593          	addi	a1,a1,628 # 2041fee4 <__func__.3846+0x1fc>
20403c78:	00078513          	mv	a0,a5
20403c7c:	5ae0f0ef          	jal	ra,2041322a <strcmp>
20403c80:	00050793          	mv	a5,a0
20403c84:	02079a63          	bnez	a5,20403cb8 <TVMGraphExecutorNode_LoadAttrs+0x10c>
      snprintf(param->func_name, sizeof(value), "%s", value);
20403c88:	f4442783          	lw	a5,-188(s0)
20403c8c:	f5c40713          	addi	a4,s0,-164
20403c90:	00070693          	mv	a3,a4
20403c94:	0001c617          	auipc	a2,0x1c
20403c98:	25c60613          	addi	a2,a2,604 # 2041fef0 <__func__.3846+0x208>
20403c9c:	07800593          	li	a1,120
20403ca0:	00078513          	mv	a0,a5
20403ca4:	51a0f0ef          	jal	ra,204131be <snprintf>
      bitmask |= 1;
20403ca8:	fec42783          	lw	a5,-20(s0)
20403cac:	0017e793          	ori	a5,a5,1
20403cb0:	fef42623          	sw	a5,-20(s0)
20403cb4:	0e40006f          	j	20403d98 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    } else if (!strcmp(key, "num_inputs")) {
20403cb8:	fd440793          	addi	a5,s0,-44
20403cbc:	0001c597          	auipc	a1,0x1c
20403cc0:	23858593          	addi	a1,a1,568 # 2041fef4 <__func__.3846+0x20c>
20403cc4:	00078513          	mv	a0,a5
20403cc8:	5620f0ef          	jal	ra,2041322a <strcmp>
20403ccc:	00050793          	mv	a5,a0
20403cd0:	02079a63          	bnez	a5,20403d04 <TVMGraphExecutorNode_LoadAttrs+0x158>
      param->num_inputs = strtoul(value, 0, 10);
20403cd4:	f5c40793          	addi	a5,s0,-164
20403cd8:	00a00613          	li	a2,10
20403cdc:	00000593          	li	a1,0
20403ce0:	00078513          	mv	a0,a5
20403ce4:	1c10f0ef          	jal	ra,204136a4 <strtoul>
20403ce8:	00050713          	mv	a4,a0
20403cec:	f4442783          	lw	a5,-188(s0)
20403cf0:	06e7ac23          	sw	a4,120(a5)
      bitmask |= 2;
20403cf4:	fec42783          	lw	a5,-20(s0)
20403cf8:	0027e793          	ori	a5,a5,2
20403cfc:	fef42623          	sw	a5,-20(s0)
20403d00:	0980006f          	j	20403d98 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    } else if (!strcmp(key, "num_outputs")) {
20403d04:	fd440793          	addi	a5,s0,-44
20403d08:	0001c597          	auipc	a1,0x1c
20403d0c:	1f858593          	addi	a1,a1,504 # 2041ff00 <__func__.3846+0x218>
20403d10:	00078513          	mv	a0,a5
20403d14:	5160f0ef          	jal	ra,2041322a <strcmp>
20403d18:	00050793          	mv	a5,a0
20403d1c:	02079a63          	bnez	a5,20403d50 <TVMGraphExecutorNode_LoadAttrs+0x1a4>
      param->num_outputs = strtoul(value, 0, 10);
20403d20:	f5c40793          	addi	a5,s0,-164
20403d24:	00a00613          	li	a2,10
20403d28:	00000593          	li	a1,0
20403d2c:	00078513          	mv	a0,a5
20403d30:	1750f0ef          	jal	ra,204136a4 <strtoul>
20403d34:	00050713          	mv	a4,a0
20403d38:	f4442783          	lw	a5,-188(s0)
20403d3c:	06e7ae23          	sw	a4,124(a5)
      bitmask |= 4;
20403d40:	fec42783          	lw	a5,-20(s0)
20403d44:	0047e793          	ori	a5,a5,4
20403d48:	fef42623          	sw	a5,-20(s0)
20403d4c:	04c0006f          	j	20403d98 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    } else if (!strcmp(key, "flatten_data")) {
20403d50:	fd440793          	addi	a5,s0,-44
20403d54:	0001c597          	auipc	a1,0x1c
20403d58:	1b858593          	addi	a1,a1,440 # 2041ff0c <__func__.3846+0x224>
20403d5c:	00078513          	mv	a0,a5
20403d60:	4ca0f0ef          	jal	ra,2041322a <strcmp>
20403d64:	00050793          	mv	a5,a0
20403d68:	02079863          	bnez	a5,20403d98 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
      param->flatten_data = strtoul(value, 0, 10);
20403d6c:	f5c40793          	addi	a5,s0,-164
20403d70:	00a00613          	li	a2,10
20403d74:	00000593          	li	a1,0
20403d78:	00078513          	mv	a0,a5
20403d7c:	1290f0ef          	jal	ra,204136a4 <strtoul>
20403d80:	00050713          	mv	a4,a0
20403d84:	f4442783          	lw	a5,-188(s0)
20403d88:	08e7a023          	sw	a4,128(a5)
      bitmask |= 8;
20403d8c:	fec42783          	lw	a5,-20(s0)
20403d90:	0087e793          	ori	a5,a5,8
20403d94:	fef42623          	sw	a5,-20(s0)
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20403d98:	f4842783          	lw	a5,-184(s0)
20403d9c:	0387a703          	lw	a4,56(a5)
20403da0:	fd440793          	addi	a5,s0,-44
20403da4:	01400613          	li	a2,20
20403da8:	00078593          	mv	a1,a5
20403dac:	f4842503          	lw	a0,-184(s0)
20403db0:	000700e7          	jalr	a4
20403db4:	00050793          	mv	a5,a0
20403db8:	e60790e3          	bnez	a5,20403c18 <TVMGraphExecutorNode_LoadAttrs+0x6c>
    } else {
      printf("do not support key %s", key);
#endif  // TVM_CRT_DEBUG
    }
  }
  if (bitmask != (1 | 2 | 4 | 8)) {
20403dbc:	fec42703          	lw	a4,-20(s0)
20403dc0:	00f00793          	li	a5,15
20403dc4:	02f70663          	beq	a4,a5,20403df0 <TVMGraphExecutorNode_LoadAttrs+0x244>
    fprintf(stderr, "invalid format\n");
20403dc8:	5fbfd797          	auipc	a5,0x5fbfd
20403dcc:	c7078793          	addi	a5,a5,-912 # 80000a38 <_impure_ptr>
20403dd0:	0007a783          	lw	a5,0(a5)
20403dd4:	00c7a783          	lw	a5,12(a5)
20403dd8:	00078693          	mv	a3,a5
20403ddc:	00f00613          	li	a2,15
20403de0:	00100593          	li	a1,1
20403de4:	0001c517          	auipc	a0,0x1c
20403de8:	13850513          	addi	a0,a0,312 # 2041ff1c <__func__.3846+0x234>
20403dec:	0b80f0ef          	jal	ra,20412ea4 <fwrite>
  }
}
20403df0:	00000013          	nop
20403df4:	0bc12083          	lw	ra,188(sp)
20403df8:	0b812403          	lw	s0,184(sp)
20403dfc:	0c010113          	addi	sp,sp,192
20403e00:	00008067          	ret

20403e04 <TVMGraphExecutorNode_Load>:

int TVMGraphExecutorNode_Load(TVMGraphExecutorNode* node, JSONReader* reader) {
20403e04:	f2010113          	addi	sp,sp,-224
20403e08:	0c112e23          	sw	ra,220(sp)
20403e0c:	0c812c23          	sw	s0,216(sp)
20403e10:	0e010413          	addi	s0,sp,224
20403e14:	f2a42623          	sw	a0,-212(s0)
20403e18:	f2b42423          	sw	a1,-216(s0)
  int status = 0;
20403e1c:	fe042623          	sw	zero,-20(s0)
  reader->BeginObject(reader);
20403e20:	f2842783          	lw	a5,-216(s0)
20403e24:	0347a783          	lw	a5,52(a5)
20403e28:	f2842503          	lw	a0,-216(s0)
20403e2c:	000780e7          	jalr	a5
  int bitmask = 0;
20403e30:	fe042423          	sw	zero,-24(s0)
  char key[20];
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20403e34:	4dc0006f          	j	20404310 <TVMGraphExecutorNode_Load+0x50c>
    if (!strcmp(key, "op")) {
20403e38:	fc840793          	addi	a5,s0,-56
20403e3c:	0001c597          	auipc	a1,0x1c
20403e40:	0f058593          	addi	a1,a1,240 # 2041ff2c <__func__.3846+0x244>
20403e44:	00078513          	mv	a0,a5
20403e48:	3e20f0ef          	jal	ra,2041322a <strcmp>
20403e4c:	00050793          	mv	a5,a0
20403e50:	06079463          	bnez	a5,20403eb8 <TVMGraphExecutorNode_Load+0xb4>
      status = reader->ReadString(reader, node->op_type, sizeof(node->op_type));
20403e54:	f2842783          	lw	a5,-216(s0)
20403e58:	02c7a703          	lw	a4,44(a5)
20403e5c:	f2c42783          	lw	a5,-212(s0)
20403e60:	01000613          	li	a2,16
20403e64:	00078593          	mv	a1,a5
20403e68:	f2842503          	lw	a0,-216(s0)
20403e6c:	000700e7          	jalr	a4
20403e70:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20403e74:	fec42783          	lw	a5,-20(s0)
20403e78:	02078863          	beqz	a5,20403ea8 <TVMGraphExecutorNode_Load+0xa4>
        fprintf(stderr, "error reading op\n");
20403e7c:	5fbfd797          	auipc	a5,0x5fbfd
20403e80:	bbc78793          	addi	a5,a5,-1092 # 80000a38 <_impure_ptr>
20403e84:	0007a783          	lw	a5,0(a5)
20403e88:	00c7a783          	lw	a5,12(a5)
20403e8c:	00078693          	mv	a3,a5
20403e90:	01100613          	li	a2,17
20403e94:	00100593          	li	a1,1
20403e98:	0001c517          	auipc	a0,0x1c
20403e9c:	09850513          	addi	a0,a0,152 # 2041ff30 <__func__.3846+0x248>
20403ea0:	0040f0ef          	jal	ra,20412ea4 <fwrite>
        break;
20403ea4:	4980006f          	j	2040433c <TVMGraphExecutorNode_Load+0x538>
      }
      bitmask |= 1;
20403ea8:	fe842783          	lw	a5,-24(s0)
20403eac:	0017e793          	ori	a5,a5,1
20403eb0:	fef42423          	sw	a5,-24(s0)
20403eb4:	4540006f          	j	20404308 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "name")) {
20403eb8:	fc840793          	addi	a5,s0,-56
20403ebc:	0001c597          	auipc	a1,0x1c
20403ec0:	08858593          	addi	a1,a1,136 # 2041ff44 <__func__.3846+0x25c>
20403ec4:	00078513          	mv	a0,a5
20403ec8:	3620f0ef          	jal	ra,2041322a <strcmp>
20403ecc:	00050793          	mv	a5,a0
20403ed0:	06079663          	bnez	a5,20403f3c <TVMGraphExecutorNode_Load+0x138>
      status = reader->ReadString(reader, node->name, sizeof(node->name));
20403ed4:	f2842783          	lw	a5,-216(s0)
20403ed8:	02c7a703          	lw	a4,44(a5)
20403edc:	f2c42783          	lw	a5,-212(s0)
20403ee0:	01078793          	addi	a5,a5,16
20403ee4:	07800613          	li	a2,120
20403ee8:	00078593          	mv	a1,a5
20403eec:	f2842503          	lw	a0,-216(s0)
20403ef0:	000700e7          	jalr	a4
20403ef4:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20403ef8:	fec42783          	lw	a5,-20(s0)
20403efc:	02078863          	beqz	a5,20403f2c <TVMGraphExecutorNode_Load+0x128>
        fprintf(stderr, "error reading name\n");
20403f00:	5fbfd797          	auipc	a5,0x5fbfd
20403f04:	b3878793          	addi	a5,a5,-1224 # 80000a38 <_impure_ptr>
20403f08:	0007a783          	lw	a5,0(a5)
20403f0c:	00c7a783          	lw	a5,12(a5)
20403f10:	00078693          	mv	a3,a5
20403f14:	01300613          	li	a2,19
20403f18:	00100593          	li	a1,1
20403f1c:	0001c517          	auipc	a0,0x1c
20403f20:	03050513          	addi	a0,a0,48 # 2041ff4c <__func__.3846+0x264>
20403f24:	7810e0ef          	jal	ra,20412ea4 <fwrite>
        break;
20403f28:	4140006f          	j	2040433c <TVMGraphExecutorNode_Load+0x538>
      }
      bitmask |= 2;
20403f2c:	fe842783          	lw	a5,-24(s0)
20403f30:	0027e793          	ori	a5,a5,2
20403f34:	fef42423          	sw	a5,-24(s0)
20403f38:	3d00006f          	j	20404308 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "inputs")) {
20403f3c:	fc840793          	addi	a5,s0,-56
20403f40:	0001c597          	auipc	a1,0x1c
20403f44:	02058593          	addi	a1,a1,32 # 2041ff60 <__func__.3846+0x278>
20403f48:	00078513          	mv	a0,a5
20403f4c:	2de0f0ef          	jal	ra,2041322a <strcmp>
20403f50:	00050793          	mv	a5,a0
20403f54:	2c079463          	bnez	a5,2040421c <TVMGraphExecutorNode_Load+0x418>
      size_t count = 0;
20403f58:	fe042223          	sw	zero,-28(s0)
      reader->BeginArray(reader);
20403f5c:	f2842783          	lw	a5,-216(s0)
20403f60:	0307a783          	lw	a5,48(a5)
20403f64:	f2842503          	lw	a0,-216(s0)
20403f68:	000780e7          	jalr	a5
      size_t num_inputs = 0;
20403f6c:	fc042223          	sw	zero,-60(s0)
      if (reader->ArrayLength(reader, &num_inputs) != 0) {
20403f70:	f2842783          	lw	a5,-216(s0)
20403f74:	0407a703          	lw	a4,64(a5)
20403f78:	fc440793          	addi	a5,s0,-60
20403f7c:	00078593          	mv	a1,a5
20403f80:	f2842503          	lw	a0,-216(s0)
20403f84:	000700e7          	jalr	a4
20403f88:	00050793          	mv	a5,a0
20403f8c:	02078863          	beqz	a5,20403fbc <TVMGraphExecutorNode_Load+0x1b8>
        fprintf(stderr, "error determining inputs array length\n");
20403f90:	5fbfd797          	auipc	a5,0x5fbfd
20403f94:	aa878793          	addi	a5,a5,-1368 # 80000a38 <_impure_ptr>
20403f98:	0007a783          	lw	a5,0(a5)
20403f9c:	00c7a783          	lw	a5,12(a5)
20403fa0:	00078693          	mv	a3,a5
20403fa4:	02600613          	li	a2,38
20403fa8:	00100593          	li	a1,1
20403fac:	0001c517          	auipc	a0,0x1c
20403fb0:	fbc50513          	addi	a0,a0,-68 # 2041ff68 <__func__.3846+0x280>
20403fb4:	6f10e0ef          	jal	ra,20412ea4 <fwrite>
20403fb8:	3840006f          	j	2040433c <TVMGraphExecutorNode_Load+0x538>
        break;
      }
      DLDevice dev = {kDLCPU, 0};
20403fbc:	00100793          	li	a5,1
20403fc0:	faf42e23          	sw	a5,-68(s0)
20403fc4:	fc042023          	sw	zero,-64(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20403fc8:	fc442783          	lw	a5,-60(s0)
20403fcc:	00479713          	slli	a4,a5,0x4
          sizeof(TVMGraphExecutorNodeEntry) * num_inputs, dev, (void**)&node->inputs);
20403fd0:	f2c42783          	lw	a5,-212(s0)
20403fd4:	10c78793          	addi	a5,a5,268
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20403fd8:	00078693          	mv	a3,a5
20403fdc:	fbc42583          	lw	a1,-68(s0)
20403fe0:	fc042603          	lw	a2,-64(s0)
20403fe4:	00070513          	mv	a0,a4
20403fe8:	a15fc0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20403fec:	fea42023          	sw	a0,-32(s0)
      if (err != kTvmErrorNoError) {
20403ff0:	fe042783          	lw	a5,-32(s0)
20403ff4:	1e078a63          	beqz	a5,204041e8 <TVMGraphExecutorNode_Load+0x3e4>
        fprintf(stderr, "memory allocate error: %08x", err);
20403ff8:	5fbfd797          	auipc	a5,0x5fbfd
20403ffc:	a4078793          	addi	a5,a5,-1472 # 80000a38 <_impure_ptr>
20404000:	0007a783          	lw	a5,0(a5)
20404004:	00c7a783          	lw	a5,12(a5)
20404008:	fe042603          	lw	a2,-32(s0)
2040400c:	0001c597          	auipc	a1,0x1c
20404010:	f8458593          	addi	a1,a1,-124 # 2041ff90 <__func__.3846+0x2a8>
20404014:	00078513          	mv	a0,a5
20404018:	5f30e0ef          	jal	ra,20412e0a <fprintf>
        return -1;
2040401c:	fff00793          	li	a5,-1
20404020:	35c0006f          	j	2040437c <TVMGraphExecutorNode_Load+0x578>
      }
      while (reader->NextArrayItem(reader)) {
        if (count == num_inputs) {
20404024:	fc442783          	lw	a5,-60(s0)
20404028:	fe442703          	lw	a4,-28(s0)
2040402c:	02f71a63          	bne	a4,a5,20404060 <TVMGraphExecutorNode_Load+0x25c>
          fprintf(stderr, "too many array elements\n");
20404030:	5fbfd797          	auipc	a5,0x5fbfd
20404034:	a0878793          	addi	a5,a5,-1528 # 80000a38 <_impure_ptr>
20404038:	0007a783          	lw	a5,0(a5)
2040403c:	00c7a783          	lw	a5,12(a5)
20404040:	00078693          	mv	a3,a5
20404044:	01800613          	li	a2,24
20404048:	00100593          	li	a1,1
2040404c:	0001c517          	auipc	a0,0x1c
20404050:	f6050513          	addi	a0,a0,-160 # 2041ffac <__func__.3846+0x2c4>
20404054:	6510e0ef          	jal	ra,20412ea4 <fwrite>
          return -1;
20404058:	fff00793          	li	a5,-1
2040405c:	3200006f          	j	2040437c <TVMGraphExecutorNode_Load+0x578>
        }

        TVMGraphExecutorNodeEntry* inputs = node->inputs + count;
20404060:	f2c42783          	lw	a5,-212(s0)
20404064:	10c7a703          	lw	a4,268(a5)
20404068:	fe442783          	lw	a5,-28(s0)
2040406c:	00479793          	slli	a5,a5,0x4
20404070:	00f707b3          	add	a5,a4,a5
20404074:	fcf42e23          	sw	a5,-36(s0)
        reader->BeginArray(reader);
20404078:	f2842783          	lw	a5,-216(s0)
2040407c:	0307a783          	lw	a5,48(a5)
20404080:	f2842503          	lw	a0,-216(s0)
20404084:	000780e7          	jalr	a5
        if (!reader->NextArrayItem(reader)) {
20404088:	f2842783          	lw	a5,-216(s0)
2040408c:	03c7a783          	lw	a5,60(a5)
20404090:	f2842503          	lw	a0,-216(s0)
20404094:	000780e7          	jalr	a5
20404098:	00050793          	mv	a5,a0
2040409c:	02079c63          	bnez	a5,204040d4 <TVMGraphExecutorNode_Load+0x2d0>
          fprintf(stderr, "invalid json format\n");
204040a0:	5fbfd797          	auipc	a5,0x5fbfd
204040a4:	99878793          	addi	a5,a5,-1640 # 80000a38 <_impure_ptr>
204040a8:	0007a783          	lw	a5,0(a5)
204040ac:	00c7a783          	lw	a5,12(a5)
204040b0:	00078693          	mv	a3,a5
204040b4:	01400613          	li	a2,20
204040b8:	00100593          	li	a1,1
204040bc:	0001c517          	auipc	a0,0x1c
204040c0:	f0c50513          	addi	a0,a0,-244 # 2041ffc8 <__func__.3846+0x2e0>
204040c4:	5e10e0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
204040c8:	fff00793          	li	a5,-1
204040cc:	fef42623          	sw	a5,-20(s0)
          break;
204040d0:	1300006f          	j	20404200 <TVMGraphExecutorNode_Load+0x3fc>
        }
        reader->ReadUnsignedInteger(reader, &(inputs->node_id));
204040d4:	f2842783          	lw	a5,-216(s0)
204040d8:	0247a703          	lw	a4,36(a5)
204040dc:	fdc42783          	lw	a5,-36(s0)
204040e0:	00078593          	mv	a1,a5
204040e4:	f2842503          	lw	a0,-216(s0)
204040e8:	000700e7          	jalr	a4
        if (!reader->NextArrayItem(reader)) {
204040ec:	f2842783          	lw	a5,-216(s0)
204040f0:	03c7a783          	lw	a5,60(a5)
204040f4:	f2842503          	lw	a0,-216(s0)
204040f8:	000780e7          	jalr	a5
204040fc:	00050793          	mv	a5,a0
20404100:	02079c63          	bnez	a5,20404138 <TVMGraphExecutorNode_Load+0x334>
          fprintf(stderr, "invalid json format\n");
20404104:	5fbfd797          	auipc	a5,0x5fbfd
20404108:	93478793          	addi	a5,a5,-1740 # 80000a38 <_impure_ptr>
2040410c:	0007a783          	lw	a5,0(a5)
20404110:	00c7a783          	lw	a5,12(a5)
20404114:	00078693          	mv	a3,a5
20404118:	01400613          	li	a2,20
2040411c:	00100593          	li	a1,1
20404120:	0001c517          	auipc	a0,0x1c
20404124:	ea850513          	addi	a0,a0,-344 # 2041ffc8 <__func__.3846+0x2e0>
20404128:	57d0e0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
2040412c:	fff00793          	li	a5,-1
20404130:	fef42623          	sw	a5,-20(s0)
          break;
20404134:	0cc0006f          	j	20404200 <TVMGraphExecutorNode_Load+0x3fc>
        }
        reader->ReadUnsignedInteger(reader, &(inputs->index));
20404138:	f2842783          	lw	a5,-216(s0)
2040413c:	0247a703          	lw	a4,36(a5)
20404140:	fdc42783          	lw	a5,-36(s0)
20404144:	00478793          	addi	a5,a5,4
20404148:	00078593          	mv	a1,a5
2040414c:	f2842503          	lw	a0,-216(s0)
20404150:	000700e7          	jalr	a4
        if (reader->NextArrayItem(reader)) {
20404154:	f2842783          	lw	a5,-216(s0)
20404158:	03c7a783          	lw	a5,60(a5)
2040415c:	f2842503          	lw	a0,-216(s0)
20404160:	000780e7          	jalr	a5
20404164:	00050793          	mv	a5,a0
20404168:	06078663          	beqz	a5,204041d4 <TVMGraphExecutorNode_Load+0x3d0>
          reader->ReadUnsignedInteger(reader, &(inputs->version));
2040416c:	f2842783          	lw	a5,-216(s0)
20404170:	0247a703          	lw	a4,36(a5)
20404174:	fdc42783          	lw	a5,-36(s0)
20404178:	00878793          	addi	a5,a5,8
2040417c:	00078593          	mv	a1,a5
20404180:	f2842503          	lw	a0,-216(s0)
20404184:	000700e7          	jalr	a4
          if (reader->NextArrayItem(reader)) {
20404188:	f2842783          	lw	a5,-216(s0)
2040418c:	03c7a783          	lw	a5,60(a5)
20404190:	f2842503          	lw	a0,-216(s0)
20404194:	000780e7          	jalr	a5
20404198:	00050793          	mv	a5,a0
2040419c:	04078063          	beqz	a5,204041dc <TVMGraphExecutorNode_Load+0x3d8>
            fprintf(stderr, "invalid json format\n");
204041a0:	5fbfd797          	auipc	a5,0x5fbfd
204041a4:	89878793          	addi	a5,a5,-1896 # 80000a38 <_impure_ptr>
204041a8:	0007a783          	lw	a5,0(a5)
204041ac:	00c7a783          	lw	a5,12(a5)
204041b0:	00078693          	mv	a3,a5
204041b4:	01400613          	li	a2,20
204041b8:	00100593          	li	a1,1
204041bc:	0001c517          	auipc	a0,0x1c
204041c0:	e0c50513          	addi	a0,a0,-500 # 2041ffc8 <__func__.3846+0x2e0>
204041c4:	4e10e0ef          	jal	ra,20412ea4 <fwrite>
            status = -1;
204041c8:	fff00793          	li	a5,-1
204041cc:	fef42623          	sw	a5,-20(s0)
            break;
204041d0:	0300006f          	j	20404200 <TVMGraphExecutorNode_Load+0x3fc>
          }
        } else {
          inputs->version = 0;
204041d4:	fdc42783          	lw	a5,-36(s0)
204041d8:	0007a423          	sw	zero,8(a5)
        }
        count++;
204041dc:	fe442783          	lw	a5,-28(s0)
204041e0:	00178793          	addi	a5,a5,1
204041e4:	fef42223          	sw	a5,-28(s0)
      while (reader->NextArrayItem(reader)) {
204041e8:	f2842783          	lw	a5,-216(s0)
204041ec:	03c7a783          	lw	a5,60(a5)
204041f0:	f2842503          	lw	a0,-216(s0)
204041f4:	000780e7          	jalr	a5
204041f8:	00050793          	mv	a5,a0
204041fc:	e20794e3          	bnez	a5,20404024 <TVMGraphExecutorNode_Load+0x220>
      }
      node->inputs_count = count;
20404200:	f2c42783          	lw	a5,-212(s0)
20404204:	fe442703          	lw	a4,-28(s0)
20404208:	10e7a823          	sw	a4,272(a5)
      bitmask |= 4;
2040420c:	fe842783          	lw	a5,-24(s0)
20404210:	0047e793          	ori	a5,a5,4
20404214:	fef42423          	sw	a5,-24(s0)
20404218:	0f00006f          	j	20404308 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "attr") || !strcmp(key, "attrs")) {
2040421c:	fc840793          	addi	a5,s0,-56
20404220:	0001c597          	auipc	a1,0x1c
20404224:	dc058593          	addi	a1,a1,-576 # 2041ffe0 <__func__.3846+0x2f8>
20404228:	00078513          	mv	a0,a5
2040422c:	7ff0e0ef          	jal	ra,2041322a <strcmp>
20404230:	00050793          	mv	a5,a0
20404234:	02078063          	beqz	a5,20404254 <TVMGraphExecutorNode_Load+0x450>
20404238:	fc840793          	addi	a5,s0,-56
2040423c:	0001c597          	auipc	a1,0x1c
20404240:	dac58593          	addi	a1,a1,-596 # 2041ffe8 <__func__.3846+0x300>
20404244:	00078513          	mv	a0,a5
20404248:	7e30e0ef          	jal	ra,2041322a <strcmp>
2040424c:	00050793          	mv	a5,a0
20404250:	02079c63          	bnez	a5,20404288 <TVMGraphExecutorNode_Load+0x484>
      TVMOpParam param;

      TVMGraphExecutorNode_LoadAttrs(node, reader, &param);
20404254:	f3840793          	addi	a5,s0,-200
20404258:	00078613          	mv	a2,a5
2040425c:	f2842583          	lw	a1,-216(s0)
20404260:	f2c42503          	lw	a0,-212(s0)
20404264:	949ff0ef          	jal	ra,20403bac <TVMGraphExecutorNode_LoadAttrs>
      memcpy(&node->param, &param, sizeof(param));
20404268:	f2c42783          	lw	a5,-212(s0)
2040426c:	08878793          	addi	a5,a5,136
20404270:	f3840713          	addi	a4,s0,-200
20404274:	08400613          	li	a2,132
20404278:	00070593          	mv	a1,a4
2040427c:	00078513          	mv	a0,a5
20404280:	5710e0ef          	jal	ra,20412ff0 <memcpy>
    } else if (!strcmp(key, "attr") || !strcmp(key, "attrs")) {
20404284:	0840006f          	j	20404308 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "control_deps")) {
20404288:	fc840793          	addi	a5,s0,-56
2040428c:	0001c597          	auipc	a1,0x1c
20404290:	d6458593          	addi	a1,a1,-668 # 2041fff0 <__func__.3846+0x308>
20404294:	00078513          	mv	a0,a5
20404298:	7930e0ef          	jal	ra,2041322a <strcmp>
2040429c:	00050793          	mv	a5,a0
204042a0:	02079c63          	bnez	a5,204042d8 <TVMGraphExecutorNode_Load+0x4d4>
      fprintf(stderr, "do not support key %s", key);
204042a4:	5fbfc797          	auipc	a5,0x5fbfc
204042a8:	79478793          	addi	a5,a5,1940 # 80000a38 <_impure_ptr>
204042ac:	0007a783          	lw	a5,0(a5)
204042b0:	00c7a783          	lw	a5,12(a5)
204042b4:	fc840713          	addi	a4,s0,-56
204042b8:	00070613          	mv	a2,a4
204042bc:	0001c597          	auipc	a1,0x1c
204042c0:	d4458593          	addi	a1,a1,-700 # 20420000 <__func__.3846+0x318>
204042c4:	00078513          	mv	a0,a5
204042c8:	3430e0ef          	jal	ra,20412e0a <fprintf>
      status = -1;
204042cc:	fff00793          	li	a5,-1
204042d0:	fef42623          	sw	a5,-20(s0)
204042d4:	0340006f          	j	20404308 <TVMGraphExecutorNode_Load+0x504>
    } else {
      fprintf(stderr, "do not support key %s", key);
204042d8:	5fbfc797          	auipc	a5,0x5fbfc
204042dc:	76078793          	addi	a5,a5,1888 # 80000a38 <_impure_ptr>
204042e0:	0007a783          	lw	a5,0(a5)
204042e4:	00c7a783          	lw	a5,12(a5)
204042e8:	fc840713          	addi	a4,s0,-56
204042ec:	00070613          	mv	a2,a4
204042f0:	0001c597          	auipc	a1,0x1c
204042f4:	d1058593          	addi	a1,a1,-752 # 20420000 <__func__.3846+0x318>
204042f8:	00078513          	mv	a0,a5
204042fc:	30f0e0ef          	jal	ra,20412e0a <fprintf>
      status = -1;
20404300:	fff00793          	li	a5,-1
20404304:	fef42623          	sw	a5,-20(s0)
    }
    if (status != 0) {
20404308:	fec42783          	lw	a5,-20(s0)
2040430c:	02079663          	bnez	a5,20404338 <TVMGraphExecutorNode_Load+0x534>
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20404310:	f2842783          	lw	a5,-216(s0)
20404314:	0387a703          	lw	a4,56(a5)
20404318:	fc840793          	addi	a5,s0,-56
2040431c:	01400613          	li	a2,20
20404320:	00078593          	mv	a1,a5
20404324:	f2842503          	lw	a0,-216(s0)
20404328:	000700e7          	jalr	a4
2040432c:	00050793          	mv	a5,a0
20404330:	b00794e3          	bnez	a5,20403e38 <TVMGraphExecutorNode_Load+0x34>
20404334:	0080006f          	j	2040433c <TVMGraphExecutorNode_Load+0x538>
      break;
20404338:	00000013          	nop
    }
  }
  if (bitmask != (1 | 2 | 4)) {
2040433c:	fe842703          	lw	a4,-24(s0)
20404340:	00700793          	li	a5,7
20404344:	02f70a63          	beq	a4,a5,20404378 <TVMGraphExecutorNode_Load+0x574>
    fprintf(stderr, "invalid format\n");
20404348:	5fbfc797          	auipc	a5,0x5fbfc
2040434c:	6f078793          	addi	a5,a5,1776 # 80000a38 <_impure_ptr>
20404350:	0007a783          	lw	a5,0(a5)
20404354:	00c7a783          	lw	a5,12(a5)
20404358:	00078693          	mv	a3,a5
2040435c:	00f00613          	li	a2,15
20404360:	00100593          	li	a1,1
20404364:	0001c517          	auipc	a0,0x1c
20404368:	bb850513          	addi	a0,a0,-1096 # 2041ff1c <__func__.3846+0x234>
2040436c:	3390e0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20404370:	fff00793          	li	a5,-1
20404374:	fef42623          	sw	a5,-20(s0)
  }
  return status;
20404378:	fec42783          	lw	a5,-20(s0)
}
2040437c:	00078513          	mv	a0,a5
20404380:	0dc12083          	lw	ra,220(sp)
20404384:	0d812403          	lw	s0,216(sp)
20404388:	0e010113          	addi	sp,sp,224
2040438c:	00008067          	ret

20404390 <TVMGraphExecutorNodeCreate>:

TVMGraphExecutorNode TVMGraphExecutorNodeCreate() {
20404390:	e7010113          	addi	sp,sp,-400
20404394:	18112623          	sw	ra,396(sp)
20404398:	18812423          	sw	s0,392(sp)
2040439c:	19010413          	addi	s0,sp,400
204043a0:	e6a42e23          	sw	a0,-388(s0)
  TVMGraphExecutorNode node;
  memset(&node, 0, sizeof(TVMGraphExecutorNode));
204043a4:	e8440793          	addi	a5,s0,-380
204043a8:	16c00613          	li	a2,364
204043ac:	00000593          	li	a1,0
204043b0:	00078513          	mv	a0,a5
204043b4:	4fb0e0ef          	jal	ra,204130ae <memset>
  node.LoadAttrs = TVMGraphExecutorNode_LoadAttrs;
204043b8:	fffff797          	auipc	a5,0xfffff
204043bc:	7f478793          	addi	a5,a5,2036 # 20403bac <TVMGraphExecutorNode_LoadAttrs>
204043c0:	fef42423          	sw	a5,-24(s0)
  node.Load = TVMGraphExecutorNode_Load;
204043c4:	00000797          	auipc	a5,0x0
204043c8:	a4078793          	addi	a5,a5,-1472 # 20403e04 <TVMGraphExecutorNode_Load>
204043cc:	fef42623          	sw	a5,-20(s0)
  return node;
204043d0:	e7c42783          	lw	a5,-388(s0)
204043d4:	00078693          	mv	a3,a5
204043d8:	e8440793          	addi	a5,s0,-380
204043dc:	16c00713          	li	a4,364
204043e0:	00070613          	mv	a2,a4
204043e4:	00078593          	mv	a1,a5
204043e8:	00068513          	mv	a0,a3
204043ec:	4050e0ef          	jal	ra,20412ff0 <memcpy>
}
204043f0:	e7c42503          	lw	a0,-388(s0)
204043f4:	18c12083          	lw	ra,396(sp)
204043f8:	18812403          	lw	s0,392(sp)
204043fc:	19010113          	addi	sp,sp,400
20404400:	00008067          	ret

20404404 <TVMGraphExecutorNodeRelease>:

int TVMGraphExecutorNodeRelease(TVMGraphExecutorNode* node) {
20404404:	fd010113          	addi	sp,sp,-48
20404408:	02112623          	sw	ra,44(sp)
2040440c:	02812423          	sw	s0,40(sp)
20404410:	03010413          	addi	s0,sp,48
20404414:	fca42e23          	sw	a0,-36(s0)
  if (!node) {
20404418:	fdc42783          	lw	a5,-36(s0)
2040441c:	00079663          	bnez	a5,20404428 <TVMGraphExecutorNodeRelease+0x24>
    return 0;
20404420:	00000793          	li	a5,0
20404424:	0540006f          	j	20404478 <TVMGraphExecutorNodeRelease+0x74>
  }
  if (node->inputs) {
20404428:	fdc42783          	lw	a5,-36(s0)
2040442c:	10c7a783          	lw	a5,268(a5)
20404430:	04078263          	beqz	a5,20404474 <TVMGraphExecutorNodeRelease+0x70>
    DLDevice dev = {kDLCPU, 0};
20404434:	00100793          	li	a5,1
20404438:	fef42223          	sw	a5,-28(s0)
2040443c:	fe042423          	sw	zero,-24(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(node->inputs, dev);
20404440:	fdc42783          	lw	a5,-36(s0)
20404444:	10c7a783          	lw	a5,268(a5)
20404448:	fe442583          	lw	a1,-28(s0)
2040444c:	fe842603          	lw	a2,-24(s0)
20404450:	00078513          	mv	a0,a5
20404454:	e0cfc0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20404458:	fea42623          	sw	a0,-20(s0)
    node->inputs = 0;
2040445c:	fdc42783          	lw	a5,-36(s0)
20404460:	1007a623          	sw	zero,268(a5)
    if (err != kTvmErrorNoError) {
20404464:	fec42783          	lw	a5,-20(s0)
20404468:	00078663          	beqz	a5,20404474 <TVMGraphExecutorNodeRelease+0x70>
      return -1;
2040446c:	fff00793          	li	a5,-1
20404470:	0080006f          	j	20404478 <TVMGraphExecutorNodeRelease+0x74>
    }
  }

  return 0;
20404474:	00000793          	li	a5,0
}
20404478:	00078513          	mv	a0,a5
2040447c:	02c12083          	lw	ra,44(sp)
20404480:	02812403          	lw	s0,40(sp)
20404484:	03010113          	addi	sp,sp,48
20404488:	00008067          	ret

2040448c <TVMGraphExecutorGraphAttr_Load>:

int TVMGraphExecutorGraphAttr_Load(TVMGraphExecutorGraphAttr* attr, JSONReader* reader) {
2040448c:	f5010113          	addi	sp,sp,-176
20404490:	0a112623          	sw	ra,172(sp)
20404494:	0a812423          	sw	s0,168(sp)
20404498:	0b010413          	addi	s0,sp,176
2040449c:	f4a42e23          	sw	a0,-164(s0)
204044a0:	f4b42c23          	sw	a1,-168(s0)
  int status = 0;
204044a4:	fe042623          	sw	zero,-20(s0)
  int bitmask = 0;
204044a8:	fe042423          	sw	zero,-24(s0)
  char key[16], type[16];
  uint32_t storage_id_count = 0;
204044ac:	fe042223          	sw	zero,-28(s0)
  uint32_t dltype_count = 0;
204044b0:	fe042023          	sw	zero,-32(s0)
  uint32_t shape_count = 0;
204044b4:	fc042e23          	sw	zero,-36(s0)
  uint32_t device_index_count = 0;
204044b8:	fc042c23          	sw	zero,-40(s0)
  reader->BeginObject(reader);
204044bc:	f5842783          	lw	a5,-168(s0)
204044c0:	0347a783          	lw	a5,52(a5)
204044c4:	f5842503          	lw	a0,-168(s0)
204044c8:	000780e7          	jalr	a5
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
204044cc:	0b40106f          	j	20405580 <TVMGraphExecutorGraphAttr_Load+0x10f4>
    if (!strcmp(key, "dltype")) {
204044d0:	fac40793          	addi	a5,s0,-84
204044d4:	0001c597          	auipc	a1,0x1c
204044d8:	b4458593          	addi	a1,a1,-1212 # 20420018 <__func__.3846+0x330>
204044dc:	00078513          	mv	a0,a5
204044e0:	54b0e0ef          	jal	ra,2041322a <strcmp>
204044e4:	00050793          	mv	a5,a0
204044e8:	36079e63          	bnez	a5,20404864 <TVMGraphExecutorGraphAttr_Load+0x3d8>
      reader->BeginArray(reader);
204044ec:	f5842783          	lw	a5,-168(s0)
204044f0:	0307a783          	lw	a5,48(a5)
204044f4:	f5842503          	lw	a0,-168(s0)
204044f8:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
204044fc:	f5842783          	lw	a5,-168(s0)
20404500:	03c7a783          	lw	a5,60(a5)
20404504:	f5842503          	lw	a0,-168(s0)
20404508:	000780e7          	jalr	a5
2040450c:	00050793          	mv	a5,a0
20404510:	02079c63          	bnez	a5,20404548 <TVMGraphExecutorGraphAttr_Load+0xbc>
        fprintf(stderr, "Invalid json format\n");
20404514:	5fbfc797          	auipc	a5,0x5fbfc
20404518:	52478793          	addi	a5,a5,1316 # 80000a38 <_impure_ptr>
2040451c:	0007a783          	lw	a5,0(a5)
20404520:	00c7a783          	lw	a5,12(a5)
20404524:	00078693          	mv	a3,a5
20404528:	01400613          	li	a2,20
2040452c:	00100593          	li	a1,1
20404530:	0001c517          	auipc	a0,0x1c
20404534:	af050513          	addi	a0,a0,-1296 # 20420020 <__func__.3846+0x338>
20404538:	16d0e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
2040453c:	fff00793          	li	a5,-1
20404540:	fef42623          	sw	a5,-20(s0)
        break;
20404544:	0640106f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20404548:	f5842783          	lw	a5,-168(s0)
2040454c:	02c7a703          	lw	a4,44(a5)
20404550:	f9c40793          	addi	a5,s0,-100
20404554:	01000613          	li	a2,16
20404558:	00078593          	mv	a1,a5
2040455c:	f5842503          	lw	a0,-168(s0)
20404560:	000700e7          	jalr	a4
20404564:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20404568:	fec42783          	lw	a5,-20(s0)
2040456c:	02078863          	beqz	a5,2040459c <TVMGraphExecutorGraphAttr_Load+0x110>
        fprintf(stderr, "error reading dltype type\n");
20404570:	5fbfc797          	auipc	a5,0x5fbfc
20404574:	4c878793          	addi	a5,a5,1224 # 80000a38 <_impure_ptr>
20404578:	0007a783          	lw	a5,0(a5)
2040457c:	00c7a783          	lw	a5,12(a5)
20404580:	00078693          	mv	a3,a5
20404584:	01a00613          	li	a2,26
20404588:	00100593          	li	a1,1
2040458c:	0001c517          	auipc	a0,0x1c
20404590:	aac50513          	addi	a0,a0,-1364 # 20420038 <__func__.3846+0x350>
20404594:	1110e0ef          	jal	ra,20412ea4 <fwrite>
        break;
20404598:	0100106f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (strcmp(type, "list_str")) {
2040459c:	f9c40793          	addi	a5,s0,-100
204045a0:	0001c597          	auipc	a1,0x1c
204045a4:	ab458593          	addi	a1,a1,-1356 # 20420054 <__func__.3846+0x36c>
204045a8:	00078513          	mv	a0,a5
204045ac:	47f0e0ef          	jal	ra,2041322a <strcmp>
204045b0:	00050793          	mv	a5,a0
204045b4:	02078c63          	beqz	a5,204045ec <TVMGraphExecutorGraphAttr_Load+0x160>
        fprintf(stderr, "Invalid json format\n");
204045b8:	5fbfc797          	auipc	a5,0x5fbfc
204045bc:	48078793          	addi	a5,a5,1152 # 80000a38 <_impure_ptr>
204045c0:	0007a783          	lw	a5,0(a5)
204045c4:	00c7a783          	lw	a5,12(a5)
204045c8:	00078693          	mv	a3,a5
204045cc:	01400613          	li	a2,20
204045d0:	00100593          	li	a1,1
204045d4:	0001c517          	auipc	a0,0x1c
204045d8:	a4c50513          	addi	a0,a0,-1460 # 20420020 <__func__.3846+0x338>
204045dc:	0c90e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
204045e0:	fff00793          	li	a5,-1
204045e4:	fef42623          	sw	a5,-20(s0)
        break;
204045e8:	7c10006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
204045ec:	f5842783          	lw	a5,-168(s0)
204045f0:	03c7a783          	lw	a5,60(a5)
204045f4:	f5842503          	lw	a0,-168(s0)
204045f8:	000780e7          	jalr	a5
204045fc:	00050793          	mv	a5,a0
20404600:	02079c63          	bnez	a5,20404638 <TVMGraphExecutorGraphAttr_Load+0x1ac>
        fprintf(stderr, "Invalid json format\n");
20404604:	5fbfc797          	auipc	a5,0x5fbfc
20404608:	43478793          	addi	a5,a5,1076 # 80000a38 <_impure_ptr>
2040460c:	0007a783          	lw	a5,0(a5)
20404610:	00c7a783          	lw	a5,12(a5)
20404614:	00078693          	mv	a3,a5
20404618:	01400613          	li	a2,20
2040461c:	00100593          	li	a1,1
20404620:	0001c517          	auipc	a0,0x1c
20404624:	a0050513          	addi	a0,a0,-1536 # 20420020 <__func__.3846+0x338>
20404628:	07d0e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
2040462c:	fff00793          	li	a5,-1
20404630:	fef42623          	sw	a5,-20(s0)
        break;
20404634:	7750006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
20404638:	f5842783          	lw	a5,-168(s0)
2040463c:	0307a783          	lw	a5,48(a5)
20404640:	f5842503          	lw	a0,-168(s0)
20404644:	000780e7          	jalr	a5
      size_t num_items = 0;
20404648:	f8042c23          	sw	zero,-104(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
2040464c:	f5842783          	lw	a5,-168(s0)
20404650:	0407a703          	lw	a4,64(a5)
20404654:	f9840793          	addi	a5,s0,-104
20404658:	00078593          	mv	a1,a5
2040465c:	f5842503          	lw	a0,-168(s0)
20404660:	000700e7          	jalr	a4
20404664:	00050793          	mv	a5,a0
20404668:	02078c63          	beqz	a5,204046a0 <TVMGraphExecutorGraphAttr_Load+0x214>
        fprintf(stderr, "error determing list_str length\n");
2040466c:	5fbfc797          	auipc	a5,0x5fbfc
20404670:	3cc78793          	addi	a5,a5,972 # 80000a38 <_impure_ptr>
20404674:	0007a783          	lw	a5,0(a5)
20404678:	00c7a783          	lw	a5,12(a5)
2040467c:	00078693          	mv	a3,a5
20404680:	02000613          	li	a2,32
20404684:	00100593          	li	a1,1
20404688:	0001c517          	auipc	a0,0x1c
2040468c:	9d850513          	addi	a0,a0,-1576 # 20420060 <__func__.3846+0x378>
20404690:	0150e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404694:	fff00793          	li	a5,-1
20404698:	fef42623          	sw	a5,-20(s0)
        break;
2040469c:	70d0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
204046a0:	00100793          	li	a5,1
204046a4:	f8f42823          	sw	a5,-112(s0)
204046a8:	f8042a23          	sw	zero,-108(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(TVM_CRT_MAX_STRLEN_DLTYPE * num_items, dev,
204046ac:	f9842703          	lw	a4,-104(s0)
204046b0:	00070793          	mv	a5,a4
204046b4:	00279793          	slli	a5,a5,0x2
204046b8:	00e787b3          	add	a5,a5,a4
204046bc:	00179793          	slli	a5,a5,0x1
204046c0:	00078713          	mv	a4,a5
                                                      (void**)&attr->dltype);
204046c4:	f5c42783          	lw	a5,-164(s0)
204046c8:	00c78793          	addi	a5,a5,12
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(TVM_CRT_MAX_STRLEN_DLTYPE * num_items, dev,
204046cc:	00078693          	mv	a3,a5
204046d0:	f9042583          	lw	a1,-112(s0)
204046d4:	f9442603          	lw	a2,-108(s0)
204046d8:	00070513          	mv	a0,a4
204046dc:	b20fc0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
204046e0:	faa42e23          	sw	a0,-68(s0)
      if (err != kTvmErrorNoError) {
204046e4:	fbc42783          	lw	a5,-68(s0)
204046e8:	02078863          	beqz	a5,20404718 <TVMGraphExecutorGraphAttr_Load+0x28c>
        fprintf(stderr, "memory allocate error: %08x", err);
204046ec:	5fbfc797          	auipc	a5,0x5fbfc
204046f0:	34c78793          	addi	a5,a5,844 # 80000a38 <_impure_ptr>
204046f4:	0007a783          	lw	a5,0(a5)
204046f8:	00c7a783          	lw	a5,12(a5)
204046fc:	fbc42603          	lw	a2,-68(s0)
20404700:	0001c597          	auipc	a1,0x1c
20404704:	89058593          	addi	a1,a1,-1904 # 2041ff90 <__func__.3846+0x2a8>
20404708:	00078513          	mv	a0,a5
2040470c:	6fe0e0ef          	jal	ra,20412e0a <fprintf>
        return -1;
20404710:	fff00793          	li	a5,-1
20404714:	6d50006f          	j	204055e8 <TVMGraphExecutorGraphAttr_Load+0x115c>
      }
      dltype_count = 0;
20404718:	fe042023          	sw	zero,-32(s0)
      while (reader->NextArrayItem(reader)) {
2040471c:	0c40006f          	j	204047e0 <TVMGraphExecutorGraphAttr_Load+0x354>
        if (dltype_count == num_items) {
20404720:	f9842783          	lw	a5,-104(s0)
20404724:	fe042703          	lw	a4,-32(s0)
20404728:	02f71e63          	bne	a4,a5,20404764 <TVMGraphExecutorGraphAttr_Load+0x2d8>
          fprintf(stderr, "array too big\n");
2040472c:	5fbfc797          	auipc	a5,0x5fbfc
20404730:	30c78793          	addi	a5,a5,780 # 80000a38 <_impure_ptr>
20404734:	0007a783          	lw	a5,0(a5)
20404738:	00c7a783          	lw	a5,12(a5)
2040473c:	00078693          	mv	a3,a5
20404740:	00e00613          	li	a2,14
20404744:	00100593          	li	a1,1
20404748:	0001c517          	auipc	a0,0x1c
2040474c:	93c50513          	addi	a0,a0,-1732 # 20420084 <__func__.3846+0x39c>
20404750:	7540e0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20404754:	fff00793          	li	a5,-1
20404758:	fef42623          	sw	a5,-20(s0)
          return status;
2040475c:	fec42783          	lw	a5,-20(s0)
20404760:	6890006f          	j	204055e8 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        status = reader->ReadString(reader, attr->dltype + dltype_count * TVM_CRT_MAX_STRLEN_DLTYPE,
20404764:	f5842783          	lw	a5,-168(s0)
20404768:	02c7a803          	lw	a6,44(a5)
2040476c:	f5c42783          	lw	a5,-164(s0)
20404770:	00c7a683          	lw	a3,12(a5)
20404774:	fe042703          	lw	a4,-32(s0)
20404778:	00070793          	mv	a5,a4
2040477c:	00279793          	slli	a5,a5,0x2
20404780:	00e787b3          	add	a5,a5,a4
20404784:	00179793          	slli	a5,a5,0x1
20404788:	00f687b3          	add	a5,a3,a5
2040478c:	00a00613          	li	a2,10
20404790:	00078593          	mv	a1,a5
20404794:	f5842503          	lw	a0,-168(s0)
20404798:	000800e7          	jalr	a6
2040479c:	fea42623          	sw	a0,-20(s0)
                                    TVM_CRT_MAX_STRLEN_DLTYPE);
        if (status != 0) {
204047a0:	fec42783          	lw	a5,-20(s0)
204047a4:	02078863          	beqz	a5,204047d4 <TVMGraphExecutorGraphAttr_Load+0x348>
          fprintf(stderr, "error reading dltype array item");
204047a8:	5fbfc797          	auipc	a5,0x5fbfc
204047ac:	29078793          	addi	a5,a5,656 # 80000a38 <_impure_ptr>
204047b0:	0007a783          	lw	a5,0(a5)
204047b4:	00c7a783          	lw	a5,12(a5)
204047b8:	00078693          	mv	a3,a5
204047bc:	01f00613          	li	a2,31
204047c0:	00100593          	li	a1,1
204047c4:	0001c517          	auipc	a0,0x1c
204047c8:	8d050513          	addi	a0,a0,-1840 # 20420094 <__func__.3846+0x3ac>
204047cc:	6d80e0ef          	jal	ra,20412ea4 <fwrite>
          break;
204047d0:	0280006f          	j	204047f8 <TVMGraphExecutorGraphAttr_Load+0x36c>
        }
        dltype_count++;
204047d4:	fe042783          	lw	a5,-32(s0)
204047d8:	00178793          	addi	a5,a5,1
204047dc:	fef42023          	sw	a5,-32(s0)
      while (reader->NextArrayItem(reader)) {
204047e0:	f5842783          	lw	a5,-168(s0)
204047e4:	03c7a783          	lw	a5,60(a5)
204047e8:	f5842503          	lw	a0,-168(s0)
204047ec:	000780e7          	jalr	a5
204047f0:	00050793          	mv	a5,a0
204047f4:	f20796e3          	bnez	a5,20404720 <TVMGraphExecutorGraphAttr_Load+0x294>
      }
      attr->dltype_count = dltype_count;
204047f8:	f5c42783          	lw	a5,-164(s0)
204047fc:	fe042703          	lw	a4,-32(s0)
20404800:	00e7a823          	sw	a4,16(a5)

      if (reader->NextArrayItem(reader)) {
20404804:	f5842783          	lw	a5,-168(s0)
20404808:	03c7a783          	lw	a5,60(a5)
2040480c:	f5842503          	lw	a0,-168(s0)
20404810:	000780e7          	jalr	a5
20404814:	00050793          	mv	a5,a0
20404818:	02078e63          	beqz	a5,20404854 <TVMGraphExecutorGraphAttr_Load+0x3c8>
        fprintf(stderr, "Invalid json format\n");
2040481c:	5fbfc797          	auipc	a5,0x5fbfc
20404820:	21c78793          	addi	a5,a5,540 # 80000a38 <_impure_ptr>
20404824:	0007a783          	lw	a5,0(a5)
20404828:	00c7a783          	lw	a5,12(a5)
2040482c:	00078693          	mv	a3,a5
20404830:	01400613          	li	a2,20
20404834:	00100593          	li	a1,1
20404838:	0001b517          	auipc	a0,0x1b
2040483c:	7e850513          	addi	a0,a0,2024 # 20420020 <__func__.3846+0x338>
20404840:	6640e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404844:	fff00793          	li	a5,-1
20404848:	fef42623          	sw	a5,-20(s0)
        break;
2040484c:	00000013          	nop
20404850:	5590006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      bitmask |= 1;
20404854:	fe842783          	lw	a5,-24(s0)
20404858:	0017e793          	ori	a5,a5,1
2040485c:	fef42423          	sw	a5,-24(s0)
20404860:	5210006f          	j	20405580 <TVMGraphExecutorGraphAttr_Load+0x10f4>
    } else if (!strcmp(key, "storage_id")) {
20404864:	fac40793          	addi	a5,s0,-84
20404868:	0001c597          	auipc	a1,0x1c
2040486c:	84c58593          	addi	a1,a1,-1972 # 204200b4 <__func__.3846+0x3cc>
20404870:	00078513          	mv	a0,a5
20404874:	1b70e0ef          	jal	ra,2041322a <strcmp>
20404878:	00050793          	mv	a5,a0
2040487c:	30079a63          	bnez	a5,20404b90 <TVMGraphExecutorGraphAttr_Load+0x704>
      reader->BeginArray(reader);
20404880:	f5842783          	lw	a5,-168(s0)
20404884:	0307a783          	lw	a5,48(a5)
20404888:	f5842503          	lw	a0,-168(s0)
2040488c:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20404890:	f5842783          	lw	a5,-168(s0)
20404894:	03c7a783          	lw	a5,60(a5)
20404898:	f5842503          	lw	a0,-168(s0)
2040489c:	000780e7          	jalr	a5
204048a0:	00050793          	mv	a5,a0
204048a4:	02079c63          	bnez	a5,204048dc <TVMGraphExecutorGraphAttr_Load+0x450>
        fprintf(stderr, "Invalid json format\n");
204048a8:	5fbfc797          	auipc	a5,0x5fbfc
204048ac:	19078793          	addi	a5,a5,400 # 80000a38 <_impure_ptr>
204048b0:	0007a783          	lw	a5,0(a5)
204048b4:	00c7a783          	lw	a5,12(a5)
204048b8:	00078693          	mv	a3,a5
204048bc:	01400613          	li	a2,20
204048c0:	00100593          	li	a1,1
204048c4:	0001b517          	auipc	a0,0x1b
204048c8:	75c50513          	addi	a0,a0,1884 # 20420020 <__func__.3846+0x338>
204048cc:	5d80e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
204048d0:	fff00793          	li	a5,-1
204048d4:	fef42623          	sw	a5,-20(s0)
        break;
204048d8:	4d10006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
204048dc:	f5842783          	lw	a5,-168(s0)
204048e0:	02c7a703          	lw	a4,44(a5)
204048e4:	f9c40793          	addi	a5,s0,-100
204048e8:	01000613          	li	a2,16
204048ec:	00078593          	mv	a1,a5
204048f0:	f5842503          	lw	a0,-168(s0)
204048f4:	000700e7          	jalr	a4
204048f8:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
204048fc:	fec42783          	lw	a5,-20(s0)
20404900:	02078663          	beqz	a5,2040492c <TVMGraphExecutorGraphAttr_Load+0x4a0>
        fprintf(stderr, "error reading device_index array item");
20404904:	5fbfc797          	auipc	a5,0x5fbfc
20404908:	13478793          	addi	a5,a5,308 # 80000a38 <_impure_ptr>
2040490c:	0007a783          	lw	a5,0(a5)
20404910:	00c7a783          	lw	a5,12(a5)
20404914:	00078693          	mv	a3,a5
20404918:	02500613          	li	a2,37
2040491c:	00100593          	li	a1,1
20404920:	0001b517          	auipc	a0,0x1b
20404924:	7a050513          	addi	a0,a0,1952 # 204200c0 <__func__.3846+0x3d8>
20404928:	57c0e0ef          	jal	ra,20412ea4 <fwrite>
      }
      if (strcmp(type, "list_int")) {
2040492c:	f9c40793          	addi	a5,s0,-100
20404930:	0001b597          	auipc	a1,0x1b
20404934:	7b858593          	addi	a1,a1,1976 # 204200e8 <__func__.3846+0x400>
20404938:	00078513          	mv	a0,a5
2040493c:	0ef0e0ef          	jal	ra,2041322a <strcmp>
20404940:	00050793          	mv	a5,a0
20404944:	02078c63          	beqz	a5,2040497c <TVMGraphExecutorGraphAttr_Load+0x4f0>
        fprintf(stderr, "Invalid json format\n");
20404948:	5fbfc797          	auipc	a5,0x5fbfc
2040494c:	0f078793          	addi	a5,a5,240 # 80000a38 <_impure_ptr>
20404950:	0007a783          	lw	a5,0(a5)
20404954:	00c7a783          	lw	a5,12(a5)
20404958:	00078693          	mv	a3,a5
2040495c:	01400613          	li	a2,20
20404960:	00100593          	li	a1,1
20404964:	0001b517          	auipc	a0,0x1b
20404968:	6bc50513          	addi	a0,a0,1724 # 20420020 <__func__.3846+0x338>
2040496c:	5380e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404970:	fff00793          	li	a5,-1
20404974:	fef42623          	sw	a5,-20(s0)
        break;
20404978:	4310006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
2040497c:	f5842783          	lw	a5,-168(s0)
20404980:	03c7a783          	lw	a5,60(a5)
20404984:	f5842503          	lw	a0,-168(s0)
20404988:	000780e7          	jalr	a5
2040498c:	00050793          	mv	a5,a0
20404990:	02079c63          	bnez	a5,204049c8 <TVMGraphExecutorGraphAttr_Load+0x53c>
        fprintf(stderr, "Invalid json format\n");
20404994:	5fbfc797          	auipc	a5,0x5fbfc
20404998:	0a478793          	addi	a5,a5,164 # 80000a38 <_impure_ptr>
2040499c:	0007a783          	lw	a5,0(a5)
204049a0:	00c7a783          	lw	a5,12(a5)
204049a4:	00078693          	mv	a3,a5
204049a8:	01400613          	li	a2,20
204049ac:	00100593          	li	a1,1
204049b0:	0001b517          	auipc	a0,0x1b
204049b4:	67050513          	addi	a0,a0,1648 # 20420020 <__func__.3846+0x338>
204049b8:	4ec0e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
204049bc:	fff00793          	li	a5,-1
204049c0:	fef42623          	sw	a5,-20(s0)
        break;
204049c4:	3e50006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
204049c8:	f5842783          	lw	a5,-168(s0)
204049cc:	0307a783          	lw	a5,48(a5)
204049d0:	f5842503          	lw	a0,-168(s0)
204049d4:	000780e7          	jalr	a5
      size_t num_items = 0;
204049d8:	f8042623          	sw	zero,-116(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
204049dc:	f5842783          	lw	a5,-168(s0)
204049e0:	0407a703          	lw	a4,64(a5)
204049e4:	f8c40793          	addi	a5,s0,-116
204049e8:	00078593          	mv	a1,a5
204049ec:	f5842503          	lw	a0,-168(s0)
204049f0:	000700e7          	jalr	a4
204049f4:	00050793          	mv	a5,a0
204049f8:	02078c63          	beqz	a5,20404a30 <TVMGraphExecutorGraphAttr_Load+0x5a4>
        fprintf(stderr, "error determing list_str length\n");
204049fc:	5fbfc797          	auipc	a5,0x5fbfc
20404a00:	03c78793          	addi	a5,a5,60 # 80000a38 <_impure_ptr>
20404a04:	0007a783          	lw	a5,0(a5)
20404a08:	00c7a783          	lw	a5,12(a5)
20404a0c:	00078693          	mv	a3,a5
20404a10:	02000613          	li	a2,32
20404a14:	00100593          	li	a1,1
20404a18:	0001b517          	auipc	a0,0x1b
20404a1c:	64850513          	addi	a0,a0,1608 # 20420060 <__func__.3846+0x378>
20404a20:	4840e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404a24:	fff00793          	li	a5,-1
20404a28:	fef42623          	sw	a5,-20(s0)
        break;
20404a2c:	37d0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
20404a30:	00100793          	li	a5,1
20404a34:	f8f42223          	sw	a5,-124(s0)
20404a38:	f8042423          	sw	zero,-120(s0)
      tvm_crt_error_t err =
          TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev, (void**)&attr->storage_id);
20404a3c:	f8c42783          	lw	a5,-116(s0)
20404a40:	00279713          	slli	a4,a5,0x2
20404a44:	f5c42783          	lw	a5,-164(s0)
20404a48:	00478793          	addi	a5,a5,4
      tvm_crt_error_t err =
20404a4c:	00078693          	mv	a3,a5
20404a50:	f8442583          	lw	a1,-124(s0)
20404a54:	f8842603          	lw	a2,-120(s0)
20404a58:	00070513          	mv	a0,a4
20404a5c:	fa1fb0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20404a60:	fca42023          	sw	a0,-64(s0)
      if (err != kTvmErrorNoError) {
20404a64:	fc042783          	lw	a5,-64(s0)
20404a68:	02078863          	beqz	a5,20404a98 <TVMGraphExecutorGraphAttr_Load+0x60c>
        fprintf(stderr, "memory allocate error: %08x", err);
20404a6c:	5fbfc797          	auipc	a5,0x5fbfc
20404a70:	fcc78793          	addi	a5,a5,-52 # 80000a38 <_impure_ptr>
20404a74:	0007a783          	lw	a5,0(a5)
20404a78:	00c7a783          	lw	a5,12(a5)
20404a7c:	fc042603          	lw	a2,-64(s0)
20404a80:	0001b597          	auipc	a1,0x1b
20404a84:	51058593          	addi	a1,a1,1296 # 2041ff90 <__func__.3846+0x2a8>
20404a88:	00078513          	mv	a0,a5
20404a8c:	37e0e0ef          	jal	ra,20412e0a <fprintf>
        return -1;
20404a90:	fff00793          	li	a5,-1
20404a94:	3550006f          	j	204055e8 <TVMGraphExecutorGraphAttr_Load+0x115c>
      }
      storage_id_count = 0;
20404a98:	fe042223          	sw	zero,-28(s0)
      while (reader->NextArrayItem(reader)) {
20404a9c:	07c0006f          	j	20404b18 <TVMGraphExecutorGraphAttr_Load+0x68c>
        if (storage_id_count == num_items) {
20404aa0:	f8c42783          	lw	a5,-116(s0)
20404aa4:	fe442703          	lw	a4,-28(s0)
20404aa8:	02f71e63          	bne	a4,a5,20404ae4 <TVMGraphExecutorGraphAttr_Load+0x658>
          fprintf(stderr, "array too big\n");
20404aac:	5fbfc797          	auipc	a5,0x5fbfc
20404ab0:	f8c78793          	addi	a5,a5,-116 # 80000a38 <_impure_ptr>
20404ab4:	0007a783          	lw	a5,0(a5)
20404ab8:	00c7a783          	lw	a5,12(a5)
20404abc:	00078693          	mv	a3,a5
20404ac0:	00e00613          	li	a2,14
20404ac4:	00100593          	li	a1,1
20404ac8:	0001b517          	auipc	a0,0x1b
20404acc:	5bc50513          	addi	a0,a0,1468 # 20420084 <__func__.3846+0x39c>
20404ad0:	3d40e0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20404ad4:	fff00793          	li	a5,-1
20404ad8:	fef42623          	sw	a5,-20(s0)
          return status;
20404adc:	fec42783          	lw	a5,-20(s0)
20404ae0:	3090006f          	j	204055e8 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        reader->ReadUnsignedInteger(reader, &(attr->storage_id[storage_id_count]));
20404ae4:	f5842783          	lw	a5,-168(s0)
20404ae8:	0247a683          	lw	a3,36(a5)
20404aec:	f5c42783          	lw	a5,-164(s0)
20404af0:	0047a703          	lw	a4,4(a5)
20404af4:	fe442783          	lw	a5,-28(s0)
20404af8:	00279793          	slli	a5,a5,0x2
20404afc:	00f707b3          	add	a5,a4,a5
20404b00:	00078593          	mv	a1,a5
20404b04:	f5842503          	lw	a0,-168(s0)
20404b08:	000680e7          	jalr	a3
        storage_id_count++;
20404b0c:	fe442783          	lw	a5,-28(s0)
20404b10:	00178793          	addi	a5,a5,1
20404b14:	fef42223          	sw	a5,-28(s0)
      while (reader->NextArrayItem(reader)) {
20404b18:	f5842783          	lw	a5,-168(s0)
20404b1c:	03c7a783          	lw	a5,60(a5)
20404b20:	f5842503          	lw	a0,-168(s0)
20404b24:	000780e7          	jalr	a5
20404b28:	00050793          	mv	a5,a0
20404b2c:	f6079ae3          	bnez	a5,20404aa0 <TVMGraphExecutorGraphAttr_Load+0x614>
      }
      if (reader->NextArrayItem(reader)) {
20404b30:	f5842783          	lw	a5,-168(s0)
20404b34:	03c7a783          	lw	a5,60(a5)
20404b38:	f5842503          	lw	a0,-168(s0)
20404b3c:	000780e7          	jalr	a5
20404b40:	00050793          	mv	a5,a0
20404b44:	02078e63          	beqz	a5,20404b80 <TVMGraphExecutorGraphAttr_Load+0x6f4>
        fprintf(stderr, "Invalid json format\n");
20404b48:	5fbfc797          	auipc	a5,0x5fbfc
20404b4c:	ef078793          	addi	a5,a5,-272 # 80000a38 <_impure_ptr>
20404b50:	0007a783          	lw	a5,0(a5)
20404b54:	00c7a783          	lw	a5,12(a5)
20404b58:	00078693          	mv	a3,a5
20404b5c:	01400613          	li	a2,20
20404b60:	00100593          	li	a1,1
20404b64:	0001b517          	auipc	a0,0x1b
20404b68:	4bc50513          	addi	a0,a0,1212 # 20420020 <__func__.3846+0x338>
20404b6c:	3380e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404b70:	fff00793          	li	a5,-1
20404b74:	fef42623          	sw	a5,-20(s0)
        break;
20404b78:	00000013          	nop
20404b7c:	22d0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      bitmask |= 2;
20404b80:	fe842783          	lw	a5,-24(s0)
20404b84:	0027e793          	ori	a5,a5,2
20404b88:	fef42423          	sw	a5,-24(s0)
20404b8c:	1f50006f          	j	20405580 <TVMGraphExecutorGraphAttr_Load+0x10f4>
    } else if (!strcmp(key, "shape")) {
20404b90:	fac40793          	addi	a5,s0,-84
20404b94:	0001b597          	auipc	a1,0x1b
20404b98:	56058593          	addi	a1,a1,1376 # 204200f4 <__func__.3846+0x40c>
20404b9c:	00078513          	mv	a0,a5
20404ba0:	68a0e0ef          	jal	ra,2041322a <strcmp>
20404ba4:	00050793          	mv	a5,a0
20404ba8:	46079c63          	bnez	a5,20405020 <TVMGraphExecutorGraphAttr_Load+0xb94>
      reader->BeginArray(reader);
20404bac:	f5842783          	lw	a5,-168(s0)
20404bb0:	0307a783          	lw	a5,48(a5)
20404bb4:	f5842503          	lw	a0,-168(s0)
20404bb8:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20404bbc:	f5842783          	lw	a5,-168(s0)
20404bc0:	03c7a783          	lw	a5,60(a5)
20404bc4:	f5842503          	lw	a0,-168(s0)
20404bc8:	000780e7          	jalr	a5
20404bcc:	00050793          	mv	a5,a0
20404bd0:	02079c63          	bnez	a5,20404c08 <TVMGraphExecutorGraphAttr_Load+0x77c>
        fprintf(stderr, "Invalid json format\n");
20404bd4:	5fbfc797          	auipc	a5,0x5fbfc
20404bd8:	e6478793          	addi	a5,a5,-412 # 80000a38 <_impure_ptr>
20404bdc:	0007a783          	lw	a5,0(a5)
20404be0:	00c7a783          	lw	a5,12(a5)
20404be4:	00078693          	mv	a3,a5
20404be8:	01400613          	li	a2,20
20404bec:	00100593          	li	a1,1
20404bf0:	0001b517          	auipc	a0,0x1b
20404bf4:	43050513          	addi	a0,a0,1072 # 20420020 <__func__.3846+0x338>
20404bf8:	2ac0e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404bfc:	fff00793          	li	a5,-1
20404c00:	fef42623          	sw	a5,-20(s0)
        break;
20404c04:	1a50006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20404c08:	f5842783          	lw	a5,-168(s0)
20404c0c:	02c7a703          	lw	a4,44(a5)
20404c10:	f9c40793          	addi	a5,s0,-100
20404c14:	01000613          	li	a2,16
20404c18:	00078593          	mv	a1,a5
20404c1c:	f5842503          	lw	a0,-168(s0)
20404c20:	000700e7          	jalr	a4
20404c24:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20404c28:	fec42783          	lw	a5,-20(s0)
20404c2c:	02078863          	beqz	a5,20404c5c <TVMGraphExecutorGraphAttr_Load+0x7d0>
        fprintf(stderr, "error reading shape array item\n");
20404c30:	5fbfc797          	auipc	a5,0x5fbfc
20404c34:	e0878793          	addi	a5,a5,-504 # 80000a38 <_impure_ptr>
20404c38:	0007a783          	lw	a5,0(a5)
20404c3c:	00c7a783          	lw	a5,12(a5)
20404c40:	00078693          	mv	a3,a5
20404c44:	01f00613          	li	a2,31
20404c48:	00100593          	li	a1,1
20404c4c:	0001b517          	auipc	a0,0x1b
20404c50:	4b050513          	addi	a0,a0,1200 # 204200fc <__func__.3846+0x414>
20404c54:	2500e0ef          	jal	ra,20412ea4 <fwrite>
        break;
20404c58:	1510006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (strcmp(type, "list_shape")) {
20404c5c:	f9c40793          	addi	a5,s0,-100
20404c60:	0001b597          	auipc	a1,0x1b
20404c64:	4bc58593          	addi	a1,a1,1212 # 2042011c <__func__.3846+0x434>
20404c68:	00078513          	mv	a0,a5
20404c6c:	5be0e0ef          	jal	ra,2041322a <strcmp>
20404c70:	00050793          	mv	a5,a0
20404c74:	02078c63          	beqz	a5,20404cac <TVMGraphExecutorGraphAttr_Load+0x820>
        fprintf(stderr, "Invalid json format\n");
20404c78:	5fbfc797          	auipc	a5,0x5fbfc
20404c7c:	dc078793          	addi	a5,a5,-576 # 80000a38 <_impure_ptr>
20404c80:	0007a783          	lw	a5,0(a5)
20404c84:	00c7a783          	lw	a5,12(a5)
20404c88:	00078693          	mv	a3,a5
20404c8c:	01400613          	li	a2,20
20404c90:	00100593          	li	a1,1
20404c94:	0001b517          	auipc	a0,0x1b
20404c98:	38c50513          	addi	a0,a0,908 # 20420020 <__func__.3846+0x338>
20404c9c:	2080e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404ca0:	fff00793          	li	a5,-1
20404ca4:	fef42623          	sw	a5,-20(s0)
        break;
20404ca8:	1010006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
20404cac:	f5842783          	lw	a5,-168(s0)
20404cb0:	03c7a783          	lw	a5,60(a5)
20404cb4:	f5842503          	lw	a0,-168(s0)
20404cb8:	000780e7          	jalr	a5
20404cbc:	00050793          	mv	a5,a0
20404cc0:	02079c63          	bnez	a5,20404cf8 <TVMGraphExecutorGraphAttr_Load+0x86c>
        fprintf(stderr, "Invalid json format\n");
20404cc4:	5fbfc797          	auipc	a5,0x5fbfc
20404cc8:	d7478793          	addi	a5,a5,-652 # 80000a38 <_impure_ptr>
20404ccc:	0007a783          	lw	a5,0(a5)
20404cd0:	00c7a783          	lw	a5,12(a5)
20404cd4:	00078693          	mv	a3,a5
20404cd8:	01400613          	li	a2,20
20404cdc:	00100593          	li	a1,1
20404ce0:	0001b517          	auipc	a0,0x1b
20404ce4:	34050513          	addi	a0,a0,832 # 20420020 <__func__.3846+0x338>
20404ce8:	1bc0e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404cec:	fff00793          	li	a5,-1
20404cf0:	fef42623          	sw	a5,-20(s0)
        break;
20404cf4:	0b50006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
20404cf8:	f5842783          	lw	a5,-168(s0)
20404cfc:	0307a783          	lw	a5,48(a5)
20404d00:	f5842503          	lw	a0,-168(s0)
20404d04:	000780e7          	jalr	a5
      size_t num_items = 0;
20404d08:	f8042023          	sw	zero,-128(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20404d0c:	f5842783          	lw	a5,-168(s0)
20404d10:	0407a703          	lw	a4,64(a5)
20404d14:	f8040793          	addi	a5,s0,-128
20404d18:	00078593          	mv	a1,a5
20404d1c:	f5842503          	lw	a0,-168(s0)
20404d20:	000700e7          	jalr	a4
20404d24:	00050793          	mv	a5,a0
20404d28:	02078c63          	beqz	a5,20404d60 <TVMGraphExecutorGraphAttr_Load+0x8d4>
        fprintf(stderr, "error determing list_str length\n");
20404d2c:	5fbfc797          	auipc	a5,0x5fbfc
20404d30:	d0c78793          	addi	a5,a5,-756 # 80000a38 <_impure_ptr>
20404d34:	0007a783          	lw	a5,0(a5)
20404d38:	00c7a783          	lw	a5,12(a5)
20404d3c:	00078693          	mv	a3,a5
20404d40:	02000613          	li	a2,32
20404d44:	00100593          	li	a1,1
20404d48:	0001b517          	auipc	a0,0x1b
20404d4c:	31850513          	addi	a0,a0,792 # 20420060 <__func__.3846+0x378>
20404d50:	1540e0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20404d54:	fff00793          	li	a5,-1
20404d58:	fef42623          	sw	a5,-20(s0)
        break;
20404d5c:	04d0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
20404d60:	00100793          	li	a5,1
20404d64:	f6f42c23          	sw	a5,-136(s0)
20404d68:	f6042e23          	sw	zero,-132(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20404d6c:	f8042703          	lw	a4,-128(s0)
20404d70:	00070793          	mv	a5,a4
20404d74:	00179793          	slli	a5,a5,0x1
20404d78:	00e787b3          	add	a5,a5,a4
20404d7c:	00479793          	slli	a5,a5,0x4
20404d80:	00078713          	mv	a4,a5
          sizeof(int64_t) * TVM_CRT_MAX_NDIM * num_items, dev, (void**)&attr->shape);
20404d84:	f5c42783          	lw	a5,-164(s0)
20404d88:	01478793          	addi	a5,a5,20
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20404d8c:	00078693          	mv	a3,a5
20404d90:	f7842583          	lw	a1,-136(s0)
20404d94:	f7c42603          	lw	a2,-132(s0)
20404d98:	00070513          	mv	a0,a4
20404d9c:	c61fb0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20404da0:	fca42423          	sw	a0,-56(s0)
      if (err != kTvmErrorNoError) {
20404da4:	fc842783          	lw	a5,-56(s0)
20404da8:	02078a63          	beqz	a5,20404ddc <TVMGraphExecutorGraphAttr_Load+0x950>
        fprintf(stderr, "memory allocate error: %08x", err);
20404dac:	5fbfc797          	auipc	a5,0x5fbfc
20404db0:	c8c78793          	addi	a5,a5,-884 # 80000a38 <_impure_ptr>
20404db4:	0007a783          	lw	a5,0(a5)
20404db8:	00c7a783          	lw	a5,12(a5)
20404dbc:	fc842603          	lw	a2,-56(s0)
20404dc0:	0001b597          	auipc	a1,0x1b
20404dc4:	1d058593          	addi	a1,a1,464 # 2041ff90 <__func__.3846+0x2a8>
20404dc8:	00078513          	mv	a0,a5
20404dcc:	03e0e0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20404dd0:	fff00793          	li	a5,-1
20404dd4:	fef42623          	sw	a5,-20(s0)
        break;
20404dd8:	7d00006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev, (void**)&attr->ndim);
20404ddc:	f8042783          	lw	a5,-128(s0)
20404de0:	00279713          	slli	a4,a5,0x2
20404de4:	f5c42783          	lw	a5,-164(s0)
20404de8:	01878793          	addi	a5,a5,24
20404dec:	00078693          	mv	a3,a5
20404df0:	f7842583          	lw	a1,-136(s0)
20404df4:	f7c42603          	lw	a2,-132(s0)
20404df8:	00070513          	mv	a0,a4
20404dfc:	c01fb0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20404e00:	fca42423          	sw	a0,-56(s0)
      if (err != kTvmErrorNoError) {
20404e04:	fc842783          	lw	a5,-56(s0)
20404e08:	02078a63          	beqz	a5,20404e3c <TVMGraphExecutorGraphAttr_Load+0x9b0>
        fprintf(stderr, "memory allocate error: %08x", err);
20404e0c:	5fbfc797          	auipc	a5,0x5fbfc
20404e10:	c2c78793          	addi	a5,a5,-980 # 80000a38 <_impure_ptr>
20404e14:	0007a783          	lw	a5,0(a5)
20404e18:	00c7a783          	lw	a5,12(a5)
20404e1c:	fc842603          	lw	a2,-56(s0)
20404e20:	0001b597          	auipc	a1,0x1b
20404e24:	17058593          	addi	a1,a1,368 # 2041ff90 <__func__.3846+0x2a8>
20404e28:	00078513          	mv	a0,a5
20404e2c:	7df0d0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20404e30:	fff00793          	li	a5,-1
20404e34:	fef42623          	sw	a5,-20(s0)
        break;
20404e38:	7700006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      shape_count = 0;
20404e3c:	fc042e23          	sw	zero,-36(s0)
      while (reader->NextArrayItem(reader)) {
20404e40:	15c0006f          	j	20404f9c <TVMGraphExecutorGraphAttr_Load+0xb10>
        if (shape_count == num_items) {
20404e44:	f8042783          	lw	a5,-128(s0)
20404e48:	fdc42703          	lw	a4,-36(s0)
20404e4c:	02f71e63          	bne	a4,a5,20404e88 <TVMGraphExecutorGraphAttr_Load+0x9fc>
          fprintf(stderr, "array too big\n");
20404e50:	5fbfc797          	auipc	a5,0x5fbfc
20404e54:	be878793          	addi	a5,a5,-1048 # 80000a38 <_impure_ptr>
20404e58:	0007a783          	lw	a5,0(a5)
20404e5c:	00c7a783          	lw	a5,12(a5)
20404e60:	00078693          	mv	a3,a5
20404e64:	00e00613          	li	a2,14
20404e68:	00100593          	li	a1,1
20404e6c:	0001b517          	auipc	a0,0x1b
20404e70:	21850513          	addi	a0,a0,536 # 20420084 <__func__.3846+0x39c>
20404e74:	0300e0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20404e78:	fff00793          	li	a5,-1
20404e7c:	fef42623          	sw	a5,-20(s0)
          return status;
20404e80:	fec42783          	lw	a5,-20(s0)
20404e84:	7640006f          	j	204055e8 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        reader->BeginArray(reader);
20404e88:	f5842783          	lw	a5,-168(s0)
20404e8c:	0307a783          	lw	a5,48(a5)
20404e90:	f5842503          	lw	a0,-168(s0)
20404e94:	000780e7          	jalr	a5
        int64_t* attr_shape_ptr = attr->shape + shape_count * TVM_CRT_MAX_NDIM;
20404e98:	f5c42783          	lw	a5,-164(s0)
20404e9c:	0147a683          	lw	a3,20(a5)
20404ea0:	fdc42703          	lw	a4,-36(s0)
20404ea4:	00070793          	mv	a5,a4
20404ea8:	00179793          	slli	a5,a5,0x1
20404eac:	00e787b3          	add	a5,a5,a4
20404eb0:	00479793          	slli	a5,a5,0x4
20404eb4:	00f687b3          	add	a5,a3,a5
20404eb8:	fcf42223          	sw	a5,-60(s0)
        reader->ReadInteger(reader, attr_shape_ptr + 0);
20404ebc:	f5842783          	lw	a5,-168(s0)
20404ec0:	0287a783          	lw	a5,40(a5)
20404ec4:	fc442583          	lw	a1,-60(s0)
20404ec8:	f5842503          	lw	a0,-168(s0)
20404ecc:	000780e7          	jalr	a5
        uint32_t ndim = 1;
20404ed0:	00100793          	li	a5,1
20404ed4:	fcf42a23          	sw	a5,-44(s0)
        if (reader->NextArrayItem(reader)) {
20404ed8:	f5842783          	lw	a5,-168(s0)
20404edc:	03c7a783          	lw	a5,60(a5)
20404ee0:	f5842503          	lw	a0,-168(s0)
20404ee4:	000780e7          	jalr	a5
20404ee8:	00050793          	mv	a5,a0
20404eec:	08078463          	beqz	a5,20404f74 <TVMGraphExecutorGraphAttr_Load+0xae8>
          for (ndim = 1; ndim < TVM_CRT_MAX_NDIM; ndim++) {
20404ef0:	00100793          	li	a5,1
20404ef4:	fcf42a23          	sw	a5,-44(s0)
20404ef8:	04c0006f          	j	20404f44 <TVMGraphExecutorGraphAttr_Load+0xab8>
            if (reader->NextArrayItem(reader)) {
20404efc:	f5842783          	lw	a5,-168(s0)
20404f00:	03c7a783          	lw	a5,60(a5)
20404f04:	f5842503          	lw	a0,-168(s0)
20404f08:	000780e7          	jalr	a5
20404f0c:	00050793          	mv	a5,a0
20404f10:	04078263          	beqz	a5,20404f54 <TVMGraphExecutorGraphAttr_Load+0xac8>
              reader->ReadInteger(reader, attr_shape_ptr + ndim);
20404f14:	f5842783          	lw	a5,-168(s0)
20404f18:	0287a683          	lw	a3,40(a5)
20404f1c:	fd442783          	lw	a5,-44(s0)
20404f20:	00379793          	slli	a5,a5,0x3
20404f24:	fc442703          	lw	a4,-60(s0)
20404f28:	00f707b3          	add	a5,a4,a5
20404f2c:	00078593          	mv	a1,a5
20404f30:	f5842503          	lw	a0,-168(s0)
20404f34:	000680e7          	jalr	a3
          for (ndim = 1; ndim < TVM_CRT_MAX_NDIM; ndim++) {
20404f38:	fd442783          	lw	a5,-44(s0)
20404f3c:	00178793          	addi	a5,a5,1
20404f40:	fcf42a23          	sw	a5,-44(s0)
20404f44:	fd442703          	lw	a4,-44(s0)
20404f48:	00500793          	li	a5,5
20404f4c:	fae7f8e3          	bleu	a4,a5,20404efc <TVMGraphExecutorGraphAttr_Load+0xa70>
20404f50:	0080006f          	j	20404f58 <TVMGraphExecutorGraphAttr_Load+0xacc>
            } else {
              break;
20404f54:	00000013          	nop
            }
          }
          if (ndim == TVM_CRT_MAX_NDIM) {
20404f58:	fd442703          	lw	a4,-44(s0)
20404f5c:	00600793          	li	a5,6
20404f60:	00f71a63          	bne	a4,a5,20404f74 <TVMGraphExecutorGraphAttr_Load+0xae8>
            reader->NextArrayItem(reader);
20404f64:	f5842783          	lw	a5,-168(s0)
20404f68:	03c7a783          	lw	a5,60(a5)
20404f6c:	f5842503          	lw	a0,-168(s0)
20404f70:	000780e7          	jalr	a5
          }
        }
        attr->ndim[shape_count] = ndim;
20404f74:	f5c42783          	lw	a5,-164(s0)
20404f78:	0187a703          	lw	a4,24(a5)
20404f7c:	fdc42783          	lw	a5,-36(s0)
20404f80:	00279793          	slli	a5,a5,0x2
20404f84:	00f707b3          	add	a5,a4,a5
20404f88:	fd442703          	lw	a4,-44(s0)
20404f8c:	00e7a023          	sw	a4,0(a5)
        shape_count++;
20404f90:	fdc42783          	lw	a5,-36(s0)
20404f94:	00178793          	addi	a5,a5,1
20404f98:	fcf42e23          	sw	a5,-36(s0)
      while (reader->NextArrayItem(reader)) {
20404f9c:	f5842783          	lw	a5,-168(s0)
20404fa0:	03c7a783          	lw	a5,60(a5)
20404fa4:	f5842503          	lw	a0,-168(s0)
20404fa8:	000780e7          	jalr	a5
20404fac:	00050793          	mv	a5,a0
20404fb0:	e8079ae3          	bnez	a5,20404e44 <TVMGraphExecutorGraphAttr_Load+0x9b8>
      }
      attr->shape_count = shape_count;
20404fb4:	f5c42783          	lw	a5,-164(s0)
20404fb8:	fdc42703          	lw	a4,-36(s0)
20404fbc:	00e7ae23          	sw	a4,28(a5)
      if (reader->NextArrayItem(reader)) {
20404fc0:	f5842783          	lw	a5,-168(s0)
20404fc4:	03c7a783          	lw	a5,60(a5)
20404fc8:	f5842503          	lw	a0,-168(s0)
20404fcc:	000780e7          	jalr	a5
20404fd0:	00050793          	mv	a5,a0
20404fd4:	02078e63          	beqz	a5,20405010 <TVMGraphExecutorGraphAttr_Load+0xb84>
        fprintf(stderr, "Invalid json format\n");
20404fd8:	5fbfc797          	auipc	a5,0x5fbfc
20404fdc:	a6078793          	addi	a5,a5,-1440 # 80000a38 <_impure_ptr>
20404fe0:	0007a783          	lw	a5,0(a5)
20404fe4:	00c7a783          	lw	a5,12(a5)
20404fe8:	00078693          	mv	a3,a5
20404fec:	01400613          	li	a2,20
20404ff0:	00100593          	li	a1,1
20404ff4:	0001b517          	auipc	a0,0x1b
20404ff8:	02c50513          	addi	a0,a0,44 # 20420020 <__func__.3846+0x338>
20404ffc:	6a90d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405000:	fff00793          	li	a5,-1
20405004:	fef42623          	sw	a5,-20(s0)
        break;
20405008:	00000013          	nop
2040500c:	59c0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      bitmask |= 4;
20405010:	fe842783          	lw	a5,-24(s0)
20405014:	0047e793          	ori	a5,a5,4
20405018:	fef42423          	sw	a5,-24(s0)
2040501c:	5640006f          	j	20405580 <TVMGraphExecutorGraphAttr_Load+0x10f4>
    } else if (!strcmp(key, "device_index")) {
20405020:	fac40793          	addi	a5,s0,-84
20405024:	0001b597          	auipc	a1,0x1b
20405028:	10458593          	addi	a1,a1,260 # 20420128 <__func__.3846+0x440>
2040502c:	00078513          	mv	a0,a5
20405030:	1fa0e0ef          	jal	ra,2041322a <strcmp>
20405034:	00050793          	mv	a5,a0
20405038:	30079663          	bnez	a5,20405344 <TVMGraphExecutorGraphAttr_Load+0xeb8>
      reader->BeginArray(reader);
2040503c:	f5842783          	lw	a5,-168(s0)
20405040:	0307a783          	lw	a5,48(a5)
20405044:	f5842503          	lw	a0,-168(s0)
20405048:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
2040504c:	f5842783          	lw	a5,-168(s0)
20405050:	03c7a783          	lw	a5,60(a5)
20405054:	f5842503          	lw	a0,-168(s0)
20405058:	000780e7          	jalr	a5
2040505c:	00050793          	mv	a5,a0
20405060:	02079c63          	bnez	a5,20405098 <TVMGraphExecutorGraphAttr_Load+0xc0c>
        fprintf(stderr, "Invalid json format\n");
20405064:	5fbfc797          	auipc	a5,0x5fbfc
20405068:	9d478793          	addi	a5,a5,-1580 # 80000a38 <_impure_ptr>
2040506c:	0007a783          	lw	a5,0(a5)
20405070:	00c7a783          	lw	a5,12(a5)
20405074:	00078693          	mv	a3,a5
20405078:	01400613          	li	a2,20
2040507c:	00100593          	li	a1,1
20405080:	0001b517          	auipc	a0,0x1b
20405084:	fa050513          	addi	a0,a0,-96 # 20420020 <__func__.3846+0x338>
20405088:	61d0d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
2040508c:	fff00793          	li	a5,-1
20405090:	fef42623          	sw	a5,-20(s0)
        break;
20405094:	5140006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20405098:	f5842783          	lw	a5,-168(s0)
2040509c:	02c7a703          	lw	a4,44(a5)
204050a0:	f9c40793          	addi	a5,s0,-100
204050a4:	01000613          	li	a2,16
204050a8:	00078593          	mv	a1,a5
204050ac:	f5842503          	lw	a0,-168(s0)
204050b0:	000700e7          	jalr	a4
204050b4:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
204050b8:	fec42783          	lw	a5,-20(s0)
204050bc:	02078863          	beqz	a5,204050ec <TVMGraphExecutorGraphAttr_Load+0xc60>
        fprintf(stderr, "error reading device_index array item");
204050c0:	5fbfc797          	auipc	a5,0x5fbfc
204050c4:	97878793          	addi	a5,a5,-1672 # 80000a38 <_impure_ptr>
204050c8:	0007a783          	lw	a5,0(a5)
204050cc:	00c7a783          	lw	a5,12(a5)
204050d0:	00078693          	mv	a3,a5
204050d4:	02500613          	li	a2,37
204050d8:	00100593          	li	a1,1
204050dc:	0001b517          	auipc	a0,0x1b
204050e0:	fe450513          	addi	a0,a0,-28 # 204200c0 <__func__.3846+0x3d8>
204050e4:	5c10d0ef          	jal	ra,20412ea4 <fwrite>
        break;
204050e8:	4c00006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (strcmp(type, "list_int")) {
204050ec:	f9c40793          	addi	a5,s0,-100
204050f0:	0001b597          	auipc	a1,0x1b
204050f4:	ff858593          	addi	a1,a1,-8 # 204200e8 <__func__.3846+0x400>
204050f8:	00078513          	mv	a0,a5
204050fc:	12e0e0ef          	jal	ra,2041322a <strcmp>
20405100:	00050793          	mv	a5,a0
20405104:	02078c63          	beqz	a5,2040513c <TVMGraphExecutorGraphAttr_Load+0xcb0>
        fprintf(stderr, "Invalid json format\n");
20405108:	5fbfc797          	auipc	a5,0x5fbfc
2040510c:	93078793          	addi	a5,a5,-1744 # 80000a38 <_impure_ptr>
20405110:	0007a783          	lw	a5,0(a5)
20405114:	00c7a783          	lw	a5,12(a5)
20405118:	00078693          	mv	a3,a5
2040511c:	01400613          	li	a2,20
20405120:	00100593          	li	a1,1
20405124:	0001b517          	auipc	a0,0x1b
20405128:	efc50513          	addi	a0,a0,-260 # 20420020 <__func__.3846+0x338>
2040512c:	5790d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405130:	fff00793          	li	a5,-1
20405134:	fef42623          	sw	a5,-20(s0)
        break;
20405138:	4700006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
2040513c:	f5842783          	lw	a5,-168(s0)
20405140:	03c7a783          	lw	a5,60(a5)
20405144:	f5842503          	lw	a0,-168(s0)
20405148:	000780e7          	jalr	a5
2040514c:	00050793          	mv	a5,a0
20405150:	02079c63          	bnez	a5,20405188 <TVMGraphExecutorGraphAttr_Load+0xcfc>
        fprintf(stderr, "Invalid json format\n");
20405154:	5fbfc797          	auipc	a5,0x5fbfc
20405158:	8e478793          	addi	a5,a5,-1820 # 80000a38 <_impure_ptr>
2040515c:	0007a783          	lw	a5,0(a5)
20405160:	00c7a783          	lw	a5,12(a5)
20405164:	00078693          	mv	a3,a5
20405168:	01400613          	li	a2,20
2040516c:	00100593          	li	a1,1
20405170:	0001b517          	auipc	a0,0x1b
20405174:	eb050513          	addi	a0,a0,-336 # 20420020 <__func__.3846+0x338>
20405178:	52d0d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
2040517c:	fff00793          	li	a5,-1
20405180:	fef42623          	sw	a5,-20(s0)
        break;
20405184:	4240006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
20405188:	f5842783          	lw	a5,-168(s0)
2040518c:	0307a783          	lw	a5,48(a5)
20405190:	f5842503          	lw	a0,-168(s0)
20405194:	000780e7          	jalr	a5
      size_t num_items = 0;
20405198:	f6042a23          	sw	zero,-140(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
2040519c:	f5842783          	lw	a5,-168(s0)
204051a0:	0407a703          	lw	a4,64(a5)
204051a4:	f7440793          	addi	a5,s0,-140
204051a8:	00078593          	mv	a1,a5
204051ac:	f5842503          	lw	a0,-168(s0)
204051b0:	000700e7          	jalr	a4
204051b4:	00050793          	mv	a5,a0
204051b8:	02078c63          	beqz	a5,204051f0 <TVMGraphExecutorGraphAttr_Load+0xd64>
        fprintf(stderr, "error determing list_int length\n");
204051bc:	5fbfc797          	auipc	a5,0x5fbfc
204051c0:	87c78793          	addi	a5,a5,-1924 # 80000a38 <_impure_ptr>
204051c4:	0007a783          	lw	a5,0(a5)
204051c8:	00c7a783          	lw	a5,12(a5)
204051cc:	00078693          	mv	a3,a5
204051d0:	02000613          	li	a2,32
204051d4:	00100593          	li	a1,1
204051d8:	0001b517          	auipc	a0,0x1b
204051dc:	f6050513          	addi	a0,a0,-160 # 20420138 <__func__.3846+0x450>
204051e0:	4c50d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
204051e4:	fff00793          	li	a5,-1
204051e8:	fef42623          	sw	a5,-20(s0)
        break;
204051ec:	3bc0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
204051f0:	00100793          	li	a5,1
204051f4:	f6f42623          	sw	a5,-148(s0)
204051f8:	f6042823          	sw	zero,-144(s0)
      tvm_crt_error_t err =
          TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev, (void**)&attr->device_index);
204051fc:	f7442783          	lw	a5,-140(s0)
20405200:	00279713          	slli	a4,a5,0x2
20405204:	f5c42783          	lw	a5,-164(s0)
20405208:	00878793          	addi	a5,a5,8
      tvm_crt_error_t err =
2040520c:	00078693          	mv	a3,a5
20405210:	f6c42583          	lw	a1,-148(s0)
20405214:	f7042603          	lw	a2,-144(s0)
20405218:	00070513          	mv	a0,a4
2040521c:	fe0fb0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20405220:	fca42623          	sw	a0,-52(s0)
      if (err != kTvmErrorNoError) {
20405224:	fcc42783          	lw	a5,-52(s0)
20405228:	02078a63          	beqz	a5,2040525c <TVMGraphExecutorGraphAttr_Load+0xdd0>
        fprintf(stderr, "memory allocate error: %08x", err);
2040522c:	5fbfc797          	auipc	a5,0x5fbfc
20405230:	80c78793          	addi	a5,a5,-2036 # 80000a38 <_impure_ptr>
20405234:	0007a783          	lw	a5,0(a5)
20405238:	00c7a783          	lw	a5,12(a5)
2040523c:	fcc42603          	lw	a2,-52(s0)
20405240:	0001b597          	auipc	a1,0x1b
20405244:	d5058593          	addi	a1,a1,-688 # 2041ff90 <__func__.3846+0x2a8>
20405248:	00078513          	mv	a0,a5
2040524c:	3bf0d0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20405250:	fff00793          	li	a5,-1
20405254:	fef42623          	sw	a5,-20(s0)
        break;
20405258:	3500006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      device_index_count = 0;
2040525c:	fc042c23          	sw	zero,-40(s0)
      while (reader->NextArrayItem(reader)) {
20405260:	07c0006f          	j	204052dc <TVMGraphExecutorGraphAttr_Load+0xe50>
        if (device_index_count == num_items) {
20405264:	f7442783          	lw	a5,-140(s0)
20405268:	fd842703          	lw	a4,-40(s0)
2040526c:	02f71e63          	bne	a4,a5,204052a8 <TVMGraphExecutorGraphAttr_Load+0xe1c>
          fprintf(stderr, "array too big\n");
20405270:	5fbfb797          	auipc	a5,0x5fbfb
20405274:	7c878793          	addi	a5,a5,1992 # 80000a38 <_impure_ptr>
20405278:	0007a783          	lw	a5,0(a5)
2040527c:	00c7a783          	lw	a5,12(a5)
20405280:	00078693          	mv	a3,a5
20405284:	00e00613          	li	a2,14
20405288:	00100593          	li	a1,1
2040528c:	0001b517          	auipc	a0,0x1b
20405290:	df850513          	addi	a0,a0,-520 # 20420084 <__func__.3846+0x39c>
20405294:	4110d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20405298:	fff00793          	li	a5,-1
2040529c:	fef42623          	sw	a5,-20(s0)
          return status;
204052a0:	fec42783          	lw	a5,-20(s0)
204052a4:	3440006f          	j	204055e8 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        reader->ReadUnsignedInteger(reader, &(attr->device_index[device_index_count]));
204052a8:	f5842783          	lw	a5,-168(s0)
204052ac:	0247a683          	lw	a3,36(a5)
204052b0:	f5c42783          	lw	a5,-164(s0)
204052b4:	0087a703          	lw	a4,8(a5)
204052b8:	fd842783          	lw	a5,-40(s0)
204052bc:	00279793          	slli	a5,a5,0x2
204052c0:	00f707b3          	add	a5,a4,a5
204052c4:	00078593          	mv	a1,a5
204052c8:	f5842503          	lw	a0,-168(s0)
204052cc:	000680e7          	jalr	a3
        device_index_count++;
204052d0:	fd842783          	lw	a5,-40(s0)
204052d4:	00178793          	addi	a5,a5,1
204052d8:	fcf42c23          	sw	a5,-40(s0)
      while (reader->NextArrayItem(reader)) {
204052dc:	f5842783          	lw	a5,-168(s0)
204052e0:	03c7a783          	lw	a5,60(a5)
204052e4:	f5842503          	lw	a0,-168(s0)
204052e8:	000780e7          	jalr	a5
204052ec:	00050793          	mv	a5,a0
204052f0:	f6079ae3          	bnez	a5,20405264 <TVMGraphExecutorGraphAttr_Load+0xdd8>
      }
      if (reader->NextArrayItem(reader)) {
204052f4:	f5842783          	lw	a5,-168(s0)
204052f8:	03c7a783          	lw	a5,60(a5)
204052fc:	f5842503          	lw	a0,-168(s0)
20405300:	000780e7          	jalr	a5
20405304:	00050793          	mv	a5,a0
20405308:	26078c63          	beqz	a5,20405580 <TVMGraphExecutorGraphAttr_Load+0x10f4>
        fprintf(stderr, "Invalid json format\n");
2040530c:	5fbfb797          	auipc	a5,0x5fbfb
20405310:	72c78793          	addi	a5,a5,1836 # 80000a38 <_impure_ptr>
20405314:	0007a783          	lw	a5,0(a5)
20405318:	00c7a783          	lw	a5,12(a5)
2040531c:	00078693          	mv	a3,a5
20405320:	01400613          	li	a2,20
20405324:	00100593          	li	a1,1
20405328:	0001b517          	auipc	a0,0x1b
2040532c:	cf850513          	addi	a0,a0,-776 # 20420020 <__func__.3846+0x338>
20405330:	3750d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405334:	fff00793          	li	a5,-1
20405338:	fef42623          	sw	a5,-20(s0)
        break;
2040533c:	00000013          	nop
20405340:	2680006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
    } else {
      reader->BeginArray(reader);
20405344:	f5842783          	lw	a5,-168(s0)
20405348:	0307a783          	lw	a5,48(a5)
2040534c:	f5842503          	lw	a0,-168(s0)
20405350:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20405354:	f5842783          	lw	a5,-168(s0)
20405358:	03c7a783          	lw	a5,60(a5)
2040535c:	f5842503          	lw	a0,-168(s0)
20405360:	000780e7          	jalr	a5
20405364:	00050793          	mv	a5,a0
20405368:	02079c63          	bnez	a5,204053a0 <TVMGraphExecutorGraphAttr_Load+0xf14>
        fprintf(stderr, "Invalid json format\n");
2040536c:	5fbfb797          	auipc	a5,0x5fbfb
20405370:	6cc78793          	addi	a5,a5,1740 # 80000a38 <_impure_ptr>
20405374:	0007a783          	lw	a5,0(a5)
20405378:	00c7a783          	lw	a5,12(a5)
2040537c:	00078693          	mv	a3,a5
20405380:	01400613          	li	a2,20
20405384:	00100593          	li	a1,1
20405388:	0001b517          	auipc	a0,0x1b
2040538c:	c9850513          	addi	a0,a0,-872 # 20420020 <__func__.3846+0x338>
20405390:	3150d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405394:	fff00793          	li	a5,-1
20405398:	fef42623          	sw	a5,-20(s0)
        break;
2040539c:	20c0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->ReadString(reader, type, sizeof(type));
204053a0:	f5842783          	lw	a5,-168(s0)
204053a4:	02c7a703          	lw	a4,44(a5)
204053a8:	f9c40793          	addi	a5,s0,-100
204053ac:	01000613          	li	a2,16
204053b0:	00078593          	mv	a1,a5
204053b4:	f5842503          	lw	a0,-168(s0)
204053b8:	000700e7          	jalr	a4
      if (!strcmp(type, "list_int")) {
204053bc:	f9c40793          	addi	a5,s0,-100
204053c0:	0001b597          	auipc	a1,0x1b
204053c4:	d2858593          	addi	a1,a1,-728 # 204200e8 <__func__.3846+0x400>
204053c8:	00078513          	mv	a0,a5
204053cc:	65f0d0ef          	jal	ra,2041322a <strcmp>
204053d0:	00050793          	mv	a5,a0
204053d4:	0a079463          	bnez	a5,2040547c <TVMGraphExecutorGraphAttr_Load+0xff0>
        if (!(reader->NextArrayItem(reader))) {
204053d8:	f5842783          	lw	a5,-168(s0)
204053dc:	03c7a783          	lw	a5,60(a5)
204053e0:	f5842503          	lw	a0,-168(s0)
204053e4:	000780e7          	jalr	a5
204053e8:	00050793          	mv	a5,a0
204053ec:	02079c63          	bnez	a5,20405424 <TVMGraphExecutorGraphAttr_Load+0xf98>
          fprintf(stderr, "Invalid json format\n");
204053f0:	5fbfb797          	auipc	a5,0x5fbfb
204053f4:	64878793          	addi	a5,a5,1608 # 80000a38 <_impure_ptr>
204053f8:	0007a783          	lw	a5,0(a5)
204053fc:	00c7a783          	lw	a5,12(a5)
20405400:	00078693          	mv	a3,a5
20405404:	01400613          	li	a2,20
20405408:	00100593          	li	a1,1
2040540c:	0001b517          	auipc	a0,0x1b
20405410:	c1450513          	addi	a0,a0,-1004 # 20420020 <__func__.3846+0x338>
20405414:	2910d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20405418:	fff00793          	li	a5,-1
2040541c:	fef42623          	sw	a5,-20(s0)
          break;
20405420:	1880006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
        }
        uint32_t temp_count = 0;
20405424:	fc042823          	sw	zero,-48(s0)
        reader->BeginArray(reader);
20405428:	f5842783          	lw	a5,-168(s0)
2040542c:	0307a783          	lw	a5,48(a5)
20405430:	f5842503          	lw	a0,-168(s0)
20405434:	000780e7          	jalr	a5
        while (reader->NextArrayItem(reader)) {
20405438:	0280006f          	j	20405460 <TVMGraphExecutorGraphAttr_Load+0xfd4>
          uint32_t temp;
          reader->ReadUnsignedInteger(reader, &temp);
2040543c:	f5842783          	lw	a5,-168(s0)
20405440:	0247a703          	lw	a4,36(a5)
20405444:	f6840793          	addi	a5,s0,-152
20405448:	00078593          	mv	a1,a5
2040544c:	f5842503          	lw	a0,-168(s0)
20405450:	000700e7          	jalr	a4
          temp_count++;
20405454:	fd042783          	lw	a5,-48(s0)
20405458:	00178793          	addi	a5,a5,1
2040545c:	fcf42823          	sw	a5,-48(s0)
        while (reader->NextArrayItem(reader)) {
20405460:	f5842783          	lw	a5,-168(s0)
20405464:	03c7a783          	lw	a5,60(a5)
20405468:	f5842503          	lw	a0,-168(s0)
2040546c:	000780e7          	jalr	a5
20405470:	00050793          	mv	a5,a0
20405474:	fc0794e3          	bnez	a5,2040543c <TVMGraphExecutorGraphAttr_Load+0xfb0>
20405478:	0bc0006f          	j	20405534 <TVMGraphExecutorGraphAttr_Load+0x10a8>
        }
      } else if (!strcmp(type, "size_t")) {
2040547c:	f9c40793          	addi	a5,s0,-100
20405480:	0001b597          	auipc	a1,0x1b
20405484:	cdc58593          	addi	a1,a1,-804 # 2042015c <__func__.3846+0x474>
20405488:	00078513          	mv	a0,a5
2040548c:	59f0d0ef          	jal	ra,2041322a <strcmp>
20405490:	00050793          	mv	a5,a0
20405494:	06079663          	bnez	a5,20405500 <TVMGraphExecutorGraphAttr_Load+0x1074>
        if (!(reader->NextArrayItem(reader))) {
20405498:	f5842783          	lw	a5,-168(s0)
2040549c:	03c7a783          	lw	a5,60(a5)
204054a0:	f5842503          	lw	a0,-168(s0)
204054a4:	000780e7          	jalr	a5
204054a8:	00050793          	mv	a5,a0
204054ac:	02079c63          	bnez	a5,204054e4 <TVMGraphExecutorGraphAttr_Load+0x1058>
          fprintf(stderr, "Invalid json format\n");
204054b0:	5fbfb797          	auipc	a5,0x5fbfb
204054b4:	58878793          	addi	a5,a5,1416 # 80000a38 <_impure_ptr>
204054b8:	0007a783          	lw	a5,0(a5)
204054bc:	00c7a783          	lw	a5,12(a5)
204054c0:	00078693          	mv	a3,a5
204054c4:	01400613          	li	a2,20
204054c8:	00100593          	li	a1,1
204054cc:	0001b517          	auipc	a0,0x1b
204054d0:	b5450513          	addi	a0,a0,-1196 # 20420020 <__func__.3846+0x338>
204054d4:	1d10d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
204054d8:	fff00793          	li	a5,-1
204054dc:	fef42623          	sw	a5,-20(s0)
204054e0:	0c80006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
          break;
        }
        uint32_t temp;
        reader->ReadUnsignedInteger(reader, &temp);
204054e4:	f5842783          	lw	a5,-168(s0)
204054e8:	0247a703          	lw	a4,36(a5)
204054ec:	f6440793          	addi	a5,s0,-156
204054f0:	00078593          	mv	a1,a5
204054f4:	f5842503          	lw	a0,-168(s0)
204054f8:	000700e7          	jalr	a4
204054fc:	0380006f          	j	20405534 <TVMGraphExecutorGraphAttr_Load+0x10a8>
      } else {
        fprintf(stderr, "cannot skip graph attr %s", key);
20405500:	5fbfb797          	auipc	a5,0x5fbfb
20405504:	53878793          	addi	a5,a5,1336 # 80000a38 <_impure_ptr>
20405508:	0007a783          	lw	a5,0(a5)
2040550c:	00c7a783          	lw	a5,12(a5)
20405510:	fac40713          	addi	a4,s0,-84
20405514:	00070613          	mv	a2,a4
20405518:	0001b597          	auipc	a1,0x1b
2040551c:	c4c58593          	addi	a1,a1,-948 # 20420164 <__func__.3846+0x47c>
20405520:	00078513          	mv	a0,a5
20405524:	0e70d0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20405528:	fff00793          	li	a5,-1
2040552c:	fef42623          	sw	a5,-20(s0)
        break;
20405530:	0780006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (reader->NextArrayItem(reader)) {
20405534:	f5842783          	lw	a5,-168(s0)
20405538:	03c7a783          	lw	a5,60(a5)
2040553c:	f5842503          	lw	a0,-168(s0)
20405540:	000780e7          	jalr	a5
20405544:	00050793          	mv	a5,a0
20405548:	02078c63          	beqz	a5,20405580 <TVMGraphExecutorGraphAttr_Load+0x10f4>
        fprintf(stderr, "Invalid json format\n");
2040554c:	5fbfb797          	auipc	a5,0x5fbfb
20405550:	4ec78793          	addi	a5,a5,1260 # 80000a38 <_impure_ptr>
20405554:	0007a783          	lw	a5,0(a5)
20405558:	00c7a783          	lw	a5,12(a5)
2040555c:	00078693          	mv	a3,a5
20405560:	01400613          	li	a2,20
20405564:	00100593          	li	a1,1
20405568:	0001b517          	auipc	a0,0x1b
2040556c:	ab850513          	addi	a0,a0,-1352 # 20420020 <__func__.3846+0x338>
20405570:	1350d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405574:	fff00793          	li	a5,-1
20405578:	fef42623          	sw	a5,-20(s0)
        break;
2040557c:	02c0006f          	j	204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20405580:	f5842783          	lw	a5,-168(s0)
20405584:	0387a703          	lw	a4,56(a5)
20405588:	fac40793          	addi	a5,s0,-84
2040558c:	01000613          	li	a2,16
20405590:	00078593          	mv	a1,a5
20405594:	f5842503          	lw	a0,-168(s0)
20405598:	000700e7          	jalr	a4
2040559c:	00050793          	mv	a5,a0
204055a0:	00078463          	beqz	a5,204055a8 <TVMGraphExecutorGraphAttr_Load+0x111c>
204055a4:	f2dfe06f          	j	204044d0 <TVMGraphExecutorGraphAttr_Load+0x44>
      }
    }
  }
  if (bitmask != (1 | 2 | 4)) {
204055a8:	fe842703          	lw	a4,-24(s0)
204055ac:	00700793          	li	a5,7
204055b0:	02f70a63          	beq	a4,a5,204055e4 <TVMGraphExecutorGraphAttr_Load+0x1158>
    fprintf(stderr, "invalid format\n");
204055b4:	5fbfb797          	auipc	a5,0x5fbfb
204055b8:	48478793          	addi	a5,a5,1156 # 80000a38 <_impure_ptr>
204055bc:	0007a783          	lw	a5,0(a5)
204055c0:	00c7a783          	lw	a5,12(a5)
204055c4:	00078693          	mv	a3,a5
204055c8:	00f00613          	li	a2,15
204055cc:	00100593          	li	a1,1
204055d0:	0001b517          	auipc	a0,0x1b
204055d4:	94c50513          	addi	a0,a0,-1716 # 2041ff1c <__func__.3846+0x234>
204055d8:	0cd0d0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
204055dc:	fff00793          	li	a5,-1
204055e0:	fef42623          	sw	a5,-20(s0)
  }
  return status;
204055e4:	fec42783          	lw	a5,-20(s0)
}
204055e8:	00078513          	mv	a0,a5
204055ec:	0ac12083          	lw	ra,172(sp)
204055f0:	0a812403          	lw	s0,168(sp)
204055f4:	0b010113          	addi	sp,sp,176
204055f8:	00008067          	ret

204055fc <TVMGraphExecutorGraphAttr_Release>:

int TVMGraphExecutorGraphAttr_Release(TVMGraphExecutorGraphAttr* attr) {
204055fc:	fa010113          	addi	sp,sp,-96
20405600:	04112e23          	sw	ra,92(sp)
20405604:	04812c23          	sw	s0,88(sp)
20405608:	06010413          	addi	s0,sp,96
2040560c:	faa42623          	sw	a0,-84(s0)
  if (!attr) {
20405610:	fac42783          	lw	a5,-84(s0)
20405614:	00079663          	bnez	a5,20405620 <TVMGraphExecutorGraphAttr_Release+0x24>
    return 0;
20405618:	00000793          	li	a5,0
2040561c:	1840006f          	j	204057a0 <TVMGraphExecutorGraphAttr_Release+0x1a4>
  }
  if (attr->storage_id) {
20405620:	fac42783          	lw	a5,-84(s0)
20405624:	0047a783          	lw	a5,4(a5)
20405628:	04078263          	beqz	a5,2040566c <TVMGraphExecutorGraphAttr_Release+0x70>
    DLDevice dev = {kDLCPU, 0};
2040562c:	00100793          	li	a5,1
20405630:	fcf42a23          	sw	a5,-44(s0)
20405634:	fc042c23          	sw	zero,-40(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->storage_id, dev);
20405638:	fac42783          	lw	a5,-84(s0)
2040563c:	0047a783          	lw	a5,4(a5)
20405640:	fd442583          	lw	a1,-44(s0)
20405644:	fd842603          	lw	a2,-40(s0)
20405648:	00078513          	mv	a0,a5
2040564c:	c14fb0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20405650:	fea42623          	sw	a0,-20(s0)
    attr->storage_id = 0;
20405654:	fac42783          	lw	a5,-84(s0)
20405658:	0007a223          	sw	zero,4(a5)
    if (err != kTvmErrorNoError) {
2040565c:	fec42783          	lw	a5,-20(s0)
20405660:	00078663          	beqz	a5,2040566c <TVMGraphExecutorGraphAttr_Release+0x70>
      return -1;
20405664:	fff00793          	li	a5,-1
20405668:	1380006f          	j	204057a0 <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->device_index) {
2040566c:	fac42783          	lw	a5,-84(s0)
20405670:	0087a783          	lw	a5,8(a5)
20405674:	04078263          	beqz	a5,204056b8 <TVMGraphExecutorGraphAttr_Release+0xbc>
    DLDevice dev = {kDLCPU, 0};
20405678:	00100793          	li	a5,1
2040567c:	fcf42623          	sw	a5,-52(s0)
20405680:	fc042823          	sw	zero,-48(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->device_index, dev);
20405684:	fac42783          	lw	a5,-84(s0)
20405688:	0087a783          	lw	a5,8(a5)
2040568c:	fcc42583          	lw	a1,-52(s0)
20405690:	fd042603          	lw	a2,-48(s0)
20405694:	00078513          	mv	a0,a5
20405698:	bc8fb0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
2040569c:	fea42423          	sw	a0,-24(s0)
    attr->device_index = 0;
204056a0:	fac42783          	lw	a5,-84(s0)
204056a4:	0007a423          	sw	zero,8(a5)
    if (err != kTvmErrorNoError) {
204056a8:	fe842783          	lw	a5,-24(s0)
204056ac:	00078663          	beqz	a5,204056b8 <TVMGraphExecutorGraphAttr_Release+0xbc>
      return -1;
204056b0:	fff00793          	li	a5,-1
204056b4:	0ec0006f          	j	204057a0 <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->dltype) {
204056b8:	fac42783          	lw	a5,-84(s0)
204056bc:	00c7a783          	lw	a5,12(a5)
204056c0:	04078263          	beqz	a5,20405704 <TVMGraphExecutorGraphAttr_Release+0x108>
    DLDevice dev = {kDLCPU, 0};
204056c4:	00100793          	li	a5,1
204056c8:	fcf42223          	sw	a5,-60(s0)
204056cc:	fc042423          	sw	zero,-56(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->dltype, dev);
204056d0:	fac42783          	lw	a5,-84(s0)
204056d4:	00c7a783          	lw	a5,12(a5)
204056d8:	fc442583          	lw	a1,-60(s0)
204056dc:	fc842603          	lw	a2,-56(s0)
204056e0:	00078513          	mv	a0,a5
204056e4:	b7cfb0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
204056e8:	fea42223          	sw	a0,-28(s0)
    attr->dltype = 0;
204056ec:	fac42783          	lw	a5,-84(s0)
204056f0:	0007a623          	sw	zero,12(a5)
    if (err != kTvmErrorNoError) {
204056f4:	fe442783          	lw	a5,-28(s0)
204056f8:	00078663          	beqz	a5,20405704 <TVMGraphExecutorGraphAttr_Release+0x108>
      return -1;
204056fc:	fff00793          	li	a5,-1
20405700:	0a00006f          	j	204057a0 <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->shape) {
20405704:	fac42783          	lw	a5,-84(s0)
20405708:	0147a783          	lw	a5,20(a5)
2040570c:	04078263          	beqz	a5,20405750 <TVMGraphExecutorGraphAttr_Release+0x154>
    DLDevice dev = {kDLCPU, 0};
20405710:	00100793          	li	a5,1
20405714:	faf42e23          	sw	a5,-68(s0)
20405718:	fc042023          	sw	zero,-64(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->shape, dev);
2040571c:	fac42783          	lw	a5,-84(s0)
20405720:	0147a783          	lw	a5,20(a5)
20405724:	fbc42583          	lw	a1,-68(s0)
20405728:	fc042603          	lw	a2,-64(s0)
2040572c:	00078513          	mv	a0,a5
20405730:	b30fb0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20405734:	fea42023          	sw	a0,-32(s0)
    attr->shape = 0;
20405738:	fac42783          	lw	a5,-84(s0)
2040573c:	0007aa23          	sw	zero,20(a5)
    if (err != kTvmErrorNoError) {
20405740:	fe042783          	lw	a5,-32(s0)
20405744:	00078663          	beqz	a5,20405750 <TVMGraphExecutorGraphAttr_Release+0x154>
      return -1;
20405748:	fff00793          	li	a5,-1
2040574c:	0540006f          	j	204057a0 <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->ndim) {
20405750:	fac42783          	lw	a5,-84(s0)
20405754:	0187a783          	lw	a5,24(a5)
20405758:	04078263          	beqz	a5,2040579c <TVMGraphExecutorGraphAttr_Release+0x1a0>
    DLDevice dev = {kDLCPU, 0};
2040575c:	00100793          	li	a5,1
20405760:	faf42a23          	sw	a5,-76(s0)
20405764:	fa042c23          	sw	zero,-72(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->ndim, dev);
20405768:	fac42783          	lw	a5,-84(s0)
2040576c:	0187a783          	lw	a5,24(a5)
20405770:	fb442583          	lw	a1,-76(s0)
20405774:	fb842603          	lw	a2,-72(s0)
20405778:	00078513          	mv	a0,a5
2040577c:	ae4fb0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20405780:	fca42e23          	sw	a0,-36(s0)
    attr->ndim = 0;
20405784:	fac42783          	lw	a5,-84(s0)
20405788:	0007ac23          	sw	zero,24(a5)
    if (err != kTvmErrorNoError) {
2040578c:	fdc42783          	lw	a5,-36(s0)
20405790:	00078663          	beqz	a5,2040579c <TVMGraphExecutorGraphAttr_Release+0x1a0>
      return -1;
20405794:	fff00793          	li	a5,-1
20405798:	0080006f          	j	204057a0 <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }

  return 0;
2040579c:	00000793          	li	a5,0
}
204057a0:	00078513          	mv	a0,a5
204057a4:	05c12083          	lw	ra,92(sp)
204057a8:	05812403          	lw	s0,88(sp)
204057ac:	06010113          	addi	sp,sp,96
204057b0:	00008067          	ret

204057b4 <TVMGraphExecutor_Load>:

int TVMGraphExecutor_Load(TVMGraphExecutor* executor, JSONReader* reader) {
204057b4:	f7010113          	addi	sp,sp,-144
204057b8:	08112623          	sw	ra,140(sp)
204057bc:	08812423          	sw	s0,136(sp)
204057c0:	08912223          	sw	s1,132(sp)
204057c4:	09010413          	addi	s0,sp,144
204057c8:	f6a42e23          	sw	a0,-132(s0)
204057cc:	f6b42c23          	sw	a1,-136(s0)
  int status = 0;
204057d0:	fe042623          	sw	zero,-20(s0)
  reader->BeginObject(reader);
204057d4:	f7842783          	lw	a5,-136(s0)
204057d8:	0347a783          	lw	a5,52(a5)
204057dc:	f7842503          	lw	a0,-136(s0)
204057e0:	000780e7          	jalr	a5
  int bitmask = 0;
204057e4:	fe042423          	sw	zero,-24(s0)
  char key[20];
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
204057e8:	7f00006f          	j	20405fd8 <TVMGraphExecutor_Load+0x824>
    if (!strcmp(key, "nodes")) {
204057ec:	fb040793          	addi	a5,s0,-80
204057f0:	0001b597          	auipc	a1,0x1b
204057f4:	99058593          	addi	a1,a1,-1648 # 20420180 <__func__.3846+0x498>
204057f8:	00078513          	mv	a0,a5
204057fc:	22f0d0ef          	jal	ra,2041322a <strcmp>
20405800:	00050793          	mv	a5,a0
20405804:	1c079c63          	bnez	a5,204059dc <TVMGraphExecutor_Load+0x228>
      reader->BeginArray(reader);
20405808:	f7842783          	lw	a5,-136(s0)
2040580c:	0307a783          	lw	a5,48(a5)
20405810:	f7842503          	lw	a0,-136(s0)
20405814:	000780e7          	jalr	a5
      size_t num_items = 0;
20405818:	fa042623          	sw	zero,-84(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
2040581c:	f7842783          	lw	a5,-136(s0)
20405820:	0407a703          	lw	a4,64(a5)
20405824:	fac40793          	addi	a5,s0,-84
20405828:	00078593          	mv	a1,a5
2040582c:	f7842503          	lw	a0,-136(s0)
20405830:	000700e7          	jalr	a4
20405834:	00050793          	mv	a5,a0
20405838:	02078c63          	beqz	a5,20405870 <TVMGraphExecutor_Load+0xbc>
        fprintf(stderr, "error determing list_int length\n");
2040583c:	5fbfb797          	auipc	a5,0x5fbfb
20405840:	1fc78793          	addi	a5,a5,508 # 80000a38 <_impure_ptr>
20405844:	0007a783          	lw	a5,0(a5)
20405848:	00c7a783          	lw	a5,12(a5)
2040584c:	00078693          	mv	a3,a5
20405850:	02000613          	li	a2,32
20405854:	00100593          	li	a1,1
20405858:	0001b517          	auipc	a0,0x1b
2040585c:	8e050513          	addi	a0,a0,-1824 # 20420138 <__func__.3846+0x450>
20405860:	6440d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405864:	fff00793          	li	a5,-1
20405868:	fef42623          	sw	a5,-20(s0)
        break;
2040586c:	7a00006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405870:	00100793          	li	a5,1
20405874:	faf42223          	sw	a5,-92(s0)
20405878:	fa042423          	sw	zero,-88(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNode) * num_items, dev,
2040587c:	fac42783          	lw	a5,-84(s0)
20405880:	16c00593          	li	a1,364
20405884:	00078513          	mv	a0,a5
20405888:	6e5190ef          	jal	ra,2041f76c <__mulsi3>
2040588c:	00050793          	mv	a5,a0
20405890:	00078713          	mv	a4,a5
                                                      (void**)&executor->nodes);
20405894:	f7c42783          	lw	a5,-132(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNode) * num_items, dev,
20405898:	00078693          	mv	a3,a5
2040589c:	fa442583          	lw	a1,-92(s0)
204058a0:	fa842603          	lw	a2,-88(s0)
204058a4:	00070513          	mv	a0,a4
204058a8:	954fb0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
204058ac:	fca42423          	sw	a0,-56(s0)
      if (err != kTvmErrorNoError) {
204058b0:	fc842783          	lw	a5,-56(s0)
204058b4:	10078063          	beqz	a5,204059b4 <TVMGraphExecutor_Load+0x200>
        fprintf(stderr, "memory allocate error: %08x", err);
204058b8:	5fbfb797          	auipc	a5,0x5fbfb
204058bc:	18078793          	addi	a5,a5,384 # 80000a38 <_impure_ptr>
204058c0:	0007a783          	lw	a5,0(a5)
204058c4:	00c7a783          	lw	a5,12(a5)
204058c8:	fc842603          	lw	a2,-56(s0)
204058cc:	0001a597          	auipc	a1,0x1a
204058d0:	6c458593          	addi	a1,a1,1732 # 2041ff90 <__func__.3846+0x2a8>
204058d4:	00078513          	mv	a0,a5
204058d8:	5320d0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
204058dc:	fff00793          	li	a5,-1
204058e0:	fef42623          	sw	a5,-20(s0)
        break;
204058e4:	00000013          	nop
204058e8:	7240006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->nodes_count == num_items) {
204058ec:	f7c42783          	lw	a5,-132(s0)
204058f0:	0047a703          	lw	a4,4(a5)
204058f4:	fac42783          	lw	a5,-84(s0)
204058f8:	02f71e63          	bne	a4,a5,20405934 <TVMGraphExecutor_Load+0x180>
          fprintf(stderr, "array too big\n");
204058fc:	5fbfb797          	auipc	a5,0x5fbfb
20405900:	13c78793          	addi	a5,a5,316 # 80000a38 <_impure_ptr>
20405904:	0007a783          	lw	a5,0(a5)
20405908:	00c7a783          	lw	a5,12(a5)
2040590c:	00078693          	mv	a3,a5
20405910:	00e00613          	li	a2,14
20405914:	00100593          	li	a1,1
20405918:	0001a517          	auipc	a0,0x1a
2040591c:	76c50513          	addi	a0,a0,1900 # 20420084 <__func__.3846+0x39c>
20405920:	5840d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20405924:	fff00793          	li	a5,-1
20405928:	fef42623          	sw	a5,-20(s0)
          return status;
2040592c:	fec42783          	lw	a5,-20(s0)
20405930:	71c0006f          	j	2040604c <TVMGraphExecutor_Load+0x898>
        }
        TVMGraphExecutorNode* node = executor->nodes + executor->nodes_count;
20405934:	f7c42783          	lw	a5,-132(s0)
20405938:	0007a483          	lw	s1,0(a5)
2040593c:	f7c42783          	lw	a5,-132(s0)
20405940:	0047a783          	lw	a5,4(a5)
20405944:	16c00593          	li	a1,364
20405948:	00078513          	mv	a0,a5
2040594c:	621190ef          	jal	ra,2041f76c <__mulsi3>
20405950:	00050793          	mv	a5,a0
20405954:	00f487b3          	add	a5,s1,a5
20405958:	fcf42223          	sw	a5,-60(s0)
        status = TVMGraphExecutorNode_Load(node, reader);
2040595c:	f7842583          	lw	a1,-136(s0)
20405960:	fc442503          	lw	a0,-60(s0)
20405964:	ca0fe0ef          	jal	ra,20403e04 <TVMGraphExecutorNode_Load>
20405968:	fea42623          	sw	a0,-20(s0)
        if (status != 0) {
2040596c:	fec42783          	lw	a5,-20(s0)
20405970:	02078863          	beqz	a5,204059a0 <TVMGraphExecutor_Load+0x1ec>
          fprintf(stderr, "failed to load an element in `nodes` field in graph executor node.\n");
20405974:	5fbfb797          	auipc	a5,0x5fbfb
20405978:	0c478793          	addi	a5,a5,196 # 80000a38 <_impure_ptr>
2040597c:	0007a783          	lw	a5,0(a5)
20405980:	00c7a783          	lw	a5,12(a5)
20405984:	00078693          	mv	a3,a5
20405988:	04300613          	li	a2,67
2040598c:	00100593          	li	a1,1
20405990:	0001a517          	auipc	a0,0x1a
20405994:	7f850513          	addi	a0,a0,2040 # 20420188 <__func__.3846+0x4a0>
20405998:	50c0d0ef          	jal	ra,20412ea4 <fwrite>
          break;
2040599c:	0300006f          	j	204059cc <TVMGraphExecutor_Load+0x218>
#if TVM_CRT_DEBUG
        } else {
          printf("loading: node (%u) %s loaded.\n", executor->nodes_count, node->name);
#endif  // TVM_CRT_DEBUG
        }
        executor->nodes_count++;
204059a0:	f7c42783          	lw	a5,-132(s0)
204059a4:	0047a783          	lw	a5,4(a5)
204059a8:	00178713          	addi	a4,a5,1
204059ac:	f7c42783          	lw	a5,-132(s0)
204059b0:	00e7a223          	sw	a4,4(a5)
      while (reader->NextArrayItem(reader)) {
204059b4:	f7842783          	lw	a5,-136(s0)
204059b8:	03c7a783          	lw	a5,60(a5)
204059bc:	f7842503          	lw	a0,-136(s0)
204059c0:	000780e7          	jalr	a5
204059c4:	00050793          	mv	a5,a0
204059c8:	f20792e3          	bnez	a5,204058ec <TVMGraphExecutor_Load+0x138>
      }
      bitmask |= 1;
204059cc:	fe842783          	lw	a5,-24(s0)
204059d0:	0017e793          	ori	a5,a5,1
204059d4:	fef42423          	sw	a5,-24(s0)
204059d8:	5f80006f          	j	20405fd0 <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "arg_nodes")) {
204059dc:	fb040793          	addi	a5,s0,-80
204059e0:	0001a597          	auipc	a1,0x1a
204059e4:	7ec58593          	addi	a1,a1,2028 # 204201cc <__func__.3846+0x4e4>
204059e8:	00078513          	mv	a0,a5
204059ec:	03f0d0ef          	jal	ra,2041322a <strcmp>
204059f0:	00050793          	mv	a5,a0
204059f4:	18079863          	bnez	a5,20405b84 <TVMGraphExecutor_Load+0x3d0>
      reader->BeginArray(reader);
204059f8:	f7842783          	lw	a5,-136(s0)
204059fc:	0307a783          	lw	a5,48(a5)
20405a00:	f7842503          	lw	a0,-136(s0)
20405a04:	000780e7          	jalr	a5
      size_t num_items = 0;
20405a08:	fa042023          	sw	zero,-96(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405a0c:	f7842783          	lw	a5,-136(s0)
20405a10:	0407a703          	lw	a4,64(a5)
20405a14:	fa040793          	addi	a5,s0,-96
20405a18:	00078593          	mv	a1,a5
20405a1c:	f7842503          	lw	a0,-136(s0)
20405a20:	000700e7          	jalr	a4
20405a24:	00050793          	mv	a5,a0
20405a28:	02078c63          	beqz	a5,20405a60 <TVMGraphExecutor_Load+0x2ac>
        fprintf(stderr, "error determing list_int length\n");
20405a2c:	5fbfb797          	auipc	a5,0x5fbfb
20405a30:	00c78793          	addi	a5,a5,12 # 80000a38 <_impure_ptr>
20405a34:	0007a783          	lw	a5,0(a5)
20405a38:	00c7a783          	lw	a5,12(a5)
20405a3c:	00078693          	mv	a3,a5
20405a40:	02000613          	li	a2,32
20405a44:	00100593          	li	a1,1
20405a48:	0001a517          	auipc	a0,0x1a
20405a4c:	6f050513          	addi	a0,a0,1776 # 20420138 <__func__.3846+0x450>
20405a50:	4540d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405a54:	fff00793          	li	a5,-1
20405a58:	fef42623          	sw	a5,-20(s0)
        break;
20405a5c:	5b00006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405a60:	00100793          	li	a5,1
20405a64:	f8f42c23          	sw	a5,-104(s0)
20405a68:	f8042e23          	sw	zero,-100(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405a6c:	fa042783          	lw	a5,-96(s0)
20405a70:	00279713          	slli	a4,a5,0x2
                                                      (void**)&executor->input_nodes);
20405a74:	f7c42783          	lw	a5,-132(s0)
20405a78:	00878793          	addi	a5,a5,8
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405a7c:	00078693          	mv	a3,a5
20405a80:	f9842583          	lw	a1,-104(s0)
20405a84:	f9c42603          	lw	a2,-100(s0)
20405a88:	00070513          	mv	a0,a4
20405a8c:	f71fa0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20405a90:	fca42823          	sw	a0,-48(s0)

      if (err != kTvmErrorNoError) {
20405a94:	fd042783          	lw	a5,-48(s0)
20405a98:	0c078263          	beqz	a5,20405b5c <TVMGraphExecutor_Load+0x3a8>
        fprintf(stderr, "memory allocate error: %08x", err);
20405a9c:	5fbfb797          	auipc	a5,0x5fbfb
20405aa0:	f9c78793          	addi	a5,a5,-100 # 80000a38 <_impure_ptr>
20405aa4:	0007a783          	lw	a5,0(a5)
20405aa8:	00c7a783          	lw	a5,12(a5)
20405aac:	fd042603          	lw	a2,-48(s0)
20405ab0:	0001a597          	auipc	a1,0x1a
20405ab4:	4e058593          	addi	a1,a1,1248 # 2041ff90 <__func__.3846+0x2a8>
20405ab8:	00078513          	mv	a0,a5
20405abc:	34e0d0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20405ac0:	fff00793          	li	a5,-1
20405ac4:	fef42623          	sw	a5,-20(s0)
        break;
20405ac8:	00000013          	nop
20405acc:	5400006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->input_nodes_count == num_items) {
20405ad0:	f7c42783          	lw	a5,-132(s0)
20405ad4:	00c7a703          	lw	a4,12(a5)
20405ad8:	fa042783          	lw	a5,-96(s0)
20405adc:	02f71e63          	bne	a4,a5,20405b18 <TVMGraphExecutor_Load+0x364>
          fprintf(stderr, "array too big\n");
20405ae0:	5fbfb797          	auipc	a5,0x5fbfb
20405ae4:	f5878793          	addi	a5,a5,-168 # 80000a38 <_impure_ptr>
20405ae8:	0007a783          	lw	a5,0(a5)
20405aec:	00c7a783          	lw	a5,12(a5)
20405af0:	00078693          	mv	a3,a5
20405af4:	00e00613          	li	a2,14
20405af8:	00100593          	li	a1,1
20405afc:	0001a517          	auipc	a0,0x1a
20405b00:	58850513          	addi	a0,a0,1416 # 20420084 <__func__.3846+0x39c>
20405b04:	3a00d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20405b08:	fff00793          	li	a5,-1
20405b0c:	fef42623          	sw	a5,-20(s0)
          return status;
20405b10:	fec42783          	lw	a5,-20(s0)
20405b14:	5380006f          	j	2040604c <TVMGraphExecutor_Load+0x898>
        }
        uint32_t* node = executor->input_nodes + executor->input_nodes_count;
20405b18:	f7c42783          	lw	a5,-132(s0)
20405b1c:	0087a703          	lw	a4,8(a5)
20405b20:	f7c42783          	lw	a5,-132(s0)
20405b24:	00c7a783          	lw	a5,12(a5)
20405b28:	00279793          	slli	a5,a5,0x2
20405b2c:	00f707b3          	add	a5,a4,a5
20405b30:	fcf42623          	sw	a5,-52(s0)
        reader->ReadUnsignedInteger(reader, node);
20405b34:	f7842783          	lw	a5,-136(s0)
20405b38:	0247a783          	lw	a5,36(a5)
20405b3c:	fcc42583          	lw	a1,-52(s0)
20405b40:	f7842503          	lw	a0,-136(s0)
20405b44:	000780e7          	jalr	a5
        executor->input_nodes_count++;
20405b48:	f7c42783          	lw	a5,-132(s0)
20405b4c:	00c7a783          	lw	a5,12(a5)
20405b50:	00178713          	addi	a4,a5,1
20405b54:	f7c42783          	lw	a5,-132(s0)
20405b58:	00e7a623          	sw	a4,12(a5)
      while (reader->NextArrayItem(reader)) {
20405b5c:	f7842783          	lw	a5,-136(s0)
20405b60:	03c7a783          	lw	a5,60(a5)
20405b64:	f7842503          	lw	a0,-136(s0)
20405b68:	000780e7          	jalr	a5
20405b6c:	00050793          	mv	a5,a0
20405b70:	f60790e3          	bnez	a5,20405ad0 <TVMGraphExecutor_Load+0x31c>
      }
      bitmask |= 2;
20405b74:	fe842783          	lw	a5,-24(s0)
20405b78:	0027e793          	ori	a5,a5,2
20405b7c:	fef42423          	sw	a5,-24(s0)
20405b80:	4500006f          	j	20405fd0 <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "node_row_ptr")) {
20405b84:	fb040793          	addi	a5,s0,-80
20405b88:	0001a597          	auipc	a1,0x1a
20405b8c:	65058593          	addi	a1,a1,1616 # 204201d8 <__func__.3846+0x4f0>
20405b90:	00078513          	mv	a0,a5
20405b94:	6960d0ef          	jal	ra,2041322a <strcmp>
20405b98:	00050793          	mv	a5,a0
20405b9c:	18079c63          	bnez	a5,20405d34 <TVMGraphExecutor_Load+0x580>
      reader->BeginArray(reader);
20405ba0:	f7842783          	lw	a5,-136(s0)
20405ba4:	0307a783          	lw	a5,48(a5)
20405ba8:	f7842503          	lw	a0,-136(s0)
20405bac:	000780e7          	jalr	a5
      size_t num_items = 0;
20405bb0:	f8042a23          	sw	zero,-108(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405bb4:	f7842783          	lw	a5,-136(s0)
20405bb8:	0407a703          	lw	a4,64(a5)
20405bbc:	f9440793          	addi	a5,s0,-108
20405bc0:	00078593          	mv	a1,a5
20405bc4:	f7842503          	lw	a0,-136(s0)
20405bc8:	000700e7          	jalr	a4
20405bcc:	00050793          	mv	a5,a0
20405bd0:	02078c63          	beqz	a5,20405c08 <TVMGraphExecutor_Load+0x454>
        fprintf(stderr, "error determing list_int length\n");
20405bd4:	5fbfb797          	auipc	a5,0x5fbfb
20405bd8:	e6478793          	addi	a5,a5,-412 # 80000a38 <_impure_ptr>
20405bdc:	0007a783          	lw	a5,0(a5)
20405be0:	00c7a783          	lw	a5,12(a5)
20405be4:	00078693          	mv	a3,a5
20405be8:	02000613          	li	a2,32
20405bec:	00100593          	li	a1,1
20405bf0:	0001a517          	auipc	a0,0x1a
20405bf4:	54850513          	addi	a0,a0,1352 # 20420138 <__func__.3846+0x450>
20405bf8:	2ac0d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405bfc:	fff00793          	li	a5,-1
20405c00:	fef42623          	sw	a5,-20(s0)
        break;
20405c04:	4080006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405c08:	00100793          	li	a5,1
20405c0c:	f8f42623          	sw	a5,-116(s0)
20405c10:	f8042823          	sw	zero,-112(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405c14:	f9442783          	lw	a5,-108(s0)
20405c18:	00279713          	slli	a4,a5,0x2
                                                      (void**)&executor->node_row_ptr);
20405c1c:	f7c42783          	lw	a5,-132(s0)
20405c20:	01078793          	addi	a5,a5,16
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405c24:	00078693          	mv	a3,a5
20405c28:	f8c42583          	lw	a1,-116(s0)
20405c2c:	f9042603          	lw	a2,-112(s0)
20405c30:	00070513          	mv	a0,a4
20405c34:	dc9fa0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20405c38:	fca42e23          	sw	a0,-36(s0)
      if (err != kTvmErrorNoError) {
20405c3c:	fdc42783          	lw	a5,-36(s0)
20405c40:	0c078663          	beqz	a5,20405d0c <TVMGraphExecutor_Load+0x558>
        fprintf(stderr, "memory allocate error: %08x", err);
20405c44:	5fbfb797          	auipc	a5,0x5fbfb
20405c48:	df478793          	addi	a5,a5,-524 # 80000a38 <_impure_ptr>
20405c4c:	0007a783          	lw	a5,0(a5)
20405c50:	00c7a783          	lw	a5,12(a5)
20405c54:	fdc42603          	lw	a2,-36(s0)
20405c58:	0001a597          	auipc	a1,0x1a
20405c5c:	33858593          	addi	a1,a1,824 # 2041ff90 <__func__.3846+0x2a8>
20405c60:	00078513          	mv	a0,a5
20405c64:	1a60d0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20405c68:	fff00793          	li	a5,-1
20405c6c:	fef42623          	sw	a5,-20(s0)
        break;
20405c70:	00000013          	nop
20405c74:	3980006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->node_row_ptr_count == num_items) {
20405c78:	f7c42783          	lw	a5,-132(s0)
20405c7c:	0147a703          	lw	a4,20(a5)
20405c80:	f9442783          	lw	a5,-108(s0)
20405c84:	02f71e63          	bne	a4,a5,20405cc0 <TVMGraphExecutor_Load+0x50c>
          fprintf(stderr, "array too big\n");
20405c88:	5fbfb797          	auipc	a5,0x5fbfb
20405c8c:	db078793          	addi	a5,a5,-592 # 80000a38 <_impure_ptr>
20405c90:	0007a783          	lw	a5,0(a5)
20405c94:	00c7a783          	lw	a5,12(a5)
20405c98:	00078693          	mv	a3,a5
20405c9c:	00e00613          	li	a2,14
20405ca0:	00100593          	li	a1,1
20405ca4:	0001a517          	auipc	a0,0x1a
20405ca8:	3e050513          	addi	a0,a0,992 # 20420084 <__func__.3846+0x39c>
20405cac:	1f80d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20405cb0:	fff00793          	li	a5,-1
20405cb4:	fef42623          	sw	a5,-20(s0)
          return status;
20405cb8:	fec42783          	lw	a5,-20(s0)
20405cbc:	3900006f          	j	2040604c <TVMGraphExecutor_Load+0x898>
        }
        uint32_t count = executor->node_row_ptr_count;
20405cc0:	f7c42783          	lw	a5,-132(s0)
20405cc4:	0147a783          	lw	a5,20(a5)
20405cc8:	fcf42c23          	sw	a5,-40(s0)
        uint32_t* node = executor->node_row_ptr + count;
20405ccc:	f7c42783          	lw	a5,-132(s0)
20405cd0:	0107a703          	lw	a4,16(a5)
20405cd4:	fd842783          	lw	a5,-40(s0)
20405cd8:	00279793          	slli	a5,a5,0x2
20405cdc:	00f707b3          	add	a5,a4,a5
20405ce0:	fcf42a23          	sw	a5,-44(s0)
        reader->ReadUnsignedInteger(reader, node);
20405ce4:	f7842783          	lw	a5,-136(s0)
20405ce8:	0247a783          	lw	a5,36(a5)
20405cec:	fd442583          	lw	a1,-44(s0)
20405cf0:	f7842503          	lw	a0,-136(s0)
20405cf4:	000780e7          	jalr	a5
        executor->node_row_ptr_count++;
20405cf8:	f7c42783          	lw	a5,-132(s0)
20405cfc:	0147a783          	lw	a5,20(a5)
20405d00:	00178713          	addi	a4,a5,1
20405d04:	f7c42783          	lw	a5,-132(s0)
20405d08:	00e7aa23          	sw	a4,20(a5)
      while (reader->NextArrayItem(reader)) {
20405d0c:	f7842783          	lw	a5,-136(s0)
20405d10:	03c7a783          	lw	a5,60(a5)
20405d14:	f7842503          	lw	a0,-136(s0)
20405d18:	000780e7          	jalr	a5
20405d1c:	00050793          	mv	a5,a0
20405d20:	f4079ce3          	bnez	a5,20405c78 <TVMGraphExecutor_Load+0x4c4>
      }
      bitmask |= 4;
20405d24:	fe842783          	lw	a5,-24(s0)
20405d28:	0047e793          	ori	a5,a5,4
20405d2c:	fef42423          	sw	a5,-24(s0)
20405d30:	2a00006f          	j	20405fd0 <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "heads")) {
20405d34:	fb040793          	addi	a5,s0,-80
20405d38:	0001a597          	auipc	a1,0x1a
20405d3c:	4b058593          	addi	a1,a1,1200 # 204201e8 <__func__.3846+0x500>
20405d40:	00078513          	mv	a0,a5
20405d44:	4e60d0ef          	jal	ra,2041322a <strcmp>
20405d48:	00050793          	mv	a5,a0
20405d4c:	1c079063          	bnez	a5,20405f0c <TVMGraphExecutor_Load+0x758>
      reader->BeginArray(reader);
20405d50:	f7842783          	lw	a5,-136(s0)
20405d54:	0307a783          	lw	a5,48(a5)
20405d58:	f7842503          	lw	a0,-136(s0)
20405d5c:	000780e7          	jalr	a5
      size_t num_items = 0;
20405d60:	f8042423          	sw	zero,-120(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405d64:	f7842783          	lw	a5,-136(s0)
20405d68:	0407a703          	lw	a4,64(a5)
20405d6c:	f8840793          	addi	a5,s0,-120
20405d70:	00078593          	mv	a1,a5
20405d74:	f7842503          	lw	a0,-136(s0)
20405d78:	000700e7          	jalr	a4
20405d7c:	00050793          	mv	a5,a0
20405d80:	02078c63          	beqz	a5,20405db8 <TVMGraphExecutor_Load+0x604>
        fprintf(stderr, "error determing list_int length\n");
20405d84:	5fbfb797          	auipc	a5,0x5fbfb
20405d88:	cb478793          	addi	a5,a5,-844 # 80000a38 <_impure_ptr>
20405d8c:	0007a783          	lw	a5,0(a5)
20405d90:	00c7a783          	lw	a5,12(a5)
20405d94:	00078693          	mv	a3,a5
20405d98:	02000613          	li	a2,32
20405d9c:	00100593          	li	a1,1
20405da0:	0001a517          	auipc	a0,0x1a
20405da4:	39850513          	addi	a0,a0,920 # 20420138 <__func__.3846+0x450>
20405da8:	0fc0d0ef          	jal	ra,20412ea4 <fwrite>
        status = -1;
20405dac:	fff00793          	li	a5,-1
20405db0:	fef42623          	sw	a5,-20(s0)
        break;
20405db4:	2580006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405db8:	00100793          	li	a5,1
20405dbc:	f8f42023          	sw	a5,-128(s0)
20405dc0:	f8042223          	sw	zero,-124(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNodeEntry) * num_items,
20405dc4:	f8842783          	lw	a5,-120(s0)
20405dc8:	00479713          	slli	a4,a5,0x4
                                                      dev, (void**)&executor->outputs);
20405dcc:	f7c42783          	lw	a5,-132(s0)
20405dd0:	01878793          	addi	a5,a5,24
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNodeEntry) * num_items,
20405dd4:	00078693          	mv	a3,a5
20405dd8:	f8042583          	lw	a1,-128(s0)
20405ddc:	f8442603          	lw	a2,-124(s0)
20405de0:	00070513          	mv	a0,a4
20405de4:	c19fa0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20405de8:	fea42223          	sw	a0,-28(s0)
      if (err != kTvmErrorNoError) {
20405dec:	fe442783          	lw	a5,-28(s0)
20405df0:	0e078a63          	beqz	a5,20405ee4 <TVMGraphExecutor_Load+0x730>
        fprintf(stderr, "memory allocate error: %08x", err);
20405df4:	5fbfb797          	auipc	a5,0x5fbfb
20405df8:	c4478793          	addi	a5,a5,-956 # 80000a38 <_impure_ptr>
20405dfc:	0007a783          	lw	a5,0(a5)
20405e00:	00c7a783          	lw	a5,12(a5)
20405e04:	fe442603          	lw	a2,-28(s0)
20405e08:	0001a597          	auipc	a1,0x1a
20405e0c:	18858593          	addi	a1,a1,392 # 2041ff90 <__func__.3846+0x2a8>
20405e10:	00078513          	mv	a0,a5
20405e14:	7f70c0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20405e18:	fff00793          	li	a5,-1
20405e1c:	fef42623          	sw	a5,-20(s0)
        break;
20405e20:	00000013          	nop
20405e24:	1e80006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->outputs_count == num_items) {
20405e28:	f7c42783          	lw	a5,-132(s0)
20405e2c:	01c7a703          	lw	a4,28(a5)
20405e30:	f8842783          	lw	a5,-120(s0)
20405e34:	02f71e63          	bne	a4,a5,20405e70 <TVMGraphExecutor_Load+0x6bc>
          fprintf(stderr, "array too big\n");
20405e38:	5fbfb797          	auipc	a5,0x5fbfb
20405e3c:	c0078793          	addi	a5,a5,-1024 # 80000a38 <_impure_ptr>
20405e40:	0007a783          	lw	a5,0(a5)
20405e44:	00c7a783          	lw	a5,12(a5)
20405e48:	00078693          	mv	a3,a5
20405e4c:	00e00613          	li	a2,14
20405e50:	00100593          	li	a1,1
20405e54:	0001a517          	auipc	a0,0x1a
20405e58:	23050513          	addi	a0,a0,560 # 20420084 <__func__.3846+0x39c>
20405e5c:	0480d0ef          	jal	ra,20412ea4 <fwrite>
          status = -1;
20405e60:	fff00793          	li	a5,-1
20405e64:	fef42623          	sw	a5,-20(s0)
          return status;
20405e68:	fec42783          	lw	a5,-20(s0)
20405e6c:	1e00006f          	j	2040604c <TVMGraphExecutor_Load+0x898>
        }
        TVMGraphExecutorNodeEntry* entry = executor->outputs + executor->outputs_count;
20405e70:	f7c42783          	lw	a5,-132(s0)
20405e74:	0187a703          	lw	a4,24(a5)
20405e78:	f7c42783          	lw	a5,-132(s0)
20405e7c:	01c7a783          	lw	a5,28(a5)
20405e80:	00479793          	slli	a5,a5,0x4
20405e84:	00f707b3          	add	a5,a4,a5
20405e88:	fef42023          	sw	a5,-32(s0)
        status = NodeEntry_Load(entry, reader);
20405e8c:	f7842583          	lw	a1,-136(s0)
20405e90:	fe042503          	lw	a0,-32(s0)
20405e94:	b89fd0ef          	jal	ra,20403a1c <NodeEntry_Load>
20405e98:	fea42623          	sw	a0,-20(s0)
        if (status != 0) {
20405e9c:	fec42783          	lw	a5,-20(s0)
20405ea0:	02078863          	beqz	a5,20405ed0 <TVMGraphExecutor_Load+0x71c>
          fprintf(stderr, "Fail to load an element in `heads` field in graph executor node.\n");
20405ea4:	5fbfb797          	auipc	a5,0x5fbfb
20405ea8:	b9478793          	addi	a5,a5,-1132 # 80000a38 <_impure_ptr>
20405eac:	0007a783          	lw	a5,0(a5)
20405eb0:	00c7a783          	lw	a5,12(a5)
20405eb4:	00078693          	mv	a3,a5
20405eb8:	04100613          	li	a2,65
20405ebc:	00100593          	li	a1,1
20405ec0:	0001a517          	auipc	a0,0x1a
20405ec4:	33050513          	addi	a0,a0,816 # 204201f0 <__func__.3846+0x508>
20405ec8:	7dd0c0ef          	jal	ra,20412ea4 <fwrite>
          break;
20405ecc:	0300006f          	j	20405efc <TVMGraphExecutor_Load+0x748>
        }
        executor->outputs_count++;
20405ed0:	f7c42783          	lw	a5,-132(s0)
20405ed4:	01c7a783          	lw	a5,28(a5)
20405ed8:	00178713          	addi	a4,a5,1
20405edc:	f7c42783          	lw	a5,-132(s0)
20405ee0:	00e7ae23          	sw	a4,28(a5)
      while (reader->NextArrayItem(reader)) {
20405ee4:	f7842783          	lw	a5,-136(s0)
20405ee8:	03c7a783          	lw	a5,60(a5)
20405eec:	f7842503          	lw	a0,-136(s0)
20405ef0:	000780e7          	jalr	a5
20405ef4:	00050793          	mv	a5,a0
20405ef8:	f20798e3          	bnez	a5,20405e28 <TVMGraphExecutor_Load+0x674>
      }
      bitmask |= 8;
20405efc:	fe842783          	lw	a5,-24(s0)
20405f00:	0087e793          	ori	a5,a5,8
20405f04:	fef42423          	sw	a5,-24(s0)
20405f08:	0c80006f          	j	20405fd0 <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "attrs")) {
20405f0c:	fb040793          	addi	a5,s0,-80
20405f10:	0001a597          	auipc	a1,0x1a
20405f14:	0d858593          	addi	a1,a1,216 # 2041ffe8 <__func__.3846+0x300>
20405f18:	00078513          	mv	a0,a5
20405f1c:	30e0d0ef          	jal	ra,2041322a <strcmp>
20405f20:	00050793          	mv	a5,a0
20405f24:	06079063          	bnez	a5,20405f84 <TVMGraphExecutor_Load+0x7d0>
      status = TVMGraphExecutorGraphAttr_Load(&(executor->attrs), reader);
20405f28:	f7c42783          	lw	a5,-132(s0)
20405f2c:	02078793          	addi	a5,a5,32
20405f30:	f7842583          	lw	a1,-136(s0)
20405f34:	00078513          	mv	a0,a5
20405f38:	d54fe0ef          	jal	ra,2040448c <TVMGraphExecutorGraphAttr_Load>
20405f3c:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20405f40:	fec42783          	lw	a5,-20(s0)
20405f44:	02078863          	beqz	a5,20405f74 <TVMGraphExecutor_Load+0x7c0>
        fprintf(stderr, "Fail to load an element in `heads` field in graph executor node.\n");
20405f48:	5fbfb797          	auipc	a5,0x5fbfb
20405f4c:	af078793          	addi	a5,a5,-1296 # 80000a38 <_impure_ptr>
20405f50:	0007a783          	lw	a5,0(a5)
20405f54:	00c7a783          	lw	a5,12(a5)
20405f58:	00078693          	mv	a3,a5
20405f5c:	04100613          	li	a2,65
20405f60:	00100593          	li	a1,1
20405f64:	0001a517          	auipc	a0,0x1a
20405f68:	28c50513          	addi	a0,a0,652 # 204201f0 <__func__.3846+0x508>
20405f6c:	7390c0ef          	jal	ra,20412ea4 <fwrite>
        break;
20405f70:	09c0006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      }
      bitmask |= 16;
20405f74:	fe842783          	lw	a5,-24(s0)
20405f78:	0107e793          	ori	a5,a5,16
20405f7c:	fef42423          	sw	a5,-24(s0)
20405f80:	0500006f          	j	20405fd0 <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "metadata")) {
20405f84:	fb040793          	addi	a5,s0,-80
20405f88:	0001a597          	auipc	a1,0x1a
20405f8c:	2ac58593          	addi	a1,a1,684 # 20420234 <__func__.3846+0x54c>
20405f90:	00078513          	mv	a0,a5
20405f94:	2960d0ef          	jal	ra,2041322a <strcmp>
20405f98:	00050793          	mv	a5,a0
20405f9c:	06078263          	beqz	a5,20406000 <TVMGraphExecutor_Load+0x84c>
      break;
    } else {
      fprintf(stderr, "key %s is not supported\n", key);
20405fa0:	5fbfb797          	auipc	a5,0x5fbfb
20405fa4:	a9878793          	addi	a5,a5,-1384 # 80000a38 <_impure_ptr>
20405fa8:	0007a783          	lw	a5,0(a5)
20405fac:	00c7a783          	lw	a5,12(a5)
20405fb0:	fb040713          	addi	a4,s0,-80
20405fb4:	00070613          	mv	a2,a4
20405fb8:	0001a597          	auipc	a1,0x1a
20405fbc:	28858593          	addi	a1,a1,648 # 20420240 <__func__.3846+0x558>
20405fc0:	00078513          	mv	a0,a5
20405fc4:	6470c0ef          	jal	ra,20412e0a <fprintf>
      status = -1;
20405fc8:	fff00793          	li	a5,-1
20405fcc:	fef42623          	sw	a5,-20(s0)
    }
    if (status != 0) {
20405fd0:	fec42783          	lw	a5,-20(s0)
20405fd4:	02079a63          	bnez	a5,20406008 <TVMGraphExecutor_Load+0x854>
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20405fd8:	f7842783          	lw	a5,-136(s0)
20405fdc:	0387a703          	lw	a4,56(a5)
20405fe0:	fb040793          	addi	a5,s0,-80
20405fe4:	01400613          	li	a2,20
20405fe8:	00078593          	mv	a1,a5
20405fec:	f7842503          	lw	a0,-136(s0)
20405ff0:	000700e7          	jalr	a4
20405ff4:	00050793          	mv	a5,a0
20405ff8:	fe079a63          	bnez	a5,204057ec <TVMGraphExecutor_Load+0x38>
20405ffc:	0100006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      break;
20406000:	00000013          	nop
20406004:	0080006f          	j	2040600c <TVMGraphExecutor_Load+0x858>
      break;
20406008:	00000013          	nop
    }
  }
  if (!(bitmask == (1 | 2 | 4 | 8 | 16))) {
2040600c:	fe842703          	lw	a4,-24(s0)
20406010:	01f00793          	li	a5,31
20406014:	02f70a63          	beq	a4,a5,20406048 <TVMGraphExecutor_Load+0x894>
    fprintf(stderr, "invalid format\n");
20406018:	5fbfb797          	auipc	a5,0x5fbfb
2040601c:	a2078793          	addi	a5,a5,-1504 # 80000a38 <_impure_ptr>
20406020:	0007a783          	lw	a5,0(a5)
20406024:	00c7a783          	lw	a5,12(a5)
20406028:	00078693          	mv	a3,a5
2040602c:	00f00613          	li	a2,15
20406030:	00100593          	li	a1,1
20406034:	0001a517          	auipc	a0,0x1a
20406038:	ee850513          	addi	a0,a0,-280 # 2041ff1c <__func__.3846+0x234>
2040603c:	6690c0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20406040:	fff00793          	li	a5,-1
20406044:	fef42623          	sw	a5,-20(s0)
  }
  return status;
20406048:	fec42783          	lw	a5,-20(s0)
}
2040604c:	00078513          	mv	a0,a5
20406050:	08c12083          	lw	ra,140(sp)
20406054:	08812403          	lw	s0,136(sp)
20406058:	08412483          	lw	s1,132(sp)
2040605c:	09010113          	addi	sp,sp,144
20406060:	00008067          	ret

20406064 <TVMGraphExecutor_GetEntryId>:

uint32_t TVMGraphExecutor_GetEntryId(TVMGraphExecutor* executor, uint32_t nid, uint32_t index) {
20406064:	fe010113          	addi	sp,sp,-32
20406068:	00812e23          	sw	s0,28(sp)
2040606c:	02010413          	addi	s0,sp,32
20406070:	fea42623          	sw	a0,-20(s0)
20406074:	feb42423          	sw	a1,-24(s0)
20406078:	fec42223          	sw	a2,-28(s0)
  return executor->node_row_ptr[nid] + index;
2040607c:	fec42783          	lw	a5,-20(s0)
20406080:	0107a703          	lw	a4,16(a5)
20406084:	fe842783          	lw	a5,-24(s0)
20406088:	00279793          	slli	a5,a5,0x2
2040608c:	00f707b3          	add	a5,a4,a5
20406090:	0007a703          	lw	a4,0(a5)
20406094:	fe442783          	lw	a5,-28(s0)
20406098:	00f707b3          	add	a5,a4,a5
}
2040609c:	00078513          	mv	a0,a5
204060a0:	01c12403          	lw	s0,28(sp)
204060a4:	02010113          	addi	sp,sp,32
204060a8:	00008067          	ret

204060ac <TVMGraphExecutor_GetNumInputs>:
/*!
 * \brief Get the number of input tensors allocated.
 * \param executor The graph executor.
 * \return the number of input tensors allocated.
 */
int TVMGraphExecutor_GetNumInputs(TVMGraphExecutor* executor) {
204060ac:	fe010113          	addi	sp,sp,-32
204060b0:	00812e23          	sw	s0,28(sp)
204060b4:	02010413          	addi	s0,sp,32
204060b8:	fea42623          	sw	a0,-20(s0)
  return executor->input_nodes_count;
204060bc:	fec42783          	lw	a5,-20(s0)
204060c0:	00c7a783          	lw	a5,12(a5)
}
204060c4:	00078513          	mv	a0,a5
204060c8:	01c12403          	lw	s0,28(sp)
204060cc:	02010113          	addi	sp,sp,32
204060d0:	00008067          	ret

204060d4 <TVMGraphExecutor_GetInputIndex>:
 * \brief Get the input index given the name of input.
 * \param executor The graph executor.
 * \param name The name of the input.
 * \return The index of input.
 */
int TVMGraphExecutor_GetInputIndex(TVMGraphExecutor* executor, const char* name) {
204060d4:	fd010113          	addi	sp,sp,-48
204060d8:	02112623          	sw	ra,44(sp)
204060dc:	02812423          	sw	s0,40(sp)
204060e0:	02912223          	sw	s1,36(sp)
204060e4:	03010413          	addi	s0,sp,48
204060e8:	fca42e23          	sw	a0,-36(s0)
204060ec:	fcb42c23          	sw	a1,-40(s0)
  uint32_t i;
  int32_t rv = -1;
204060f0:	fff00793          	li	a5,-1
204060f4:	fef42423          	sw	a5,-24(s0)
  for (i = 0; i < executor->input_nodes_count; ++i) {
204060f8:	fe042623          	sw	zero,-20(s0)
204060fc:	06c0006f          	j	20406168 <TVMGraphExecutor_GetInputIndex+0x94>
    uint32_t nid = executor->input_nodes[i];
20406100:	fdc42783          	lw	a5,-36(s0)
20406104:	0087a703          	lw	a4,8(a5)
20406108:	fec42783          	lw	a5,-20(s0)
2040610c:	00279793          	slli	a5,a5,0x2
20406110:	00f707b3          	add	a5,a4,a5
20406114:	0007a783          	lw	a5,0(a5)
20406118:	fef42223          	sw	a5,-28(s0)
    if (!strcmp(executor->nodes[nid].name, name)) {
2040611c:	fdc42783          	lw	a5,-36(s0)
20406120:	0007a483          	lw	s1,0(a5)
20406124:	16c00593          	li	a1,364
20406128:	fe442503          	lw	a0,-28(s0)
2040612c:	640190ef          	jal	ra,2041f76c <__mulsi3>
20406130:	00050793          	mv	a5,a0
20406134:	00f487b3          	add	a5,s1,a5
20406138:	01078793          	addi	a5,a5,16
2040613c:	fd842583          	lw	a1,-40(s0)
20406140:	00078513          	mv	a0,a5
20406144:	0e60d0ef          	jal	ra,2041322a <strcmp>
20406148:	00050793          	mv	a5,a0
2040614c:	00079863          	bnez	a5,2040615c <TVMGraphExecutor_GetInputIndex+0x88>
      rv = i;
20406150:	fec42783          	lw	a5,-20(s0)
20406154:	fef42423          	sw	a5,-24(s0)
      break;
20406158:	0200006f          	j	20406178 <TVMGraphExecutor_GetInputIndex+0xa4>
  for (i = 0; i < executor->input_nodes_count; ++i) {
2040615c:	fec42783          	lw	a5,-20(s0)
20406160:	00178793          	addi	a5,a5,1
20406164:	fef42623          	sw	a5,-20(s0)
20406168:	fdc42783          	lw	a5,-36(s0)
2040616c:	00c7a783          	lw	a5,12(a5)
20406170:	fec42703          	lw	a4,-20(s0)
20406174:	f8f766e3          	bltu	a4,a5,20406100 <TVMGraphExecutor_GetInputIndex+0x2c>
    }
  }
  CHECK_GE(rv, 0, "cannot find '%s' among input.", name);
20406178:	fe842783          	lw	a5,-24(s0)
2040617c:	0207dc63          	bgez	a5,204061b4 <TVMGraphExecutor_GetInputIndex+0xe0>
20406180:	fd842783          	lw	a5,-40(s0)
20406184:	0001a717          	auipc	a4,0x1a
20406188:	0d870713          	addi	a4,a4,216 # 2042025c <__func__.3846+0x574>
2040618c:	0001a697          	auipc	a3,0x1a
20406190:	0d468693          	addi	a3,a3,212 # 20420260 <__func__.3846+0x578>
20406194:	0001a617          	auipc	a2,0x1a
20406198:	0d060613          	addi	a2,a2,208 # 20420264 <__func__.3846+0x57c>
2040619c:	2f300593          	li	a1,755
204061a0:	0001a517          	auipc	a0,0x1a
204061a4:	0c850513          	addi	a0,a0,200 # 20420268 <__func__.3846+0x580>
204061a8:	0b1070ef          	jal	ra,2040da58 <TVMLogf>
204061ac:	50000513          	li	a0,1280
204061b0:	fc0fa0ef          	jal	ra,20400970 <TVMPlatformAbort>
  return rv;
204061b4:	fe842783          	lw	a5,-24(s0)
}
204061b8:	00078513          	mv	a0,a5
204061bc:	02c12083          	lw	ra,44(sp)
204061c0:	02812403          	lw	s0,40(sp)
204061c4:	02412483          	lw	s1,36(sp)
204061c8:	03010113          	addi	sp,sp,48
204061cc:	00008067          	ret

204061d0 <TVMGraphExecutor_SetInput>:
 * \brief set input to the graph based on name.
 * \param executor The graph executor.
 * \param name The name of the input.
 * \param data_in The input data.
 */
void TVMGraphExecutor_SetInput(TVMGraphExecutor* executor, const char* name, DLTensor* data_in) {
204061d0:	fd010113          	addi	sp,sp,-48
204061d4:	02112623          	sw	ra,44(sp)
204061d8:	02812423          	sw	s0,40(sp)
204061dc:	03010413          	addi	s0,sp,48
204061e0:	fca42e23          	sw	a0,-36(s0)
204061e4:	fcb42c23          	sw	a1,-40(s0)
204061e8:	fcc42a23          	sw	a2,-44(s0)
  uint32_t index = TVMGraphExecutor_GetInputIndex(executor, name);
204061ec:	fd842583          	lw	a1,-40(s0)
204061f0:	fdc42503          	lw	a0,-36(s0)
204061f4:	ee1ff0ef          	jal	ra,204060d4 <TVMGraphExecutor_GetInputIndex>
204061f8:	00050793          	mv	a5,a0
204061fc:	fef42623          	sw	a5,-20(s0)
  if (index >= executor->input_nodes_count) {
20406200:	fdc42783          	lw	a5,-36(s0)
20406204:	00c7a783          	lw	a5,12(a5)
20406208:	fec42703          	lw	a4,-20(s0)
2040620c:	02f76663          	bltu	a4,a5,20406238 <TVMGraphExecutor_SetInput+0x68>
    fprintf(stderr, "given index is greater than num of input nodes.\n");
20406210:	5fbfb797          	auipc	a5,0x5fbfb
20406214:	82878793          	addi	a5,a5,-2008 # 80000a38 <_impure_ptr>
20406218:	0007a783          	lw	a5,0(a5)
2040621c:	00c7a783          	lw	a5,12(a5)
20406220:	00078693          	mv	a3,a5
20406224:	03000613          	li	a2,48
20406228:	00100593          	li	a1,1
2040622c:	0001a517          	auipc	a0,0x1a
20406230:	0ac50513          	addi	a0,a0,172 # 204202d8 <__func__.3846+0x5f0>
20406234:	4710c0ef          	jal	ra,20412ea4 <fwrite>
  }
  uint32_t eid = TVMGraphExecutor_GetEntryId(executor, executor->input_nodes[index], 0);
20406238:	fdc42783          	lw	a5,-36(s0)
2040623c:	0087a703          	lw	a4,8(a5)
20406240:	fec42783          	lw	a5,-20(s0)
20406244:	00279793          	slli	a5,a5,0x2
20406248:	00f707b3          	add	a5,a4,a5
2040624c:	0007a783          	lw	a5,0(a5)
20406250:	00000613          	li	a2,0
20406254:	00078593          	mv	a1,a5
20406258:	fdc42503          	lw	a0,-36(s0)
2040625c:	e09ff0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
20406260:	fea42423          	sw	a0,-24(s0)
  executor->data_entry[eid].dl_tensor.data = data_in->data;
20406264:	fdc42783          	lw	a5,-36(s0)
20406268:	0587a683          	lw	a3,88(a5)
2040626c:	fe842703          	lw	a4,-24(s0)
20406270:	00070793          	mv	a5,a4
20406274:	00279793          	slli	a5,a5,0x2
20406278:	00e787b3          	add	a5,a5,a4
2040627c:	00379793          	slli	a5,a5,0x3
20406280:	00f687b3          	add	a5,a3,a5
20406284:	fd442703          	lw	a4,-44(s0)
20406288:	00072703          	lw	a4,0(a4)
2040628c:	00e7a023          	sw	a4,0(a5)
}
20406290:	00000013          	nop
20406294:	02c12083          	lw	ra,44(sp)
20406298:	02812403          	lw	s0,40(sp)
2040629c:	03010113          	addi	sp,sp,48
204062a0:	00008067          	ret

204062a4 <TVMGraphExecutor_LoadParams>:
 * \param param_blob A binary blob of parameter.
 * \param param_size The parameter size.
 * \return The result of this function execution.
 */
int TVMGraphExecutor_LoadParams(TVMGraphExecutor* executor, const char* param_blob,
                                const uint32_t param_size) {
204062a4:	f7010113          	addi	sp,sp,-144
204062a8:	08112623          	sw	ra,140(sp)
204062ac:	08812423          	sw	s0,136(sp)
204062b0:	09212223          	sw	s2,132(sp)
204062b4:	09312023          	sw	s3,128(sp)
204062b8:	07412e23          	sw	s4,124(sp)
204062bc:	07512c23          	sw	s5,120(sp)
204062c0:	09010413          	addi	s0,sp,144
204062c4:	f6a42e23          	sw	a0,-132(s0)
204062c8:	f6b42c23          	sw	a1,-136(s0)
204062cc:	f6c42a23          	sw	a2,-140(s0)
  int status = 0;
204062d0:	fc042e23          	sw	zero,-36(s0)
  const char* bptr = param_blob;
204062d4:	f7842783          	lw	a5,-136(s0)
204062d8:	fcf42223          	sw	a5,-60(s0)
  uint64_t header, reserved;
  memcpy(&header, bptr, sizeof(header));
204062dc:	fc442783          	lw	a5,-60(s0)
204062e0:	0047a803          	lw	a6,4(a5)
204062e4:	0007a783          	lw	a5,0(a5)
204062e8:	faf42c23          	sw	a5,-72(s0)
204062ec:	fb042e23          	sw	a6,-68(s0)
  bptr += sizeof(header);
204062f0:	fc442783          	lw	a5,-60(s0)
204062f4:	00878793          	addi	a5,a5,8
204062f8:	fcf42223          	sw	a5,-60(s0)
  if (header != kTVMNDArrayListMagic) {
204062fc:	fb842683          	lw	a3,-72(s0)
20406300:	fbc42703          	lw	a4,-68(s0)
20406304:	0001a797          	auipc	a5,0x1a
20406308:	4d478793          	addi	a5,a5,1236 # 204207d8 <__func__.3846+0xaf0>
2040630c:	0047a803          	lw	a6,4(a5)
20406310:	0007a783          	lw	a5,0(a5)
20406314:	00068593          	mv	a1,a3
20406318:	00078613          	mv	a2,a5
2040631c:	00c59663          	bne	a1,a2,20406328 <TVMGraphExecutor_LoadParams+0x84>
20406320:	00080793          	mv	a5,a6
20406324:	02f70a63          	beq	a4,a5,20406358 <TVMGraphExecutor_LoadParams+0xb4>
    fprintf(stderr, "Invalid parameters file format");
20406328:	5fbfa797          	auipc	a5,0x5fbfa
2040632c:	71078793          	addi	a5,a5,1808 # 80000a38 <_impure_ptr>
20406330:	0007a783          	lw	a5,0(a5)
20406334:	00c7a783          	lw	a5,12(a5)
20406338:	00078693          	mv	a3,a5
2040633c:	01e00613          	li	a2,30
20406340:	00100593          	li	a1,1
20406344:	0001a517          	auipc	a0,0x1a
20406348:	fc850513          	addi	a0,a0,-56 # 2042030c <__func__.3846+0x624>
2040634c:	3590c0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
20406350:	fff00793          	li	a5,-1
20406354:	fcf42e23          	sw	a5,-36(s0)
  }
  memcpy(&reserved, bptr, sizeof(reserved));
20406358:	fc442783          	lw	a5,-60(s0)
2040635c:	0047a803          	lw	a6,4(a5)
20406360:	0007a783          	lw	a5,0(a5)
20406364:	faf42823          	sw	a5,-80(s0)
20406368:	fb042a23          	sw	a6,-76(s0)
  bptr += sizeof(reserved);
2040636c:	fc442783          	lw	a5,-60(s0)
20406370:	00878793          	addi	a5,a5,8
20406374:	fcf42223          	sw	a5,-60(s0)

  // read names
  char* names = NULL;
20406378:	fa042623          	sw	zero,-84(s0)
  DLDevice dev = {kDLCPU, 0};
2040637c:	00100793          	li	a5,1
20406380:	faf42223          	sw	a5,-92(s0)
20406384:	fa042423          	sw	zero,-88(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(
      TVM_CRT_MAX_STRLEN_PARAM_NAME * executor->nodes_count, dev, (void**)&names);
20406388:	f7c42783          	lw	a5,-132(s0)
2040638c:	0047a703          	lw	a4,4(a5)
20406390:	00070793          	mv	a5,a4
20406394:	00279793          	slli	a5,a5,0x2
20406398:	00e787b3          	add	a5,a5,a4
2040639c:	00479793          	slli	a5,a5,0x4
204063a0:	00078713          	mv	a4,a5
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(
204063a4:	fac40793          	addi	a5,s0,-84
204063a8:	00078693          	mv	a3,a5
204063ac:	fa442583          	lw	a1,-92(s0)
204063b0:	fa842603          	lw	a2,-88(s0)
204063b4:	00070513          	mv	a0,a4
204063b8:	e44fa0ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
204063bc:	fca42a23          	sw	a0,-44(s0)
  if (err != kTvmErrorNoError) {
204063c0:	fd442783          	lw	a5,-44(s0)
204063c4:	02078c63          	beqz	a5,204063fc <TVMGraphExecutor_LoadParams+0x158>
    fprintf(stderr, "memory allocate error: %08x", err);
204063c8:	5fbfa797          	auipc	a5,0x5fbfa
204063cc:	67078793          	addi	a5,a5,1648 # 80000a38 <_impure_ptr>
204063d0:	0007a783          	lw	a5,0(a5)
204063d4:	00c7a783          	lw	a5,12(a5)
204063d8:	fd442603          	lw	a2,-44(s0)
204063dc:	0001a597          	auipc	a1,0x1a
204063e0:	bb458593          	addi	a1,a1,-1100 # 2041ff90 <__func__.3846+0x2a8>
204063e4:	00078513          	mv	a0,a5
204063e8:	2230c0ef          	jal	ra,20412e0a <fprintf>
    status = -1;
204063ec:	fff00793          	li	a5,-1
204063f0:	fcf42e23          	sw	a5,-36(s0)
    return status;
204063f4:	fdc42783          	lw	a5,-36(s0)
204063f8:	4980006f          	j	20406890 <TVMGraphExecutor_LoadParams+0x5ec>
  }
  memset(names, 0, TVM_CRT_MAX_STRLEN_PARAM_NAME * executor->nodes_count);
204063fc:	fac42683          	lw	a3,-84(s0)
20406400:	f7c42783          	lw	a5,-132(s0)
20406404:	0047a703          	lw	a4,4(a5)
20406408:	00070793          	mv	a5,a4
2040640c:	00279793          	slli	a5,a5,0x2
20406410:	00e787b3          	add	a5,a5,a4
20406414:	00479793          	slli	a5,a5,0x4
20406418:	00078613          	mv	a2,a5
2040641c:	00000593          	li	a1,0
20406420:	00068513          	mv	a0,a3
20406424:	48b0c0ef          	jal	ra,204130ae <memset>
  uint64_t names_count;
  int idx;
  memcpy(&names_count, bptr, sizeof(names_count));
20406428:	fc442783          	lw	a5,-60(s0)
2040642c:	0047a803          	lw	a6,4(a5)
20406430:	0007a783          	lw	a5,0(a5)
20406434:	f8f42c23          	sw	a5,-104(s0)
20406438:	f9042e23          	sw	a6,-100(s0)
  bptr += sizeof(names_count);
2040643c:	fc442783          	lw	a5,-60(s0)
20406440:	00878793          	addi	a5,a5,8
20406444:	fcf42223          	sw	a5,-60(s0)
  for (idx = 0; idx < names_count; idx++) {
20406448:	fc042c23          	sw	zero,-40(s0)
2040644c:	0d00006f          	j	2040651c <TVMGraphExecutor_LoadParams+0x278>
    uint64_t name_length;
    memcpy(&name_length, bptr, sizeof(name_length));
20406450:	fc442783          	lw	a5,-60(s0)
20406454:	0047a803          	lw	a6,4(a5)
20406458:	0007a783          	lw	a5,0(a5)
2040645c:	f8f42423          	sw	a5,-120(s0)
20406460:	f9042623          	sw	a6,-116(s0)
    bptr += sizeof(name_length);
20406464:	fc442783          	lw	a5,-60(s0)
20406468:	00878793          	addi	a5,a5,8
2040646c:	fcf42223          	sw	a5,-60(s0)
    if (name_length >= TVM_CRT_MAX_STRLEN_PARAM_NAME) {
20406470:	f8842783          	lw	a5,-120(s0)
20406474:	f8c42803          	lw	a6,-116(s0)
20406478:	00080713          	mv	a4,a6
2040647c:	00071c63          	bnez	a4,20406494 <TVMGraphExecutor_LoadParams+0x1f0>
20406480:	00080713          	mv	a4,a6
20406484:	04071063          	bnez	a4,204064c4 <TVMGraphExecutor_LoadParams+0x220>
20406488:	00078713          	mv	a4,a5
2040648c:	04f00793          	li	a5,79
20406490:	02e7fa63          	bleu	a4,a5,204064c4 <TVMGraphExecutor_LoadParams+0x220>
      fprintf(stderr, "Error: function name longer than expected.\n");
20406494:	5fbfa797          	auipc	a5,0x5fbfa
20406498:	5a478793          	addi	a5,a5,1444 # 80000a38 <_impure_ptr>
2040649c:	0007a783          	lw	a5,0(a5)
204064a0:	00c7a783          	lw	a5,12(a5)
204064a4:	00078693          	mv	a3,a5
204064a8:	02b00613          	li	a2,43
204064ac:	00100593          	li	a1,1
204064b0:	0001a517          	auipc	a0,0x1a
204064b4:	e7c50513          	addi	a0,a0,-388 # 2042032c <__func__.3846+0x644>
204064b8:	1ed0c0ef          	jal	ra,20412ea4 <fwrite>
      status = -1;
204064bc:	fff00793          	li	a5,-1
204064c0:	fcf42e23          	sw	a5,-36(s0)
    }
    memcpy(names + TVM_CRT_MAX_STRLEN_PARAM_NAME * idx, bptr, name_length);
204064c4:	fac42683          	lw	a3,-84(s0)
204064c8:	fd842703          	lw	a4,-40(s0)
204064cc:	00070793          	mv	a5,a4
204064d0:	00279793          	slli	a5,a5,0x2
204064d4:	00e787b3          	add	a5,a5,a4
204064d8:	00479793          	slli	a5,a5,0x4
204064dc:	00f68733          	add	a4,a3,a5
204064e0:	fc442683          	lw	a3,-60(s0)
204064e4:	f8842783          	lw	a5,-120(s0)
204064e8:	f8c42803          	lw	a6,-116(s0)
204064ec:	00078613          	mv	a2,a5
204064f0:	00068593          	mv	a1,a3
204064f4:	00070513          	mv	a0,a4
204064f8:	2f90c0ef          	jal	ra,20412ff0 <memcpy>
    bptr += name_length;
204064fc:	fc442703          	lw	a4,-60(s0)
20406500:	f8842783          	lw	a5,-120(s0)
20406504:	f8c42803          	lw	a6,-116(s0)
20406508:	00f707b3          	add	a5,a4,a5
2040650c:	fcf42223          	sw	a5,-60(s0)
  for (idx = 0; idx < names_count; idx++) {
20406510:	fd842783          	lw	a5,-40(s0)
20406514:	00178793          	addi	a5,a5,1
20406518:	fcf42c23          	sw	a5,-40(s0)
2040651c:	fd842783          	lw	a5,-40(s0)
20406520:	00078913          	mv	s2,a5
20406524:	41f7d793          	srai	a5,a5,0x1f
20406528:	00078993          	mv	s3,a5
2040652c:	f9842783          	lw	a5,-104(s0)
20406530:	f9c42803          	lw	a6,-100(s0)
20406534:	00080693          	mv	a3,a6
20406538:	00098713          	mv	a4,s3
2040653c:	f0d76ae3          	bltu	a4,a3,20406450 <TVMGraphExecutor_LoadParams+0x1ac>
20406540:	00080693          	mv	a3,a6
20406544:	00098713          	mv	a4,s3
20406548:	00e69863          	bne	a3,a4,20406558 <TVMGraphExecutor_LoadParams+0x2b4>
2040654c:	00078713          	mv	a4,a5
20406550:	00090793          	mv	a5,s2
20406554:	eee7eee3          	bltu	a5,a4,20406450 <TVMGraphExecutor_LoadParams+0x1ac>
  }

  // read sizes
  uint64_t sz;
  memcpy(&sz, bptr, sizeof(sz));
20406558:	fc442783          	lw	a5,-60(s0)
2040655c:	0047a803          	lw	a6,4(a5)
20406560:	0007a783          	lw	a5,0(a5)
20406564:	f8f42823          	sw	a5,-112(s0)
20406568:	f9042a23          	sw	a6,-108(s0)
  bptr += sizeof(sz);
2040656c:	fc442783          	lw	a5,-60(s0)
20406570:	00878793          	addi	a5,a5,8
20406574:	fcf42223          	sw	a5,-60(s0)
  uint32_t size = sz;
20406578:	f9042783          	lw	a5,-112(s0)
2040657c:	f9442803          	lw	a6,-108(s0)
20406580:	fcf42823          	sw	a5,-48(s0)
  if (size != names_count) {
20406584:	fd042783          	lw	a5,-48(s0)
20406588:	00078a13          	mv	s4,a5
2040658c:	00000a93          	li	s5,0
20406590:	f9842783          	lw	a5,-104(s0)
20406594:	f9c42803          	lw	a6,-100(s0)
20406598:	000a0693          	mv	a3,s4
2040659c:	00078713          	mv	a4,a5
204065a0:	00e69863          	bne	a3,a4,204065b0 <TVMGraphExecutor_LoadParams+0x30c>
204065a4:	000a8713          	mv	a4,s5
204065a8:	00080793          	mv	a5,a6
204065ac:	02f70a63          	beq	a4,a5,204065e0 <TVMGraphExecutor_LoadParams+0x33c>
    fprintf(stderr, "Invalid parameters file format\n");
204065b0:	5fbfa797          	auipc	a5,0x5fbfa
204065b4:	48878793          	addi	a5,a5,1160 # 80000a38 <_impure_ptr>
204065b8:	0007a783          	lw	a5,0(a5)
204065bc:	00c7a783          	lw	a5,12(a5)
204065c0:	00078693          	mv	a3,a5
204065c4:	01f00613          	li	a2,31
204065c8:	00100593          	li	a1,1
204065cc:	0001a517          	auipc	a0,0x1a
204065d0:	d8c50513          	addi	a0,a0,-628 # 20420358 <__func__.3846+0x670>
204065d4:	0d10c0ef          	jal	ra,20412ea4 <fwrite>
    status = -1;
204065d8:	fff00793          	li	a5,-1
204065dc:	fcf42e23          	sw	a5,-36(s0)
  }

  for (idx = 0; idx < size; idx++) {
204065e0:	fc042c23          	sw	zero,-40(s0)
204065e4:	26c0006f          	j	20406850 <TVMGraphExecutor_LoadParams+0x5ac>
    int32_t in_idx =
        TVMGraphExecutor_GetInputIndex(executor, names + TVM_CRT_MAX_STRLEN_PARAM_NAME * idx);
204065e8:	fac42683          	lw	a3,-84(s0)
204065ec:	fd842703          	lw	a4,-40(s0)
204065f0:	00070793          	mv	a5,a4
204065f4:	00279793          	slli	a5,a5,0x2
204065f8:	00e787b3          	add	a5,a5,a4
204065fc:	00479793          	slli	a5,a5,0x4
20406600:	00f687b3          	add	a5,a3,a5
    int32_t in_idx =
20406604:	00078593          	mv	a1,a5
20406608:	f7c42503          	lw	a0,-132(s0)
2040660c:	ac9ff0ef          	jal	ra,204060d4 <TVMGraphExecutor_GetInputIndex>
20406610:	fca42623          	sw	a0,-52(s0)
    CHECK_GT(in_idx, 0, "Found param for non-existent input: %s\n",
20406614:	fcc42783          	lw	a5,-52(s0)
20406618:	04f04863          	bgtz	a5,20406668 <TVMGraphExecutor_LoadParams+0x3c4>
2040661c:	fac42683          	lw	a3,-84(s0)
20406620:	fd842703          	lw	a4,-40(s0)
20406624:	00070793          	mv	a5,a4
20406628:	00279793          	slli	a5,a5,0x2
2040662c:	00e787b3          	add	a5,a5,a4
20406630:	00479793          	slli	a5,a5,0x4
20406634:	00f687b3          	add	a5,a3,a5
20406638:	0001a717          	auipc	a4,0x1a
2040663c:	c2470713          	addi	a4,a4,-988 # 2042025c <__func__.3846+0x574>
20406640:	0001a697          	auipc	a3,0x1a
20406644:	d3868693          	addi	a3,a3,-712 # 20420378 <__func__.3846+0x690>
20406648:	0001a617          	auipc	a2,0x1a
2040664c:	d3460613          	addi	a2,a2,-716 # 2042037c <__func__.3846+0x694>
20406650:	34400593          	li	a1,836
20406654:	0001a517          	auipc	a0,0x1a
20406658:	d3050513          	addi	a0,a0,-720 # 20420384 <__func__.3846+0x69c>
2040665c:	3fc070ef          	jal	ra,2040da58 <TVMLogf>
20406660:	50000513          	li	a0,1280
20406664:	b0cfa0ef          	jal	ra,20400970 <TVMPlatformAbort>
             names + TVM_CRT_MAX_STRLEN_PARAM_NAME * idx);
    uint32_t eid = TVMGraphExecutor_GetEntryId(executor, executor->input_nodes[in_idx], 0);
20406668:	f7c42783          	lw	a5,-132(s0)
2040666c:	0087a703          	lw	a4,8(a5)
20406670:	fcc42783          	lw	a5,-52(s0)
20406674:	00279793          	slli	a5,a5,0x2
20406678:	00f707b3          	add	a5,a4,a5
2040667c:	0007a783          	lw	a5,0(a5)
20406680:	00000613          	li	a2,0
20406684:	00078593          	mv	a1,a5
20406688:	f7c42503          	lw	a0,-132(s0)
2040668c:	9d9ff0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
20406690:	fca42423          	sw	a0,-56(s0)
    if (!(eid < executor->data_entry_count)) {
20406694:	f7c42783          	lw	a5,-132(s0)
20406698:	05c7a783          	lw	a5,92(a5)
2040669c:	fc842703          	lw	a4,-56(s0)
204066a0:	02f76e63          	bltu	a4,a5,204066dc <TVMGraphExecutor_LoadParams+0x438>
      fprintf(stderr, "`entry_id`=%d is greater than expected(%d).\n", eid,
204066a4:	5fbfa797          	auipc	a5,0x5fbfa
204066a8:	39478793          	addi	a5,a5,916 # 80000a38 <_impure_ptr>
204066ac:	0007a783          	lw	a5,0(a5)
204066b0:	00c7a703          	lw	a4,12(a5)
204066b4:	f7c42783          	lw	a5,-132(s0)
204066b8:	05c7a783          	lw	a5,92(a5)
204066bc:	00078693          	mv	a3,a5
204066c0:	fc842603          	lw	a2,-56(s0)
204066c4:	0001a597          	auipc	a1,0x1a
204066c8:	d3c58593          	addi	a1,a1,-708 # 20420400 <__func__.3846+0x718>
204066cc:	00070513          	mv	a0,a4
204066d0:	73a0c0ef          	jal	ra,20412e0a <fprintf>
              executor->data_entry_count);
      status = -1;
204066d4:	fff00793          	li	a5,-1
204066d8:	fcf42e23          	sw	a5,-36(s0)
    }

    if (executor->data_entry[eid].dl_tensor.shape) {
204066dc:	f7c42783          	lw	a5,-132(s0)
204066e0:	0587a683          	lw	a3,88(a5)
204066e4:	fc842703          	lw	a4,-56(s0)
204066e8:	00070793          	mv	a5,a4
204066ec:	00279793          	slli	a5,a5,0x2
204066f0:	00e787b3          	add	a5,a5,a4
204066f4:	00379793          	slli	a5,a5,0x3
204066f8:	00f687b3          	add	a5,a3,a5
204066fc:	0147a783          	lw	a5,20(a5)
20406700:	06078863          	beqz	a5,20406770 <TVMGraphExecutor_LoadParams+0x4cc>
      err = TVMPlatformMemoryFree(executor->data_entry[eid].dl_tensor.shape, dev);
20406704:	f7c42783          	lw	a5,-132(s0)
20406708:	0587a683          	lw	a3,88(a5)
2040670c:	fc842703          	lw	a4,-56(s0)
20406710:	00070793          	mv	a5,a4
20406714:	00279793          	slli	a5,a5,0x2
20406718:	00e787b3          	add	a5,a5,a4
2040671c:	00379793          	slli	a5,a5,0x3
20406720:	00f687b3          	add	a5,a3,a5
20406724:	0147a783          	lw	a5,20(a5)
20406728:	fa442583          	lw	a1,-92(s0)
2040672c:	fa842603          	lw	a2,-88(s0)
20406730:	00078513          	mv	a0,a5
20406734:	b2cfa0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20406738:	fca42a23          	sw	a0,-44(s0)
      if (err != kTvmErrorNoError) {
2040673c:	fd442783          	lw	a5,-44(s0)
20406740:	00078663          	beqz	a5,2040674c <TVMGraphExecutor_LoadParams+0x4a8>
        status = -1;
20406744:	fff00793          	li	a5,-1
20406748:	fcf42e23          	sw	a5,-36(s0)
      }
      executor->data_entry[eid].dl_tensor.shape = 0;
2040674c:	f7c42783          	lw	a5,-132(s0)
20406750:	0587a683          	lw	a3,88(a5)
20406754:	fc842703          	lw	a4,-56(s0)
20406758:	00070793          	mv	a5,a4
2040675c:	00279793          	slli	a5,a5,0x2
20406760:	00e787b3          	add	a5,a5,a4
20406764:	00379793          	slli	a5,a5,0x3
20406768:	00f687b3          	add	a5,a3,a5
2040676c:	0007aa23          	sw	zero,20(a5)
    }
    if (executor->data_entry[eid].dl_tensor.data) {
20406770:	f7c42783          	lw	a5,-132(s0)
20406774:	0587a683          	lw	a3,88(a5)
20406778:	fc842703          	lw	a4,-56(s0)
2040677c:	00070793          	mv	a5,a4
20406780:	00279793          	slli	a5,a5,0x2
20406784:	00e787b3          	add	a5,a5,a4
20406788:	00379793          	slli	a5,a5,0x3
2040678c:	00f687b3          	add	a5,a3,a5
20406790:	0007a783          	lw	a5,0(a5)
20406794:	06078863          	beqz	a5,20406804 <TVMGraphExecutor_LoadParams+0x560>
      err = TVMPlatformMemoryFree(executor->data_entry[eid].dl_tensor.data, dev);
20406798:	f7c42783          	lw	a5,-132(s0)
2040679c:	0587a683          	lw	a3,88(a5)
204067a0:	fc842703          	lw	a4,-56(s0)
204067a4:	00070793          	mv	a5,a4
204067a8:	00279793          	slli	a5,a5,0x2
204067ac:	00e787b3          	add	a5,a5,a4
204067b0:	00379793          	slli	a5,a5,0x3
204067b4:	00f687b3          	add	a5,a3,a5
204067b8:	0007a783          	lw	a5,0(a5)
204067bc:	fa442583          	lw	a1,-92(s0)
204067c0:	fa842603          	lw	a2,-88(s0)
204067c4:	00078513          	mv	a0,a5
204067c8:	a98fa0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
204067cc:	fca42a23          	sw	a0,-44(s0)
      if (err != kTvmErrorNoError) {
204067d0:	fd442783          	lw	a5,-44(s0)
204067d4:	00078663          	beqz	a5,204067e0 <TVMGraphExecutor_LoadParams+0x53c>
        status = -1;
204067d8:	fff00793          	li	a5,-1
204067dc:	fcf42e23          	sw	a5,-36(s0)
      }
      executor->data_entry[eid].dl_tensor.data = 0;
204067e0:	f7c42783          	lw	a5,-132(s0)
204067e4:	0587a683          	lw	a3,88(a5)
204067e8:	fc842703          	lw	a4,-56(s0)
204067ec:	00070793          	mv	a5,a4
204067f0:	00279793          	slli	a5,a5,0x2
204067f4:	00e787b3          	add	a5,a5,a4
204067f8:	00379793          	slli	a5,a5,0x3
204067fc:	00f687b3          	add	a5,a3,a5
20406800:	0007a023          	sw	zero,0(a5)
    }
    status |= TVMNDArray_Load(&(executor->data_entry[eid]), &bptr);
20406804:	f7c42783          	lw	a5,-132(s0)
20406808:	0587a683          	lw	a3,88(a5)
2040680c:	fc842703          	lw	a4,-56(s0)
20406810:	00070793          	mv	a5,a4
20406814:	00279793          	slli	a5,a5,0x2
20406818:	00e787b3          	add	a5,a5,a4
2040681c:	00379793          	slli	a5,a5,0x3
20406820:	00f687b3          	add	a5,a3,a5
20406824:	fc440713          	addi	a4,s0,-60
20406828:	00070593          	mv	a1,a4
2040682c:	00078513          	mv	a0,a5
20406830:	da8fc0ef          	jal	ra,20402dd8 <TVMNDArray_Load>
20406834:	00050713          	mv	a4,a0
20406838:	fdc42783          	lw	a5,-36(s0)
2040683c:	00e7e7b3          	or	a5,a5,a4
20406840:	fcf42e23          	sw	a5,-36(s0)
  for (idx = 0; idx < size; idx++) {
20406844:	fd842783          	lw	a5,-40(s0)
20406848:	00178793          	addi	a5,a5,1
2040684c:	fcf42c23          	sw	a5,-40(s0)
20406850:	fd842783          	lw	a5,-40(s0)
20406854:	fd042703          	lw	a4,-48(s0)
20406858:	d8e7e8e3          	bltu	a5,a4,204065e8 <TVMGraphExecutor_LoadParams+0x344>
           ((float*)entry->dl_tensor.data)[0]);  // NOLINT(*)
#endif                                           // TVM_CRT_DEBUG
  }

  // Release memory
  err = TVMPlatformMemoryFree(names, dev);
2040685c:	fac42783          	lw	a5,-84(s0)
20406860:	fa442583          	lw	a1,-92(s0)
20406864:	fa842603          	lw	a2,-88(s0)
20406868:	00078513          	mv	a0,a5
2040686c:	9f4fa0ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20406870:	fca42a23          	sw	a0,-44(s0)
  if (err != kTvmErrorNoError) {
20406874:	fd442783          	lw	a5,-44(s0)
20406878:	00078a63          	beqz	a5,2040688c <TVMGraphExecutor_LoadParams+0x5e8>
    status = -1;
2040687c:	fff00793          	li	a5,-1
20406880:	fcf42e23          	sw	a5,-36(s0)
    return status;
20406884:	fdc42783          	lw	a5,-36(s0)
20406888:	0080006f          	j	20406890 <TVMGraphExecutor_LoadParams+0x5ec>
  }

  return status;
2040688c:	fdc42783          	lw	a5,-36(s0)
}
20406890:	00078513          	mv	a0,a5
20406894:	08c12083          	lw	ra,140(sp)
20406898:	08812403          	lw	s0,136(sp)
2040689c:	08412903          	lw	s2,132(sp)
204068a0:	08012983          	lw	s3,128(sp)
204068a4:	07c12a03          	lw	s4,124(sp)
204068a8:	07812a83          	lw	s5,120(sp)
204068ac:	09010113          	addi	sp,sp,144
204068b0:	00008067          	ret

204068b4 <TVMGraphExecutor_Run>:

/*!
 * \brief Run all the operations one by one.
 * \param executor The graph executor.
 */
void TVMGraphExecutor_Run(TVMGraphExecutor* executor) {
204068b4:	fd010113          	addi	sp,sp,-48
204068b8:	02112623          	sw	ra,44(sp)
204068bc:	02812423          	sw	s0,40(sp)
204068c0:	02912223          	sw	s1,36(sp)
204068c4:	03212023          	sw	s2,32(sp)
204068c8:	03010413          	addi	s0,sp,48
204068cc:	fca42e23          	sw	a0,-36(s0)
  // setup the array and requirements.
  uint32_t idx;
  for (idx = 0; idx < executor->op_execs_count; ++idx) {
204068d0:	fe042623          	sw	zero,-20(s0)
204068d4:	0780006f          	j	2040694c <TVMGraphExecutor_Run+0x98>
    if (executor->op_execs[idx].fexec) {
204068d8:	fdc42783          	lw	a5,-36(s0)
204068dc:	0607a483          	lw	s1,96(a5)
204068e0:	1d800593          	li	a1,472
204068e4:	fec42503          	lw	a0,-20(s0)
204068e8:	685180ef          	jal	ra,2041f76c <__mulsi3>
204068ec:	00050793          	mv	a5,a0
204068f0:	00f487b3          	add	a5,s1,a5
204068f4:	0c87a783          	lw	a5,200(a5)
204068f8:	04078463          	beqz	a5,20406940 <TVMGraphExecutor_Run+0x8c>
#if TVM_CRT_DEBUG
      printf("calling: %s (%d)\n", executor->op_execs[idx].name, idx);
#endif  // TVM_CRT_DEBUG
      executor->op_execs[idx].Call(&(executor->op_execs[idx]));
204068fc:	fdc42783          	lw	a5,-36(s0)
20406900:	0607a483          	lw	s1,96(a5)
20406904:	1d800593          	li	a1,472
20406908:	fec42503          	lw	a0,-20(s0)
2040690c:	661180ef          	jal	ra,2041f76c <__mulsi3>
20406910:	00050793          	mv	a5,a0
20406914:	00f487b3          	add	a5,s1,a5
20406918:	1d07a903          	lw	s2,464(a5)
2040691c:	fdc42783          	lw	a5,-36(s0)
20406920:	0607a483          	lw	s1,96(a5)
20406924:	1d800593          	li	a1,472
20406928:	fec42503          	lw	a0,-20(s0)
2040692c:	641180ef          	jal	ra,2041f76c <__mulsi3>
20406930:	00050793          	mv	a5,a0
20406934:	00f487b3          	add	a5,s1,a5
20406938:	00078513          	mv	a0,a5
2040693c:	000900e7          	jalr	s2
  for (idx = 0; idx < executor->op_execs_count; ++idx) {
20406940:	fec42783          	lw	a5,-20(s0)
20406944:	00178793          	addi	a5,a5,1
20406948:	fef42623          	sw	a5,-20(s0)
2040694c:	fdc42783          	lw	a5,-36(s0)
20406950:	0647a783          	lw	a5,100(a5)
20406954:	fec42703          	lw	a4,-20(s0)
20406958:	f8f760e3          	bltu	a4,a5,204068d8 <TVMGraphExecutor_Run+0x24>
    }
  }
}
2040695c:	00000013          	nop
20406960:	02c12083          	lw	ra,44(sp)
20406964:	02812403          	lw	s0,40(sp)
20406968:	02412483          	lw	s1,36(sp)
2040696c:	02012903          	lw	s2,32(sp)
20406970:	03010113          	addi	sp,sp,48
20406974:	00008067          	ret

20406978 <TVMGraphExecutor_GetNumOutputs>:
/*!
 * \brief Get the number of output tensors allocated.
 * \param executor The graph executor.
 * \return the number of output tensors allocated.
 */
int TVMGraphExecutor_GetNumOutputs(TVMGraphExecutor* executor) { return executor->outputs_count; }
20406978:	fe010113          	addi	sp,sp,-32
2040697c:	00812e23          	sw	s0,28(sp)
20406980:	02010413          	addi	s0,sp,32
20406984:	fea42623          	sw	a0,-20(s0)
20406988:	fec42783          	lw	a5,-20(s0)
2040698c:	01c7a783          	lw	a5,28(a5)
20406990:	00078513          	mv	a0,a5
20406994:	01c12403          	lw	s0,28(sp)
20406998:	02010113          	addi	sp,sp,32
2040699c:	00008067          	ret

204069a0 <TVMGraphExecutor_GetOutput>:

int TVMGraphExecutor_GetOutput(TVMGraphExecutor* executor, const int32_t idx, DLTensor* out) {
204069a0:	fb010113          	addi	sp,sp,-80
204069a4:	04112623          	sw	ra,76(sp)
204069a8:	04812423          	sw	s0,72(sp)
204069ac:	04912223          	sw	s1,68(sp)
204069b0:	05212023          	sw	s2,64(sp)
204069b4:	05010413          	addi	s0,sp,80
204069b8:	faa42e23          	sw	a0,-68(s0)
204069bc:	fab42c23          	sw	a1,-72(s0)
204069c0:	fac42a23          	sw	a2,-76(s0)
  int status = 0;
204069c4:	fe042623          	sw	zero,-20(s0)
  uint32_t nid = executor->outputs[idx].node_id;
204069c8:	fbc42783          	lw	a5,-68(s0)
204069cc:	0187a703          	lw	a4,24(a5)
204069d0:	fb842783          	lw	a5,-72(s0)
204069d4:	00479793          	slli	a5,a5,0x4
204069d8:	00f707b3          	add	a5,a4,a5
204069dc:	0007a783          	lw	a5,0(a5)
204069e0:	fef42423          	sw	a5,-24(s0)
  uint32_t index = executor->outputs[idx].index;
204069e4:	fbc42783          	lw	a5,-68(s0)
204069e8:	0187a703          	lw	a4,24(a5)
204069ec:	fb842783          	lw	a5,-72(s0)
204069f0:	00479793          	slli	a5,a5,0x4
204069f4:	00f707b3          	add	a5,a4,a5
204069f8:	0047a783          	lw	a5,4(a5)
204069fc:	fef42223          	sw	a5,-28(s0)
  uint32_t eid = TVMGraphExecutor_GetEntryId(executor, nid, index);
20406a00:	fe442603          	lw	a2,-28(s0)
20406a04:	fe842583          	lw	a1,-24(s0)
20406a08:	fbc42503          	lw	a0,-68(s0)
20406a0c:	e58ff0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
20406a10:	fea42023          	sw	a0,-32(s0)

  // copy data section to allocated output tensor
  int32_t elem_bytes = out->dtype.bits / 8;
20406a14:	fb442783          	lw	a5,-76(s0)
20406a18:	0117c783          	lbu	a5,17(a5)
20406a1c:	0037d793          	srli	a5,a5,0x3
20406a20:	0ff7f793          	andi	a5,a5,255
20406a24:	fcf42e23          	sw	a5,-36(s0)
  int64_t size = Shape_Accumulate(out->shape, out->ndim);
20406a28:	fb442783          	lw	a5,-76(s0)
20406a2c:	0147a703          	lw	a4,20(a5)
20406a30:	fb442783          	lw	a5,-76(s0)
20406a34:	00c7a783          	lw	a5,12(a5)
20406a38:	00078593          	mv	a1,a5
20406a3c:	00070513          	mv	a0,a4
20406a40:	f15fc0ef          	jal	ra,20403954 <Shape_Accumulate>
20406a44:	00050793          	mv	a5,a0
20406a48:	fcf42823          	sw	a5,-48(s0)
20406a4c:	fc042a23          	sw	zero,-44(s0)
  DLTensor* tensor = &(executor->data_entry[eid].dl_tensor);
20406a50:	fbc42783          	lw	a5,-68(s0)
20406a54:	0587a683          	lw	a3,88(a5)
20406a58:	fe042703          	lw	a4,-32(s0)
20406a5c:	00070793          	mv	a5,a4
20406a60:	00279793          	slli	a5,a5,0x2
20406a64:	00e787b3          	add	a5,a5,a4
20406a68:	00379793          	slli	a5,a5,0x3
20406a6c:	00f687b3          	add	a5,a3,a5
20406a70:	fcf42623          	sw	a5,-52(s0)
  CHECK(out->ndim == tensor->ndim);
20406a74:	fb442783          	lw	a5,-76(s0)
20406a78:	00c7a703          	lw	a4,12(a5)
20406a7c:	fcc42783          	lw	a5,-52(s0)
20406a80:	00c7a783          	lw	a5,12(a5)
20406a84:	02f70263          	beq	a4,a5,20406aa8 <TVMGraphExecutor_GetOutput+0x108>
20406a88:	0001a617          	auipc	a2,0x1a
20406a8c:	9a860613          	addi	a2,a2,-1624 # 20420430 <__func__.3846+0x748>
20406a90:	38f00593          	li	a1,911
20406a94:	0001a517          	auipc	a0,0x1a
20406a98:	9b850513          	addi	a0,a0,-1608 # 2042044c <__func__.3846+0x764>
20406a9c:	7bd060ef          	jal	ra,2040da58 <TVMLogf>
20406aa0:	50000513          	li	a0,1280
20406aa4:	ecdf90ef          	jal	ra,20400970 <TVMPlatformAbort>
  CHECK(out->dtype.bits == tensor->dtype.bits);
20406aa8:	fb442783          	lw	a5,-76(s0)
20406aac:	0117c703          	lbu	a4,17(a5)
20406ab0:	fcc42783          	lw	a5,-52(s0)
20406ab4:	0117c783          	lbu	a5,17(a5)
20406ab8:	02f70263          	beq	a4,a5,20406adc <TVMGraphExecutor_GetOutput+0x13c>
20406abc:	0001a617          	auipc	a2,0x1a
20406ac0:	9dc60613          	addi	a2,a2,-1572 # 20420498 <__func__.3846+0x7b0>
20406ac4:	39000593          	li	a1,912
20406ac8:	0001a517          	auipc	a0,0x1a
20406acc:	98450513          	addi	a0,a0,-1660 # 2042044c <__func__.3846+0x764>
20406ad0:	789060ef          	jal	ra,2040da58 <TVMLogf>
20406ad4:	50000513          	li	a0,1280
20406ad8:	e99f90ef          	jal	ra,20400970 <TVMPlatformAbort>
  CHECK(Shape_Accumulate(out->shape, out->ndim) == Shape_Accumulate(tensor->shape, tensor->ndim));
20406adc:	fb442783          	lw	a5,-76(s0)
20406ae0:	0147a703          	lw	a4,20(a5)
20406ae4:	fb442783          	lw	a5,-76(s0)
20406ae8:	00c7a783          	lw	a5,12(a5)
20406aec:	00078593          	mv	a1,a5
20406af0:	00070513          	mv	a0,a4
20406af4:	e61fc0ef          	jal	ra,20403954 <Shape_Accumulate>
20406af8:	00050493          	mv	s1,a0
20406afc:	fcc42783          	lw	a5,-52(s0)
20406b00:	0147a703          	lw	a4,20(a5)
20406b04:	fcc42783          	lw	a5,-52(s0)
20406b08:	00c7a783          	lw	a5,12(a5)
20406b0c:	00078593          	mv	a1,a5
20406b10:	00070513          	mv	a0,a4
20406b14:	e41fc0ef          	jal	ra,20403954 <Shape_Accumulate>
20406b18:	00050793          	mv	a5,a0
20406b1c:	02f48263          	beq	s1,a5,20406b40 <TVMGraphExecutor_GetOutput+0x1a0>
20406b20:	0001a617          	auipc	a2,0x1a
20406b24:	9a060613          	addi	a2,a2,-1632 # 204204c0 <__func__.3846+0x7d8>
20406b28:	39100593          	li	a1,913
20406b2c:	0001a517          	auipc	a0,0x1a
20406b30:	92050513          	addi	a0,a0,-1760 # 2042044c <__func__.3846+0x764>
20406b34:	725060ef          	jal	ra,2040da58 <TVMLogf>
20406b38:	50000513          	li	a0,1280
20406b3c:	e35f90ef          	jal	ra,20400970 <TVMPlatformAbort>
  memcpy(out->data, tensor->data, size * elem_bytes);
20406b40:	fb442783          	lw	a5,-76(s0)
20406b44:	0007a483          	lw	s1,0(a5)
20406b48:	fcc42783          	lw	a5,-52(s0)
20406b4c:	0007a903          	lw	s2,0(a5)
20406b50:	fd042783          	lw	a5,-48(s0)
20406b54:	fdc42703          	lw	a4,-36(s0)
20406b58:	00070593          	mv	a1,a4
20406b5c:	00078513          	mv	a0,a5
20406b60:	40d180ef          	jal	ra,2041f76c <__mulsi3>
20406b64:	00050793          	mv	a5,a0
20406b68:	00078613          	mv	a2,a5
20406b6c:	00090593          	mv	a1,s2
20406b70:	00048513          	mv	a0,s1
20406b74:	47c0c0ef          	jal	ra,20412ff0 <memcpy>
  return status;
20406b78:	fec42783          	lw	a5,-20(s0)
}
20406b7c:	00078513          	mv	a0,a5
20406b80:	04c12083          	lw	ra,76(sp)
20406b84:	04812403          	lw	s0,72(sp)
20406b88:	04412483          	lw	s1,68(sp)
20406b8c:	04012903          	lw	s2,64(sp)
20406b90:	05010113          	addi	sp,sp,80
20406b94:	00008067          	ret

20406b98 <TVMGraphExecutor_SetupStorage>:

int TVMGraphExecutor_SetupStorage(TVMGraphExecutor* executor) {
20406b98:	d0010113          	addi	sp,sp,-768
20406b9c:	2e112e23          	sw	ra,764(sp)
20406ba0:	2e812c23          	sw	s0,760(sp)
20406ba4:	2e912a23          	sw	s1,756(sp)
20406ba8:	2f212823          	sw	s2,752(sp)
20406bac:	2f312623          	sw	s3,748(sp)
20406bb0:	2f412423          	sw	s4,744(sp)
20406bb4:	2f512223          	sw	s5,740(sp)
20406bb8:	30010413          	addi	s0,sp,768
20406bbc:	d0a42623          	sw	a0,-756(s0)
  int lookup_linked_param_valid;
  uint32_t idx;

  {
    TVMArgs temp_args;
    temp_args.values[0].v_int64 = 0;
20406bc0:	00000693          	li	a3,0
20406bc4:	00000713          	li	a4,0
20406bc8:	d0d42823          	sw	a3,-752(s0)
20406bcc:	d0e42a23          	sw	a4,-748(s0)
    temp_args.tcodes[0] = kTVMArgInt;
20406bd0:	d6042023          	sw	zero,-672(s0)
    temp_args.values_count = 1;
20406bd4:	00100793          	li	a5,1
20406bd8:	d8f42423          	sw	a5,-632(s0)
    lookup_linked_param_valid =
        (TVMPackedFunc_InitModuleFunc(&lookup_linked_param, executor->module_handle,
20406bdc:	d0c42783          	lw	a5,-756(s0)
20406be0:	0407a703          	lw	a4,64(a5)
20406be4:	d1040693          	addi	a3,s0,-752
20406be8:	dc040793          	addi	a5,s0,-576
20406bec:	0001a617          	auipc	a2,0x1a
20406bf0:	93060613          	addi	a2,a2,-1744 # 2042051c <__func__.3846+0x834>
20406bf4:	00070593          	mv	a1,a4
20406bf8:	00078513          	mv	a0,a5
20406bfc:	af5fc0ef          	jal	ra,204036f0 <TVMPackedFunc_InitModuleFunc>
20406c00:	00050793          	mv	a5,a0
                                      "_lookup_linked_param", &temp_args) == 0);
20406c04:	0017b793          	seqz	a5,a5
20406c08:	0ff7f793          	andi	a5,a5,255
    lookup_linked_param_valid =
20406c0c:	fcf42823          	sw	a5,-48(s0)
  }

  // Grab saved optimization plan from graph.
  TVMGraphExecutorGraphAttr* attrs = &(executor->attrs);
20406c10:	d0c42783          	lw	a5,-756(s0)
20406c14:	02078793          	addi	a5,a5,32
20406c18:	fcf42623          	sw	a5,-52(s0)
  DLDataType* vtype = NULL;
20406c1c:	da042e23          	sw	zero,-580(s0)
  DLDevice alloc_dev = {kDLCPU, 0};
20406c20:	00100793          	li	a5,1
20406c24:	daf42a23          	sw	a5,-588(s0)
20406c28:	da042c23          	sw	zero,-584(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(DLDataType) * attrs->dltype_count,
20406c2c:	fcc42783          	lw	a5,-52(s0)
20406c30:	0107a783          	lw	a5,16(a5)
20406c34:	00279793          	slli	a5,a5,0x2
20406c38:	dbc40713          	addi	a4,s0,-580
20406c3c:	00070693          	mv	a3,a4
20406c40:	db442583          	lw	a1,-588(s0)
20406c44:	db842603          	lw	a2,-584(s0)
20406c48:	00078513          	mv	a0,a5
20406c4c:	db1f90ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20406c50:	fca42423          	sw	a0,-56(s0)
                                                  alloc_dev, (void**)&vtype);
  if (err != kTvmErrorNoError) {
20406c54:	fc842783          	lw	a5,-56(s0)
20406c58:	02078863          	beqz	a5,20406c88 <TVMGraphExecutor_SetupStorage+0xf0>
    fprintf(stderr, "memory allocate error: %08x", err);
20406c5c:	5fbfa797          	auipc	a5,0x5fbfa
20406c60:	ddc78793          	addi	a5,a5,-548 # 80000a38 <_impure_ptr>
20406c64:	0007a783          	lw	a5,0(a5)
20406c68:	00c7a783          	lw	a5,12(a5)
20406c6c:	fc842603          	lw	a2,-56(s0)
20406c70:	00019597          	auipc	a1,0x19
20406c74:	32058593          	addi	a1,a1,800 # 2041ff90 <__func__.3846+0x2a8>
20406c78:	00078513          	mv	a0,a5
20406c7c:	18e0c0ef          	jal	ra,20412e0a <fprintf>
    return -1;
20406c80:	fff00793          	li	a5,-1
20406c84:	06d0006f          	j	204074f0 <TVMGraphExecutor_SetupStorage+0x958>
  }
  for (idx = 0; idx < attrs->dltype_count; idx++) {
20406c88:	fc042e23          	sw	zero,-36(s0)
20406c8c:	0500006f          	j	20406cdc <TVMGraphExecutor_SetupStorage+0x144>
    vtype[idx] = String2DLDataType(attrs->dltype + idx * TVM_CRT_MAX_STRLEN_DLTYPE);
20406c90:	fcc42783          	lw	a5,-52(s0)
20406c94:	00c7a683          	lw	a3,12(a5)
20406c98:	fdc42703          	lw	a4,-36(s0)
20406c9c:	00070793          	mv	a5,a4
20406ca0:	00279793          	slli	a5,a5,0x2
20406ca4:	00e787b3          	add	a5,a5,a4
20406ca8:	00179793          	slli	a5,a5,0x1
20406cac:	00f686b3          	add	a3,a3,a5
20406cb0:	dbc42703          	lw	a4,-580(s0)
20406cb4:	fdc42783          	lw	a5,-36(s0)
20406cb8:	00279793          	slli	a5,a5,0x2
20406cbc:	00f704b3          	add	s1,a4,a5
20406cc0:	00068513          	mv	a0,a3
20406cc4:	f08fc0ef          	jal	ra,204033cc <String2DLDataType>
20406cc8:	00050793          	mv	a5,a0
20406ccc:	00f4a023          	sw	a5,0(s1)
  for (idx = 0; idx < attrs->dltype_count; idx++) {
20406cd0:	fdc42783          	lw	a5,-36(s0)
20406cd4:	00178793          	addi	a5,a5,1
20406cd8:	fcf42e23          	sw	a5,-36(s0)
20406cdc:	fcc42783          	lw	a5,-52(s0)
20406ce0:	0107a783          	lw	a5,16(a5)
20406ce4:	fdc42703          	lw	a4,-36(s0)
20406ce8:	faf764e3          	bltu	a4,a5,20406c90 <TVMGraphExecutor_SetupStorage+0xf8>
  }

  // Size and device type of each storage pool entry.
  TVMGraphExecutorPoolEntry* pool_entry = NULL;
20406cec:	da042823          	sw	zero,-592(s0)
  err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorPoolEntry) * executor->nodes_count,
20406cf0:	d0c42783          	lw	a5,-756(s0)
20406cf4:	0047a703          	lw	a4,4(a5)
20406cf8:	00070793          	mv	a5,a4
20406cfc:	00179793          	slli	a5,a5,0x1
20406d00:	00e787b3          	add	a5,a5,a4
20406d04:	00279793          	slli	a5,a5,0x2
20406d08:	00078713          	mv	a4,a5
20406d0c:	db040793          	addi	a5,s0,-592
20406d10:	00078693          	mv	a3,a5
20406d14:	db442583          	lw	a1,-588(s0)
20406d18:	db842603          	lw	a2,-584(s0)
20406d1c:	00070513          	mv	a0,a4
20406d20:	cddf90ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20406d24:	fca42423          	sw	a0,-56(s0)
                                  alloc_dev, (void**)&pool_entry);
  if (err != kTvmErrorNoError) {
20406d28:	fc842783          	lw	a5,-56(s0)
20406d2c:	02078863          	beqz	a5,20406d5c <TVMGraphExecutor_SetupStorage+0x1c4>
    fprintf(stderr, "memory allocate error: %08x", err);
20406d30:	5fbfa797          	auipc	a5,0x5fbfa
20406d34:	d0878793          	addi	a5,a5,-760 # 80000a38 <_impure_ptr>
20406d38:	0007a783          	lw	a5,0(a5)
20406d3c:	00c7a783          	lw	a5,12(a5)
20406d40:	fc842603          	lw	a2,-56(s0)
20406d44:	00019597          	auipc	a1,0x19
20406d48:	24c58593          	addi	a1,a1,588 # 2041ff90 <__func__.3846+0x2a8>
20406d4c:	00078513          	mv	a0,a5
20406d50:	0ba0c0ef          	jal	ra,20412e0a <fprintf>
    return -1;
20406d54:	fff00793          	li	a5,-1
20406d58:	7980006f          	j	204074f0 <TVMGraphExecutor_SetupStorage+0x958>
  }
  memset(pool_entry, 0, sizeof(TVMGraphExecutorPoolEntry) * executor->nodes_count);
20406d5c:	db042683          	lw	a3,-592(s0)
20406d60:	d0c42783          	lw	a5,-756(s0)
20406d64:	0047a703          	lw	a4,4(a5)
20406d68:	00070793          	mv	a5,a4
20406d6c:	00179793          	slli	a5,a5,0x1
20406d70:	00e787b3          	add	a5,a5,a4
20406d74:	00279793          	slli	a5,a5,0x2
20406d78:	00078613          	mv	a2,a5
20406d7c:	00000593          	li	a1,0
20406d80:	00068513          	mv	a0,a3
20406d84:	32a0c0ef          	jal	ra,204130ae <memset>
  uint32_t pool_entry_count = 0;
20406d88:	fc042c23          	sw	zero,-40(s0)
  // Find the maximum space size.
  for (idx = 0; idx < attrs->shape_count; idx++) {
20406d8c:	fc042e23          	sw	zero,-36(s0)
20406d90:	18c0006f          	j	20406f1c <TVMGraphExecutor_SetupStorage+0x384>
    int storage_id = attrs->storage_id[idx];
20406d94:	fcc42783          	lw	a5,-52(s0)
20406d98:	0047a703          	lw	a4,4(a5)
20406d9c:	fdc42783          	lw	a5,-36(s0)
20406da0:	00279793          	slli	a5,a5,0x2
20406da4:	00f707b3          	add	a5,a4,a5
20406da8:	0007a783          	lw	a5,0(a5)
20406dac:	faf42823          	sw	a5,-80(s0)
    // Use the fallback device if no device index is available.
    int device_type = executor->devices[0].device_type;
20406db0:	d0c42783          	lw	a5,-756(s0)
20406db4:	0447a783          	lw	a5,68(a5)
20406db8:	faf42623          	sw	a5,-84(s0)
    uint32_t size = Shape_Accumulate(attrs->shape + idx * TVM_CRT_MAX_NDIM, attrs->ndim[idx]);
20406dbc:	fcc42783          	lw	a5,-52(s0)
20406dc0:	0147a683          	lw	a3,20(a5)
20406dc4:	fdc42703          	lw	a4,-36(s0)
20406dc8:	00070793          	mv	a5,a4
20406dcc:	00179793          	slli	a5,a5,0x1
20406dd0:	00e787b3          	add	a5,a5,a4
20406dd4:	00479793          	slli	a5,a5,0x4
20406dd8:	00f686b3          	add	a3,a3,a5
20406ddc:	fcc42783          	lw	a5,-52(s0)
20406de0:	0187a703          	lw	a4,24(a5)
20406de4:	fdc42783          	lw	a5,-36(s0)
20406de8:	00279793          	slli	a5,a5,0x2
20406dec:	00f707b3          	add	a5,a4,a5
20406df0:	0007a783          	lw	a5,0(a5)
20406df4:	00078593          	mv	a1,a5
20406df8:	00068513          	mv	a0,a3
20406dfc:	b59fc0ef          	jal	ra,20403954 <Shape_Accumulate>
20406e00:	faa42423          	sw	a0,-88(s0)
    DLDataType t = vtype[idx];
20406e04:	dbc42703          	lw	a4,-580(s0)
20406e08:	fdc42783          	lw	a5,-36(s0)
20406e0c:	00279793          	slli	a5,a5,0x2
20406e10:	00f707b3          	add	a5,a4,a5
20406e14:	0007a783          	lw	a5,0(a5)
20406e18:	daf42623          	sw	a5,-596(s0)
    uint32_t bits = t.bits * t.lanes;
20406e1c:	dad44783          	lbu	a5,-595(s0)
20406e20:	00078713          	mv	a4,a5
20406e24:	dae45783          	lhu	a5,-594(s0)
20406e28:	00078593          	mv	a1,a5
20406e2c:	00070513          	mv	a0,a4
20406e30:	13d180ef          	jal	ra,2041f76c <__mulsi3>
20406e34:	00050793          	mv	a5,a0
20406e38:	faf42223          	sw	a5,-92(s0)
    size_t bytes = ((bits + 7U) / 8U) * size;
20406e3c:	fa442783          	lw	a5,-92(s0)
20406e40:	00778793          	addi	a5,a5,7
20406e44:	0037d793          	srli	a5,a5,0x3
20406e48:	00078593          	mv	a1,a5
20406e4c:	fa842503          	lw	a0,-88(s0)
20406e50:	11d180ef          	jal	ra,2041f76c <__mulsi3>
20406e54:	00050793          	mv	a5,a0
20406e58:	faf42023          	sw	a5,-96(s0)

    uint32_t sid = storage_id;
20406e5c:	fb042783          	lw	a5,-80(s0)
20406e60:	f8f42e23          	sw	a5,-100(s0)
    if (sid >= pool_entry_count) {
20406e64:	f9c42703          	lw	a4,-100(s0)
20406e68:	fd842783          	lw	a5,-40(s0)
20406e6c:	00f76863          	bltu	a4,a5,20406e7c <TVMGraphExecutor_SetupStorage+0x2e4>
      pool_entry_count = sid + 1;
20406e70:	f9c42783          	lw	a5,-100(s0)
20406e74:	00178793          	addi	a5,a5,1
20406e78:	fcf42c23          	sw	a5,-40(s0)
    }
    pool_entry[sid].entry_id = idx;
20406e7c:	db042683          	lw	a3,-592(s0)
20406e80:	f9c42703          	lw	a4,-100(s0)
20406e84:	00070793          	mv	a5,a4
20406e88:	00179793          	slli	a5,a5,0x1
20406e8c:	00e787b3          	add	a5,a5,a4
20406e90:	00279793          	slli	a5,a5,0x2
20406e94:	00f687b3          	add	a5,a3,a5
20406e98:	fdc42703          	lw	a4,-36(s0)
20406e9c:	00e7a423          	sw	a4,8(a5)
    pool_entry[sid].size = MAX(pool_entry[sid].size, bytes);
20406ea0:	db042683          	lw	a3,-592(s0)
20406ea4:	f9c42703          	lw	a4,-100(s0)
20406ea8:	00070793          	mv	a5,a4
20406eac:	00179793          	slli	a5,a5,0x1
20406eb0:	00e787b3          	add	a5,a5,a4
20406eb4:	00279793          	slli	a5,a5,0x2
20406eb8:	00f687b3          	add	a5,a3,a5
20406ebc:	0007a703          	lw	a4,0(a5)
20406ec0:	db042603          	lw	a2,-592(s0)
20406ec4:	f9c42683          	lw	a3,-100(s0)
20406ec8:	00068793          	mv	a5,a3
20406ecc:	00179793          	slli	a5,a5,0x1
20406ed0:	00d787b3          	add	a5,a5,a3
20406ed4:	00279793          	slli	a5,a5,0x2
20406ed8:	00f606b3          	add	a3,a2,a5
20406edc:	fa042783          	lw	a5,-96(s0)
20406ee0:	00e7f463          	bleu	a4,a5,20406ee8 <TVMGraphExecutor_SetupStorage+0x350>
20406ee4:	00070793          	mv	a5,a4
20406ee8:	00f6a023          	sw	a5,0(a3)
    pool_entry[sid].device_type = device_type;
20406eec:	db042683          	lw	a3,-592(s0)
20406ef0:	f9c42703          	lw	a4,-100(s0)
20406ef4:	00070793          	mv	a5,a4
20406ef8:	00179793          	slli	a5,a5,0x1
20406efc:	00e787b3          	add	a5,a5,a4
20406f00:	00279793          	slli	a5,a5,0x2
20406f04:	00f687b3          	add	a5,a3,a5
20406f08:	fac42703          	lw	a4,-84(s0)
20406f0c:	00e7a223          	sw	a4,4(a5)
  for (idx = 0; idx < attrs->shape_count; idx++) {
20406f10:	fdc42783          	lw	a5,-36(s0)
20406f14:	00178793          	addi	a5,a5,1
20406f18:	fcf42e23          	sw	a5,-36(s0)
20406f1c:	fcc42783          	lw	a5,-52(s0)
20406f20:	01c7a783          	lw	a5,28(a5)
20406f24:	fdc42703          	lw	a4,-36(s0)
20406f28:	e6f766e3          	bltu	a4,a5,20406d94 <TVMGraphExecutor_SetupStorage+0x1fc>
  }

  // Allocate the space.
  err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorStorageEntry) * pool_entry_count,
20406f2c:	fd842703          	lw	a4,-40(s0)
20406f30:	00070793          	mv	a5,a4
20406f34:	00179793          	slli	a5,a5,0x1
20406f38:	00e787b3          	add	a5,a5,a4
20406f3c:	00479793          	slli	a5,a5,0x4
20406f40:	00078713          	mv	a4,a5
                                  alloc_dev, (void**)&executor->storage_pool);
20406f44:	d0c42783          	lw	a5,-756(s0)
20406f48:	05078793          	addi	a5,a5,80
  err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorStorageEntry) * pool_entry_count,
20406f4c:	00078693          	mv	a3,a5
20406f50:	db442583          	lw	a1,-588(s0)
20406f54:	db842603          	lw	a2,-584(s0)
20406f58:	00070513          	mv	a0,a4
20406f5c:	aa1f90ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20406f60:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
20406f64:	fc842783          	lw	a5,-56(s0)
20406f68:	02078863          	beqz	a5,20406f98 <TVMGraphExecutor_SetupStorage+0x400>
    fprintf(stderr, "memory allocate error: %08x", err);
20406f6c:	5fbfa797          	auipc	a5,0x5fbfa
20406f70:	acc78793          	addi	a5,a5,-1332 # 80000a38 <_impure_ptr>
20406f74:	0007a783          	lw	a5,0(a5)
20406f78:	00c7a783          	lw	a5,12(a5)
20406f7c:	fc842603          	lw	a2,-56(s0)
20406f80:	00019597          	auipc	a1,0x19
20406f84:	01058593          	addi	a1,a1,16 # 2041ff90 <__func__.3846+0x2a8>
20406f88:	00078513          	mv	a0,a5
20406f8c:	67f0b0ef          	jal	ra,20412e0a <fprintf>
    return -1;
20406f90:	fff00793          	li	a5,-1
20406f94:	55c0006f          	j	204074f0 <TVMGraphExecutor_SetupStorage+0x958>
  }
  for (idx = 0; idx < pool_entry_count; idx++) {
20406f98:	fc042e23          	sw	zero,-36(s0)
20406f9c:	2b80006f          	j	20407254 <TVMGraphExecutor_SetupStorage+0x6bc>
    TVMGraphExecutorPoolEntry pit = pool_entry[idx];
20406fa0:	db042683          	lw	a3,-592(s0)
20406fa4:	fdc42703          	lw	a4,-36(s0)
20406fa8:	00070793          	mv	a5,a4
20406fac:	00179793          	slli	a5,a5,0x1
20406fb0:	00e787b3          	add	a5,a5,a4
20406fb4:	00279793          	slli	a5,a5,0x2
20406fb8:	00f687b3          	add	a5,a3,a5
20406fbc:	0007a703          	lw	a4,0(a5)
20406fc0:	dae42023          	sw	a4,-608(s0)
20406fc4:	0047a703          	lw	a4,4(a5)
20406fc8:	dae42223          	sw	a4,-604(s0)
20406fcc:	0087a783          	lw	a5,8(a5)
20406fd0:	daf42423          	sw	a5,-600(s0)
    DLDevice dev = executor->devices[0];
20406fd4:	d0c42783          	lw	a5,-756(s0)
20406fd8:	0487a803          	lw	a6,72(a5)
20406fdc:	0447a783          	lw	a5,68(a5)
20406fe0:	d8f42c23          	sw	a5,-616(s0)
20406fe4:	d9042e23          	sw	a6,-612(s0)
    uint8_t did_find_linked_param = 0;
20406fe8:	fc040ba3          	sb	zero,-41(s0)
    if (lookup_linked_param_valid) {
20406fec:	fd042783          	lw	a5,-48(s0)
20406ff0:	14078c63          	beqz	a5,20407148 <TVMGraphExecutor_SetupStorage+0x5b0>
      lookup_linked_param.args.values[0].v_int64 = idx;
20406ff4:	fdc42783          	lw	a5,-36(s0)
20406ff8:	00078913          	mv	s2,a5
20406ffc:	00000993          	li	s3,0
20407000:	e9242823          	sw	s2,-368(s0)
20407004:	e9342a23          	sw	s3,-364(s0)
      CHECK_EQ(lookup_linked_param.Call(&lookup_linked_param), 0, "lookup_linked_param");
20407008:	f9042703          	lw	a4,-112(s0)
2040700c:	dc040793          	addi	a5,s0,-576
20407010:	00078513          	mv	a0,a5
20407014:	000700e7          	jalr	a4
20407018:	00050793          	mv	a5,a0
2040701c:	02078a63          	beqz	a5,20407050 <TVMGraphExecutor_SetupStorage+0x4b8>
20407020:	00019717          	auipc	a4,0x19
20407024:	23c70713          	addi	a4,a4,572 # 2042025c <__func__.3846+0x574>
20407028:	00019697          	auipc	a3,0x19
2040702c:	50c68693          	addi	a3,a3,1292 # 20420534 <__func__.3846+0x84c>
20407030:	00019617          	auipc	a2,0x19
20407034:	50860613          	addi	a2,a2,1288 # 20420538 <__func__.3846+0x850>
20407038:	3dd00593          	li	a1,989
2040703c:	00019517          	auipc	a0,0x19
20407040:	52c50513          	addi	a0,a0,1324 # 20420568 <__func__.3846+0x880>
20407044:	215060ef          	jal	ra,2040da58 <TVMLogf>
20407048:	50000513          	li	a0,1280
2040704c:	925f90ef          	jal	ra,20400970 <TVMPlatformAbort>

      void* linked_param_data = lookup_linked_param.ret_value.values[0].v_handle;
20407050:	f1042783          	lw	a5,-240(s0)
20407054:	faf42e23          	sw	a5,-68(s0)
      if (linked_param_data != NULL) {
20407058:	fbc42783          	lw	a5,-68(s0)
2040705c:	0e078663          	beqz	a5,20407148 <TVMGraphExecutor_SetupStorage+0x5b0>
        executor->storage_pool[executor->storage_pool_count].is_linked_param = 1;
20407060:	d0c42783          	lw	a5,-756(s0)
20407064:	0507a683          	lw	a3,80(a5)
20407068:	d0c42783          	lw	a5,-756(s0)
2040706c:	0547a703          	lw	a4,84(a5)
20407070:	00070793          	mv	a5,a4
20407074:	00179793          	slli	a5,a5,0x1
20407078:	00e787b3          	add	a5,a5,a4
2040707c:	00479793          	slli	a5,a5,0x4
20407080:	00f687b3          	add	a5,a3,a5
20407084:	00100713          	li	a4,1
20407088:	00e78023          	sb	a4,0(a5)
        DLTensor* tensor = &executor->storage_pool[executor->storage_pool_count].array.dl_tensor;
2040708c:	d0c42783          	lw	a5,-756(s0)
20407090:	0507a683          	lw	a3,80(a5)
20407094:	d0c42783          	lw	a5,-756(s0)
20407098:	0547a703          	lw	a4,84(a5)
2040709c:	00070793          	mv	a5,a4
204070a0:	00179793          	slli	a5,a5,0x1
204070a4:	00e787b3          	add	a5,a5,a4
204070a8:	00479793          	slli	a5,a5,0x4
204070ac:	00f687b3          	add	a5,a3,a5
204070b0:	00878793          	addi	a5,a5,8
204070b4:	faf42c23          	sw	a5,-72(s0)
        tensor->data = linked_param_data;
204070b8:	fb842783          	lw	a5,-72(s0)
204070bc:	fbc42703          	lw	a4,-68(s0)
204070c0:	00e7a023          	sw	a4,0(a5)
        tensor->device = dev;
204070c4:	fb842703          	lw	a4,-72(s0)
204070c8:	d9842783          	lw	a5,-616(s0)
204070cc:	d9c42803          	lw	a6,-612(s0)
204070d0:	00f72223          	sw	a5,4(a4)
204070d4:	01072423          	sw	a6,8(a4)
        tensor->ndim = attrs->ndim[pit.entry_id];
204070d8:	fcc42783          	lw	a5,-52(s0)
204070dc:	0187a703          	lw	a4,24(a5)
204070e0:	da842783          	lw	a5,-600(s0)
204070e4:	00279793          	slli	a5,a5,0x2
204070e8:	00f707b3          	add	a5,a4,a5
204070ec:	0007a783          	lw	a5,0(a5)
204070f0:	00078713          	mv	a4,a5
204070f4:	fb842783          	lw	a5,-72(s0)
204070f8:	00e7a623          	sw	a4,12(a5)
        tensor->shape = attrs->shape + idx * TVM_CRT_MAX_NDIM;
204070fc:	fcc42783          	lw	a5,-52(s0)
20407100:	0147a683          	lw	a3,20(a5)
20407104:	fdc42703          	lw	a4,-36(s0)
20407108:	00070793          	mv	a5,a4
2040710c:	00179793          	slli	a5,a5,0x1
20407110:	00e787b3          	add	a5,a5,a4
20407114:	00479793          	slli	a5,a5,0x4
20407118:	00f68733          	add	a4,a3,a5
2040711c:	fb842783          	lw	a5,-72(s0)
20407120:	00e7aa23          	sw	a4,20(a5)
        tensor->strides = NULL;
20407124:	fb842783          	lw	a5,-72(s0)
20407128:	0007ac23          	sw	zero,24(a5)
        tensor->byte_offset = 0;
2040712c:	fb842783          	lw	a5,-72(s0)
20407130:	00000693          	li	a3,0
20407134:	00000713          	li	a4,0
20407138:	02d7a023          	sw	a3,32(a5)
2040713c:	02e7a223          	sw	a4,36(a5)
        did_find_linked_param = 1;
20407140:	00100793          	li	a5,1
20407144:	fcf40ba3          	sb	a5,-41(s0)
      }
    }
    if (did_find_linked_param == 0) {
20407148:	fd744783          	lbu	a5,-41(s0)
2040714c:	0e079463          	bnez	a5,20407234 <TVMGraphExecutor_SetupStorage+0x69c>
      DLDataType dtype = {kDLFloat, 32, 1};
20407150:	00200793          	li	a5,2
20407154:	d8f40a23          	sb	a5,-620(s0)
20407158:	02000793          	li	a5,32
2040715c:	d8f40aa3          	sb	a5,-619(s0)
20407160:	00100793          	li	a5,1
20407164:	d8f41b23          	sh	a5,-618(s0)
      int64_t shape[TVM_CRT_MAX_NDIM] = {
20407168:	d0042823          	sw	zero,-752(s0)
2040716c:	d0042a23          	sw	zero,-748(s0)
20407170:	d0042c23          	sw	zero,-744(s0)
20407174:	d0042e23          	sw	zero,-740(s0)
20407178:	d2042023          	sw	zero,-736(s0)
2040717c:	d2042223          	sw	zero,-732(s0)
20407180:	d2042423          	sw	zero,-728(s0)
20407184:	d2042623          	sw	zero,-724(s0)
20407188:	d2042823          	sw	zero,-720(s0)
2040718c:	d2042a23          	sw	zero,-716(s0)
20407190:	d2042c23          	sw	zero,-712(s0)
20407194:	d2042e23          	sw	zero,-708(s0)
          0,
      };
      shape[0] = (pit.size + 3) / 4;
20407198:	da042783          	lw	a5,-608(s0)
2040719c:	00378793          	addi	a5,a5,3
204071a0:	0027d793          	srli	a5,a5,0x2
204071a4:	00078a13          	mv	s4,a5
204071a8:	00000a93          	li	s5,0
204071ac:	d1442823          	sw	s4,-752(s0)
204071b0:	d1542a23          	sw	s5,-748(s0)
      int status = TVMNDArray_Empty(1, shape, dtype, dev,
                                    &executor->storage_pool[executor->storage_pool_count].array);
204071b4:	d0c42783          	lw	a5,-756(s0)
204071b8:	0507a683          	lw	a3,80(a5)
204071bc:	d0c42783          	lw	a5,-756(s0)
204071c0:	0547a703          	lw	a4,84(a5)
204071c4:	00070793          	mv	a5,a4
204071c8:	00179793          	slli	a5,a5,0x1
204071cc:	00e787b3          	add	a5,a5,a4
204071d0:	00479793          	slli	a5,a5,0x4
204071d4:	00f687b3          	add	a5,a3,a5
      int status = TVMNDArray_Empty(1, shape, dtype, dev,
204071d8:	00878793          	addi	a5,a5,8
204071dc:	d1040593          	addi	a1,s0,-752
204071e0:	d9842683          	lw	a3,-616(s0)
204071e4:	d9c42703          	lw	a4,-612(s0)
204071e8:	d9442603          	lw	a2,-620(s0)
204071ec:	00100513          	li	a0,1
204071f0:	afdfb0ef          	jal	ra,20402cec <TVMNDArray_Empty>
204071f4:	faa42a23          	sw	a0,-76(s0)
      CHECK_EQ(status, 0, "fail to create storage_pool with idx=%d\n", idx);
204071f8:	fb442783          	lw	a5,-76(s0)
204071fc:	02078c63          	beqz	a5,20407234 <TVMGraphExecutor_SetupStorage+0x69c>
20407200:	fdc42783          	lw	a5,-36(s0)
20407204:	00019717          	auipc	a4,0x19
20407208:	05870713          	addi	a4,a4,88 # 2042025c <__func__.3846+0x574>
2040720c:	00019697          	auipc	a3,0x19
20407210:	32868693          	addi	a3,a3,808 # 20420534 <__func__.3846+0x84c>
20407214:	00019617          	auipc	a2,0x19
20407218:	3bc60613          	addi	a2,a2,956 # 204205d0 <__func__.3846+0x8e8>
2040721c:	3f400593          	li	a1,1012
20407220:	00019517          	auipc	a0,0x19
20407224:	3b850513          	addi	a0,a0,952 # 204205d8 <__func__.3846+0x8f0>
20407228:	031060ef          	jal	ra,2040da58 <TVMLogf>
2040722c:	50000513          	li	a0,1280
20407230:	f40f90ef          	jal	ra,20400970 <TVMPlatformAbort>
    }
    executor->storage_pool_count++;
20407234:	d0c42783          	lw	a5,-756(s0)
20407238:	0547a783          	lw	a5,84(a5)
2040723c:	00178713          	addi	a4,a5,1
20407240:	d0c42783          	lw	a5,-756(s0)
20407244:	04e7aa23          	sw	a4,84(a5)
  for (idx = 0; idx < pool_entry_count; idx++) {
20407248:	fdc42783          	lw	a5,-36(s0)
2040724c:	00178793          	addi	a5,a5,1
20407250:	fcf42e23          	sw	a5,-36(s0)
20407254:	fdc42703          	lw	a4,-36(s0)
20407258:	fd842783          	lw	a5,-40(s0)
2040725c:	d4f762e3          	bltu	a4,a5,20406fa0 <TVMGraphExecutor_SetupStorage+0x408>
  }

  // Assign the pooled entries. A unified memory pool is used to simplifiy
  // memory assignment for each node entry. The allocated memory on each device
  // is mapped to this pool.
  executor->data_entry_count = executor->node_row_ptr[executor->node_row_ptr_count - 1];
20407260:	d0c42783          	lw	a5,-756(s0)
20407264:	0107a703          	lw	a4,16(a5)
20407268:	d0c42783          	lw	a5,-756(s0)
2040726c:	0147a683          	lw	a3,20(a5)
20407270:	400007b7          	lui	a5,0x40000
20407274:	fff78793          	addi	a5,a5,-1 # 3fffffff <__fini_array_end+0x1fbddd13>
20407278:	00f687b3          	add	a5,a3,a5
2040727c:	00279793          	slli	a5,a5,0x2
20407280:	00f707b3          	add	a5,a4,a5
20407284:	0007a703          	lw	a4,0(a5)
20407288:	d0c42783          	lw	a5,-756(s0)
2040728c:	04e7ae23          	sw	a4,92(a5)
  err = TVMPlatformMemoryAllocate(sizeof(TVMNDArray) * executor->data_entry_count, alloc_dev,
20407290:	d0c42783          	lw	a5,-756(s0)
20407294:	05c7a703          	lw	a4,92(a5)
20407298:	00070793          	mv	a5,a4
2040729c:	00279793          	slli	a5,a5,0x2
204072a0:	00e787b3          	add	a5,a5,a4
204072a4:	00379793          	slli	a5,a5,0x3
204072a8:	00078713          	mv	a4,a5
                                  (void**)&executor->data_entry);
204072ac:	d0c42783          	lw	a5,-756(s0)
204072b0:	05878793          	addi	a5,a5,88
  err = TVMPlatformMemoryAllocate(sizeof(TVMNDArray) * executor->data_entry_count, alloc_dev,
204072b4:	00078693          	mv	a3,a5
204072b8:	db442583          	lw	a1,-588(s0)
204072bc:	db842603          	lw	a2,-584(s0)
204072c0:	00070513          	mv	a0,a4
204072c4:	f38f90ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
204072c8:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
204072cc:	fc842783          	lw	a5,-56(s0)
204072d0:	02078863          	beqz	a5,20407300 <TVMGraphExecutor_SetupStorage+0x768>
    fprintf(stderr, "memory allocate error: %08x", err);
204072d4:	5fbf9797          	auipc	a5,0x5fbf9
204072d8:	76478793          	addi	a5,a5,1892 # 80000a38 <_impure_ptr>
204072dc:	0007a783          	lw	a5,0(a5)
204072e0:	00c7a783          	lw	a5,12(a5)
204072e4:	fc842603          	lw	a2,-56(s0)
204072e8:	00019597          	auipc	a1,0x19
204072ec:	ca858593          	addi	a1,a1,-856 # 2041ff90 <__func__.3846+0x2a8>
204072f0:	00078513          	mv	a0,a5
204072f4:	3170b0ef          	jal	ra,20412e0a <fprintf>
    return -1;
204072f8:	fff00793          	li	a5,-1
204072fc:	1f40006f          	j	204074f0 <TVMGraphExecutor_SetupStorage+0x958>
  }
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
20407300:	fc042e23          	sw	zero,-36(s0)
20407304:	1400006f          	j	20407444 <TVMGraphExecutor_SetupStorage+0x8ac>
    uint32_t storage_id = attrs->storage_id[idx];
20407308:	fcc42783          	lw	a5,-52(s0)
2040730c:	0047a703          	lw	a4,4(a5)
20407310:	fdc42783          	lw	a5,-36(s0)
20407314:	00279793          	slli	a5,a5,0x2
20407318:	00f707b3          	add	a5,a4,a5
2040731c:	0007a783          	lw	a5,0(a5)
20407320:	fcf42223          	sw	a5,-60(s0)
    CHECK(storage_id < executor->storage_pool_count);
20407324:	d0c42783          	lw	a5,-756(s0)
20407328:	0547a783          	lw	a5,84(a5)
2040732c:	fc442703          	lw	a4,-60(s0)
20407330:	02f76263          	bltu	a4,a5,20407354 <TVMGraphExecutor_SetupStorage+0x7bc>
20407334:	00019617          	auipc	a2,0x19
20407338:	32060613          	addi	a2,a2,800 # 20420654 <__func__.3846+0x96c>
2040733c:	40500593          	li	a1,1029
20407340:	00019517          	auipc	a0,0x19
20407344:	10c50513          	addi	a0,a0,268 # 2042044c <__func__.3846+0x764>
20407348:	710060ef          	jal	ra,2040da58 <TVMLogf>
2040734c:	50000513          	li	a0,1280
20407350:	e20f90ef          	jal	ra,20400970 <TVMPlatformAbort>
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
20407354:	d0c42783          	lw	a5,-756(s0)
20407358:	0507a683          	lw	a3,80(a5)
2040735c:	fc442703          	lw	a4,-60(s0)
20407360:	00070793          	mv	a5,a4
20407364:	00179793          	slli	a5,a5,0x1
20407368:	00e787b3          	add	a5,a5,a4
2040736c:	00479793          	slli	a5,a5,0x4
20407370:	00f687b3          	add	a5,a3,a5
20407374:	00878513          	addi	a0,a5,8
                                       attrs->shape + idx * TVM_CRT_MAX_NDIM, attrs->ndim[idx],
20407378:	fcc42783          	lw	a5,-52(s0)
2040737c:	0147a683          	lw	a3,20(a5)
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
20407380:	fdc42703          	lw	a4,-36(s0)
20407384:	00070793          	mv	a5,a4
20407388:	00179793          	slli	a5,a5,0x1
2040738c:	00e787b3          	add	a5,a5,a4
20407390:	00479793          	slli	a5,a5,0x4
                                       attrs->shape + idx * TVM_CRT_MAX_NDIM, attrs->ndim[idx],
20407394:	00f685b3          	add	a1,a3,a5
20407398:	fcc42783          	lw	a5,-52(s0)
2040739c:	0187a703          	lw	a4,24(a5)
204073a0:	fdc42783          	lw	a5,-36(s0)
204073a4:	00279793          	slli	a5,a5,0x2
204073a8:	00f707b3          	add	a5,a4,a5
204073ac:	0007a783          	lw	a5,0(a5)
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
204073b0:	00078813          	mv	a6,a5
                                       vtype[idx], &executor->data_entry[idx]);
204073b4:	dbc42703          	lw	a4,-580(s0)
204073b8:	fdc42783          	lw	a5,-36(s0)
204073bc:	00279793          	slli	a5,a5,0x2
204073c0:	00f706b3          	add	a3,a4,a5
204073c4:	d0c42783          	lw	a5,-756(s0)
204073c8:	0587a603          	lw	a2,88(a5)
204073cc:	fdc42703          	lw	a4,-36(s0)
204073d0:	00070793          	mv	a5,a4
204073d4:	00279793          	slli	a5,a5,0x2
204073d8:	00e787b3          	add	a5,a5,a4
204073dc:	00379793          	slli	a5,a5,0x3
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
204073e0:	00f60733          	add	a4,a2,a5
204073e4:	0006a783          	lw	a5,0(a3)
204073e8:	00078693          	mv	a3,a5
204073ec:	00080613          	mv	a2,a6
204073f0:	e4dfb0ef          	jal	ra,2040323c <TVMNDArray_CreateView>
204073f4:	fca42023          	sw	a0,-64(s0)
    CHECK_EQ(status, 0, "fail to create for node with idx=%d, storage_id=%u\n", idx, storage_id);
204073f8:	fc042783          	lw	a5,-64(s0)
204073fc:	02078e63          	beqz	a5,20407438 <TVMGraphExecutor_SetupStorage+0x8a0>
20407400:	fc442803          	lw	a6,-60(s0)
20407404:	fdc42783          	lw	a5,-36(s0)
20407408:	00019717          	auipc	a4,0x19
2040740c:	e5470713          	addi	a4,a4,-428 # 2042025c <__func__.3846+0x574>
20407410:	00019697          	auipc	a3,0x19
20407414:	12468693          	addi	a3,a3,292 # 20420534 <__func__.3846+0x84c>
20407418:	00019617          	auipc	a2,0x19
2040741c:	1b860613          	addi	a2,a2,440 # 204205d0 <__func__.3846+0x8e8>
20407420:	40900593          	li	a1,1033
20407424:	00019517          	auipc	a0,0x19
20407428:	25c50513          	addi	a0,a0,604 # 20420680 <__func__.3846+0x998>
2040742c:	62c060ef          	jal	ra,2040da58 <TVMLogf>
20407430:	50000513          	li	a0,1280
20407434:	d3cf90ef          	jal	ra,20400970 <TVMPlatformAbort>
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
20407438:	fdc42783          	lw	a5,-36(s0)
2040743c:	00178793          	addi	a5,a5,1
20407440:	fcf42e23          	sw	a5,-36(s0)
20407444:	d0c42783          	lw	a5,-756(s0)
20407448:	05c7a783          	lw	a5,92(a5)
2040744c:	fdc42703          	lw	a4,-36(s0)
20407450:	eaf76ce3          	bltu	a4,a5,20407308 <TVMGraphExecutor_SetupStorage+0x770>
  }

  // Release memory
  err = TVMPlatformMemoryFree(vtype, alloc_dev);
20407454:	dbc42783          	lw	a5,-580(s0)
20407458:	db442583          	lw	a1,-588(s0)
2040745c:	db842603          	lw	a2,-584(s0)
20407460:	00078513          	mv	a0,a5
20407464:	dfcf90ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407468:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
2040746c:	fc842783          	lw	a5,-56(s0)
20407470:	02078863          	beqz	a5,204074a0 <TVMGraphExecutor_SetupStorage+0x908>
    fprintf(stderr, "memory free error: %08x", err);
20407474:	5fbf9797          	auipc	a5,0x5fbf9
20407478:	5c478793          	addi	a5,a5,1476 # 80000a38 <_impure_ptr>
2040747c:	0007a783          	lw	a5,0(a5)
20407480:	00c7a783          	lw	a5,12(a5)
20407484:	fc842603          	lw	a2,-56(s0)
20407488:	00019597          	auipc	a1,0x19
2040748c:	28058593          	addi	a1,a1,640 # 20420708 <__func__.3846+0xa20>
20407490:	00078513          	mv	a0,a5
20407494:	1770b0ef          	jal	ra,20412e0a <fprintf>
    return err;
20407498:	fc842783          	lw	a5,-56(s0)
2040749c:	0540006f          	j	204074f0 <TVMGraphExecutor_SetupStorage+0x958>
  }

  err = TVMPlatformMemoryFree(pool_entry, alloc_dev);
204074a0:	db042783          	lw	a5,-592(s0)
204074a4:	db442583          	lw	a1,-588(s0)
204074a8:	db842603          	lw	a2,-584(s0)
204074ac:	00078513          	mv	a0,a5
204074b0:	db0f90ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
204074b4:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
204074b8:	fc842783          	lw	a5,-56(s0)
204074bc:	02078863          	beqz	a5,204074ec <TVMGraphExecutor_SetupStorage+0x954>
    fprintf(stderr, "memory free error: %08x", err);
204074c0:	5fbf9797          	auipc	a5,0x5fbf9
204074c4:	57878793          	addi	a5,a5,1400 # 80000a38 <_impure_ptr>
204074c8:	0007a783          	lw	a5,0(a5)
204074cc:	00c7a783          	lw	a5,12(a5)
204074d0:	fc842603          	lw	a2,-56(s0)
204074d4:	00019597          	auipc	a1,0x19
204074d8:	23458593          	addi	a1,a1,564 # 20420708 <__func__.3846+0xa20>
204074dc:	00078513          	mv	a0,a5
204074e0:	12b0b0ef          	jal	ra,20412e0a <fprintf>
    return -1;
204074e4:	fff00793          	li	a5,-1
204074e8:	0080006f          	j	204074f0 <TVMGraphExecutor_SetupStorage+0x958>
  }

  return 0;
204074ec:	00000793          	li	a5,0
}
204074f0:	00078513          	mv	a0,a5
204074f4:	2fc12083          	lw	ra,764(sp)
204074f8:	2f812403          	lw	s0,760(sp)
204074fc:	2f412483          	lw	s1,756(sp)
20407500:	2f012903          	lw	s2,752(sp)
20407504:	2ec12983          	lw	s3,748(sp)
20407508:	2e812a03          	lw	s4,744(sp)
2040750c:	2e412a83          	lw	s5,740(sp)
20407510:	30010113          	addi	sp,sp,768
20407514:	00008067          	ret

20407518 <TVMGraphExecutor_SetupOpExecs>:

int TVMGraphExecutor_SetupOpExecs(TVMGraphExecutor* executor) {
20407518:	db010113          	addi	sp,sp,-592
2040751c:	24112623          	sw	ra,588(sp)
20407520:	24812423          	sw	s0,584(sp)
20407524:	24912223          	sw	s1,580(sp)
20407528:	25010413          	addi	s0,sp,592
2040752c:	daa42e23          	sw	a0,-580(s0)
  int status = 0;
20407530:	fe042623          	sw	zero,-20(s0)
  uint32_t nid, idx;
  executor->op_execs_count = executor->nodes_count;
20407534:	dbc42783          	lw	a5,-580(s0)
20407538:	0047a703          	lw	a4,4(a5)
2040753c:	dbc42783          	lw	a5,-580(s0)
20407540:	06e7a223          	sw	a4,100(a5)
  DLDevice dev = {kDLCPU, 0};
20407544:	00100793          	li	a5,1
20407548:	fcf42223          	sw	a5,-60(s0)
2040754c:	fc042423          	sw	zero,-56(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMPackedFunc) * executor->op_execs_count,
20407550:	dbc42783          	lw	a5,-580(s0)
20407554:	0647a783          	lw	a5,100(a5)
20407558:	1d800593          	li	a1,472
2040755c:	00078513          	mv	a0,a5
20407560:	20c180ef          	jal	ra,2041f76c <__mulsi3>
20407564:	00050793          	mv	a5,a0
20407568:	00078713          	mv	a4,a5
                                                  dev, (void**)&executor->op_execs);
2040756c:	dbc42783          	lw	a5,-580(s0)
20407570:	06078793          	addi	a5,a5,96
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMPackedFunc) * executor->op_execs_count,
20407574:	00078693          	mv	a3,a5
20407578:	fc442583          	lw	a1,-60(s0)
2040757c:	fc842603          	lw	a2,-56(s0)
20407580:	00070513          	mv	a0,a4
20407584:	c78f90ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20407588:	fca42e23          	sw	a0,-36(s0)
  if (err != kTvmErrorNoError) {
2040758c:	fdc42783          	lw	a5,-36(s0)
20407590:	02078c63          	beqz	a5,204075c8 <TVMGraphExecutor_SetupOpExecs+0xb0>
    fprintf(stderr, "memory allocate error: %08x", err);
20407594:	5fbf9797          	auipc	a5,0x5fbf9
20407598:	4a478793          	addi	a5,a5,1188 # 80000a38 <_impure_ptr>
2040759c:	0007a783          	lw	a5,0(a5)
204075a0:	00c7a783          	lw	a5,12(a5)
204075a4:	fdc42603          	lw	a2,-36(s0)
204075a8:	00019597          	auipc	a1,0x19
204075ac:	9e858593          	addi	a1,a1,-1560 # 2041ff90 <__func__.3846+0x2a8>
204075b0:	00078513          	mv	a0,a5
204075b4:	0570b0ef          	jal	ra,20412e0a <fprintf>
    status = -1;
204075b8:	fff00793          	li	a5,-1
204075bc:	fef42623          	sw	a5,-20(s0)
    return status;
204075c0:	fec42783          	lw	a5,-20(s0)
204075c4:	2a80006f          	j	2040786c <TVMGraphExecutor_SetupOpExecs+0x354>
  }
  for (nid = 0; nid < executor->nodes_count; nid++) {
204075c8:	fe042423          	sw	zero,-24(s0)
204075cc:	28c0006f          	j	20407858 <TVMGraphExecutor_SetupOpExecs+0x340>
    const TVMGraphExecutorNode* inode = executor->nodes + nid;
204075d0:	dbc42783          	lw	a5,-580(s0)
204075d4:	0007a483          	lw	s1,0(a5)
204075d8:	16c00593          	li	a1,364
204075dc:	fe842503          	lw	a0,-24(s0)
204075e0:	18c180ef          	jal	ra,2041f76c <__mulsi3>
204075e4:	00050793          	mv	a5,a0
204075e8:	00f487b3          	add	a5,s1,a5
204075ec:	fcf42c23          	sw	a5,-40(s0)
    if (strcmp(inode->op_type, "null")) {
204075f0:	fd842783          	lw	a5,-40(s0)
204075f4:	00019597          	auipc	a1,0x19
204075f8:	12c58593          	addi	a1,a1,300 # 20420720 <__func__.3846+0xa38>
204075fc:	00078513          	mv	a0,a5
20407600:	42b0b0ef          	jal	ra,2041322a <strcmp>
20407604:	00050793          	mv	a5,a0
20407608:	20078c63          	beqz	a5,20407820 <TVMGraphExecutor_SetupOpExecs+0x308>
      DLTensorPtr args[TVM_CRT_MAX_ARGS];
      uint32_t args_count = 0;
2040760c:	fe042023          	sw	zero,-32(s0)
      for (idx = 0; idx < inode->inputs_count; idx++) {
20407610:	fe042223          	sw	zero,-28(s0)
20407614:	0900006f          	j	204076a4 <TVMGraphExecutor_SetupOpExecs+0x18c>
        const TVMGraphExecutorNodeEntry* entry = inode->inputs + idx;
20407618:	fd842783          	lw	a5,-40(s0)
2040761c:	10c7a703          	lw	a4,268(a5)
20407620:	fe442783          	lw	a5,-28(s0)
20407624:	00479793          	slli	a5,a5,0x4
20407628:	00f707b3          	add	a5,a4,a5
2040762c:	fcf42823          	sw	a5,-48(s0)
        uint32_t eid = TVMGraphExecutor_GetEntryId(executor, entry->node_id, entry->index);
20407630:	fd042783          	lw	a5,-48(s0)
20407634:	0007a703          	lw	a4,0(a5)
20407638:	fd042783          	lw	a5,-48(s0)
2040763c:	0047a783          	lw	a5,4(a5)
20407640:	00078613          	mv	a2,a5
20407644:	00070593          	mv	a1,a4
20407648:	dbc42503          	lw	a0,-580(s0)
2040764c:	a19fe0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
20407650:	fca42623          	sw	a0,-52(s0)
        args[idx] = &(executor->data_entry[eid].dl_tensor);
20407654:	dbc42783          	lw	a5,-580(s0)
20407658:	0587a683          	lw	a3,88(a5)
2040765c:	fcc42703          	lw	a4,-52(s0)
20407660:	00070793          	mv	a5,a4
20407664:	00279793          	slli	a5,a5,0x2
20407668:	00e787b3          	add	a5,a5,a4
2040766c:	00379793          	slli	a5,a5,0x3
20407670:	00f687b3          	add	a5,a3,a5
20407674:	00078713          	mv	a4,a5
20407678:	fe442783          	lw	a5,-28(s0)
2040767c:	00279793          	slli	a5,a5,0x2
20407680:	ff040693          	addi	a3,s0,-16
20407684:	00f687b3          	add	a5,a3,a5
20407688:	dce7a823          	sw	a4,-560(a5)
        args_count++;
2040768c:	fe042783          	lw	a5,-32(s0)
20407690:	00178793          	addi	a5,a5,1
20407694:	fef42023          	sw	a5,-32(s0)
      for (idx = 0; idx < inode->inputs_count; idx++) {
20407698:	fe442783          	lw	a5,-28(s0)
2040769c:	00178793          	addi	a5,a5,1
204076a0:	fef42223          	sw	a5,-28(s0)
204076a4:	fd842783          	lw	a5,-40(s0)
204076a8:	1107a783          	lw	a5,272(a5)
204076ac:	fe442703          	lw	a4,-28(s0)
204076b0:	f6f764e3          	bltu	a4,a5,20407618 <TVMGraphExecutor_SetupOpExecs+0x100>
      }
      for (idx = 0; idx < inode->param.num_outputs; idx++) {
204076b4:	fe042223          	sw	zero,-28(s0)
204076b8:	0680006f          	j	20407720 <TVMGraphExecutor_SetupOpExecs+0x208>
        uint32_t eid = TVMGraphExecutor_GetEntryId(executor, nid, idx);
204076bc:	fe442603          	lw	a2,-28(s0)
204076c0:	fe842583          	lw	a1,-24(s0)
204076c4:	dbc42503          	lw	a0,-580(s0)
204076c8:	99dfe0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
204076cc:	fca42a23          	sw	a0,-44(s0)
        args[args_count] = &(executor->data_entry[eid].dl_tensor);
204076d0:	dbc42783          	lw	a5,-580(s0)
204076d4:	0587a683          	lw	a3,88(a5)
204076d8:	fd442703          	lw	a4,-44(s0)
204076dc:	00070793          	mv	a5,a4
204076e0:	00279793          	slli	a5,a5,0x2
204076e4:	00e787b3          	add	a5,a5,a4
204076e8:	00379793          	slli	a5,a5,0x3
204076ec:	00f687b3          	add	a5,a3,a5
204076f0:	00078713          	mv	a4,a5
204076f4:	fe042783          	lw	a5,-32(s0)
204076f8:	00279793          	slli	a5,a5,0x2
204076fc:	ff040693          	addi	a3,s0,-16
20407700:	00f687b3          	add	a5,a3,a5
20407704:	dce7a823          	sw	a4,-560(a5)
        args_count++;
20407708:	fe042783          	lw	a5,-32(s0)
2040770c:	00178793          	addi	a5,a5,1
20407710:	fef42023          	sw	a5,-32(s0)
      for (idx = 0; idx < inode->param.num_outputs; idx++) {
20407714:	fe442783          	lw	a5,-28(s0)
20407718:	00178793          	addi	a5,a5,1
2040771c:	fef42223          	sw	a5,-28(s0)
20407720:	fd842783          	lw	a5,-40(s0)
20407724:	1047a783          	lw	a5,260(a5)
20407728:	fe442703          	lw	a4,-28(s0)
2040772c:	f8f768e3          	bltu	a4,a5,204076bc <TVMGraphExecutor_SetupOpExecs+0x1a4>
      }
      if (strcmp(inode->op_type, "tvm_op")) {
20407730:	fd842783          	lw	a5,-40(s0)
20407734:	00019597          	auipc	a1,0x19
20407738:	ff458593          	addi	a1,a1,-12 # 20420728 <__func__.3846+0xa40>
2040773c:	00078513          	mv	a0,a5
20407740:	2eb0b0ef          	jal	ra,2041322a <strcmp>
20407744:	00050793          	mv	a5,a0
20407748:	02078c63          	beqz	a5,20407780 <TVMGraphExecutor_SetupOpExecs+0x268>
        fprintf(stderr, "Can only take tvm_op as op, but \"%s\" is found.\n", inode->op_type);
2040774c:	5fbf9797          	auipc	a5,0x5fbf9
20407750:	2ec78793          	addi	a5,a5,748 # 80000a38 <_impure_ptr>
20407754:	0007a783          	lw	a5,0(a5)
20407758:	00c7a783          	lw	a5,12(a5)
2040775c:	fd842703          	lw	a4,-40(s0)
20407760:	00070613          	mv	a2,a4
20407764:	00019597          	auipc	a1,0x19
20407768:	fcc58593          	addi	a1,a1,-52 # 20420730 <__func__.3846+0xa48>
2040776c:	00078513          	mv	a0,a5
20407770:	69a0b0ef          	jal	ra,20412e0a <fprintf>
        status = -1;
20407774:	fff00793          	li	a5,-1
20407778:	fef42623          	sw	a5,-20(s0)
        break;
2040777c:	0ec0006f          	j	20407868 <TVMGraphExecutor_SetupOpExecs+0x350>
      }
      if (args_count >= TVM_CRT_MAX_ARGS) {
20407780:	fe042703          	lw	a4,-32(s0)
20407784:	00900793          	li	a5,9
20407788:	02e7fe63          	bleu	a4,a5,204077c4 <TVMGraphExecutor_SetupOpExecs+0x2ac>
        fprintf(stderr, "too many arguments: expected less than %d args, but got %d.\n",
2040778c:	5fbf9797          	auipc	a5,0x5fbf9
20407790:	2ac78793          	addi	a5,a5,684 # 80000a38 <_impure_ptr>
20407794:	0007a783          	lw	a5,0(a5)
20407798:	00c7a783          	lw	a5,12(a5)
2040779c:	fe042683          	lw	a3,-32(s0)
204077a0:	00a00613          	li	a2,10
204077a4:	00019597          	auipc	a1,0x19
204077a8:	fbc58593          	addi	a1,a1,-68 # 20420760 <__func__.3846+0xa78>
204077ac:	00078513          	mv	a0,a5
204077b0:	65a0b0ef          	jal	ra,20412e0a <fprintf>
                TVM_CRT_MAX_ARGS, args_count);
        status = -1;
204077b4:	fff00793          	li	a5,-1
204077b8:	fef42623          	sw	a5,-20(s0)
        break;
204077bc:	00000013          	nop
204077c0:	0a80006f          	j	20407868 <TVMGraphExecutor_SetupOpExecs+0x350>
      }
#if TVM_CRT_DEBUG
      printf("tvm_op: creating %s with node_id=%d\n", inode->param.func_name, nid);
#endif  // TVM_CRT_DEBUG
      TVMPackedFunc pf;
      TVMGraphExecutor_CreateTVMOp(executor, &(inode->param), args, args_count, &pf);
204077c4:	fd842783          	lw	a5,-40(s0)
204077c8:	08878793          	addi	a5,a5,136
204077cc:	de840713          	addi	a4,s0,-536
204077d0:	dc040613          	addi	a2,s0,-576
204077d4:	fe042683          	lw	a3,-32(s0)
204077d8:	00078593          	mv	a1,a5
204077dc:	dbc42503          	lw	a0,-580(s0)
204077e0:	0a4000ef          	jal	ra,20407884 <TVMGraphExecutor_CreateTVMOp>
      executor->op_execs[nid] = pf;
204077e4:	dbc42783          	lw	a5,-580(s0)
204077e8:	0607a483          	lw	s1,96(a5)
204077ec:	1d800593          	li	a1,472
204077f0:	fe842503          	lw	a0,-24(s0)
204077f4:	779170ef          	jal	ra,2041f76c <__mulsi3>
204077f8:	00050793          	mv	a5,a0
204077fc:	00f487b3          	add	a5,s1,a5
20407800:	00078693          	mv	a3,a5
20407804:	de840793          	addi	a5,s0,-536
20407808:	1d800713          	li	a4,472
2040780c:	00070613          	mv	a2,a4
20407810:	00078593          	mv	a1,a5
20407814:	00068513          	mv	a0,a3
20407818:	7d80b0ef          	jal	ra,20412ff0 <memcpy>
2040781c:	0300006f          	j	2040784c <TVMGraphExecutor_SetupOpExecs+0x334>
    } else {
      memset(&executor->op_execs[nid], 0, sizeof(TVMPackedFunc));
20407820:	dbc42783          	lw	a5,-580(s0)
20407824:	0607a483          	lw	s1,96(a5)
20407828:	1d800593          	li	a1,472
2040782c:	fe842503          	lw	a0,-24(s0)
20407830:	73d170ef          	jal	ra,2041f76c <__mulsi3>
20407834:	00050793          	mv	a5,a0
20407838:	00f487b3          	add	a5,s1,a5
2040783c:	1d800613          	li	a2,472
20407840:	00000593          	li	a1,0
20407844:	00078513          	mv	a0,a5
20407848:	0670b0ef          	jal	ra,204130ae <memset>
  for (nid = 0; nid < executor->nodes_count; nid++) {
2040784c:	fe842783          	lw	a5,-24(s0)
20407850:	00178793          	addi	a5,a5,1
20407854:	fef42423          	sw	a5,-24(s0)
20407858:	dbc42783          	lw	a5,-580(s0)
2040785c:	0047a783          	lw	a5,4(a5)
20407860:	fe842703          	lw	a4,-24(s0)
20407864:	d6f766e3          	bltu	a4,a5,204075d0 <TVMGraphExecutor_SetupOpExecs+0xb8>
    }
  }
  return status;
20407868:	fec42783          	lw	a5,-20(s0)
}
2040786c:	00078513          	mv	a0,a5
20407870:	24c12083          	lw	ra,588(sp)
20407874:	24812403          	lw	s0,584(sp)
20407878:	24412483          	lw	s1,580(sp)
2040787c:	25010113          	addi	sp,sp,592
20407880:	00008067          	ret

20407884 <TVMGraphExecutor_CreateTVMOp>:
  uint32_t shape_data_count;
} TVMOpArgs;

int32_t TVMGraphExecutor_CreateTVMOp(TVMGraphExecutor* executor, const TVMOpParam* param,
                                     DLTensorPtr* args, const uint32_t args_count,
                                     TVMPackedFunc* pf) {
20407884:	cc010113          	addi	sp,sp,-832
20407888:	32112e23          	sw	ra,828(sp)
2040788c:	32812c23          	sw	s0,824(sp)
20407890:	33212a23          	sw	s2,820(sp)
20407894:	33312823          	sw	s3,816(sp)
20407898:	34010413          	addi	s0,sp,832
2040789c:	cca42e23          	sw	a0,-804(s0)
204078a0:	ccb42c23          	sw	a1,-808(s0)
204078a4:	ccc42a23          	sw	a2,-812(s0)
204078a8:	ccd42823          	sw	a3,-816(s0)
204078ac:	cce42623          	sw	a4,-820(s0)
  int status = 0;
204078b0:	fe042423          	sw	zero,-24(s0)
  uint32_t idx;
  TVMOpArgs arg_ptr;
  memset(&arg_ptr, 0, sizeof(TVMOpArgs));
204078b4:	d7040793          	addi	a5,s0,-656
204078b8:	27000613          	li	a2,624
204078bc:	00000593          	li	a1,0
204078c0:	00078513          	mv	a0,a5
204078c4:	7ea0b0ef          	jal	ra,204130ae <memset>
  arg_ptr.args_count = args_count;
204078c8:	cd042783          	lw	a5,-816(s0)
204078cc:	f0f42023          	sw	a5,-256(s0)
  if (param->flatten_data) {
204078d0:	cd842783          	lw	a5,-808(s0)
204078d4:	0807a783          	lw	a5,128(a5)
204078d8:	00078663          	beqz	a5,204078e4 <TVMGraphExecutor_CreateTVMOp+0x60>
    arg_ptr.shape_data_count = arg_ptr.args_count;
204078dc:	f0042783          	lw	a5,-256(s0)
204078e0:	fcf42c23          	sw	a5,-40(s0)
  }
  for (idx = 0; idx < arg_ptr.args_count; ++idx) {
204078e4:	fe042623          	sw	zero,-20(s0)
204078e8:	13c0006f          	j	20407a24 <TVMGraphExecutor_CreateTVMOp+0x1a0>
    TVMValue v;
    memset(&v, 0, sizeof(v));
204078ec:	ce840793          	addi	a5,s0,-792
204078f0:	00800613          	li	a2,8
204078f4:	00000593          	li	a1,0
204078f8:	00078513          	mv	a0,a5
204078fc:	7b20b0ef          	jal	ra,204130ae <memset>
    DLTensor* t = &(arg_ptr.args[idx]);
20407900:	d7040693          	addi	a3,s0,-656
20407904:	fec42703          	lw	a4,-20(s0)
20407908:	00070793          	mv	a5,a4
2040790c:	00279793          	slli	a5,a5,0x2
20407910:	00e787b3          	add	a5,a5,a4
20407914:	00379793          	slli	a5,a5,0x3
20407918:	00f687b3          	add	a5,a3,a5
2040791c:	fef42223          	sw	a5,-28(s0)
    /* v.v_handle = &((*args)[idx]); */
    v.v_handle = args[idx];
20407920:	fec42783          	lw	a5,-20(s0)
20407924:	00279793          	slli	a5,a5,0x2
20407928:	cd442703          	lw	a4,-812(s0)
2040792c:	00f707b3          	add	a5,a4,a5
20407930:	0007a783          	lw	a5,0(a5)
20407934:	cef42423          	sw	a5,-792(s0)
    arg_ptr.arg_values[idx] = v;
20407938:	fec42783          	lw	a5,-20(s0)
2040793c:	03278793          	addi	a5,a5,50
20407940:	00379793          	slli	a5,a5,0x3
20407944:	ff040693          	addi	a3,s0,-16
20407948:	00f687b3          	add	a5,a3,a5
2040794c:	ce842683          	lw	a3,-792(s0)
20407950:	cec42703          	lw	a4,-788(s0)
20407954:	d8d7a423          	sw	a3,-632(a5)
20407958:	d8e7a623          	sw	a4,-628(a5)
    arg_ptr.arg_values_count++;
2040795c:	f5842783          	lw	a5,-168(s0)
20407960:	00178793          	addi	a5,a5,1
20407964:	f4f42c23          	sw	a5,-168(s0)
    arg_ptr.arg_tcodes[idx] = kTVMNDArrayHandle;
20407968:	fec42783          	lw	a5,-20(s0)
2040796c:	07878793          	addi	a5,a5,120
20407970:	00279793          	slli	a5,a5,0x2
20407974:	ff040713          	addi	a4,s0,-16
20407978:	00f707b3          	add	a5,a4,a5
2040797c:	00d00713          	li	a4,13
20407980:	d8e7a623          	sw	a4,-628(a5)
    arg_ptr.arg_tcodes_count++;
20407984:	f8442783          	lw	a5,-124(s0)
20407988:	00178793          	addi	a5,a5,1
2040798c:	f8f42223          	sw	a5,-124(s0)
    if (param->flatten_data) {
20407990:	cd842783          	lw	a5,-808(s0)
20407994:	0807a783          	lw	a5,128(a5)
20407998:	08078063          	beqz	a5,20407a18 <TVMGraphExecutor_CreateTVMOp+0x194>
      arg_ptr.shape_data[idx] = Shape_Accumulate(t->shape, t->ndim);
2040799c:	fe442783          	lw	a5,-28(s0)
204079a0:	0147a703          	lw	a4,20(a5)
204079a4:	fe442783          	lw	a5,-28(s0)
204079a8:	00c7a783          	lw	a5,12(a5)
204079ac:	00078593          	mv	a1,a5
204079b0:	00070513          	mv	a0,a4
204079b4:	fa1fb0ef          	jal	ra,20403954 <Shape_Accumulate>
204079b8:	00050793          	mv	a5,a0
204079bc:	00078913          	mv	s2,a5
204079c0:	00000993          	li	s3,0
204079c4:	fec42783          	lw	a5,-20(s0)
204079c8:	04278793          	addi	a5,a5,66
204079cc:	00379793          	slli	a5,a5,0x3
204079d0:	ff040693          	addi	a3,s0,-16
204079d4:	00f687b3          	add	a5,a3,a5
204079d8:	d927a423          	sw	s2,-632(a5)
204079dc:	d937a623          	sw	s3,-628(a5)
      t->ndim = 1;
204079e0:	fe442783          	lw	a5,-28(s0)
204079e4:	00100713          	li	a4,1
204079e8:	00e7a623          	sw	a4,12(a5)
      t->shape[0] = arg_ptr.shape_data[idx];
204079ec:	fe442783          	lw	a5,-28(s0)
204079f0:	0147a703          	lw	a4,20(a5)
204079f4:	fec42783          	lw	a5,-20(s0)
204079f8:	04278793          	addi	a5,a5,66
204079fc:	00379793          	slli	a5,a5,0x3
20407a00:	ff040693          	addi	a3,s0,-16
20407a04:	00f687b3          	add	a5,a3,a5
20407a08:	d8c7a803          	lw	a6,-628(a5)
20407a0c:	d887a783          	lw	a5,-632(a5)
20407a10:	00f72023          	sw	a5,0(a4)
20407a14:	01072223          	sw	a6,4(a4)
  for (idx = 0; idx < arg_ptr.args_count; ++idx) {
20407a18:	fec42783          	lw	a5,-20(s0)
20407a1c:	00178793          	addi	a5,a5,1
20407a20:	fef42623          	sw	a5,-20(s0)
20407a24:	f0042783          	lw	a5,-256(s0)
20407a28:	fec42703          	lw	a4,-20(s0)
20407a2c:	ecf760e3          	bltu	a4,a5,204078ec <TVMGraphExecutor_CreateTVMOp+0x68>
    }
  }
  if (!strcmp(param->func_name, "__nop") || !strcmp(param->func_name, "__copy")) {
20407a30:	cd842783          	lw	a5,-808(s0)
20407a34:	00019597          	auipc	a1,0x19
20407a38:	d6c58593          	addi	a1,a1,-660 # 204207a0 <__func__.3846+0xab8>
20407a3c:	00078513          	mv	a0,a5
20407a40:	7ea0b0ef          	jal	ra,2041322a <strcmp>
20407a44:	00050793          	mv	a5,a0
20407a48:	02078063          	beqz	a5,20407a68 <TVMGraphExecutor_CreateTVMOp+0x1e4>
20407a4c:	cd842783          	lw	a5,-808(s0)
20407a50:	00019597          	auipc	a1,0x19
20407a54:	d5858593          	addi	a1,a1,-680 # 204207a8 <__func__.3846+0xac0>
20407a58:	00078513          	mv	a0,a5
20407a5c:	7ce0b0ef          	jal	ra,2041322a <strcmp>
20407a60:	00050793          	mv	a5,a0
20407a64:	02079a63          	bnez	a5,20407a98 <TVMGraphExecutor_CreateTVMOp+0x214>
    fprintf(stderr, "%s function is not yet supported.", param->func_name);
20407a68:	5fbf9797          	auipc	a5,0x5fbf9
20407a6c:	fd078793          	addi	a5,a5,-48 # 80000a38 <_impure_ptr>
20407a70:	0007a783          	lw	a5,0(a5)
20407a74:	00c7a783          	lw	a5,12(a5)
20407a78:	cd842703          	lw	a4,-808(s0)
20407a7c:	00070613          	mv	a2,a4
20407a80:	00019597          	auipc	a1,0x19
20407a84:	d3058593          	addi	a1,a1,-720 # 204207b0 <__func__.3846+0xac8>
20407a88:	00078513          	mv	a0,a5
20407a8c:	37e0b0ef          	jal	ra,20412e0a <fprintf>
    status = -1;
20407a90:	fff00793          	li	a5,-1
20407a94:	fef42423          	sw	a5,-24(s0)
  }

  TVMArgs targs = TVMArgs_Create(arg_ptr.arg_values, arg_ptr.arg_tcodes, arg_ptr.arg_values_count);
20407a98:	f5842683          	lw	a3,-168(s0)
20407a9c:	cf040713          	addi	a4,s0,-784
20407aa0:	d7040793          	addi	a5,s0,-656
20407aa4:	1ec78613          	addi	a2,a5,492
20407aa8:	d7040793          	addi	a5,s0,-656
20407aac:	19878793          	addi	a5,a5,408
20407ab0:	00078593          	mv	a1,a5
20407ab4:	00070513          	mv	a0,a4
20407ab8:	cedfb0ef          	jal	ra,204037a4 <TVMArgs_Create>
  status = TVMPackedFunc_InitModuleFunc(pf, executor->module_handle, param->func_name, &targs);
20407abc:	cdc42783          	lw	a5,-804(s0)
20407ac0:	0407a783          	lw	a5,64(a5)
20407ac4:	cd842703          	lw	a4,-808(s0)
20407ac8:	cf040693          	addi	a3,s0,-784
20407acc:	00070613          	mv	a2,a4
20407ad0:	00078593          	mv	a1,a5
20407ad4:	ccc42503          	lw	a0,-820(s0)
20407ad8:	c19fb0ef          	jal	ra,204036f0 <TVMPackedFunc_InitModuleFunc>
20407adc:	fea42423          	sw	a0,-24(s0)

  return status;
20407ae0:	fe842783          	lw	a5,-24(s0)
}
20407ae4:	00078513          	mv	a0,a5
20407ae8:	33c12083          	lw	ra,828(sp)
20407aec:	33812403          	lw	s0,824(sp)
20407af0:	33412903          	lw	s2,820(sp)
20407af4:	33012983          	lw	s3,816(sp)
20407af8:	34010113          	addi	sp,sp,832
20407afc:	00008067          	ret

20407b00 <TVMGraphExecutor_Init>:
 * \param devs The device of the host and devices where graph nodes will be
 * executed on.
 * \return 0 on success.
 */
int TVMGraphExecutor_Init(TVMGraphExecutor* executor, const char* graph_json,
                          TVMModuleHandle module_handle, const DLDevice* devs) {
20407b00:	f9010113          	addi	sp,sp,-112
20407b04:	06112623          	sw	ra,108(sp)
20407b08:	06812423          	sw	s0,104(sp)
20407b0c:	07010413          	addi	s0,sp,112
20407b10:	f8a42e23          	sw	a0,-100(s0)
20407b14:	f8b42c23          	sw	a1,-104(s0)
20407b18:	f8c42a23          	sw	a2,-108(s0)
20407b1c:	f8d42823          	sw	a3,-112(s0)
  JSONReader reader;
  tvm_crt_error_t err = JSONReader_Create(graph_json, &reader);
20407b20:	fa440793          	addi	a5,s0,-92
20407b24:	00078593          	mv	a1,a5
20407b28:	f9842503          	lw	a0,-104(s0)
20407b2c:	6d0010ef          	jal	ra,204091fc <JSONReader_Create>
20407b30:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20407b34:	fec42783          	lw	a5,-20(s0)
20407b38:	00078663          	beqz	a5,20407b44 <TVMGraphExecutor_Init+0x44>
    return -1;
20407b3c:	fff00793          	li	a5,-1
20407b40:	0840006f          	j	20407bc4 <TVMGraphExecutor_Init+0xc4>
  }

  TVMGraphExecutor_Load(executor, &reader);
20407b44:	fa440793          	addi	a5,s0,-92
20407b48:	00078593          	mv	a1,a5
20407b4c:	f9c42503          	lw	a0,-100(s0)
20407b50:	c65fd0ef          	jal	ra,204057b4 <TVMGraphExecutor_Load>
  err = JSONReader_Release(&reader);
20407b54:	fa440793          	addi	a5,s0,-92
20407b58:	00078513          	mv	a0,a5
20407b5c:	085010ef          	jal	ra,204093e0 <JSONReader_Release>
20407b60:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20407b64:	fec42783          	lw	a5,-20(s0)
20407b68:	00078663          	beqz	a5,20407b74 <TVMGraphExecutor_Init+0x74>
    return -1;
20407b6c:	fff00793          	li	a5,-1
20407b70:	0540006f          	j	20407bc4 <TVMGraphExecutor_Init+0xc4>
  }
  executor->module_handle = module_handle;
20407b74:	f9c42783          	lw	a5,-100(s0)
20407b78:	f9442703          	lw	a4,-108(s0)
20407b7c:	04e7a023          	sw	a4,64(a5)
  executor->devices[0] = devs[0];
20407b80:	f9c42703          	lw	a4,-100(s0)
20407b84:	f9042783          	lw	a5,-112(s0)
20407b88:	0047a803          	lw	a6,4(a5)
20407b8c:	0007a783          	lw	a5,0(a5)
20407b90:	04f72223          	sw	a5,68(a4)
20407b94:	05072423          	sw	a6,72(a4)

  int status;
  status = TVMGraphExecutor_SetupStorage(executor);
20407b98:	f9c42503          	lw	a0,-100(s0)
20407b9c:	ffdfe0ef          	jal	ra,20406b98 <TVMGraphExecutor_SetupStorage>
20407ba0:	fea42423          	sw	a0,-24(s0)
  if (status != 0) {
20407ba4:	fe842783          	lw	a5,-24(s0)
20407ba8:	00078663          	beqz	a5,20407bb4 <TVMGraphExecutor_Init+0xb4>
    return status;
20407bac:	fe842783          	lw	a5,-24(s0)
20407bb0:	0140006f          	j	20407bc4 <TVMGraphExecutor_Init+0xc4>
  }
  status = TVMGraphExecutor_SetupOpExecs(executor);
20407bb4:	f9c42503          	lw	a0,-100(s0)
20407bb8:	961ff0ef          	jal	ra,20407518 <TVMGraphExecutor_SetupOpExecs>
20407bbc:	fea42423          	sw	a0,-24(s0)

  return status;
20407bc0:	fe842783          	lw	a5,-24(s0)
}
20407bc4:	00078513          	mv	a0,a5
20407bc8:	06c12083          	lw	ra,108(sp)
20407bcc:	06812403          	lw	s0,104(sp)
20407bd0:	07010113          	addi	sp,sp,112
20407bd4:	00008067          	ret

20407bd8 <TVMGraphExecutor_Create>:

int TVMGraphExecutor_Create(const char* sym_json, TVMModuleHandle module_handle,
                            const DLDevice* devs, TVMGraphExecutor** executor) {
20407bd8:	fd010113          	addi	sp,sp,-48
20407bdc:	02112623          	sw	ra,44(sp)
20407be0:	02812423          	sw	s0,40(sp)
20407be4:	03010413          	addi	s0,sp,48
20407be8:	fca42e23          	sw	a0,-36(s0)
20407bec:	fcb42c23          	sw	a1,-40(s0)
20407bf0:	fcc42a23          	sw	a2,-44(s0)
20407bf4:	fcd42823          	sw	a3,-48(s0)
  DLDevice dev = {kDLCPU, 0};
20407bf8:	00100793          	li	a5,1
20407bfc:	fef42223          	sw	a5,-28(s0)
20407c00:	fe042423          	sw	zero,-24(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutor), dev, (void**)executor);
20407c04:	fd042683          	lw	a3,-48(s0)
20407c08:	fe442583          	lw	a1,-28(s0)
20407c0c:	fe842603          	lw	a2,-24(s0)
20407c10:	06800513          	li	a0,104
20407c14:	de9f80ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20407c18:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20407c1c:	fec42783          	lw	a5,-20(s0)
20407c20:	02078863          	beqz	a5,20407c50 <TVMGraphExecutor_Create+0x78>
    fprintf(stderr, "memory allocate error: %08x", err);
20407c24:	5fbf9797          	auipc	a5,0x5fbf9
20407c28:	e1478793          	addi	a5,a5,-492 # 80000a38 <_impure_ptr>
20407c2c:	0007a783          	lw	a5,0(a5)
20407c30:	00c7a783          	lw	a5,12(a5)
20407c34:	fec42603          	lw	a2,-20(s0)
20407c38:	00018597          	auipc	a1,0x18
20407c3c:	35858593          	addi	a1,a1,856 # 2041ff90 <__func__.3846+0x2a8>
20407c40:	00078513          	mv	a0,a5
20407c44:	1c60b0ef          	jal	ra,20412e0a <fprintf>
    return -1;
20407c48:	fff00793          	li	a5,-1
20407c4c:	03c0006f          	j	20407c88 <TVMGraphExecutor_Create+0xb0>
  }

  memset(*executor, 0, sizeof(TVMGraphExecutor));
20407c50:	fd042783          	lw	a5,-48(s0)
20407c54:	0007a783          	lw	a5,0(a5)
20407c58:	06800613          	li	a2,104
20407c5c:	00000593          	li	a1,0
20407c60:	00078513          	mv	a0,a5
20407c64:	44a0b0ef          	jal	ra,204130ae <memset>
  // init
  return TVMGraphExecutor_Init(*executor, sym_json, module_handle, devs);
20407c68:	fd042783          	lw	a5,-48(s0)
20407c6c:	0007a783          	lw	a5,0(a5)
20407c70:	fd442683          	lw	a3,-44(s0)
20407c74:	fd842603          	lw	a2,-40(s0)
20407c78:	fdc42583          	lw	a1,-36(s0)
20407c7c:	00078513          	mv	a0,a5
20407c80:	e81ff0ef          	jal	ra,20407b00 <TVMGraphExecutor_Init>
20407c84:	00050793          	mv	a5,a0
}
20407c88:	00078513          	mv	a0,a5
20407c8c:	02c12083          	lw	ra,44(sp)
20407c90:	02812403          	lw	s0,40(sp)
20407c94:	03010113          	addi	sp,sp,48
20407c98:	00008067          	ret

20407c9c <TVMGraphExecutor_Release>:

int TVMGraphExecutor_Release(TVMGraphExecutor** pptr) {
20407c9c:	fc010113          	addi	sp,sp,-64
20407ca0:	02112e23          	sw	ra,60(sp)
20407ca4:	02812c23          	sw	s0,56(sp)
20407ca8:	02912a23          	sw	s1,52(sp)
20407cac:	04010413          	addi	s0,sp,64
20407cb0:	fca42623          	sw	a0,-52(s0)
  int status = 0;
20407cb4:	fe042423          	sw	zero,-24(s0)
  int32_t idx;
  TVMGraphExecutor* executor = (TVMGraphExecutor*)(*pptr);
20407cb8:	fcc42783          	lw	a5,-52(s0)
20407cbc:	0007a783          	lw	a5,0(a5)
20407cc0:	fef42223          	sw	a5,-28(s0)
  for (idx = 0; idx < executor->nodes_count; ++idx) {
20407cc4:	fe042623          	sw	zero,-20(s0)
20407cc8:	04c0006f          	j	20407d14 <TVMGraphExecutor_Release+0x78>
    status = TVMGraphExecutorNodeRelease(&(executor->nodes[idx]));
20407ccc:	fe442783          	lw	a5,-28(s0)
20407cd0:	0007a483          	lw	s1,0(a5)
20407cd4:	fec42783          	lw	a5,-20(s0)
20407cd8:	16c00593          	li	a1,364
20407cdc:	00078513          	mv	a0,a5
20407ce0:	28d170ef          	jal	ra,2041f76c <__mulsi3>
20407ce4:	00050793          	mv	a5,a0
20407ce8:	00f487b3          	add	a5,s1,a5
20407cec:	00078513          	mv	a0,a5
20407cf0:	f14fc0ef          	jal	ra,20404404 <TVMGraphExecutorNodeRelease>
20407cf4:	fea42423          	sw	a0,-24(s0)
    if (status != 0) {
20407cf8:	fe842783          	lw	a5,-24(s0)
20407cfc:	00078663          	beqz	a5,20407d08 <TVMGraphExecutor_Release+0x6c>
      return status;
20407d00:	fe842783          	lw	a5,-24(s0)
20407d04:	3200006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  for (idx = 0; idx < executor->nodes_count; ++idx) {
20407d08:	fec42783          	lw	a5,-20(s0)
20407d0c:	00178793          	addi	a5,a5,1
20407d10:	fef42623          	sw	a5,-20(s0)
20407d14:	fe442783          	lw	a5,-28(s0)
20407d18:	0047a703          	lw	a4,4(a5)
20407d1c:	fec42783          	lw	a5,-20(s0)
20407d20:	fae7e6e3          	bltu	a5,a4,20407ccc <TVMGraphExecutor_Release+0x30>
    }
  }
  DLDevice dev = {kDLCPU, 0};
20407d24:	00100793          	li	a5,1
20407d28:	fcf42e23          	sw	a5,-36(s0)
20407d2c:	fe042023          	sw	zero,-32(s0)
  status = TVMPlatformMemoryFree(executor->nodes, dev);
20407d30:	fe442783          	lw	a5,-28(s0)
20407d34:	0007a783          	lw	a5,0(a5)
20407d38:	fdc42583          	lw	a1,-36(s0)
20407d3c:	fe042603          	lw	a2,-32(s0)
20407d40:	00078513          	mv	a0,a5
20407d44:	d1df80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407d48:	00050793          	mv	a5,a0
20407d4c:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407d50:	fe842783          	lw	a5,-24(s0)
20407d54:	00078663          	beqz	a5,20407d60 <TVMGraphExecutor_Release+0xc4>
    return status;
20407d58:	fe842783          	lw	a5,-24(s0)
20407d5c:	2c80006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMGraphExecutorGraphAttr_Release(&(executor->attrs));
20407d60:	fe442783          	lw	a5,-28(s0)
20407d64:	02078793          	addi	a5,a5,32
20407d68:	00078513          	mv	a0,a5
20407d6c:	891fd0ef          	jal	ra,204055fc <TVMGraphExecutorGraphAttr_Release>
20407d70:	fea42423          	sw	a0,-24(s0)
  if (status != 0) {
20407d74:	fe842783          	lw	a5,-24(s0)
20407d78:	00078663          	beqz	a5,20407d84 <TVMGraphExecutor_Release+0xe8>
    return status;
20407d7c:	fe842783          	lw	a5,-24(s0)
20407d80:	2a40006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  for (idx = 0; idx < executor->storage_pool_count; ++idx) {
20407d84:	fe042623          	sw	zero,-20(s0)
20407d88:	0780006f          	j	20407e00 <TVMGraphExecutor_Release+0x164>
    if (executor->storage_pool[idx].is_linked_param == 0) {
20407d8c:	fe442783          	lw	a5,-28(s0)
20407d90:	0507a683          	lw	a3,80(a5)
20407d94:	fec42703          	lw	a4,-20(s0)
20407d98:	00070793          	mv	a5,a4
20407d9c:	00179793          	slli	a5,a5,0x1
20407da0:	00e787b3          	add	a5,a5,a4
20407da4:	00479793          	slli	a5,a5,0x4
20407da8:	00f687b3          	add	a5,a3,a5
20407dac:	0007c783          	lbu	a5,0(a5)
20407db0:	04079263          	bnez	a5,20407df4 <TVMGraphExecutor_Release+0x158>
      status = TVMNDArray_Release(&(executor->storage_pool[idx]).array);
20407db4:	fe442783          	lw	a5,-28(s0)
20407db8:	0507a683          	lw	a3,80(a5)
20407dbc:	fec42703          	lw	a4,-20(s0)
20407dc0:	00070793          	mv	a5,a4
20407dc4:	00179793          	slli	a5,a5,0x1
20407dc8:	00e787b3          	add	a5,a5,a4
20407dcc:	00479793          	slli	a5,a5,0x4
20407dd0:	00f687b3          	add	a5,a3,a5
20407dd4:	00878793          	addi	a5,a5,8
20407dd8:	00078513          	mv	a0,a5
20407ddc:	d50fb0ef          	jal	ra,2040332c <TVMNDArray_Release>
20407de0:	fea42423          	sw	a0,-24(s0)
      if (status != 0) {
20407de4:	fe842783          	lw	a5,-24(s0)
20407de8:	00078663          	beqz	a5,20407df4 <TVMGraphExecutor_Release+0x158>
        return status;
20407dec:	fe842783          	lw	a5,-24(s0)
20407df0:	2340006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  for (idx = 0; idx < executor->storage_pool_count; ++idx) {
20407df4:	fec42783          	lw	a5,-20(s0)
20407df8:	00178793          	addi	a5,a5,1
20407dfc:	fef42623          	sw	a5,-20(s0)
20407e00:	fe442783          	lw	a5,-28(s0)
20407e04:	0547a703          	lw	a4,84(a5)
20407e08:	fec42783          	lw	a5,-20(s0)
20407e0c:	f8e7e0e3          	bltu	a5,a4,20407d8c <TVMGraphExecutor_Release+0xf0>
      }
    }
  }
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
20407e10:	fe042623          	sw	zero,-20(s0)
20407e14:	05c0006f          	j	20407e70 <TVMGraphExecutor_Release+0x1d4>
    status = TVMPlatformMemoryFree(executor->data_entry[idx].dl_tensor.shape, dev);
20407e18:	fe442783          	lw	a5,-28(s0)
20407e1c:	0587a683          	lw	a3,88(a5)
20407e20:	fec42703          	lw	a4,-20(s0)
20407e24:	00070793          	mv	a5,a4
20407e28:	00279793          	slli	a5,a5,0x2
20407e2c:	00e787b3          	add	a5,a5,a4
20407e30:	00379793          	slli	a5,a5,0x3
20407e34:	00f687b3          	add	a5,a3,a5
20407e38:	0147a783          	lw	a5,20(a5)
20407e3c:	fdc42583          	lw	a1,-36(s0)
20407e40:	fe042603          	lw	a2,-32(s0)
20407e44:	00078513          	mv	a0,a5
20407e48:	c19f80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407e4c:	00050793          	mv	a5,a0
20407e50:	fef42423          	sw	a5,-24(s0)
    if (status != 0) {
20407e54:	fe842783          	lw	a5,-24(s0)
20407e58:	00078663          	beqz	a5,20407e64 <TVMGraphExecutor_Release+0x1c8>
      return status;
20407e5c:	fe842783          	lw	a5,-24(s0)
20407e60:	1c40006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
20407e64:	fec42783          	lw	a5,-20(s0)
20407e68:	00178793          	addi	a5,a5,1
20407e6c:	fef42623          	sw	a5,-20(s0)
20407e70:	fe442783          	lw	a5,-28(s0)
20407e74:	05c7a703          	lw	a4,92(a5)
20407e78:	fec42783          	lw	a5,-20(s0)
20407e7c:	f8e7eee3          	bltu	a5,a4,20407e18 <TVMGraphExecutor_Release+0x17c>
    }
  }
  status = TVMPlatformMemoryFree(executor->input_nodes, dev);
20407e80:	fe442783          	lw	a5,-28(s0)
20407e84:	0087a783          	lw	a5,8(a5)
20407e88:	fdc42583          	lw	a1,-36(s0)
20407e8c:	fe042603          	lw	a2,-32(s0)
20407e90:	00078513          	mv	a0,a5
20407e94:	bcdf80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407e98:	00050793          	mv	a5,a0
20407e9c:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407ea0:	fe842783          	lw	a5,-24(s0)
20407ea4:	00078663          	beqz	a5,20407eb0 <TVMGraphExecutor_Release+0x214>
    return status;
20407ea8:	fe842783          	lw	a5,-24(s0)
20407eac:	1780006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->node_row_ptr, dev);
20407eb0:	fe442783          	lw	a5,-28(s0)
20407eb4:	0107a783          	lw	a5,16(a5)
20407eb8:	fdc42583          	lw	a1,-36(s0)
20407ebc:	fe042603          	lw	a2,-32(s0)
20407ec0:	00078513          	mv	a0,a5
20407ec4:	b9df80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407ec8:	00050793          	mv	a5,a0
20407ecc:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407ed0:	fe842783          	lw	a5,-24(s0)
20407ed4:	00078663          	beqz	a5,20407ee0 <TVMGraphExecutor_Release+0x244>
    return status;
20407ed8:	fe842783          	lw	a5,-24(s0)
20407edc:	1480006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->outputs, dev);
20407ee0:	fe442783          	lw	a5,-28(s0)
20407ee4:	0187a783          	lw	a5,24(a5)
20407ee8:	fdc42583          	lw	a1,-36(s0)
20407eec:	fe042603          	lw	a2,-32(s0)
20407ef0:	00078513          	mv	a0,a5
20407ef4:	b6df80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407ef8:	00050793          	mv	a5,a0
20407efc:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407f00:	fe842783          	lw	a5,-24(s0)
20407f04:	00078663          	beqz	a5,20407f10 <TVMGraphExecutor_Release+0x274>
    return status;
20407f08:	fe842783          	lw	a5,-24(s0)
20407f0c:	1180006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->storage_pool, dev);
20407f10:	fe442783          	lw	a5,-28(s0)
20407f14:	0507a783          	lw	a5,80(a5)
20407f18:	fdc42583          	lw	a1,-36(s0)
20407f1c:	fe042603          	lw	a2,-32(s0)
20407f20:	00078513          	mv	a0,a5
20407f24:	b3df80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407f28:	00050793          	mv	a5,a0
20407f2c:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407f30:	fe842783          	lw	a5,-24(s0)
20407f34:	00078663          	beqz	a5,20407f40 <TVMGraphExecutor_Release+0x2a4>
    return status;
20407f38:	fe842783          	lw	a5,-24(s0)
20407f3c:	0e80006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->data_entry, dev);
20407f40:	fe442783          	lw	a5,-28(s0)
20407f44:	0587a783          	lw	a5,88(a5)
20407f48:	fdc42583          	lw	a1,-36(s0)
20407f4c:	fe042603          	lw	a2,-32(s0)
20407f50:	00078513          	mv	a0,a5
20407f54:	b0df80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407f58:	00050793          	mv	a5,a0
20407f5c:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407f60:	fe842783          	lw	a5,-24(s0)
20407f64:	00078663          	beqz	a5,20407f70 <TVMGraphExecutor_Release+0x2d4>
    return status;
20407f68:	fe842783          	lw	a5,-24(s0)
20407f6c:	0b80006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->op_execs, dev);
20407f70:	fe442783          	lw	a5,-28(s0)
20407f74:	0607a783          	lw	a5,96(a5)
20407f78:	fdc42583          	lw	a1,-36(s0)
20407f7c:	fe042603          	lw	a2,-32(s0)
20407f80:	00078513          	mv	a0,a5
20407f84:	addf80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407f88:	00050793          	mv	a5,a0
20407f8c:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407f90:	fe842783          	lw	a5,-24(s0)
20407f94:	00078663          	beqz	a5,20407fa0 <TVMGraphExecutor_Release+0x304>
    return status;
20407f98:	fe842783          	lw	a5,-24(s0)
20407f9c:	0880006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(*pptr, dev);
20407fa0:	fcc42783          	lw	a5,-52(s0)
20407fa4:	0007a783          	lw	a5,0(a5)
20407fa8:	fdc42583          	lw	a1,-36(s0)
20407fac:	fe042603          	lw	a2,-32(s0)
20407fb0:	00078513          	mv	a0,a5
20407fb4:	aadf80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407fb8:	00050793          	mv	a5,a0
20407fbc:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
20407fc0:	fe842783          	lw	a5,-24(s0)
20407fc4:	00078663          	beqz	a5,20407fd0 <TVMGraphExecutor_Release+0x334>
    return status;
20407fc8:	fe842783          	lw	a5,-24(s0)
20407fcc:	0580006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
  }

  if (g_fexecs) {
20407fd0:	5fbfb797          	auipc	a5,0x5fbfb
20407fd4:	f1478793          	addi	a5,a5,-236 # 80002ee4 <g_fexecs>
20407fd8:	0007a783          	lw	a5,0(a5)
20407fdc:	04078263          	beqz	a5,20408020 <TVMGraphExecutor_Release+0x384>
    status = TVMPlatformMemoryFree(g_fexecs, dev);
20407fe0:	5fbfb797          	auipc	a5,0x5fbfb
20407fe4:	f0478793          	addi	a5,a5,-252 # 80002ee4 <g_fexecs>
20407fe8:	0007a783          	lw	a5,0(a5)
20407fec:	fdc42583          	lw	a1,-36(s0)
20407ff0:	fe042603          	lw	a2,-32(s0)
20407ff4:	00078513          	mv	a0,a5
20407ff8:	a69f80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
20407ffc:	00050793          	mv	a5,a0
20408000:	fef42423          	sw	a5,-24(s0)
    g_fexecs = 0;
20408004:	5fbfb797          	auipc	a5,0x5fbfb
20408008:	ee078793          	addi	a5,a5,-288 # 80002ee4 <g_fexecs>
2040800c:	0007a023          	sw	zero,0(a5)
    if (status != 0) {
20408010:	fe842783          	lw	a5,-24(s0)
20408014:	00078663          	beqz	a5,20408020 <TVMGraphExecutor_Release+0x384>
      return status;
20408018:	fe842783          	lw	a5,-24(s0)
2040801c:	0080006f          	j	20408024 <TVMGraphExecutor_Release+0x388>
    }
  }

  return 0;
20408020:	00000793          	li	a5,0
}
20408024:	00078513          	mv	a0,a5
20408028:	03c12083          	lw	ra,60(sp)
2040802c:	03812403          	lw	s0,56(sp)
20408030:	03412483          	lw	s1,52(sp)
20408034:	04010113          	addi	sp,sp,64
20408038:	00008067          	ret

2040803c <JSONNodeEntryLoad>:
  uint32_t index;
  uint32_t version;
  void (*Load)(struct JSONNodeEntry* entry, JSONReader* reader);
} JSONNodeEntry;

void JSONNodeEntryLoad(JSONNodeEntry* entry, JSONReader* reader) {
2040803c:	fe010113          	addi	sp,sp,-32
20408040:	00112e23          	sw	ra,28(sp)
20408044:	00812c23          	sw	s0,24(sp)
20408048:	02010413          	addi	s0,sp,32
2040804c:	fea42623          	sw	a0,-20(s0)
20408050:	feb42423          	sw	a1,-24(s0)
  reader->BeginArray(reader);
20408054:	fe842783          	lw	a5,-24(s0)
20408058:	0307a783          	lw	a5,48(a5)
2040805c:	fe842503          	lw	a0,-24(s0)
20408060:	000780e7          	jalr	a5
  if (reader->NextArrayItem(reader)) {
20408064:	fe842783          	lw	a5,-24(s0)
20408068:	03c7a783          	lw	a5,60(a5)
2040806c:	fe842503          	lw	a0,-24(s0)
20408070:	000780e7          	jalr	a5
20408074:	00050793          	mv	a5,a0
20408078:	02078663          	beqz	a5,204080a4 <JSONNodeEntryLoad+0x68>
    fprintf(stderr, "invalid json format\n");
2040807c:	5fbf9797          	auipc	a5,0x5fbf9
20408080:	9bc78793          	addi	a5,a5,-1604 # 80000a38 <_impure_ptr>
20408084:	0007a783          	lw	a5,0(a5)
20408088:	00c7a783          	lw	a5,12(a5)
2040808c:	00078693          	mv	a3,a5
20408090:	01400613          	li	a2,20
20408094:	00100593          	li	a1,1
20408098:	00018517          	auipc	a0,0x18
2040809c:	74850513          	addi	a0,a0,1864 # 204207e0 <__func__.3846+0xaf8>
204080a0:	6050a0ef          	jal	ra,20412ea4 <fwrite>
  }
  reader->ReadUnsignedInteger(reader, &(entry->node_id));
204080a4:	fe842783          	lw	a5,-24(s0)
204080a8:	0247a703          	lw	a4,36(a5)
204080ac:	fec42783          	lw	a5,-20(s0)
204080b0:	00078593          	mv	a1,a5
204080b4:	fe842503          	lw	a0,-24(s0)
204080b8:	000700e7          	jalr	a4
  if (reader->NextArrayItem(reader)) {
204080bc:	fe842783          	lw	a5,-24(s0)
204080c0:	03c7a783          	lw	a5,60(a5)
204080c4:	fe842503          	lw	a0,-24(s0)
204080c8:	000780e7          	jalr	a5
204080cc:	00050793          	mv	a5,a0
204080d0:	02078663          	beqz	a5,204080fc <JSONNodeEntryLoad+0xc0>
    fprintf(stderr, "invalid json format\n");
204080d4:	5fbf9797          	auipc	a5,0x5fbf9
204080d8:	96478793          	addi	a5,a5,-1692 # 80000a38 <_impure_ptr>
204080dc:	0007a783          	lw	a5,0(a5)
204080e0:	00c7a783          	lw	a5,12(a5)
204080e4:	00078693          	mv	a3,a5
204080e8:	01400613          	li	a2,20
204080ec:	00100593          	li	a1,1
204080f0:	00018517          	auipc	a0,0x18
204080f4:	6f050513          	addi	a0,a0,1776 # 204207e0 <__func__.3846+0xaf8>
204080f8:	5ad0a0ef          	jal	ra,20412ea4 <fwrite>
  }
  reader->ReadUnsignedInteger(reader, &(entry->index));
204080fc:	fe842783          	lw	a5,-24(s0)
20408100:	0247a703          	lw	a4,36(a5)
20408104:	fec42783          	lw	a5,-20(s0)
20408108:	00478793          	addi	a5,a5,4
2040810c:	00078593          	mv	a1,a5
20408110:	fe842503          	lw	a0,-24(s0)
20408114:	000700e7          	jalr	a4
  if (reader->NextArrayItem(reader)) {
20408118:	fe842783          	lw	a5,-24(s0)
2040811c:	03c7a783          	lw	a5,60(a5)
20408120:	fe842503          	lw	a0,-24(s0)
20408124:	000780e7          	jalr	a5
20408128:	00050793          	mv	a5,a0
2040812c:	06078263          	beqz	a5,20408190 <JSONNodeEntryLoad+0x154>
    reader->ReadUnsignedInteger(reader, &(entry->version));
20408130:	fe842783          	lw	a5,-24(s0)
20408134:	0247a703          	lw	a4,36(a5)
20408138:	fec42783          	lw	a5,-20(s0)
2040813c:	00878793          	addi	a5,a5,8
20408140:	00078593          	mv	a1,a5
20408144:	fe842503          	lw	a0,-24(s0)
20408148:	000700e7          	jalr	a4
    if (!reader->NextArrayItem(reader)) {
2040814c:	fe842783          	lw	a5,-24(s0)
20408150:	03c7a783          	lw	a5,60(a5)
20408154:	fe842503          	lw	a0,-24(s0)
20408158:	000780e7          	jalr	a5
2040815c:	00050793          	mv	a5,a0
20408160:	02079c63          	bnez	a5,20408198 <JSONNodeEntryLoad+0x15c>
      fprintf(stderr, "invalid json format\n");
20408164:	5fbf9797          	auipc	a5,0x5fbf9
20408168:	8d478793          	addi	a5,a5,-1836 # 80000a38 <_impure_ptr>
2040816c:	0007a783          	lw	a5,0(a5)
20408170:	00c7a783          	lw	a5,12(a5)
20408174:	00078693          	mv	a3,a5
20408178:	01400613          	li	a2,20
2040817c:	00100593          	li	a1,1
20408180:	00018517          	auipc	a0,0x18
20408184:	66050513          	addi	a0,a0,1632 # 204207e0 <__func__.3846+0xaf8>
20408188:	51d0a0ef          	jal	ra,20412ea4 <fwrite>
    }
  } else {
    entry->version = 0;
  }
}
2040818c:	00c0006f          	j	20408198 <JSONNodeEntryLoad+0x15c>
    entry->version = 0;
20408190:	fec42783          	lw	a5,-20(s0)
20408194:	0007a423          	sw	zero,8(a5)
}
20408198:	00000013          	nop
2040819c:	01c12083          	lw	ra,28(sp)
204081a0:	01812403          	lw	s0,24(sp)
204081a4:	02010113          	addi	sp,sp,32
204081a8:	00008067          	ret

204081ac <SeqPush>:

// implementation of Seq class

void SeqPush(Seq* seq, uint32_t src) {
204081ac:	fe010113          	addi	sp,sp,-32
204081b0:	00112e23          	sw	ra,28(sp)
204081b4:	00812c23          	sw	s0,24(sp)
204081b8:	02010413          	addi	s0,sp,32
204081bc:	fea42623          	sw	a0,-20(s0)
204081c0:	feb42423          	sw	a1,-24(s0)
  if (seq->size >= seq->allocated) {
204081c4:	fec42783          	lw	a5,-20(s0)
204081c8:	0107a783          	lw	a5,16(a5)
204081cc:	00078693          	mv	a3,a5
204081d0:	00000713          	li	a4,0
204081d4:	fec42783          	lw	a5,-20(s0)
204081d8:	00c7a803          	lw	a6,12(a5)
204081dc:	0087a783          	lw	a5,8(a5)
204081e0:	00080593          	mv	a1,a6
204081e4:	00070613          	mv	a2,a4
204081e8:	02b66463          	bltu	a2,a1,20408210 <SeqPush+0x64>
204081ec:	00080593          	mv	a1,a6
204081f0:	00070613          	mv	a2,a4
204081f4:	00c59863          	bne	a1,a2,20408204 <SeqPush+0x58>
204081f8:	00078613          	mv	a2,a5
204081fc:	00068793          	mv	a5,a3
20408200:	00c7e863          	bltu	a5,a2,20408210 <SeqPush+0x64>
    printf("seq too large.\n");
20408204:	00018517          	auipc	a0,0x18
20408208:	5f450513          	addi	a0,a0,1524 # 204207f8 <__func__.3846+0xb10>
2040820c:	2140a0ef          	jal	ra,20412420 <__wrap_puts>
  }
  seq->data[seq->size] = src;
20408210:	fec42783          	lw	a5,-20(s0)
20408214:	0007a703          	lw	a4,0(a5)
20408218:	fec42783          	lw	a5,-20(s0)
2040821c:	0107a783          	lw	a5,16(a5)
20408220:	00279793          	slli	a5,a5,0x2
20408224:	00f707b3          	add	a5,a4,a5
20408228:	fe842703          	lw	a4,-24(s0)
2040822c:	00e7a023          	sw	a4,0(a5)
  seq->size += 1;
20408230:	fec42783          	lw	a5,-20(s0)
20408234:	0107a783          	lw	a5,16(a5)
20408238:	00178713          	addi	a4,a5,1
2040823c:	fec42783          	lw	a5,-20(s0)
20408240:	00e7a823          	sw	a4,16(a5)
}
20408244:	00000013          	nop
20408248:	01c12083          	lw	ra,28(sp)
2040824c:	01812403          	lw	s0,24(sp)
20408250:	02010113          	addi	sp,sp,32
20408254:	00008067          	ret

20408258 <SeqBack>:

uint32_t* SeqBack(Seq* seq) {
20408258:	fe010113          	addi	sp,sp,-32
2040825c:	00112e23          	sw	ra,28(sp)
20408260:	00812c23          	sw	s0,24(sp)
20408264:	02010413          	addi	s0,sp,32
20408268:	fea42623          	sw	a0,-20(s0)
  if (seq->size >= seq->allocated) {
2040826c:	fec42783          	lw	a5,-20(s0)
20408270:	0107a783          	lw	a5,16(a5)
20408274:	00078693          	mv	a3,a5
20408278:	00000713          	li	a4,0
2040827c:	fec42783          	lw	a5,-20(s0)
20408280:	00c7a803          	lw	a6,12(a5)
20408284:	0087a783          	lw	a5,8(a5)
20408288:	00080593          	mv	a1,a6
2040828c:	00070613          	mv	a2,a4
20408290:	02b66463          	bltu	a2,a1,204082b8 <SeqBack+0x60>
20408294:	00080593          	mv	a1,a6
20408298:	00070613          	mv	a2,a4
2040829c:	00c59863          	bne	a1,a2,204082ac <SeqBack+0x54>
204082a0:	00078613          	mv	a2,a5
204082a4:	00068793          	mv	a5,a3
204082a8:	00c7e863          	bltu	a5,a2,204082b8 <SeqBack+0x60>
    printf("seq too large.\n");
204082ac:	00018517          	auipc	a0,0x18
204082b0:	54c50513          	addi	a0,a0,1356 # 204207f8 <__func__.3846+0xb10>
204082b4:	16c0a0ef          	jal	ra,20412420 <__wrap_puts>
  }
  return seq->data + (seq->size - 1);
204082b8:	fec42783          	lw	a5,-20(s0)
204082bc:	0007a703          	lw	a4,0(a5)
204082c0:	fec42783          	lw	a5,-20(s0)
204082c4:	0107a683          	lw	a3,16(a5)
204082c8:	400007b7          	lui	a5,0x40000
204082cc:	fff78793          	addi	a5,a5,-1 # 3fffffff <__fini_array_end+0x1fbddd13>
204082d0:	00f687b3          	add	a5,a3,a5
204082d4:	00279793          	slli	a5,a5,0x2
204082d8:	00f707b3          	add	a5,a4,a5
}
204082dc:	00078513          	mv	a0,a5
204082e0:	01c12083          	lw	ra,28(sp)
204082e4:	01812403          	lw	s0,24(sp)
204082e8:	02010113          	addi	sp,sp,32
204082ec:	00008067          	ret

204082f0 <SeqPop>:

void SeqPop(Seq* seq) {
204082f0:	fe010113          	addi	sp,sp,-32
204082f4:	00112e23          	sw	ra,28(sp)
204082f8:	00812c23          	sw	s0,24(sp)
204082fc:	02010413          	addi	s0,sp,32
20408300:	fea42623          	sw	a0,-20(s0)
  if (seq->size >= seq->allocated) {
20408304:	fec42783          	lw	a5,-20(s0)
20408308:	0107a783          	lw	a5,16(a5)
2040830c:	00078693          	mv	a3,a5
20408310:	00000713          	li	a4,0
20408314:	fec42783          	lw	a5,-20(s0)
20408318:	00c7a803          	lw	a6,12(a5)
2040831c:	0087a783          	lw	a5,8(a5)
20408320:	00080593          	mv	a1,a6
20408324:	00070613          	mv	a2,a4
20408328:	02b66463          	bltu	a2,a1,20408350 <SeqPop+0x60>
2040832c:	00080593          	mv	a1,a6
20408330:	00070613          	mv	a2,a4
20408334:	00c59863          	bne	a1,a2,20408344 <SeqPop+0x54>
20408338:	00078613          	mv	a2,a5
2040833c:	00068793          	mv	a5,a3
20408340:	00c7e863          	bltu	a5,a2,20408350 <SeqPop+0x60>
    printf("seq size is too large.\n");
20408344:	00018517          	auipc	a0,0x18
20408348:	4c450513          	addi	a0,a0,1220 # 20420808 <__func__.3846+0xb20>
2040834c:	0d40a0ef          	jal	ra,20412420 <__wrap_puts>
  }
  if (seq->size == 0) {
20408350:	fec42783          	lw	a5,-20(s0)
20408354:	0107a783          	lw	a5,16(a5)
20408358:	00079863          	bnez	a5,20408368 <SeqPop+0x78>
    printf("seq size is too small.\n");
2040835c:	00018517          	auipc	a0,0x18
20408360:	4c450513          	addi	a0,a0,1220 # 20420820 <__func__.3846+0xb38>
20408364:	0bc0a0ef          	jal	ra,20412420 <__wrap_puts>
  }
  seq->size -= 1;
20408368:	fec42783          	lw	a5,-20(s0)
2040836c:	0107a783          	lw	a5,16(a5)
20408370:	fff78713          	addi	a4,a5,-1
20408374:	fec42783          	lw	a5,-20(s0)
20408378:	00e7a823          	sw	a4,16(a5)
}
2040837c:	00000013          	nop
20408380:	01c12083          	lw	ra,28(sp)
20408384:	01812403          	lw	s0,24(sp)
20408388:	02010113          	addi	sp,sp,32
2040838c:	00008067          	ret

20408390 <SeqCreate>:

tvm_crt_error_t SeqCreate(uint64_t len, Seq** seq) {
20408390:	fd010113          	addi	sp,sp,-48
20408394:	02112623          	sw	ra,44(sp)
20408398:	02812423          	sw	s0,40(sp)
2040839c:	03010413          	addi	s0,sp,48
204083a0:	fca42c23          	sw	a0,-40(s0)
204083a4:	fcb42e23          	sw	a1,-36(s0)
204083a8:	fcc42a23          	sw	a2,-44(s0)
  DLDevice dev = {kDLCPU, 0};
204083ac:	00100793          	li	a5,1
204083b0:	fef42223          	sw	a5,-28(s0)
204083b4:	fe042423          	sw	zero,-24(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(Seq), dev, (void**)seq);
204083b8:	fd442683          	lw	a3,-44(s0)
204083bc:	fe442583          	lw	a1,-28(s0)
204083c0:	fe842603          	lw	a2,-24(s0)
204083c4:	02000513          	li	a0,32
204083c8:	e34f80ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
204083cc:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
204083d0:	fec42783          	lw	a5,-20(s0)
204083d4:	00078663          	beqz	a5,204083e0 <SeqCreate+0x50>
    return err;
204083d8:	fec42783          	lw	a5,-20(s0)
204083dc:	0ac0006f          	j	20408488 <SeqCreate+0xf8>
  }
  memset(*seq, 0, sizeof(Seq));
204083e0:	fd442783          	lw	a5,-44(s0)
204083e4:	0007a783          	lw	a5,0(a5)
204083e8:	02000613          	li	a2,32
204083ec:	00000593          	li	a1,0
204083f0:	00078513          	mv	a0,a5
204083f4:	4bb0a0ef          	jal	ra,204130ae <memset>
  (*seq)->allocated = len;
204083f8:	fd442783          	lw	a5,-44(s0)
204083fc:	0007a703          	lw	a4,0(a5)
20408400:	fd842783          	lw	a5,-40(s0)
20408404:	fdc42803          	lw	a6,-36(s0)
20408408:	00f72423          	sw	a5,8(a4)
2040840c:	01072623          	sw	a6,12(a4)

  err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * len, dev, (void**)&(*seq)->data);
20408410:	fd842783          	lw	a5,-40(s0)
20408414:	00279713          	slli	a4,a5,0x2
20408418:	fd442783          	lw	a5,-44(s0)
2040841c:	0007a783          	lw	a5,0(a5)
20408420:	00078693          	mv	a3,a5
20408424:	fe442583          	lw	a1,-28(s0)
20408428:	fe842603          	lw	a2,-24(s0)
2040842c:	00070513          	mv	a0,a4
20408430:	dccf80ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20408434:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20408438:	fec42783          	lw	a5,-20(s0)
2040843c:	00078663          	beqz	a5,20408448 <SeqCreate+0xb8>
    return err;
20408440:	fec42783          	lw	a5,-20(s0)
20408444:	0440006f          	j	20408488 <SeqCreate+0xf8>
  }
  (*seq)->push_back = SeqPush;
20408448:	fd442783          	lw	a5,-44(s0)
2040844c:	0007a783          	lw	a5,0(a5)
20408450:	00000717          	auipc	a4,0x0
20408454:	d5c70713          	addi	a4,a4,-676 # 204081ac <SeqPush>
20408458:	00e7aa23          	sw	a4,20(a5)
  (*seq)->back = SeqBack;
2040845c:	fd442783          	lw	a5,-44(s0)
20408460:	0007a783          	lw	a5,0(a5)
20408464:	00000717          	auipc	a4,0x0
20408468:	df470713          	addi	a4,a4,-524 # 20408258 <SeqBack>
2040846c:	00e7ac23          	sw	a4,24(a5)
  (*seq)->pop_back = SeqPop;
20408470:	fd442783          	lw	a5,-44(s0)
20408474:	0007a783          	lw	a5,0(a5)
20408478:	00000717          	auipc	a4,0x0
2040847c:	e7870713          	addi	a4,a4,-392 # 204082f0 <SeqPop>
20408480:	00e7ae23          	sw	a4,28(a5)
  return err;
20408484:	fec42783          	lw	a5,-20(s0)
}
20408488:	00078513          	mv	a0,a5
2040848c:	02c12083          	lw	ra,44(sp)
20408490:	02812403          	lw	s0,40(sp)
20408494:	03010113          	addi	sp,sp,48
20408498:	00008067          	ret

2040849c <SeqRelease>:

tvm_crt_error_t SeqRelease(Seq* seq) {
2040849c:	fd010113          	addi	sp,sp,-48
204084a0:	02112623          	sw	ra,44(sp)
204084a4:	02812423          	sw	s0,40(sp)
204084a8:	03010413          	addi	s0,sp,48
204084ac:	fca42e23          	sw	a0,-36(s0)
  DLDevice dev = {kDLCPU, 0};
204084b0:	00100793          	li	a5,1
204084b4:	fef42223          	sw	a5,-28(s0)
204084b8:	fe042423          	sw	zero,-24(s0)
  tvm_crt_error_t err = TVMPlatformMemoryFree(seq->data, dev);
204084bc:	fdc42783          	lw	a5,-36(s0)
204084c0:	0007a783          	lw	a5,0(a5)
204084c4:	fe442583          	lw	a1,-28(s0)
204084c8:	fe842603          	lw	a2,-24(s0)
204084cc:	00078513          	mv	a0,a5
204084d0:	d90f80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
204084d4:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
204084d8:	fec42783          	lw	a5,-20(s0)
204084dc:	00078663          	beqz	a5,204084e8 <SeqRelease+0x4c>
    return err;
204084e0:	fec42783          	lw	a5,-20(s0)
204084e4:	0180006f          	j	204084fc <SeqRelease+0x60>
  }
  return TVMPlatformMemoryFree(seq, dev);
204084e8:	fe442583          	lw	a1,-28(s0)
204084ec:	fe842603          	lw	a2,-24(s0)
204084f0:	fdc42503          	lw	a0,-36(s0)
204084f4:	d6cf80ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
204084f8:	00050793          	mv	a5,a0
}
204084fc:	00078513          	mv	a0,a5
20408500:	02c12083          	lw	ra,44(sp)
20408504:	02812403          	lw	s0,40(sp)
20408508:	03010113          	addi	sp,sp,48
2040850c:	00008067          	ret

20408510 <JSONReader_NextChar>:

/*!
 * \brief Takes the next char from the input source.
 * \return the next character.
 */
char JSONReader_NextChar(JSONReader* reader) {
20408510:	fd010113          	addi	sp,sp,-48
20408514:	02812623          	sw	s0,44(sp)
20408518:	03010413          	addi	s0,sp,48
2040851c:	fca42e23          	sw	a0,-36(s0)
  char ch = reader->isptr[0];
20408520:	fdc42783          	lw	a5,-36(s0)
20408524:	0047a783          	lw	a5,4(a5)
20408528:	0007c783          	lbu	a5,0(a5)
2040852c:	fef407a3          	sb	a5,-17(s0)
  reader->isptr += 1;
20408530:	fdc42783          	lw	a5,-36(s0)
20408534:	0047a783          	lw	a5,4(a5)
20408538:	00178713          	addi	a4,a5,1
2040853c:	fdc42783          	lw	a5,-36(s0)
20408540:	00e7a223          	sw	a4,4(a5)
  return ch;
20408544:	fef44783          	lbu	a5,-17(s0)
}
20408548:	00078513          	mv	a0,a5
2040854c:	02c12403          	lw	s0,44(sp)
20408550:	03010113          	addi	sp,sp,48
20408554:	00008067          	ret

20408558 <JSONReader_PeekNextChar>:

/*!
 * \brief Returns the next char from the input source.
 * \return the next character.
 */
char JSONReader_PeekNextChar(JSONReader* reader) { return reader->isptr[0]; }
20408558:	fe010113          	addi	sp,sp,-32
2040855c:	00812e23          	sw	s0,28(sp)
20408560:	02010413          	addi	s0,sp,32
20408564:	fea42623          	sw	a0,-20(s0)
20408568:	fec42783          	lw	a5,-20(s0)
2040856c:	0047a783          	lw	a5,4(a5)
20408570:	0007c783          	lbu	a5,0(a5)
20408574:	00078513          	mv	a0,a5
20408578:	01c12403          	lw	s0,28(sp)
2040857c:	02010113          	addi	sp,sp,32
20408580:	00008067          	ret

20408584 <JSONReader_NextNonSpace>:

/*!
 * \brief Read next nonspace character.
 * \return the next nonspace character.
 */
char JSONReader_NextNonSpace(JSONReader* reader) {
20408584:	fd010113          	addi	sp,sp,-48
20408588:	02112623          	sw	ra,44(sp)
2040858c:	02812423          	sw	s0,40(sp)
20408590:	03010413          	addi	s0,sp,48
20408594:	fca42e23          	sw	a0,-36(s0)
  int ch;
  do {
    ch = reader->NextChar(reader);
20408598:	fdc42783          	lw	a5,-36(s0)
2040859c:	0147a783          	lw	a5,20(a5)
204085a0:	fdc42503          	lw	a0,-36(s0)
204085a4:	000780e7          	jalr	a5
204085a8:	00050793          	mv	a5,a0
204085ac:	fef42623          	sw	a5,-20(s0)
    if (ch == '\n') {
204085b0:	fec42703          	lw	a4,-20(s0)
204085b4:	00a00793          	li	a5,10
204085b8:	00f71c63          	bne	a4,a5,204085d0 <JSONReader_NextNonSpace+0x4c>
      ++(reader->line_count_n_);
204085bc:	fdc42783          	lw	a5,-36(s0)
204085c0:	00c7a783          	lw	a5,12(a5)
204085c4:	00178713          	addi	a4,a5,1
204085c8:	fdc42783          	lw	a5,-36(s0)
204085cc:	00e7a623          	sw	a4,12(a5)
    }
    if (ch == '\r') {
204085d0:	fec42703          	lw	a4,-20(s0)
204085d4:	00d00793          	li	a5,13
204085d8:	00f71c63          	bne	a4,a5,204085f0 <JSONReader_NextNonSpace+0x6c>
      ++(reader->line_count_r_);
204085dc:	fdc42783          	lw	a5,-36(s0)
204085e0:	0087a783          	lw	a5,8(a5)
204085e4:	00178713          	addi	a4,a5,1
204085e8:	fdc42783          	lw	a5,-36(s0)
204085ec:	00e7a423          	sw	a4,8(a5)
    }
  } while (isspace(ch));
204085f0:	1910a0ef          	jal	ra,20412f80 <__locale_ctype_ptr>
204085f4:	00050713          	mv	a4,a0
204085f8:	fec42783          	lw	a5,-20(s0)
204085fc:	00178793          	addi	a5,a5,1
20408600:	00f707b3          	add	a5,a4,a5
20408604:	0007c783          	lbu	a5,0(a5)
20408608:	0087f793          	andi	a5,a5,8
2040860c:	f80796e3          	bnez	a5,20408598 <JSONReader_NextNonSpace+0x14>
  return ch;
20408610:	fec42783          	lw	a5,-20(s0)
20408614:	0ff7f793          	andi	a5,a5,255
}
20408618:	00078513          	mv	a0,a5
2040861c:	02c12083          	lw	ra,44(sp)
20408620:	02812403          	lw	s0,40(sp)
20408624:	03010113          	addi	sp,sp,48
20408628:	00008067          	ret

2040862c <JSONReader_PeekNextNonSpace>:

/*!
 * \brief Read just before next nonspace but not read that.
 * \return the next nonspace character.
 */
char JSONReader_PeekNextNonSpace(JSONReader* reader) {
2040862c:	fd010113          	addi	sp,sp,-48
20408630:	02112623          	sw	ra,44(sp)
20408634:	02812423          	sw	s0,40(sp)
20408638:	03010413          	addi	s0,sp,48
2040863c:	fca42e23          	sw	a0,-36(s0)
  int ch;
  while (1) {
    ch = reader->PeekNextChar(reader);
20408640:	fdc42783          	lw	a5,-36(s0)
20408644:	01c7a783          	lw	a5,28(a5)
20408648:	fdc42503          	lw	a0,-36(s0)
2040864c:	000780e7          	jalr	a5
20408650:	00050793          	mv	a5,a0
20408654:	fef42623          	sw	a5,-20(s0)
    if (ch == '\n') {
20408658:	fec42703          	lw	a4,-20(s0)
2040865c:	00a00793          	li	a5,10
20408660:	00f71c63          	bne	a4,a5,20408678 <JSONReader_PeekNextNonSpace+0x4c>
      ++(reader->line_count_n_);
20408664:	fdc42783          	lw	a5,-36(s0)
20408668:	00c7a783          	lw	a5,12(a5)
2040866c:	00178713          	addi	a4,a5,1
20408670:	fdc42783          	lw	a5,-36(s0)
20408674:	00e7a623          	sw	a4,12(a5)
    }
    if (ch == '\r') {
20408678:	fec42703          	lw	a4,-20(s0)
2040867c:	00d00793          	li	a5,13
20408680:	00f71c63          	bne	a4,a5,20408698 <JSONReader_PeekNextNonSpace+0x6c>
      ++(reader->line_count_r_);
20408684:	fdc42783          	lw	a5,-36(s0)
20408688:	0087a783          	lw	a5,8(a5)
2040868c:	00178713          	addi	a4,a5,1
20408690:	fdc42783          	lw	a5,-36(s0)
20408694:	00e7a423          	sw	a4,8(a5)
    }
    if (!isspace(ch)) break;
20408698:	0e90a0ef          	jal	ra,20412f80 <__locale_ctype_ptr>
2040869c:	00050713          	mv	a4,a0
204086a0:	fec42783          	lw	a5,-20(s0)
204086a4:	00178793          	addi	a5,a5,1
204086a8:	00f707b3          	add	a5,a4,a5
204086ac:	0007c783          	lbu	a5,0(a5)
204086b0:	0087f793          	andi	a5,a5,8
204086b4:	00078c63          	beqz	a5,204086cc <JSONReader_PeekNextNonSpace+0xa0>
    reader->NextChar(reader);
204086b8:	fdc42783          	lw	a5,-36(s0)
204086bc:	0147a783          	lw	a5,20(a5)
204086c0:	fdc42503          	lw	a0,-36(s0)
204086c4:	000780e7          	jalr	a5
    ch = reader->PeekNextChar(reader);
204086c8:	f79ff06f          	j	20408640 <JSONReader_PeekNextNonSpace+0x14>
    if (!isspace(ch)) break;
204086cc:	00000013          	nop
  }
  return ch;
204086d0:	fec42783          	lw	a5,-20(s0)
204086d4:	0ff7f793          	andi	a5,a5,255
}
204086d8:	00078513          	mv	a0,a5
204086dc:	02c12083          	lw	ra,44(sp)
204086e0:	02812403          	lw	s0,40(sp)
204086e4:	03010113          	addi	sp,sp,48
204086e8:	00008067          	ret

204086ec <JSONReader_ReadString>:
 * \param out_str the output string. NULL to merely consume input and discard it.
 * \param out_str_size Number of bytes available to write starting from out_str. Includes
 *      terminating \0.
 * \throw tvm::Error when next token is not string
 */
int JSONReader_ReadString(JSONReader* reader, char* out_str, size_t out_str_size) {
204086ec:	fd010113          	addi	sp,sp,-48
204086f0:	02112623          	sw	ra,44(sp)
204086f4:	02812423          	sw	s0,40(sp)
204086f8:	03010413          	addi	s0,sp,48
204086fc:	fca42e23          	sw	a0,-36(s0)
20408700:	fcb42c23          	sw	a1,-40(s0)
20408704:	fcc42a23          	sw	a2,-44(s0)
  int status = 0;
20408708:	fe042423          	sw	zero,-24(s0)
  char ch = reader->NextNonSpace(reader);
2040870c:	fdc42783          	lw	a5,-36(s0)
20408710:	0187a783          	lw	a5,24(a5)
20408714:	fdc42503          	lw	a0,-36(s0)
20408718:	000780e7          	jalr	a5
2040871c:	00050793          	mv	a5,a0
20408720:	fef403a3          	sb	a5,-25(s0)
  size_t output_counter = 0;
20408724:	fe042623          	sw	zero,-20(s0)
  while (output_counter < out_str_size || out_str == NULL) {
20408728:	1fc0006f          	j	20408924 <JSONReader_ReadString+0x238>
    ch = reader->NextChar(reader);
2040872c:	fdc42783          	lw	a5,-36(s0)
20408730:	0147a783          	lw	a5,20(a5)
20408734:	fdc42503          	lw	a0,-36(s0)
20408738:	000780e7          	jalr	a5
2040873c:	00050793          	mv	a5,a0
20408740:	fef403a3          	sb	a5,-25(s0)
    if (ch == '\\') {
20408744:	fe744703          	lbu	a4,-25(s0)
20408748:	05c00793          	li	a5,92
2040874c:	12f71463          	bne	a4,a5,20408874 <JSONReader_ReadString+0x188>
      char sch = reader->NextChar(reader);
20408750:	fdc42783          	lw	a5,-36(s0)
20408754:	0147a783          	lw	a5,20(a5)
20408758:	fdc42503          	lw	a0,-36(s0)
2040875c:	000780e7          	jalr	a5
20408760:	00050793          	mv	a5,a0
20408764:	fef40323          	sb	a5,-26(s0)
      switch (sch) {
20408768:	fe644783          	lbu	a5,-26(s0)
2040876c:	06e00713          	li	a4,110
20408770:	04e78a63          	beq	a5,a4,204087c4 <JSONReader_ReadString+0xd8>
20408774:	06e00713          	li	a4,110
20408778:	00f74c63          	blt	a4,a5,20408790 <JSONReader_ReadString+0xa4>
2040877c:	02200713          	li	a4,34
20408780:	0ae78263          	beq	a5,a4,20408824 <JSONReader_ReadString+0x138>
20408784:	05c00713          	li	a4,92
20408788:	04e78e63          	beq	a5,a4,204087e4 <JSONReader_ReadString+0xf8>
2040878c:	0b80006f          	j	20408844 <JSONReader_ReadString+0x158>
20408790:	07200713          	li	a4,114
20408794:	00e78863          	beq	a5,a4,204087a4 <JSONReader_ReadString+0xb8>
20408798:	07400713          	li	a4,116
2040879c:	06e78463          	beq	a5,a4,20408804 <JSONReader_ReadString+0x118>
204087a0:	0a40006f          	j	20408844 <JSONReader_ReadString+0x158>
        case 'r':
          out_str[output_counter++] = '\r';
204087a4:	fec42783          	lw	a5,-20(s0)
204087a8:	00178713          	addi	a4,a5,1
204087ac:	fee42623          	sw	a4,-20(s0)
204087b0:	fd842703          	lw	a4,-40(s0)
204087b4:	00f707b3          	add	a5,a4,a5
204087b8:	00d00713          	li	a4,13
204087bc:	00e78023          	sb	a4,0(a5)
          break;
204087c0:	0e40006f          	j	204088a4 <JSONReader_ReadString+0x1b8>
        case 'n':
          out_str[output_counter++] = '\n';
204087c4:	fec42783          	lw	a5,-20(s0)
204087c8:	00178713          	addi	a4,a5,1
204087cc:	fee42623          	sw	a4,-20(s0)
204087d0:	fd842703          	lw	a4,-40(s0)
204087d4:	00f707b3          	add	a5,a4,a5
204087d8:	00a00713          	li	a4,10
204087dc:	00e78023          	sb	a4,0(a5)
          break;
204087e0:	0c40006f          	j	204088a4 <JSONReader_ReadString+0x1b8>
        case '\\':
          out_str[output_counter++] = '\\';
204087e4:	fec42783          	lw	a5,-20(s0)
204087e8:	00178713          	addi	a4,a5,1
204087ec:	fee42623          	sw	a4,-20(s0)
204087f0:	fd842703          	lw	a4,-40(s0)
204087f4:	00f707b3          	add	a5,a4,a5
204087f8:	05c00713          	li	a4,92
204087fc:	00e78023          	sb	a4,0(a5)
          break;
20408800:	0a40006f          	j	204088a4 <JSONReader_ReadString+0x1b8>
        case 't':
          out_str[output_counter++] = '\t';
20408804:	fec42783          	lw	a5,-20(s0)
20408808:	00178713          	addi	a4,a5,1
2040880c:	fee42623          	sw	a4,-20(s0)
20408810:	fd842703          	lw	a4,-40(s0)
20408814:	00f707b3          	add	a5,a4,a5
20408818:	00900713          	li	a4,9
2040881c:	00e78023          	sb	a4,0(a5)
          break;
20408820:	0840006f          	j	204088a4 <JSONReader_ReadString+0x1b8>
        case '\"':
          out_str[output_counter++] = '\"';
20408824:	fec42783          	lw	a5,-20(s0)
20408828:	00178713          	addi	a4,a5,1
2040882c:	fee42623          	sw	a4,-20(s0)
20408830:	fd842703          	lw	a4,-40(s0)
20408834:	00f707b3          	add	a5,a4,a5
20408838:	02200713          	li	a4,34
2040883c:	00e78023          	sb	a4,0(a5)
          break;
20408840:	0640006f          	j	204088a4 <JSONReader_ReadString+0x1b8>
        default:
          fprintf(stderr, "unknown string escape %c\n", sch);
20408844:	5fbf8797          	auipc	a5,0x5fbf8
20408848:	1f478793          	addi	a5,a5,500 # 80000a38 <_impure_ptr>
2040884c:	0007a783          	lw	a5,0(a5)
20408850:	00c7a783          	lw	a5,12(a5)
20408854:	fe644703          	lbu	a4,-26(s0)
20408858:	00070613          	mv	a2,a4
2040885c:	00018597          	auipc	a1,0x18
20408860:	fdc58593          	addi	a1,a1,-36 # 20420838 <__func__.3846+0xb50>
20408864:	00078513          	mv	a0,a5
20408868:	5a20a0ef          	jal	ra,20412e0a <fprintf>
          break;
2040886c:	00000013          	nop
20408870:	0340006f          	j	204088a4 <JSONReader_ReadString+0x1b8>
      }
    } else {
      if (ch == '\"') {
20408874:	fe744703          	lbu	a4,-25(s0)
20408878:	02200793          	li	a5,34
2040887c:	0cf70063          	beq	a4,a5,2040893c <JSONReader_ReadString+0x250>
        break;
      }
      if (out_str != NULL) {
20408880:	fd842783          	lw	a5,-40(s0)
20408884:	02078063          	beqz	a5,204088a4 <JSONReader_ReadString+0x1b8>
        out_str[output_counter++] = ch;
20408888:	fec42783          	lw	a5,-20(s0)
2040888c:	00178713          	addi	a4,a5,1
20408890:	fee42623          	sw	a4,-20(s0)
20408894:	fd842703          	lw	a4,-40(s0)
20408898:	00f707b3          	add	a5,a4,a5
2040889c:	fe744703          	lbu	a4,-25(s0)
204088a0:	00e78023          	sb	a4,0(a5)
      }
    }
    if (output_counter == out_str_size - 1) {
204088a4:	fd442783          	lw	a5,-44(s0)
204088a8:	fff78793          	addi	a5,a5,-1
204088ac:	fec42703          	lw	a4,-20(s0)
204088b0:	02f71663          	bne	a4,a5,204088dc <JSONReader_ReadString+0x1f0>
      fprintf(stderr, "Error: string size greater than buffer size (%zu).\n", out_str_size);
204088b4:	5fbf8797          	auipc	a5,0x5fbf8
204088b8:	18478793          	addi	a5,a5,388 # 80000a38 <_impure_ptr>
204088bc:	0007a783          	lw	a5,0(a5)
204088c0:	00c7a783          	lw	a5,12(a5)
204088c4:	fd442603          	lw	a2,-44(s0)
204088c8:	00018597          	auipc	a1,0x18
204088cc:	f8c58593          	addi	a1,a1,-116 # 20420854 <__func__.3846+0xb6c>
204088d0:	00078513          	mv	a0,a5
204088d4:	5360a0ef          	jal	ra,20412e0a <fprintf>
      break;
204088d8:	0680006f          	j	20408940 <JSONReader_ReadString+0x254>
    }
    if (ch == EOF || ch == '\r' || ch == '\n') {
204088dc:	fe744703          	lbu	a4,-25(s0)
204088e0:	00d00793          	li	a5,13
204088e4:	00f70863          	beq	a4,a5,204088f4 <JSONReader_ReadString+0x208>
204088e8:	fe744703          	lbu	a4,-25(s0)
204088ec:	00a00793          	li	a5,10
204088f0:	02f71a63          	bne	a4,a5,20408924 <JSONReader_ReadString+0x238>
      fprintf(stderr, "Error at line %zu, Expect \'\"\' but reach end of line\n",
204088f4:	5fbf8797          	auipc	a5,0x5fbf8
204088f8:	14478793          	addi	a5,a5,324 # 80000a38 <_impure_ptr>
204088fc:	0007a783          	lw	a5,0(a5)
20408900:	00c7a703          	lw	a4,12(a5)
20408904:	fdc42783          	lw	a5,-36(s0)
20408908:	00c7a783          	lw	a5,12(a5)
2040890c:	00078613          	mv	a2,a5
20408910:	00018597          	auipc	a1,0x18
20408914:	f7858593          	addi	a1,a1,-136 # 20420888 <__func__.3846+0xba0>
20408918:	00070513          	mv	a0,a4
2040891c:	4ee0a0ef          	jal	ra,20412e0a <fprintf>
              reader->line_count_n_);
      break;
20408920:	0200006f          	j	20408940 <JSONReader_ReadString+0x254>
  while (output_counter < out_str_size || out_str == NULL) {
20408924:	fec42703          	lw	a4,-20(s0)
20408928:	fd442783          	lw	a5,-44(s0)
2040892c:	e0f760e3          	bltu	a4,a5,2040872c <JSONReader_ReadString+0x40>
20408930:	fd842783          	lw	a5,-40(s0)
20408934:	de078ce3          	beqz	a5,2040872c <JSONReader_ReadString+0x40>
20408938:	0080006f          	j	20408940 <JSONReader_ReadString+0x254>
        break;
2040893c:	00000013          	nop
    }
  }

  if (out_str != NULL) {
20408940:	fd842783          	lw	a5,-40(s0)
20408944:	00078a63          	beqz	a5,20408958 <JSONReader_ReadString+0x26c>
    out_str[output_counter] = 0;
20408948:	fd842703          	lw	a4,-40(s0)
2040894c:	fec42783          	lw	a5,-20(s0)
20408950:	00f707b3          	add	a5,a4,a5
20408954:	00078023          	sb	zero,0(a5)
  }
  return status;
20408958:	fe842783          	lw	a5,-24(s0)
}
2040895c:	00078513          	mv	a0,a5
20408960:	02c12083          	lw	ra,44(sp)
20408964:	02812403          	lw	s0,40(sp)
20408968:	03010113          	addi	sp,sp,48
2040896c:	00008067          	ret

20408970 <JSONReader_ReadUnsignedInteger>:

int JSONReader_ReadUnsignedInteger(JSONReader* reader, unsigned int* out_value) {
20408970:	fd010113          	addi	sp,sp,-48
20408974:	02112623          	sw	ra,44(sp)
20408978:	02812423          	sw	s0,40(sp)
2040897c:	03010413          	addi	s0,sp,48
20408980:	fca42e23          	sw	a0,-36(s0)
20408984:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
20408988:	fe042623          	sw	zero,-20(s0)
  char* endptr;
  const char* icstr = reader->isptr;
2040898c:	fdc42783          	lw	a5,-36(s0)
20408990:	0047a783          	lw	a5,4(a5)
20408994:	fef42423          	sw	a5,-24(s0)
  unsigned int number = strtol(icstr, &endptr, 10);
20408998:	fe040793          	addi	a5,s0,-32
2040899c:	00a00613          	li	a2,10
204089a0:	00078593          	mv	a1,a5
204089a4:	fe842503          	lw	a0,-24(s0)
204089a8:	3890a0ef          	jal	ra,20413530 <strtol>
204089ac:	00050793          	mv	a5,a0
204089b0:	fef42223          	sw	a5,-28(s0)
  reader->isptr += endptr - icstr;
204089b4:	fdc42783          	lw	a5,-36(s0)
204089b8:	0047a783          	lw	a5,4(a5)
204089bc:	fe042703          	lw	a4,-32(s0)
204089c0:	00070693          	mv	a3,a4
204089c4:	fe842703          	lw	a4,-24(s0)
204089c8:	40e68733          	sub	a4,a3,a4
204089cc:	00e78733          	add	a4,a5,a4
204089d0:	fdc42783          	lw	a5,-36(s0)
204089d4:	00e7a223          	sw	a4,4(a5)
  *out_value = number;
204089d8:	fd842783          	lw	a5,-40(s0)
204089dc:	fe442703          	lw	a4,-28(s0)
204089e0:	00e7a023          	sw	a4,0(a5)
  return status;
204089e4:	fec42783          	lw	a5,-20(s0)
}
204089e8:	00078513          	mv	a0,a5
204089ec:	02c12083          	lw	ra,44(sp)
204089f0:	02812403          	lw	s0,40(sp)
204089f4:	03010113          	addi	sp,sp,48
204089f8:	00008067          	ret

204089fc <JSONReader_ReadInteger>:

int JSONReader_ReadInteger(JSONReader* reader, int64_t* out_value) {
204089fc:	fc010113          	addi	sp,sp,-64
20408a00:	02112e23          	sw	ra,60(sp)
20408a04:	02812c23          	sw	s0,56(sp)
20408a08:	04010413          	addi	s0,sp,64
20408a0c:	fca42623          	sw	a0,-52(s0)
20408a10:	fcb42423          	sw	a1,-56(s0)
  int status = 0;
20408a14:	fe042623          	sw	zero,-20(s0)
  char* endptr;
  const char* icstr = reader->isptr;
20408a18:	fcc42783          	lw	a5,-52(s0)
20408a1c:	0047a783          	lw	a5,4(a5)
20408a20:	fef42423          	sw	a5,-24(s0)
  int64_t number = strtol(icstr, &endptr, 10);
20408a24:	fdc40793          	addi	a5,s0,-36
20408a28:	00a00613          	li	a2,10
20408a2c:	00078593          	mv	a1,a5
20408a30:	fe842503          	lw	a0,-24(s0)
20408a34:	2fd0a0ef          	jal	ra,20413530 <strtol>
20408a38:	00050793          	mv	a5,a0
20408a3c:	fef42023          	sw	a5,-32(s0)
20408a40:	41f7d793          	srai	a5,a5,0x1f
20408a44:	fef42223          	sw	a5,-28(s0)
  reader->isptr += endptr - icstr;
20408a48:	fcc42783          	lw	a5,-52(s0)
20408a4c:	0047a783          	lw	a5,4(a5)
20408a50:	fdc42703          	lw	a4,-36(s0)
20408a54:	00070693          	mv	a3,a4
20408a58:	fe842703          	lw	a4,-24(s0)
20408a5c:	40e68733          	sub	a4,a3,a4
20408a60:	00e78733          	add	a4,a5,a4
20408a64:	fcc42783          	lw	a5,-52(s0)
20408a68:	00e7a223          	sw	a4,4(a5)
  *out_value = number;
20408a6c:	fc842703          	lw	a4,-56(s0)
20408a70:	fe042783          	lw	a5,-32(s0)
20408a74:	fe442803          	lw	a6,-28(s0)
20408a78:	00f72023          	sw	a5,0(a4)
20408a7c:	01072223          	sw	a6,4(a4)
  return status;
20408a80:	fec42783          	lw	a5,-20(s0)
}
20408a84:	00078513          	mv	a0,a5
20408a88:	03c12083          	lw	ra,60(sp)
20408a8c:	03812403          	lw	s0,56(sp)
20408a90:	04010113          	addi	sp,sp,64
20408a94:	00008067          	ret

20408a98 <JSONReader_BeginObject>:
 *    // do somthing to key value
 *    reader->Read(&value);
 *  }
 * \endcode
 */
void JSONReader_BeginObject(JSONReader* reader) {
20408a98:	fd010113          	addi	sp,sp,-48
20408a9c:	02112623          	sw	ra,44(sp)
20408aa0:	02812423          	sw	s0,40(sp)
20408aa4:	03010413          	addi	s0,sp,48
20408aa8:	fca42e23          	sw	a0,-36(s0)
  int ch = reader->NextNonSpace(reader);
20408aac:	fdc42783          	lw	a5,-36(s0)
20408ab0:	0187a783          	lw	a5,24(a5)
20408ab4:	fdc42503          	lw	a0,-36(s0)
20408ab8:	000780e7          	jalr	a5
20408abc:	00050793          	mv	a5,a0
20408ac0:	fef42623          	sw	a5,-20(s0)
  if (!(ch == '{')) {
20408ac4:	fec42703          	lw	a4,-20(s0)
20408ac8:	07b00793          	li	a5,123
20408acc:	02f70a63          	beq	a4,a5,20408b00 <JSONReader_BeginObject+0x68>
    fprintf(stderr, "Error at line %zu, Expect \'{\' but got \'%c\'\n", reader->line_count_n_, ch);
20408ad0:	5fbf8797          	auipc	a5,0x5fbf8
20408ad4:	f6878793          	addi	a5,a5,-152 # 80000a38 <_impure_ptr>
20408ad8:	0007a783          	lw	a5,0(a5)
20408adc:	00c7a703          	lw	a4,12(a5)
20408ae0:	fdc42783          	lw	a5,-36(s0)
20408ae4:	00c7a783          	lw	a5,12(a5)
20408ae8:	fec42683          	lw	a3,-20(s0)
20408aec:	00078613          	mv	a2,a5
20408af0:	00018597          	auipc	a1,0x18
20408af4:	dd058593          	addi	a1,a1,-560 # 204208c0 <__func__.3846+0xbd8>
20408af8:	00070513          	mv	a0,a4
20408afc:	30e0a0ef          	jal	ra,20412e0a <fprintf>
  }
  Seq* scope_counter_ = reader->scope_counter_;
20408b00:	fdc42783          	lw	a5,-36(s0)
20408b04:	0107a783          	lw	a5,16(a5)
20408b08:	fef42423          	sw	a5,-24(s0)
  scope_counter_->push_back(scope_counter_, 0);
20408b0c:	fe842783          	lw	a5,-24(s0)
20408b10:	0147a783          	lw	a5,20(a5)
20408b14:	00000593          	li	a1,0
20408b18:	fe842503          	lw	a0,-24(s0)
20408b1c:	000780e7          	jalr	a5
}
20408b20:	00000013          	nop
20408b24:	02c12083          	lw	ra,44(sp)
20408b28:	02812403          	lw	s0,40(sp)
20408b2c:	03010113          	addi	sp,sp,48
20408b30:	00008067          	ret

20408b34 <JSONReader_NextObjectItem>:
 *  reader->Read to read in the value.
 * \param out_key the key to the next object.
 * \param out_key_size number of bytes available to write at out_key, including terminating \0.
 * \return true if the read is successful, false if we are at end of the object.
 */
uint8_t JSONReader_NextObjectItem(JSONReader* reader, char* out_key, size_t out_key_size) {
20408b34:	fc010113          	addi	sp,sp,-64
20408b38:	02112e23          	sw	ra,60(sp)
20408b3c:	02812c23          	sw	s0,56(sp)
20408b40:	04010413          	addi	s0,sp,64
20408b44:	fca42623          	sw	a0,-52(s0)
20408b48:	fcb42423          	sw	a1,-56(s0)
20408b4c:	fcc42223          	sw	a2,-60(s0)
  uint8_t next = 1;
20408b50:	00100793          	li	a5,1
20408b54:	fef407a3          	sb	a5,-17(s0)
  Seq* scope_counter_ = reader->scope_counter_;
20408b58:	fcc42783          	lw	a5,-52(s0)
20408b5c:	0107a783          	lw	a5,16(a5)
20408b60:	fef42423          	sw	a5,-24(s0)
  if (scope_counter_->back(scope_counter_)[0] != 0) {
20408b64:	fe842783          	lw	a5,-24(s0)
20408b68:	0187a783          	lw	a5,24(a5)
20408b6c:	fe842503          	lw	a0,-24(s0)
20408b70:	000780e7          	jalr	a5
20408b74:	00050793          	mv	a5,a0
20408b78:	0007a783          	lw	a5,0(a5)
20408b7c:	08078263          	beqz	a5,20408c00 <JSONReader_NextObjectItem+0xcc>
    int ch = reader->NextNonSpace(reader);
20408b80:	fcc42783          	lw	a5,-52(s0)
20408b84:	0187a783          	lw	a5,24(a5)
20408b88:	fcc42503          	lw	a0,-52(s0)
20408b8c:	000780e7          	jalr	a5
20408b90:	00050793          	mv	a5,a0
20408b94:	fef42023          	sw	a5,-32(s0)
    if (ch == EOF) {
20408b98:	fe042703          	lw	a4,-32(s0)
20408b9c:	fff00793          	li	a5,-1
20408ba0:	00f71663          	bne	a4,a5,20408bac <JSONReader_NextObjectItem+0x78>
      next = 0;
20408ba4:	fe0407a3          	sb	zero,-17(s0)
20408ba8:	0900006f          	j	20408c38 <JSONReader_NextObjectItem+0x104>
    } else if (ch == '}') {
20408bac:	fe042703          	lw	a4,-32(s0)
20408bb0:	07d00793          	li	a5,125
20408bb4:	00f71663          	bne	a4,a5,20408bc0 <JSONReader_NextObjectItem+0x8c>
      next = 0;
20408bb8:	fe0407a3          	sb	zero,-17(s0)
20408bbc:	07c0006f          	j	20408c38 <JSONReader_NextObjectItem+0x104>
    } else {
      if (ch != ',') {
20408bc0:	fe042703          	lw	a4,-32(s0)
20408bc4:	02c00793          	li	a5,44
20408bc8:	06f70863          	beq	a4,a5,20408c38 <JSONReader_NextObjectItem+0x104>
        fprintf(stderr, "Error at line %zu, JSON object expect \'}\' or \',\' but got \'%c\'\n",
20408bcc:	5fbf8797          	auipc	a5,0x5fbf8
20408bd0:	e6c78793          	addi	a5,a5,-404 # 80000a38 <_impure_ptr>
20408bd4:	0007a783          	lw	a5,0(a5)
20408bd8:	00c7a703          	lw	a4,12(a5)
20408bdc:	fcc42783          	lw	a5,-52(s0)
20408be0:	00c7a783          	lw	a5,12(a5)
20408be4:	fe042683          	lw	a3,-32(s0)
20408be8:	00078613          	mv	a2,a5
20408bec:	00018597          	auipc	a1,0x18
20408bf0:	d0058593          	addi	a1,a1,-768 # 204208ec <__func__.3846+0xc04>
20408bf4:	00070513          	mv	a0,a4
20408bf8:	2120a0ef          	jal	ra,20412e0a <fprintf>
20408bfc:	03c0006f          	j	20408c38 <JSONReader_NextObjectItem+0x104>
                reader->line_count_n_, ch);
      }
    }
  } else {
    int ch = reader->PeekNextNonSpace(reader);
20408c00:	fcc42783          	lw	a5,-52(s0)
20408c04:	0207a783          	lw	a5,32(a5)
20408c08:	fcc42503          	lw	a0,-52(s0)
20408c0c:	000780e7          	jalr	a5
20408c10:	00050793          	mv	a5,a0
20408c14:	fef42223          	sw	a5,-28(s0)
    if (ch == '}') {
20408c18:	fe442703          	lw	a4,-28(s0)
20408c1c:	07d00793          	li	a5,125
20408c20:	00f71c63          	bne	a4,a5,20408c38 <JSONReader_NextObjectItem+0x104>
      reader->NextChar(reader);
20408c24:	fcc42783          	lw	a5,-52(s0)
20408c28:	0147a783          	lw	a5,20(a5)
20408c2c:	fcc42503          	lw	a0,-52(s0)
20408c30:	000780e7          	jalr	a5
      next = 0;
20408c34:	fe0407a3          	sb	zero,-17(s0)
    }
  }
  if (!next) {
20408c38:	fef44783          	lbu	a5,-17(s0)
20408c3c:	00079e63          	bnez	a5,20408c58 <JSONReader_NextObjectItem+0x124>
    scope_counter_->pop_back(scope_counter_);
20408c40:	fe842783          	lw	a5,-24(s0)
20408c44:	01c7a783          	lw	a5,28(a5)
20408c48:	fe842503          	lw	a0,-24(s0)
20408c4c:	000780e7          	jalr	a5
    return 0;
20408c50:	00000793          	li	a5,0
20408c54:	0d00006f          	j	20408d24 <JSONReader_NextObjectItem+0x1f0>
  } else {
    scope_counter_->back(scope_counter_)[0] += 1;
20408c58:	fe842783          	lw	a5,-24(s0)
20408c5c:	0187a783          	lw	a5,24(a5)
20408c60:	fe842503          	lw	a0,-24(s0)
20408c64:	000780e7          	jalr	a5
20408c68:	00050793          	mv	a5,a0
20408c6c:	0007a703          	lw	a4,0(a5)
20408c70:	00170713          	addi	a4,a4,1
20408c74:	00e7a023          	sw	a4,0(a5)
    int err = reader->ReadString(reader, out_key, out_key_size);
20408c78:	fcc42783          	lw	a5,-52(s0)
20408c7c:	02c7a783          	lw	a5,44(a5)
20408c80:	fc442603          	lw	a2,-60(s0)
20408c84:	fc842583          	lw	a1,-56(s0)
20408c88:	fcc42503          	lw	a0,-52(s0)
20408c8c:	000780e7          	jalr	a5
20408c90:	fca42e23          	sw	a0,-36(s0)
    if (err != 0) {
20408c94:	fdc42783          	lw	a5,-36(s0)
20408c98:	02078a63          	beqz	a5,20408ccc <JSONReader_NextObjectItem+0x198>
      fprintf(stderr, "error reading key");
20408c9c:	5fbf8797          	auipc	a5,0x5fbf8
20408ca0:	d9c78793          	addi	a5,a5,-612 # 80000a38 <_impure_ptr>
20408ca4:	0007a783          	lw	a5,0(a5)
20408ca8:	00c7a783          	lw	a5,12(a5)
20408cac:	00078693          	mv	a3,a5
20408cb0:	01100613          	li	a2,17
20408cb4:	00100593          	li	a1,1
20408cb8:	00018517          	auipc	a0,0x18
20408cbc:	c7450513          	addi	a0,a0,-908 # 2042092c <__func__.3846+0xc44>
20408cc0:	1e40a0ef          	jal	ra,20412ea4 <fwrite>
      return 0;
20408cc4:	00000793          	li	a5,0
20408cc8:	05c0006f          	j	20408d24 <JSONReader_NextObjectItem+0x1f0>
    }
    int ch = reader->NextNonSpace(reader);
20408ccc:	fcc42783          	lw	a5,-52(s0)
20408cd0:	0187a783          	lw	a5,24(a5)
20408cd4:	fcc42503          	lw	a0,-52(s0)
20408cd8:	000780e7          	jalr	a5
20408cdc:	00050793          	mv	a5,a0
20408ce0:	fcf42c23          	sw	a5,-40(s0)
    if (ch != ':') {
20408ce4:	fd842703          	lw	a4,-40(s0)
20408ce8:	03a00793          	li	a5,58
20408cec:	02f70a63          	beq	a4,a5,20408d20 <JSONReader_NextObjectItem+0x1ec>
      fprintf(stderr, "Error at line %zu, Expect \':\' but get \'%c\'\n", reader->line_count_n_,
20408cf0:	5fbf8797          	auipc	a5,0x5fbf8
20408cf4:	d4878793          	addi	a5,a5,-696 # 80000a38 <_impure_ptr>
20408cf8:	0007a783          	lw	a5,0(a5)
20408cfc:	00c7a703          	lw	a4,12(a5)
20408d00:	fcc42783          	lw	a5,-52(s0)
20408d04:	00c7a783          	lw	a5,12(a5)
20408d08:	fd842683          	lw	a3,-40(s0)
20408d0c:	00078613          	mv	a2,a5
20408d10:	00018597          	auipc	a1,0x18
20408d14:	c3058593          	addi	a1,a1,-976 # 20420940 <__func__.3846+0xc58>
20408d18:	00070513          	mv	a0,a4
20408d1c:	0ee0a0ef          	jal	ra,20412e0a <fprintf>
              ch);
    }
    return 1;
20408d20:	00100793          	li	a5,1
  }
}
20408d24:	00078513          	mv	a0,a5
20408d28:	03c12083          	lw	ra,60(sp)
20408d2c:	03812403          	lw	s0,56(sp)
20408d30:	04010113          	addi	sp,sp,64
20408d34:	00008067          	ret

20408d38 <JSONReader_BeginArray>:
 *  while (reader->NextArrayItem(&value)) {
 *    // do somthing to value
 *  }
 * \endcode
 */
void JSONReader_BeginArray(JSONReader* reader) {
20408d38:	fd010113          	addi	sp,sp,-48
20408d3c:	02112623          	sw	ra,44(sp)
20408d40:	02812423          	sw	s0,40(sp)
20408d44:	03010413          	addi	s0,sp,48
20408d48:	fca42e23          	sw	a0,-36(s0)
  int ch = reader->NextNonSpace(reader);
20408d4c:	fdc42783          	lw	a5,-36(s0)
20408d50:	0187a783          	lw	a5,24(a5)
20408d54:	fdc42503          	lw	a0,-36(s0)
20408d58:	000780e7          	jalr	a5
20408d5c:	00050793          	mv	a5,a0
20408d60:	fef42623          	sw	a5,-20(s0)
  if (ch != '[') {
20408d64:	fec42703          	lw	a4,-20(s0)
20408d68:	05b00793          	li	a5,91
20408d6c:	02f70a63          	beq	a4,a5,20408da0 <JSONReader_BeginArray+0x68>
    fprintf(stderr, "Error at line %zu, Expect \'[\' but get \'%c\'\n", reader->line_count_n_, ch);
20408d70:	5fbf8797          	auipc	a5,0x5fbf8
20408d74:	cc878793          	addi	a5,a5,-824 # 80000a38 <_impure_ptr>
20408d78:	0007a783          	lw	a5,0(a5)
20408d7c:	00c7a703          	lw	a4,12(a5)
20408d80:	fdc42783          	lw	a5,-36(s0)
20408d84:	00c7a783          	lw	a5,12(a5)
20408d88:	fec42683          	lw	a3,-20(s0)
20408d8c:	00078613          	mv	a2,a5
20408d90:	00018597          	auipc	a1,0x18
20408d94:	bdc58593          	addi	a1,a1,-1060 # 2042096c <__func__.3846+0xc84>
20408d98:	00070513          	mv	a0,a4
20408d9c:	06e0a0ef          	jal	ra,20412e0a <fprintf>
  }
  Seq* scope_counter_ = reader->scope_counter_;
20408da0:	fdc42783          	lw	a5,-36(s0)
20408da4:	0107a783          	lw	a5,16(a5)
20408da8:	fef42423          	sw	a5,-24(s0)
  scope_counter_->push_back(scope_counter_, 0);
20408dac:	fe842783          	lw	a5,-24(s0)
20408db0:	0147a783          	lw	a5,20(a5)
20408db4:	00000593          	li	a1,0
20408db8:	fe842503          	lw	a0,-24(s0)
20408dbc:	000780e7          	jalr	a5
}
20408dc0:	00000013          	nop
20408dc4:	02c12083          	lw	ra,44(sp)
20408dc8:	02812403          	lw	s0,40(sp)
20408dcc:	03010113          	addi	sp,sp,48
20408dd0:	00008067          	ret

20408dd4 <JSONReader_NextArrayItem>:
 * \brief Try to read the next element in the array.
 *  If this call is successful, user can proceed to call
 *  reader->Read to read in the value.
 * \return true if the read is successful, false if we are at end of the array.
 */
uint8_t JSONReader_NextArrayItem(JSONReader* reader) {
20408dd4:	fd010113          	addi	sp,sp,-48
20408dd8:	02112623          	sw	ra,44(sp)
20408ddc:	02812423          	sw	s0,40(sp)
20408de0:	03010413          	addi	s0,sp,48
20408de4:	fca42e23          	sw	a0,-36(s0)
  uint8_t next = 1;
20408de8:	00100793          	li	a5,1
20408dec:	fef407a3          	sb	a5,-17(s0)
  Seq* scope_counter_ = reader->scope_counter_;
20408df0:	fdc42783          	lw	a5,-36(s0)
20408df4:	0107a783          	lw	a5,16(a5)
20408df8:	fef42423          	sw	a5,-24(s0)
  if (scope_counter_->back(scope_counter_)[0] != 0) {
20408dfc:	fe842783          	lw	a5,-24(s0)
20408e00:	0187a783          	lw	a5,24(a5)
20408e04:	fe842503          	lw	a0,-24(s0)
20408e08:	000780e7          	jalr	a5
20408e0c:	00050793          	mv	a5,a0
20408e10:	0007a783          	lw	a5,0(a5)
20408e14:	08078263          	beqz	a5,20408e98 <JSONReader_NextArrayItem+0xc4>
    int ch = reader->NextNonSpace(reader);
20408e18:	fdc42783          	lw	a5,-36(s0)
20408e1c:	0187a783          	lw	a5,24(a5)
20408e20:	fdc42503          	lw	a0,-36(s0)
20408e24:	000780e7          	jalr	a5
20408e28:	00050793          	mv	a5,a0
20408e2c:	fef42023          	sw	a5,-32(s0)
    if (ch == EOF) {
20408e30:	fe042703          	lw	a4,-32(s0)
20408e34:	fff00793          	li	a5,-1
20408e38:	00f71663          	bne	a4,a5,20408e44 <JSONReader_NextArrayItem+0x70>
      next = 0;
20408e3c:	fe0407a3          	sb	zero,-17(s0)
20408e40:	0900006f          	j	20408ed0 <JSONReader_NextArrayItem+0xfc>
    } else if (ch == ']') {
20408e44:	fe042703          	lw	a4,-32(s0)
20408e48:	05d00793          	li	a5,93
20408e4c:	00f71663          	bne	a4,a5,20408e58 <JSONReader_NextArrayItem+0x84>
      next = 0;
20408e50:	fe0407a3          	sb	zero,-17(s0)
20408e54:	07c0006f          	j	20408ed0 <JSONReader_NextArrayItem+0xfc>
    } else {
      if (ch != ',') {
20408e58:	fe042703          	lw	a4,-32(s0)
20408e5c:	02c00793          	li	a5,44
20408e60:	06f70863          	beq	a4,a5,20408ed0 <JSONReader_NextArrayItem+0xfc>
        fprintf(stderr, "Error at line %zu, JSON object expect \']\' or \',\' but got \'%c\'\n",
20408e64:	5fbf8797          	auipc	a5,0x5fbf8
20408e68:	bd478793          	addi	a5,a5,-1068 # 80000a38 <_impure_ptr>
20408e6c:	0007a783          	lw	a5,0(a5)
20408e70:	00c7a703          	lw	a4,12(a5)
20408e74:	fdc42783          	lw	a5,-36(s0)
20408e78:	00c7a783          	lw	a5,12(a5)
20408e7c:	fe042683          	lw	a3,-32(s0)
20408e80:	00078613          	mv	a2,a5
20408e84:	00018597          	auipc	a1,0x18
20408e88:	b1458593          	addi	a1,a1,-1260 # 20420998 <__func__.3846+0xcb0>
20408e8c:	00070513          	mv	a0,a4
20408e90:	77b090ef          	jal	ra,20412e0a <fprintf>
20408e94:	03c0006f          	j	20408ed0 <JSONReader_NextArrayItem+0xfc>
                reader->line_count_n_, ch);
      }
    }
  } else {
    int ch = reader->PeekNextNonSpace(reader);
20408e98:	fdc42783          	lw	a5,-36(s0)
20408e9c:	0207a783          	lw	a5,32(a5)
20408ea0:	fdc42503          	lw	a0,-36(s0)
20408ea4:	000780e7          	jalr	a5
20408ea8:	00050793          	mv	a5,a0
20408eac:	fef42223          	sw	a5,-28(s0)
    if (ch == ']') {
20408eb0:	fe442703          	lw	a4,-28(s0)
20408eb4:	05d00793          	li	a5,93
20408eb8:	00f71c63          	bne	a4,a5,20408ed0 <JSONReader_NextArrayItem+0xfc>
      reader->NextChar(reader);
20408ebc:	fdc42783          	lw	a5,-36(s0)
20408ec0:	0147a783          	lw	a5,20(a5)
20408ec4:	fdc42503          	lw	a0,-36(s0)
20408ec8:	000780e7          	jalr	a5
      next = 0;
20408ecc:	fe0407a3          	sb	zero,-17(s0)
    }
  }
  if (!next) {
20408ed0:	fef44783          	lbu	a5,-17(s0)
20408ed4:	00079e63          	bnez	a5,20408ef0 <JSONReader_NextArrayItem+0x11c>
    scope_counter_->pop_back(scope_counter_);
20408ed8:	fe842783          	lw	a5,-24(s0)
20408edc:	01c7a783          	lw	a5,28(a5)
20408ee0:	fe842503          	lw	a0,-24(s0)
20408ee4:	000780e7          	jalr	a5
    return 0;
20408ee8:	00000793          	li	a5,0
20408eec:	0280006f          	j	20408f14 <JSONReader_NextArrayItem+0x140>
  } else {
    scope_counter_->back(scope_counter_)[0] += 1;
20408ef0:	fe842783          	lw	a5,-24(s0)
20408ef4:	0187a783          	lw	a5,24(a5)
20408ef8:	fe842503          	lw	a0,-24(s0)
20408efc:	000780e7          	jalr	a5
20408f00:	00050793          	mv	a5,a0
20408f04:	0007a703          	lw	a4,0(a5)
20408f08:	00170713          	addi	a4,a4,1
20408f0c:	00e7a023          	sw	a4,0(a5)
    return 1;
20408f10:	00100793          	li	a5,1
  }
}
20408f14:	00078513          	mv	a0,a5
20408f18:	02c12083          	lw	ra,44(sp)
20408f1c:	02812403          	lw	s0,40(sp)
20408f20:	03010113          	addi	sp,sp,48
20408f24:	00008067          	ret

20408f28 <JSONReader_ArrayLength>:
/*!
 * \brief Determine the remaining length of the array to read.
 * \param num_elements Pointer which receives the length.
 * \return 0 if successful
 */
int JSONReader_ArrayLength(JSONReader* reader, size_t* num_elements) {
20408f28:	fb010113          	addi	sp,sp,-80
20408f2c:	04112623          	sw	ra,76(sp)
20408f30:	04812423          	sw	s0,72(sp)
20408f34:	05010413          	addi	s0,sp,80
20408f38:	faa42e23          	sw	a0,-68(s0)
20408f3c:	fab42c23          	sw	a1,-72(s0)
  int status = 0;
20408f40:	fe042623          	sw	zero,-20(s0)
  char* old_isptr = reader->isptr;
20408f44:	fbc42783          	lw	a5,-68(s0)
20408f48:	0047a783          	lw	a5,4(a5)
20408f4c:	fef42023          	sw	a5,-32(s0)
  size_t old_line_count_r_ = reader->line_count_r_;
20408f50:	fbc42783          	lw	a5,-68(s0)
20408f54:	0087a783          	lw	a5,8(a5)
20408f58:	fcf42e23          	sw	a5,-36(s0)
  size_t old_line_count_n_ = reader->line_count_n_;
20408f5c:	fbc42783          	lw	a5,-68(s0)
20408f60:	00c7a783          	lw	a5,12(a5)
20408f64:	fcf42c23          	sw	a5,-40(s0)
  int old_scope_counter_back = *reader->scope_counter_->back(reader->scope_counter_);
20408f68:	fbc42783          	lw	a5,-68(s0)
20408f6c:	0107a783          	lw	a5,16(a5)
20408f70:	0187a703          	lw	a4,24(a5)
20408f74:	fbc42783          	lw	a5,-68(s0)
20408f78:	0107a783          	lw	a5,16(a5)
20408f7c:	00078513          	mv	a0,a5
20408f80:	000700e7          	jalr	a4
20408f84:	00050793          	mv	a5,a0
20408f88:	0007a783          	lw	a5,0(a5)
20408f8c:	fcf42a23          	sw	a5,-44(s0)

  typedef enum { kObject, kArray } item_type_t;
  Seq* scopes;
  tvm_crt_error_t err = SeqCreate(10, &scopes);
20408f90:	fc840793          	addi	a5,s0,-56
20408f94:	00078613          	mv	a2,a5
20408f98:	00a00513          	li	a0,10
20408f9c:	00000593          	li	a1,0
20408fa0:	bf0ff0ef          	jal	ra,20408390 <SeqCreate>
20408fa4:	fca42823          	sw	a0,-48(s0)
  if (err != kTvmErrorNoError) {
20408fa8:	fd042783          	lw	a5,-48(s0)
20408fac:	00078663          	beqz	a5,20408fb8 <JSONReader_ArrayLength+0x90>
    return -1;
20408fb0:	fff00793          	li	a5,-1
20408fb4:	2340006f          	j	204091e8 <JSONReader_ArrayLength+0x2c0>
  }
  item_type_t json_item_type = kArray;
20408fb8:	00100793          	li	a5,1
20408fbc:	fef42423          	sw	a5,-24(s0)
  *num_elements = 0;
20408fc0:	fb842783          	lw	a5,-72(s0)
20408fc4:	0007a023          	sw	zero,0(a5)
  for (;;) {
    int has_item = 0;
20408fc8:	fe042223          	sw	zero,-28(s0)
    if (json_item_type == kArray) {
20408fcc:	fe842703          	lw	a4,-24(s0)
20408fd0:	00100793          	li	a5,1
20408fd4:	04f71463          	bne	a4,a5,2040901c <JSONReader_ArrayLength+0xf4>
      has_item = reader->NextArrayItem(reader);
20408fd8:	fbc42783          	lw	a5,-68(s0)
20408fdc:	03c7a783          	lw	a5,60(a5)
20408fe0:	fbc42503          	lw	a0,-68(s0)
20408fe4:	000780e7          	jalr	a5
20408fe8:	00050793          	mv	a5,a0
20408fec:	fef42223          	sw	a5,-28(s0)
      if (scopes->size == 0 && has_item != 0) {
20408ff0:	fc842783          	lw	a5,-56(s0)
20408ff4:	0107a783          	lw	a5,16(a5)
20408ff8:	04079e63          	bnez	a5,20409054 <JSONReader_ArrayLength+0x12c>
20408ffc:	fe442783          	lw	a5,-28(s0)
20409000:	04078a63          	beqz	a5,20409054 <JSONReader_ArrayLength+0x12c>
        (*num_elements)++;
20409004:	fb842783          	lw	a5,-72(s0)
20409008:	0007a783          	lw	a5,0(a5)
2040900c:	00178713          	addi	a4,a5,1
20409010:	fb842783          	lw	a5,-72(s0)
20409014:	00e7a023          	sw	a4,0(a5)
20409018:	03c0006f          	j	20409054 <JSONReader_ArrayLength+0x12c>
      }
    } else if (json_item_type == kObject) {
2040901c:	fe842783          	lw	a5,-24(s0)
20409020:	02079463          	bnez	a5,20409048 <JSONReader_ArrayLength+0x120>
      has_item = reader->NextObjectItem(reader, NULL, 0);
20409024:	fbc42783          	lw	a5,-68(s0)
20409028:	0387a783          	lw	a5,56(a5)
2040902c:	00000613          	li	a2,0
20409030:	00000593          	li	a1,0
20409034:	fbc42503          	lw	a0,-68(s0)
20409038:	000780e7          	jalr	a5
2040903c:	00050793          	mv	a5,a0
20409040:	fef42223          	sw	a5,-28(s0)
20409044:	0100006f          	j	20409054 <JSONReader_ArrayLength+0x12c>
    } else {
      status = -1;
20409048:	fff00793          	li	a5,-1
2040904c:	fef42623          	sw	a5,-20(s0)
      break;
20409050:	12c0006f          	j	2040917c <JSONReader_ArrayLength+0x254>
    }

    if (has_item) {
20409054:	fe442783          	lw	a5,-28(s0)
20409058:	0c078e63          	beqz	a5,20409134 <JSONReader_ArrayLength+0x20c>
      char c = reader->PeekNextNonSpace(reader);
2040905c:	fbc42783          	lw	a5,-68(s0)
20409060:	0207a783          	lw	a5,32(a5)
20409064:	fbc42503          	lw	a0,-68(s0)
20409068:	000780e7          	jalr	a5
2040906c:	00050793          	mv	a5,a0
20409070:	fcf407a3          	sb	a5,-49(s0)
      if (c == '"') {
20409074:	fcf44703          	lbu	a4,-49(s0)
20409078:	02200793          	li	a5,34
2040907c:	02f71063          	bne	a4,a5,2040909c <JSONReader_ArrayLength+0x174>
        reader->ReadString(reader, NULL, 1024);
20409080:	fbc42783          	lw	a5,-68(s0)
20409084:	02c7a783          	lw	a5,44(a5)
20409088:	40000613          	li	a2,1024
2040908c:	00000593          	li	a1,0
20409090:	fbc42503          	lw	a0,-68(s0)
20409094:	000780e7          	jalr	a5
20409098:	f31ff06f          	j	20408fc8 <JSONReader_ArrayLength+0xa0>
      } else if (c == '[') {
2040909c:	fcf44703          	lbu	a4,-49(s0)
204090a0:	05b00793          	li	a5,91
204090a4:	02f71c63          	bne	a4,a5,204090dc <JSONReader_ArrayLength+0x1b4>
        reader->BeginArray(reader);
204090a8:	fbc42783          	lw	a5,-68(s0)
204090ac:	0307a783          	lw	a5,48(a5)
204090b0:	fbc42503          	lw	a0,-68(s0)
204090b4:	000780e7          	jalr	a5
        scopes->push_back(scopes, json_item_type);
204090b8:	fc842783          	lw	a5,-56(s0)
204090bc:	0147a703          	lw	a4,20(a5)
204090c0:	fc842783          	lw	a5,-56(s0)
204090c4:	fe842583          	lw	a1,-24(s0)
204090c8:	00078513          	mv	a0,a5
204090cc:	000700e7          	jalr	a4
        json_item_type = kArray;
204090d0:	00100793          	li	a5,1
204090d4:	fef42423          	sw	a5,-24(s0)
204090d8:	ef1ff06f          	j	20408fc8 <JSONReader_ArrayLength+0xa0>
      } else if (c == '{') {
204090dc:	fcf44703          	lbu	a4,-49(s0)
204090e0:	07b00793          	li	a5,123
204090e4:	02f71a63          	bne	a4,a5,20409118 <JSONReader_ArrayLength+0x1f0>
        reader->BeginObject(reader);
204090e8:	fbc42783          	lw	a5,-68(s0)
204090ec:	0347a783          	lw	a5,52(a5)
204090f0:	fbc42503          	lw	a0,-68(s0)
204090f4:	000780e7          	jalr	a5
        scopes->push_back(scopes, json_item_type);
204090f8:	fc842783          	lw	a5,-56(s0)
204090fc:	0147a703          	lw	a4,20(a5)
20409100:	fc842783          	lw	a5,-56(s0)
20409104:	fe842583          	lw	a1,-24(s0)
20409108:	00078513          	mv	a0,a5
2040910c:	000700e7          	jalr	a4
        json_item_type = kObject;
20409110:	fe042423          	sw	zero,-24(s0)
20409114:	eb5ff06f          	j	20408fc8 <JSONReader_ArrayLength+0xa0>
      } else {
        int64_t val;
        reader->ReadInteger(reader, &val);
20409118:	fbc42783          	lw	a5,-68(s0)
2040911c:	0287a703          	lw	a4,40(a5)
20409120:	fc040793          	addi	a5,s0,-64
20409124:	00078593          	mv	a1,a5
20409128:	fbc42503          	lw	a0,-68(s0)
2040912c:	000700e7          	jalr	a4
20409130:	e99ff06f          	j	20408fc8 <JSONReader_ArrayLength+0xa0>
      }
    } else {
      if (scopes->size > 0) {
20409134:	fc842783          	lw	a5,-56(s0)
20409138:	0107a783          	lw	a5,16(a5)
2040913c:	02078e63          	beqz	a5,20409178 <JSONReader_ArrayLength+0x250>
        json_item_type = *scopes->back(scopes);
20409140:	fc842783          	lw	a5,-56(s0)
20409144:	0187a703          	lw	a4,24(a5)
20409148:	fc842783          	lw	a5,-56(s0)
2040914c:	00078513          	mv	a0,a5
20409150:	000700e7          	jalr	a4
20409154:	00050793          	mv	a5,a0
20409158:	0007a783          	lw	a5,0(a5)
2040915c:	fef42423          	sw	a5,-24(s0)
        scopes->pop_back(scopes);
20409160:	fc842783          	lw	a5,-56(s0)
20409164:	01c7a703          	lw	a4,28(a5)
20409168:	fc842783          	lw	a5,-56(s0)
2040916c:	00078513          	mv	a0,a5
20409170:	000700e7          	jalr	a4
  for (;;) {
20409174:	e55ff06f          	j	20408fc8 <JSONReader_ArrayLength+0xa0>
      } else {
        break;
20409178:	00000013          	nop
      }
    }
  }

  reader->isptr = old_isptr;
2040917c:	fbc42783          	lw	a5,-68(s0)
20409180:	fe042703          	lw	a4,-32(s0)
20409184:	00e7a223          	sw	a4,4(a5)
  reader->line_count_r_ = old_line_count_r_;
20409188:	fbc42783          	lw	a5,-68(s0)
2040918c:	fdc42703          	lw	a4,-36(s0)
20409190:	00e7a423          	sw	a4,8(a5)
  reader->line_count_n_ = old_line_count_n_;
20409194:	fbc42783          	lw	a5,-68(s0)
20409198:	fd842703          	lw	a4,-40(s0)
2040919c:	00e7a623          	sw	a4,12(a5)
  reader->scope_counter_->push_back(reader->scope_counter_, old_scope_counter_back);
204091a0:	fbc42783          	lw	a5,-68(s0)
204091a4:	0107a783          	lw	a5,16(a5)
204091a8:	0147a683          	lw	a3,20(a5)
204091ac:	fbc42783          	lw	a5,-68(s0)
204091b0:	0107a783          	lw	a5,16(a5)
204091b4:	fd442703          	lw	a4,-44(s0)
204091b8:	00070593          	mv	a1,a4
204091bc:	00078513          	mv	a0,a5
204091c0:	000680e7          	jalr	a3

  err = SeqRelease(scopes);
204091c4:	fc842783          	lw	a5,-56(s0)
204091c8:	00078513          	mv	a0,a5
204091cc:	ad0ff0ef          	jal	ra,2040849c <SeqRelease>
204091d0:	fca42823          	sw	a0,-48(s0)
  if (err != kTvmErrorNoError) {
204091d4:	fd042783          	lw	a5,-48(s0)
204091d8:	00078663          	beqz	a5,204091e4 <JSONReader_ArrayLength+0x2bc>
    return -1;
204091dc:	fff00793          	li	a5,-1
204091e0:	0080006f          	j	204091e8 <JSONReader_ArrayLength+0x2c0>
  }

  return status;
204091e4:	fec42783          	lw	a5,-20(s0)
}
204091e8:	00078513          	mv	a0,a5
204091ec:	04c12083          	lw	ra,76(sp)
204091f0:	04812403          	lw	s0,72(sp)
204091f4:	05010113          	addi	sp,sp,80
204091f8:	00008067          	ret

204091fc <JSONReader_Create>:

/*!
 * \brief Constructor.
 * \param is the input source.
 */
tvm_crt_error_t JSONReader_Create(const char* is, JSONReader* reader) {
204091fc:	fd010113          	addi	sp,sp,-48
20409200:	02112623          	sw	ra,44(sp)
20409204:	02812423          	sw	s0,40(sp)
20409208:	02912223          	sw	s1,36(sp)
2040920c:	03010413          	addi	s0,sp,48
20409210:	fca42e23          	sw	a0,-36(s0)
20409214:	fcb42c23          	sw	a1,-40(s0)
  memset(reader, 0, sizeof(JSONReader));
20409218:	04400613          	li	a2,68
2040921c:	00000593          	li	a1,0
20409220:	fd842503          	lw	a0,-40(s0)
20409224:	68b090ef          	jal	ra,204130ae <memset>
  tvm_crt_error_t err = SeqCreate(200, &reader->scope_counter_);
20409228:	fd842783          	lw	a5,-40(s0)
2040922c:	01078793          	addi	a5,a5,16
20409230:	00078613          	mv	a2,a5
20409234:	0c800513          	li	a0,200
20409238:	00000593          	li	a1,0
2040923c:	954ff0ef          	jal	ra,20408390 <SeqCreate>
20409240:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20409244:	fec42783          	lw	a5,-20(s0)
20409248:	00078663          	beqz	a5,20409254 <JSONReader_Create+0x58>
    return err;
2040924c:	fec42783          	lw	a5,-20(s0)
20409250:	1780006f          	j	204093c8 <JSONReader_Create+0x1cc>
  }
  reader->NextChar = JSONReader_NextChar;
20409254:	fd842783          	lw	a5,-40(s0)
20409258:	fffff717          	auipc	a4,0xfffff
2040925c:	2b870713          	addi	a4,a4,696 # 20408510 <JSONReader_NextChar>
20409260:	00e7aa23          	sw	a4,20(a5)
  reader->PeekNextChar = JSONReader_PeekNextChar;
20409264:	fd842783          	lw	a5,-40(s0)
20409268:	fffff717          	auipc	a4,0xfffff
2040926c:	2f070713          	addi	a4,a4,752 # 20408558 <JSONReader_PeekNextChar>
20409270:	00e7ae23          	sw	a4,28(a5)
  reader->NextNonSpace = JSONReader_NextNonSpace;
20409274:	fd842783          	lw	a5,-40(s0)
20409278:	fffff717          	auipc	a4,0xfffff
2040927c:	30c70713          	addi	a4,a4,780 # 20408584 <JSONReader_NextNonSpace>
20409280:	00e7ac23          	sw	a4,24(a5)
  reader->PeekNextNonSpace = JSONReader_PeekNextNonSpace;
20409284:	fd842783          	lw	a5,-40(s0)
20409288:	fffff717          	auipc	a4,0xfffff
2040928c:	3a470713          	addi	a4,a4,932 # 2040862c <JSONReader_PeekNextNonSpace>
20409290:	02e7a023          	sw	a4,32(a5)
  reader->ReadString = JSONReader_ReadString;
20409294:	fd842783          	lw	a5,-40(s0)
20409298:	fffff717          	auipc	a4,0xfffff
2040929c:	45470713          	addi	a4,a4,1108 # 204086ec <JSONReader_ReadString>
204092a0:	02e7a623          	sw	a4,44(a5)
  reader->ReadUnsignedInteger = JSONReader_ReadUnsignedInteger;
204092a4:	fd842783          	lw	a5,-40(s0)
204092a8:	fffff717          	auipc	a4,0xfffff
204092ac:	6c870713          	addi	a4,a4,1736 # 20408970 <JSONReader_ReadUnsignedInteger>
204092b0:	02e7a223          	sw	a4,36(a5)
  reader->ReadInteger = JSONReader_ReadInteger;
204092b4:	fd842783          	lw	a5,-40(s0)
204092b8:	fffff717          	auipc	a4,0xfffff
204092bc:	74470713          	addi	a4,a4,1860 # 204089fc <JSONReader_ReadInteger>
204092c0:	02e7a423          	sw	a4,40(a5)
  reader->BeginArray = JSONReader_BeginArray;
204092c4:	fd842783          	lw	a5,-40(s0)
204092c8:	00000717          	auipc	a4,0x0
204092cc:	a7070713          	addi	a4,a4,-1424 # 20408d38 <JSONReader_BeginArray>
204092d0:	02e7a823          	sw	a4,48(a5)
  reader->BeginObject = JSONReader_BeginObject;
204092d4:	fd842783          	lw	a5,-40(s0)
204092d8:	fffff717          	auipc	a4,0xfffff
204092dc:	7c070713          	addi	a4,a4,1984 # 20408a98 <JSONReader_BeginObject>
204092e0:	02e7aa23          	sw	a4,52(a5)
  reader->NextArrayItem = JSONReader_NextArrayItem;
204092e4:	fd842783          	lw	a5,-40(s0)
204092e8:	00000717          	auipc	a4,0x0
204092ec:	aec70713          	addi	a4,a4,-1300 # 20408dd4 <JSONReader_NextArrayItem>
204092f0:	02e7ae23          	sw	a4,60(a5)
  reader->NextObjectItem = JSONReader_NextObjectItem;
204092f4:	fd842783          	lw	a5,-40(s0)
204092f8:	00000717          	auipc	a4,0x0
204092fc:	83c70713          	addi	a4,a4,-1988 # 20408b34 <JSONReader_NextObjectItem>
20409300:	02e7ac23          	sw	a4,56(a5)
  reader->ArrayLength = JSONReader_ArrayLength;
20409304:	fd842783          	lw	a5,-40(s0)
20409308:	00000717          	auipc	a4,0x0
2040930c:	c2070713          	addi	a4,a4,-992 # 20408f28 <JSONReader_ArrayLength>
20409310:	04e7a023          	sw	a4,64(a5)

  DLDevice dev = {kDLCPU, 0};
20409314:	00100793          	li	a5,1
20409318:	fef42223          	sw	a5,-28(s0)
2040931c:	fe042423          	sw	zero,-24(s0)
  err = TVMPlatformMemoryAllocate(strlen(is) + 1, dev, (void**)&reader->is_);
20409320:	fdc42503          	lw	a0,-36(s0)
20409324:	0240a0ef          	jal	ra,20413348 <strlen>
20409328:	00050793          	mv	a5,a0
2040932c:	00178793          	addi	a5,a5,1
20409330:	fd842703          	lw	a4,-40(s0)
20409334:	00070693          	mv	a3,a4
20409338:	fe442583          	lw	a1,-28(s0)
2040933c:	fe842603          	lw	a2,-24(s0)
20409340:	00078513          	mv	a0,a5
20409344:	eb8f70ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
20409348:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
2040934c:	fec42783          	lw	a5,-20(s0)
20409350:	00078663          	beqz	a5,2040935c <JSONReader_Create+0x160>
    return err;
20409354:	fec42783          	lw	a5,-20(s0)
20409358:	0700006f          	j	204093c8 <JSONReader_Create+0x1cc>
  }

  memset(reader->is_, 0, strlen(is) + 1);
2040935c:	fd842783          	lw	a5,-40(s0)
20409360:	0007a483          	lw	s1,0(a5)
20409364:	fdc42503          	lw	a0,-36(s0)
20409368:	7e1090ef          	jal	ra,20413348 <strlen>
2040936c:	00050793          	mv	a5,a0
20409370:	00178793          	addi	a5,a5,1
20409374:	00078613          	mv	a2,a5
20409378:	00000593          	li	a1,0
2040937c:	00048513          	mv	a0,s1
20409380:	52f090ef          	jal	ra,204130ae <memset>
  snprintf(reader->is_, strlen(is) + 1, "%s", is);
20409384:	fd842783          	lw	a5,-40(s0)
20409388:	0007a483          	lw	s1,0(a5)
2040938c:	fdc42503          	lw	a0,-36(s0)
20409390:	7b9090ef          	jal	ra,20413348 <strlen>
20409394:	00050793          	mv	a5,a0
20409398:	00178793          	addi	a5,a5,1
2040939c:	fdc42683          	lw	a3,-36(s0)
204093a0:	00017617          	auipc	a2,0x17
204093a4:	63860613          	addi	a2,a2,1592 # 204209d8 <__func__.3846+0xcf0>
204093a8:	00078593          	mv	a1,a5
204093ac:	00048513          	mv	a0,s1
204093b0:	60f090ef          	jal	ra,204131be <snprintf>
  reader->isptr = reader->is_;
204093b4:	fd842783          	lw	a5,-40(s0)
204093b8:	0007a703          	lw	a4,0(a5)
204093bc:	fd842783          	lw	a5,-40(s0)
204093c0:	00e7a223          	sw	a4,4(a5)
  return err;
204093c4:	fec42783          	lw	a5,-20(s0)
}
204093c8:	00078513          	mv	a0,a5
204093cc:	02c12083          	lw	ra,44(sp)
204093d0:	02812403          	lw	s0,40(sp)
204093d4:	02412483          	lw	s1,36(sp)
204093d8:	03010113          	addi	sp,sp,48
204093dc:	00008067          	ret

204093e0 <JSONReader_Release>:

tvm_crt_error_t JSONReader_Release(JSONReader* reader) {
204093e0:	fd010113          	addi	sp,sp,-48
204093e4:	02112623          	sw	ra,44(sp)
204093e8:	02812423          	sw	s0,40(sp)
204093ec:	03010413          	addi	s0,sp,48
204093f0:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t err = SeqRelease(reader->scope_counter_);
204093f4:	fdc42783          	lw	a5,-36(s0)
204093f8:	0107a783          	lw	a5,16(a5)
204093fc:	00078513          	mv	a0,a5
20409400:	89cff0ef          	jal	ra,2040849c <SeqRelease>
20409404:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20409408:	fec42783          	lw	a5,-20(s0)
2040940c:	00078663          	beqz	a5,20409418 <JSONReader_Release+0x38>
    return err;
20409410:	fec42783          	lw	a5,-20(s0)
20409414:	02c0006f          	j	20409440 <JSONReader_Release+0x60>
  }

  DLDevice dev = {kDLCPU, 0};
20409418:	00100793          	li	a5,1
2040941c:	fef42223          	sw	a5,-28(s0)
20409420:	fe042423          	sw	zero,-24(s0)
  return TVMPlatformMemoryFree(reader->is_, dev);
20409424:	fdc42783          	lw	a5,-36(s0)
20409428:	0007a783          	lw	a5,0(a5)
2040942c:	fe442583          	lw	a1,-28(s0)
20409430:	fe842603          	lw	a2,-24(s0)
20409434:	00078513          	mv	a0,a5
20409438:	e28f70ef          	jal	ra,20400a60 <TVMPlatformMemoryFree>
2040943c:	00050793          	mv	a5,a0
}
20409440:	00078513          	mv	a0,a5
20409444:	02c12083          	lw	ra,44(sp)
20409448:	02812403          	lw	s0,40(sp)
2040944c:	03010113          	addi	sp,sp,48
20409450:	00008067          	ret

20409454 <TVMGraphExecutorModule_Create>:
} GraphExecutorModule;

static GraphExecutorModule graph_executor;

int32_t TVMGraphExecutorModule_Create(TVMValue* args, int* tcodes, int nargs, TVMValue* ret_values,
                                      int* ret_tcodes, void* resource_handle) {
20409454:	fc010113          	addi	sp,sp,-64
20409458:	02112e23          	sw	ra,60(sp)
2040945c:	02812c23          	sw	s0,56(sp)
20409460:	04010413          	addi	s0,sp,64
20409464:	fca42e23          	sw	a0,-36(s0)
20409468:	fcb42c23          	sw	a1,-40(s0)
2040946c:	fcc42a23          	sw	a2,-44(s0)
20409470:	fcd42823          	sw	a3,-48(s0)
20409474:	fce42623          	sw	a4,-52(s0)
20409478:	fcf42423          	sw	a5,-56(s0)
  if (graph_executor.executor != NULL) {
2040947c:	5fbf8797          	auipc	a5,0x5fbf8
20409480:	a2878793          	addi	a5,a5,-1496 # 80000ea4 <graph_executor>
20409484:	0047a783          	lw	a5,4(a5)
20409488:	00078663          	beqz	a5,20409494 <TVMGraphExecutorModule_Create+0x40>
    return kTvmErrorGraphModuleAlreadyCreated;
2040948c:	70000793          	li	a5,1792
20409490:	1780006f          	j	20409608 <TVMGraphExecutorModule_Create+0x1b4>
  }

  if (nargs != 4) {
20409494:	fd442703          	lw	a4,-44(s0)
20409498:	00400793          	li	a5,4
2040949c:	00f70863          	beq	a4,a5,204094ac <TVMGraphExecutorModule_Create+0x58>
    return kTvmErrorFunctionCallNumArguments;
204094a0:	000017b7          	lui	a5,0x1
204094a4:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
204094a8:	1600006f          	j	20409608 <TVMGraphExecutorModule_Create+0x1b4>
  }

  if (tcodes[0] != kTVMStr || tcodes[1] != kTVMModuleHandle || tcodes[2] != kTVMArgInt ||
204094ac:	fd842783          	lw	a5,-40(s0)
204094b0:	0007a703          	lw	a4,0(a5)
204094b4:	00b00793          	li	a5,11
204094b8:	02f71c63          	bne	a4,a5,204094f0 <TVMGraphExecutorModule_Create+0x9c>
204094bc:	fd842783          	lw	a5,-40(s0)
204094c0:	00478793          	addi	a5,a5,4
204094c4:	0007a703          	lw	a4,0(a5)
204094c8:	00900793          	li	a5,9
204094cc:	02f71263          	bne	a4,a5,204094f0 <TVMGraphExecutorModule_Create+0x9c>
204094d0:	fd842783          	lw	a5,-40(s0)
204094d4:	00878793          	addi	a5,a5,8
204094d8:	0007a783          	lw	a5,0(a5)
204094dc:	00079a63          	bnez	a5,204094f0 <TVMGraphExecutorModule_Create+0x9c>
      tcodes[3] != kTVMArgInt) {
204094e0:	fd842783          	lw	a5,-40(s0)
204094e4:	00c78793          	addi	a5,a5,12
204094e8:	0007a783          	lw	a5,0(a5)
  if (tcodes[0] != kTVMStr || tcodes[1] != kTVMModuleHandle || tcodes[2] != kTVMArgInt ||
204094ec:	00078863          	beqz	a5,204094fc <TVMGraphExecutorModule_Create+0xa8>
    return kTvmErrorFunctionCallWrongArgType;
204094f0:	000017b7          	lui	a5,0x1
204094f4:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
204094f8:	1100006f          	j	20409608 <TVMGraphExecutorModule_Create+0x1b4>
  }

  if (args[2].v_int64 != kDLCPU || args[3].v_int64 != 0) {
204094fc:	fdc42783          	lw	a5,-36(s0)
20409500:	01078793          	addi	a5,a5,16
20409504:	0047a803          	lw	a6,4(a5)
20409508:	0007a783          	lw	a5,0(a5)
2040950c:	00078693          	mv	a3,a5
20409510:	00100713          	li	a4,1
20409514:	02e69463          	bne	a3,a4,2040953c <TVMGraphExecutorModule_Create+0xe8>
20409518:	00080793          	mv	a5,a6
2040951c:	02079063          	bnez	a5,2040953c <TVMGraphExecutorModule_Create+0xe8>
20409520:	fdc42783          	lw	a5,-36(s0)
20409524:	01878793          	addi	a5,a5,24
20409528:	0007a683          	lw	a3,0(a5)
2040952c:	0047a703          	lw	a4,4(a5)
20409530:	00068793          	mv	a5,a3
20409534:	00e7e7b3          	or	a5,a5,a4
20409538:	00078663          	beqz	a5,20409544 <TVMGraphExecutorModule_Create+0xf0>
    return kTvmErrorGraphModuleBadContext;
2040953c:	70100793          	li	a5,1793
20409540:	0c80006f          	j	20409608 <TVMGraphExecutorModule_Create+0x1b4>
  }

  DLDevice dev = {(DLDeviceType)args[2].v_int64, (int)args[3].v_int64};
20409544:	fdc42783          	lw	a5,-36(s0)
20409548:	01078793          	addi	a5,a5,16
2040954c:	0047a803          	lw	a6,4(a5)
20409550:	0007a783          	lw	a5,0(a5)
20409554:	fef42223          	sw	a5,-28(s0)
20409558:	fdc42783          	lw	a5,-36(s0)
2040955c:	01878793          	addi	a5,a5,24
20409560:	0047a803          	lw	a6,4(a5)
20409564:	0007a783          	lw	a5,0(a5)
20409568:	fef42423          	sw	a5,-24(s0)
  int ret_value =
      TVMGraphExecutor_Create(args[0].v_str, args[1].v_handle, &dev, &graph_executor.executor);
2040956c:	fdc42783          	lw	a5,-36(s0)
20409570:	0007a703          	lw	a4,0(a5)
20409574:	fdc42783          	lw	a5,-36(s0)
20409578:	00878793          	addi	a5,a5,8
2040957c:	0007a783          	lw	a5,0(a5)
  int ret_value =
20409580:	fe440613          	addi	a2,s0,-28
20409584:	5fbf8697          	auipc	a3,0x5fbf8
20409588:	92468693          	addi	a3,a3,-1756 # 80000ea8 <graph_executor+0x4>
2040958c:	00078593          	mv	a1,a5
20409590:	00070513          	mv	a0,a4
20409594:	e44fe0ef          	jal	ra,20407bd8 <TVMGraphExecutor_Create>
20409598:	fea42623          	sw	a0,-20(s0)
  if (ret_value != 0) {
2040959c:	fec42783          	lw	a5,-20(s0)
204095a0:	00078663          	beqz	a5,204095ac <TVMGraphExecutorModule_Create+0x158>
    return ret_value;
204095a4:	fec42783          	lw	a5,-20(s0)
204095a8:	0600006f          	j	20409608 <TVMGraphExecutorModule_Create+0x1b4>
  }

  TVMModuleHandle out;
  ret_value = TVMModCreateFromCModule(&graph_executor.mod, &out);
204095ac:	fe040793          	addi	a5,s0,-32
204095b0:	00078593          	mv	a1,a5
204095b4:	5fbf8517          	auipc	a0,0x5fbf8
204095b8:	8f050513          	addi	a0,a0,-1808 # 80000ea4 <graph_executor>
204095bc:	fc5f70ef          	jal	ra,20401580 <TVMModCreateFromCModule>
204095c0:	fea42623          	sw	a0,-20(s0)
  if (ret_value != 0) {
204095c4:	fec42783          	lw	a5,-20(s0)
204095c8:	02078263          	beqz	a5,204095ec <TVMGraphExecutorModule_Create+0x198>
    ret_tcodes[0] = kTVMNullptr;
204095cc:	fcc42783          	lw	a5,-52(s0)
204095d0:	00400713          	li	a4,4
204095d4:	00e7a023          	sw	a4,0(a5)
    TVMGraphExecutor_Release(&graph_executor.executor);
204095d8:	5fbf8517          	auipc	a0,0x5fbf8
204095dc:	8d050513          	addi	a0,a0,-1840 # 80000ea8 <graph_executor+0x4>
204095e0:	ebcfe0ef          	jal	ra,20407c9c <TVMGraphExecutor_Release>
    return ret_value;
204095e4:	fec42783          	lw	a5,-20(s0)
204095e8:	0200006f          	j	20409608 <TVMGraphExecutorModule_Create+0x1b4>
  }

  ret_values[0].v_handle = out;
204095ec:	fe042703          	lw	a4,-32(s0)
204095f0:	fd042783          	lw	a5,-48(s0)
204095f4:	00e7a023          	sw	a4,0(a5)
  ret_tcodes[0] = kTVMModuleHandle;
204095f8:	fcc42783          	lw	a5,-52(s0)
204095fc:	00900713          	li	a4,9
20409600:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
20409604:	00000793          	li	a5,0
}
20409608:	00078513          	mv	a0,a5
2040960c:	03c12083          	lw	ra,60(sp)
20409610:	03812403          	lw	s0,56(sp)
20409614:	04010113          	addi	sp,sp,64
20409618:	00008067          	ret

2040961c <TVMGraphExecutorModule_GetInput>:

int32_t TVMGraphExecutorModule_GetInput(TVMValue* args, int* tcodes, int nargs,
                                        TVMValue* ret_values, int* ret_tcodes,
                                        void* resource_handle) {
2040961c:	fc010113          	addi	sp,sp,-64
20409620:	02112e23          	sw	ra,60(sp)
20409624:	02812c23          	sw	s0,56(sp)
20409628:	04010413          	addi	s0,sp,64
2040962c:	fca42e23          	sw	a0,-36(s0)
20409630:	fcb42c23          	sw	a1,-40(s0)
20409634:	fcc42a23          	sw	a2,-44(s0)
20409638:	fcd42823          	sw	a3,-48(s0)
2040963c:	fce42623          	sw	a4,-52(s0)
20409640:	fcf42423          	sw	a5,-56(s0)
  if (nargs != 1) {
20409644:	fd442703          	lw	a4,-44(s0)
20409648:	00100793          	li	a5,1
2040964c:	00f70863          	beq	a4,a5,2040965c <TVMGraphExecutorModule_GetInput+0x40>
    return kTvmErrorFunctionCallNumArguments;
20409650:	000017b7          	lui	a5,0x1
20409654:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20409658:	0d80006f          	j	20409730 <TVMGraphExecutorModule_GetInput+0x114>
  }

  if (tcodes[0] != kTVMStr) {
2040965c:	fd842783          	lw	a5,-40(s0)
20409660:	0007a703          	lw	a4,0(a5)
20409664:	00b00793          	li	a5,11
20409668:	00f70863          	beq	a4,a5,20409678 <TVMGraphExecutorModule_GetInput+0x5c>
    return kTvmErrorFunctionCallWrongArgType;
2040966c:	000017b7          	lui	a5,0x1
20409670:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
20409674:	0bc0006f          	j	20409730 <TVMGraphExecutorModule_GetInput+0x114>
  }

  int index = TVMGraphExecutor_GetInputIndex(graph_executor.executor, args[0].v_str);
20409678:	5fbf8797          	auipc	a5,0x5fbf8
2040967c:	82c78793          	addi	a5,a5,-2004 # 80000ea4 <graph_executor>
20409680:	0047a703          	lw	a4,4(a5)
20409684:	fdc42783          	lw	a5,-36(s0)
20409688:	0007a783          	lw	a5,0(a5)
2040968c:	00078593          	mv	a1,a5
20409690:	00070513          	mv	a0,a4
20409694:	a41fc0ef          	jal	ra,204060d4 <TVMGraphExecutor_GetInputIndex>
20409698:	fea42623          	sw	a0,-20(s0)
  if (index < 0) {
2040969c:	fec42783          	lw	a5,-20(s0)
204096a0:	0007d663          	bgez	a5,204096ac <TVMGraphExecutorModule_GetInput+0x90>
    return kTvmErrorGraphModuleNoSuchInput;
204096a4:	70200793          	li	a5,1794
204096a8:	0880006f          	j	20409730 <TVMGraphExecutorModule_GetInput+0x114>
  }

  uint32_t eid = TVMGraphExecutor_GetEntryId(graph_executor.executor,
204096ac:	5fbf7797          	auipc	a5,0x5fbf7
204096b0:	7f878793          	addi	a5,a5,2040 # 80000ea4 <graph_executor>
204096b4:	0047a683          	lw	a3,4(a5)
                                             graph_executor.executor->input_nodes[index], 0);
204096b8:	5fbf7797          	auipc	a5,0x5fbf7
204096bc:	7ec78793          	addi	a5,a5,2028 # 80000ea4 <graph_executor>
204096c0:	0047a783          	lw	a5,4(a5)
204096c4:	0087a703          	lw	a4,8(a5)
204096c8:	fec42783          	lw	a5,-20(s0)
204096cc:	00279793          	slli	a5,a5,0x2
204096d0:	00f707b3          	add	a5,a4,a5
  uint32_t eid = TVMGraphExecutor_GetEntryId(graph_executor.executor,
204096d4:	0007a783          	lw	a5,0(a5)
204096d8:	00000613          	li	a2,0
204096dc:	00078593          	mv	a1,a5
204096e0:	00068513          	mv	a0,a3
204096e4:	981fc0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
204096e8:	fea42423          	sw	a0,-24(s0)
  ret_values[0].v_handle = (void*)&graph_executor.executor->data_entry[eid].dl_tensor;
204096ec:	5fbf7797          	auipc	a5,0x5fbf7
204096f0:	7b878793          	addi	a5,a5,1976 # 80000ea4 <graph_executor>
204096f4:	0047a783          	lw	a5,4(a5)
204096f8:	0587a683          	lw	a3,88(a5)
204096fc:	fe842703          	lw	a4,-24(s0)
20409700:	00070793          	mv	a5,a4
20409704:	00279793          	slli	a5,a5,0x2
20409708:	00e787b3          	add	a5,a5,a4
2040970c:	00379793          	slli	a5,a5,0x3
20409710:	00f687b3          	add	a5,a3,a5
20409714:	00078713          	mv	a4,a5
20409718:	fd042783          	lw	a5,-48(s0)
2040971c:	00e7a023          	sw	a4,0(a5)
  ret_tcodes[0] = kTVMNDArrayHandle;
20409720:	fcc42783          	lw	a5,-52(s0)
20409724:	00d00713          	li	a4,13
20409728:	00e7a023          	sw	a4,0(a5)
  return 0;
2040972c:	00000793          	li	a5,0
}
20409730:	00078513          	mv	a0,a5
20409734:	03c12083          	lw	ra,60(sp)
20409738:	03812403          	lw	s0,56(sp)
2040973c:	04010113          	addi	sp,sp,64
20409740:	00008067          	ret

20409744 <TVMGraphExecutorModule_GetNumInputs>:

int32_t TVMGraphExecutorModule_GetNumInputs(TVMValue* args, int* tcodes, int nargs,
                                            TVMValue* ret_values, int* ret_tcodes,
                                            void* resource_handle) {
20409744:	fd010113          	addi	sp,sp,-48
20409748:	02112623          	sw	ra,44(sp)
2040974c:	02812423          	sw	s0,40(sp)
20409750:	03212223          	sw	s2,36(sp)
20409754:	03312023          	sw	s3,32(sp)
20409758:	03010413          	addi	s0,sp,48
2040975c:	fea42623          	sw	a0,-20(s0)
20409760:	feb42423          	sw	a1,-24(s0)
20409764:	fec42223          	sw	a2,-28(s0)
20409768:	fed42023          	sw	a3,-32(s0)
2040976c:	fce42e23          	sw	a4,-36(s0)
20409770:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 0) {
20409774:	fe442783          	lw	a5,-28(s0)
20409778:	00078863          	beqz	a5,20409788 <TVMGraphExecutorModule_GetNumInputs+0x44>
    return kTvmErrorFunctionCallNumArguments;
2040977c:	000017b7          	lui	a5,0x1
20409780:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20409784:	0300006f          	j	204097b4 <TVMGraphExecutorModule_GetNumInputs+0x70>
  }

  ret_values[0].v_int64 = TVMGraphExecutor_GetNumInputs();
20409788:	925fc0ef          	jal	ra,204060ac <TVMGraphExecutor_GetNumInputs>
2040978c:	00050793          	mv	a5,a0
20409790:	00078913          	mv	s2,a5
20409794:	41f7d793          	srai	a5,a5,0x1f
20409798:	00078993          	mv	s3,a5
2040979c:	fe042783          	lw	a5,-32(s0)
204097a0:	0127a023          	sw	s2,0(a5)
204097a4:	0137a223          	sw	s3,4(a5)
  ret_tcodes[0] = kTVMArgInt;
204097a8:	fdc42783          	lw	a5,-36(s0)
204097ac:	0007a023          	sw	zero,0(a5)
  return 0;
204097b0:	00000793          	li	a5,0
}
204097b4:	00078513          	mv	a0,a5
204097b8:	02c12083          	lw	ra,44(sp)
204097bc:	02812403          	lw	s0,40(sp)
204097c0:	02412903          	lw	s2,36(sp)
204097c4:	02012983          	lw	s3,32(sp)
204097c8:	03010113          	addi	sp,sp,48
204097cc:	00008067          	ret

204097d0 <TVMGraphExecutorModule_GetNumOutputs>:

int32_t TVMGraphExecutorModule_GetNumOutputs(TVMValue* args, int* tcodes, int nargs,
                                             TVMValue* ret_values, int* ret_tcodes,
                                             void* resource_handle) {
204097d0:	fd010113          	addi	sp,sp,-48
204097d4:	02112623          	sw	ra,44(sp)
204097d8:	02812423          	sw	s0,40(sp)
204097dc:	03212223          	sw	s2,36(sp)
204097e0:	03312023          	sw	s3,32(sp)
204097e4:	03010413          	addi	s0,sp,48
204097e8:	fea42623          	sw	a0,-20(s0)
204097ec:	feb42423          	sw	a1,-24(s0)
204097f0:	fec42223          	sw	a2,-28(s0)
204097f4:	fed42023          	sw	a3,-32(s0)
204097f8:	fce42e23          	sw	a4,-36(s0)
204097fc:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 0) {
20409800:	fe442783          	lw	a5,-28(s0)
20409804:	00078863          	beqz	a5,20409814 <TVMGraphExecutorModule_GetNumOutputs+0x44>
    return kTvmErrorFunctionCallNumArguments;
20409808:	000017b7          	lui	a5,0x1
2040980c:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20409810:	0400006f          	j	20409850 <TVMGraphExecutorModule_GetNumOutputs+0x80>
  }

  ret_values[0].v_int64 = TVMGraphExecutor_GetNumOutputs(graph_executor.executor);
20409814:	5fbf7797          	auipc	a5,0x5fbf7
20409818:	69078793          	addi	a5,a5,1680 # 80000ea4 <graph_executor>
2040981c:	0047a783          	lw	a5,4(a5)
20409820:	00078513          	mv	a0,a5
20409824:	954fd0ef          	jal	ra,20406978 <TVMGraphExecutor_GetNumOutputs>
20409828:	00050793          	mv	a5,a0
2040982c:	00078913          	mv	s2,a5
20409830:	41f7d793          	srai	a5,a5,0x1f
20409834:	00078993          	mv	s3,a5
20409838:	fe042783          	lw	a5,-32(s0)
2040983c:	0127a023          	sw	s2,0(a5)
20409840:	0137a223          	sw	s3,4(a5)
  ret_tcodes[0] = kTVMArgInt;
20409844:	fdc42783          	lw	a5,-36(s0)
20409848:	0007a023          	sw	zero,0(a5)
  return 0;
2040984c:	00000793          	li	a5,0
}
20409850:	00078513          	mv	a0,a5
20409854:	02c12083          	lw	ra,44(sp)
20409858:	02812403          	lw	s0,40(sp)
2040985c:	02412903          	lw	s2,36(sp)
20409860:	02012983          	lw	s3,32(sp)
20409864:	03010113          	addi	sp,sp,48
20409868:	00008067          	ret

2040986c <TVMGraphExecutorModule_GetOutput>:

int32_t TVMGraphExecutorModule_GetOutput(TVMValue* args, int* tcodes, int nargs,
                                         TVMValue* ret_values, int* ret_tcodes,
                                         void* resource_handle) {
2040986c:	fc010113          	addi	sp,sp,-64
20409870:	02112e23          	sw	ra,60(sp)
20409874:	02812c23          	sw	s0,56(sp)
20409878:	04010413          	addi	s0,sp,64
2040987c:	fca42e23          	sw	a0,-36(s0)
20409880:	fcb42c23          	sw	a1,-40(s0)
20409884:	fcc42a23          	sw	a2,-44(s0)
20409888:	fcd42823          	sw	a3,-48(s0)
2040988c:	fce42623          	sw	a4,-52(s0)
20409890:	fcf42423          	sw	a5,-56(s0)
  if (nargs != 1) {
20409894:	fd442703          	lw	a4,-44(s0)
20409898:	00100793          	li	a5,1
2040989c:	00f70863          	beq	a4,a5,204098ac <TVMGraphExecutorModule_GetOutput+0x40>
    return kTvmErrorFunctionCallNumArguments;
204098a0:	000017b7          	lui	a5,0x1
204098a4:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
204098a8:	1080006f          	j	204099b0 <TVMGraphExecutorModule_GetOutput+0x144>
  }

  if (tcodes[0] != kTVMArgInt) {
204098ac:	fd842783          	lw	a5,-40(s0)
204098b0:	0007a783          	lw	a5,0(a5)
204098b4:	00078863          	beqz	a5,204098c4 <TVMGraphExecutorModule_GetOutput+0x58>
    return kTvmErrorFunctionCallWrongArgType;
204098b8:	000017b7          	lui	a5,0x1
204098bc:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
204098c0:	0f00006f          	j	204099b0 <TVMGraphExecutorModule_GetOutput+0x144>
  }

  int output_index = args[0].v_int64;
204098c4:	fdc42783          	lw	a5,-36(s0)
204098c8:	0047a803          	lw	a6,4(a5)
204098cc:	0007a783          	lw	a5,0(a5)
204098d0:	fef42623          	sw	a5,-20(s0)
  if (output_index < 0 || output_index > TVMGraphExecutor_GetNumOutputs(graph_executor.executor)) {
204098d4:	fec42783          	lw	a5,-20(s0)
204098d8:	0207c263          	bltz	a5,204098fc <TVMGraphExecutorModule_GetOutput+0x90>
204098dc:	5fbf7797          	auipc	a5,0x5fbf7
204098e0:	5c878793          	addi	a5,a5,1480 # 80000ea4 <graph_executor>
204098e4:	0047a783          	lw	a5,4(a5)
204098e8:	00078513          	mv	a0,a5
204098ec:	88cfd0ef          	jal	ra,20406978 <TVMGraphExecutor_GetNumOutputs>
204098f0:	00050713          	mv	a4,a0
204098f4:	fec42783          	lw	a5,-20(s0)
204098f8:	00f75663          	ble	a5,a4,20409904 <TVMGraphExecutorModule_GetOutput+0x98>
    return kTvmErrorGraphModuleNoSuchInput;
204098fc:	70200793          	li	a5,1794
20409900:	0b00006f          	j	204099b0 <TVMGraphExecutorModule_GetOutput+0x144>
  }

  uint32_t nid = graph_executor.executor->outputs[output_index].node_id;
20409904:	5fbf7797          	auipc	a5,0x5fbf7
20409908:	5a078793          	addi	a5,a5,1440 # 80000ea4 <graph_executor>
2040990c:	0047a783          	lw	a5,4(a5)
20409910:	0187a703          	lw	a4,24(a5)
20409914:	fec42783          	lw	a5,-20(s0)
20409918:	00479793          	slli	a5,a5,0x4
2040991c:	00f707b3          	add	a5,a4,a5
20409920:	0007a783          	lw	a5,0(a5)
20409924:	fef42423          	sw	a5,-24(s0)
  uint32_t index = graph_executor.executor->outputs[output_index].index;
20409928:	5fbf7797          	auipc	a5,0x5fbf7
2040992c:	57c78793          	addi	a5,a5,1404 # 80000ea4 <graph_executor>
20409930:	0047a783          	lw	a5,4(a5)
20409934:	0187a703          	lw	a4,24(a5)
20409938:	fec42783          	lw	a5,-20(s0)
2040993c:	00479793          	slli	a5,a5,0x4
20409940:	00f707b3          	add	a5,a4,a5
20409944:	0047a783          	lw	a5,4(a5)
20409948:	fef42223          	sw	a5,-28(s0)
  uint32_t eid = TVMGraphExecutor_GetEntryId(graph_executor.executor, nid, index);
2040994c:	5fbf7797          	auipc	a5,0x5fbf7
20409950:	55878793          	addi	a5,a5,1368 # 80000ea4 <graph_executor>
20409954:	0047a783          	lw	a5,4(a5)
20409958:	fe442603          	lw	a2,-28(s0)
2040995c:	fe842583          	lw	a1,-24(s0)
20409960:	00078513          	mv	a0,a5
20409964:	f00fc0ef          	jal	ra,20406064 <TVMGraphExecutor_GetEntryId>
20409968:	fea42023          	sw	a0,-32(s0)

  ret_values[0].v_handle = (void*)&(graph_executor.executor->data_entry[eid].dl_tensor);
2040996c:	5fbf7797          	auipc	a5,0x5fbf7
20409970:	53878793          	addi	a5,a5,1336 # 80000ea4 <graph_executor>
20409974:	0047a783          	lw	a5,4(a5)
20409978:	0587a683          	lw	a3,88(a5)
2040997c:	fe042703          	lw	a4,-32(s0)
20409980:	00070793          	mv	a5,a4
20409984:	00279793          	slli	a5,a5,0x2
20409988:	00e787b3          	add	a5,a5,a4
2040998c:	00379793          	slli	a5,a5,0x3
20409990:	00f687b3          	add	a5,a3,a5
20409994:	00078713          	mv	a4,a5
20409998:	fd042783          	lw	a5,-48(s0)
2040999c:	00e7a023          	sw	a4,0(a5)
  ret_tcodes[0] = kTVMNDArrayHandle;
204099a0:	fcc42783          	lw	a5,-52(s0)
204099a4:	00d00713          	li	a4,13
204099a8:	00e7a023          	sw	a4,0(a5)
  return 0;
204099ac:	00000793          	li	a5,0
}
204099b0:	00078513          	mv	a0,a5
204099b4:	03c12083          	lw	ra,60(sp)
204099b8:	03812403          	lw	s0,56(sp)
204099bc:	04010113          	addi	sp,sp,64
204099c0:	00008067          	ret

204099c4 <TVMGraphExecutorModule_LoadParams>:

int32_t TVMGraphExecutorModule_LoadParams(TVMValue* args, int* tcodes, int nargs,
                                          TVMValue* ret_values, int* ret_tcodes,
                                          void* resource_handle) {
204099c4:	fc010113          	addi	sp,sp,-64
204099c8:	02112e23          	sw	ra,60(sp)
204099cc:	02812c23          	sw	s0,56(sp)
204099d0:	04010413          	addi	s0,sp,64
204099d4:	fca42e23          	sw	a0,-36(s0)
204099d8:	fcb42c23          	sw	a1,-40(s0)
204099dc:	fcc42a23          	sw	a2,-44(s0)
204099e0:	fcd42823          	sw	a3,-48(s0)
204099e4:	fce42623          	sw	a4,-52(s0)
204099e8:	fcf42423          	sw	a5,-56(s0)
  if (nargs != 1) {
204099ec:	fd442703          	lw	a4,-44(s0)
204099f0:	00100793          	li	a5,1
204099f4:	00f70863          	beq	a4,a5,20409a04 <TVMGraphExecutorModule_LoadParams+0x40>
    return kTvmErrorFunctionCallNumArguments;
204099f8:	000017b7          	lui	a5,0x1
204099fc:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20409a00:	0680006f          	j	20409a68 <TVMGraphExecutorModule_LoadParams+0xa4>
  }

  if (tcodes[0] != kTVMBytes) {
20409a04:	fd842783          	lw	a5,-40(s0)
20409a08:	0007a703          	lw	a4,0(a5)
20409a0c:	00c00793          	li	a5,12
20409a10:	00f70863          	beq	a4,a5,20409a20 <TVMGraphExecutorModule_LoadParams+0x5c>
    return kTvmErrorFunctionCallWrongArgType;
20409a14:	000017b7          	lui	a5,0x1
20409a18:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
20409a1c:	04c0006f          	j	20409a68 <TVMGraphExecutorModule_LoadParams+0xa4>
  }

  ret_tcodes[0] = kTVMNullptr;
20409a20:	fcc42783          	lw	a5,-52(s0)
20409a24:	00400713          	li	a4,4
20409a28:	00e7a023          	sw	a4,0(a5)

  TVMByteArray* arr = (TVMByteArray*)args[0].v_handle;
20409a2c:	fdc42783          	lw	a5,-36(s0)
20409a30:	0007a783          	lw	a5,0(a5)
20409a34:	fef42623          	sw	a5,-20(s0)
  return TVMGraphExecutor_LoadParams(graph_executor.executor, arr->data, arr->size);
20409a38:	5fbf7797          	auipc	a5,0x5fbf7
20409a3c:	46c78793          	addi	a5,a5,1132 # 80000ea4 <graph_executor>
20409a40:	0047a703          	lw	a4,4(a5)
20409a44:	fec42783          	lw	a5,-20(s0)
20409a48:	0007a683          	lw	a3,0(a5)
20409a4c:	fec42783          	lw	a5,-20(s0)
20409a50:	0047a783          	lw	a5,4(a5)
20409a54:	00078613          	mv	a2,a5
20409a58:	00068593          	mv	a1,a3
20409a5c:	00070513          	mv	a0,a4
20409a60:	845fc0ef          	jal	ra,204062a4 <TVMGraphExecutor_LoadParams>
20409a64:	00050793          	mv	a5,a0
}
20409a68:	00078513          	mv	a0,a5
20409a6c:	03c12083          	lw	ra,60(sp)
20409a70:	03812403          	lw	s0,56(sp)
20409a74:	04010113          	addi	sp,sp,64
20409a78:	00008067          	ret

20409a7c <TVMGraphExecutorModule_Run>:

int32_t TVMGraphExecutorModule_Run(TVMValue* args, int* tcodes, int nargs, TVMValue* ret_values,
                                   int* ret_tcodes, void* resource_handle) {
20409a7c:	fd010113          	addi	sp,sp,-48
20409a80:	02112623          	sw	ra,44(sp)
20409a84:	02812423          	sw	s0,40(sp)
20409a88:	03010413          	addi	s0,sp,48
20409a8c:	fea42623          	sw	a0,-20(s0)
20409a90:	feb42423          	sw	a1,-24(s0)
20409a94:	fec42223          	sw	a2,-28(s0)
20409a98:	fed42023          	sw	a3,-32(s0)
20409a9c:	fce42e23          	sw	a4,-36(s0)
20409aa0:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 0) {
20409aa4:	fe442783          	lw	a5,-28(s0)
20409aa8:	00078863          	beqz	a5,20409ab8 <TVMGraphExecutorModule_Run+0x3c>
    return kTvmErrorFunctionCallNumArguments;
20409aac:	000017b7          	lui	a5,0x1
20409ab0:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20409ab4:	0280006f          	j	20409adc <TVMGraphExecutorModule_Run+0x60>
  }

  TVMGraphExecutor_Run(graph_executor.executor);
20409ab8:	5fbf7797          	auipc	a5,0x5fbf7
20409abc:	3ec78793          	addi	a5,a5,1004 # 80000ea4 <graph_executor>
20409ac0:	0047a783          	lw	a5,4(a5)
20409ac4:	00078513          	mv	a0,a5
20409ac8:	dedfc0ef          	jal	ra,204068b4 <TVMGraphExecutor_Run>

  ret_tcodes[0] = kTVMNullptr;
20409acc:	fdc42783          	lw	a5,-36(s0)
20409ad0:	00400713          	li	a4,4
20409ad4:	00e7a023          	sw	a4,0(a5)
  return 0;
20409ad8:	00000793          	li	a5,0
}
20409adc:	00078513          	mv	a0,a5
20409ae0:	02c12083          	lw	ra,44(sp)
20409ae4:	02812403          	lw	s0,40(sp)
20409ae8:	03010113          	addi	sp,sp,48
20409aec:	00008067          	ret

20409af0 <TVMGraphExecutorModule_SetInput>:

int32_t TVMGraphExecutorModule_SetInput(TVMValue* args, int* tcodes, int nargs,
                                        TVMValue* ret_values, int* ret_tcodes,
                                        void* resource_handle) {
20409af0:	fd010113          	addi	sp,sp,-48
20409af4:	02112623          	sw	ra,44(sp)
20409af8:	02812423          	sw	s0,40(sp)
20409afc:	03010413          	addi	s0,sp,48
20409b00:	fea42623          	sw	a0,-20(s0)
20409b04:	feb42423          	sw	a1,-24(s0)
20409b08:	fec42223          	sw	a2,-28(s0)
20409b0c:	fed42023          	sw	a3,-32(s0)
20409b10:	fce42e23          	sw	a4,-36(s0)
20409b14:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 2) {
20409b18:	fe442703          	lw	a4,-28(s0)
20409b1c:	00200793          	li	a5,2
20409b20:	00f70863          	beq	a4,a5,20409b30 <TVMGraphExecutorModule_SetInput+0x40>
    return kTvmErrorFunctionCallNumArguments;
20409b24:	000017b7          	lui	a5,0x1
20409b28:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
20409b2c:	0740006f          	j	20409ba0 <TVMGraphExecutorModule_SetInput+0xb0>
  }

  if (tcodes[0] != kTVMStr || tcodes[1] != kTVMDLTensorHandle) {
20409b30:	fe842783          	lw	a5,-24(s0)
20409b34:	0007a703          	lw	a4,0(a5)
20409b38:	00b00793          	li	a5,11
20409b3c:	00f71c63          	bne	a4,a5,20409b54 <TVMGraphExecutorModule_SetInput+0x64>
20409b40:	fe842783          	lw	a5,-24(s0)
20409b44:	00478793          	addi	a5,a5,4
20409b48:	0007a703          	lw	a4,0(a5)
20409b4c:	00700793          	li	a5,7
20409b50:	00f70863          	beq	a4,a5,20409b60 <TVMGraphExecutorModule_SetInput+0x70>
    return kTvmErrorFunctionCallWrongArgType;
20409b54:	000017b7          	lui	a5,0x1
20409b58:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size+0x1>
20409b5c:	0440006f          	j	20409ba0 <TVMGraphExecutorModule_SetInput+0xb0>
  }

  TVMGraphExecutor_SetInput(graph_executor.executor, args[0].v_str, (DLTensor*)args[1].v_handle);
20409b60:	5fbf7797          	auipc	a5,0x5fbf7
20409b64:	34478793          	addi	a5,a5,836 # 80000ea4 <graph_executor>
20409b68:	0047a703          	lw	a4,4(a5)
20409b6c:	fec42783          	lw	a5,-20(s0)
20409b70:	0007a683          	lw	a3,0(a5)
20409b74:	fec42783          	lw	a5,-20(s0)
20409b78:	00878793          	addi	a5,a5,8
20409b7c:	0007a783          	lw	a5,0(a5)
20409b80:	00078613          	mv	a2,a5
20409b84:	00068593          	mv	a1,a3
20409b88:	00070513          	mv	a0,a4
20409b8c:	e44fc0ef          	jal	ra,204061d0 <TVMGraphExecutor_SetInput>

  ret_tcodes[0] = kTVMNullptr;
20409b90:	fdc42783          	lw	a5,-36(s0)
20409b94:	00400713          	li	a4,4
20409b98:	00e7a023          	sw	a4,0(a5)
  return 0;
20409b9c:	00000793          	li	a5,0
}
20409ba0:	00078513          	mv	a0,a5
20409ba4:	02c12083          	lw	ra,44(sp)
20409ba8:	02812403          	lw	s0,40(sp)
20409bac:	03010113          	addi	sp,sp,48
20409bb0:	00008067          	ret

20409bb4 <TVMGraphExecutorModule_NotImplemented>:

int32_t TVMGraphExecutorModule_NotImplemented(TVMValue* args, int* tcodes, int nargs,
                                              TVMValue* ret_values, int* ret_tcodes,
                                              void* resource_handle) {
20409bb4:	fd010113          	addi	sp,sp,-48
20409bb8:	02812623          	sw	s0,44(sp)
20409bbc:	03010413          	addi	s0,sp,48
20409bc0:	fea42623          	sw	a0,-20(s0)
20409bc4:	feb42423          	sw	a1,-24(s0)
20409bc8:	fec42223          	sw	a2,-28(s0)
20409bcc:	fed42023          	sw	a3,-32(s0)
20409bd0:	fce42e23          	sw	a4,-36(s0)
20409bd4:	fcf42c23          	sw	a5,-40(s0)
  return kTvmErrorFunctionCallNotImplemented;
20409bd8:	000017b7          	lui	a5,0x1
20409bdc:	80278793          	addi	a5,a5,-2046 # 802 <__stack_size+0x2>
}
20409be0:	00078513          	mv	a0,a5
20409be4:	02c12403          	lw	s0,44(sp)
20409be8:	03010113          	addi	sp,sp,48
20409bec:	00008067          	ret

20409bf0 <TVMGraphExecutorModule_Register>:
    "run\0"
    "set_input\0"
    "share_params\0",
    graph_executor_registry_funcs};

tvm_crt_error_t TVMGraphExecutorModule_Register() {
20409bf0:	ff010113          	addi	sp,sp,-16
20409bf4:	00112623          	sw	ra,12(sp)
20409bf8:	00812423          	sw	s0,8(sp)
20409bfc:	01010413          	addi	s0,sp,16
  graph_executor.mod.registry = &graph_executor_registry;
20409c00:	5fbf7797          	auipc	a5,0x5fbf7
20409c04:	2a478793          	addi	a5,a5,676 # 80000ea4 <graph_executor>
20409c08:	5fbf7717          	auipc	a4,0x5fbf7
20409c0c:	e0870713          	addi	a4,a4,-504 # 80000a10 <graph_executor_registry>
20409c10:	00e7a023          	sw	a4,0(a5)
  graph_executor.executor = NULL;
20409c14:	5fbf7797          	auipc	a5,0x5fbf7
20409c18:	29078793          	addi	a5,a5,656 # 80000ea4 <graph_executor>
20409c1c:	0007a223          	sw	zero,4(a5)

  return TVMFuncRegisterGlobal("tvm.graph_executor.create", &TVMGraphExecutorModule_Create, 0);
20409c20:	00000613          	li	a2,0
20409c24:	00000597          	auipc	a1,0x0
20409c28:	83058593          	addi	a1,a1,-2000 # 20409454 <TVMGraphExecutorModule_Create>
20409c2c:	00017517          	auipc	a0,0x17
20409c30:	e3050513          	addi	a0,a0,-464 # 20420a5c <graph_executor_registry_funcs+0x80>
20409c34:	81df70ef          	jal	ra,20401450 <TVMFuncRegisterGlobal>
20409c38:	00050793          	mv	a5,a0
}
20409c3c:	00078513          	mv	a0,a5
20409c40:	00c12083          	lw	ra,12(sp)
20409c44:	00812403          	lw	s0,8(sp)
20409c48:	01010113          	addi	sp,sp,16
20409c4c:	00008067          	ret

20409c50 <PageCreate>:
#include <tvm/runtime/crt/logging.h>
#include <tvm/runtime/crt/platform.h>

// construct a new page
Page PageCreate(uint8_t* memory_pool, size_t page_size_bytes, tvm_index_t ptable_begin,
                tvm_index_t num_pages) {
20409c50:	fb010113          	addi	sp,sp,-80
20409c54:	04112623          	sw	ra,76(sp)
20409c58:	04812423          	sw	s0,72(sp)
20409c5c:	05010413          	addi	s0,sp,80
20409c60:	fca42623          	sw	a0,-52(s0)
20409c64:	fcb42423          	sw	a1,-56(s0)
20409c68:	fcc42223          	sw	a2,-60(s0)
20409c6c:	fad42c23          	sw	a3,-72(s0)
20409c70:	fae42e23          	sw	a4,-68(s0)
20409c74:	faf42823          	sw	a5,-80(s0)
20409c78:	fb042a23          	sw	a6,-76(s0)
  Page page;
  page.ptable_begin = ptable_begin;
20409c7c:	fb842783          	lw	a5,-72(s0)
20409c80:	fbc42803          	lw	a6,-68(s0)
20409c84:	fcf42c23          	sw	a5,-40(s0)
20409c88:	fd042e23          	sw	a6,-36(s0)
  page.num_pages = num_pages;
20409c8c:	fb042783          	lw	a5,-80(s0)
20409c90:	fb442803          	lw	a6,-76(s0)
20409c94:	fef42023          	sw	a5,-32(s0)
20409c98:	ff042223          	sw	a6,-28(s0)
  page.data = memory_pool + ptable_begin * page_size_bytes;
20409c9c:	fb842783          	lw	a5,-72(s0)
20409ca0:	fc442583          	lw	a1,-60(s0)
20409ca4:	00078513          	mv	a0,a5
20409ca8:	2c5150ef          	jal	ra,2041f76c <__mulsi3>
20409cac:	00050793          	mv	a5,a0
20409cb0:	00078713          	mv	a4,a5
20409cb4:	fc842783          	lw	a5,-56(s0)
20409cb8:	00e787b3          	add	a5,a5,a4
20409cbc:	fef42423          	sw	a5,-24(s0)
  return page;
20409cc0:	fcc42783          	lw	a5,-52(s0)
20409cc4:	fd842703          	lw	a4,-40(s0)
20409cc8:	00e7a023          	sw	a4,0(a5)
20409ccc:	fdc42703          	lw	a4,-36(s0)
20409cd0:	00e7a223          	sw	a4,4(a5)
20409cd4:	fe042703          	lw	a4,-32(s0)
20409cd8:	00e7a423          	sw	a4,8(a5)
20409cdc:	fe442703          	lw	a4,-28(s0)
20409ce0:	00e7a623          	sw	a4,12(a5)
20409ce4:	fe842703          	lw	a4,-24(s0)
20409ce8:	00e7a823          	sw	a4,16(a5)
20409cec:	fec42703          	lw	a4,-20(s0)
20409cf0:	00e7aa23          	sw	a4,20(a5)
}
20409cf4:	fcc42503          	lw	a0,-52(s0)
20409cf8:	04c12083          	lw	ra,76(sp)
20409cfc:	04812403          	lw	s0,72(sp)
20409d00:	05010113          	addi	sp,sp,80
20409d04:	00008067          	ret

20409d08 <PageTable_Resize>:

void PageTable_Resize(struct PageTable* ptable, size_t new_size, Page* page) {
20409d08:	fd010113          	addi	sp,sp,-48
20409d0c:	02112623          	sw	ra,44(sp)
20409d10:	02812423          	sw	s0,40(sp)
20409d14:	03010413          	addi	s0,sp,48
20409d18:	fca42e23          	sw	a0,-36(s0)
20409d1c:	fcb42c23          	sw	a1,-40(s0)
20409d20:	fcc42a23          	sw	a2,-44(s0)
  CHECK_LE(ptable->num_pages, new_size, "size value (%zu) is smaller than expected (%zu).",
20409d24:	fdc42783          	lw	a5,-36(s0)
20409d28:	0107a783          	lw	a5,16(a5)
20409d2c:	fd842703          	lw	a4,-40(s0)
20409d30:	04f77263          	bleu	a5,a4,20409d74 <PageTable_Resize+0x6c>
20409d34:	fdc42783          	lw	a5,-36(s0)
20409d38:	0107a783          	lw	a5,16(a5)
20409d3c:	00078813          	mv	a6,a5
20409d40:	fd842783          	lw	a5,-40(s0)
20409d44:	00017717          	auipc	a4,0x17
20409d48:	d3470713          	addi	a4,a4,-716 # 20420a78 <graph_executor_registry_funcs+0x9c>
20409d4c:	00017697          	auipc	a3,0x17
20409d50:	d3868693          	addi	a3,a3,-712 # 20420a84 <graph_executor_registry_funcs+0xa8>
20409d54:	00017617          	auipc	a2,0x17
20409d58:	d3460613          	addi	a2,a2,-716 # 20420a88 <graph_executor_registry_funcs+0xac>
20409d5c:	03400593          	li	a1,52
20409d60:	00017517          	auipc	a0,0x17
20409d64:	d3c50513          	addi	a0,a0,-708 # 20420a9c <graph_executor_registry_funcs+0xc0>
20409d68:	4f1030ef          	jal	ra,2040da58 <TVMLogf>
20409d6c:	50000513          	li	a0,1280
20409d70:	c01f60ef          	jal	ra,20400970 <TVMPlatformAbort>
           new_size, ptable->num_pages);
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
20409d74:	fdc42783          	lw	a5,-36(s0)
20409d78:	0107a783          	lw	a5,16(a5)
20409d7c:	fef42623          	sw	a5,-20(s0)
20409d80:	0640006f          	j	20409de4 <PageTable_Resize+0xdc>
    ptable->page[idx] = *page;
20409d84:	fdc42783          	lw	a5,-36(s0)
20409d88:	0087a683          	lw	a3,8(a5)
20409d8c:	fec42703          	lw	a4,-20(s0)
20409d90:	00070793          	mv	a5,a4
20409d94:	00179793          	slli	a5,a5,0x1
20409d98:	00e787b3          	add	a5,a5,a4
20409d9c:	00379793          	slli	a5,a5,0x3
20409da0:	00f687b3          	add	a5,a3,a5
20409da4:	fd442703          	lw	a4,-44(s0)
20409da8:	00072683          	lw	a3,0(a4)
20409dac:	00d7a023          	sw	a3,0(a5)
20409db0:	00472683          	lw	a3,4(a4)
20409db4:	00d7a223          	sw	a3,4(a5)
20409db8:	00872683          	lw	a3,8(a4)
20409dbc:	00d7a423          	sw	a3,8(a5)
20409dc0:	00c72683          	lw	a3,12(a4)
20409dc4:	00d7a623          	sw	a3,12(a5)
20409dc8:	01072683          	lw	a3,16(a4)
20409dcc:	00d7a823          	sw	a3,16(a5)
20409dd0:	01472703          	lw	a4,20(a4)
20409dd4:	00e7aa23          	sw	a4,20(a5)
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
20409dd8:	fec42783          	lw	a5,-20(s0)
20409ddc:	00178793          	addi	a5,a5,1
20409de0:	fef42623          	sw	a5,-20(s0)
20409de4:	fec42703          	lw	a4,-20(s0)
20409de8:	fd842783          	lw	a5,-40(s0)
20409dec:	f8f76ce3          	bltu	a4,a5,20409d84 <PageTable_Resize+0x7c>
  }
  ptable->num_pages = new_size;
20409df0:	fdc42783          	lw	a5,-36(s0)
20409df4:	fd842703          	lw	a4,-40(s0)
20409df8:	00e7a823          	sw	a4,16(a5)
}
20409dfc:	00000013          	nop
20409e00:	02c12083          	lw	ra,44(sp)
20409e04:	02812403          	lw	s0,40(sp)
20409e08:	03010113          	addi	sp,sp,48
20409e0c:	00008067          	ret

20409e10 <TLB_Set>:

void TLB_Set(TLB* tlb, uint8_t* data, Page* page) {
20409e10:	fd010113          	addi	sp,sp,-48
20409e14:	02112623          	sw	ra,44(sp)
20409e18:	02812423          	sw	s0,40(sp)
20409e1c:	03010413          	addi	s0,sp,48
20409e20:	fca42e23          	sw	a0,-36(s0)
20409e24:	fcb42c23          	sw	a1,-40(s0)
20409e28:	fcc42a23          	sw	a2,-44(s0)
  PageEntry* entry = tlb->find(tlb, data);
20409e2c:	fdc42783          	lw	a5,-36(s0)
20409e30:	0107a783          	lw	a5,16(a5)
20409e34:	fd842583          	lw	a1,-40(s0)
20409e38:	fdc42503          	lw	a0,-36(s0)
20409e3c:	000780e7          	jalr	a5
20409e40:	fea42623          	sw	a0,-20(s0)
  if (entry == 0) {
20409e44:	fec42783          	lw	a5,-20(s0)
20409e48:	08079463          	bnez	a5,20409ed0 <TLB_Set+0xc0>
    tlb->entries[tlb->num_pages].addr = data;
20409e4c:	fdc42783          	lw	a5,-36(s0)
20409e50:	0007a703          	lw	a4,0(a5)
20409e54:	fdc42783          	lw	a5,-36(s0)
20409e58:	0087a783          	lw	a5,8(a5)
20409e5c:	00579793          	slli	a5,a5,0x5
20409e60:	00f707b3          	add	a5,a4,a5
20409e64:	fd842703          	lw	a4,-40(s0)
20409e68:	00e7a023          	sw	a4,0(a5)
    tlb->entries[tlb->num_pages].page = *page;
20409e6c:	fdc42783          	lw	a5,-36(s0)
20409e70:	0007a703          	lw	a4,0(a5)
20409e74:	fdc42783          	lw	a5,-36(s0)
20409e78:	0087a783          	lw	a5,8(a5)
20409e7c:	00579793          	slli	a5,a5,0x5
20409e80:	00f707b3          	add	a5,a4,a5
20409e84:	fd442703          	lw	a4,-44(s0)
20409e88:	00072683          	lw	a3,0(a4)
20409e8c:	00d7a423          	sw	a3,8(a5)
20409e90:	00472683          	lw	a3,4(a4)
20409e94:	00d7a623          	sw	a3,12(a5)
20409e98:	00872683          	lw	a3,8(a4)
20409e9c:	00d7a823          	sw	a3,16(a5)
20409ea0:	00c72683          	lw	a3,12(a4)
20409ea4:	00d7aa23          	sw	a3,20(a5)
20409ea8:	01072683          	lw	a3,16(a4)
20409eac:	00d7ac23          	sw	a3,24(a5)
20409eb0:	01472703          	lw	a4,20(a4)
20409eb4:	00e7ae23          	sw	a4,28(a5)
    tlb->num_pages++;
20409eb8:	fdc42783          	lw	a5,-36(s0)
20409ebc:	0087a783          	lw	a5,8(a5)
20409ec0:	00178713          	addi	a4,a5,1
20409ec4:	fdc42783          	lw	a5,-36(s0)
20409ec8:	00e7a423          	sw	a4,8(a5)
  } else {
    entry->addr = data;
    entry->page = *page;
  }
}
20409ecc:	0480006f          	j	20409f14 <TLB_Set+0x104>
    entry->addr = data;
20409ed0:	fec42783          	lw	a5,-20(s0)
20409ed4:	fd842703          	lw	a4,-40(s0)
20409ed8:	00e7a023          	sw	a4,0(a5)
    entry->page = *page;
20409edc:	fec42783          	lw	a5,-20(s0)
20409ee0:	fd442703          	lw	a4,-44(s0)
20409ee4:	00072683          	lw	a3,0(a4)
20409ee8:	00d7a423          	sw	a3,8(a5)
20409eec:	00472683          	lw	a3,4(a4)
20409ef0:	00d7a623          	sw	a3,12(a5)
20409ef4:	00872683          	lw	a3,8(a4)
20409ef8:	00d7a823          	sw	a3,16(a5)
20409efc:	00c72683          	lw	a3,12(a4)
20409f00:	00d7aa23          	sw	a3,20(a5)
20409f04:	01072683          	lw	a3,16(a4)
20409f08:	00d7ac23          	sw	a3,24(a5)
20409f0c:	01472703          	lw	a4,20(a4)
20409f10:	00e7ae23          	sw	a4,28(a5)
}
20409f14:	00000013          	nop
20409f18:	02c12083          	lw	ra,44(sp)
20409f1c:	02812403          	lw	s0,40(sp)
20409f20:	03010113          	addi	sp,sp,48
20409f24:	00008067          	ret

20409f28 <TLB_Find>:

PageEntry* TLB_Find(TLB* tlb, uint8_t* data) {
20409f28:	fd010113          	addi	sp,sp,-48
20409f2c:	02812623          	sw	s0,44(sp)
20409f30:	03010413          	addi	s0,sp,48
20409f34:	fca42e23          	sw	a0,-36(s0)
20409f38:	fcb42c23          	sw	a1,-40(s0)
  PageEntry* entry = 0;
20409f3c:	fe042623          	sw	zero,-20(s0)
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
20409f40:	fe042423          	sw	zero,-24(s0)
20409f44:	04c0006f          	j	20409f90 <TLB_Find+0x68>
    if (tlb->entries[idx].addr == data) {
20409f48:	fdc42783          	lw	a5,-36(s0)
20409f4c:	0007a703          	lw	a4,0(a5)
20409f50:	fe842783          	lw	a5,-24(s0)
20409f54:	00579793          	slli	a5,a5,0x5
20409f58:	00f707b3          	add	a5,a4,a5
20409f5c:	0007a783          	lw	a5,0(a5)
20409f60:	fd842703          	lw	a4,-40(s0)
20409f64:	02f71063          	bne	a4,a5,20409f84 <TLB_Find+0x5c>
      entry = tlb->entries + idx;
20409f68:	fdc42783          	lw	a5,-36(s0)
20409f6c:	0007a703          	lw	a4,0(a5)
20409f70:	fe842783          	lw	a5,-24(s0)
20409f74:	00579793          	slli	a5,a5,0x5
20409f78:	00f707b3          	add	a5,a4,a5
20409f7c:	fef42623          	sw	a5,-20(s0)
      break;
20409f80:	0200006f          	j	20409fa0 <TLB_Find+0x78>
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
20409f84:	fe842783          	lw	a5,-24(s0)
20409f88:	00178793          	addi	a5,a5,1
20409f8c:	fef42423          	sw	a5,-24(s0)
20409f90:	fdc42783          	lw	a5,-36(s0)
20409f94:	0087a783          	lw	a5,8(a5)
20409f98:	fe842703          	lw	a4,-24(s0)
20409f9c:	faf766e3          	bltu	a4,a5,20409f48 <TLB_Find+0x20>
    }
  }
  return entry;
20409fa0:	fec42783          	lw	a5,-20(s0)
}
20409fa4:	00078513          	mv	a0,a5
20409fa8:	02c12403          	lw	s0,44(sp)
20409fac:	03010113          	addi	sp,sp,48
20409fb0:	00008067          	ret

20409fb4 <MultiMap_LowerBound>:

IndexedEntry* MultiMap_LowerBound(struct MultiMap* map, uint32_t npage) {
20409fb4:	fd010113          	addi	sp,sp,-48
20409fb8:	02812623          	sw	s0,44(sp)
20409fbc:	03010413          	addi	s0,sp,48
20409fc0:	fca42e23          	sw	a0,-36(s0)
20409fc4:	fcb42c23          	sw	a1,-40(s0)
  IndexedEntry* entry = 0;
20409fc8:	fe042623          	sw	zero,-20(s0)
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
20409fcc:	fe042423          	sw	zero,-24(s0)
20409fd0:	0740006f          	j	2040a044 <MultiMap_LowerBound+0x90>
    if (map->entries[idx].index >= npage) {
20409fd4:	fdc42783          	lw	a5,-36(s0)
20409fd8:	0007a603          	lw	a2,0(a5)
20409fdc:	fe842783          	lw	a5,-24(s0)
20409fe0:	00579793          	slli	a5,a5,0x5
20409fe4:	00f607b3          	add	a5,a2,a5
20409fe8:	0047a803          	lw	a6,4(a5)
20409fec:	0007a783          	lw	a5,0(a5)
20409ff0:	fd842603          	lw	a2,-40(s0)
20409ff4:	00060693          	mv	a3,a2
20409ff8:	00000713          	li	a4,0
20409ffc:	00070593          	mv	a1,a4
2040a000:	00080613          	mv	a2,a6
2040a004:	02b64a63          	blt	a2,a1,2040a038 <MultiMap_LowerBound+0x84>
2040a008:	00070593          	mv	a1,a4
2040a00c:	00080613          	mv	a2,a6
2040a010:	00c59663          	bne	a1,a2,2040a01c <MultiMap_LowerBound+0x68>
2040a014:	00068613          	mv	a2,a3
2040a018:	02c7e063          	bltu	a5,a2,2040a038 <MultiMap_LowerBound+0x84>
      entry = map->entries + idx;
2040a01c:	fdc42783          	lw	a5,-36(s0)
2040a020:	0007a703          	lw	a4,0(a5)
2040a024:	fe842783          	lw	a5,-24(s0)
2040a028:	00579793          	slli	a5,a5,0x5
2040a02c:	00f707b3          	add	a5,a4,a5
2040a030:	fef42623          	sw	a5,-20(s0)
      break;
2040a034:	0200006f          	j	2040a054 <MultiMap_LowerBound+0xa0>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a038:	fe842783          	lw	a5,-24(s0)
2040a03c:	00178793          	addi	a5,a5,1
2040a040:	fef42423          	sw	a5,-24(s0)
2040a044:	fdc42783          	lw	a5,-36(s0)
2040a048:	0087a783          	lw	a5,8(a5)
2040a04c:	fe842603          	lw	a2,-24(s0)
2040a050:	f8f662e3          	bltu	a2,a5,20409fd4 <MultiMap_LowerBound+0x20>
    }
  }
  return entry;
2040a054:	fec42783          	lw	a5,-20(s0)
}
2040a058:	00078513          	mv	a0,a5
2040a05c:	02c12403          	lw	s0,44(sp)
2040a060:	03010113          	addi	sp,sp,48
2040a064:	00008067          	ret

2040a068 <MultiMap_End>:

IndexedEntry* MultiMap_End(struct MultiMap* map) {
2040a068:	fd010113          	addi	sp,sp,-48
2040a06c:	02812623          	sw	s0,44(sp)
2040a070:	03010413          	addi	s0,sp,48
2040a074:	fca42e23          	sw	a0,-36(s0)
  IndexedEntry* entry = 0;
2040a078:	fe042623          	sw	zero,-20(s0)
  return entry;
2040a07c:	fec42783          	lw	a5,-20(s0)
}
2040a080:	00078513          	mv	a0,a5
2040a084:	02c12403          	lw	s0,44(sp)
2040a088:	03010113          	addi	sp,sp,48
2040a08c:	00008067          	ret

2040a090 <MultiMap_Erase>:

void MultiMap_Erase(struct MultiMap* map, IndexedEntry* entry) {
2040a090:	fd010113          	addi	sp,sp,-48
2040a094:	02812623          	sw	s0,44(sp)
2040a098:	03010413          	addi	s0,sp,48
2040a09c:	fca42e23          	sw	a0,-36(s0)
2040a0a0:	fcb42c23          	sw	a1,-40(s0)
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a0a4:	fe042623          	sw	zero,-20(s0)
2040a0a8:	0e40006f          	j	2040a18c <MultiMap_Erase+0xfc>
    if ((map->entries + idx) == entry) {
2040a0ac:	fdc42783          	lw	a5,-36(s0)
2040a0b0:	0007a703          	lw	a4,0(a5)
2040a0b4:	fec42783          	lw	a5,-20(s0)
2040a0b8:	00579793          	slli	a5,a5,0x5
2040a0bc:	00f707b3          	add	a5,a4,a5
2040a0c0:	fd842703          	lw	a4,-40(s0)
2040a0c4:	0af71e63          	bne	a4,a5,2040a180 <MultiMap_Erase+0xf0>
      // NOTE: do not use memcpy due to overlap.
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
2040a0c8:	fec42783          	lw	a5,-20(s0)
2040a0cc:	00178793          	addi	a5,a5,1
2040a0d0:	fef42423          	sw	a5,-24(s0)
2040a0d4:	0840006f          	j	2040a158 <MultiMap_Erase+0xc8>
        map->entries[src_idx - 1] = map->entries[src_idx];
2040a0d8:	fdc42783          	lw	a5,-36(s0)
2040a0dc:	0007a703          	lw	a4,0(a5)
2040a0e0:	fe842783          	lw	a5,-24(s0)
2040a0e4:	00579793          	slli	a5,a5,0x5
2040a0e8:	00f70733          	add	a4,a4,a5
2040a0ec:	fdc42783          	lw	a5,-36(s0)
2040a0f0:	0007a683          	lw	a3,0(a5)
2040a0f4:	fe842603          	lw	a2,-24(s0)
2040a0f8:	080007b7          	lui	a5,0x8000
2040a0fc:	fff78793          	addi	a5,a5,-1 # 7ffffff <__stack_size+0x7fff7ff>
2040a100:	00f607b3          	add	a5,a2,a5
2040a104:	00579793          	slli	a5,a5,0x5
2040a108:	00f687b3          	add	a5,a3,a5
2040a10c:	00072303          	lw	t1,0(a4)
2040a110:	00472883          	lw	a7,4(a4)
2040a114:	00872803          	lw	a6,8(a4)
2040a118:	00c72503          	lw	a0,12(a4)
2040a11c:	01072583          	lw	a1,16(a4)
2040a120:	01472603          	lw	a2,20(a4)
2040a124:	01872683          	lw	a3,24(a4)
2040a128:	01c72703          	lw	a4,28(a4)
2040a12c:	0067a023          	sw	t1,0(a5)
2040a130:	0117a223          	sw	a7,4(a5)
2040a134:	0107a423          	sw	a6,8(a5)
2040a138:	00a7a623          	sw	a0,12(a5)
2040a13c:	00b7a823          	sw	a1,16(a5)
2040a140:	00c7aa23          	sw	a2,20(a5)
2040a144:	00d7ac23          	sw	a3,24(a5)
2040a148:	00e7ae23          	sw	a4,28(a5)
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
2040a14c:	fe842783          	lw	a5,-24(s0)
2040a150:	00178793          	addi	a5,a5,1
2040a154:	fef42423          	sw	a5,-24(s0)
2040a158:	fdc42783          	lw	a5,-36(s0)
2040a15c:	0087a783          	lw	a5,8(a5)
2040a160:	fe842703          	lw	a4,-24(s0)
2040a164:	f6f76ae3          	bltu	a4,a5,2040a0d8 <MultiMap_Erase+0x48>
      }
      map->num_entries--;
2040a168:	fdc42783          	lw	a5,-36(s0)
2040a16c:	0087a783          	lw	a5,8(a5)
2040a170:	fff78713          	addi	a4,a5,-1
2040a174:	fdc42783          	lw	a5,-36(s0)
2040a178:	00e7a423          	sw	a4,8(a5)
      break;
2040a17c:	0200006f          	j	2040a19c <MultiMap_Erase+0x10c>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a180:	fec42783          	lw	a5,-20(s0)
2040a184:	00178793          	addi	a5,a5,1
2040a188:	fef42623          	sw	a5,-20(s0)
2040a18c:	fdc42783          	lw	a5,-36(s0)
2040a190:	0087a783          	lw	a5,8(a5)
2040a194:	fec42703          	lw	a4,-20(s0)
2040a198:	f0f76ae3          	bltu	a4,a5,2040a0ac <MultiMap_Erase+0x1c>
    }
  }
}
2040a19c:	00000013          	nop
2040a1a0:	02c12403          	lw	s0,44(sp)
2040a1a4:	03010113          	addi	sp,sp,48
2040a1a8:	00008067          	ret

2040a1ac <MultiMap_Insert>:

void MultiMap_Insert(struct MultiMap* map, uint32_t npage, Page* p) {
2040a1ac:	fd010113          	addi	sp,sp,-48
2040a1b0:	02112623          	sw	ra,44(sp)
2040a1b4:	02812423          	sw	s0,40(sp)
2040a1b8:	03010413          	addi	s0,sp,48
2040a1bc:	fca42e23          	sw	a0,-36(s0)
2040a1c0:	fcb42c23          	sw	a1,-40(s0)
2040a1c4:	fcc42a23          	sw	a2,-44(s0)
  CHECK_LE(map->num_entries + 1, map->max_entries, "invalid number of free pages.");
2040a1c8:	fdc42783          	lw	a5,-36(s0)
2040a1cc:	0087a783          	lw	a5,8(a5)
2040a1d0:	00178713          	addi	a4,a5,1
2040a1d4:	fdc42783          	lw	a5,-36(s0)
2040a1d8:	0047a783          	lw	a5,4(a5)
2040a1dc:	02e7fa63          	bleu	a4,a5,2040a210 <MultiMap_Insert+0x64>
2040a1e0:	00017717          	auipc	a4,0x17
2040a1e4:	93870713          	addi	a4,a4,-1736 # 20420b18 <graph_executor_registry_funcs+0x13c>
2040a1e8:	00017697          	auipc	a3,0x17
2040a1ec:	89c68693          	addi	a3,a3,-1892 # 20420a84 <graph_executor_registry_funcs+0xa8>
2040a1f0:	00017617          	auipc	a2,0x17
2040a1f4:	93c60613          	addi	a2,a2,-1732 # 20420b2c <graph_executor_registry_funcs+0x150>
2040a1f8:	07000593          	li	a1,112
2040a1fc:	00017517          	auipc	a0,0x17
2040a200:	94850513          	addi	a0,a0,-1720 # 20420b44 <graph_executor_registry_funcs+0x168>
2040a204:	055030ef          	jal	ra,2040da58 <TVMLogf>
2040a208:	50000513          	li	a0,1280
2040a20c:	f64f60ef          	jal	ra,20400970 <TVMPlatformAbort>
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
2040a210:	fdc42783          	lw	a5,-36(s0)
2040a214:	0087a783          	lw	a5,8(a5)
2040a218:	fef42623          	sw	a5,-20(s0)
2040a21c:	0880006f          	j	2040a2a4 <MultiMap_Insert+0xf8>
    map->entries[map->num_entries].index = npage;
2040a220:	fdc42783          	lw	a5,-36(s0)
2040a224:	0007a703          	lw	a4,0(a5)
2040a228:	fdc42783          	lw	a5,-36(s0)
2040a22c:	0087a783          	lw	a5,8(a5)
2040a230:	00579793          	slli	a5,a5,0x5
2040a234:	00f707b3          	add	a5,a4,a5
2040a238:	fd842703          	lw	a4,-40(s0)
2040a23c:	00070813          	mv	a6,a4
2040a240:	00000893          	li	a7,0
2040a244:	0107a023          	sw	a6,0(a5)
2040a248:	0117a223          	sw	a7,4(a5)
    map->entries[map->num_entries].page = *p;
2040a24c:	fdc42783          	lw	a5,-36(s0)
2040a250:	0007a703          	lw	a4,0(a5)
2040a254:	fdc42783          	lw	a5,-36(s0)
2040a258:	0087a783          	lw	a5,8(a5)
2040a25c:	00579793          	slli	a5,a5,0x5
2040a260:	00f707b3          	add	a5,a4,a5
2040a264:	fd442703          	lw	a4,-44(s0)
2040a268:	00072683          	lw	a3,0(a4)
2040a26c:	00d7a423          	sw	a3,8(a5)
2040a270:	00472683          	lw	a3,4(a4)
2040a274:	00d7a623          	sw	a3,12(a5)
2040a278:	00872683          	lw	a3,8(a4)
2040a27c:	00d7a823          	sw	a3,16(a5)
2040a280:	00c72683          	lw	a3,12(a4)
2040a284:	00d7aa23          	sw	a3,20(a5)
2040a288:	01072683          	lw	a3,16(a4)
2040a28c:	00d7ac23          	sw	a3,24(a5)
2040a290:	01472703          	lw	a4,20(a4)
2040a294:	00e7ae23          	sw	a4,28(a5)
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
2040a298:	fec42783          	lw	a5,-20(s0)
2040a29c:	00178793          	addi	a5,a5,1
2040a2a0:	fef42623          	sw	a5,-20(s0)
2040a2a4:	fdc42783          	lw	a5,-36(s0)
2040a2a8:	0087a703          	lw	a4,8(a5)
2040a2ac:	fd842783          	lw	a5,-40(s0)
2040a2b0:	00f707b3          	add	a5,a4,a5
2040a2b4:	fec42703          	lw	a4,-20(s0)
2040a2b8:	f6f764e3          	bltu	a4,a5,2040a220 <MultiMap_Insert+0x74>
  }
  map->num_entries++;
2040a2bc:	fdc42783          	lw	a5,-36(s0)
2040a2c0:	0087a783          	lw	a5,8(a5)
2040a2c4:	00178713          	addi	a4,a5,1
2040a2c8:	fdc42783          	lw	a5,-36(s0)
2040a2cc:	00e7a423          	sw	a4,8(a5)
}
2040a2d0:	00000013          	nop
2040a2d4:	02c12083          	lw	ra,44(sp)
2040a2d8:	02812403          	lw	s0,40(sp)
2040a2dc:	03010113          	addi	sp,sp,48
2040a2e0:	00008067          	ret

2040a2e4 <PageMemoryManager_Allocate>:
 * \brief Allocate memory from manager
 * \param size The size of memory
 * \return The virtual address
 */
tvm_crt_error_t PageMemoryManager_Allocate(MemoryManagerInterface* interface, size_t num_bytes,
                                           DLDevice dev, void** out_ptr) {
2040a2e4:	f7010113          	addi	sp,sp,-144
2040a2e8:	08112623          	sw	ra,140(sp)
2040a2ec:	08812423          	sw	s0,136(sp)
2040a2f0:	09010413          	addi	s0,sp,144
2040a2f4:	f8a42623          	sw	a0,-116(s0)
2040a2f8:	f8b42423          	sw	a1,-120(s0)
2040a2fc:	f8c42023          	sw	a2,-128(s0)
2040a300:	f8d42223          	sw	a3,-124(s0)
2040a304:	f6e42e23          	sw	a4,-132(s0)
  MemoryManager* mgr = (MemoryManager*)interface;
2040a308:	f8c42783          	lw	a5,-116(s0)
2040a30c:	fef42623          	sw	a5,-20(s0)

  *out_ptr = 0;
2040a310:	f7c42783          	lw	a5,-132(s0)
2040a314:	0007a023          	sw	zero,0(a5)
  PageTable* ptable = &(mgr->ptable);
2040a318:	fec42783          	lw	a5,-20(s0)
2040a31c:	00c78793          	addi	a5,a5,12
2040a320:	fef42423          	sw	a5,-24(s0)
  tvm_index_t npage = (num_bytes + ptable->page_size_bytes - 1) / ptable->page_size_bytes;
2040a324:	fe842783          	lw	a5,-24(s0)
2040a328:	0047a703          	lw	a4,4(a5)
2040a32c:	f8842783          	lw	a5,-120(s0)
2040a330:	00f707b3          	add	a5,a4,a5
2040a334:	fff78713          	addi	a4,a5,-1
2040a338:	fe842783          	lw	a5,-24(s0)
2040a33c:	0047a783          	lw	a5,4(a5)
2040a340:	00078593          	mv	a1,a5
2040a344:	00070513          	mv	a0,a4
2040a348:	4a0150ef          	jal	ra,2041f7e8 <__udivsi3>
2040a34c:	00050793          	mv	a5,a0
2040a350:	fef42023          	sw	a5,-32(s0)
2040a354:	fe042223          	sw	zero,-28(s0)

  MultiMap* free_map = &(mgr->free_map);
2040a358:	fec42783          	lw	a5,-20(s0)
2040a35c:	03878793          	addi	a5,a5,56
2040a360:	fcf42e23          	sw	a5,-36(s0)
  IndexedEntry* it = free_map->lower_bound(free_map, npage);
2040a364:	fdc42783          	lw	a5,-36(s0)
2040a368:	00c7a703          	lw	a4,12(a5)
2040a36c:	fe042783          	lw	a5,-32(s0)
2040a370:	00078593          	mv	a1,a5
2040a374:	fdc42503          	lw	a0,-36(s0)
2040a378:	000700e7          	jalr	a4
2040a37c:	fca42c23          	sw	a0,-40(s0)
  tvm_index_t start = 0;
2040a380:	00000793          	li	a5,0
2040a384:	00000813          	li	a6,0
2040a388:	fcf42823          	sw	a5,-48(s0)
2040a38c:	fd042a23          	sw	a6,-44(s0)
  if (it != free_map->end(free_map)) {
2040a390:	fdc42783          	lw	a5,-36(s0)
2040a394:	0107a783          	lw	a5,16(a5)
2040a398:	fdc42503          	lw	a0,-36(s0)
2040a39c:	000780e7          	jalr	a5
2040a3a0:	00050713          	mv	a4,a0
2040a3a4:	fd842783          	lw	a5,-40(s0)
2040a3a8:	06e78e63          	beq	a5,a4,2040a424 <PageMemoryManager_Allocate+0x140>
    Page p = it->page;
2040a3ac:	fd842783          	lw	a5,-40(s0)
2040a3b0:	0087a703          	lw	a4,8(a5)
2040a3b4:	fae42823          	sw	a4,-80(s0)
2040a3b8:	00c7a703          	lw	a4,12(a5)
2040a3bc:	fae42a23          	sw	a4,-76(s0)
2040a3c0:	0107a703          	lw	a4,16(a5)
2040a3c4:	fae42c23          	sw	a4,-72(s0)
2040a3c8:	0147a703          	lw	a4,20(a5)
2040a3cc:	fae42e23          	sw	a4,-68(s0)
2040a3d0:	0187a703          	lw	a4,24(a5)
2040a3d4:	fce42023          	sw	a4,-64(s0)
2040a3d8:	01c7a783          	lw	a5,28(a5)
2040a3dc:	fcf42223          	sw	a5,-60(s0)
    free_map->erase(free_map, it);
2040a3e0:	fdc42783          	lw	a5,-36(s0)
2040a3e4:	0147a783          	lw	a5,20(a5)
2040a3e8:	fd842583          	lw	a1,-40(s0)
2040a3ec:	fdc42503          	lw	a0,-36(s0)
2040a3f0:	000780e7          	jalr	a5
    *out_ptr = p.data;
2040a3f4:	fc042703          	lw	a4,-64(s0)
2040a3f8:	f7c42783          	lw	a5,-132(s0)
2040a3fc:	00e7a023          	sw	a4,0(a5)
    start = p.ptable_begin;
2040a400:	fb042783          	lw	a5,-80(s0)
2040a404:	fb442803          	lw	a6,-76(s0)
2040a408:	fcf42823          	sw	a5,-48(s0)
2040a40c:	fd042a23          	sw	a6,-44(s0)
    npage = p.num_pages;
2040a410:	fb842783          	lw	a5,-72(s0)
2040a414:	fbc42803          	lw	a6,-68(s0)
2040a418:	fef42023          	sw	a5,-32(s0)
2040a41c:	ff042223          	sw	a6,-28(s0)
2040a420:	0c00006f          	j	2040a4e0 <PageMemoryManager_Allocate+0x1fc>
  } else {
    start = ptable->num_pages;
2040a424:	fe842783          	lw	a5,-24(s0)
2040a428:	0107a783          	lw	a5,16(a5)
2040a42c:	fcf42823          	sw	a5,-48(s0)
2040a430:	fc042a23          	sw	zero,-44(s0)
    if ((unsigned)(start + npage) > ptable->max_pages) {
2040a434:	fd042703          	lw	a4,-48(s0)
2040a438:	fe042783          	lw	a5,-32(s0)
2040a43c:	00f70733          	add	a4,a4,a5
2040a440:	fe842783          	lw	a5,-24(s0)
2040a444:	00c7a783          	lw	a5,12(a5)
2040a448:	00e7f663          	bleu	a4,a5,2040a454 <PageMemoryManager_Allocate+0x170>
#if TVM_CRT_DEBUG > 1
      TVMLogf("insufficient memory, start=%" PRId32 ", npage=%" PRId32 ", total=%" PRId32 " / %zu",
              (int32_t)start, (int32_t)npage, (int32_t)(start + npage), mgr->pmap.max_pages);
#endif
      return kTvmErrorPlatformNoMemory;
2040a44c:	50300793          	li	a5,1283
2040a450:	0a80006f          	j	2040a4f8 <PageMemoryManager_Allocate+0x214>
    }
    /* insert page entry */
    Page p = PageCreate(ptable->memory_pool, ptable->page_size_bytes, start, npage);
2040a454:	fe842783          	lw	a5,-24(s0)
2040a458:	0007a583          	lw	a1,0(a5)
2040a45c:	fe842783          	lw	a5,-24(s0)
2040a460:	0047a603          	lw	a2,4(a5)
2040a464:	f9840513          	addi	a0,s0,-104
2040a468:	fe042783          	lw	a5,-32(s0)
2040a46c:	fe442803          	lw	a6,-28(s0)
2040a470:	fd042683          	lw	a3,-48(s0)
2040a474:	fd442703          	lw	a4,-44(s0)
2040a478:	fd8ff0ef          	jal	ra,20409c50 <PageCreate>
    ptable->resize(ptable, start + npage, &p);
2040a47c:	fe842783          	lw	a5,-24(s0)
2040a480:	0147a683          	lw	a3,20(a5)
2040a484:	fd042703          	lw	a4,-48(s0)
2040a488:	fe042783          	lw	a5,-32(s0)
2040a48c:	00f707b3          	add	a5,a4,a5
2040a490:	f9840713          	addi	a4,s0,-104
2040a494:	00070613          	mv	a2,a4
2040a498:	00078593          	mv	a1,a5
2040a49c:	fe842503          	lw	a0,-24(s0)
2040a4a0:	000680e7          	jalr	a3
    *out_ptr = p.data;
2040a4a4:	fa842703          	lw	a4,-88(s0)
2040a4a8:	f7c42783          	lw	a5,-132(s0)
2040a4ac:	00e7a023          	sw	a4,0(a5)
    TLB* pmap = &(mgr->pmap);
2040a4b0:	fec42783          	lw	a5,-20(s0)
2040a4b4:	02478793          	addi	a5,a5,36
2040a4b8:	fcf42623          	sw	a5,-52(s0)
    pmap->set(pmap, *out_ptr, &p);
2040a4bc:	fcc42783          	lw	a5,-52(s0)
2040a4c0:	00c7a683          	lw	a3,12(a5)
2040a4c4:	f7c42783          	lw	a5,-132(s0)
2040a4c8:	0007a783          	lw	a5,0(a5)
2040a4cc:	f9840713          	addi	a4,s0,-104
2040a4d0:	00070613          	mv	a2,a4
2040a4d4:	00078593          	mv	a1,a5
2040a4d8:	fcc42503          	lw	a0,-52(s0)
2040a4dc:	000680e7          	jalr	a3
  }
  mgr->interface.vleak_size++;
2040a4e0:	fec42783          	lw	a5,-20(s0)
2040a4e4:	0087a783          	lw	a5,8(a5)
2040a4e8:	00178713          	addi	a4,a5,1
2040a4ec:	fec42783          	lw	a5,-20(s0)
2040a4f0:	00e7a423          	sw	a4,8(a5)
#if TVM_CRT_DEBUG > 1
  TVMLogf("allocate: addr=%p, start=%" PRId64 "/%zu, npage=%" PRId64 ", vleak=%d\n", data, start,
          ptable->max_pages, npage, mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
2040a4f4:	00000793          	li	a5,0
}
2040a4f8:	00078513          	mv	a0,a5
2040a4fc:	08c12083          	lw	ra,140(sp)
2040a500:	08812403          	lw	s0,136(sp)
2040a504:	09010113          	addi	sp,sp,144
2040a508:	00008067          	ret

2040a50c <PageMemoryManager_Realloc>:
 * \param ptr Pointer holding a pointer to the memory area to be reallocated
 * \param num_bytes The size of memory now required.
 * \return kTvmErrorNoError on success.
 */
tvm_crt_error_t PageMemoryManager_Realloc(MemoryManagerInterface* interface, void** ptr,
                                          tvm_index_t num_bytes) {
2040a50c:	f5010113          	addi	sp,sp,-176
2040a510:	0a112623          	sw	ra,172(sp)
2040a514:	0a812423          	sw	s0,168(sp)
2040a518:	0b010413          	addi	s0,sp,176
2040a51c:	f4a42e23          	sw	a0,-164(s0)
2040a520:	f4b42c23          	sw	a1,-168(s0)
2040a524:	f4c42823          	sw	a2,-176(s0)
2040a528:	f4d42a23          	sw	a3,-172(s0)
  MemoryManager* mgr = (MemoryManager*)interface;
2040a52c:	f5c42783          	lw	a5,-164(s0)
2040a530:	fef42423          	sw	a5,-24(s0)

  uint8_t* data = *((uint8_t**)ptr);  // NOLINT(*)
2040a534:	f5842783          	lw	a5,-168(s0)
2040a538:	0007a783          	lw	a5,0(a5)
2040a53c:	fef42623          	sw	a5,-20(s0)
  PageTable* ptable = &(mgr->ptable);
2040a540:	fe842783          	lw	a5,-24(s0)
2040a544:	00c78793          	addi	a5,a5,12
2040a548:	fef42223          	sw	a5,-28(s0)
  TLB* pmap = &(mgr->pmap);
2040a54c:	fe842783          	lw	a5,-24(s0)
2040a550:	02478793          	addi	a5,a5,36
2040a554:	fef42023          	sw	a5,-32(s0)
  MultiMap* free_map = &(mgr->free_map);
2040a558:	fe842783          	lw	a5,-24(s0)
2040a55c:	03878793          	addi	a5,a5,56
2040a560:	fcf42e23          	sw	a5,-36(s0)
  tvm_index_t start = 0;
2040a564:	00000793          	li	a5,0
2040a568:	00000813          	li	a6,0
2040a56c:	fcf42823          	sw	a5,-48(s0)
2040a570:	fd042a23          	sw	a6,-44(s0)
  tvm_index_t npage = (num_bytes + ptable->page_size_bytes - 1) / ptable->page_size_bytes;
2040a574:	fe442783          	lw	a5,-28(s0)
2040a578:	0047a783          	lw	a5,4(a5)
2040a57c:	00078313          	mv	t1,a5
2040a580:	00000393          	li	t2,0
2040a584:	f5042683          	lw	a3,-176(s0)
2040a588:	f5442703          	lw	a4,-172(s0)
2040a58c:	00d307b3          	add	a5,t1,a3
2040a590:	00078613          	mv	a2,a5
2040a594:	00663633          	sltu	a2,a2,t1
2040a598:	00e38833          	add	a6,t2,a4
2040a59c:	01060733          	add	a4,a2,a6
2040a5a0:	00070813          	mv	a6,a4
2040a5a4:	00078693          	mv	a3,a5
2040a5a8:	00080713          	mv	a4,a6
2040a5ac:	fff00593          	li	a1,-1
2040a5b0:	fff00613          	li	a2,-1
2040a5b4:	00b687b3          	add	a5,a3,a1
2040a5b8:	00078513          	mv	a0,a5
2040a5bc:	00d53533          	sltu	a0,a0,a3
2040a5c0:	00c70833          	add	a6,a4,a2
2040a5c4:	01050733          	add	a4,a0,a6
2040a5c8:	00070813          	mv	a6,a4
2040a5cc:	00078513          	mv	a0,a5
2040a5d0:	00080593          	mv	a1,a6
2040a5d4:	fe442783          	lw	a5,-28(s0)
2040a5d8:	0047a783          	lw	a5,4(a5)
2040a5dc:	00078e13          	mv	t3,a5
2040a5e0:	00000e93          	li	t4,0
2040a5e4:	000e0613          	mv	a2,t3
2040a5e8:	000e8693          	mv	a3,t4
2040a5ec:	348110ef          	jal	ra,2041b934 <__divdi3>
2040a5f0:	00050793          	mv	a5,a0
2040a5f4:	00058813          	mv	a6,a1
2040a5f8:	fcf42423          	sw	a5,-56(s0)
2040a5fc:	fd042623          	sw	a6,-52(s0)
  if (ptr) {
2040a600:	f5842783          	lw	a5,-168(s0)
2040a604:	26078263          	beqz	a5,2040a868 <PageMemoryManager_Realloc+0x35c>
    // get page size for given pointer
    CHECK_NE(pmap->num_pages, 0, "invalid translation look-aside buffer.");
2040a608:	fe042783          	lw	a5,-32(s0)
2040a60c:	0087a783          	lw	a5,8(a5)
2040a610:	02079a63          	bnez	a5,2040a644 <PageMemoryManager_Realloc+0x138>
2040a614:	00016717          	auipc	a4,0x16
2040a618:	59870713          	addi	a4,a4,1432 # 20420bac <graph_executor_registry_funcs+0x1d0>
2040a61c:	00016697          	auipc	a3,0x16
2040a620:	59468693          	addi	a3,a3,1428 # 20420bb0 <graph_executor_registry_funcs+0x1d4>
2040a624:	00016617          	auipc	a2,0x16
2040a628:	59060613          	addi	a2,a2,1424 # 20420bb4 <graph_executor_registry_funcs+0x1d8>
2040a62c:	0b800593          	li	a1,184
2040a630:	00016517          	auipc	a0,0x16
2040a634:	59450513          	addi	a0,a0,1428 # 20420bc4 <graph_executor_registry_funcs+0x1e8>
2040a638:	420030ef          	jal	ra,2040da58 <TVMLogf>
2040a63c:	50000513          	li	a0,1280
2040a640:	b30f60ef          	jal	ra,20400970 <TVMPlatformAbort>
    PageEntry* entry = pmap->find(pmap, (uint8_t*)ptr);  // NOLINT(*)
2040a644:	fe042783          	lw	a5,-32(s0)
2040a648:	0107a783          	lw	a5,16(a5)
2040a64c:	f5842583          	lw	a1,-168(s0)
2040a650:	fe042503          	lw	a0,-32(s0)
2040a654:	000780e7          	jalr	a5
2040a658:	faa42c23          	sw	a0,-72(s0)
    CHECK_NE(entry, 0, "no valid page entry found.");
2040a65c:	fb842783          	lw	a5,-72(s0)
2040a660:	02079a63          	bnez	a5,2040a694 <PageMemoryManager_Realloc+0x188>
2040a664:	00016717          	auipc	a4,0x16
2040a668:	54870713          	addi	a4,a4,1352 # 20420bac <graph_executor_registry_funcs+0x1d0>
2040a66c:	00016697          	auipc	a3,0x16
2040a670:	54468693          	addi	a3,a3,1348 # 20420bb0 <graph_executor_registry_funcs+0x1d4>
2040a674:	00016617          	auipc	a2,0x16
2040a678:	5c060613          	addi	a2,a2,1472 # 20420c34 <graph_executor_registry_funcs+0x258>
2040a67c:	0ba00593          	li	a1,186
2040a680:	00016517          	auipc	a0,0x16
2040a684:	5bc50513          	addi	a0,a0,1468 # 20420c3c <graph_executor_registry_funcs+0x260>
2040a688:	3d0030ef          	jal	ra,2040da58 <TVMLogf>
2040a68c:	50000513          	li	a0,1280
2040a690:	ae0f60ef          	jal	ra,20400970 <TVMPlatformAbort>
    Page* pptr = &(entry->page);
2040a694:	fb842783          	lw	a5,-72(s0)
2040a698:	00878793          	addi	a5,a5,8
2040a69c:	faf42a23          	sw	a5,-76(s0)
    // if the page size is smaller than target page size,
    // try allocate new space
    if (pptr->num_pages < npage) {
2040a6a0:	fb442783          	lw	a5,-76(s0)
2040a6a4:	00c7a803          	lw	a6,12(a5)
2040a6a8:	0087a783          	lw	a5,8(a5)
2040a6ac:	fcc42703          	lw	a4,-52(s0)
2040a6b0:	00080693          	mv	a3,a6
2040a6b4:	00e6cc63          	blt	a3,a4,2040a6cc <PageMemoryManager_Realloc+0x1c0>
2040a6b8:	fcc42703          	lw	a4,-52(s0)
2040a6bc:	00080693          	mv	a3,a6
2040a6c0:	18d71863          	bne	a4,a3,2040a850 <PageMemoryManager_Realloc+0x344>
2040a6c4:	fc842703          	lw	a4,-56(s0)
2040a6c8:	18e7f463          	bleu	a4,a5,2040a850 <PageMemoryManager_Realloc+0x344>
      // TODO(liangfu): found out whether we can extend current entry
      //
      // insert new page entry
      IndexedEntry* it = free_map->lower_bound(free_map, npage);
2040a6cc:	fdc42783          	lw	a5,-36(s0)
2040a6d0:	00c7a703          	lw	a4,12(a5)
2040a6d4:	fc842783          	lw	a5,-56(s0)
2040a6d8:	00078593          	mv	a1,a5
2040a6dc:	fdc42503          	lw	a0,-36(s0)
2040a6e0:	000700e7          	jalr	a4
2040a6e4:	faa42823          	sw	a0,-80(s0)
      if (it != free_map->end(free_map)) {
2040a6e8:	fdc42783          	lw	a5,-36(s0)
2040a6ec:	0107a783          	lw	a5,16(a5)
2040a6f0:	fdc42503          	lw	a0,-36(s0)
2040a6f4:	000780e7          	jalr	a5
2040a6f8:	00050713          	mv	a4,a0
2040a6fc:	fb042783          	lw	a5,-80(s0)
2040a700:	04e78863          	beq	a5,a4,2040a750 <PageMemoryManager_Realloc+0x244>
        data = it->page.data;
2040a704:	fb042783          	lw	a5,-80(s0)
2040a708:	0187a783          	lw	a5,24(a5)
2040a70c:	fef42623          	sw	a5,-20(s0)
        start = it->page.ptable_begin;
2040a710:	fb042783          	lw	a5,-80(s0)
2040a714:	00c7a803          	lw	a6,12(a5)
2040a718:	0087a783          	lw	a5,8(a5)
2040a71c:	fcf42823          	sw	a5,-48(s0)
2040a720:	fd042a23          	sw	a6,-44(s0)
        npage = it->page.num_pages;
2040a724:	fb042783          	lw	a5,-80(s0)
2040a728:	0147a803          	lw	a6,20(a5)
2040a72c:	0107a783          	lw	a5,16(a5)
2040a730:	fcf42423          	sw	a5,-56(s0)
2040a734:	fd042623          	sw	a6,-52(s0)
        free_map->erase(free_map, it);
2040a738:	fdc42783          	lw	a5,-36(s0)
2040a73c:	0147a783          	lw	a5,20(a5)
2040a740:	fb042583          	lw	a1,-80(s0)
2040a744:	fdc42503          	lw	a0,-36(s0)
2040a748:	000780e7          	jalr	a5
2040a74c:	0a80006f          	j	2040a7f4 <PageMemoryManager_Realloc+0x2e8>
      } else {
        start = ptable->num_pages;
2040a750:	fe442783          	lw	a5,-28(s0)
2040a754:	0107a783          	lw	a5,16(a5)
2040a758:	fcf42823          	sw	a5,-48(s0)
2040a75c:	fc042a23          	sw	zero,-44(s0)
        if ((unsigned)(start + npage) > ptable->max_pages) {
2040a760:	fd042703          	lw	a4,-48(s0)
2040a764:	fc842783          	lw	a5,-56(s0)
2040a768:	00f70733          	add	a4,a4,a5
2040a76c:	fe442783          	lw	a5,-28(s0)
2040a770:	00c7a783          	lw	a5,12(a5)
2040a774:	00e7f663          	bleu	a4,a5,2040a780 <PageMemoryManager_Realloc+0x274>
#if TVM_CRT_DEBUG > 1
          TVMLogf("insufficient memory, start=%" PRId64 ", npage=%" PRId64 ", total=%" PRId64 "",
                  start, npage, start + npage);
#endif
          return kTvmErrorPlatformNoMemory;
2040a778:	50300793          	li	a5,1283
2040a77c:	2640006f          	j	2040a9e0 <PageMemoryManager_Realloc+0x4d4>
        }
        Page p = PageCreate(mgr->ptable.memory_pool, mgr->ptable.page_size_bytes, start, npage);
2040a780:	fe842783          	lw	a5,-24(s0)
2040a784:	00c7a583          	lw	a1,12(a5)
2040a788:	fe842783          	lw	a5,-24(s0)
2040a78c:	0107a603          	lw	a2,16(a5)
2040a790:	f9840513          	addi	a0,s0,-104
2040a794:	fc842783          	lw	a5,-56(s0)
2040a798:	fcc42803          	lw	a6,-52(s0)
2040a79c:	fd042683          	lw	a3,-48(s0)
2040a7a0:	fd442703          	lw	a4,-44(s0)
2040a7a4:	cacff0ef          	jal	ra,20409c50 <PageCreate>
        ptable->resize(ptable, start + npage, &p);
2040a7a8:	fe442783          	lw	a5,-28(s0)
2040a7ac:	0147a683          	lw	a3,20(a5)
2040a7b0:	fd042703          	lw	a4,-48(s0)
2040a7b4:	fc842783          	lw	a5,-56(s0)
2040a7b8:	00f707b3          	add	a5,a4,a5
2040a7bc:	f9840713          	addi	a4,s0,-104
2040a7c0:	00070613          	mv	a2,a4
2040a7c4:	00078593          	mv	a1,a5
2040a7c8:	fe442503          	lw	a0,-28(s0)
2040a7cc:	000680e7          	jalr	a3
        data = p.data;
2040a7d0:	fa842783          	lw	a5,-88(s0)
2040a7d4:	fef42623          	sw	a5,-20(s0)
        pmap->set(pmap, data, &p);
2040a7d8:	fe042783          	lw	a5,-32(s0)
2040a7dc:	00c7a703          	lw	a4,12(a5)
2040a7e0:	f9840793          	addi	a5,s0,-104
2040a7e4:	00078613          	mv	a2,a5
2040a7e8:	fec42583          	lw	a1,-20(s0)
2040a7ec:	fe042503          	lw	a0,-32(s0)
2040a7f0:	000700e7          	jalr	a4
      }
      // copy previous data to the new entry
      memcpy(data, ptr, ptable->page_size_bytes * pptr->num_pages);
2040a7f4:	fe442783          	lw	a5,-28(s0)
2040a7f8:	0047a703          	lw	a4,4(a5)
2040a7fc:	fb442783          	lw	a5,-76(s0)
2040a800:	00c7a803          	lw	a6,12(a5)
2040a804:	0087a783          	lw	a5,8(a5)
2040a808:	00078593          	mv	a1,a5
2040a80c:	00070513          	mv	a0,a4
2040a810:	75d140ef          	jal	ra,2041f76c <__mulsi3>
2040a814:	00050793          	mv	a5,a0
2040a818:	00078613          	mv	a2,a5
2040a81c:	f5842583          	lw	a1,-168(s0)
2040a820:	fec42503          	lw	a0,-20(s0)
2040a824:	7cc080ef          	jal	ra,20412ff0 <memcpy>
      // release memory
      free_map->insert(free_map, pptr->num_pages, pptr);
2040a828:	fdc42783          	lw	a5,-36(s0)
2040a82c:	0187a703          	lw	a4,24(a5)
2040a830:	fb442783          	lw	a5,-76(s0)
2040a834:	00c7a803          	lw	a6,12(a5)
2040a838:	0087a783          	lw	a5,8(a5)
2040a83c:	fb442603          	lw	a2,-76(s0)
2040a840:	00078593          	mv	a1,a5
2040a844:	fdc42503          	lw	a0,-36(s0)
2040a848:	000700e7          	jalr	a4
2040a84c:	1900006f          	j	2040a9dc <PageMemoryManager_Realloc+0x4d0>
    } else {
      start = pptr->ptable_begin;
2040a850:	fb442783          	lw	a5,-76(s0)
2040a854:	0047a803          	lw	a6,4(a5)
2040a858:	0007a783          	lw	a5,0(a5)
2040a85c:	fcf42823          	sw	a5,-48(s0)
2040a860:	fd042a23          	sw	a6,-44(s0)
2040a864:	1780006f          	j	2040a9dc <PageMemoryManager_Realloc+0x4d0>
    }
  } else {
    IndexedEntry* it = free_map->lower_bound(free_map, npage);
2040a868:	fdc42783          	lw	a5,-36(s0)
2040a86c:	00c7a703          	lw	a4,12(a5)
2040a870:	fc842783          	lw	a5,-56(s0)
2040a874:	00078593          	mv	a1,a5
2040a878:	fdc42503          	lw	a0,-36(s0)
2040a87c:	000700e7          	jalr	a4
2040a880:	fca42223          	sw	a0,-60(s0)
    if (it != free_map->end(free_map)) {
2040a884:	fdc42783          	lw	a5,-36(s0)
2040a888:	0107a783          	lw	a5,16(a5)
2040a88c:	fdc42503          	lw	a0,-36(s0)
2040a890:	000780e7          	jalr	a5
2040a894:	00050713          	mv	a4,a0
2040a898:	fc442783          	lw	a5,-60(s0)
2040a89c:	06e78c63          	beq	a5,a4,2040a914 <PageMemoryManager_Realloc+0x408>
      Page p = it->page;
2040a8a0:	fc442783          	lw	a5,-60(s0)
2040a8a4:	0087a703          	lw	a4,8(a5)
2040a8a8:	f8e42023          	sw	a4,-128(s0)
2040a8ac:	00c7a703          	lw	a4,12(a5)
2040a8b0:	f8e42223          	sw	a4,-124(s0)
2040a8b4:	0107a703          	lw	a4,16(a5)
2040a8b8:	f8e42423          	sw	a4,-120(s0)
2040a8bc:	0147a703          	lw	a4,20(a5)
2040a8c0:	f8e42623          	sw	a4,-116(s0)
2040a8c4:	0187a703          	lw	a4,24(a5)
2040a8c8:	f8e42823          	sw	a4,-112(s0)
2040a8cc:	01c7a783          	lw	a5,28(a5)
2040a8d0:	f8f42a23          	sw	a5,-108(s0)
      free_map->erase(free_map, it);
2040a8d4:	fdc42783          	lw	a5,-36(s0)
2040a8d8:	0147a783          	lw	a5,20(a5)
2040a8dc:	fc442583          	lw	a1,-60(s0)
2040a8e0:	fdc42503          	lw	a0,-36(s0)
2040a8e4:	000780e7          	jalr	a5
      data = p.data;
2040a8e8:	f9042783          	lw	a5,-112(s0)
2040a8ec:	fef42623          	sw	a5,-20(s0)
      start = p.ptable_begin;
2040a8f0:	f8042783          	lw	a5,-128(s0)
2040a8f4:	f8442803          	lw	a6,-124(s0)
2040a8f8:	fcf42823          	sw	a5,-48(s0)
2040a8fc:	fd042a23          	sw	a6,-44(s0)
      npage = p.num_pages;
2040a900:	f8842783          	lw	a5,-120(s0)
2040a904:	f8c42803          	lw	a6,-116(s0)
2040a908:	fcf42423          	sw	a5,-56(s0)
2040a90c:	fd042623          	sw	a6,-52(s0)
2040a910:	0cc0006f          	j	2040a9dc <PageMemoryManager_Realloc+0x4d0>
    } else {
      PageTable* ptable = &(mgr->ptable);
2040a914:	fe842783          	lw	a5,-24(s0)
2040a918:	00c78793          	addi	a5,a5,12
2040a91c:	fcf42023          	sw	a5,-64(s0)
      start = ptable->num_pages;
2040a920:	fc042783          	lw	a5,-64(s0)
2040a924:	0107a783          	lw	a5,16(a5)
2040a928:	fcf42823          	sw	a5,-48(s0)
2040a92c:	fc042a23          	sw	zero,-44(s0)
      if ((unsigned)(start + npage) > ptable->max_pages) {
2040a930:	fd042703          	lw	a4,-48(s0)
2040a934:	fc842783          	lw	a5,-56(s0)
2040a938:	00f70733          	add	a4,a4,a5
2040a93c:	fc042783          	lw	a5,-64(s0)
2040a940:	00c7a783          	lw	a5,12(a5)
2040a944:	08e7f263          	bleu	a4,a5,2040a9c8 <PageMemoryManager_Realloc+0x4bc>
#if TVM_CRT_DEBUG > 1
        TVMLogf("insufficient memory, start=%" PRId64 ", npage=%" PRId64 ", total=%" PRId64 "",
                start, npage, start + npage);
#endif
        /* insert page entry */
        Page p = PageCreate(mgr->ptable.memory_pool, mgr->ptable.page_size_bytes, start, npage);
2040a948:	fe842783          	lw	a5,-24(s0)
2040a94c:	00c7a583          	lw	a1,12(a5)
2040a950:	fe842783          	lw	a5,-24(s0)
2040a954:	0107a603          	lw	a2,16(a5)
2040a958:	f6840513          	addi	a0,s0,-152
2040a95c:	fc842783          	lw	a5,-56(s0)
2040a960:	fcc42803          	lw	a6,-52(s0)
2040a964:	fd042683          	lw	a3,-48(s0)
2040a968:	fd442703          	lw	a4,-44(s0)
2040a96c:	ae4ff0ef          	jal	ra,20409c50 <PageCreate>
        ptable->resize(ptable, start + npage, &p);
2040a970:	fc042783          	lw	a5,-64(s0)
2040a974:	0147a683          	lw	a3,20(a5)
2040a978:	fd042703          	lw	a4,-48(s0)
2040a97c:	fc842783          	lw	a5,-56(s0)
2040a980:	00f707b3          	add	a5,a4,a5
2040a984:	f6840713          	addi	a4,s0,-152
2040a988:	00070613          	mv	a2,a4
2040a98c:	00078593          	mv	a1,a5
2040a990:	fc042503          	lw	a0,-64(s0)
2040a994:	000680e7          	jalr	a3
        data = p.data;
2040a998:	f7842783          	lw	a5,-136(s0)
2040a99c:	fef42623          	sw	a5,-20(s0)
        TLB* pmap = &(mgr->pmap);
2040a9a0:	fe842783          	lw	a5,-24(s0)
2040a9a4:	02478793          	addi	a5,a5,36
2040a9a8:	faf42e23          	sw	a5,-68(s0)
        pmap->set(pmap, data, &p);
2040a9ac:	fbc42783          	lw	a5,-68(s0)
2040a9b0:	00c7a703          	lw	a4,12(a5)
2040a9b4:	f6840793          	addi	a5,s0,-152
2040a9b8:	00078613          	mv	a2,a5
2040a9bc:	fec42583          	lw	a1,-20(s0)
2040a9c0:	fbc42503          	lw	a0,-68(s0)
2040a9c4:	000700e7          	jalr	a4
      }
      mgr->interface.vleak_size++;
2040a9c8:	fe842783          	lw	a5,-24(s0)
2040a9cc:	0087a783          	lw	a5,8(a5)
2040a9d0:	00178713          	addi	a4,a5,1
2040a9d4:	fe842783          	lw	a5,-24(s0)
2040a9d8:	00e7a423          	sw	a4,8(a5)
  }
#if TVM_CRT_DEBUG > 1
  TVMLogf("reallocate: addr=%p, start=%" PRId64 "/%zu, npage=%" PRId64 ", vleak=%d, size=%zu", data,
          start, mgr->ptable.max_pages, npage, mgr->interface.vleak_size, size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
2040a9dc:	00000793          	li	a5,0
}
2040a9e0:	00078513          	mv	a0,a5
2040a9e4:	0ac12083          	lw	ra,172(sp)
2040a9e8:	0a812403          	lw	s0,168(sp)
2040a9ec:	0b010113          	addi	sp,sp,176
2040a9f0:	00008067          	ret

2040a9f4 <PageMemoryManager_Free>:
 * \param interface Pointer to this structure.
 * \param ptr A pointer returned from TVMPlatformMemoryAllocate which should be free'd.
 * \param dev Execution device passed to TVMPlatformMemoryAllocate. Fixed to {kDLCPU, 0}.
 * \return kTvmErrorNoError if successful; a descriptive error code otherwise.
 */
tvm_crt_error_t PageMemoryManager_Free(MemoryManagerInterface* interface, void* ptr, DLDevice dev) {
2040a9f4:	fc010113          	addi	sp,sp,-64
2040a9f8:	02112e23          	sw	ra,60(sp)
2040a9fc:	02812c23          	sw	s0,56(sp)
2040aa00:	04010413          	addi	s0,sp,64
2040aa04:	fca42623          	sw	a0,-52(s0)
2040aa08:	fcb42423          	sw	a1,-56(s0)
2040aa0c:	fcc42023          	sw	a2,-64(s0)
2040aa10:	fcd42223          	sw	a3,-60(s0)
  MemoryManager* mgr = (MemoryManager*)interface;
2040aa14:	fcc42783          	lw	a5,-52(s0)
2040aa18:	fef42623          	sw	a5,-20(s0)

  TLB* pmap = &(mgr->pmap);
2040aa1c:	fec42783          	lw	a5,-20(s0)
2040aa20:	02478793          	addi	a5,a5,36
2040aa24:	fef42423          	sw	a5,-24(s0)
  CHECK_NE(pmap->num_pages, 0, "invalid translation look-aside buffer.");
2040aa28:	fe842783          	lw	a5,-24(s0)
2040aa2c:	0087a783          	lw	a5,8(a5)
2040aa30:	02079a63          	bnez	a5,2040aa64 <PageMemoryManager_Free+0x70>
2040aa34:	00016717          	auipc	a4,0x16
2040aa38:	17870713          	addi	a4,a4,376 # 20420bac <graph_executor_registry_funcs+0x1d0>
2040aa3c:	00016697          	auipc	a3,0x16
2040aa40:	17468693          	addi	a3,a3,372 # 20420bb0 <graph_executor_registry_funcs+0x1d4>
2040aa44:	00016617          	auipc	a2,0x16
2040aa48:	17060613          	addi	a2,a2,368 # 20420bb4 <graph_executor_registry_funcs+0x1d8>
2040aa4c:	10900593          	li	a1,265
2040aa50:	00016517          	auipc	a0,0x16
2040aa54:	17450513          	addi	a0,a0,372 # 20420bc4 <graph_executor_registry_funcs+0x1e8>
2040aa58:	000030ef          	jal	ra,2040da58 <TVMLogf>
2040aa5c:	50000513          	li	a0,1280
2040aa60:	f11f50ef          	jal	ra,20400970 <TVMPlatformAbort>
  PageEntry* entry = pmap->find(pmap, (uint8_t*)ptr);  // NOLINT(*)
2040aa64:	fe842783          	lw	a5,-24(s0)
2040aa68:	0107a783          	lw	a5,16(a5)
2040aa6c:	fc842583          	lw	a1,-56(s0)
2040aa70:	fe842503          	lw	a0,-24(s0)
2040aa74:	000780e7          	jalr	a5
2040aa78:	fea42223          	sw	a0,-28(s0)
  CHECK_NE(entry, 0, "no valid page entry found.");
2040aa7c:	fe442783          	lw	a5,-28(s0)
2040aa80:	02079a63          	bnez	a5,2040aab4 <PageMemoryManager_Free+0xc0>
2040aa84:	00016717          	auipc	a4,0x16
2040aa88:	12870713          	addi	a4,a4,296 # 20420bac <graph_executor_registry_funcs+0x1d0>
2040aa8c:	00016697          	auipc	a3,0x16
2040aa90:	12468693          	addi	a3,a3,292 # 20420bb0 <graph_executor_registry_funcs+0x1d4>
2040aa94:	00016617          	auipc	a2,0x16
2040aa98:	1a060613          	addi	a2,a2,416 # 20420c34 <graph_executor_registry_funcs+0x258>
2040aa9c:	10b00593          	li	a1,267
2040aaa0:	00016517          	auipc	a0,0x16
2040aaa4:	19c50513          	addi	a0,a0,412 # 20420c3c <graph_executor_registry_funcs+0x260>
2040aaa8:	7b1020ef          	jal	ra,2040da58 <TVMLogf>
2040aaac:	50000513          	li	a0,1280
2040aab0:	ec1f50ef          	jal	ra,20400970 <TVMPlatformAbort>
  Page* p = &(entry->page);
2040aab4:	fe442783          	lw	a5,-28(s0)
2040aab8:	00878793          	addi	a5,a5,8
2040aabc:	fef42023          	sw	a5,-32(s0)
  MultiMap* free_map = &(mgr->free_map);
2040aac0:	fec42783          	lw	a5,-20(s0)
2040aac4:	03878793          	addi	a5,a5,56
2040aac8:	fcf42e23          	sw	a5,-36(s0)
  free_map->insert(free_map, p->num_pages, p);
2040aacc:	fdc42783          	lw	a5,-36(s0)
2040aad0:	0187a703          	lw	a4,24(a5)
2040aad4:	fe042783          	lw	a5,-32(s0)
2040aad8:	00c7a803          	lw	a6,12(a5)
2040aadc:	0087a783          	lw	a5,8(a5)
2040aae0:	fe042603          	lw	a2,-32(s0)
2040aae4:	00078593          	mv	a1,a5
2040aae8:	fdc42503          	lw	a0,-36(s0)
2040aaec:	000700e7          	jalr	a4
  mgr->interface.vleak_size--;
2040aaf0:	fec42783          	lw	a5,-20(s0)
2040aaf4:	0087a783          	lw	a5,8(a5)
2040aaf8:	fff78713          	addi	a4,a5,-1
2040aafc:	fec42783          	lw	a5,-20(s0)
2040ab00:	00e7a423          	sw	a4,8(a5)
#if TVM_CRT_DEBUG > 1
  TVMLogf("release: addr=%p, start=%" PRId64 "/%zu, npage=%zu, vleak=%d", ptr,
          entry->page.ptable_begin, mgr->ptable.max_pages, entry->page.num_pages,
          mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
2040ab04:	00000793          	li	a5,0
}
2040ab08:	00078513          	mv	a0,a5
2040ab0c:	03c12083          	lw	ra,60(sp)
2040ab10:	03812403          	lw	s0,56(sp)
2040ab14:	04010113          	addi	sp,sp,64
2040ab18:	00008067          	ret

2040ab1c <PageMemoryManagerCreate>:

tvm_crt_error_t PageMemoryManagerCreate(MemoryManagerInterface** interface, uint8_t* memory_pool,
                                        size_t memory_pool_size_bytes,
                                        size_t page_size_bytes_log2) {
2040ab1c:	fc010113          	addi	sp,sp,-64
2040ab20:	02112e23          	sw	ra,60(sp)
2040ab24:	02812c23          	sw	s0,56(sp)
2040ab28:	04010413          	addi	s0,sp,64
2040ab2c:	fca42623          	sw	a0,-52(s0)
2040ab30:	fcb42423          	sw	a1,-56(s0)
2040ab34:	fcc42223          	sw	a2,-60(s0)
2040ab38:	fcd42023          	sw	a3,-64(s0)
  memset(memory_pool, 0, sizeof(memory_pool_size_bytes));
2040ab3c:	00400613          	li	a2,4
2040ab40:	00000593          	li	a1,0
2040ab44:	fc842503          	lw	a0,-56(s0)
2040ab48:	566080ef          	jal	ra,204130ae <memset>

  // Allocate enough space for MAX_PAGES.
  size_t page_size_bytes = 1 << page_size_bytes_log2;
2040ab4c:	00100713          	li	a4,1
2040ab50:	fc042783          	lw	a5,-64(s0)
2040ab54:	00f717b3          	sll	a5,a4,a5
2040ab58:	fef42623          	sw	a5,-20(s0)
  size_t metadata_bytes_per_page = sizeof(Page) + sizeof(PageEntry) + sizeof(IndexedEntry);
2040ab5c:	05800793          	li	a5,88
2040ab60:	fef42423          	sw	a5,-24(s0)
  size_t bytes_needed_per_page = page_size_bytes + metadata_bytes_per_page;
2040ab64:	fec42703          	lw	a4,-20(s0)
2040ab68:	fe842783          	lw	a5,-24(s0)
2040ab6c:	00f707b3          	add	a5,a4,a5
2040ab70:	fef42223          	sw	a5,-28(s0)
  size_t num_pages = (memory_pool_size_bytes - sizeof(MemoryManager)) / bytes_needed_per_page;
2040ab74:	fc442783          	lw	a5,-60(s0)
2040ab78:	fac78793          	addi	a5,a5,-84
2040ab7c:	fe442583          	lw	a1,-28(s0)
2040ab80:	00078513          	mv	a0,a5
2040ab84:	465140ef          	jal	ra,2041f7e8 <__udivsi3>
2040ab88:	00050793          	mv	a5,a0
2040ab8c:	fef42023          	sw	a5,-32(s0)

  uint8_t* metadata_cursor = memory_pool + (num_pages << page_size_bytes_log2);
2040ab90:	fe042703          	lw	a4,-32(s0)
2040ab94:	fc042783          	lw	a5,-64(s0)
2040ab98:	00f717b3          	sll	a5,a4,a5
2040ab9c:	fc842703          	lw	a4,-56(s0)
2040aba0:	00f707b3          	add	a5,a4,a5
2040aba4:	fcf42e23          	sw	a5,-36(s0)
  MemoryManager* manager = (MemoryManager*)metadata_cursor;
2040aba8:	fdc42783          	lw	a5,-36(s0)
2040abac:	fcf42c23          	sw	a5,-40(s0)
  *interface = &manager->interface;
2040abb0:	fd842703          	lw	a4,-40(s0)
2040abb4:	fcc42783          	lw	a5,-52(s0)
2040abb8:	00e7a023          	sw	a4,0(a5)
  /* handle MemoryManager member functions */
  manager->interface.Allocate = PageMemoryManager_Allocate;
2040abbc:	fd842783          	lw	a5,-40(s0)
2040abc0:	fffff717          	auipc	a4,0xfffff
2040abc4:	72470713          	addi	a4,a4,1828 # 2040a2e4 <PageMemoryManager_Allocate>
2040abc8:	00e7a023          	sw	a4,0(a5)
  //  manager->Realloc = MemoryManager_Reallocate;
  manager->interface.Free = PageMemoryManager_Free;
2040abcc:	fd842783          	lw	a5,-40(s0)
2040abd0:	00000717          	auipc	a4,0x0
2040abd4:	e2470713          	addi	a4,a4,-476 # 2040a9f4 <PageMemoryManager_Free>
2040abd8:	00e7a223          	sw	a4,4(a5)

  metadata_cursor += sizeof(MemoryManager);
2040abdc:	fdc42783          	lw	a5,-36(s0)
2040abe0:	05478793          	addi	a5,a5,84
2040abe4:	fcf42e23          	sw	a5,-36(s0)

  manager->interface.Allocate = PageMemoryManager_Allocate;
2040abe8:	fd842783          	lw	a5,-40(s0)
2040abec:	fffff717          	auipc	a4,0xfffff
2040abf0:	6f870713          	addi	a4,a4,1784 # 2040a2e4 <PageMemoryManager_Allocate>
2040abf4:	00e7a023          	sw	a4,0(a5)
  manager->interface.Free = PageMemoryManager_Free;
2040abf8:	fd842783          	lw	a5,-40(s0)
2040abfc:	00000717          	auipc	a4,0x0
2040ac00:	df870713          	addi	a4,a4,-520 # 2040a9f4 <PageMemoryManager_Free>
2040ac04:	00e7a223          	sw	a4,4(a5)
  manager->ptable.memory_pool = memory_pool;
2040ac08:	fd842783          	lw	a5,-40(s0)
2040ac0c:	fc842703          	lw	a4,-56(s0)
2040ac10:	00e7a623          	sw	a4,12(a5)

  /* handle PageTable member functions */
  manager->ptable.page = (Page*)metadata_cursor;
2040ac14:	fd842783          	lw	a5,-40(s0)
2040ac18:	fdc42703          	lw	a4,-36(s0)
2040ac1c:	00e7aa23          	sw	a4,20(a5)
  metadata_cursor += sizeof(Page) * num_pages;
2040ac20:	fe042703          	lw	a4,-32(s0)
2040ac24:	00070793          	mv	a5,a4
2040ac28:	00179793          	slli	a5,a5,0x1
2040ac2c:	00e787b3          	add	a5,a5,a4
2040ac30:	00379793          	slli	a5,a5,0x3
2040ac34:	00078713          	mv	a4,a5
2040ac38:	fdc42783          	lw	a5,-36(s0)
2040ac3c:	00e787b3          	add	a5,a5,a4
2040ac40:	fcf42e23          	sw	a5,-36(s0)

  manager->ptable.page_size_bytes = (1 << page_size_bytes_log2);
2040ac44:	00100713          	li	a4,1
2040ac48:	fc042783          	lw	a5,-64(s0)
2040ac4c:	00f717b3          	sll	a5,a4,a5
2040ac50:	00078713          	mv	a4,a5
2040ac54:	fd842783          	lw	a5,-40(s0)
2040ac58:	00e7a823          	sw	a4,16(a5)
  manager->ptable.max_pages = num_pages;
2040ac5c:	fd842783          	lw	a5,-40(s0)
2040ac60:	fe042703          	lw	a4,-32(s0)
2040ac64:	00e7ac23          	sw	a4,24(a5)
  manager->ptable.resize = PageTable_Resize;
2040ac68:	fd842783          	lw	a5,-40(s0)
2040ac6c:	fffff717          	auipc	a4,0xfffff
2040ac70:	09c70713          	addi	a4,a4,156 # 20409d08 <PageTable_Resize>
2040ac74:	02e7a023          	sw	a4,32(a5)

  /* handle TLB member functions */
  manager->pmap.entries = (PageEntry*)metadata_cursor;
2040ac78:	fd842783          	lw	a5,-40(s0)
2040ac7c:	fdc42703          	lw	a4,-36(s0)
2040ac80:	02e7a223          	sw	a4,36(a5)
  metadata_cursor += sizeof(PageEntry) * num_pages;
2040ac84:	fe042783          	lw	a5,-32(s0)
2040ac88:	00579793          	slli	a5,a5,0x5
2040ac8c:	fdc42703          	lw	a4,-36(s0)
2040ac90:	00f707b3          	add	a5,a4,a5
2040ac94:	fcf42e23          	sw	a5,-36(s0)
  manager->pmap.max_pages = num_pages;
2040ac98:	fd842783          	lw	a5,-40(s0)
2040ac9c:	fe042703          	lw	a4,-32(s0)
2040aca0:	02e7a423          	sw	a4,40(a5)
  manager->pmap.num_pages = 0;
2040aca4:	fd842783          	lw	a5,-40(s0)
2040aca8:	0207a623          	sw	zero,44(a5)

  manager->pmap.set = TLB_Set;
2040acac:	fd842783          	lw	a5,-40(s0)
2040acb0:	fffff717          	auipc	a4,0xfffff
2040acb4:	16070713          	addi	a4,a4,352 # 20409e10 <TLB_Set>
2040acb8:	02e7a823          	sw	a4,48(a5)
  manager->pmap.find = TLB_Find;
2040acbc:	fd842783          	lw	a5,-40(s0)
2040acc0:	fffff717          	auipc	a4,0xfffff
2040acc4:	26870713          	addi	a4,a4,616 # 20409f28 <TLB_Find>
2040acc8:	02e7aa23          	sw	a4,52(a5)
  /* handle free_map member functions */
  manager->free_map.entries = (IndexedEntry*)metadata_cursor;
2040accc:	fd842783          	lw	a5,-40(s0)
2040acd0:	fdc42703          	lw	a4,-36(s0)
2040acd4:	02e7ac23          	sw	a4,56(a5)
  metadata_cursor += sizeof(IndexedEntry) * num_pages;
2040acd8:	fe042783          	lw	a5,-32(s0)
2040acdc:	00579793          	slli	a5,a5,0x5
2040ace0:	fdc42703          	lw	a4,-36(s0)
2040ace4:	00f707b3          	add	a5,a4,a5
2040ace8:	fcf42e23          	sw	a5,-36(s0)
  manager->free_map.max_entries = num_pages;
2040acec:	fd842783          	lw	a5,-40(s0)
2040acf0:	fe042703          	lw	a4,-32(s0)
2040acf4:	02e7ae23          	sw	a4,60(a5)
  manager->free_map.lower_bound = MultiMap_LowerBound;
2040acf8:	fd842783          	lw	a5,-40(s0)
2040acfc:	fffff717          	auipc	a4,0xfffff
2040ad00:	2b870713          	addi	a4,a4,696 # 20409fb4 <MultiMap_LowerBound>
2040ad04:	04e7a223          	sw	a4,68(a5)
  manager->free_map.end = MultiMap_End;
2040ad08:	fd842783          	lw	a5,-40(s0)
2040ad0c:	fffff717          	auipc	a4,0xfffff
2040ad10:	35c70713          	addi	a4,a4,860 # 2040a068 <MultiMap_End>
2040ad14:	04e7a423          	sw	a4,72(a5)
  manager->free_map.erase = MultiMap_Erase;
2040ad18:	fd842783          	lw	a5,-40(s0)
2040ad1c:	fffff717          	auipc	a4,0xfffff
2040ad20:	37470713          	addi	a4,a4,884 # 2040a090 <MultiMap_Erase>
2040ad24:	04e7a623          	sw	a4,76(a5)
  manager->free_map.insert = MultiMap_Insert;
2040ad28:	fd842783          	lw	a5,-40(s0)
2040ad2c:	fffff717          	auipc	a4,0xfffff
2040ad30:	48070713          	addi	a4,a4,1152 # 2040a1ac <MultiMap_Insert>
2040ad34:	04e7a823          	sw	a4,80(a5)

  return kTvmErrorNoError;
2040ad38:	00000793          	li	a5,0
}
2040ad3c:	00078513          	mv	a0,a5
2040ad40:	03c12083          	lw	ra,60(sp)
2040ad44:	03812403          	lw	s0,56(sp)
2040ad48:	04010113          	addi	sp,sp,64
2040ad4c:	00008067          	ret

2040ad50 <StackMemoryManager_Allocate_Body>:
// LINT_C_FILE
#include <tvm/runtime/crt/stack_allocator.h>

tvm_crt_error_t StackMemoryManager_Allocate_Body(tvm_workspace_t* tvm_runtime_workspace,
                                                 int32_t nbytes, void** current_alloc,
                                                 uint8_t do_lifo_check) {
2040ad50:	fd010113          	addi	sp,sp,-48
2040ad54:	02812623          	sw	s0,44(sp)
2040ad58:	03010413          	addi	s0,sp,48
2040ad5c:	fca42e23          	sw	a0,-36(s0)
2040ad60:	fcb42c23          	sw	a1,-40(s0)
2040ad64:	fcc42a23          	sw	a2,-44(s0)
2040ad68:	00068793          	mv	a5,a3
2040ad6c:	fcf409a3          	sb	a5,-45(s0)
  // reserve bytes at the end of the allocation such that
  // next_alloc % TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES == 0.
  uint32_t offset_bytes =
      (TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES - nbytes) & (TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES - 1);
2040ad70:	fd842783          	lw	a5,-40(s0)
2040ad74:	40f007b3          	neg	a5,a5
  uint32_t offset_bytes =
2040ad78:	00f7f793          	andi	a5,a5,15
2040ad7c:	fef42423          	sw	a5,-24(s0)
  uint8_t* workspace_end = tvm_runtime_workspace->workspace + tvm_runtime_workspace->workspace_size;
2040ad80:	fdc42783          	lw	a5,-36(s0)
2040ad84:	0047a703          	lw	a4,4(a5)
2040ad88:	fdc42783          	lw	a5,-36(s0)
2040ad8c:	0087a783          	lw	a5,8(a5)
2040ad90:	00f707b3          	add	a5,a4,a5
2040ad94:	fef42223          	sw	a5,-28(s0)
  if (tvm_runtime_workspace->next_alloc + nbytes + offset_bytes > workspace_end) {
2040ad98:	fdc42783          	lw	a5,-36(s0)
2040ad9c:	0007a703          	lw	a4,0(a5)
2040ada0:	fd842683          	lw	a3,-40(s0)
2040ada4:	fe842783          	lw	a5,-24(s0)
2040ada8:	00f687b3          	add	a5,a3,a5
2040adac:	00f707b3          	add	a5,a4,a5
2040adb0:	fe442703          	lw	a4,-28(s0)
2040adb4:	00f77663          	bleu	a5,a4,2040adc0 <StackMemoryManager_Allocate_Body+0x70>
    return kTvmErrorPlatformNoMemory;
2040adb8:	50300793          	li	a5,1283
2040adbc:	0980006f          	j	2040ae54 <StackMemoryManager_Allocate_Body+0x104>
  }
  (*current_alloc) = tvm_runtime_workspace->next_alloc;
2040adc0:	fdc42783          	lw	a5,-36(s0)
2040adc4:	0007a703          	lw	a4,0(a5)
2040adc8:	fd442783          	lw	a5,-44(s0)
2040adcc:	00e7a023          	sw	a4,0(a5)
  uint8_t* next_alloc = tvm_runtime_workspace->next_alloc + nbytes + offset_bytes;
2040add0:	fdc42783          	lw	a5,-36(s0)
2040add4:	0007a703          	lw	a4,0(a5)
2040add8:	fd842683          	lw	a3,-40(s0)
2040addc:	fe842783          	lw	a5,-24(s0)
2040ade0:	00f687b3          	add	a5,a3,a5
2040ade4:	00f707b3          	add	a5,a4,a5
2040ade8:	fef42623          	sw	a5,-20(s0)
  if (do_lifo_check != 0) {
2040adec:	fd344783          	lbu	a5,-45(s0)
2040adf0:	04078a63          	beqz	a5,2040ae44 <StackMemoryManager_Allocate_Body+0xf4>
    if (next_alloc + STACK_ALLOCATOR_TAG_SIZE_BYTES > workspace_end) {
2040adf4:	fec42783          	lw	a5,-20(s0)
2040adf8:	00478793          	addi	a5,a5,4
2040adfc:	fe442703          	lw	a4,-28(s0)
2040ae00:	00f77663          	bleu	a5,a4,2040ae0c <StackMemoryManager_Allocate_Body+0xbc>
      return kTvmErrorPlatformNoMemory;
2040ae04:	50300793          	li	a5,1283
2040ae08:	04c0006f          	j	2040ae54 <StackMemoryManager_Allocate_Body+0x104>
    }
    const uint32_t total_size = (nbytes + offset_bytes + STACK_ALLOCATOR_TAG_SIZE_BYTES);
2040ae0c:	fd842703          	lw	a4,-40(s0)
2040ae10:	fe842783          	lw	a5,-24(s0)
2040ae14:	00f707b3          	add	a5,a4,a5
2040ae18:	00478793          	addi	a5,a5,4
2040ae1c:	fef42023          	sw	a5,-32(s0)
    *((uint32_t*)next_alloc) = total_size ^ STACK_ALLOCATOR_TAG;
2040ae20:	fe042703          	lw	a4,-32(s0)
2040ae24:	abcd17b7          	lui	a5,0xabcd1
2040ae28:	23478793          	addi	a5,a5,564 # abcd1234 <pulp__FC+0xabcd1235>
2040ae2c:	00f74733          	xor	a4,a4,a5
2040ae30:	fec42783          	lw	a5,-20(s0)
2040ae34:	00e7a023          	sw	a4,0(a5)
    next_alloc += STACK_ALLOCATOR_TAG_SIZE_BYTES;
2040ae38:	fec42783          	lw	a5,-20(s0)
2040ae3c:	00478793          	addi	a5,a5,4
2040ae40:	fef42623          	sw	a5,-20(s0)
  }

  tvm_runtime_workspace->next_alloc = next_alloc;
2040ae44:	fdc42783          	lw	a5,-36(s0)
2040ae48:	fec42703          	lw	a4,-20(s0)
2040ae4c:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
2040ae50:	00000793          	li	a5,0
}
2040ae54:	00078513          	mv	a0,a5
2040ae58:	02c12403          	lw	s0,44(sp)
2040ae5c:	03010113          	addi	sp,sp,48
2040ae60:	00008067          	ret

2040ae64 <StackMemoryManager_Allocate>:

tvm_crt_error_t StackMemoryManager_Allocate(tvm_workspace_t* tvm_runtime_workspace, int32_t nbytes,
                                            void** current_alloc) {
2040ae64:	fd010113          	addi	sp,sp,-48
2040ae68:	02112623          	sw	ra,44(sp)
2040ae6c:	02812423          	sw	s0,40(sp)
2040ae70:	03010413          	addi	s0,sp,48
2040ae74:	fca42e23          	sw	a0,-36(s0)
2040ae78:	fcb42c23          	sw	a1,-40(s0)
2040ae7c:	fcc42a23          	sw	a2,-44(s0)
  uint8_t do_lifo_check = 0;
2040ae80:	fe0407a3          	sb	zero,-17(s0)
#ifdef TVM_CRT_STACK_ALLOCATOR_ENABLE_LIFO_CHECK
  do_lifo_check = 1;
#endif
  return StackMemoryManager_Allocate_Body(tvm_runtime_workspace, nbytes, current_alloc,
2040ae84:	fef44783          	lbu	a5,-17(s0)
2040ae88:	00078693          	mv	a3,a5
2040ae8c:	fd442603          	lw	a2,-44(s0)
2040ae90:	fd842583          	lw	a1,-40(s0)
2040ae94:	fdc42503          	lw	a0,-36(s0)
2040ae98:	eb9ff0ef          	jal	ra,2040ad50 <StackMemoryManager_Allocate_Body>
2040ae9c:	00050793          	mv	a5,a0
                                          do_lifo_check);
}
2040aea0:	00078513          	mv	a0,a5
2040aea4:	02c12083          	lw	ra,44(sp)
2040aea8:	02812403          	lw	s0,40(sp)
2040aeac:	03010113          	addi	sp,sp,48
2040aeb0:	00008067          	ret

2040aeb4 <StackMemoryManager_Free_Body>:

tvm_crt_error_t StackMemoryManager_Free_Body(tvm_workspace_t* tvm_runtime_workspace, void* ptr,
                                             uint8_t do_lifo_check) {
2040aeb4:	fd010113          	addi	sp,sp,-48
2040aeb8:	02812623          	sw	s0,44(sp)
2040aebc:	03010413          	addi	s0,sp,48
2040aec0:	fca42e23          	sw	a0,-36(s0)
2040aec4:	fcb42c23          	sw	a1,-40(s0)
2040aec8:	00060793          	mv	a5,a2
2040aecc:	fcf40ba3          	sb	a5,-41(s0)
  if (do_lifo_check != 0) {
2040aed0:	fd744783          	lbu	a5,-41(s0)
2040aed4:	04078a63          	beqz	a5,2040af28 <StackMemoryManager_Free_Body+0x74>
    uint32_t tag = *(((uint32_t*)tvm_runtime_workspace->next_alloc) - 1);
2040aed8:	fdc42783          	lw	a5,-36(s0)
2040aedc:	0007a783          	lw	a5,0(a5)
2040aee0:	ffc7a783          	lw	a5,-4(a5)
2040aee4:	fef42623          	sw	a5,-20(s0)
    uint32_t actual_size = (tvm_runtime_workspace->next_alloc - (uint8_t*)ptr);
2040aee8:	fdc42783          	lw	a5,-36(s0)
2040aeec:	0007a783          	lw	a5,0(a5)
2040aef0:	00078713          	mv	a4,a5
2040aef4:	fd842783          	lw	a5,-40(s0)
2040aef8:	40f707b3          	sub	a5,a4,a5
2040aefc:	fef42423          	sw	a5,-24(s0)
    uint32_t expected_size = tag ^ STACK_ALLOCATOR_TAG;
2040af00:	fec42703          	lw	a4,-20(s0)
2040af04:	abcd17b7          	lui	a5,0xabcd1
2040af08:	23478793          	addi	a5,a5,564 # abcd1234 <pulp__FC+0xabcd1235>
2040af0c:	00f747b3          	xor	a5,a4,a5
2040af10:	fef42223          	sw	a5,-28(s0)
    if (expected_size != actual_size) {
2040af14:	fe442703          	lw	a4,-28(s0)
2040af18:	fe842783          	lw	a5,-24(s0)
2040af1c:	00f70663          	beq	a4,a5,2040af28 <StackMemoryManager_Free_Body+0x74>
      return kTvmErrorPlatformStackAllocBadFree;
2040af20:	50500793          	li	a5,1285
2040af24:	0140006f          	j	2040af38 <StackMemoryManager_Free_Body+0x84>
    }
  }
  tvm_runtime_workspace->next_alloc = (uint8_t*)ptr;
2040af28:	fdc42783          	lw	a5,-36(s0)
2040af2c:	fd842703          	lw	a4,-40(s0)
2040af30:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
2040af34:	00000793          	li	a5,0
}
2040af38:	00078513          	mv	a0,a5
2040af3c:	02c12403          	lw	s0,44(sp)
2040af40:	03010113          	addi	sp,sp,48
2040af44:	00008067          	ret

2040af48 <StackMemoryManager_Free>:

tvm_crt_error_t StackMemoryManager_Free(tvm_workspace_t* tvm_runtime_workspace, void* ptr) {
2040af48:	fd010113          	addi	sp,sp,-48
2040af4c:	02112623          	sw	ra,44(sp)
2040af50:	02812423          	sw	s0,40(sp)
2040af54:	03010413          	addi	s0,sp,48
2040af58:	fca42e23          	sw	a0,-36(s0)
2040af5c:	fcb42c23          	sw	a1,-40(s0)
  uint8_t do_lifo_check = 0;
2040af60:	fe0407a3          	sb	zero,-17(s0)
#ifdef TVM_CRT_STACK_ALLOCATOR_ENABLE_LIFO_CHECK
  do_lifo_check = 1;
#endif
  return StackMemoryManager_Free_Body(tvm_runtime_workspace, ptr, do_lifo_check);
2040af64:	fef44783          	lbu	a5,-17(s0)
2040af68:	00078613          	mv	a2,a5
2040af6c:	fd842583          	lw	a1,-40(s0)
2040af70:	fdc42503          	lw	a0,-36(s0)
2040af74:	f41ff0ef          	jal	ra,2040aeb4 <StackMemoryManager_Free_Body>
2040af78:	00050793          	mv	a5,a0
}
2040af7c:	00078513          	mv	a0,a5
2040af80:	02c12083          	lw	ra,44(sp)
2040af84:	02812403          	lw	s0,40(sp)
2040af88:	03010113          	addi	sp,sp,48
2040af8c:	00008067          	ret

2040af90 <StackMemoryManager_Init>:

tvm_crt_error_t StackMemoryManager_Init(tvm_workspace_t* tvm_runtime_workspace,
                                        uint8_t* g_aot_memory, size_t workspace_size) {
2040af90:	fd010113          	addi	sp,sp,-48
2040af94:	02812623          	sw	s0,44(sp)
2040af98:	03010413          	addi	s0,sp,48
2040af9c:	fca42e23          	sw	a0,-36(s0)
2040afa0:	fcb42c23          	sw	a1,-40(s0)
2040afa4:	fcc42a23          	sw	a2,-44(s0)
  // We need to round up g_aot_memory in case it is not aligned to
  // TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES.
  uintptr_t unaligned_mask = TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES - 1;
2040afa8:	00f00793          	li	a5,15
2040afac:	fef42623          	sw	a5,-20(s0)
  uint8_t* memory_aligned =
      (uint8_t*)(((uintptr_t)g_aot_memory + unaligned_mask) & ~unaligned_mask);
2040afb0:	fd842703          	lw	a4,-40(s0)
2040afb4:	fec42783          	lw	a5,-20(s0)
2040afb8:	00f70733          	add	a4,a4,a5
2040afbc:	fec42783          	lw	a5,-20(s0)
2040afc0:	fff7c793          	not	a5,a5
2040afc4:	00f777b3          	and	a5,a4,a5
  uint8_t* memory_aligned =
2040afc8:	fef42423          	sw	a5,-24(s0)
  uint32_t offset = (uintptr_t)(memory_aligned - g_aot_memory);
2040afcc:	fe842703          	lw	a4,-24(s0)
2040afd0:	fd842783          	lw	a5,-40(s0)
2040afd4:	40f707b3          	sub	a5,a4,a5
2040afd8:	fef42223          	sw	a5,-28(s0)

  tvm_runtime_workspace->next_alloc = memory_aligned;
2040afdc:	fdc42783          	lw	a5,-36(s0)
2040afe0:	fe842703          	lw	a4,-24(s0)
2040afe4:	00e7a023          	sw	a4,0(a5)
  tvm_runtime_workspace->workspace = memory_aligned;
2040afe8:	fdc42783          	lw	a5,-36(s0)
2040afec:	fe842703          	lw	a4,-24(s0)
2040aff0:	00e7a223          	sw	a4,4(a5)
  tvm_runtime_workspace->workspace_size = workspace_size - offset;
2040aff4:	fd442703          	lw	a4,-44(s0)
2040aff8:	fe442783          	lw	a5,-28(s0)
2040affc:	40f70733          	sub	a4,a4,a5
2040b000:	fdc42783          	lw	a5,-36(s0)
2040b004:	00e7a423          	sw	a4,8(a5)
  return kTvmErrorNoError;
2040b008:	00000793          	li	a5,0
}
2040b00c:	00078513          	mv	a0,a5
2040b010:	02c12403          	lw	s0,44(sp)
2040b014:	03010113          	addi	sp,sp,48
2040b018:	00008067          	ret

2040b01c <crc_xmodem>:
 *
 * The function crc_xmodem() performs a one-pass calculation of an X-Modem CRC
 * for a byte string that has been passed as a parameter.
 */

uint16_t crc_xmodem(const unsigned char* input_str, size_t num_bytes) {
2040b01c:	fe010113          	addi	sp,sp,-32
2040b020:	00112e23          	sw	ra,28(sp)
2040b024:	00812c23          	sw	s0,24(sp)
2040b028:	02010413          	addi	s0,sp,32
2040b02c:	fea42623          	sw	a0,-20(s0)
2040b030:	feb42423          	sw	a1,-24(s0)
  return crc_ccitt_generic(input_str, num_bytes, CRC_START_XMODEM);
2040b034:	00000613          	li	a2,0
2040b038:	fe842583          	lw	a1,-24(s0)
2040b03c:	fec42503          	lw	a0,-20(s0)
2040b040:	0a4000ef          	jal	ra,2040b0e4 <crc_ccitt_generic>
2040b044:	00050793          	mv	a5,a0

} /* crc_xmodem */
2040b048:	00078513          	mv	a0,a5
2040b04c:	01c12083          	lw	ra,28(sp)
2040b050:	01812403          	lw	s0,24(sp)
2040b054:	02010113          	addi	sp,sp,32
2040b058:	00008067          	ret

2040b05c <crc_ccitt_1d0f>:
 * The function crc_ccitt_1d0f() performs a one-pass calculation of the CCITT
 * CRC for a byte string that has been passed as a parameter. The initial value
 * 0x1d0f is used for the CRC.
 */

uint16_t crc_ccitt_1d0f(const unsigned char* input_str, size_t num_bytes) {
2040b05c:	fe010113          	addi	sp,sp,-32
2040b060:	00112e23          	sw	ra,28(sp)
2040b064:	00812c23          	sw	s0,24(sp)
2040b068:	02010413          	addi	s0,sp,32
2040b06c:	fea42623          	sw	a0,-20(s0)
2040b070:	feb42423          	sw	a1,-24(s0)
  return crc_ccitt_generic(input_str, num_bytes, CRC_START_CCITT_1D0F);
2040b074:	000027b7          	lui	a5,0x2
2040b078:	d0f78613          	addi	a2,a5,-753 # 1d0f <__stack_size+0x150f>
2040b07c:	fe842583          	lw	a1,-24(s0)
2040b080:	fec42503          	lw	a0,-20(s0)
2040b084:	060000ef          	jal	ra,2040b0e4 <crc_ccitt_generic>
2040b088:	00050793          	mv	a5,a0

} /* crc_ccitt_1d0f */
2040b08c:	00078513          	mv	a0,a5
2040b090:	01c12083          	lw	ra,28(sp)
2040b094:	01812403          	lw	s0,24(sp)
2040b098:	02010113          	addi	sp,sp,32
2040b09c:	00008067          	ret

2040b0a0 <crc_ccitt_ffff>:
 * The function crc_ccitt_ffff() performs a one-pass calculation of the CCITT
 * CRC for a byte string that has been passed as a parameter. The initial value
 * 0xffff is used for the CRC.
 */

uint16_t crc_ccitt_ffff(const unsigned char* input_str, size_t num_bytes) {
2040b0a0:	fe010113          	addi	sp,sp,-32
2040b0a4:	00112e23          	sw	ra,28(sp)
2040b0a8:	00812c23          	sw	s0,24(sp)
2040b0ac:	02010413          	addi	s0,sp,32
2040b0b0:	fea42623          	sw	a0,-20(s0)
2040b0b4:	feb42423          	sw	a1,-24(s0)
  return crc_ccitt_generic(input_str, num_bytes, CRC_START_CCITT_FFFF);
2040b0b8:	000107b7          	lui	a5,0x10
2040b0bc:	fff78613          	addi	a2,a5,-1 # ffff <__stack_size+0xf7ff>
2040b0c0:	fe842583          	lw	a1,-24(s0)
2040b0c4:	fec42503          	lw	a0,-20(s0)
2040b0c8:	01c000ef          	jal	ra,2040b0e4 <crc_ccitt_generic>
2040b0cc:	00050793          	mv	a5,a0

} /* crc_ccitt_ffff */
2040b0d0:	00078513          	mv	a0,a5
2040b0d4:	01c12083          	lw	ra,28(sp)
2040b0d8:	01812403          	lw	s0,24(sp)
2040b0dc:	02010113          	addi	sp,sp,32
2040b0e0:	00008067          	ret

2040b0e4 <crc_ccitt_generic>:
 * algorithm for a one-pass calculation of the CRC for a byte string. The
 * function accepts an initial start value for the crc.
 */

static uint16_t crc_ccitt_generic(const unsigned char* input_str, size_t num_bytes,
                                  uint16_t start_value) {
2040b0e4:	fd010113          	addi	sp,sp,-48
2040b0e8:	02812623          	sw	s0,44(sp)
2040b0ec:	03010413          	addi	s0,sp,48
2040b0f0:	fca42e23          	sw	a0,-36(s0)
2040b0f4:	fcb42c23          	sw	a1,-40(s0)
2040b0f8:	00060793          	mv	a5,a2
2040b0fc:	fcf41b23          	sh	a5,-42(s0)
  uint16_t crc;
  const unsigned char* ptr;
  size_t a;

  crc = start_value;
2040b100:	fd645783          	lhu	a5,-42(s0)
2040b104:	fef41723          	sh	a5,-18(s0)
  ptr = input_str;
2040b108:	fdc42783          	lw	a5,-36(s0)
2040b10c:	fef42423          	sw	a5,-24(s0)

  if (ptr != NULL)
2040b110:	fe842783          	lw	a5,-24(s0)
2040b114:	08078663          	beqz	a5,2040b1a0 <crc_ccitt_generic+0xbc>
    for (a = 0; a < num_bytes; a++) {
2040b118:	fe042223          	sw	zero,-28(s0)
2040b11c:	0780006f          	j	2040b194 <crc_ccitt_generic+0xb0>
      crc = (crc << 8) ^ crc_tabccitt[((crc >> 8) ^ (uint16_t)*ptr++) & 0x00FF];
2040b120:	fee45783          	lhu	a5,-18(s0)
2040b124:	00879793          	slli	a5,a5,0x8
2040b128:	01079713          	slli	a4,a5,0x10
2040b12c:	41075713          	srai	a4,a4,0x10
2040b130:	fee45783          	lhu	a5,-18(s0)
2040b134:	0087d793          	srli	a5,a5,0x8
2040b138:	01079793          	slli	a5,a5,0x10
2040b13c:	0107d793          	srli	a5,a5,0x10
2040b140:	00078613          	mv	a2,a5
2040b144:	fe842783          	lw	a5,-24(s0)
2040b148:	00178693          	addi	a3,a5,1
2040b14c:	fed42423          	sw	a3,-24(s0)
2040b150:	0007c783          	lbu	a5,0(a5)
2040b154:	00f647b3          	xor	a5,a2,a5
2040b158:	0ff7f793          	andi	a5,a5,255
2040b15c:	00016697          	auipc	a3,0x16
2040b160:	b4468693          	addi	a3,a3,-1212 # 20420ca0 <crc_tabccitt>
2040b164:	00179793          	slli	a5,a5,0x1
2040b168:	00f687b3          	add	a5,a3,a5
2040b16c:	0007d783          	lhu	a5,0(a5)
2040b170:	01079793          	slli	a5,a5,0x10
2040b174:	4107d793          	srai	a5,a5,0x10
2040b178:	00f747b3          	xor	a5,a4,a5
2040b17c:	01079793          	slli	a5,a5,0x10
2040b180:	4107d793          	srai	a5,a5,0x10
2040b184:	fef41723          	sh	a5,-18(s0)
    for (a = 0; a < num_bytes; a++) {
2040b188:	fe442783          	lw	a5,-28(s0)
2040b18c:	00178793          	addi	a5,a5,1
2040b190:	fef42223          	sw	a5,-28(s0)
2040b194:	fe442703          	lw	a4,-28(s0)
2040b198:	fd842783          	lw	a5,-40(s0)
2040b19c:	f8f762e3          	bltu	a4,a5,2040b120 <crc_ccitt_generic+0x3c>
    }

  return crc;
2040b1a0:	fee45783          	lhu	a5,-18(s0)

} /* crc_ccitt_generic */
2040b1a4:	00078513          	mv	a0,a5
2040b1a8:	02c12403          	lw	s0,44(sp)
2040b1ac:	03010113          	addi	sp,sp,48
2040b1b0:	00008067          	ret

2040b1b4 <update_crc_ccitt>:
 *
 * The function update_crc_ccitt() calculates a new CRC-CCITT value based on
 * the previous value of the CRC and the next byte of the data to be checked.
 */

uint16_t update_crc_ccitt(uint16_t crc, unsigned char c) {
2040b1b4:	fe010113          	addi	sp,sp,-32
2040b1b8:	00812e23          	sw	s0,28(sp)
2040b1bc:	02010413          	addi	s0,sp,32
2040b1c0:	00050793          	mv	a5,a0
2040b1c4:	00058713          	mv	a4,a1
2040b1c8:	fef41723          	sh	a5,-18(s0)
2040b1cc:	00070793          	mv	a5,a4
2040b1d0:	fef406a3          	sb	a5,-19(s0)
  return (crc << 8) ^ crc_tabccitt[((crc >> 8) ^ (uint16_t)c) & 0x00FF];
2040b1d4:	fee45783          	lhu	a5,-18(s0)
2040b1d8:	00879793          	slli	a5,a5,0x8
2040b1dc:	01079713          	slli	a4,a5,0x10
2040b1e0:	41075713          	srai	a4,a4,0x10
2040b1e4:	fee45783          	lhu	a5,-18(s0)
2040b1e8:	0087d793          	srli	a5,a5,0x8
2040b1ec:	01079793          	slli	a5,a5,0x10
2040b1f0:	0107d793          	srli	a5,a5,0x10
2040b1f4:	00078693          	mv	a3,a5
2040b1f8:	fed44783          	lbu	a5,-19(s0)
2040b1fc:	00f6c7b3          	xor	a5,a3,a5
2040b200:	0ff7f793          	andi	a5,a5,255
2040b204:	00016697          	auipc	a3,0x16
2040b208:	a9c68693          	addi	a3,a3,-1380 # 20420ca0 <crc_tabccitt>
2040b20c:	00179793          	slli	a5,a5,0x1
2040b210:	00f687b3          	add	a5,a3,a5
2040b214:	0007d783          	lhu	a5,0(a5)
2040b218:	01079793          	slli	a5,a5,0x10
2040b21c:	4107d793          	srai	a5,a5,0x10
2040b220:	00f747b3          	xor	a5,a4,a5
2040b224:	01079793          	slli	a5,a5,0x10
2040b228:	4107d793          	srai	a5,a5,0x10
2040b22c:	01079793          	slli	a5,a5,0x10
2040b230:	0107d793          	srli	a5,a5,0x10

} /* update_crc_ccitt */
2040b234:	00078513          	mv	a0,a5
2040b238:	01c12403          	lw	s0,28(sp)
2040b23c:	02010113          	addi	sp,sp,32
2040b240:	00008067          	ret

2040b244 <mtime_lo>:

extern int main(int argc, char** argv);
extern void trap_entry();

static unsigned long mtime_lo(void)
{
2040b244:	ff010113          	addi	sp,sp,-16
2040b248:	00812623          	sw	s0,12(sp)
2040b24c:	01010413          	addi	s0,sp,16
  return *(volatile unsigned long *)(CLINT_CTRL_ADDR + CLINT_MTIME);
2040b250:	0200c7b7          	lui	a5,0x200c
2040b254:	ff878793          	addi	a5,a5,-8 # 200bff8 <__stack_size+0x200b7f8>
2040b258:	0007a783          	lw	a5,0(a5)
}
2040b25c:	00078513          	mv	a0,a5
2040b260:	00c12403          	lw	s0,12(sp)
2040b264:	01010113          	addi	sp,sp,16
2040b268:	00008067          	ret

2040b26c <get_timer_value>:
}

#else /* __riscv32 */

uint64_t get_timer_value()
{
2040b26c:	ff010113          	addi	sp,sp,-16
2040b270:	00112623          	sw	ra,12(sp)
2040b274:	00812423          	sw	s0,8(sp)
2040b278:	01212223          	sw	s2,4(sp)
2040b27c:	01312023          	sw	s3,0(sp)
2040b280:	01010413          	addi	s0,sp,16
  return mtime_lo();
2040b284:	fc1ff0ef          	jal	ra,2040b244 <mtime_lo>
2040b288:	00050793          	mv	a5,a0
2040b28c:	00078913          	mv	s2,a5
2040b290:	00000993          	li	s3,0
2040b294:	00090793          	mv	a5,s2
2040b298:	00098813          	mv	a6,s3
}
2040b29c:	00078513          	mv	a0,a5
2040b2a0:	00080593          	mv	a1,a6
2040b2a4:	00c12083          	lw	ra,12(sp)
2040b2a8:	00812403          	lw	s0,8(sp)
2040b2ac:	00412903          	lw	s2,4(sp)
2040b2b0:	00012983          	lw	s3,0(sp)
2040b2b4:	01010113          	addi	sp,sp,16
2040b2b8:	00008067          	ret

2040b2bc <get_timer_freq>:

#endif

unsigned long get_timer_freq()
{
2040b2bc:	ff010113          	addi	sp,sp,-16
2040b2c0:	00812623          	sw	s0,12(sp)
2040b2c4:	01010413          	addi	s0,sp,16
  return 32768;
2040b2c8:	000087b7          	lui	a5,0x8
}
2040b2cc:	00078513          	mv	a0,a5
2040b2d0:	00c12403          	lw	s0,12(sp)
2040b2d4:	01010113          	addi	sp,sp,16
2040b2d8:	00008067          	ret

2040b2dc <use_hfrosc>:

static void use_hfrosc(int div, int trim)
{
2040b2dc:	fe010113          	addi	sp,sp,-32
2040b2e0:	00812e23          	sw	s0,28(sp)
2040b2e4:	02010413          	addi	s0,sp,32
2040b2e8:	fea42623          	sw	a0,-20(s0)
2040b2ec:	feb42423          	sw	a1,-24(s0)
  // Make sure the HFROSC is running at its default setting
  PRCI_REG(PRCI_HFROSCCFG) = (ROSC_DIV(div) | ROSC_TRIM(trim) | ROSC_EN(1));
2040b2f0:	fec42783          	lw	a5,-20(s0)
2040b2f4:	02f7f713          	andi	a4,a5,47
2040b2f8:	fe842783          	lw	a5,-24(s0)
2040b2fc:	01079693          	slli	a3,a5,0x10
2040b300:	001f07b7          	lui	a5,0x1f0
2040b304:	00f6f7b3          	and	a5,a3,a5
2040b308:	00f76733          	or	a4,a4,a5
2040b30c:	400007b7          	lui	a5,0x40000
2040b310:	00f76733          	or	a4,a4,a5
2040b314:	100087b7          	lui	a5,0x10008
2040b318:	00e7a023          	sw	a4,0(a5) # 10008000 <__stack_size+0x10007800>
  while ((PRCI_REG(PRCI_HFROSCCFG) & ROSC_RDY(1)) == 0) ;
2040b31c:	00000013          	nop
2040b320:	100087b7          	lui	a5,0x10008
2040b324:	0007a783          	lw	a5,0(a5) # 10008000 <__stack_size+0x10007800>
2040b328:	fe07dce3          	bgez	a5,2040b320 <use_hfrosc+0x44>
  PRCI_REG(PRCI_PLLCFG) &= ~PLL_SEL(1);
2040b32c:	100087b7          	lui	a5,0x10008
2040b330:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b334:	0007a683          	lw	a3,0(a5)
2040b338:	100087b7          	lui	a5,0x10008
2040b33c:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b340:	ffff0737          	lui	a4,0xffff0
2040b344:	fff70713          	addi	a4,a4,-1 # fffeffff <pulp__FC+0xffff0000>
2040b348:	00e6f733          	and	a4,a3,a4
2040b34c:	00e7a023          	sw	a4,0(a5)
}
2040b350:	00000013          	nop
2040b354:	01c12403          	lw	s0,28(sp)
2040b358:	02010113          	addi	sp,sp,32
2040b35c:	00008067          	ret

2040b360 <use_pll>:

static void use_pll(int refsel, int bypass, int r, int f, int q)
{
2040b360:	fc010113          	addi	sp,sp,-64
2040b364:	02112e23          	sw	ra,60(sp)
2040b368:	02812c23          	sw	s0,56(sp)
2040b36c:	04010413          	addi	s0,sp,64
2040b370:	fca42e23          	sw	a0,-36(s0)
2040b374:	fcb42c23          	sw	a1,-40(s0)
2040b378:	fcc42a23          	sw	a2,-44(s0)
2040b37c:	fcd42823          	sw	a3,-48(s0)
2040b380:	fce42623          	sw	a4,-52(s0)
  // Ensure that we aren't running off the PLL before we mess with it.
  if (PRCI_REG(PRCI_PLLCFG) & PLL_SEL(1)) {
2040b384:	100087b7          	lui	a5,0x10008
2040b388:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b38c:	0007a703          	lw	a4,0(a5)
2040b390:	000107b7          	lui	a5,0x10
2040b394:	00f777b3          	and	a5,a4,a5
2040b398:	00078863          	beqz	a5,2040b3a8 <use_pll+0x48>
    // Make sure the HFROSC is running at its default setting
    use_hfrosc(4, 16);
2040b39c:	01000593          	li	a1,16
2040b3a0:	00400513          	li	a0,4
2040b3a4:	f39ff0ef          	jal	ra,2040b2dc <use_hfrosc>
  }

  // Set PLL Source to be HFXOSC if available.
  uint32_t config_value = 0;
2040b3a8:	fe042623          	sw	zero,-20(s0)

  config_value |= PLL_REFSEL(refsel);
2040b3ac:	fdc42783          	lw	a5,-36(s0)
2040b3b0:	01179793          	slli	a5,a5,0x11
2040b3b4:	00078713          	mv	a4,a5
2040b3b8:	000207b7          	lui	a5,0x20
2040b3bc:	00f777b3          	and	a5,a4,a5
2040b3c0:	fec42703          	lw	a4,-20(s0)
2040b3c4:	00f767b3          	or	a5,a4,a5
2040b3c8:	fef42623          	sw	a5,-20(s0)

  if (bypass) {
2040b3cc:	fd842783          	lw	a5,-40(s0)
2040b3d0:	02078c63          	beqz	a5,2040b408 <use_pll+0xa8>
    // Bypass
    config_value |= PLL_BYPASS(1);
2040b3d4:	fec42703          	lw	a4,-20(s0)
2040b3d8:	000407b7          	lui	a5,0x40
2040b3dc:	00f767b3          	or	a5,a4,a5
2040b3e0:	fef42623          	sw	a5,-20(s0)

    PRCI_REG(PRCI_PLLCFG) = config_value;
2040b3e4:	100087b7          	lui	a5,0x10008
2040b3e8:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b3ec:	fec42703          	lw	a4,-20(s0)
2040b3f0:	00e7a023          	sw	a4,0(a5)

    // If we don't have an HFXTAL, this doesn't really matter.
    // Set our Final output divide to divide-by-1:
    PRCI_REG(PRCI_PLLDIV) = (PLL_FINAL_DIV_BY_1(1) | PLL_FINAL_DIV(0));
2040b3f4:	100087b7          	lui	a5,0x10008
2040b3f8:	00c78793          	addi	a5,a5,12 # 1000800c <__stack_size+0x1000780c>
2040b3fc:	10000713          	li	a4,256
2040b400:	00e7a023          	sw	a4,0(a5)
2040b404:	0ec0006f          	j	2040b4f0 <use_pll+0x190>
    // (which is quite likely) we need to
    // set the QSPI clock divider appropriately
    // before boosting the clock frequency.

    // Div = f_sck/2
    SPI0_REG(SPI_REG_SCKDIV) = 8;
2040b408:	100147b7          	lui	a5,0x10014
2040b40c:	00800713          	li	a4,8
2040b410:	00e7a023          	sw	a4,0(a5) # 10014000 <__stack_size+0x10013800>
    // (Legal values of f_REF are 6-48MHz)

    // Set DIVR to divide-by-2 to get 8MHz frequency
    // (legal values of f_R are 6-12 MHz)

    config_value |= PLL_BYPASS(1);
2040b414:	fec42703          	lw	a4,-20(s0)
2040b418:	000407b7          	lui	a5,0x40
2040b41c:	00f767b3          	or	a5,a4,a5
2040b420:	fef42623          	sw	a5,-20(s0)
    config_value |= PLL_R(r);
2040b424:	fd442783          	lw	a5,-44(s0)
2040b428:	0077f793          	andi	a5,a5,7
2040b42c:	fec42703          	lw	a4,-20(s0)
2040b430:	00f767b3          	or	a5,a4,a5
2040b434:	fef42623          	sw	a5,-20(s0)

    // Set DIVF to get 512Mhz frequncy
    // There is an implied multiply-by-2, 16Mhz.
    // So need to write 32-1
    // (legal values of f_F are 384-768 MHz)
    config_value |= PLL_F(f);
2040b438:	fd042783          	lw	a5,-48(s0)
2040b43c:	00479793          	slli	a5,a5,0x4
2040b440:	3f07f793          	andi	a5,a5,1008
2040b444:	fec42703          	lw	a4,-20(s0)
2040b448:	00f767b3          	or	a5,a4,a5
2040b44c:	fef42623          	sw	a5,-20(s0)

    // Set DIVQ to divide-by-2 to get 256 MHz frequency
    // (legal values of f_Q are 50-400Mhz)
    config_value |= PLL_Q(q);
2040b450:	fcc42783          	lw	a5,-52(s0)
2040b454:	00a79793          	slli	a5,a5,0xa
2040b458:	00078713          	mv	a4,a5
2040b45c:	000017b7          	lui	a5,0x1
2040b460:	c0078793          	addi	a5,a5,-1024 # c00 <__stack_size+0x400>
2040b464:	00f777b3          	and	a5,a4,a5
2040b468:	fec42703          	lw	a4,-20(s0)
2040b46c:	00f767b3          	or	a5,a4,a5
2040b470:	fef42623          	sw	a5,-20(s0)

    // Set our Final output divide to divide-by-1:
    PRCI_REG(PRCI_PLLDIV) = (PLL_FINAL_DIV_BY_1(1) | PLL_FINAL_DIV(0));
2040b474:	100087b7          	lui	a5,0x10008
2040b478:	00c78793          	addi	a5,a5,12 # 1000800c <__stack_size+0x1000780c>
2040b47c:	10000713          	li	a4,256
2040b480:	00e7a023          	sw	a4,0(a5)

    PRCI_REG(PRCI_PLLCFG) = config_value;
2040b484:	100087b7          	lui	a5,0x10008
2040b488:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b48c:	fec42703          	lw	a4,-20(s0)
2040b490:	00e7a023          	sw	a4,0(a5)

    // Un-Bypass the PLL.
    PRCI_REG(PRCI_PLLCFG) &= ~PLL_BYPASS(1);
2040b494:	100087b7          	lui	a5,0x10008
2040b498:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b49c:	0007a683          	lw	a3,0(a5)
2040b4a0:	100087b7          	lui	a5,0x10008
2040b4a4:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b4a8:	fffc0737          	lui	a4,0xfffc0
2040b4ac:	fff70713          	addi	a4,a4,-1 # fffbffff <pulp__FC+0xfffc0000>
2040b4b0:	00e6f733          	and	a4,a3,a4
2040b4b4:	00e7a023          	sw	a4,0(a5)
    // Wait for PLL Lock
    // Note that the Lock signal can be glitchy.
    // Need to wait 100 us
    // RTC is running at 32kHz.
    // So wait 4 ticks of RTC.
    uint32_t now = mtime_lo();
2040b4b8:	d8dff0ef          	jal	ra,2040b244 <mtime_lo>
2040b4bc:	fea42423          	sw	a0,-24(s0)
    while (mtime_lo() - now < 4) ;
2040b4c0:	00000013          	nop
2040b4c4:	d81ff0ef          	jal	ra,2040b244 <mtime_lo>
2040b4c8:	00050713          	mv	a4,a0
2040b4cc:	fe842783          	lw	a5,-24(s0)
2040b4d0:	40f70733          	sub	a4,a4,a5
2040b4d4:	00300793          	li	a5,3
2040b4d8:	fee7f6e3          	bleu	a4,a5,2040b4c4 <use_pll+0x164>

    // Now it is safe to check for PLL Lock
    while ((PRCI_REG(PRCI_PLLCFG) & PLL_LOCK(1)) == 0) ;
2040b4dc:	00000013          	nop
2040b4e0:	100087b7          	lui	a5,0x10008
2040b4e4:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b4e8:	0007a783          	lw	a5,0(a5)
2040b4ec:	fe07dae3          	bgez	a5,2040b4e0 <use_pll+0x180>
  }

  // Switch over to PLL Clock source
  PRCI_REG(PRCI_PLLCFG) |= PLL_SEL(1);
2040b4f0:	100087b7          	lui	a5,0x10008
2040b4f4:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b4f8:	0007a683          	lw	a3,0(a5)
2040b4fc:	100087b7          	lui	a5,0x10008
2040b500:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10007808>
2040b504:	00010737          	lui	a4,0x10
2040b508:	00e6e733          	or	a4,a3,a4
2040b50c:	00e7a023          	sw	a4,0(a5)
}
2040b510:	00000013          	nop
2040b514:	03c12083          	lw	ra,60(sp)
2040b518:	03812403          	lw	s0,56(sp)
2040b51c:	04010113          	addi	sp,sp,64
2040b520:	00008067          	ret

2040b524 <use_default_clocks>:

static void use_default_clocks()
{
2040b524:	ff010113          	addi	sp,sp,-16
2040b528:	00112623          	sw	ra,12(sp)
2040b52c:	00812423          	sw	s0,8(sp)
2040b530:	01010413          	addi	s0,sp,16
  // Turn off the LFROSC
  AON_REG(AON_LFROSC) &= ~ROSC_EN(1);
2040b534:	100007b7          	lui	a5,0x10000
2040b538:	07078793          	addi	a5,a5,112 # 10000070 <__stack_size+0xffff870>
2040b53c:	0007a683          	lw	a3,0(a5)
2040b540:	100007b7          	lui	a5,0x10000
2040b544:	07078793          	addi	a5,a5,112 # 10000070 <__stack_size+0xffff870>
2040b548:	c0000737          	lui	a4,0xc0000
2040b54c:	fff70713          	addi	a4,a4,-1 # bfffffff <pulp__FC+0xc0000000>
2040b550:	00e6f733          	and	a4,a3,a4
2040b554:	00e7a023          	sw	a4,0(a5)

  // Use HFROSC
  use_hfrosc(4, 16);
2040b558:	01000593          	li	a1,16
2040b55c:	00400513          	li	a0,4
2040b560:	d7dff0ef          	jal	ra,2040b2dc <use_hfrosc>
}
2040b564:	00000013          	nop
2040b568:	00c12083          	lw	ra,12(sp)
2040b56c:	00812403          	lw	s0,8(sp)
2040b570:	01010113          	addi	sp,sp,16
2040b574:	00008067          	ret

2040b578 <measure_cpu_freq>:

static unsigned long __attribute__((noinline)) measure_cpu_freq(size_t n)
{
2040b578:	fc010113          	addi	sp,sp,-64
2040b57c:	02112e23          	sw	ra,60(sp)
2040b580:	02812c23          	sw	s0,56(sp)
2040b584:	02912a23          	sw	s1,52(sp)
2040b588:	04010413          	addi	s0,sp,64
2040b58c:	fca42623          	sw	a0,-52(s0)
  unsigned long start_mtime, delta_mtime;
  unsigned long mtime_freq = get_timer_freq();
2040b590:	d2dff0ef          	jal	ra,2040b2bc <get_timer_freq>
2040b594:	fea42623          	sw	a0,-20(s0)

  // Don't start measuruing until we see an mtime tick
  unsigned long tmp = mtime_lo();
2040b598:	cadff0ef          	jal	ra,2040b244 <mtime_lo>
2040b59c:	fea42423          	sw	a0,-24(s0)
  do {
    start_mtime = mtime_lo();
2040b5a0:	ca5ff0ef          	jal	ra,2040b244 <mtime_lo>
2040b5a4:	fea42223          	sw	a0,-28(s0)
  } while (start_mtime == tmp);
2040b5a8:	fe442703          	lw	a4,-28(s0)
2040b5ac:	fe842783          	lw	a5,-24(s0)
2040b5b0:	fef708e3          	beq	a4,a5,2040b5a0 <measure_cpu_freq+0x28>

  unsigned long start_mcycle = read_csr(mcycle);
2040b5b4:	b00027f3          	csrr	a5,0xb00
2040b5b8:	fef42023          	sw	a5,-32(s0)
2040b5bc:	fe042783          	lw	a5,-32(s0)
2040b5c0:	fcf42e23          	sw	a5,-36(s0)

  do {
    delta_mtime = mtime_lo() - start_mtime;
2040b5c4:	c81ff0ef          	jal	ra,2040b244 <mtime_lo>
2040b5c8:	00050713          	mv	a4,a0
2040b5cc:	fe442783          	lw	a5,-28(s0)
2040b5d0:	40f707b3          	sub	a5,a4,a5
2040b5d4:	fcf42c23          	sw	a5,-40(s0)
  } while (delta_mtime < n);
2040b5d8:	fd842703          	lw	a4,-40(s0)
2040b5dc:	fcc42783          	lw	a5,-52(s0)
2040b5e0:	fef762e3          	bltu	a4,a5,2040b5c4 <measure_cpu_freq+0x4c>

  unsigned long delta_mcycle = read_csr(mcycle) - start_mcycle;
2040b5e4:	b00027f3          	csrr	a5,0xb00
2040b5e8:	fcf42a23          	sw	a5,-44(s0)
2040b5ec:	fd442703          	lw	a4,-44(s0)
2040b5f0:	fdc42783          	lw	a5,-36(s0)
2040b5f4:	40f707b3          	sub	a5,a4,a5
2040b5f8:	fcf42823          	sw	a5,-48(s0)

  return (delta_mcycle / delta_mtime) * mtime_freq
2040b5fc:	fd842583          	lw	a1,-40(s0)
2040b600:	fd042503          	lw	a0,-48(s0)
2040b604:	1e4140ef          	jal	ra,2041f7e8 <__udivsi3>
2040b608:	00050793          	mv	a5,a0
2040b60c:	fec42583          	lw	a1,-20(s0)
2040b610:	00078513          	mv	a0,a5
2040b614:	158140ef          	jal	ra,2041f76c <__mulsi3>
2040b618:	00050793          	mv	a5,a0
2040b61c:	00078493          	mv	s1,a5
         + ((delta_mcycle % delta_mtime) * mtime_freq) / delta_mtime;
2040b620:	fd042783          	lw	a5,-48(s0)
2040b624:	fd842583          	lw	a1,-40(s0)
2040b628:	00078513          	mv	a0,a5
2040b62c:	1e8140ef          	jal	ra,2041f814 <__umodsi3>
2040b630:	00050793          	mv	a5,a0
2040b634:	fec42583          	lw	a1,-20(s0)
2040b638:	00078513          	mv	a0,a5
2040b63c:	130140ef          	jal	ra,2041f76c <__mulsi3>
2040b640:	00050793          	mv	a5,a0
2040b644:	fd842583          	lw	a1,-40(s0)
2040b648:	00078513          	mv	a0,a5
2040b64c:	19c140ef          	jal	ra,2041f7e8 <__udivsi3>
2040b650:	00050793          	mv	a5,a0
2040b654:	00f487b3          	add	a5,s1,a5
}
2040b658:	00078513          	mv	a0,a5
2040b65c:	03c12083          	lw	ra,60(sp)
2040b660:	03812403          	lw	s0,56(sp)
2040b664:	03412483          	lw	s1,52(sp)
2040b668:	04010113          	addi	sp,sp,64
2040b66c:	00008067          	ret

2040b670 <get_cpu_freq>:

unsigned long get_cpu_freq()
{
2040b670:	ff010113          	addi	sp,sp,-16
2040b674:	00112623          	sw	ra,12(sp)
2040b678:	00812423          	sw	s0,8(sp)
2040b67c:	01010413          	addi	s0,sp,16
  static uint32_t cpu_freq;

  if (!cpu_freq) {
2040b680:	5fbf6797          	auipc	a5,0x5fbf6
2040b684:	82c78793          	addi	a5,a5,-2004 # 80000eac <cpu_freq.2755>
2040b688:	0007a783          	lw	a5,0(a5)
2040b68c:	02079263          	bnez	a5,2040b6b0 <get_cpu_freq+0x40>
    // warm up I$
    measure_cpu_freq(1);
2040b690:	00100513          	li	a0,1
2040b694:	ee5ff0ef          	jal	ra,2040b578 <measure_cpu_freq>
    // measure for real
    cpu_freq = measure_cpu_freq(10);
2040b698:	00a00513          	li	a0,10
2040b69c:	eddff0ef          	jal	ra,2040b578 <measure_cpu_freq>
2040b6a0:	00050713          	mv	a4,a0
2040b6a4:	5fbf6797          	auipc	a5,0x5fbf6
2040b6a8:	80878793          	addi	a5,a5,-2040 # 80000eac <cpu_freq.2755>
2040b6ac:	00e7a023          	sw	a4,0(a5)
  }

  return cpu_freq;
2040b6b0:	5fbf5797          	auipc	a5,0x5fbf5
2040b6b4:	7fc78793          	addi	a5,a5,2044 # 80000eac <cpu_freq.2755>
2040b6b8:	0007a783          	lw	a5,0(a5)
}
2040b6bc:	00078513          	mv	a0,a5
2040b6c0:	00c12083          	lw	ra,12(sp)
2040b6c4:	00812403          	lw	s0,8(sp)
2040b6c8:	01010113          	addi	sp,sp,16
2040b6cc:	00008067          	ret

2040b6d0 <uart_init>:

static void uart_init(size_t baud_rate)
{
2040b6d0:	fe010113          	addi	sp,sp,-32
2040b6d4:	00112e23          	sw	ra,28(sp)
2040b6d8:	00812c23          	sw	s0,24(sp)
2040b6dc:	02010413          	addi	s0,sp,32
2040b6e0:	fea42623          	sw	a0,-20(s0)
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART0_MASK;
2040b6e4:	100127b7          	lui	a5,0x10012
2040b6e8:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1001183c>
2040b6ec:	0007a683          	lw	a3,0(a5)
2040b6f0:	100127b7          	lui	a5,0x10012
2040b6f4:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1001183c>
2040b6f8:	fffd0737          	lui	a4,0xfffd0
2040b6fc:	fff70713          	addi	a4,a4,-1 # fffcffff <pulp__FC+0xfffd0000>
2040b700:	00e6f733          	and	a4,a3,a4
2040b704:	00e7a023          	sw	a4,0(a5)
  GPIO_REG(GPIO_IOF_EN) |= IOF0_UART0_MASK;
2040b708:	100127b7          	lui	a5,0x10012
2040b70c:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x10011838>
2040b710:	0007a683          	lw	a3,0(a5)
2040b714:	100127b7          	lui	a5,0x10012
2040b718:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x10011838>
2040b71c:	00030737          	lui	a4,0x30
2040b720:	00e6e733          	or	a4,a3,a4
2040b724:	00e7a023          	sw	a4,0(a5)
  UART0_REG(UART_REG_DIV) = get_cpu_freq() / baud_rate - 1;
2040b728:	f49ff0ef          	jal	ra,2040b670 <get_cpu_freq>
2040b72c:	00050793          	mv	a5,a0
2040b730:	fec42583          	lw	a1,-20(s0)
2040b734:	00078513          	mv	a0,a5
2040b738:	0b0140ef          	jal	ra,2041f7e8 <__udivsi3>
2040b73c:	00050793          	mv	a5,a0
2040b740:	00078713          	mv	a4,a5
2040b744:	100137b7          	lui	a5,0x10013
2040b748:	01878793          	addi	a5,a5,24 # 10013018 <__stack_size+0x10012818>
2040b74c:	fff70713          	addi	a4,a4,-1 # 2ffff <__stack_size+0x2f7ff>
2040b750:	00e7a023          	sw	a4,0(a5)
  UART0_REG(UART_REG_TXCTRL) |= UART_TXEN;
2040b754:	100137b7          	lui	a5,0x10013
2040b758:	00878793          	addi	a5,a5,8 # 10013008 <__stack_size+0x10012808>
2040b75c:	0007a703          	lw	a4,0(a5)
2040b760:	100137b7          	lui	a5,0x10013
2040b764:	00878793          	addi	a5,a5,8 # 10013008 <__stack_size+0x10012808>
2040b768:	00176713          	ori	a4,a4,1
2040b76c:	00e7a023          	sw	a4,0(a5)
}
2040b770:	00000013          	nop
2040b774:	01c12083          	lw	ra,28(sp)
2040b778:	01812403          	lw	s0,24(sp)
2040b77c:	02010113          	addi	sp,sp,32
2040b780:	00008067          	ret

2040b784 <handle_trap>:
#ifdef USE_M_TIME
extern void handle_m_time_interrupt();
#endif

uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
2040b784:	fe010113          	addi	sp,sp,-32
2040b788:	00112e23          	sw	ra,28(sp)
2040b78c:	00812c23          	sw	s0,24(sp)
2040b790:	02010413          	addi	s0,sp,32
2040b794:	fea42623          	sw	a0,-20(s0)
2040b798:	feb42423          	sw	a1,-24(s0)
  } else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == IRQ_M_TIMER)){
    handle_m_time_interrupt();
#endif
  }
  else {
    write(1, "trap\n", 5);
2040b79c:	00500613          	li	a2,5
2040b7a0:	00015597          	auipc	a1,0x15
2040b7a4:	70058593          	addi	a1,a1,1792 # 20420ea0 <crc_tabccitt+0x200>
2040b7a8:	00100513          	li	a0,1
2040b7ac:	221060ef          	jal	ra,204121cc <__wrap_write>
    _exit(1 + mcause);
2040b7b0:	fec42783          	lw	a5,-20(s0)
2040b7b4:	00178793          	addi	a5,a5,1
2040b7b8:	00078513          	mv	a0,a5
2040b7bc:	3cd060ef          	jal	ra,20412388 <__wrap_exit>

2040b7c0 <_init>:
  }
  return epc;
}

void _init()
{
2040b7c0:	fe010113          	addi	sp,sp,-32
2040b7c4:	00112e23          	sw	ra,28(sp)
2040b7c8:	00812c23          	sw	s0,24(sp)
2040b7cc:	02010413          	addi	s0,sp,32

  #ifndef NO_INIT
  use_default_clocks();
2040b7d0:	d55ff0ef          	jal	ra,2040b524 <use_default_clocks>
  use_pll(0, 0, 1, 31, 1);
2040b7d4:	00100713          	li	a4,1
2040b7d8:	01f00693          	li	a3,31
2040b7dc:	00100613          	li	a2,1
2040b7e0:	00000593          	li	a1,0
2040b7e4:	00000513          	li	a0,0
2040b7e8:	b79ff0ef          	jal	ra,2040b360 <use_pll>
  uart_init(115200);
2040b7ec:	0001c7b7          	lui	a5,0x1c
2040b7f0:	20078513          	addi	a0,a5,512 # 1c200 <__stack_size+0x1ba00>
2040b7f4:	eddff0ef          	jal	ra,2040b6d0 <uart_init>

  printf("core freq at %lu Hz\n", get_cpu_freq());
2040b7f8:	e79ff0ef          	jal	ra,2040b670 <get_cpu_freq>
2040b7fc:	00050793          	mv	a5,a0
2040b800:	00078593          	mv	a1,a5
2040b804:	00015517          	auipc	a0,0x15
2040b808:	6a450513          	addi	a0,a0,1700 # 20420ea8 <crc_tabccitt+0x208>
2040b80c:	3e4070ef          	jal	ra,20412bf0 <__wrap_printf>

  write_csr(mtvec, &trap_entry);
2040b810:	ffff5797          	auipc	a5,0xffff5
2040b814:	88c78793          	addi	a5,a5,-1908 # 2040009c <trap_entry>
2040b818:	30579073          	csrw	mtvec,a5
  if (read_csr(misa) & (1 << ('F' - 'A'))) { // if F extension is present
2040b81c:	301027f3          	csrr	a5,0x301
2040b820:	fef42623          	sw	a5,-20(s0)
2040b824:	fec42783          	lw	a5,-20(s0)
2040b828:	0207f793          	andi	a5,a5,32
2040b82c:	00078863          	beqz	a5,2040b83c <_init+0x7c>
    write_csr(mstatus, MSTATUS_FS); // allow FPU instructions without trapping
2040b830:	000067b7          	lui	a5,0x6
2040b834:	30079073          	csrw	mstatus,a5
    write_csr(fcsr, 0); // initialize rounding mode, undefined at reset
2040b838:	00305073          	csrwi	0x3,0
  }
  #endif

}
2040b83c:	00000013          	nop
2040b840:	01c12083          	lw	ra,28(sp)
2040b844:	01812403          	lw	s0,24(sp)
2040b848:	02010113          	addi	sp,sp,32
2040b84c:	00008067          	ret

2040b850 <_fini>:

void _fini()
{
2040b850:	ff010113          	addi	sp,sp,-16
2040b854:	00812623          	sw	s0,12(sp)
2040b858:	01010413          	addi	s0,sp,16
}
2040b85c:	00000013          	nop
2040b860:	00c12403          	lw	s0,12(sp)
2040b864:	01010113          	addi	sp,sp,16
2040b868:	00008067          	ret

2040b86c <_ZdlPvj>:
void operator delete(void*, unsigned int){
2040b86c:	fe010113          	addi	sp,sp,-32
2040b870:	00812e23          	sw	s0,28(sp)
2040b874:	02010413          	addi	s0,sp,32
2040b878:	fea42623          	sw	a0,-20(s0)
2040b87c:	feb42423          	sw	a1,-24(s0)

2040b880:	00000013          	nop
2040b884:	01c12403          	lw	s0,28(sp)
2040b888:	02010113          	addi	sp,sp,32
2040b88c:	00008067          	ret

2040b890 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5WriteEPKhj>:

namespace tvm {
namespace runtime {
namespace micro_rpc {

size_t FrameBuffer::Write(const uint8_t* data, size_t data_size_bytes) {
2040b890:	fd010113          	addi	sp,sp,-48
2040b894:	02112623          	sw	ra,44(sp)
2040b898:	02812423          	sw	s0,40(sp)
2040b89c:	03010413          	addi	s0,sp,48
2040b8a0:	fca42e23          	sw	a0,-36(s0)
2040b8a4:	fcb42c23          	sw	a1,-40(s0)
2040b8a8:	fcc42a23          	sw	a2,-44(s0)
  size_t num_bytes_available = capacity_ - num_valid_bytes_;
2040b8ac:	fdc42783          	lw	a5,-36(s0)
2040b8b0:	0047a703          	lw	a4,4(a5) # 6004 <__stack_size+0x5804>
2040b8b4:	fdc42783          	lw	a5,-36(s0)
2040b8b8:	0087a783          	lw	a5,8(a5)
2040b8bc:	40f707b3          	sub	a5,a4,a5
2040b8c0:	fef42423          	sw	a5,-24(s0)
  size_t num_bytes_to_copy = data_size_bytes;
2040b8c4:	fd442783          	lw	a5,-44(s0)
2040b8c8:	fef42623          	sw	a5,-20(s0)
  if (num_bytes_available < num_bytes_to_copy) {
2040b8cc:	fe842703          	lw	a4,-24(s0)
2040b8d0:	fec42783          	lw	a5,-20(s0)
2040b8d4:	00f77663          	bleu	a5,a4,2040b8e0 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5WriteEPKhj+0x50>
    num_bytes_to_copy = num_bytes_available;
2040b8d8:	fe842783          	lw	a5,-24(s0)
2040b8dc:	fef42623          	sw	a5,-20(s0)
  }

  memcpy(&data_[num_valid_bytes_], data, num_bytes_to_copy);
2040b8e0:	fdc42783          	lw	a5,-36(s0)
2040b8e4:	0007a703          	lw	a4,0(a5)
2040b8e8:	fdc42783          	lw	a5,-36(s0)
2040b8ec:	0087a783          	lw	a5,8(a5)
2040b8f0:	00f707b3          	add	a5,a4,a5
2040b8f4:	fec42603          	lw	a2,-20(s0)
2040b8f8:	fd842583          	lw	a1,-40(s0)
2040b8fc:	00078513          	mv	a0,a5
2040b900:	6f0070ef          	jal	ra,20412ff0 <memcpy>
  num_valid_bytes_ += num_bytes_to_copy;
2040b904:	fdc42783          	lw	a5,-36(s0)
2040b908:	0087a703          	lw	a4,8(a5)
2040b90c:	fec42783          	lw	a5,-20(s0)
2040b910:	00f70733          	add	a4,a4,a5
2040b914:	fdc42783          	lw	a5,-36(s0)
2040b918:	00e7a423          	sw	a4,8(a5)
  return num_bytes_to_copy;
2040b91c:	fec42783          	lw	a5,-20(s0)
}
2040b920:	00078513          	mv	a0,a5
2040b924:	02c12083          	lw	ra,44(sp)
2040b928:	02812403          	lw	s0,40(sp)
2040b92c:	03010113          	addi	sp,sp,48
2040b930:	00008067          	ret

2040b934 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>:

size_t FrameBuffer::Read(uint8_t* data, size_t data_size_bytes) {
2040b934:	fd010113          	addi	sp,sp,-48
2040b938:	02112623          	sw	ra,44(sp)
2040b93c:	02812423          	sw	s0,40(sp)
2040b940:	03010413          	addi	s0,sp,48
2040b944:	fca42e23          	sw	a0,-36(s0)
2040b948:	fcb42c23          	sw	a1,-40(s0)
2040b94c:	fcc42a23          	sw	a2,-44(s0)
  size_t num_bytes_to_copy = data_size_bytes;
2040b950:	fd442783          	lw	a5,-44(s0)
2040b954:	fef42623          	sw	a5,-20(s0)
  size_t num_bytes_available = num_valid_bytes_ - read_cursor_;
2040b958:	fdc42783          	lw	a5,-36(s0)
2040b95c:	0087a703          	lw	a4,8(a5)
2040b960:	fdc42783          	lw	a5,-36(s0)
2040b964:	00c7a783          	lw	a5,12(a5)
2040b968:	40f707b3          	sub	a5,a4,a5
2040b96c:	fef42423          	sw	a5,-24(s0)
  if (num_bytes_available < num_bytes_to_copy) {
2040b970:	fe842703          	lw	a4,-24(s0)
2040b974:	fec42783          	lw	a5,-20(s0)
2040b978:	00f77663          	bleu	a5,a4,2040b984 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj+0x50>
    num_bytes_to_copy = num_bytes_available;
2040b97c:	fe842783          	lw	a5,-24(s0)
2040b980:	fef42623          	sw	a5,-20(s0)
  }

  memcpy(data, &data_[read_cursor_], num_bytes_to_copy);
2040b984:	fdc42783          	lw	a5,-36(s0)
2040b988:	0007a703          	lw	a4,0(a5)
2040b98c:	fdc42783          	lw	a5,-36(s0)
2040b990:	00c7a783          	lw	a5,12(a5)
2040b994:	00f707b3          	add	a5,a4,a5
2040b998:	fec42603          	lw	a2,-20(s0)
2040b99c:	00078593          	mv	a1,a5
2040b9a0:	fd842503          	lw	a0,-40(s0)
2040b9a4:	64c070ef          	jal	ra,20412ff0 <memcpy>
  read_cursor_ += num_bytes_to_copy;
2040b9a8:	fdc42783          	lw	a5,-36(s0)
2040b9ac:	00c7a703          	lw	a4,12(a5)
2040b9b0:	fec42783          	lw	a5,-20(s0)
2040b9b4:	00f70733          	add	a4,a4,a5
2040b9b8:	fdc42783          	lw	a5,-36(s0)
2040b9bc:	00e7a623          	sw	a4,12(a5)
  return num_bytes_to_copy;
2040b9c0:	fec42783          	lw	a5,-20(s0)
}
2040b9c4:	00078513          	mv	a0,a5
2040b9c8:	02c12083          	lw	ra,44(sp)
2040b9cc:	02812403          	lw	s0,40(sp)
2040b9d0:	03010113          	addi	sp,sp,48
2040b9d4:	00008067          	ret

2040b9d8 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5ClearEv>:

void FrameBuffer::Clear() {
2040b9d8:	fe010113          	addi	sp,sp,-32
2040b9dc:	00812e23          	sw	s0,28(sp)
2040b9e0:	02010413          	addi	s0,sp,32
2040b9e4:	fea42623          	sw	a0,-20(s0)
  num_valid_bytes_ = 0;
2040b9e8:	fec42783          	lw	a5,-20(s0)
2040b9ec:	0007a423          	sw	zero,8(a5)
  read_cursor_ = 0;
2040b9f0:	fec42783          	lw	a5,-20(s0)
2040b9f4:	0007a623          	sw	zero,12(a5)
}
2040b9f8:	00000013          	nop
2040b9fc:	01c12403          	lw	s0,28(sp)
2040ba00:	02010113          	addi	sp,sp,32
2040ba04:	00008067          	ret

2040ba08 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>:

namespace tvm {
namespace runtime {
namespace micro_rpc {

uint16_t crc16_compute(const uint8_t* data, size_t data_size_bytes, uint16_t* previous_crc) {
2040ba08:	fd010113          	addi	sp,sp,-48
2040ba0c:	02112623          	sw	ra,44(sp)
2040ba10:	02812423          	sw	s0,40(sp)
2040ba14:	03010413          	addi	s0,sp,48
2040ba18:	fca42e23          	sw	a0,-36(s0)
2040ba1c:	fcb42c23          	sw	a1,-40(s0)
2040ba20:	fcc42a23          	sw	a2,-44(s0)
  uint16_t crc = (previous_crc != nullptr ? *previous_crc : 0xffff);
2040ba24:	fd442783          	lw	a5,-44(s0)
2040ba28:	00078863          	beqz	a5,2040ba38 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x30>
2040ba2c:	fd442783          	lw	a5,-44(s0)
2040ba30:	0007d783          	lhu	a5,0(a5)
2040ba34:	00c0006f          	j	2040ba40 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x38>
2040ba38:	000107b7          	lui	a5,0x10
2040ba3c:	fff78793          	addi	a5,a5,-1 # ffff <__stack_size+0xf7ff>
2040ba40:	fef41723          	sh	a5,-18(s0)
  for (size_t i = 0; i < data_size_bytes; ++i) {
2040ba44:	fe042423          	sw	zero,-24(s0)
2040ba48:	fe842703          	lw	a4,-24(s0)
2040ba4c:	fd842783          	lw	a5,-40(s0)
2040ba50:	02f77e63          	bleu	a5,a4,2040ba8c <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x84>
    crc = update_crc_ccitt(crc, data[i]);
2040ba54:	fdc42703          	lw	a4,-36(s0)
2040ba58:	fe842783          	lw	a5,-24(s0)
2040ba5c:	00f707b3          	add	a5,a4,a5
2040ba60:	0007c703          	lbu	a4,0(a5)
2040ba64:	fee45783          	lhu	a5,-18(s0)
2040ba68:	00070593          	mv	a1,a4
2040ba6c:	00078513          	mv	a0,a5
2040ba70:	f44ff0ef          	jal	ra,2040b1b4 <update_crc_ccitt>
2040ba74:	00050793          	mv	a5,a0
2040ba78:	fef41723          	sh	a5,-18(s0)
  for (size_t i = 0; i < data_size_bytes; ++i) {
2040ba7c:	fe842783          	lw	a5,-24(s0)
2040ba80:	00178793          	addi	a5,a5,1
2040ba84:	fef42423          	sw	a5,-24(s0)
2040ba88:	fc1ff06f          	j	2040ba48 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x40>
  }

  return crc;
2040ba8c:	fee45783          	lhu	a5,-18(s0)
}
2040ba90:	00078513          	mv	a0,a5
2040ba94:	02c12083          	lw	ra,44(sp)
2040ba98:	02812403          	lw	s0,40(sp)
2040ba9c:	03010113          	addi	sp,sp,48
2040baa0:	00008067          	ret

2040baa4 <_ZN3tvm7runtime9micro_rpc8Unframer5ResetEv>:
template <typename E>
static constexpr uint8_t to_integral(E e) {
  return static_cast<uint8_t>(e);
}

void Unframer::Reset() {
2040baa4:	fe010113          	addi	sp,sp,-32
2040baa8:	00812e23          	sw	s0,28(sp)
2040baac:	02010413          	addi	s0,sp,32
2040bab0:	fea42623          	sw	a0,-20(s0)
  state_ = State::kFindPacketStart;
2040bab4:	fec42783          	lw	a5,-20(s0)
2040bab8:	00078223          	sb	zero,4(a5)
  saw_escape_start_ = false;
2040babc:	fec42783          	lw	a5,-20(s0)
2040bac0:	00078823          	sb	zero,16(a5)
  num_buffer_bytes_valid_ = 0;
2040bac4:	fec42783          	lw	a5,-20(s0)
2040bac8:	0807aa23          	sw	zero,148(a5)
}
2040bacc:	00000013          	nop
2040bad0:	01c12403          	lw	s0,28(sp)
2040bad4:	02010113          	addi	sp,sp,32
2040bad8:	00008067          	ret

2040badc <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv>:

size_t Unframer::BytesNeeded() {
2040badc:	fd010113          	addi	sp,sp,-48
2040bae0:	02112623          	sw	ra,44(sp)
2040bae4:	02812423          	sw	s0,40(sp)
2040bae8:	03010413          	addi	s0,sp,48
2040baec:	fca42e23          	sw	a0,-36(s0)
  size_t bytes_needed = 0;
2040baf0:	fe042623          	sw	zero,-20(s0)
  switch (state_) {
2040baf4:	fdc42783          	lw	a5,-36(s0)
2040baf8:	0047c783          	lbu	a5,4(a5)
2040bafc:	00100713          	li	a4,1
2040bb00:	02e78463          	beq	a5,a4,2040bb28 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x4c>
2040bb04:	00100713          	li	a4,1
2040bb08:	00e7ec63          	bltu	a5,a4,2040bb20 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x44>
2040bb0c:	00200713          	li	a4,2
2040bb10:	02e78263          	beq	a5,a4,2040bb34 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x58>
2040bb14:	00300713          	li	a4,3
2040bb18:	02e78463          	beq	a5,a4,2040bb40 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x64>
2040bb1c:	0300006f          	j	2040bb4c <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x70>
    case State::kFindPacketStart:
      return 1;
2040bb20:	00100793          	li	a5,1
2040bb24:	0740006f          	j	2040bb98 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xbc>
    case State::kFindPacketLength:
      bytes_needed = PacketFieldSizeBytes::kPayloadLength;
2040bb28:	00400793          	li	a5,4
2040bb2c:	fef42623          	sw	a5,-20(s0)
      break;
2040bb30:	03c0006f          	j	2040bb6c <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x90>
    case State::kFindPacketCrc:
      return num_payload_bytes_remaining_;
2040bb34:	fdc42783          	lw	a5,-36(s0)
2040bb38:	0987a783          	lw	a5,152(a5)
2040bb3c:	05c0006f          	j	2040bb98 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xbc>
    case State::kFindCrcEnd:
      bytes_needed = PacketFieldSizeBytes::kCrc;
2040bb40:	00200793          	li	a5,2
2040bb44:	fef42623          	sw	a5,-20(s0)
      break;
2040bb48:	0240006f          	j	2040bb6c <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x90>
    default:
      CHECK(false);
2040bb4c:	00015617          	auipc	a2,0x15
2040bb50:	37460613          	addi	a2,a2,884 # 20420ec0 <crc_tabccitt+0x220>
2040bb54:	05300593          	li	a1,83
2040bb58:	00015517          	auipc	a0,0x15
2040bb5c:	37050513          	addi	a0,a0,880 # 20420ec8 <crc_tabccitt+0x228>
2040bb60:	6f9010ef          	jal	ra,2040da58 <TVMLogf>
2040bb64:	50000513          	li	a0,1280
2040bb68:	e09f40ef          	jal	ra,20400970 <TVMPlatformAbort>
  }

  return bytes_needed > num_buffer_bytes_valid_ ? bytes_needed - num_buffer_bytes_valid_ : 0;
2040bb6c:	fdc42783          	lw	a5,-36(s0)
2040bb70:	0947a783          	lw	a5,148(a5)
2040bb74:	fec42703          	lw	a4,-20(s0)
2040bb78:	00e7fc63          	bleu	a4,a5,2040bb90 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xb4>
2040bb7c:	fdc42783          	lw	a5,-36(s0)
2040bb80:	0947a783          	lw	a5,148(a5)
2040bb84:	fec42703          	lw	a4,-20(s0)
2040bb88:	40f707b3          	sub	a5,a4,a5
2040bb8c:	0080006f          	j	2040bb94 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xb8>
2040bb90:	00000793          	li	a5,0
2040bb94:	00000013          	nop
}
2040bb98:	00078513          	mv	a0,a5
2040bb9c:	02c12083          	lw	ra,44(sp)
2040bba0:	02812403          	lw	s0,40(sp)
2040bba4:	03010113          	addi	sp,sp,48
2040bba8:	00008067          	ret

2040bbac <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj>:

tvm_crt_error_t Unframer::Write(const uint8_t* data, size_t data_size_bytes,
                                size_t* bytes_consumed) {
2040bbac:	fd010113          	addi	sp,sp,-48
2040bbb0:	02112623          	sw	ra,44(sp)
2040bbb4:	02812423          	sw	s0,40(sp)
2040bbb8:	03010413          	addi	s0,sp,48
2040bbbc:	fca42e23          	sw	a0,-36(s0)
2040bbc0:	fcb42c23          	sw	a1,-40(s0)
2040bbc4:	fcc42a23          	sw	a2,-44(s0)
2040bbc8:	fcd42823          	sw	a3,-48(s0)
  tvm_crt_error_t return_code = kTvmErrorNoError;
2040bbcc:	fe042623          	sw	zero,-20(s0)
  input_ = data;
2040bbd0:	fdc42783          	lw	a5,-36(s0)
2040bbd4:	fd842703          	lw	a4,-40(s0)
2040bbd8:	00e7a423          	sw	a4,8(a5)
  input_size_bytes_ = data_size_bytes;
2040bbdc:	fdc42783          	lw	a5,-36(s0)
2040bbe0:	fd442703          	lw	a4,-44(s0)
2040bbe4:	00e7a623          	sw	a4,12(a5)

  while (return_code == kTvmErrorNoError && input_size_bytes_ > 0) {
2040bbe8:	fec42783          	lw	a5,-20(s0)
2040bbec:	08079663          	bnez	a5,2040bc78 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xcc>
2040bbf0:	fdc42783          	lw	a5,-36(s0)
2040bbf4:	00c7a783          	lw	a5,12(a5)
2040bbf8:	08078063          	beqz	a5,2040bc78 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xcc>
    TVM_UNFRAMER_DEBUG_LOG("state: %02x size 0x%02zx", to_integral(state_), input_size_bytes_);
    switch (state_) {
2040bbfc:	fdc42783          	lw	a5,-36(s0)
2040bc00:	0047c783          	lbu	a5,4(a5)
2040bc04:	00100713          	li	a4,1
2040bc08:	02e78863          	beq	a5,a4,2040bc38 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x8c>
2040bc0c:	00100713          	li	a4,1
2040bc10:	00e7ec63          	bltu	a5,a4,2040bc28 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x7c>
2040bc14:	00200713          	li	a4,2
2040bc18:	02e78863          	beq	a5,a4,2040bc48 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x9c>
2040bc1c:	00300713          	li	a4,3
2040bc20:	02e78c63          	beq	a5,a4,2040bc58 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xac>
2040bc24:	0440006f          	j	2040bc68 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xbc>
      case State::kFindPacketStart:
        return_code = FindPacketStart();
2040bc28:	fdc42503          	lw	a0,-36(s0)
2040bc2c:	0cc000ef          	jal	ra,2040bcf8 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv>
2040bc30:	fea42623          	sw	a0,-20(s0)
        break;
2040bc34:	0400006f          	j	2040bc74 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xc8>
      case State::kFindPacketLength:
        return_code = FindPacketLength();
2040bc38:	fdc42503          	lw	a0,-36(s0)
2040bc3c:	564000ef          	jal	ra,2040c1a0 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv>
2040bc40:	fea42623          	sw	a0,-20(s0)
        break;
2040bc44:	0300006f          	j	2040bc74 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xc8>
      case State::kFindPacketCrc:
        return_code = FindPacketCrc();
2040bc48:	fdc42503          	lw	a0,-36(s0)
2040bc4c:	5f0000ef          	jal	ra,2040c23c <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv>
2040bc50:	fea42623          	sw	a0,-20(s0)
        break;
2040bc54:	0200006f          	j	2040bc74 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xc8>
      case State::kFindCrcEnd:
        return_code = FindCrcEnd();
2040bc58:	fdc42503          	lw	a0,-36(s0)
2040bc5c:	7b0000ef          	jal	ra,2040c40c <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv>
2040bc60:	fea42623          	sw	a0,-20(s0)
        break;
2040bc64:	0100006f          	j	2040bc74 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xc8>
      default:
        return_code = kTvmErrorFramingInvalidState;
2040bc68:	20000793          	li	a5,512
2040bc6c:	fef42623          	sw	a5,-20(s0)
        break;
2040bc70:	00000013          	nop
  while (return_code == kTvmErrorNoError && input_size_bytes_ > 0) {
2040bc74:	f75ff06f          	j	2040bbe8 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x3c>
    }
  }

  *bytes_consumed = data_size_bytes - input_size_bytes_;
2040bc78:	fdc42783          	lw	a5,-36(s0)
2040bc7c:	00c7a783          	lw	a5,12(a5)
2040bc80:	fd442703          	lw	a4,-44(s0)
2040bc84:	40f70733          	sub	a4,a4,a5
2040bc88:	fd042783          	lw	a5,-48(s0)
2040bc8c:	00e7a023          	sw	a4,0(a5)
  input_ = nullptr;
2040bc90:	fdc42783          	lw	a5,-36(s0)
2040bc94:	0007a423          	sw	zero,8(a5)
  input_size_bytes_ = 0;
2040bc98:	fdc42783          	lw	a5,-36(s0)
2040bc9c:	0007a623          	sw	zero,12(a5)

  if (return_code != kTvmErrorNoError) {
2040bca0:	fec42783          	lw	a5,-20(s0)
2040bca4:	00078a63          	beqz	a5,2040bcb8 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x10c>
    state_ = State::kFindPacketStart;
2040bca8:	fdc42783          	lw	a5,-36(s0)
2040bcac:	00078223          	sb	zero,4(a5)
    ClearBuffer();
2040bcb0:	fdc42503          	lw	a0,-36(s0)
2040bcb4:	4c4000ef          	jal	ra,2040c178 <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  }

  return return_code;
2040bcb8:	fec42783          	lw	a5,-20(s0)
}
2040bcbc:	00078513          	mv	a0,a5
2040bcc0:	02c12083          	lw	ra,44(sp)
2040bcc4:	02812403          	lw	s0,40(sp)
2040bcc8:	03010113          	addi	sp,sp,48
2040bccc:	00008067          	ret

2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>:
static constexpr uint8_t to_integral(E e) {
2040bcd0:	fe010113          	addi	sp,sp,-32
2040bcd4:	00812e23          	sw	s0,28(sp)
2040bcd8:	02010413          	addi	s0,sp,32
2040bcdc:	00050793          	mv	a5,a0
2040bce0:	fef407a3          	sb	a5,-17(s0)
  return static_cast<uint8_t>(e);
2040bce4:	fef44783          	lbu	a5,-17(s0)
}
2040bce8:	00078513          	mv	a0,a5
2040bcec:	01c12403          	lw	s0,28(sp)
2040bcf0:	02010113          	addi	sp,sp,32
2040bcf4:	00008067          	ret

2040bcf8 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv>:

tvm_crt_error_t Unframer::FindPacketStart() {
2040bcf8:	fd010113          	addi	sp,sp,-48
2040bcfc:	02112623          	sw	ra,44(sp)
2040bd00:	02812423          	sw	s0,40(sp)
2040bd04:	02912223          	sw	s1,36(sp)
2040bd08:	03010413          	addi	s0,sp,48
2040bd0c:	fca42e23          	sw	a0,-36(s0)
  size_t i;
  for (i = 0; i < input_size_bytes_; ++i) {
2040bd10:	fe042623          	sw	zero,-20(s0)
2040bd14:	fdc42783          	lw	a5,-36(s0)
2040bd18:	00c7a783          	lw	a5,12(a5)
2040bd1c:	fec42703          	lw	a4,-20(s0)
2040bd20:	0ef77c63          	bleu	a5,a4,2040be18 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x120>
    if (input_[i] == to_integral(Escape::kEscapeStart)) {
2040bd24:	fdc42783          	lw	a5,-36(s0)
2040bd28:	0087a703          	lw	a4,8(a5)
2040bd2c:	fec42783          	lw	a5,-20(s0)
2040bd30:	00f707b3          	add	a5,a4,a5
2040bd34:	0007c483          	lbu	s1,0(a5)
2040bd38:	0ff00513          	li	a0,255
2040bd3c:	f95ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040bd40:	00050793          	mv	a5,a0
2040bd44:	40f487b3          	sub	a5,s1,a5
2040bd48:	0017b793          	seqz	a5,a5
2040bd4c:	0ff7f793          	andi	a5,a5,255
2040bd50:	00078a63          	beqz	a5,2040bd64 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x6c>
      saw_escape_start_ = true;
2040bd54:	fdc42783          	lw	a5,-36(s0)
2040bd58:	00100713          	li	a4,1
2040bd5c:	00e78823          	sb	a4,16(a5)
2040bd60:	0a80006f          	j	2040be08 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x110>
    } else if (input_[i] == to_integral(Escape::kPacketStart) && saw_escape_start_) {
2040bd64:	fdc42783          	lw	a5,-36(s0)
2040bd68:	0087a703          	lw	a4,8(a5)
2040bd6c:	fec42783          	lw	a5,-20(s0)
2040bd70:	00f707b3          	add	a5,a4,a5
2040bd74:	0007c483          	lbu	s1,0(a5)
2040bd78:	0fd00513          	li	a0,253
2040bd7c:	f55ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040bd80:	00050793          	mv	a5,a0
2040bd84:	00f49c63          	bne	s1,a5,2040bd9c <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0xa4>
2040bd88:	fdc42783          	lw	a5,-36(s0)
2040bd8c:	0107c783          	lbu	a5,16(a5)
2040bd90:	00078663          	beqz	a5,2040bd9c <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0xa4>
2040bd94:	00100793          	li	a5,1
2040bd98:	0080006f          	j	2040bda0 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0xa8>
2040bd9c:	00000793          	li	a5,0
2040bda0:	06078063          	beqz	a5,2040be00 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x108>
      uint8_t packet_start_sequence[2]{to_integral(Escape::kEscapeStart),
2040bda4:	fff00793          	li	a5,-1
2040bda8:	fef40423          	sb	a5,-24(s0)
2040bdac:	ffd00793          	li	a5,-3
2040bdb0:	fef404a3          	sb	a5,-23(s0)
                                       to_integral(Escape::kPacketStart)};
      crc_ = crc16_compute(packet_start_sequence, sizeof(packet_start_sequence), nullptr);
2040bdb4:	fe840793          	addi	a5,s0,-24
2040bdb8:	00000613          	li	a2,0
2040bdbc:	00200593          	li	a1,2
2040bdc0:	00078513          	mv	a0,a5
2040bdc4:	c45ff0ef          	jal	ra,2040ba08 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040bdc8:	00050793          	mv	a5,a0
2040bdcc:	00078713          	mv	a4,a5
2040bdd0:	fdc42783          	lw	a5,-36(s0)
2040bdd4:	08e79e23          	sh	a4,156(a5)
      saw_escape_start_ = false;
2040bdd8:	fdc42783          	lw	a5,-36(s0)
2040bddc:	00078823          	sb	zero,16(a5)
      state_ = State::kFindPacketLength;
2040bde0:	fdc42783          	lw	a5,-36(s0)
2040bde4:	00100713          	li	a4,1
2040bde8:	00e78223          	sb	a4,4(a5)
      i++;
2040bdec:	fec42783          	lw	a5,-20(s0)
2040bdf0:	00178793          	addi	a5,a5,1
2040bdf4:	fef42623          	sw	a5,-20(s0)
      break;
2040bdf8:	00000013          	nop
2040bdfc:	01c0006f          	j	2040be18 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x120>
    } else {
      saw_escape_start_ = false;
2040be00:	fdc42783          	lw	a5,-36(s0)
2040be04:	00078823          	sb	zero,16(a5)
  for (i = 0; i < input_size_bytes_; ++i) {
2040be08:	fec42783          	lw	a5,-20(s0)
2040be0c:	00178793          	addi	a5,a5,1
2040be10:	fef42623          	sw	a5,-20(s0)
2040be14:	f01ff06f          	j	2040bd14 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x1c>
    }
  }

  input_ += i;
2040be18:	fdc42783          	lw	a5,-36(s0)
2040be1c:	0087a703          	lw	a4,8(a5)
2040be20:	fec42783          	lw	a5,-20(s0)
2040be24:	00f70733          	add	a4,a4,a5
2040be28:	fdc42783          	lw	a5,-36(s0)
2040be2c:	00e7a423          	sw	a4,8(a5)
  input_size_bytes_ -= i;
2040be30:	fdc42783          	lw	a5,-36(s0)
2040be34:	00c7a703          	lw	a4,12(a5)
2040be38:	fec42783          	lw	a5,-20(s0)
2040be3c:	40f70733          	sub	a4,a4,a5
2040be40:	fdc42783          	lw	a5,-36(s0)
2040be44:	00e7a623          	sw	a4,12(a5)
  return kTvmErrorNoError;
2040be48:	00000793          	li	a5,0
}
2040be4c:	00078513          	mv	a0,a5
2040be50:	02c12083          	lw	ra,44(sp)
2040be54:	02812403          	lw	s0,40(sp)
2040be58:	02412483          	lw	s1,36(sp)
2040be5c:	03010113          	addi	sp,sp,48
2040be60:	00008067          	ret

2040be64 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb>:

tvm_crt_error_t Unframer::ConsumeInput(uint8_t* buffer, size_t buffer_size_bytes,
                                       size_t* bytes_filled, bool update_crc) {
2040be64:	fc010113          	addi	sp,sp,-64
2040be68:	02112e23          	sw	ra,60(sp)
2040be6c:	02812c23          	sw	s0,56(sp)
2040be70:	04010413          	addi	s0,sp,64
2040be74:	fca42e23          	sw	a0,-36(s0)
2040be78:	fcb42c23          	sw	a1,-40(s0)
2040be7c:	fcc42a23          	sw	a2,-44(s0)
2040be80:	fcd42823          	sw	a3,-48(s0)
2040be84:	00070793          	mv	a5,a4
2040be88:	fcf407a3          	sb	a5,-49(s0)
  CHECK(*bytes_filled < buffer_size_bytes);
2040be8c:	fd042783          	lw	a5,-48(s0)
2040be90:	0007a783          	lw	a5,0(a5)
2040be94:	fd442703          	lw	a4,-44(s0)
2040be98:	02e7e263          	bltu	a5,a4,2040bebc <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x58>
2040be9c:	00015617          	auipc	a2,0x15
2040bea0:	07860613          	addi	a2,a2,120 # 20420f14 <crc_tabccitt+0x274>
2040bea4:	09900593          	li	a1,153
2040bea8:	00015517          	auipc	a0,0x15
2040beac:	02050513          	addi	a0,a0,32 # 20420ec8 <crc_tabccitt+0x228>
2040beb0:	3a9010ef          	jal	ra,2040da58 <TVMLogf>
2040beb4:	50000513          	li	a0,1280
2040beb8:	ab9f40ef          	jal	ra,20400970 <TVMPlatformAbort>
  tvm_crt_error_t to_return = kTvmErrorNoError;
2040bebc:	fe042623          	sw	zero,-20(s0)
  size_t i;
  for (i = 0; i < input_size_bytes_; ++i) {
2040bec0:	fe042423          	sw	zero,-24(s0)
2040bec4:	fdc42783          	lw	a5,-36(s0)
2040bec8:	00c7a783          	lw	a5,12(a5)
2040becc:	fe842703          	lw	a4,-24(s0)
2040bed0:	18f77c63          	bleu	a5,a4,2040c068 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
    uint8_t c = input_[i];
2040bed4:	fdc42783          	lw	a5,-36(s0)
2040bed8:	0087a703          	lw	a4,8(a5)
2040bedc:	fe842783          	lw	a5,-24(s0)
2040bee0:	00f707b3          	add	a5,a4,a5
2040bee4:	0007c783          	lbu	a5,0(a5)
2040bee8:	fef403a3          	sb	a5,-25(s0)
    if (saw_escape_start_) {
2040beec:	fdc42783          	lw	a5,-36(s0)
2040bef0:	0107c783          	lbu	a5,16(a5)
2040bef4:	0c078c63          	beqz	a5,2040bfcc <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x168>
      saw_escape_start_ = false;
2040bef8:	fdc42783          	lw	a5,-36(s0)
2040befc:	00078823          	sb	zero,16(a5)
      if (c == to_integral(Escape::kPacketStart)) {
2040bf00:	0fd00513          	li	a0,253
2040bf04:	dcdff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040bf08:	00050793          	mv	a5,a0
2040bf0c:	00078713          	mv	a4,a5
2040bf10:	fe744783          	lbu	a5,-25(s0)
2040bf14:	40e787b3          	sub	a5,a5,a4
2040bf18:	0017b793          	seqz	a5,a5
2040bf1c:	0ff7f793          	andi	a5,a5,255
2040bf20:	04078663          	beqz	a5,2040bf6c <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x108>
        // When the start packet sequence is seen, abort unframing the current packet. Since the
        // escape byte has already been parsed, update the CRC include only the escape byte. This
        // readies the unframer to consume the kPacketStart byte on the next Write() call.
        uint8_t escape_start = to_integral(Escape::kEscapeStart);
2040bf24:	fff00793          	li	a5,-1
2040bf28:	fef40323          	sb	a5,-26(s0)
        crc_ = crc16_compute(&escape_start, 1, nullptr);
2040bf2c:	fe640793          	addi	a5,s0,-26
2040bf30:	00000613          	li	a2,0
2040bf34:	00100593          	li	a1,1
2040bf38:	00078513          	mv	a0,a5
2040bf3c:	acdff0ef          	jal	ra,2040ba08 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040bf40:	00050793          	mv	a5,a0
2040bf44:	00078713          	mv	a4,a5
2040bf48:	fdc42783          	lw	a5,-36(s0)
2040bf4c:	08e79e23          	sh	a4,156(a5)
        to_return = kTvmErrorFramingShortPacket;
2040bf50:	20100793          	li	a5,513
2040bf54:	fef42623          	sw	a5,-20(s0)
        saw_escape_start_ = true;
2040bf58:	fdc42783          	lw	a5,-36(s0)
2040bf5c:	00100713          	li	a4,1
2040bf60:	00e78823          	sb	a4,16(a5)

        break;
2040bf64:	00000013          	nop
2040bf68:	1000006f          	j	2040c068 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
      } else if (c == to_integral(Escape::kEscapeNop)) {
2040bf6c:	0fe00513          	li	a0,254
2040bf70:	d61ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040bf74:	00050793          	mv	a5,a0
2040bf78:	00078713          	mv	a4,a5
2040bf7c:	fe744783          	lbu	a5,-25(s0)
2040bf80:	40e787b3          	sub	a5,a5,a4
2040bf84:	0017b793          	seqz	a5,a5
2040bf88:	0ff7f793          	andi	a5,a5,255
2040bf8c:	0c079463          	bnez	a5,2040c054 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1f0>
        continue;
      } else if (c == to_integral(Escape::kEscapeStart)) {
2040bf90:	0ff00513          	li	a0,255
2040bf94:	d3dff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040bf98:	00050793          	mv	a5,a0
2040bf9c:	00078713          	mv	a4,a5
2040bfa0:	fe744783          	lbu	a5,-25(s0)
2040bfa4:	40e787b3          	sub	a5,a5,a4
2040bfa8:	0017b793          	seqz	a5,a5
2040bfac:	0ff7f793          	andi	a5,a5,255
2040bfb0:	04079c63          	bnez	a5,2040c008 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1a4>
        // do nothing (allow character to be printed)
      } else {
        // Invalid escape sequence.
        to_return = kTvmErrorFramingInvalidEscape;
2040bfb4:	20200793          	li	a5,514
2040bfb8:	fef42623          	sw	a5,-20(s0)
        i++;
2040bfbc:	fe842783          	lw	a5,-24(s0)
2040bfc0:	00178793          	addi	a5,a5,1
2040bfc4:	fef42423          	sw	a5,-24(s0)
        break;
2040bfc8:	0a00006f          	j	2040c068 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
      }
    } else if (c == to_integral(Escape::kEscapeStart)) {
2040bfcc:	0ff00513          	li	a0,255
2040bfd0:	d01ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040bfd4:	00050793          	mv	a5,a0
2040bfd8:	00078713          	mv	a4,a5
2040bfdc:	fe744783          	lbu	a5,-25(s0)
2040bfe0:	40e787b3          	sub	a5,a5,a4
2040bfe4:	0017b793          	seqz	a5,a5
2040bfe8:	0ff7f793          	andi	a5,a5,255
2040bfec:	00078a63          	beqz	a5,2040c000 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x19c>
      saw_escape_start_ = true;
2040bff0:	fdc42783          	lw	a5,-36(s0)
2040bff4:	00100713          	li	a4,1
2040bff8:	00e78823          	sb	a4,16(a5)
      continue;
2040bffc:	05c0006f          	j	2040c058 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1f4>
    } else {
      saw_escape_start_ = false;
2040c000:	fdc42783          	lw	a5,-36(s0)
2040c004:	00078823          	sb	zero,16(a5)
    }

    buffer[*bytes_filled] = c;
2040c008:	fd042783          	lw	a5,-48(s0)
2040c00c:	0007a783          	lw	a5,0(a5)
2040c010:	fd842703          	lw	a4,-40(s0)
2040c014:	00f707b3          	add	a5,a4,a5
2040c018:	fe744703          	lbu	a4,-25(s0)
2040c01c:	00e78023          	sb	a4,0(a5)
    (*bytes_filled)++;
2040c020:	fd042783          	lw	a5,-48(s0)
2040c024:	0007a783          	lw	a5,0(a5)
2040c028:	00178713          	addi	a4,a5,1
2040c02c:	fd042783          	lw	a5,-48(s0)
2040c030:	00e7a023          	sw	a4,0(a5)
    if (*bytes_filled == buffer_size_bytes) {
2040c034:	fd042783          	lw	a5,-48(s0)
2040c038:	0007a783          	lw	a5,0(a5)
2040c03c:	fd442703          	lw	a4,-44(s0)
2040c040:	00f71c63          	bne	a4,a5,2040c058 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1f4>
      i++;
2040c044:	fe842783          	lw	a5,-24(s0)
2040c048:	00178793          	addi	a5,a5,1
2040c04c:	fef42423          	sw	a5,-24(s0)
      break;
2040c050:	0180006f          	j	2040c068 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
        continue;
2040c054:	00000013          	nop
  for (i = 0; i < input_size_bytes_; ++i) {
2040c058:	fe842783          	lw	a5,-24(s0)
2040c05c:	00178793          	addi	a5,a5,1
2040c060:	fef42423          	sw	a5,-24(s0)
2040c064:	e61ff06f          	j	2040bec4 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x60>
    }
  }

  if (update_crc) {
2040c068:	fcf44783          	lbu	a5,-49(s0)
2040c06c:	02078a63          	beqz	a5,2040c0a0 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x23c>
    crc_ = crc16_compute(input_, i, &crc_);
2040c070:	fdc42783          	lw	a5,-36(s0)
2040c074:	0087a703          	lw	a4,8(a5)
2040c078:	fdc42783          	lw	a5,-36(s0)
2040c07c:	09c78793          	addi	a5,a5,156
2040c080:	00078613          	mv	a2,a5
2040c084:	fe842583          	lw	a1,-24(s0)
2040c088:	00070513          	mv	a0,a4
2040c08c:	97dff0ef          	jal	ra,2040ba08 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040c090:	00050793          	mv	a5,a0
2040c094:	00078713          	mv	a4,a5
2040c098:	fdc42783          	lw	a5,-36(s0)
2040c09c:	08e79e23          	sh	a4,156(a5)
  }

  input_ += i;
2040c0a0:	fdc42783          	lw	a5,-36(s0)
2040c0a4:	0087a703          	lw	a4,8(a5)
2040c0a8:	fe842783          	lw	a5,-24(s0)
2040c0ac:	00f70733          	add	a4,a4,a5
2040c0b0:	fdc42783          	lw	a5,-36(s0)
2040c0b4:	00e7a423          	sw	a4,8(a5)
  input_size_bytes_ -= i;
2040c0b8:	fdc42783          	lw	a5,-36(s0)
2040c0bc:	00c7a703          	lw	a4,12(a5)
2040c0c0:	fe842783          	lw	a5,-24(s0)
2040c0c4:	40f70733          	sub	a4,a4,a5
2040c0c8:	fdc42783          	lw	a5,-36(s0)
2040c0cc:	00e7a623          	sw	a4,12(a5)
  return to_return;
2040c0d0:	fec42783          	lw	a5,-20(s0)
}
2040c0d4:	00078513          	mv	a0,a5
2040c0d8:	03c12083          	lw	ra,60(sp)
2040c0dc:	03812403          	lw	s0,56(sp)
2040c0e0:	04010113          	addi	sp,sp,64
2040c0e4:	00008067          	ret

2040c0e8 <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>:

tvm_crt_error_t Unframer::AddToBuffer(size_t buffer_full_bytes, bool update_crc) {
2040c0e8:	fe010113          	addi	sp,sp,-32
2040c0ec:	00112e23          	sw	ra,28(sp)
2040c0f0:	00812c23          	sw	s0,24(sp)
2040c0f4:	02010413          	addi	s0,sp,32
2040c0f8:	fea42623          	sw	a0,-20(s0)
2040c0fc:	feb42423          	sw	a1,-24(s0)
2040c100:	00060793          	mv	a5,a2
2040c104:	fef403a3          	sb	a5,-25(s0)
  CHECK(!IsBufferFull(buffer_full_bytes));
2040c108:	fe842583          	lw	a1,-24(s0)
2040c10c:	fec42503          	lw	a0,-20(s0)
2040c110:	11d000ef          	jal	ra,2040ca2c <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>
2040c114:	00050793          	mv	a5,a0
2040c118:	02078263          	beqz	a5,2040c13c <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb+0x54>
2040c11c:	00015617          	auipc	a2,0x15
2040c120:	e1c60613          	addi	a2,a2,-484 # 20420f38 <crc_tabccitt+0x298>
2040c124:	0cd00593          	li	a1,205
2040c128:	00015517          	auipc	a0,0x15
2040c12c:	da050513          	addi	a0,a0,-608 # 20420ec8 <crc_tabccitt+0x228>
2040c130:	129010ef          	jal	ra,2040da58 <TVMLogf>
2040c134:	50000513          	li	a0,1280
2040c138:	839f40ef          	jal	ra,20400970 <TVMPlatformAbort>
  return ConsumeInput(buffer_, buffer_full_bytes, &num_buffer_bytes_valid_, update_crc);
2040c13c:	fec42783          	lw	a5,-20(s0)
2040c140:	01178593          	addi	a1,a5,17
2040c144:	fec42783          	lw	a5,-20(s0)
2040c148:	09478793          	addi	a5,a5,148
2040c14c:	fe744703          	lbu	a4,-25(s0)
2040c150:	00078693          	mv	a3,a5
2040c154:	fe842603          	lw	a2,-24(s0)
2040c158:	fec42503          	lw	a0,-20(s0)
2040c15c:	d09ff0ef          	jal	ra,2040be64 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb>
2040c160:	00050793          	mv	a5,a0
}
2040c164:	00078513          	mv	a0,a5
2040c168:	01c12083          	lw	ra,28(sp)
2040c16c:	01812403          	lw	s0,24(sp)
2040c170:	02010113          	addi	sp,sp,32
2040c174:	00008067          	ret

2040c178 <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>:

void Unframer::ClearBuffer() { num_buffer_bytes_valid_ = 0; }
2040c178:	fe010113          	addi	sp,sp,-32
2040c17c:	00812e23          	sw	s0,28(sp)
2040c180:	02010413          	addi	s0,sp,32
2040c184:	fea42623          	sw	a0,-20(s0)
2040c188:	fec42783          	lw	a5,-20(s0)
2040c18c:	0807aa23          	sw	zero,148(a5)
2040c190:	00000013          	nop
2040c194:	01c12403          	lw	s0,28(sp)
2040c198:	02010113          	addi	sp,sp,32
2040c19c:	00008067          	ret

2040c1a0 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv>:

tvm_crt_error_t Unframer::FindPacketLength() {
2040c1a0:	fd010113          	addi	sp,sp,-48
2040c1a4:	02112623          	sw	ra,44(sp)
2040c1a8:	02812423          	sw	s0,40(sp)
2040c1ac:	03010413          	addi	s0,sp,48
2040c1b0:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t to_return = AddToBuffer(PacketFieldSizeBytes::kPayloadLength, true);
2040c1b4:	00100613          	li	a2,1
2040c1b8:	00400593          	li	a1,4
2040c1bc:	fdc42503          	lw	a0,-36(s0)
2040c1c0:	f29ff0ef          	jal	ra,2040c0e8 <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>
2040c1c4:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c1c8:	fec42783          	lw	a5,-20(s0)
2040c1cc:	00078663          	beqz	a5,2040c1d8 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0x38>
    return to_return;
2040c1d0:	fec42783          	lw	a5,-20(s0)
2040c1d4:	0540006f          	j	2040c228 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0x88>
  }

  if (!IsBufferFull(PacketFieldSizeBytes::kPayloadLength)) {
2040c1d8:	00400593          	li	a1,4
2040c1dc:	fdc42503          	lw	a0,-36(s0)
2040c1e0:	04d000ef          	jal	ra,2040ca2c <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>
2040c1e4:	00050793          	mv	a5,a0
2040c1e8:	0017c793          	xori	a5,a5,1
2040c1ec:	0ff7f793          	andi	a5,a5,255
2040c1f0:	00078663          	beqz	a5,2040c1fc <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0x5c>
    return to_return;
2040c1f4:	fec42783          	lw	a5,-20(s0)
2040c1f8:	0300006f          	j	2040c228 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0x88>
  }

  num_payload_bytes_remaining_ = *reinterpret_cast<uint32_t*>(buffer_);
2040c1fc:	fdc42783          	lw	a5,-36(s0)
2040c200:	01178793          	addi	a5,a5,17
2040c204:	0007a703          	lw	a4,0(a5)
2040c208:	fdc42783          	lw	a5,-36(s0)
2040c20c:	08e7ac23          	sw	a4,152(a5)
  TVM_UNFRAMER_DEBUG_LOG("payload length: 0x%zx", num_payload_bytes_remaining_);
  ClearBuffer();
2040c210:	fdc42503          	lw	a0,-36(s0)
2040c214:	f65ff0ef          	jal	ra,2040c178 <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  state_ = State::kFindPacketCrc;
2040c218:	fdc42783          	lw	a5,-36(s0)
2040c21c:	00200713          	li	a4,2
2040c220:	00e78223          	sb	a4,4(a5)
  return to_return;
2040c224:	fec42783          	lw	a5,-20(s0)
}
2040c228:	00078513          	mv	a0,a5
2040c22c:	02c12083          	lw	ra,44(sp)
2040c230:	02812403          	lw	s0,40(sp)
2040c234:	03010113          	addi	sp,sp,48
2040c238:	00008067          	ret

2040c23c <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv>:

tvm_crt_error_t Unframer::FindPacketCrc() {
2040c23c:	fb010113          	addi	sp,sp,-80
2040c240:	04112623          	sw	ra,76(sp)
2040c244:	04812423          	sw	s0,72(sp)
2040c248:	05010413          	addi	s0,sp,80
2040c24c:	faa42e23          	sw	a0,-68(s0)
  //  CHECK(num_buffer_bytes_valid_ == 0);
  while (num_payload_bytes_remaining_ > 0) {
2040c250:	fbc42783          	lw	a5,-68(s0)
2040c254:	0987a783          	lw	a5,152(a5)
2040c258:	18078263          	beqz	a5,2040c3dc <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1a0>
    size_t num_bytes_to_buffer = num_payload_bytes_remaining_;
2040c25c:	fbc42783          	lw	a5,-68(s0)
2040c260:	0987a783          	lw	a5,152(a5)
2040c264:	fef42623          	sw	a5,-20(s0)
    if (num_bytes_to_buffer > sizeof(buffer_)) {
2040c268:	fec42703          	lw	a4,-20(s0)
2040c26c:	08000793          	li	a5,128
2040c270:	00e7f663          	bleu	a4,a5,2040c27c <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x40>
      num_bytes_to_buffer = sizeof(buffer_);
2040c274:	08000793          	li	a5,128
2040c278:	fef42623          	sw	a5,-20(s0)
    }

    // remember in case we need to rewind due to WriteAll() error.
    size_t prev_input_size_bytes = input_size_bytes_;
2040c27c:	fbc42783          	lw	a5,-68(s0)
2040c280:	00c7a783          	lw	a5,12(a5)
2040c284:	fef42223          	sw	a5,-28(s0)
    size_t prev_num_buffer_bytes_valid = num_buffer_bytes_valid_;
2040c288:	fbc42783          	lw	a5,-68(s0)
2040c28c:	0947a783          	lw	a5,148(a5)
2040c290:	fef42023          	sw	a5,-32(s0)
    {
      tvm_crt_error_t to_return = AddToBuffer(num_bytes_to_buffer, true);
2040c294:	00100613          	li	a2,1
2040c298:	fec42583          	lw	a1,-20(s0)
2040c29c:	fbc42503          	lw	a0,-68(s0)
2040c2a0:	e49ff0ef          	jal	ra,2040c0e8 <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>
2040c2a4:	fca42e23          	sw	a0,-36(s0)
      if (to_return != kTvmErrorNoError) {
2040c2a8:	fdc42783          	lw	a5,-36(s0)
2040c2ac:	00078663          	beqz	a5,2040c2b8 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x7c>
        return to_return;
2040c2b0:	fdc42783          	lw	a5,-36(s0)
2040c2b4:	1440006f          	j	2040c3f8 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1bc>
      }
    }

    if (prev_num_buffer_bytes_valid == num_buffer_bytes_valid_) {
2040c2b8:	fbc42783          	lw	a5,-68(s0)
2040c2bc:	0947a783          	lw	a5,148(a5)
2040c2c0:	fe042703          	lw	a4,-32(s0)
2040c2c4:	00f71663          	bne	a4,a5,2040c2d0 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x94>
      // Return if no bytes were consumed from the input.
      return kTvmErrorNoError;
2040c2c8:	00000793          	li	a5,0
2040c2cc:	12c0006f          	j	2040c3f8 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1bc>
    }

    {
      size_t bytes_consumed;
      tvm_crt_error_t to_return =
          stream_->WriteAll(buffer_, num_buffer_bytes_valid_, &bytes_consumed);
2040c2d0:	fbc42783          	lw	a5,-68(s0)
2040c2d4:	0007a703          	lw	a4,0(a5)
2040c2d8:	fbc42783          	lw	a5,-68(s0)
2040c2dc:	01178593          	addi	a1,a5,17
2040c2e0:	fbc42783          	lw	a5,-68(s0)
2040c2e4:	0947a783          	lw	a5,148(a5)
2040c2e8:	fcc40693          	addi	a3,s0,-52
2040c2ec:	00078613          	mv	a2,a5
2040c2f0:	00070513          	mv	a0,a4
2040c2f4:	520010ef          	jal	ra,2040d814 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj>
2040c2f8:	fca42c23          	sw	a0,-40(s0)
      num_payload_bytes_remaining_ -= bytes_consumed;
2040c2fc:	fbc42783          	lw	a5,-68(s0)
2040c300:	0987a703          	lw	a4,152(a5)
2040c304:	fcc42783          	lw	a5,-52(s0)
2040c308:	40f70733          	sub	a4,a4,a5
2040c30c:	fbc42783          	lw	a5,-68(s0)
2040c310:	08e7ac23          	sw	a4,152(a5)
      if (to_return != kTvmErrorNoError) {
2040c314:	fd842783          	lw	a5,-40(s0)
2040c318:	0a078c63          	beqz	a5,2040c3d0 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x194>
        // rewind input, skipping escape bytes.
        size_t buffer_bytes_consumed;
        const uint8_t* input = input_ - (prev_input_size_bytes - input_size_bytes_);
2040c31c:	fbc42783          	lw	a5,-68(s0)
2040c320:	0087a703          	lw	a4,8(a5)
2040c324:	fbc42783          	lw	a5,-68(s0)
2040c328:	00c7a683          	lw	a3,12(a5)
2040c32c:	fe442783          	lw	a5,-28(s0)
2040c330:	40f687b3          	sub	a5,a3,a5
2040c334:	00f707b3          	add	a5,a4,a5
2040c338:	fcf42a23          	sw	a5,-44(s0)
        for (buffer_bytes_consumed = 0; bytes_consumed > 0; ++buffer_bytes_consumed) {
2040c33c:	fe042423          	sw	zero,-24(s0)
2040c340:	fcc42783          	lw	a5,-52(s0)
2040c344:	02078c63          	beqz	a5,2040c37c <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x140>
          if (input[buffer_bytes_consumed] != uint8_t(Escape::kEscapeStart)) {
2040c348:	fd442703          	lw	a4,-44(s0)
2040c34c:	fe842783          	lw	a5,-24(s0)
2040c350:	00f707b3          	add	a5,a4,a5
2040c354:	0007c703          	lbu	a4,0(a5)
2040c358:	0ff00793          	li	a5,255
2040c35c:	00f70863          	beq	a4,a5,2040c36c <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x130>
            bytes_consumed--;
2040c360:	fcc42783          	lw	a5,-52(s0)
2040c364:	fff78793          	addi	a5,a5,-1
2040c368:	fcf42623          	sw	a5,-52(s0)
        for (buffer_bytes_consumed = 0; bytes_consumed > 0; ++buffer_bytes_consumed) {
2040c36c:	fe842783          	lw	a5,-24(s0)
2040c370:	00178793          	addi	a5,a5,1
2040c374:	fef42423          	sw	a5,-24(s0)
2040c378:	fc9ff06f          	j	2040c340 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x104>
          }
        }

        size_t bytes_to_rewind = prev_input_size_bytes - buffer_bytes_consumed;
2040c37c:	fe442703          	lw	a4,-28(s0)
2040c380:	fe842783          	lw	a5,-24(s0)
2040c384:	40f707b3          	sub	a5,a4,a5
2040c388:	fcf42823          	sw	a5,-48(s0)
        input_ -= bytes_to_rewind;
2040c38c:	fbc42783          	lw	a5,-68(s0)
2040c390:	0087a703          	lw	a4,8(a5)
2040c394:	fd042783          	lw	a5,-48(s0)
2040c398:	40f007b3          	neg	a5,a5
2040c39c:	00f70733          	add	a4,a4,a5
2040c3a0:	fbc42783          	lw	a5,-68(s0)
2040c3a4:	00e7a423          	sw	a4,8(a5)
        input_size_bytes_ += bytes_to_rewind;
2040c3a8:	fbc42783          	lw	a5,-68(s0)
2040c3ac:	00c7a703          	lw	a4,12(a5)
2040c3b0:	fd042783          	lw	a5,-48(s0)
2040c3b4:	00f70733          	add	a4,a4,a5
2040c3b8:	fbc42783          	lw	a5,-68(s0)
2040c3bc:	00e7a623          	sw	a4,12(a5)

        // must not have seen escape, since AddToBuffer won't stop in the middle.
        saw_escape_start_ = false;
2040c3c0:	fbc42783          	lw	a5,-68(s0)
2040c3c4:	00078823          	sb	zero,16(a5)

        return to_return;
2040c3c8:	fd842783          	lw	a5,-40(s0)
2040c3cc:	02c0006f          	j	2040c3f8 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1bc>
      }
    }

    ClearBuffer();
2040c3d0:	fbc42503          	lw	a0,-68(s0)
2040c3d4:	da5ff0ef          	jal	ra,2040c178 <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  while (num_payload_bytes_remaining_ > 0) {
2040c3d8:	e79ff06f          	j	2040c250 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x14>
  }

  if (num_payload_bytes_remaining_ == 0) {
2040c3dc:	fbc42783          	lw	a5,-68(s0)
2040c3e0:	0987a783          	lw	a5,152(a5)
2040c3e4:	00079863          	bnez	a5,2040c3f4 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1b8>
    state_ = State::kFindCrcEnd;
2040c3e8:	fbc42783          	lw	a5,-68(s0)
2040c3ec:	00300713          	li	a4,3
2040c3f0:	00e78223          	sb	a4,4(a5)
  }

  return kTvmErrorNoError;
2040c3f4:	00000793          	li	a5,0
}
2040c3f8:	00078513          	mv	a0,a5
2040c3fc:	04c12083          	lw	ra,76(sp)
2040c400:	04812403          	lw	s0,72(sp)
2040c404:	05010113          	addi	sp,sp,80
2040c408:	00008067          	ret

2040c40c <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv>:

tvm_crt_error_t Unframer::FindCrcEnd() {
2040c40c:	fd010113          	addi	sp,sp,-48
2040c410:	02112623          	sw	ra,44(sp)
2040c414:	02812423          	sw	s0,40(sp)
2040c418:	03010413          	addi	s0,sp,48
2040c41c:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t to_return = AddToBuffer(PacketFieldSizeBytes::kCrc, false);
2040c420:	00000613          	li	a2,0
2040c424:	00200593          	li	a1,2
2040c428:	fdc42503          	lw	a0,-36(s0)
2040c42c:	cbdff0ef          	jal	ra,2040c0e8 <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>
2040c430:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c434:	fec42783          	lw	a5,-20(s0)
2040c438:	00078663          	beqz	a5,2040c444 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0x38>
    return to_return;
2040c43c:	fec42783          	lw	a5,-20(s0)
2040c440:	0840006f          	j	2040c4c4 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0xb8>
  }

  if (!IsBufferFull(PacketFieldSizeBytes::kCrc)) {
2040c444:	00200593          	li	a1,2
2040c448:	fdc42503          	lw	a0,-36(s0)
2040c44c:	5e0000ef          	jal	ra,2040ca2c <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>
2040c450:	00050793          	mv	a5,a0
2040c454:	0017c793          	xori	a5,a5,1
2040c458:	0ff7f793          	andi	a5,a5,255
2040c45c:	00078663          	beqz	a5,2040c468 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0x5c>
    return kTvmErrorNoError;
2040c460:	00000793          	li	a5,0
2040c464:	0600006f          	j	2040c4c4 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0xb8>
  }

  // TODO(areusch): Handle endianness.
  stream_->PacketDone(crc_ == *reinterpret_cast<uint16_t*>(buffer_));
2040c468:	fdc42783          	lw	a5,-36(s0)
2040c46c:	0007a683          	lw	a3,0(a5)
2040c470:	fdc42783          	lw	a5,-36(s0)
2040c474:	0007a783          	lw	a5,0(a5)
2040c478:	0007a783          	lw	a5,0(a5)
2040c47c:	00c78793          	addi	a5,a5,12
2040c480:	0007a603          	lw	a2,0(a5)
2040c484:	fdc42783          	lw	a5,-36(s0)
2040c488:	09c7d703          	lhu	a4,156(a5)
2040c48c:	fdc42783          	lw	a5,-36(s0)
2040c490:	01178793          	addi	a5,a5,17
2040c494:	0007d783          	lhu	a5,0(a5)
2040c498:	40f707b3          	sub	a5,a4,a5
2040c49c:	0017b793          	seqz	a5,a5
2040c4a0:	0ff7f793          	andi	a5,a5,255
2040c4a4:	00078593          	mv	a1,a5
2040c4a8:	00068513          	mv	a0,a3
2040c4ac:	000600e7          	jalr	a2
  ClearBuffer();
2040c4b0:	fdc42503          	lw	a0,-36(s0)
2040c4b4:	cc5ff0ef          	jal	ra,2040c178 <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  state_ = State::kFindPacketStart;
2040c4b8:	fdc42783          	lw	a5,-36(s0)
2040c4bc:	00078223          	sb	zero,4(a5)
  return kTvmErrorNoError;
2040c4c0:	00000793          	li	a5,0
}
2040c4c4:	00078513          	mv	a0,a5
2040c4c8:	02c12083          	lw	ra,44(sp)
2040c4cc:	02812403          	lw	s0,40(sp)
2040c4d0:	03010113          	addi	sp,sp,48
2040c4d4:	00008067          	ret

2040c4d8 <_ZN3tvm7runtime9micro_rpc6Framer5ResetEv>:

void Framer::Reset() { state_ = State::kReset; }
2040c4d8:	fe010113          	addi	sp,sp,-32
2040c4dc:	00812e23          	sw	s0,28(sp)
2040c4e0:	02010413          	addi	s0,sp,32
2040c4e4:	fea42623          	sw	a0,-20(s0)
2040c4e8:	fec42783          	lw	a5,-20(s0)
2040c4ec:	00078223          	sb	zero,4(a5)
2040c4f0:	00000013          	nop
2040c4f4:	01c12403          	lw	s0,28(sp)
2040c4f8:	02010113          	addi	sp,sp,32
2040c4fc:	00008067          	ret

2040c500 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj>:

tvm_crt_error_t Framer::Write(const uint8_t* payload, size_t payload_size_bytes) {
2040c500:	fd010113          	addi	sp,sp,-48
2040c504:	02112623          	sw	ra,44(sp)
2040c508:	02812423          	sw	s0,40(sp)
2040c50c:	03010413          	addi	s0,sp,48
2040c510:	fca42e23          	sw	a0,-36(s0)
2040c514:	fcb42c23          	sw	a1,-40(s0)
2040c518:	fcc42a23          	sw	a2,-44(s0)
  tvm_crt_error_t to_return;
  to_return = StartPacket(payload_size_bytes);
2040c51c:	fd442583          	lw	a1,-44(s0)
2040c520:	fdc42503          	lw	a0,-36(s0)
2040c524:	060000ef          	jal	ra,2040c584 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj>
2040c528:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c52c:	fec42783          	lw	a5,-20(s0)
2040c530:	00078663          	beqz	a5,2040c53c <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x3c>
    return to_return;
2040c534:	fec42783          	lw	a5,-20(s0)
2040c538:	0380006f          	j	2040c570 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x70>
  }

  to_return = WritePayloadChunk(payload, payload_size_bytes);
2040c53c:	fd442603          	lw	a2,-44(s0)
2040c540:	fd842583          	lw	a1,-40(s0)
2040c544:	fdc42503          	lw	a0,-36(s0)
2040c548:	398000ef          	jal	ra,2040c8e0 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>
2040c54c:	fea42623          	sw	a0,-20(s0)
  if (to_return != 0) {
2040c550:	fec42783          	lw	a5,-20(s0)
2040c554:	00078663          	beqz	a5,2040c560 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x60>
    return to_return;
2040c558:	fec42783          	lw	a5,-20(s0)
2040c55c:	0140006f          	j	2040c570 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x70>
  }

  to_return = FinishPacket();
2040c560:	fdc42503          	lw	a0,-36(s0)
2040c564:	42c000ef          	jal	ra,2040c990 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>
2040c568:	fea42623          	sw	a0,-20(s0)
  return to_return;
2040c56c:	fec42783          	lw	a5,-20(s0)
}
2040c570:	00078513          	mv	a0,a5
2040c574:	02c12083          	lw	ra,44(sp)
2040c578:	02812403          	lw	s0,40(sp)
2040c57c:	03010113          	addi	sp,sp,48
2040c580:	00008067          	ret

2040c584 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj>:

tvm_crt_error_t Framer::StartPacket(size_t payload_size_bytes) {
2040c584:	fc010113          	addi	sp,sp,-64
2040c588:	02112e23          	sw	ra,60(sp)
2040c58c:	02812c23          	sw	s0,56(sp)
2040c590:	04010413          	addi	s0,sp,64
2040c594:	fca42623          	sw	a0,-52(s0)
2040c598:	fcb42423          	sw	a1,-56(s0)
  uint8_t packet_header[sizeof(uint32_t)];
  size_t ptr = 0;
2040c59c:	fe042623          	sw	zero,-20(s0)
  if (state_ == State::kReset) {
2040c5a0:	fcc42783          	lw	a5,-52(s0)
2040c5a4:	0047c783          	lbu	a5,4(a5)
2040c5a8:	06079263          	bnez	a5,2040c60c <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x88>
    packet_header[ptr] = to_integral(Escape::kEscapeNop);
2040c5ac:	0fe00513          	li	a0,254
2040c5b0:	f20ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c5b4:	00050793          	mv	a5,a0
2040c5b8:	00078713          	mv	a4,a5
2040c5bc:	fec42783          	lw	a5,-20(s0)
2040c5c0:	ff040693          	addi	a3,s0,-16
2040c5c4:	00f687b3          	add	a5,a3,a5
2040c5c8:	fee78823          	sb	a4,-16(a5)
    ptr++;
2040c5cc:	fec42783          	lw	a5,-20(s0)
2040c5d0:	00178793          	addi	a5,a5,1
2040c5d4:	fef42623          	sw	a5,-20(s0)
    tvm_crt_error_t to_return =
        WriteAndCrc(packet_header, ptr, false /* escape */, false /* update_crc */);
2040c5d8:	fe040793          	addi	a5,s0,-32
2040c5dc:	00000713          	li	a4,0
2040c5e0:	00000693          	li	a3,0
2040c5e4:	fec42603          	lw	a2,-20(s0)
2040c5e8:	00078593          	mv	a1,a5
2040c5ec:	fcc42503          	lw	a0,-52(s0)
2040c5f0:	110000ef          	jal	ra,2040c700 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040c5f4:	fea42423          	sw	a0,-24(s0)
    if (to_return != kTvmErrorNoError) {
2040c5f8:	fe842783          	lw	a5,-24(s0)
2040c5fc:	00078663          	beqz	a5,2040c608 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x84>
      return to_return;
2040c600:	fe842783          	lw	a5,-24(s0)
2040c604:	0e80006f          	j	2040c6ec <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x168>
    }

    ptr = 0;
2040c608:	fe042623          	sw	zero,-20(s0)
  }

  packet_header[ptr] = to_integral(Escape::kEscapeStart);
2040c60c:	0ff00513          	li	a0,255
2040c610:	ec0ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c614:	00050793          	mv	a5,a0
2040c618:	00078713          	mv	a4,a5
2040c61c:	fec42783          	lw	a5,-20(s0)
2040c620:	ff040693          	addi	a3,s0,-16
2040c624:	00f687b3          	add	a5,a3,a5
2040c628:	fee78823          	sb	a4,-16(a5)
  ptr++;
2040c62c:	fec42783          	lw	a5,-20(s0)
2040c630:	00178793          	addi	a5,a5,1
2040c634:	fef42623          	sw	a5,-20(s0)
  packet_header[ptr] = to_integral(Escape::kPacketStart);
2040c638:	0fd00513          	li	a0,253
2040c63c:	e94ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c640:	00050793          	mv	a5,a0
2040c644:	00078713          	mv	a4,a5
2040c648:	fec42783          	lw	a5,-20(s0)
2040c64c:	ff040693          	addi	a3,s0,-16
2040c650:	00f687b3          	add	a5,a3,a5
2040c654:	fee78823          	sb	a4,-16(a5)
  ptr++;
2040c658:	fec42783          	lw	a5,-20(s0)
2040c65c:	00178793          	addi	a5,a5,1
2040c660:	fef42623          	sw	a5,-20(s0)

  crc_ = 0xffff;
2040c664:	fcc42783          	lw	a5,-52(s0)
2040c668:	fff00713          	li	a4,-1
2040c66c:	00e79623          	sh	a4,12(a5)
  tvm_crt_error_t to_return =
      WriteAndCrc(packet_header, ptr, false /* escape */, true /* update_crc */);
2040c670:	fe040793          	addi	a5,s0,-32
2040c674:	00100713          	li	a4,1
2040c678:	00000693          	li	a3,0
2040c67c:	fec42603          	lw	a2,-20(s0)
2040c680:	00078593          	mv	a1,a5
2040c684:	fcc42503          	lw	a0,-52(s0)
2040c688:	078000ef          	jal	ra,2040c700 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040c68c:	fea42223          	sw	a0,-28(s0)
  if (to_return != kTvmErrorNoError) {
2040c690:	fe442783          	lw	a5,-28(s0)
2040c694:	00078663          	beqz	a5,2040c6a0 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x11c>
    return to_return;
2040c698:	fe442783          	lw	a5,-28(s0)
2040c69c:	0500006f          	j	2040c6ec <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x168>
  }

  uint32_t payload_size_wire = payload_size_bytes;
2040c6a0:	fc842783          	lw	a5,-56(s0)
2040c6a4:	fcf42e23          	sw	a5,-36(s0)
  to_return = WriteAndCrc(reinterpret_cast<uint8_t*>(&payload_size_wire), sizeof(payload_size_wire),
2040c6a8:	fdc40793          	addi	a5,s0,-36
2040c6ac:	00100713          	li	a4,1
2040c6b0:	00100693          	li	a3,1
2040c6b4:	00400613          	li	a2,4
2040c6b8:	00078593          	mv	a1,a5
2040c6bc:	fcc42503          	lw	a0,-52(s0)
2040c6c0:	040000ef          	jal	ra,2040c700 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040c6c4:	fea42223          	sw	a0,-28(s0)
                          true /* escape */, true /* update_crc */);
  if (to_return == kTvmErrorNoError) {
2040c6c8:	fe442783          	lw	a5,-28(s0)
2040c6cc:	00079e63          	bnez	a5,2040c6e8 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x164>
    state_ = State::kTransmitPacketPayload;
2040c6d0:	fcc42783          	lw	a5,-52(s0)
2040c6d4:	00200713          	li	a4,2
2040c6d8:	00e78223          	sb	a4,4(a5)
    num_payload_bytes_remaining_ = payload_size_bytes;
2040c6dc:	fcc42783          	lw	a5,-52(s0)
2040c6e0:	fc842703          	lw	a4,-56(s0)
2040c6e4:	00e7a423          	sw	a4,8(a5)
  }

  return to_return;
2040c6e8:	fe442783          	lw	a5,-28(s0)
}
2040c6ec:	00078513          	mv	a0,a5
2040c6f0:	03c12083          	lw	ra,60(sp)
2040c6f4:	03812403          	lw	s0,56(sp)
2040c6f8:	04010113          	addi	sp,sp,64
2040c6fc:	00008067          	ret

2040c700 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>:

tvm_crt_error_t Framer::WriteAndCrc(const uint8_t* data, size_t data_size_bytes, bool escape,
                                    bool update_crc) {
2040c700:	f4010113          	addi	sp,sp,-192
2040c704:	0a112e23          	sw	ra,188(sp)
2040c708:	0a812c23          	sw	s0,184(sp)
2040c70c:	0c010413          	addi	s0,sp,192
2040c710:	f4a42623          	sw	a0,-180(s0)
2040c714:	f4b42423          	sw	a1,-184(s0)
2040c718:	f4c42223          	sw	a2,-188(s0)
2040c71c:	00068793          	mv	a5,a3
2040c720:	f4f401a3          	sb	a5,-189(s0)
2040c724:	00070793          	mv	a5,a4
2040c728:	f4f40123          	sb	a5,-190(s0)
  while (data_size_bytes > 0) {
2040c72c:	f4442783          	lw	a5,-188(s0)
2040c730:	18078c63          	beqz	a5,2040c8c8 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x1c8>
    uint8_t buffer[kMaxStackBufferSizeBytes];
    size_t buffer_ptr = 0;
2040c734:	fe042623          	sw	zero,-20(s0)
    size_t i;
    for (i = 0; i < data_size_bytes && buffer_ptr != kMaxStackBufferSizeBytes; ++i) {
2040c738:	fe042423          	sw	zero,-24(s0)
2040c73c:	fe842703          	lw	a4,-24(s0)
2040c740:	f4442783          	lw	a5,-188(s0)
2040c744:	0ef77c63          	bleu	a5,a4,2040c83c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x13c>
2040c748:	fec42703          	lw	a4,-20(s0)
2040c74c:	08000793          	li	a5,128
2040c750:	0ef70663          	beq	a4,a5,2040c83c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x13c>
      uint8_t c = data[i];
2040c754:	f4842703          	lw	a4,-184(s0)
2040c758:	fe842783          	lw	a5,-24(s0)
2040c75c:	00f707b3          	add	a5,a4,a5
2040c760:	0007c783          	lbu	a5,0(a5)
2040c764:	fef403a3          	sb	a5,-25(s0)
      if (!escape || c != to_integral(Escape::kEscapeStart)) {
2040c768:	f4344783          	lbu	a5,-189(s0)
2040c76c:	0017c793          	xori	a5,a5,1
2040c770:	0ff7f793          	andi	a5,a5,255
2040c774:	00079e63          	bnez	a5,2040c790 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x90>
2040c778:	0ff00513          	li	a0,255
2040c77c:	d54ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c780:	00050793          	mv	a5,a0
2040c784:	00078713          	mv	a4,a5
2040c788:	fe744783          	lbu	a5,-25(s0)
2040c78c:	00e78663          	beq	a5,a4,2040c798 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x98>
2040c790:	00100793          	li	a5,1
2040c794:	0080006f          	j	2040c79c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x9c>
2040c798:	00000793          	li	a5,0
2040c79c:	02078463          	beqz	a5,2040c7c4 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0xc4>
        buffer[buffer_ptr] = c;
2040c7a0:	fec42783          	lw	a5,-20(s0)
2040c7a4:	ff040693          	addi	a3,s0,-16
2040c7a8:	00f687b3          	add	a5,a3,a5
2040c7ac:	fe744703          	lbu	a4,-25(s0)
2040c7b0:	f6e78623          	sb	a4,-148(a5)
        buffer_ptr++;
2040c7b4:	fec42783          	lw	a5,-20(s0)
2040c7b8:	00178793          	addi	a5,a5,1
2040c7bc:	fef42623          	sw	a5,-20(s0)
        continue;
2040c7c0:	0680006f          	j	2040c828 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x128>
      }

      if (buffer_ptr == kMaxStackBufferSizeBytes - 1) {
2040c7c4:	fec42703          	lw	a4,-20(s0)
2040c7c8:	07f00793          	li	a5,127
2040c7cc:	06f70663          	beq	a4,a5,2040c838 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x138>
        break;
      }

      buffer[buffer_ptr] = to_integral(Escape::kEscapeStart);
2040c7d0:	0ff00513          	li	a0,255
2040c7d4:	cfcff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c7d8:	00050793          	mv	a5,a0
2040c7dc:	00078713          	mv	a4,a5
2040c7e0:	fec42783          	lw	a5,-20(s0)
2040c7e4:	ff040693          	addi	a3,s0,-16
2040c7e8:	00f687b3          	add	a5,a3,a5
2040c7ec:	f6e78623          	sb	a4,-148(a5)
      buffer_ptr++;
2040c7f0:	fec42783          	lw	a5,-20(s0)
2040c7f4:	00178793          	addi	a5,a5,1
2040c7f8:	fef42623          	sw	a5,-20(s0)

      buffer[buffer_ptr] = to_integral(Escape::kEscapeStart);
2040c7fc:	0ff00513          	li	a0,255
2040c800:	cd0ff0ef          	jal	ra,2040bcd0 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c804:	00050793          	mv	a5,a0
2040c808:	00078713          	mv	a4,a5
2040c80c:	fec42783          	lw	a5,-20(s0)
2040c810:	ff040693          	addi	a3,s0,-16
2040c814:	00f687b3          	add	a5,a3,a5
2040c818:	f6e78623          	sb	a4,-148(a5)
      buffer_ptr++;
2040c81c:	fec42783          	lw	a5,-20(s0)
2040c820:	00178793          	addi	a5,a5,1
2040c824:	fef42623          	sw	a5,-20(s0)
    for (i = 0; i < data_size_bytes && buffer_ptr != kMaxStackBufferSizeBytes; ++i) {
2040c828:	fe842783          	lw	a5,-24(s0)
2040c82c:	00178793          	addi	a5,a5,1
2040c830:	fef42423          	sw	a5,-24(s0)
2040c834:	f09ff06f          	j	2040c73c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x3c>
        break;
2040c838:	00000013          	nop
    }

    size_t bytes_consumed;
    tvm_crt_error_t to_return = stream_->WriteAll(buffer, buffer_ptr, &bytes_consumed);
2040c83c:	f4c42783          	lw	a5,-180(s0)
2040c840:	0007a783          	lw	a5,0(a5)
2040c844:	fdc40693          	addi	a3,s0,-36
2040c848:	f5c40713          	addi	a4,s0,-164
2040c84c:	fec42603          	lw	a2,-20(s0)
2040c850:	00070593          	mv	a1,a4
2040c854:	00078513          	mv	a0,a5
2040c858:	7bd000ef          	jal	ra,2040d814 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj>
2040c85c:	fea42023          	sw	a0,-32(s0)
    if (to_return != kTvmErrorNoError) {
2040c860:	fe042783          	lw	a5,-32(s0)
2040c864:	00078663          	beqz	a5,2040c870 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x170>
      return to_return;
2040c868:	fe042783          	lw	a5,-32(s0)
2040c86c:	0600006f          	j	2040c8cc <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x1cc>
    }

    if (update_crc) {
2040c870:	f4244783          	lbu	a5,-190(s0)
2040c874:	02078863          	beqz	a5,2040c8a4 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x1a4>
      crc_ = crc16_compute(buffer, buffer_ptr, &crc_);
2040c878:	f4c42783          	lw	a5,-180(s0)
2040c87c:	00c78713          	addi	a4,a5,12
2040c880:	f5c40793          	addi	a5,s0,-164
2040c884:	00070613          	mv	a2,a4
2040c888:	fec42583          	lw	a1,-20(s0)
2040c88c:	00078513          	mv	a0,a5
2040c890:	978ff0ef          	jal	ra,2040ba08 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040c894:	00050793          	mv	a5,a0
2040c898:	00078713          	mv	a4,a5
2040c89c:	f4c42783          	lw	a5,-180(s0)
2040c8a0:	00e79623          	sh	a4,12(a5)
    }

    data_size_bytes -= i;
2040c8a4:	f4442703          	lw	a4,-188(s0)
2040c8a8:	fe842783          	lw	a5,-24(s0)
2040c8ac:	40f707b3          	sub	a5,a4,a5
2040c8b0:	f4f42223          	sw	a5,-188(s0)
    data += i;
2040c8b4:	f4842703          	lw	a4,-184(s0)
2040c8b8:	fe842783          	lw	a5,-24(s0)
2040c8bc:	00f707b3          	add	a5,a4,a5
2040c8c0:	f4f42423          	sw	a5,-184(s0)
  while (data_size_bytes > 0) {
2040c8c4:	e69ff06f          	j	2040c72c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x2c>
  }

  return kTvmErrorNoError;
2040c8c8:	00000793          	li	a5,0
}
2040c8cc:	00078513          	mv	a0,a5
2040c8d0:	0bc12083          	lw	ra,188(sp)
2040c8d4:	0b812403          	lw	s0,184(sp)
2040c8d8:	0c010113          	addi	sp,sp,192
2040c8dc:	00008067          	ret

2040c8e0 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>:

tvm_crt_error_t Framer::WritePayloadChunk(const uint8_t* payload_chunk,
                                          size_t payload_chunk_size_bytes) {
2040c8e0:	fd010113          	addi	sp,sp,-48
2040c8e4:	02112623          	sw	ra,44(sp)
2040c8e8:	02812423          	sw	s0,40(sp)
2040c8ec:	03010413          	addi	s0,sp,48
2040c8f0:	fca42e23          	sw	a0,-36(s0)
2040c8f4:	fcb42c23          	sw	a1,-40(s0)
2040c8f8:	fcc42a23          	sw	a2,-44(s0)
  if (state_ != State::kTransmitPacketPayload) {
2040c8fc:	fdc42783          	lw	a5,-36(s0)
2040c900:	0047c703          	lbu	a4,4(a5)
2040c904:	00200793          	li	a5,2
2040c908:	00f70663          	beq	a4,a5,2040c914 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x34>
    return kTvmErrorFramingInvalidState;
2040c90c:	20000793          	li	a5,512
2040c910:	06c0006f          	j	2040c97c <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x9c>
  } else if (payload_chunk_size_bytes > num_payload_bytes_remaining_) {
2040c914:	fdc42783          	lw	a5,-36(s0)
2040c918:	0087a783          	lw	a5,8(a5)
2040c91c:	fd442703          	lw	a4,-44(s0)
2040c920:	00e7f663          	bleu	a4,a5,2040c92c <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x4c>
    return kTvmErrorFramingPayloadOverflow;
2040c924:	20300793          	li	a5,515
2040c928:	0540006f          	j	2040c97c <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x9c>
  }

  TVM_FRAMER_DEBUG_LOG("write payload chunk: %" PRIuMAX " bytes", payload_chunk_size_bytes);
  tvm_crt_error_t to_return = WriteAndCrc(payload_chunk, payload_chunk_size_bytes,
                                          true /* escape */, true /* update_crc */);
2040c92c:	00100713          	li	a4,1
2040c930:	00100693          	li	a3,1
2040c934:	fd442603          	lw	a2,-44(s0)
2040c938:	fd842583          	lw	a1,-40(s0)
2040c93c:	fdc42503          	lw	a0,-36(s0)
2040c940:	dc1ff0ef          	jal	ra,2040c700 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040c944:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c948:	fec42783          	lw	a5,-20(s0)
2040c94c:	00078a63          	beqz	a5,2040c960 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x80>
    state_ = State::kReset;
2040c950:	fdc42783          	lw	a5,-36(s0)
2040c954:	00078223          	sb	zero,4(a5)
    return to_return;
2040c958:	fec42783          	lw	a5,-20(s0)
2040c95c:	0200006f          	j	2040c97c <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x9c>
  }

  num_payload_bytes_remaining_ -= payload_chunk_size_bytes;
2040c960:	fdc42783          	lw	a5,-36(s0)
2040c964:	0087a703          	lw	a4,8(a5)
2040c968:	fd442783          	lw	a5,-44(s0)
2040c96c:	40f70733          	sub	a4,a4,a5
2040c970:	fdc42783          	lw	a5,-36(s0)
2040c974:	00e7a423          	sw	a4,8(a5)
  return kTvmErrorNoError;
2040c978:	00000793          	li	a5,0
}
2040c97c:	00078513          	mv	a0,a5
2040c980:	02c12083          	lw	ra,44(sp)
2040c984:	02812403          	lw	s0,40(sp)
2040c988:	03010113          	addi	sp,sp,48
2040c98c:	00008067          	ret

2040c990 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>:

tvm_crt_error_t Framer::FinishPacket() {
2040c990:	fd010113          	addi	sp,sp,-48
2040c994:	02112623          	sw	ra,44(sp)
2040c998:	02812423          	sw	s0,40(sp)
2040c99c:	03010413          	addi	s0,sp,48
2040c9a0:	fca42e23          	sw	a0,-36(s0)
  if (state_ != State::kTransmitPacketPayload) {
2040c9a4:	fdc42783          	lw	a5,-36(s0)
2040c9a8:	0047c703          	lbu	a4,4(a5)
2040c9ac:	00200793          	li	a5,2
2040c9b0:	00f70663          	beq	a4,a5,2040c9bc <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x2c>
    return kTvmErrorFramingInvalidState;
2040c9b4:	20000793          	li	a5,512
2040c9b8:	0600006f          	j	2040ca18 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x88>
  } else if (num_payload_bytes_remaining_ != 0) {
2040c9bc:	fdc42783          	lw	a5,-36(s0)
2040c9c0:	0087a783          	lw	a5,8(a5)
2040c9c4:	00078663          	beqz	a5,2040c9d0 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x40>
    return kTvmErrorFramingPayloadIncomplete;
2040c9c8:	20400793          	li	a5,516
2040c9cc:	04c0006f          	j	2040ca18 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x88>
  }

  tvm_crt_error_t to_return = WriteAndCrc(reinterpret_cast<uint8_t*>(&crc_), sizeof(crc_),
2040c9d0:	fdc42783          	lw	a5,-36(s0)
2040c9d4:	00c78793          	addi	a5,a5,12
                                          true /* escape */, false /* update_crc */);
2040c9d8:	00000713          	li	a4,0
2040c9dc:	00100693          	li	a3,1
2040c9e0:	00200613          	li	a2,2
2040c9e4:	00078593          	mv	a1,a5
2040c9e8:	fdc42503          	lw	a0,-36(s0)
2040c9ec:	d15ff0ef          	jal	ra,2040c700 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040c9f0:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c9f4:	fec42783          	lw	a5,-20(s0)
2040c9f8:	00078863          	beqz	a5,2040ca08 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x78>
    TVM_FRAMER_DEBUG_LOG("write and crc returned: %02x", to_return);
    state_ = State::kReset;
2040c9fc:	fdc42783          	lw	a5,-36(s0)
2040ca00:	00078223          	sb	zero,4(a5)
2040ca04:	0100006f          	j	2040ca14 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x84>
  } else {
    state_ = State::kIdle;
2040ca08:	fdc42783          	lw	a5,-36(s0)
2040ca0c:	00100713          	li	a4,1
2040ca10:	00e78223          	sb	a4,4(a5)
  }
  return to_return;
2040ca14:	fec42783          	lw	a5,-20(s0)
}
2040ca18:	00078513          	mv	a0,a5
2040ca1c:	02c12083          	lw	ra,44(sp)
2040ca20:	02812403          	lw	s0,40(sp)
2040ca24:	03010113          	addi	sp,sp,48
2040ca28:	00008067          	ret

2040ca2c <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>:
  tvm_crt_error_t FindPacketStart();
  tvm_crt_error_t FindPacketLength();
  tvm_crt_error_t FindPacketCrc();
  tvm_crt_error_t FindCrcEnd();

  bool IsBufferFull(size_t buffer_full_bytes) {
2040ca2c:	fe010113          	addi	sp,sp,-32
2040ca30:	00812e23          	sw	s0,28(sp)
2040ca34:	02010413          	addi	s0,sp,32
2040ca38:	fea42623          	sw	a0,-20(s0)
2040ca3c:	feb42423          	sw	a1,-24(s0)
    return num_buffer_bytes_valid_ >= buffer_full_bytes;
2040ca40:	fec42783          	lw	a5,-20(s0)
2040ca44:	0947a783          	lw	a5,148(a5)
2040ca48:	fe842703          	lw	a4,-24(s0)
2040ca4c:	00e7b7b3          	sltu	a5,a5,a4
2040ca50:	0017c793          	xori	a5,a5,1
2040ca54:	0ff7f793          	andi	a5,a5,255
  }
2040ca58:	00078513          	mv	a0,a5
2040ca5c:	01c12403          	lw	s0,28(sp)
2040ca60:	02010113          	addi	sp,sp,32
2040ca64:	00008067          	ret

2040ca68 <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv>:

struct microtvm_session_start_payload_t {
  uint8_t version;
};

void Session::RegenerateNonce() {
2040ca68:	fe010113          	addi	sp,sp,-32
2040ca6c:	00812e23          	sw	s0,28(sp)
2040ca70:	02010413          	addi	s0,sp,32
2040ca74:	fea42623          	sw	a0,-20(s0)
  local_nonce_ = (((local_nonce_ << 5) | (local_nonce_ >> 5)) + 1);
2040ca78:	fec42783          	lw	a5,-20(s0)
2040ca7c:	0007c783          	lbu	a5,0(a5)
2040ca80:	00579793          	slli	a5,a5,0x5
2040ca84:	01879713          	slli	a4,a5,0x18
2040ca88:	41875713          	srai	a4,a4,0x18
2040ca8c:	fec42783          	lw	a5,-20(s0)
2040ca90:	0007c783          	lbu	a5,0(a5)
2040ca94:	4057d793          	srai	a5,a5,0x5
2040ca98:	01879793          	slli	a5,a5,0x18
2040ca9c:	4187d793          	srai	a5,a5,0x18
2040caa0:	00f767b3          	or	a5,a4,a5
2040caa4:	01879793          	slli	a5,a5,0x18
2040caa8:	4187d793          	srai	a5,a5,0x18
2040caac:	0ff7f793          	andi	a5,a5,255
2040cab0:	00178793          	addi	a5,a5,1
2040cab4:	0ff7f713          	andi	a4,a5,255
2040cab8:	fec42783          	lw	a5,-20(s0)
2040cabc:	00e78023          	sb	a4,0(a5)

  if (local_nonce_ == kInvalidNonce) {
2040cac0:	fec42783          	lw	a5,-20(s0)
2040cac4:	0007c783          	lbu	a5,0(a5)
2040cac8:	00079e63          	bnez	a5,2040cae4 <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv+0x7c>
    local_nonce_++;
2040cacc:	fec42783          	lw	a5,-20(s0)
2040cad0:	0007c783          	lbu	a5,0(a5)
2040cad4:	00178793          	addi	a5,a5,1
2040cad8:	0ff7f713          	andi	a4,a5,255
2040cadc:	fec42783          	lw	a5,-20(s0)
2040cae0:	00e78023          	sb	a4,0(a5)
  }
}
2040cae4:	00000013          	nop
2040cae8:	01c12403          	lw	s0,28(sp)
2040caec:	02010113          	addi	sp,sp,32
2040caf0:	00008067          	ret

2040caf4 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>:

tvm_crt_error_t Session::SendInternal(MessageType message_type, const uint8_t* message_data,
                                      size_t message_size_bytes) {
2040caf4:	fd010113          	addi	sp,sp,-48
2040caf8:	02112623          	sw	ra,44(sp)
2040cafc:	02812423          	sw	s0,40(sp)
2040cb00:	03010413          	addi	s0,sp,48
2040cb04:	fca42e23          	sw	a0,-36(s0)
2040cb08:	00058793          	mv	a5,a1
2040cb0c:	fcc42a23          	sw	a2,-44(s0)
2040cb10:	fcd42823          	sw	a3,-48(s0)
2040cb14:	fcf40da3          	sb	a5,-37(s0)
  tvm_crt_error_t to_return = StartMessage(message_type, message_size_bytes);
2040cb18:	fdb44783          	lbu	a5,-37(s0)
2040cb1c:	fd042603          	lw	a2,-48(s0)
2040cb20:	00078593          	mv	a1,a5
2040cb24:	fdc42503          	lw	a0,-36(s0)
2040cb28:	06c000ef          	jal	ra,2040cb94 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj>
2040cb2c:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040cb30:	fec42783          	lw	a5,-20(s0)
2040cb34:	00078663          	beqz	a5,2040cb40 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x4c>
    return to_return;
2040cb38:	fec42783          	lw	a5,-20(s0)
2040cb3c:	0440006f          	j	2040cb80 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x8c>
  }

  if (message_size_bytes > 0) {
2040cb40:	fd042783          	lw	a5,-48(s0)
2040cb44:	02078463          	beqz	a5,2040cb6c <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x78>
    to_return = SendBodyChunk(message_data, message_size_bytes);
2040cb48:	fd042603          	lw	a2,-48(s0)
2040cb4c:	fd442583          	lw	a1,-44(s0)
2040cb50:	fdc42503          	lw	a0,-36(s0)
2040cb54:	0e8000ef          	jal	ra,2040cc3c <_ZN3tvm7runtime9micro_rpc7Session13SendBodyChunkEPKhj>
2040cb58:	fea42623          	sw	a0,-20(s0)
    if (to_return != kTvmErrorNoError) {
2040cb5c:	fec42783          	lw	a5,-20(s0)
2040cb60:	00078663          	beqz	a5,2040cb6c <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x78>
      return to_return;
2040cb64:	fec42783          	lw	a5,-20(s0)
2040cb68:	0180006f          	j	2040cb80 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x8c>
    }
  }

  return framer_->FinishPacket();
2040cb6c:	fdc42783          	lw	a5,-36(s0)
2040cb70:	0107a783          	lw	a5,16(a5)
2040cb74:	00078513          	mv	a0,a5
2040cb78:	e19ff0ef          	jal	ra,2040c990 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>
2040cb7c:	00050793          	mv	a5,a0
}
2040cb80:	00078513          	mv	a0,a5
2040cb84:	02c12083          	lw	ra,44(sp)
2040cb88:	02812403          	lw	s0,40(sp)
2040cb8c:	03010113          	addi	sp,sp,48
2040cb90:	00008067          	ret

2040cb94 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj>:

tvm_crt_error_t Session::StartMessage(MessageType message_type, size_t message_size_bytes) {
2040cb94:	fd010113          	addi	sp,sp,-48
2040cb98:	02112623          	sw	ra,44(sp)
2040cb9c:	02812423          	sw	s0,40(sp)
2040cba0:	03010413          	addi	s0,sp,48
2040cba4:	fca42e23          	sw	a0,-36(s0)
2040cba8:	00058793          	mv	a5,a1
2040cbac:	fcc42a23          	sw	a2,-44(s0)
2040cbb0:	fcf40da3          	sb	a5,-37(s0)
  SessionHeader header{session_id_, message_type};
2040cbb4:	fdc42783          	lw	a5,-36(s0)
2040cbb8:	0027d783          	lhu	a5,2(a5)
2040cbbc:	fef41423          	sh	a5,-24(s0)
2040cbc0:	fdb44783          	lbu	a5,-37(s0)
2040cbc4:	fef40523          	sb	a5,-22(s0)
  if (message_type == MessageType::kLog) {
2040cbc8:	fdb44703          	lbu	a4,-37(s0)
2040cbcc:	00300793          	li	a5,3
2040cbd0:	00f71463          	bne	a4,a5,2040cbd8 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj+0x44>
    header.session_id = 0;
2040cbd4:	fe041423          	sh	zero,-24(s0)
  }

  tvm_crt_error_t to_return = framer_->StartPacket(message_size_bytes + sizeof(SessionHeader));
2040cbd8:	fdc42783          	lw	a5,-36(s0)
2040cbdc:	0107a703          	lw	a4,16(a5)
2040cbe0:	fd442783          	lw	a5,-44(s0)
2040cbe4:	00378793          	addi	a5,a5,3
2040cbe8:	00078593          	mv	a1,a5
2040cbec:	00070513          	mv	a0,a4
2040cbf0:	995ff0ef          	jal	ra,2040c584 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj>
2040cbf4:	fea42623          	sw	a0,-20(s0)
  if (to_return != 0) {
2040cbf8:	fec42783          	lw	a5,-20(s0)
2040cbfc:	00078663          	beqz	a5,2040cc08 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj+0x74>
    return to_return;
2040cc00:	fec42783          	lw	a5,-20(s0)
2040cc04:	0240006f          	j	2040cc28 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj+0x94>
  }

  return framer_->WritePayloadChunk(reinterpret_cast<uint8_t*>(&header), sizeof(SessionHeader));
2040cc08:	fdc42783          	lw	a5,-36(s0)
2040cc0c:	0107a783          	lw	a5,16(a5)
2040cc10:	fe840713          	addi	a4,s0,-24
2040cc14:	00300613          	li	a2,3
2040cc18:	00070593          	mv	a1,a4
2040cc1c:	00078513          	mv	a0,a5
2040cc20:	cc1ff0ef          	jal	ra,2040c8e0 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>
2040cc24:	00050793          	mv	a5,a0
}
2040cc28:	00078513          	mv	a0,a5
2040cc2c:	02c12083          	lw	ra,44(sp)
2040cc30:	02812403          	lw	s0,40(sp)
2040cc34:	03010113          	addi	sp,sp,48
2040cc38:	00008067          	ret

2040cc3c <_ZN3tvm7runtime9micro_rpc7Session13SendBodyChunkEPKhj>:

tvm_crt_error_t Session::SendBodyChunk(const uint8_t* chunk, size_t chunk_size_bytes) {
2040cc3c:	fe010113          	addi	sp,sp,-32
2040cc40:	00112e23          	sw	ra,28(sp)
2040cc44:	00812c23          	sw	s0,24(sp)
2040cc48:	02010413          	addi	s0,sp,32
2040cc4c:	fea42623          	sw	a0,-20(s0)
2040cc50:	feb42423          	sw	a1,-24(s0)
2040cc54:	fec42223          	sw	a2,-28(s0)
  return framer_->WritePayloadChunk(chunk, chunk_size_bytes);
2040cc58:	fec42783          	lw	a5,-20(s0)
2040cc5c:	0107a783          	lw	a5,16(a5)
2040cc60:	fe442603          	lw	a2,-28(s0)
2040cc64:	fe842583          	lw	a1,-24(s0)
2040cc68:	00078513          	mv	a0,a5
2040cc6c:	c75ff0ef          	jal	ra,2040c8e0 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>
2040cc70:	00050793          	mv	a5,a0
}
2040cc74:	00078513          	mv	a0,a5
2040cc78:	01c12083          	lw	ra,28(sp)
2040cc7c:	01812403          	lw	s0,24(sp)
2040cc80:	02010113          	addi	sp,sp,32
2040cc84:	00008067          	ret

2040cc88 <_ZN3tvm7runtime9micro_rpc7Session13FinishMessageEv>:

tvm_crt_error_t Session::FinishMessage() { return framer_->FinishPacket(); }
2040cc88:	fe010113          	addi	sp,sp,-32
2040cc8c:	00112e23          	sw	ra,28(sp)
2040cc90:	00812c23          	sw	s0,24(sp)
2040cc94:	02010413          	addi	s0,sp,32
2040cc98:	fea42623          	sw	a0,-20(s0)
2040cc9c:	fec42783          	lw	a5,-20(s0)
2040cca0:	0107a783          	lw	a5,16(a5)
2040cca4:	00078513          	mv	a0,a5
2040cca8:	ce9ff0ef          	jal	ra,2040c990 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>
2040ccac:	00050793          	mv	a5,a0
2040ccb0:	00078513          	mv	a0,a5
2040ccb4:	01c12083          	lw	ra,28(sp)
2040ccb8:	01812403          	lw	s0,24(sp)
2040ccbc:	02010113          	addi	sp,sp,32
2040ccc0:	00008067          	ret

2040ccc4 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv>:

tvm_crt_error_t Session::StartSession() {
2040ccc4:	fd010113          	addi	sp,sp,-48
2040ccc8:	02112623          	sw	ra,44(sp)
2040cccc:	02812423          	sw	s0,40(sp)
2040ccd0:	03010413          	addi	s0,sp,48
2040ccd4:	fca42e23          	sw	a0,-36(s0)
  CHECK_NE(state_, State::kReset, "must call Initialize");
2040ccd8:	fdc42783          	lw	a5,-36(s0)
2040ccdc:	0047c783          	lbu	a5,4(a5)
2040cce0:	02079a63          	bnez	a5,2040cd14 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv+0x50>
2040cce4:	00014717          	auipc	a4,0x14
2040cce8:	27870713          	addi	a4,a4,632 # 20420f5c <crc_tabccitt+0x2bc>
2040ccec:	00014697          	auipc	a3,0x14
2040ccf0:	28068693          	addi	a3,a3,640 # 20420f6c <crc_tabccitt+0x2cc>
2040ccf4:	00014617          	auipc	a2,0x14
2040ccf8:	27c60613          	addi	a2,a2,636 # 20420f70 <crc_tabccitt+0x2d0>
2040ccfc:	05400593          	li	a1,84
2040cd00:	00014517          	auipc	a0,0x14
2040cd04:	27850513          	addi	a0,a0,632 # 20420f78 <crc_tabccitt+0x2d8>
2040cd08:	551000ef          	jal	ra,2040da58 <TVMLogf>
2040cd0c:	50000513          	li	a0,1280
2040cd10:	c61f30ef          	jal	ra,20400970 <TVMPlatformAbort>

  RegenerateNonce();
2040cd14:	fdc42503          	lw	a0,-36(s0)
2040cd18:	d51ff0ef          	jal	ra,2040ca68 <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv>
  SetSessionId(local_nonce_, 0);
2040cd1c:	fdc42783          	lw	a5,-36(s0)
2040cd20:	0007c783          	lbu	a5,0(a5)
2040cd24:	00000613          	li	a2,0
2040cd28:	00078593          	mv	a1,a5
2040cd2c:	fdc42503          	lw	a0,-36(s0)
2040cd30:	1a5000ef          	jal	ra,2040d6d4 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
  microtvm_session_start_payload_t payload = {Session::kVersion};
2040cd34:	00100793          	li	a5,1
2040cd38:	fef40423          	sb	a5,-24(s0)
  tvm_crt_error_t to_return = SendInternal(MessageType::kStartSessionInit,
                                           reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040cd3c:	fe840793          	addi	a5,s0,-24
2040cd40:	00100693          	li	a3,1
2040cd44:	00078613          	mv	a2,a5
2040cd48:	00000593          	li	a1,0
2040cd4c:	fdc42503          	lw	a0,-36(s0)
2040cd50:	da5ff0ef          	jal	ra,2040caf4 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040cd54:	fea42623          	sw	a0,-20(s0)
  if (to_return == 0) {
2040cd58:	fec42783          	lw	a5,-20(s0)
2040cd5c:	00079863          	bnez	a5,2040cd6c <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv+0xa8>
    state_ = State::kStartSessionSent;
2040cd60:	fdc42783          	lw	a5,-36(s0)
2040cd64:	00200713          	li	a4,2
2040cd68:	00e78223          	sb	a4,4(a5)
  }

  return to_return;
2040cd6c:	fec42783          	lw	a5,-20(s0)
}
2040cd70:	00078513          	mv	a0,a5
2040cd74:	02c12083          	lw	ra,44(sp)
2040cd78:	02812403          	lw	s0,40(sp)
2040cd7c:	03010113          	addi	sp,sp,48
2040cd80:	00008067          	ret

2040cd84 <_ZN3tvm7runtime9micro_rpc7Session10InitializeEh>:

tvm_crt_error_t Session::Initialize(uint8_t initial_session_nonce) {
2040cd84:	fe010113          	addi	sp,sp,-32
2040cd88:	00112e23          	sw	ra,28(sp)
2040cd8c:	00812c23          	sw	s0,24(sp)
2040cd90:	02010413          	addi	s0,sp,32
2040cd94:	fea42623          	sw	a0,-20(s0)
2040cd98:	00058793          	mv	a5,a1
2040cd9c:	fef405a3          	sb	a5,-21(s0)
  local_nonce_ = initial_session_nonce;
2040cda0:	fec42783          	lw	a5,-20(s0)
2040cda4:	feb44703          	lbu	a4,-21(s0)
2040cda8:	00e78023          	sb	a4,0(a5)
  return TerminateSession();
2040cdac:	fec42503          	lw	a0,-20(s0)
2040cdb0:	01c000ef          	jal	ra,2040cdcc <_ZN3tvm7runtime9micro_rpc7Session16TerminateSessionEv>
2040cdb4:	00050793          	mv	a5,a0
}
2040cdb8:	00078513          	mv	a0,a5
2040cdbc:	01c12083          	lw	ra,28(sp)
2040cdc0:	01812403          	lw	s0,24(sp)
2040cdc4:	02010113          	addi	sp,sp,32
2040cdc8:	00008067          	ret

2040cdcc <_ZN3tvm7runtime9micro_rpc7Session16TerminateSessionEv>:

tvm_crt_error_t Session::TerminateSession() {
2040cdcc:	fe010113          	addi	sp,sp,-32
2040cdd0:	00112e23          	sw	ra,28(sp)
2040cdd4:	00812c23          	sw	s0,24(sp)
2040cdd8:	02010413          	addi	s0,sp,32
2040cddc:	fea42623          	sw	a0,-20(s0)
  SetSessionId(0, 0);
2040cde0:	00000613          	li	a2,0
2040cde4:	00000593          	li	a1,0
2040cde8:	fec42503          	lw	a0,-20(s0)
2040cdec:	0e9000ef          	jal	ra,2040d6d4 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
  state_ = State::kNoSessionEstablished;
2040cdf0:	fec42783          	lw	a5,-20(s0)
2040cdf4:	00100713          	li	a4,1
2040cdf8:	00e78223          	sb	a4,4(a5)
  return SendInternal(MessageType::kTerminateSession, nullptr, 0);
2040cdfc:	00000693          	li	a3,0
2040ce00:	00000613          	li	a2,0
2040ce04:	00200593          	li	a1,2
2040ce08:	fec42503          	lw	a0,-20(s0)
2040ce0c:	ce9ff0ef          	jal	ra,2040caf4 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040ce10:	00050793          	mv	a5,a0
}
2040ce14:	00078513          	mv	a0,a5
2040ce18:	01c12083          	lw	ra,28(sp)
2040ce1c:	01812403          	lw	s0,24(sp)
2040ce20:	02010113          	addi	sp,sp,32
2040ce24:	00008067          	ret

2040ce28 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj>:

tvm_crt_error_t Session::SendMessage(MessageType message_type, const uint8_t* message_data,
                                     size_t message_size_bytes) {
2040ce28:	fe010113          	addi	sp,sp,-32
2040ce2c:	00112e23          	sw	ra,28(sp)
2040ce30:	00812c23          	sw	s0,24(sp)
2040ce34:	02010413          	addi	s0,sp,32
2040ce38:	fea42623          	sw	a0,-20(s0)
2040ce3c:	00058793          	mv	a5,a1
2040ce40:	fec42223          	sw	a2,-28(s0)
2040ce44:	fed42023          	sw	a3,-32(s0)
2040ce48:	fef405a3          	sb	a5,-21(s0)
  if (state_ != State::kSessionEstablished && message_type != MessageType::kLog) {
2040ce4c:	fec42783          	lw	a5,-20(s0)
2040ce50:	0047c703          	lbu	a4,4(a5)
2040ce54:	00300793          	li	a5,3
2040ce58:	00f70c63          	beq	a4,a5,2040ce70 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj+0x48>
2040ce5c:	feb44703          	lbu	a4,-21(s0)
2040ce60:	00300793          	li	a5,3
2040ce64:	00f70663          	beq	a4,a5,2040ce70 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj+0x48>
    return kTvmErrorSessionInvalidState;
2040ce68:	40000793          	li	a5,1024
2040ce6c:	0200006f          	j	2040ce8c <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj+0x64>
  }

  return SendInternal(message_type, message_data, message_size_bytes);
2040ce70:	feb44783          	lbu	a5,-21(s0)
2040ce74:	fe042683          	lw	a3,-32(s0)
2040ce78:	fe442603          	lw	a2,-28(s0)
2040ce7c:	00078593          	mv	a1,a5
2040ce80:	fec42503          	lw	a0,-20(s0)
2040ce84:	c71ff0ef          	jal	ra,2040caf4 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040ce88:	00050793          	mv	a5,a0
}
2040ce8c:	00078513          	mv	a0,a5
2040ce90:	01c12083          	lw	ra,28(sp)
2040ce94:	01812403          	lw	s0,24(sp)
2040ce98:	02010113          	addi	sp,sp,32
2040ce9c:	00008067          	ret

2040cea0 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj>:

ssize_t Session::SessionReceiver::Write(const uint8_t* data, size_t data_size_bytes) {
2040cea0:	fd010113          	addi	sp,sp,-48
2040cea4:	02112623          	sw	ra,44(sp)
2040cea8:	02812423          	sw	s0,40(sp)
2040ceac:	03010413          	addi	s0,sp,48
2040ceb0:	fca42e23          	sw	a0,-36(s0)
2040ceb4:	fcb42c23          	sw	a1,-40(s0)
2040ceb8:	fcc42a23          	sw	a2,-44(s0)
  if (session_->receive_buffer_has_complete_message_) {
2040cebc:	fdc42783          	lw	a5,-36(s0)
2040cec0:	0047a783          	lw	a5,4(a5)
2040cec4:	0187c783          	lbu	a5,24(a5)
2040cec8:	00078663          	beqz	a5,2040ced4 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x34>
    return kTvmErrorSessionReceiveBufferBusy;
2040cecc:	40100793          	li	a5,1025
2040ced0:	03c0006f          	j	2040cf0c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x6c>
  }

  size_t bytes_written = session_->receive_buffer_->Write(data, data_size_bytes);
2040ced4:	fdc42783          	lw	a5,-36(s0)
2040ced8:	0047a783          	lw	a5,4(a5)
2040cedc:	0147a783          	lw	a5,20(a5)
2040cee0:	fd442603          	lw	a2,-44(s0)
2040cee4:	fd842583          	lw	a1,-40(s0)
2040cee8:	00078513          	mv	a0,a5
2040ceec:	9a5fe0ef          	jal	ra,2040b890 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5WriteEPKhj>
2040cef0:	fea42623          	sw	a0,-20(s0)
  if (bytes_written != data_size_bytes) {
2040cef4:	fec42703          	lw	a4,-20(s0)
2040cef8:	fd442783          	lw	a5,-44(s0)
2040cefc:	00f70663          	beq	a4,a5,2040cf08 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x68>
    return kTvmErrorSessionReceiveBufferShortWrite;
2040cf00:	40200793          	li	a5,1026
2040cf04:	0080006f          	j	2040cf0c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x6c>
  }

  return bytes_written;
2040cf08:	fec42783          	lw	a5,-20(s0)
}
2040cf0c:	00078513          	mv	a0,a5
2040cf10:	02c12083          	lw	ra,44(sp)
2040cf14:	02812403          	lw	s0,40(sp)
2040cf18:	03010113          	addi	sp,sp,48
2040cf1c:	00008067          	ret

2040cf20 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb>:

void Session::SessionReceiver::PacketDone(bool is_valid) {
2040cf20:	fd010113          	addi	sp,sp,-48
2040cf24:	02112623          	sw	ra,44(sp)
2040cf28:	02812423          	sw	s0,40(sp)
2040cf2c:	03010413          	addi	s0,sp,48
2040cf30:	fca42e23          	sw	a0,-36(s0)
2040cf34:	00058793          	mv	a5,a1
2040cf38:	fcf40da3          	sb	a5,-37(s0)
  if (!is_valid) {
2040cf3c:	fdb44783          	lbu	a5,-37(s0)
2040cf40:	0017c793          	xori	a5,a5,1
2040cf44:	0ff7f793          	andi	a5,a5,255
2040cf48:	1c079263          	bnez	a5,2040d10c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1ec>
    return;
  }

  SessionHeader header;
  int bytes_read =
      session_->receive_buffer_->Read(reinterpret_cast<uint8_t*>(&header), sizeof(header));
2040cf4c:	fdc42783          	lw	a5,-36(s0)
2040cf50:	0047a783          	lw	a5,4(a5)
2040cf54:	0147a783          	lw	a5,20(a5)
2040cf58:	fe840713          	addi	a4,s0,-24
2040cf5c:	00300613          	li	a2,3
2040cf60:	00070593          	mv	a1,a4
2040cf64:	00078513          	mv	a0,a5
2040cf68:	9cdfe0ef          	jal	ra,2040b934 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040cf6c:	00050793          	mv	a5,a0
2040cf70:	fef42623          	sw	a5,-20(s0)
  if (bytes_read != sizeof(header)) {
2040cf74:	fec42703          	lw	a4,-20(s0)
2040cf78:	00300793          	li	a5,3
2040cf7c:	18f71c63          	bne	a4,a5,2040d114 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1f4>
    return;
  }
  session_->receive_buffer_has_complete_message_ = true;
2040cf80:	fdc42783          	lw	a5,-36(s0)
2040cf84:	0047a783          	lw	a5,4(a5)
2040cf88:	00100713          	li	a4,1
2040cf8c:	00e78c23          	sb	a4,24(a5)

  switch (header.message_type) {
2040cf90:	fea44783          	lbu	a5,-22(s0)
2040cf94:	00100713          	li	a4,1
2040cf98:	04e78463          	beq	a5,a4,2040cfe0 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0xc0>
2040cf9c:	00100713          	li	a4,1
2040cfa0:	00e7ec63          	bltu	a5,a4,2040cfb8 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x98>
2040cfa4:	00200713          	li	a4,2
2040cfa8:	06e78063          	beq	a5,a4,2040d008 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0xe8>
2040cfac:	00300713          	li	a4,3
2040cfb0:	08e78e63          	beq	a5,a4,2040d04c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x12c>
2040cfb4:	0f00006f          	j	2040d0a4 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x184>
    case MessageType::kStartSessionInit:
      session_->ProcessStartSessionInit(header);
2040cfb8:	fdc42783          	lw	a5,-36(s0)
2040cfbc:	0047a783          	lw	a5,4(a5)
2040cfc0:	fe840713          	addi	a4,s0,-24
2040cfc4:	00070593          	mv	a1,a4
2040cfc8:	00078513          	mv	a0,a5
2040cfcc:	284000ef          	jal	ra,2040d250 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE>
      session_->receive_buffer_has_complete_message_ = false;
2040cfd0:	fdc42783          	lw	a5,-36(s0)
2040cfd4:	0047a783          	lw	a5,4(a5)
2040cfd8:	00078c23          	sb	zero,24(a5)
      break;
2040cfdc:	14c0006f          	j	2040d128 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    case MessageType::kStartSessionReply:
      session_->ProcessStartSessionReply(header);
2040cfe0:	fdc42783          	lw	a5,-36(s0)
2040cfe4:	0047a783          	lw	a5,4(a5)
2040cfe8:	fe840713          	addi	a4,s0,-24
2040cfec:	00070593          	mv	a1,a4
2040cff0:	00078513          	mv	a0,a5
2040cff4:	3d0000ef          	jal	ra,2040d3c4 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE>
      session_->receive_buffer_has_complete_message_ = false;
2040cff8:	fdc42783          	lw	a5,-36(s0)
2040cffc:	0047a783          	lw	a5,4(a5)
2040d000:	00078c23          	sb	zero,24(a5)
      break;
2040d004:	1240006f          	j	2040d128 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    case MessageType::kTerminateSession:
      if (session_->state_ == State::kSessionEstablished) {
2040d008:	fdc42783          	lw	a5,-36(s0)
2040d00c:	0047a783          	lw	a5,4(a5)
2040d010:	0047c703          	lbu	a4,4(a5)
2040d014:	00300793          	li	a5,3
2040d018:	02f71263          	bne	a4,a5,2040d03c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x11c>
        session_->state_ = State::kNoSessionEstablished;
2040d01c:	fdc42783          	lw	a5,-36(s0)
2040d020:	0047a783          	lw	a5,4(a5)
2040d024:	00100713          	li	a4,1
2040d028:	00e78223          	sb	a4,4(a5)
        session_->OnSessionTerminatedMessage();
2040d02c:	fdc42783          	lw	a5,-36(s0)
2040d030:	0047a783          	lw	a5,4(a5)
2040d034:	00078513          	mv	a0,a5
2040d038:	5bc000ef          	jal	ra,2040d5f4 <_ZN3tvm7runtime9micro_rpc7Session26OnSessionTerminatedMessageEv>
      }
      session_->receive_buffer_has_complete_message_ = false;
2040d03c:	fdc42783          	lw	a5,-36(s0)
2040d040:	0047a783          	lw	a5,4(a5)
2040d044:	00078c23          	sb	zero,24(a5)
      break;
2040d048:	0e00006f          	j	2040d128 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    case MessageType::kLog:
      if (header.session_id == 0 || header.session_id == session_->session_id_) {
2040d04c:	fe845783          	lhu	a5,-24(s0)
2040d050:	00078c63          	beqz	a5,2040d068 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x148>
2040d054:	fe845703          	lhu	a4,-24(s0)
2040d058:	fdc42783          	lw	a5,-36(s0)
2040d05c:	0047a783          	lw	a5,4(a5)
2040d060:	0027d783          	lhu	a5,2(a5)
2040d064:	0af71c63          	bne	a4,a5,2040d11c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1fc>
        // Special case for log messages: session id can be 0.
        session_->message_received_func_(session_->message_received_func_context_,
2040d068:	fdc42783          	lw	a5,-36(s0)
2040d06c:	0047a783          	lw	a5,4(a5)
2040d070:	01c7a803          	lw	a6,28(a5)
2040d074:	fdc42783          	lw	a5,-36(s0)
2040d078:	0047a783          	lw	a5,4(a5)
2040d07c:	0207a703          	lw	a4,32(a5)
2040d080:	fea44683          	lbu	a3,-22(s0)
                                         header.message_type, session_->receive_buffer_);
2040d084:	fdc42783          	lw	a5,-36(s0)
2040d088:	0047a783          	lw	a5,4(a5)
        session_->message_received_func_(session_->message_received_func_context_,
2040d08c:	0147a783          	lw	a5,20(a5)
2040d090:	00078613          	mv	a2,a5
2040d094:	00068593          	mv	a1,a3
2040d098:	00070513          	mv	a0,a4
2040d09c:	000800e7          	jalr	a6
      }
      break;
2040d0a0:	07c0006f          	j	2040d11c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1fc>
    default:
      if (session_->state_ == State::kSessionEstablished &&
2040d0a4:	fdc42783          	lw	a5,-36(s0)
2040d0a8:	0047a783          	lw	a5,4(a5)
2040d0ac:	0047c703          	lbu	a4,4(a5)
2040d0b0:	00300793          	li	a5,3
2040d0b4:	06f71863          	bne	a4,a5,2040d124 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x204>
          header.session_id == session_->session_id_) {
2040d0b8:	fe845703          	lhu	a4,-24(s0)
2040d0bc:	fdc42783          	lw	a5,-36(s0)
2040d0c0:	0047a783          	lw	a5,4(a5)
2040d0c4:	0027d783          	lhu	a5,2(a5)
      if (session_->state_ == State::kSessionEstablished &&
2040d0c8:	04f71e63          	bne	a4,a5,2040d124 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x204>
        session_->message_received_func_(session_->message_received_func_context_,
2040d0cc:	fdc42783          	lw	a5,-36(s0)
2040d0d0:	0047a783          	lw	a5,4(a5)
2040d0d4:	01c7a803          	lw	a6,28(a5)
2040d0d8:	fdc42783          	lw	a5,-36(s0)
2040d0dc:	0047a783          	lw	a5,4(a5)
2040d0e0:	0207a703          	lw	a4,32(a5)
2040d0e4:	fea44683          	lbu	a3,-22(s0)
                                         header.message_type, session_->receive_buffer_);
2040d0e8:	fdc42783          	lw	a5,-36(s0)
2040d0ec:	0047a783          	lw	a5,4(a5)
        session_->message_received_func_(session_->message_received_func_context_,
2040d0f0:	0147a783          	lw	a5,20(a5)
2040d0f4:	00078613          	mv	a2,a5
2040d0f8:	00068593          	mv	a1,a3
2040d0fc:	00070513          	mv	a0,a4
2040d100:	000800e7          	jalr	a6
      }
      break;
2040d104:	00000013          	nop
2040d108:	01c0006f          	j	2040d124 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x204>
    return;
2040d10c:	00000013          	nop
2040d110:	0180006f          	j	2040d128 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    return;
2040d114:	00000013          	nop
2040d118:	0100006f          	j	2040d128 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
      break;
2040d11c:	00000013          	nop
2040d120:	0080006f          	j	2040d128 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
      break;
2040d124:	00000013          	nop
  }
}
2040d128:	02c12083          	lw	ra,44(sp)
2040d12c:	02812403          	lw	s0,40(sp)
2040d130:	03010113          	addi	sp,sp,48
2040d134:	00008067          	ret

2040d138 <_ZN3tvm7runtime9micro_rpc7Session18ClearReceiveBufferEv>:

void Session::ClearReceiveBuffer() {
2040d138:	fe010113          	addi	sp,sp,-32
2040d13c:	00112e23          	sw	ra,28(sp)
2040d140:	00812c23          	sw	s0,24(sp)
2040d144:	02010413          	addi	s0,sp,32
2040d148:	fea42623          	sw	a0,-20(s0)
  receive_buffer_has_complete_message_ = false;
2040d14c:	fec42783          	lw	a5,-20(s0)
2040d150:	00078c23          	sb	zero,24(a5)
  receive_buffer_->Clear();
2040d154:	fec42783          	lw	a5,-20(s0)
2040d158:	0147a783          	lw	a5,20(a5)
2040d15c:	00078513          	mv	a0,a5
2040d160:	879fe0ef          	jal	ra,2040b9d8 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5ClearEv>
}
2040d164:	00000013          	nop
2040d168:	01c12083          	lw	ra,28(sp)
2040d16c:	01812403          	lw	s0,24(sp)
2040d170:	02010113          	addi	sp,sp,32
2040d174:	00008067          	ret

2040d178 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>:

void Session::SendSessionStartReply(const SessionHeader& header) {
2040d178:	fd010113          	addi	sp,sp,-48
2040d17c:	02112623          	sw	ra,44(sp)
2040d180:	02812423          	sw	s0,40(sp)
2040d184:	03010413          	addi	s0,sp,48
2040d188:	fca42e23          	sw	a0,-36(s0)
2040d18c:	fcb42c23          	sw	a1,-40(s0)
  RegenerateNonce();
2040d190:	fdc42503          	lw	a0,-36(s0)
2040d194:	8d5ff0ef          	jal	ra,2040ca68 <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv>
  SetSessionId(InitiatorNonce(header.session_id), local_nonce_);
2040d198:	fd842783          	lw	a5,-40(s0)
2040d19c:	0007d783          	lhu	a5,0(a5)
2040d1a0:	00078593          	mv	a1,a5
2040d1a4:	fdc42503          	lw	a0,-36(s0)
2040d1a8:	598000ef          	jal	ra,2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d1ac:	00050793          	mv	a5,a0
2040d1b0:	00078713          	mv	a4,a5
2040d1b4:	fdc42783          	lw	a5,-36(s0)
2040d1b8:	0007c783          	lbu	a5,0(a5)
2040d1bc:	00078613          	mv	a2,a5
2040d1c0:	00070593          	mv	a1,a4
2040d1c4:	fdc42503          	lw	a0,-36(s0)
2040d1c8:	50c000ef          	jal	ra,2040d6d4 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
  microtvm_session_start_payload_t payload = {Session::kVersion};
2040d1cc:	00100793          	li	a5,1
2040d1d0:	fef40423          	sb	a5,-24(s0)
  tvm_crt_error_t to_return = SendInternal(MessageType::kStartSessionReply,
                                           reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d1d4:	fe840793          	addi	a5,s0,-24
2040d1d8:	00100693          	li	a3,1
2040d1dc:	00078613          	mv	a2,a5
2040d1e0:	00100593          	li	a1,1
2040d1e4:	fdc42503          	lw	a0,-36(s0)
2040d1e8:	90dff0ef          	jal	ra,2040caf4 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040d1ec:	fea42623          	sw	a0,-20(s0)
  state_ = State::kSessionEstablished;
2040d1f0:	fdc42783          	lw	a5,-36(s0)
2040d1f4:	00300713          	li	a4,3
2040d1f8:	00e78223          	sb	a4,4(a5)
  CHECK_EQ(to_return, kTvmErrorNoError, "SendSessionStartReply");
2040d1fc:	fec42783          	lw	a5,-20(s0)
2040d200:	02078a63          	beqz	a5,2040d234 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE+0xbc>
2040d204:	00014717          	auipc	a4,0x14
2040d208:	ddc70713          	addi	a4,a4,-548 # 20420fe0 <crc_tabccitt+0x340>
2040d20c:	00014697          	auipc	a3,0x14
2040d210:	de868693          	addi	a3,a3,-536 # 20420ff4 <crc_tabccitt+0x354>
2040d214:	00014617          	auipc	a2,0x14
2040d218:	de460613          	addi	a2,a2,-540 # 20420ff8 <crc_tabccitt+0x358>
2040d21c:	0bd00593          	li	a1,189
2040d220:	00014517          	auipc	a0,0x14
2040d224:	de450513          	addi	a0,a0,-540 # 20421004 <crc_tabccitt+0x364>
2040d228:	031000ef          	jal	ra,2040da58 <TVMLogf>
2040d22c:	50000513          	li	a0,1280
2040d230:	f40f30ef          	jal	ra,20400970 <TVMPlatformAbort>
  OnSessionEstablishedMessage();
2040d234:	fdc42503          	lw	a0,-36(s0)
2040d238:	374000ef          	jal	ra,2040d5ac <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>
}
2040d23c:	00000013          	nop
2040d240:	02c12083          	lw	ra,44(sp)
2040d244:	02812403          	lw	s0,40(sp)
2040d248:	03010113          	addi	sp,sp,48
2040d24c:	00008067          	ret

2040d250 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE>:

void Session::ProcessStartSessionInit(const SessionHeader& header) {
2040d250:	fd010113          	addi	sp,sp,-48
2040d254:	02112623          	sw	ra,44(sp)
2040d258:	02812423          	sw	s0,40(sp)
2040d25c:	03010413          	addi	s0,sp,48
2040d260:	fca42e23          	sw	a0,-36(s0)
2040d264:	fcb42c23          	sw	a1,-40(s0)
  if (InitiatorNonce(header.session_id) == kInvalidNonce) {
2040d268:	fd842783          	lw	a5,-40(s0)
2040d26c:	0007d783          	lhu	a5,0(a5)
2040d270:	00078593          	mv	a1,a5
2040d274:	fdc42503          	lw	a0,-36(s0)
2040d278:	4c8000ef          	jal	ra,2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d27c:	00050793          	mv	a5,a0
2040d280:	0017b793          	seqz	a5,a5
2040d284:	0ff7f793          	andi	a5,a5,255
2040d288:	10079c63          	bnez	a5,2040d3a0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x150>
    return;
  }

  microtvm_session_start_payload_t payload;
  int bytes_read = receive_buffer_->Read(reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d28c:	fdc42783          	lw	a5,-36(s0)
2040d290:	0147a783          	lw	a5,20(a5)
2040d294:	fe840713          	addi	a4,s0,-24
2040d298:	00100613          	li	a2,1
2040d29c:	00070593          	mv	a1,a4
2040d2a0:	00078513          	mv	a0,a5
2040d2a4:	e90fe0ef          	jal	ra,2040b934 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040d2a8:	00050793          	mv	a5,a0
2040d2ac:	fef42623          	sw	a5,-20(s0)
  if (bytes_read != sizeof(payload)) {
2040d2b0:	fec42703          	lw	a4,-20(s0)
2040d2b4:	00100793          	li	a5,1
2040d2b8:	0ef71863          	bne	a4,a5,2040d3a8 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x158>
    return;
  }

  switch (state_) {
2040d2bc:	fdc42783          	lw	a5,-36(s0)
2040d2c0:	0047c783          	lbu	a5,4(a5)
2040d2c4:	00200713          	li	a4,2
2040d2c8:	02e78463          	beq	a5,a4,2040d2f0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0xa0>
2040d2cc:	00200713          	li	a4,2
2040d2d0:	00e7e863          	bltu	a5,a4,2040d2e0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x90>
2040d2d4:	00300713          	li	a4,3
2040d2d8:	0ae78263          	beq	a5,a4,2040d37c <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x12c>
2040d2dc:	0b80006f          	j	2040d394 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x144>
    case State::kReset:
    case State::kNoSessionEstablished:
      // Normal case: received a StartSession packet from reset.
      SendSessionStartReply(header);
2040d2e0:	fd842583          	lw	a1,-40(s0)
2040d2e4:	fdc42503          	lw	a0,-36(s0)
2040d2e8:	e91ff0ef          	jal	ra,2040d178 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
      break;
2040d2ec:	0c80006f          	j	2040d3b4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>

    case State::kStartSessionSent:
      // When two StartSessionInit packets sent simultaneously: lowest nonce wins; ties retry.
      if (InitiatorNonce(header.session_id) < local_nonce_) {
2040d2f0:	fd842783          	lw	a5,-40(s0)
2040d2f4:	0007d783          	lhu	a5,0(a5)
2040d2f8:	00078593          	mv	a1,a5
2040d2fc:	fdc42503          	lw	a0,-36(s0)
2040d300:	440000ef          	jal	ra,2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d304:	00050793          	mv	a5,a0
2040d308:	00078713          	mv	a4,a5
2040d30c:	fdc42783          	lw	a5,-36(s0)
2040d310:	0007c783          	lbu	a5,0(a5)
2040d314:	00f737b3          	sltu	a5,a4,a5
2040d318:	0ff7f793          	andi	a5,a5,255
2040d31c:	02078063          	beqz	a5,2040d33c <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0xec>
        if (payload.version == Session::kVersion) {
2040d320:	fe844703          	lbu	a4,-24(s0)
2040d324:	00100793          	li	a5,1
2040d328:	08f71463          	bne	a4,a5,2040d3b0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>
          SendSessionStartReply(header);
2040d32c:	fd842583          	lw	a1,-40(s0)
2040d330:	fdc42503          	lw	a0,-36(s0)
2040d334:	e45ff0ef          	jal	ra,2040d178 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
        }
      } else if (InitiatorNonce(header.session_id) == local_nonce_) {
        StartSession();
      }

      break;
2040d338:	0780006f          	j	2040d3b0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>
      } else if (InitiatorNonce(header.session_id) == local_nonce_) {
2040d33c:	fd842783          	lw	a5,-40(s0)
2040d340:	0007d783          	lhu	a5,0(a5)
2040d344:	00078593          	mv	a1,a5
2040d348:	fdc42503          	lw	a0,-36(s0)
2040d34c:	3f4000ef          	jal	ra,2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d350:	00050793          	mv	a5,a0
2040d354:	00078713          	mv	a4,a5
2040d358:	fdc42783          	lw	a5,-36(s0)
2040d35c:	0007c783          	lbu	a5,0(a5)
2040d360:	40f707b3          	sub	a5,a4,a5
2040d364:	0017b793          	seqz	a5,a5
2040d368:	0ff7f793          	andi	a5,a5,255
2040d36c:	04078263          	beqz	a5,2040d3b0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>
        StartSession();
2040d370:	fdc42503          	lw	a0,-36(s0)
2040d374:	951ff0ef          	jal	ra,2040ccc4 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv>
      break;
2040d378:	0380006f          	j	2040d3b0 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>

    case State::kSessionEstablished:
      SendSessionStartReply(header);
2040d37c:	fd842583          	lw	a1,-40(s0)
2040d380:	fdc42503          	lw	a0,-36(s0)
2040d384:	df5ff0ef          	jal	ra,2040d178 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
      OnSessionEstablishedMessage();
2040d388:	fdc42503          	lw	a0,-36(s0)
2040d38c:	220000ef          	jal	ra,2040d5ac <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>
      break;
2040d390:	0240006f          	j	2040d3b4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>

    default:
      state_ = State::kReset;
2040d394:	fdc42783          	lw	a5,-36(s0)
2040d398:	00078223          	sb	zero,4(a5)
2040d39c:	0180006f          	j	2040d3b4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>
    return;
2040d3a0:	00000013          	nop
2040d3a4:	0100006f          	j	2040d3b4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>
    return;
2040d3a8:	00000013          	nop
2040d3ac:	0080006f          	j	2040d3b4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>
      break;
2040d3b0:	00000013          	nop
  }
}
2040d3b4:	02c12083          	lw	ra,44(sp)
2040d3b8:	02812403          	lw	s0,40(sp)
2040d3bc:	03010113          	addi	sp,sp,48
2040d3c0:	00008067          	ret

2040d3c4 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE>:

void Session::ProcessStartSessionReply(const SessionHeader& header) {
2040d3c4:	fd010113          	addi	sp,sp,-48
2040d3c8:	02112623          	sw	ra,44(sp)
2040d3cc:	02812423          	sw	s0,40(sp)
2040d3d0:	02912223          	sw	s1,36(sp)
2040d3d4:	03010413          	addi	s0,sp,48
2040d3d8:	fca42e23          	sw	a0,-36(s0)
2040d3dc:	fcb42c23          	sw	a1,-40(s0)
  if (ResponderNonce(header.session_id) == kInvalidNonce) {
2040d3e0:	fd842783          	lw	a5,-40(s0)
2040d3e4:	0007d783          	lhu	a5,0(a5)
2040d3e8:	00078593          	mv	a1,a5
2040d3ec:	fdc42503          	lw	a0,-36(s0)
2040d3f0:	380000ef          	jal	ra,2040d770 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>
2040d3f4:	00050793          	mv	a5,a0
2040d3f8:	0017b793          	seqz	a5,a5
2040d3fc:	0ff7f793          	andi	a5,a5,255
2040d400:	16079e63          	bnez	a5,2040d57c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1b8>
    return;
  }

  microtvm_session_start_payload_t payload;
  int bytes_read = receive_buffer_->Read(reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d404:	fdc42783          	lw	a5,-36(s0)
2040d408:	0147a783          	lw	a5,20(a5)
2040d40c:	fe840713          	addi	a4,s0,-24
2040d410:	00100613          	li	a2,1
2040d414:	00070593          	mv	a1,a4
2040d418:	00078513          	mv	a0,a5
2040d41c:	d18fe0ef          	jal	ra,2040b934 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040d420:	00050793          	mv	a5,a0
2040d424:	fef42623          	sw	a5,-20(s0)
  if (bytes_read != sizeof(payload)) {
2040d428:	fec42703          	lw	a4,-20(s0)
2040d42c:	00100793          	li	a5,1
2040d430:	14f71a63          	bne	a4,a5,2040d584 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1c0>
    return;
  }

  switch (state_) {
2040d434:	fdc42783          	lw	a5,-36(s0)
2040d438:	0047c783          	lbu	a5,4(a5)
2040d43c:	00200713          	li	a4,2
2040d440:	00e78c63          	beq	a5,a4,2040d458 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x94>
2040d444:	00200713          	li	a4,2
2040d448:	14e7e263          	bltu	a5,a4,2040d58c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1c8>
2040d44c:	00300713          	li	a4,3
2040d450:	08e78a63          	beq	a5,a4,2040d4e4 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x120>
2040d454:	1440006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
    case State::kReset:
    case State::kNoSessionEstablished:
      break;
    case State::kStartSessionSent:
      if (InitiatorNonce(header.session_id) == local_nonce_ &&
2040d458:	fd842783          	lw	a5,-40(s0)
2040d45c:	0007d783          	lhu	a5,0(a5)
2040d460:	00078593          	mv	a1,a5
2040d464:	fdc42503          	lw	a0,-36(s0)
2040d468:	2d8000ef          	jal	ra,2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d46c:	00050793          	mv	a5,a0
2040d470:	00078713          	mv	a4,a5
2040d474:	fdc42783          	lw	a5,-36(s0)
2040d478:	0007c783          	lbu	a5,0(a5)
2040d47c:	00f71c63          	bne	a4,a5,2040d494 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0xd0>
          payload.version == Session::kVersion) {
2040d480:	fe844703          	lbu	a4,-24(s0)
      if (InitiatorNonce(header.session_id) == local_nonce_ &&
2040d484:	00100793          	li	a5,1
2040d488:	00f71663          	bne	a4,a5,2040d494 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0xd0>
2040d48c:	00100793          	li	a5,1
2040d490:	0080006f          	j	2040d498 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0xd4>
2040d494:	00000793          	li	a5,0
2040d498:	0e078e63          	beqz	a5,2040d594 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d0>
        SetSessionId(local_nonce_, ResponderNonce(header.session_id));
2040d49c:	fdc42783          	lw	a5,-36(s0)
2040d4a0:	0007c483          	lbu	s1,0(a5)
2040d4a4:	fd842783          	lw	a5,-40(s0)
2040d4a8:	0007d783          	lhu	a5,0(a5)
2040d4ac:	00078593          	mv	a1,a5
2040d4b0:	fdc42503          	lw	a0,-36(s0)
2040d4b4:	2bc000ef          	jal	ra,2040d770 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>
2040d4b8:	00050793          	mv	a5,a0
2040d4bc:	00078613          	mv	a2,a5
2040d4c0:	00048593          	mv	a1,s1
2040d4c4:	fdc42503          	lw	a0,-36(s0)
2040d4c8:	20c000ef          	jal	ra,2040d6d4 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
        state_ = State::kSessionEstablished;
2040d4cc:	fdc42783          	lw	a5,-36(s0)
2040d4d0:	00300713          	li	a4,3
2040d4d4:	00e78223          	sb	a4,4(a5)
        OnSessionEstablishedMessage();
2040d4d8:	fdc42503          	lw	a0,-36(s0)
2040d4dc:	0d0000ef          	jal	ra,2040d5ac <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>
      }
      break;
2040d4e0:	0b40006f          	j	2040d594 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d0>
    case State::kSessionEstablished:
      if (InitiatorNonce(header.session_id) != kInvalidNonce &&
2040d4e4:	fd842783          	lw	a5,-40(s0)
2040d4e8:	0007d783          	lhu	a5,0(a5)
2040d4ec:	00078593          	mv	a1,a5
2040d4f0:	fdc42503          	lw	a0,-36(s0)
2040d4f4:	24c000ef          	jal	ra,2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d4f8:	00050793          	mv	a5,a0
2040d4fc:	02078463          	beqz	a5,2040d524 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x160>
          ResponderNonce(header.session_id) == kInvalidNonce) {
2040d500:	fd842783          	lw	a5,-40(s0)
2040d504:	0007d783          	lhu	a5,0(a5)
2040d508:	00078593          	mv	a1,a5
2040d50c:	fdc42503          	lw	a0,-36(s0)
2040d510:	260000ef          	jal	ra,2040d770 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>
2040d514:	00050793          	mv	a5,a0
      if (InitiatorNonce(header.session_id) != kInvalidNonce &&
2040d518:	00079663          	bnez	a5,2040d524 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x160>
2040d51c:	00100793          	li	a5,1
2040d520:	0080006f          	j	2040d528 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x164>
2040d524:	00000793          	li	a5,0
2040d528:	04078263          	beqz	a5,2040d56c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1a8>
        if (payload.version == Session::kVersion) {
2040d52c:	fe844703          	lbu	a4,-24(s0)
2040d530:	00100793          	li	a5,1
2040d534:	00f71a63          	bne	a4,a5,2040d548 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x184>
          SendSessionStartReply(header);
2040d538:	fd842583          	lw	a1,-40(s0)
2040d53c:	fdc42503          	lw	a0,-36(s0)
2040d540:	c39ff0ef          	jal	ra,2040d178 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
          state_ = State::kReset;
        }
      } else {
        state_ = State::kReset;
      }
      break;
2040d544:	0540006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
          SetSessionId(local_nonce_, 0);
2040d548:	fdc42783          	lw	a5,-36(s0)
2040d54c:	0007c783          	lbu	a5,0(a5)
2040d550:	00000613          	li	a2,0
2040d554:	00078593          	mv	a1,a5
2040d558:	fdc42503          	lw	a0,-36(s0)
2040d55c:	178000ef          	jal	ra,2040d6d4 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
          state_ = State::kReset;
2040d560:	fdc42783          	lw	a5,-36(s0)
2040d564:	00078223          	sb	zero,4(a5)
      break;
2040d568:	0300006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
        state_ = State::kReset;
2040d56c:	fdc42783          	lw	a5,-36(s0)
2040d570:	00078223          	sb	zero,4(a5)
      break;
2040d574:	00000013          	nop
2040d578:	0200006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
    return;
2040d57c:	00000013          	nop
2040d580:	0180006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
    return;
2040d584:	00000013          	nop
2040d588:	0100006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
      break;
2040d58c:	00000013          	nop
2040d590:	0080006f          	j	2040d598 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
      break;
2040d594:	00000013          	nop
  }
}
2040d598:	02c12083          	lw	ra,44(sp)
2040d59c:	02812403          	lw	s0,40(sp)
2040d5a0:	02412483          	lw	s1,36(sp)
2040d5a4:	03010113          	addi	sp,sp,48
2040d5a8:	00008067          	ret

2040d5ac <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>:

void Session::OnSessionEstablishedMessage() {
2040d5ac:	fe010113          	addi	sp,sp,-32
2040d5b0:	00112e23          	sw	ra,28(sp)
2040d5b4:	00812c23          	sw	s0,24(sp)
2040d5b8:	02010413          	addi	s0,sp,32
2040d5bc:	fea42623          	sw	a0,-20(s0)
  message_received_func_(message_received_func_context_, MessageType::kStartSessionReply, NULL);
2040d5c0:	fec42783          	lw	a5,-20(s0)
2040d5c4:	01c7a703          	lw	a4,28(a5)
2040d5c8:	fec42783          	lw	a5,-20(s0)
2040d5cc:	0207a783          	lw	a5,32(a5)
2040d5d0:	00000613          	li	a2,0
2040d5d4:	00100593          	li	a1,1
2040d5d8:	00078513          	mv	a0,a5
2040d5dc:	000700e7          	jalr	a4
}
2040d5e0:	00000013          	nop
2040d5e4:	01c12083          	lw	ra,28(sp)
2040d5e8:	01812403          	lw	s0,24(sp)
2040d5ec:	02010113          	addi	sp,sp,32
2040d5f0:	00008067          	ret

2040d5f4 <_ZN3tvm7runtime9micro_rpc7Session26OnSessionTerminatedMessageEv>:

void Session::OnSessionTerminatedMessage() {
2040d5f4:	fe010113          	addi	sp,sp,-32
2040d5f8:	00112e23          	sw	ra,28(sp)
2040d5fc:	00812c23          	sw	s0,24(sp)
2040d600:	02010413          	addi	s0,sp,32
2040d604:	fea42623          	sw	a0,-20(s0)
  message_received_func_(message_received_func_context_, MessageType::kTerminateSession, NULL);
2040d608:	fec42783          	lw	a5,-20(s0)
2040d60c:	01c7a703          	lw	a4,28(a5)
2040d610:	fec42783          	lw	a5,-20(s0)
2040d614:	0207a783          	lw	a5,32(a5)
2040d618:	00000613          	li	a2,0
2040d61c:	00200593          	li	a1,2
2040d620:	00078513          	mv	a0,a5
2040d624:	000700e7          	jalr	a4
}
2040d628:	00000013          	nop
2040d62c:	01c12083          	lw	ra,28(sp)
2040d630:	01812403          	lw	s0,24(sp)
2040d634:	02010113          	addi	sp,sp,32
2040d638:	00008067          	ret

2040d63c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD1Ev>:

 private:
  class SessionReceiver : public WriteStream {
   public:
    explicit SessionReceiver(Session* session) : session_{session} {}
    virtual ~SessionReceiver() {}
2040d63c:	fe010113          	addi	sp,sp,-32
2040d640:	00112e23          	sw	ra,28(sp)
2040d644:	00812c23          	sw	s0,24(sp)
2040d648:	02010413          	addi	s0,sp,32
2040d64c:	fea42623          	sw	a0,-20(s0)
2040d650:	00014717          	auipc	a4,0x14
2040d654:	a2470713          	addi	a4,a4,-1500 # 20421074 <_ZTVN3tvm7runtime9micro_rpc7Session15SessionReceiverE+0x8>
2040d658:	fec42783          	lw	a5,-20(s0)
2040d65c:	00e7a023          	sw	a4,0(a5)
2040d660:	fec42783          	lw	a5,-20(s0)
2040d664:	00078513          	mv	a0,a5
2040d668:	144000ef          	jal	ra,2040d7ac <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>
2040d66c:	00000013          	nop
2040d670:	01c12083          	lw	ra,28(sp)
2040d674:	01812403          	lw	s0,24(sp)
2040d678:	02010113          	addi	sp,sp,32
2040d67c:	00008067          	ret

2040d680 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD0Ev>:
2040d680:	fe010113          	addi	sp,sp,-32
2040d684:	00112e23          	sw	ra,28(sp)
2040d688:	00812c23          	sw	s0,24(sp)
2040d68c:	02010413          	addi	s0,sp,32
2040d690:	fea42623          	sw	a0,-20(s0)
2040d694:	fec42503          	lw	a0,-20(s0)
2040d698:	fa5ff0ef          	jal	ra,2040d63c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD1Ev>
2040d69c:	fec42503          	lw	a0,-20(s0)
2040d6a0:	014000ef          	jal	ra,2040d6b4 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverdlEPv>
2040d6a4:	01c12083          	lw	ra,28(sp)
2040d6a8:	01812403          	lw	s0,24(sp)
2040d6ac:	02010113          	addi	sp,sp,32
2040d6b0:	00008067          	ret

2040d6b4 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverdlEPv>:

    ssize_t Write(const uint8_t* data, size_t data_size_bytes) override;
    void PacketDone(bool is_valid) override;

   private:
    void operator delete(void*) noexcept {}  // NOLINT(readability/casting)
2040d6b4:	fe010113          	addi	sp,sp,-32
2040d6b8:	00812e23          	sw	s0,28(sp)
2040d6bc:	02010413          	addi	s0,sp,32
2040d6c0:	fea42623          	sw	a0,-20(s0)
2040d6c4:	00000013          	nop
2040d6c8:	01c12403          	lw	s0,28(sp)
2040d6cc:	02010113          	addi	sp,sp,32
2040d6d0:	00008067          	ret

2040d6d4 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>:

  void OnSessionEstablishedMessage();

  void OnSessionTerminatedMessage();

  void SetSessionId(uint8_t initiator_nonce, uint8_t responder_nonce) {
2040d6d4:	fe010113          	addi	sp,sp,-32
2040d6d8:	00812e23          	sw	s0,28(sp)
2040d6dc:	02010413          	addi	s0,sp,32
2040d6e0:	fea42623          	sw	a0,-20(s0)
2040d6e4:	00058793          	mv	a5,a1
2040d6e8:	00060713          	mv	a4,a2
2040d6ec:	fef405a3          	sb	a5,-21(s0)
2040d6f0:	00070793          	mv	a5,a4
2040d6f4:	fef40523          	sb	a5,-22(s0)
    session_id_ = initiator_nonce | (((uint16_t)responder_nonce) << 8);
2040d6f8:	feb44783          	lbu	a5,-21(s0)
2040d6fc:	01079713          	slli	a4,a5,0x10
2040d700:	41075713          	srai	a4,a4,0x10
2040d704:	fea44783          	lbu	a5,-22(s0)
2040d708:	00879793          	slli	a5,a5,0x8
2040d70c:	01079793          	slli	a5,a5,0x10
2040d710:	4107d793          	srai	a5,a5,0x10
2040d714:	00f767b3          	or	a5,a4,a5
2040d718:	01079793          	slli	a5,a5,0x10
2040d71c:	4107d793          	srai	a5,a5,0x10
2040d720:	01079713          	slli	a4,a5,0x10
2040d724:	01075713          	srli	a4,a4,0x10
2040d728:	fec42783          	lw	a5,-20(s0)
2040d72c:	00e79123          	sh	a4,2(a5)
  }
2040d730:	00000013          	nop
2040d734:	01c12403          	lw	s0,28(sp)
2040d738:	02010113          	addi	sp,sp,32
2040d73c:	00008067          	ret

2040d740 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>:

  uint8_t InitiatorNonce(uint16_t session_id) { return session_id & 0xff; }
2040d740:	fe010113          	addi	sp,sp,-32
2040d744:	00812e23          	sw	s0,28(sp)
2040d748:	02010413          	addi	s0,sp,32
2040d74c:	fea42623          	sw	a0,-20(s0)
2040d750:	00058793          	mv	a5,a1
2040d754:	fef41523          	sh	a5,-22(s0)
2040d758:	fea45783          	lhu	a5,-22(s0)
2040d75c:	0ff7f793          	andi	a5,a5,255
2040d760:	00078513          	mv	a0,a5
2040d764:	01c12403          	lw	s0,28(sp)
2040d768:	02010113          	addi	sp,sp,32
2040d76c:	00008067          	ret

2040d770 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>:

  uint8_t ResponderNonce(uint16_t session_id) { return (session_id >> 8) & 0xff; }
2040d770:	fe010113          	addi	sp,sp,-32
2040d774:	00812e23          	sw	s0,28(sp)
2040d778:	02010413          	addi	s0,sp,32
2040d77c:	fea42623          	sw	a0,-20(s0)
2040d780:	00058793          	mv	a5,a1
2040d784:	fef41523          	sh	a5,-22(s0)
2040d788:	fea45783          	lhu	a5,-22(s0)
2040d78c:	0087d793          	srli	a5,a5,0x8
2040d790:	01079793          	slli	a5,a5,0x10
2040d794:	0107d793          	srli	a5,a5,0x10
2040d798:	0ff7f793          	andi	a5,a5,255
2040d79c:	00078513          	mv	a0,a5
2040d7a0:	01c12403          	lw	s0,28(sp)
2040d7a4:	02010113          	addi	sp,sp,32
2040d7a8:	00008067          	ret

2040d7ac <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>:

namespace tvm {
namespace runtime {
namespace micro_rpc {

WriteStream::~WriteStream() {}
2040d7ac:	fe010113          	addi	sp,sp,-32
2040d7b0:	00812e23          	sw	s0,28(sp)
2040d7b4:	02010413          	addi	s0,sp,32
2040d7b8:	fea42623          	sw	a0,-20(s0)
2040d7bc:	00014717          	auipc	a4,0x14
2040d7c0:	8d070713          	addi	a4,a4,-1840 # 2042108c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x8>
2040d7c4:	fec42783          	lw	a5,-20(s0)
2040d7c8:	00e7a023          	sw	a4,0(a5)
2040d7cc:	00000013          	nop
2040d7d0:	01c12403          	lw	s0,28(sp)
2040d7d4:	02010113          	addi	sp,sp,32
2040d7d8:	00008067          	ret

2040d7dc <_ZN3tvm7runtime9micro_rpc11WriteStreamD0Ev>:
2040d7dc:	fe010113          	addi	sp,sp,-32
2040d7e0:	00112e23          	sw	ra,28(sp)
2040d7e4:	00812c23          	sw	s0,24(sp)
2040d7e8:	02010413          	addi	s0,sp,32
2040d7ec:	fea42623          	sw	a0,-20(s0)
2040d7f0:	fec42503          	lw	a0,-20(s0)
2040d7f4:	fb9ff0ef          	jal	ra,2040d7ac <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>
2040d7f8:	00400593          	li	a1,4
2040d7fc:	fec42503          	lw	a0,-20(s0)
2040d800:	86cfe0ef          	jal	ra,2040b86c <_ZdlPvj>
2040d804:	01c12083          	lw	ra,28(sp)
2040d808:	01812403          	lw	s0,24(sp)
2040d80c:	02010113          	addi	sp,sp,32
2040d810:	00008067          	ret

2040d814 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj>:

tvm_crt_error_t WriteStream::WriteAll(uint8_t* data, size_t data_size_bytes,
                                      size_t* bytes_consumed) {
2040d814:	fd010113          	addi	sp,sp,-48
2040d818:	02112623          	sw	ra,44(sp)
2040d81c:	02812423          	sw	s0,40(sp)
2040d820:	03010413          	addi	s0,sp,48
2040d824:	fca42e23          	sw	a0,-36(s0)
2040d828:	fcb42c23          	sw	a1,-40(s0)
2040d82c:	fcc42a23          	sw	a2,-44(s0)
2040d830:	fcd42823          	sw	a3,-48(s0)
  *bytes_consumed = 0;
2040d834:	fd042783          	lw	a5,-48(s0)
2040d838:	0007a023          	sw	zero,0(a5)
  while (data_size_bytes > 0) {
2040d83c:	fd442783          	lw	a5,-44(s0)
2040d840:	0a078063          	beqz	a5,2040d8e0 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xcc>
    ssize_t to_return = Write(data, data_size_bytes);
2040d844:	fdc42783          	lw	a5,-36(s0)
2040d848:	0007a783          	lw	a5,0(a5)
2040d84c:	00878793          	addi	a5,a5,8
2040d850:	0007a783          	lw	a5,0(a5)
2040d854:	fd442603          	lw	a2,-44(s0)
2040d858:	fd842583          	lw	a1,-40(s0)
2040d85c:	fdc42503          	lw	a0,-36(s0)
2040d860:	000780e7          	jalr	a5
2040d864:	fea42623          	sw	a0,-20(s0)
    if (to_return == 0) {
2040d868:	fec42783          	lw	a5,-20(s0)
2040d86c:	00079663          	bnez	a5,2040d878 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x64>
      return kTvmErrorWriteStreamShortWrite;
2040d870:	30000793          	li	a5,768
2040d874:	0700006f          	j	2040d8e4 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xd0>
    } else if (to_return < 0) {
2040d878:	fec42783          	lw	a5,-20(s0)
2040d87c:	0007d663          	bgez	a5,2040d888 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x74>
      return (tvm_crt_error_t)to_return;
2040d880:	fec42783          	lw	a5,-20(s0)
2040d884:	0600006f          	j	2040d8e4 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xd0>
    } else if (to_return > 0 && (static_cast<size_t>(to_return)) > data_size_bytes) {
2040d888:	fec42783          	lw	a5,-20(s0)
2040d88c:	00f05c63          	blez	a5,2040d8a4 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x90>
2040d890:	fec42783          	lw	a5,-20(s0)
2040d894:	fd442703          	lw	a4,-44(s0)
2040d898:	00f77663          	bleu	a5,a4,2040d8a4 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x90>
      return kTvmErrorWriteStreamLongWrite;
2040d89c:	30100793          	li	a5,769
2040d8a0:	0440006f          	j	2040d8e4 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xd0>
    }

    data += to_return;
2040d8a4:	fec42783          	lw	a5,-20(s0)
2040d8a8:	fd842703          	lw	a4,-40(s0)
2040d8ac:	00f707b3          	add	a5,a4,a5
2040d8b0:	fcf42c23          	sw	a5,-40(s0)
    data_size_bytes -= to_return;
2040d8b4:	fec42783          	lw	a5,-20(s0)
2040d8b8:	fd442703          	lw	a4,-44(s0)
2040d8bc:	40f707b3          	sub	a5,a4,a5
2040d8c0:	fcf42a23          	sw	a5,-44(s0)
    *bytes_consumed += to_return;
2040d8c4:	fd042783          	lw	a5,-48(s0)
2040d8c8:	0007a703          	lw	a4,0(a5)
2040d8cc:	fec42783          	lw	a5,-20(s0)
2040d8d0:	00f70733          	add	a4,a4,a5
2040d8d4:	fd042783          	lw	a5,-48(s0)
2040d8d8:	00e7a023          	sw	a4,0(a5)
  while (data_size_bytes > 0) {
2040d8dc:	f61ff06f          	j	2040d83c <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x28>
  }

  return kTvmErrorNoError;
2040d8e0:	00000793          	li	a5,0
}
2040d8e4:	00078513          	mv	a0,a5
2040d8e8:	02c12083          	lw	ra,44(sp)
2040d8ec:	02812403          	lw	s0,40(sp)
2040d8f0:	03010113          	addi	sp,sp,48
2040d8f4:	00008067          	ret

2040d8f8 <_ZnajPv>:
    void operator delete(void*) noexcept {}  // NOLINT(readability/casting)
2040d8f8:	fe010113          	addi	sp,sp,-32
2040d8fc:	00812e23          	sw	s0,28(sp)
2040d900:	02010413          	addi	s0,sp,32
2040d904:	fea42623          	sw	a0,-20(s0)
2040d908:	feb42423          	sw	a1,-24(s0)
2040d90c:	fe842783          	lw	a5,-24(s0)
2040d910:	00078513          	mv	a0,a5
2040d914:	01c12403          	lw	s0,28(sp)
2040d918:	02010113          	addi	sp,sp,32
2040d91c:	00008067          	ret

2040d920 <MicroTVMRpcServerInit>:
2040d920:	fc010113          	addi	sp,sp,-64
2040d924:	02112e23          	sw	ra,60(sp)
2040d928:	02812c23          	sw	s0,56(sp)
2040d92c:	02912a23          	sw	s1,52(sp)
2040d930:	04010413          	addi	s0,sp,64
2040d934:	fca42623          	sw	a0,-52(s0)
2040d938:	fcb42423          	sw	a1,-56(s0)
2040d93c:	5fbf3797          	auipc	a5,0x5fbf3
2040d940:	57478793          	addi	a5,a5,1396 # 80000eb0 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_112g_write_funcE>
2040d944:	fcc42703          	lw	a4,-52(s0)
2040d948:	00e7a023          	sw	a4,0(a5)
2040d94c:	5fbf3797          	auipc	a5,0x5fbf3
2040d950:	56878793          	addi	a5,a5,1384 # 80000eb4 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_116g_write_func_ctxE>
2040d954:	fc842703          	lw	a4,-56(s0)
2040d958:	00e7a023          	sw	a4,0(a5)
2040d95c:	d10f40ef          	jal	ra,20401e6c <TVMInitializeRuntime>
2040d960:	fea42623          	sw	a0,-20(s0)
2040d964:	fec42783          	lw	a5,-20(s0)
2040d968:	00078663          	beqz	a5,2040d974 <MicroTVMRpcServerInit+0x54>
2040d96c:	fec42503          	lw	a0,-20(s0)
2040d970:	800f30ef          	jal	ra,20400970 <TVMPlatformAbort>
2040d974:	00100793          	li	a5,1
2040d978:	fcf42e23          	sw	a5,-36(s0)
2040d97c:	fe042023          	sw	zero,-32(s0)
2040d980:	fd840793          	addi	a5,s0,-40
2040d984:	00078693          	mv	a3,a5
2040d988:	fdc42583          	lw	a1,-36(s0)
2040d98c:	fe042603          	lw	a2,-32(s0)
2040d990:	00002537          	lui	a0,0x2
2040d994:	868f30ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
2040d998:	fea42623          	sw	a0,-20(s0)
2040d99c:	fec42783          	lw	a5,-20(s0)
2040d9a0:	00078663          	beqz	a5,2040d9ac <MicroTVMRpcServerInit+0x8c>
2040d9a4:	fec42503          	lw	a0,-20(s0)
2040d9a8:	fc9f20ef          	jal	ra,20400970 <TVMPlatformAbort>
2040d9ac:	fd842783          	lw	a5,-40(s0)
2040d9b0:	00078593          	mv	a1,a5
2040d9b4:	00002537          	lui	a0,0x2
2040d9b8:	f41ff0ef          	jal	ra,2040d8f8 <_ZnajPv>
2040d9bc:	fea42423          	sw	a0,-24(s0)
2040d9c0:	fd440793          	addi	a5,s0,-44
2040d9c4:	00078693          	mv	a3,a5
2040d9c8:	fdc42583          	lw	a1,-36(s0)
2040d9cc:	fe042603          	lw	a2,-32(s0)
2040d9d0:	10c00513          	li	a0,268
2040d9d4:	828f30ef          	jal	ra,204009fc <TVMPlatformMemoryAllocate>
2040d9d8:	fea42623          	sw	a0,-20(s0)
2040d9dc:	fec42783          	lw	a5,-20(s0)
2040d9e0:	00078663          	beqz	a5,2040d9ec <MicroTVMRpcServerInit+0xcc>
2040d9e4:	fec42503          	lw	a0,-20(s0)
2040d9e8:	f89f20ef          	jal	ra,20400970 <TVMPlatformAbort>
2040d9ec:	fd442783          	lw	a5,-44(s0)
2040d9f0:	00078593          	mv	a1,a5
2040d9f4:	10c00513          	li	a0,268
2040d9f8:	179000ef          	jal	ra,2040e370 <_ZN3tvm7runtime9micro_rpc14MicroRPCServernwEjPv>
2040d9fc:	00050493          	mv	s1,a0
2040da00:	fc842703          	lw	a4,-56(s0)
2040da04:	fcc42683          	lw	a3,-52(s0)
2040da08:	00002637          	lui	a2,0x2
2040da0c:	fe842583          	lw	a1,-24(s0)
2040da10:	00048513          	mv	a0,s1
2040da14:	041000ef          	jal	ra,2040e254 <_ZN3tvm7runtime9micro_rpc14MicroRPCServerC1EPhjPFiPvPKhjES4_>
2040da18:	fe942223          	sw	s1,-28(s0)
2040da1c:	5fbf3797          	auipc	a5,0x5fbf3
2040da20:	49c78793          	addi	a5,a5,1180 # 80000eb8 <_ZL12g_rpc_server>
2040da24:	fe442703          	lw	a4,-28(s0)
2040da28:	00e7a023          	sw	a4,0(a5)
2040da2c:	fe442503          	lw	a0,-28(s0)
2040da30:	169000ef          	jal	ra,2040e398 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv>
2040da34:	5fbf3797          	auipc	a5,0x5fbf3
2040da38:	48478793          	addi	a5,a5,1156 # 80000eb8 <_ZL12g_rpc_server>
2040da3c:	0007a783          	lw	a5,0(a5)
2040da40:	00078513          	mv	a0,a5
2040da44:	03c12083          	lw	ra,60(sp)
2040da48:	03812403          	lw	s0,56(sp)
2040da4c:	03412483          	lw	s1,52(sp)
2040da50:	04010113          	addi	sp,sp,64
2040da54:	00008067          	ret

2040da58 <TVMLogf>:
2040da58:	e7010113          	addi	sp,sp,-400
2040da5c:	16112623          	sw	ra,364(sp)
2040da60:	16812423          	sw	s0,360(sp)
2040da64:	17010413          	addi	s0,sp,368
2040da68:	e8a42e23          	sw	a0,-356(s0)
2040da6c:	00b42223          	sw	a1,4(s0)
2040da70:	00c42423          	sw	a2,8(s0)
2040da74:	00d42623          	sw	a3,12(s0)
2040da78:	00e42823          	sw	a4,16(s0)
2040da7c:	00f42a23          	sw	a5,20(s0)
2040da80:	01042c23          	sw	a6,24(s0)
2040da84:	01142e23          	sw	a7,28(s0)
2040da88:	02040793          	addi	a5,s0,32
2040da8c:	fe478793          	addi	a5,a5,-28
2040da90:	fef42223          	sw	a5,-28(s0)
2040da94:	fe442703          	lw	a4,-28(s0)
2040da98:	ee440793          	addi	a5,s0,-284
2040da9c:	00070693          	mv	a3,a4
2040daa0:	e9c42603          	lw	a2,-356(s0)
2040daa4:	10000593          	li	a1,256
2040daa8:	00078513          	mv	a0,a5
2040daac:	e79f20ef          	jal	ra,20400924 <TVMPlatformFormatMessage>
2040dab0:	fea42623          	sw	a0,-20(s0)
2040dab4:	fec42783          	lw	a5,-20(s0)
2040dab8:	04078063          	beqz	a5,2040daf8 <TVMLogf+0xa0>
2040dabc:	fec42783          	lw	a5,-20(s0)
2040dac0:	fff78793          	addi	a5,a5,-1
2040dac4:	ff040713          	addi	a4,s0,-16
2040dac8:	00f707b3          	add	a5,a4,a5
2040dacc:	ef47c703          	lbu	a4,-268(a5)
2040dad0:	00a00793          	li	a5,10
2040dad4:	02f71263          	bne	a4,a5,2040daf8 <TVMLogf+0xa0>
2040dad8:	fec42783          	lw	a5,-20(s0)
2040dadc:	fff78793          	addi	a5,a5,-1
2040dae0:	ff040713          	addi	a4,s0,-16
2040dae4:	00f707b3          	add	a5,a4,a5
2040dae8:	ee078a23          	sb	zero,-268(a5)
2040daec:	fec42783          	lw	a5,-20(s0)
2040daf0:	fff78793          	addi	a5,a5,-1
2040daf4:	fef42623          	sw	a5,-20(s0)
2040daf8:	5fbf3797          	auipc	a5,0x5fbf3
2040dafc:	3c078793          	addi	a5,a5,960 # 80000eb8 <_ZL12g_rpc_server>
2040db00:	0007a783          	lw	a5,0(a5)
2040db04:	02078463          	beqz	a5,2040db2c <TVMLogf+0xd4>
2040db08:	5fbf3797          	auipc	a5,0x5fbf3
2040db0c:	3b078793          	addi	a5,a5,944 # 80000eb8 <_ZL12g_rpc_server>
2040db10:	0007a783          	lw	a5,0(a5)
2040db14:	ee440713          	addi	a4,s0,-284
2040db18:	fec42603          	lw	a2,-20(s0)
2040db1c:	00070593          	mv	a1,a4
2040db20:	00078513          	mv	a0,a5
2040db24:	235000ef          	jal	ra,2040e558 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer3LogEPKhj>
2040db28:	0880006f          	j	2040dbb0 <TVMLogf+0x158>
2040db2c:	ee040793          	addi	a5,s0,-288
2040db30:	00078513          	mv	a0,a5
2040db34:	588000ef          	jal	ra,2040e0bc <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamC1Ev>
2040db38:	ee040713          	addi	a4,s0,-288
2040db3c:	ed040793          	addi	a5,s0,-304
2040db40:	00070593          	mv	a1,a4
2040db44:	00078513          	mv	a0,a5
2040db48:	160000ef          	jal	ra,2040dca8 <_ZN3tvm7runtime9micro_rpc6FramerC1EPNS1_11WriteStreamE>
2040db4c:	ed040593          	addi	a1,s0,-304
2040db50:	eac40793          	addi	a5,s0,-340
2040db54:	00000713          	li	a4,0
2040db58:	00000693          	li	a3,0
2040db5c:	00000613          	li	a2,0
2040db60:	00078513          	mv	a0,a5
2040db64:	184000ef          	jal	ra,2040dce8 <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_>
2040db68:	ee440713          	addi	a4,s0,-284
2040db6c:	eac40793          	addi	a5,s0,-340
2040db70:	fec42683          	lw	a3,-20(s0)
2040db74:	00070613          	mv	a2,a4
2040db78:	00300593          	li	a1,3
2040db7c:	00078513          	mv	a0,a5
2040db80:	aa8ff0ef          	jal	ra,2040ce28 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj>
2040db84:	fea42423          	sw	a0,-24(s0)
2040db88:	fe842783          	lw	a5,-24(s0)
2040db8c:	00078663          	beqz	a5,2040db98 <TVMLogf+0x140>
2040db90:	fe842503          	lw	a0,-24(s0)
2040db94:	dddf20ef          	jal	ra,20400970 <TVMPlatformAbort>
2040db98:	eac40793          	addi	a5,s0,-340
2040db9c:	00078513          	mv	a0,a5
2040dba0:	67c000ef          	jal	ra,2040e21c <_ZN3tvm7runtime9micro_rpc7SessionD1Ev>
2040dba4:	ee040793          	addi	a5,s0,-288
2040dba8:	00078513          	mv	a0,a5
2040dbac:	554000ef          	jal	ra,2040e100 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD1Ev>
2040dbb0:	00000013          	nop
2040dbb4:	16c12083          	lw	ra,364(sp)
2040dbb8:	16812403          	lw	s0,360(sp)
2040dbbc:	19010113          	addi	sp,sp,400
2040dbc0:	00008067          	ret

2040dbc4 <MicroTVMRpcServerLoop>:
2040dbc4:	fd010113          	addi	sp,sp,-48
2040dbc8:	02112623          	sw	ra,44(sp)
2040dbcc:	02812423          	sw	s0,40(sp)
2040dbd0:	03010413          	addi	s0,sp,48
2040dbd4:	fca42e23          	sw	a0,-36(s0)
2040dbd8:	fcb42c23          	sw	a1,-40(s0)
2040dbdc:	fcc42a23          	sw	a2,-44(s0)
2040dbe0:	fdc42783          	lw	a5,-36(s0)
2040dbe4:	fef42623          	sw	a5,-20(s0)
2040dbe8:	fd442603          	lw	a2,-44(s0)
2040dbec:	fd842583          	lw	a1,-40(s0)
2040dbf0:	fec42503          	lw	a0,-20(s0)
2040dbf4:	075000ef          	jal	ra,2040e468 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj>
2040dbf8:	00050793          	mv	a5,a0
2040dbfc:	00078513          	mv	a0,a5
2040dc00:	02c12083          	lw	ra,44(sp)
2040dc04:	02812403          	lw	s0,40(sp)
2040dc08:	03010113          	addi	sp,sp,48
2040dc0c:	00008067          	ret

2040dc10 <_ZN3tvm7runtime9micro_rpc11FrameBufferC1EPhj>:
2040dc10:	fe010113          	addi	sp,sp,-32
2040dc14:	00812e23          	sw	s0,28(sp)
2040dc18:	02010413          	addi	s0,sp,32
2040dc1c:	fea42623          	sw	a0,-20(s0)
2040dc20:	feb42423          	sw	a1,-24(s0)
2040dc24:	fec42223          	sw	a2,-28(s0)
2040dc28:	fec42783          	lw	a5,-20(s0)
2040dc2c:	fe842703          	lw	a4,-24(s0)
2040dc30:	00e7a023          	sw	a4,0(a5)
2040dc34:	fec42783          	lw	a5,-20(s0)
2040dc38:	fe442703          	lw	a4,-28(s0)
2040dc3c:	00e7a223          	sw	a4,4(a5)
2040dc40:	fec42783          	lw	a5,-20(s0)
2040dc44:	0007a423          	sw	zero,8(a5)
2040dc48:	fec42783          	lw	a5,-20(s0)
2040dc4c:	0007a623          	sw	zero,12(a5)
2040dc50:	00000013          	nop
2040dc54:	01c12403          	lw	s0,28(sp)
2040dc58:	02010113          	addi	sp,sp,32
2040dc5c:	00008067          	ret

2040dc60 <_ZN3tvm7runtime9micro_rpc8UnframerC1EPNS1_11WriteStreamE>:
2040dc60:	fe010113          	addi	sp,sp,-32
2040dc64:	00812e23          	sw	s0,28(sp)
2040dc68:	02010413          	addi	s0,sp,32
2040dc6c:	fea42623          	sw	a0,-20(s0)
2040dc70:	feb42423          	sw	a1,-24(s0)
2040dc74:	fec42783          	lw	a5,-20(s0)
2040dc78:	fe842703          	lw	a4,-24(s0)
2040dc7c:	00e7a023          	sw	a4,0(a5)
2040dc80:	fec42783          	lw	a5,-20(s0)
2040dc84:	00078223          	sb	zero,4(a5)
2040dc88:	fec42783          	lw	a5,-20(s0)
2040dc8c:	00078823          	sb	zero,16(a5)
2040dc90:	fec42783          	lw	a5,-20(s0)
2040dc94:	0807aa23          	sw	zero,148(a5)
2040dc98:	00000013          	nop
2040dc9c:	01c12403          	lw	s0,28(sp)
2040dca0:	02010113          	addi	sp,sp,32
2040dca4:	00008067          	ret

2040dca8 <_ZN3tvm7runtime9micro_rpc6FramerC1EPNS1_11WriteStreamE>:
2040dca8:	fe010113          	addi	sp,sp,-32
2040dcac:	00812e23          	sw	s0,28(sp)
2040dcb0:	02010413          	addi	s0,sp,32
2040dcb4:	fea42623          	sw	a0,-20(s0)
2040dcb8:	feb42423          	sw	a1,-24(s0)
2040dcbc:	fec42783          	lw	a5,-20(s0)
2040dcc0:	fe842703          	lw	a4,-24(s0)
2040dcc4:	00e7a023          	sw	a4,0(a5)
2040dcc8:	fec42783          	lw	a5,-20(s0)
2040dccc:	00078223          	sb	zero,4(a5)
2040dcd0:	fec42783          	lw	a5,-20(s0)
2040dcd4:	0007a423          	sw	zero,8(a5)
2040dcd8:	00000013          	nop
2040dcdc:	01c12403          	lw	s0,28(sp)
2040dce0:	02010113          	addi	sp,sp,32
2040dce4:	00008067          	ret

2040dce8 <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_>:
2040dce8:	fd010113          	addi	sp,sp,-48
2040dcec:	02112623          	sw	ra,44(sp)
2040dcf0:	02812423          	sw	s0,40(sp)
2040dcf4:	03010413          	addi	s0,sp,48
2040dcf8:	fea42623          	sw	a0,-20(s0)
2040dcfc:	feb42423          	sw	a1,-24(s0)
2040dd00:	fec42223          	sw	a2,-28(s0)
2040dd04:	fed42023          	sw	a3,-32(s0)
2040dd08:	fce42e23          	sw	a4,-36(s0)
2040dd0c:	fec42783          	lw	a5,-20(s0)
2040dd10:	00078023          	sb	zero,0(a5)
2040dd14:	fec42783          	lw	a5,-20(s0)
2040dd18:	00079123          	sh	zero,2(a5)
2040dd1c:	fec42783          	lw	a5,-20(s0)
2040dd20:	00078223          	sb	zero,4(a5)
2040dd24:	fec42783          	lw	a5,-20(s0)
2040dd28:	00878793          	addi	a5,a5,8
2040dd2c:	fec42583          	lw	a1,-20(s0)
2040dd30:	00078513          	mv	a0,a5
2040dd34:	0c4000ef          	jal	ra,2040ddf8 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverC1EPS2_>
2040dd38:	fec42783          	lw	a5,-20(s0)
2040dd3c:	fe842703          	lw	a4,-24(s0)
2040dd40:	00e7a823          	sw	a4,16(a5)
2040dd44:	fec42783          	lw	a5,-20(s0)
2040dd48:	fe442703          	lw	a4,-28(s0)
2040dd4c:	00e7aa23          	sw	a4,20(a5)
2040dd50:	fec42783          	lw	a5,-20(s0)
2040dd54:	00078c23          	sb	zero,24(a5)
2040dd58:	fec42783          	lw	a5,-20(s0)
2040dd5c:	fe042703          	lw	a4,-32(s0)
2040dd60:	00e7ae23          	sw	a4,28(a5)
2040dd64:	fec42783          	lw	a5,-20(s0)
2040dd68:	fdc42703          	lw	a4,-36(s0)
2040dd6c:	02e7a023          	sw	a4,32(a5)
2040dd70:	fec42783          	lw	a5,-20(s0)
2040dd74:	0147a783          	lw	a5,20(a5)
2040dd78:	00078a63          	beqz	a5,2040dd8c <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_+0xa4>
2040dd7c:	fec42783          	lw	a5,-20(s0)
2040dd80:	0147a783          	lw	a5,20(a5)
2040dd84:	00078513          	mv	a0,a5
2040dd88:	c51fd0ef          	jal	ra,2040b9d8 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5ClearEv>
2040dd8c:	00000013          	nop
2040dd90:	02c12083          	lw	ra,44(sp)
2040dd94:	02812403          	lw	s0,40(sp)
2040dd98:	03010113          	addi	sp,sp,48
2040dd9c:	00008067          	ret

2040dda0 <_ZN3tvm7runtime9micro_rpc7Session8ReceiverEv>:
2040dda0:	fe010113          	addi	sp,sp,-32
2040dda4:	00812e23          	sw	s0,28(sp)
2040dda8:	02010413          	addi	s0,sp,32
2040ddac:	fea42623          	sw	a0,-20(s0)
2040ddb0:	fec42783          	lw	a5,-20(s0)
2040ddb4:	00878793          	addi	a5,a5,8
2040ddb8:	00078513          	mv	a0,a5
2040ddbc:	01c12403          	lw	s0,28(sp)
2040ddc0:	02010113          	addi	sp,sp,32
2040ddc4:	00008067          	ret

2040ddc8 <_ZN3tvm7runtime9micro_rpc11WriteStreamC1Ev>:
2040ddc8:	fe010113          	addi	sp,sp,-32
2040ddcc:	00812e23          	sw	s0,28(sp)
2040ddd0:	02010413          	addi	s0,sp,32
2040ddd4:	fea42623          	sw	a0,-20(s0)
2040ddd8:	00013717          	auipc	a4,0x13
2040dddc:	2b470713          	addi	a4,a4,692 # 2042108c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x8>
2040dde0:	fec42783          	lw	a5,-20(s0)
2040dde4:	00e7a023          	sw	a4,0(a5)
2040dde8:	00000013          	nop
2040ddec:	01c12403          	lw	s0,28(sp)
2040ddf0:	02010113          	addi	sp,sp,32
2040ddf4:	00008067          	ret

2040ddf8 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverC1EPS2_>:
2040ddf8:	fe010113          	addi	sp,sp,-32
2040ddfc:	00112e23          	sw	ra,28(sp)
2040de00:	00812c23          	sw	s0,24(sp)
2040de04:	02010413          	addi	s0,sp,32
2040de08:	fea42623          	sw	a0,-20(s0)
2040de0c:	feb42423          	sw	a1,-24(s0)
2040de10:	fec42783          	lw	a5,-20(s0)
2040de14:	00078513          	mv	a0,a5
2040de18:	fb1ff0ef          	jal	ra,2040ddc8 <_ZN3tvm7runtime9micro_rpc11WriteStreamC1Ev>
2040de1c:	00013717          	auipc	a4,0x13
2040de20:	25870713          	addi	a4,a4,600 # 20421074 <_ZTVN3tvm7runtime9micro_rpc7Session15SessionReceiverE+0x8>
2040de24:	fec42783          	lw	a5,-20(s0)
2040de28:	00e7a023          	sw	a4,0(a5)
2040de2c:	fec42783          	lw	a5,-20(s0)
2040de30:	fe842703          	lw	a4,-24(s0)
2040de34:	00e7a223          	sw	a4,4(a5)
2040de38:	00000013          	nop
2040de3c:	01c12083          	lw	ra,28(sp)
2040de40:	01812403          	lw	s0,24(sp)
2040de44:	02010113          	addi	sp,sp,32
2040de48:	00008067          	ret

2040de4c <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>:
  /*!
   * \return the length of the str.
   * \param str the string.
   * \return The length.
   */
  static uint64_t StrLength(const char* str) {
2040de4c:	fd010113          	addi	sp,sp,-48
2040de50:	02812623          	sw	s0,44(sp)
2040de54:	03010413          	addi	s0,sp,48
2040de58:	fca42e23          	sw	a0,-36(s0)
    uint64_t len = 0;
2040de5c:	00000793          	li	a5,0
2040de60:	00000813          	li	a6,0
2040de64:	fef42423          	sw	a5,-24(s0)
2040de68:	ff042623          	sw	a6,-20(s0)
    while (str[len] != '\0') ++len;
2040de6c:	fe842783          	lw	a5,-24(s0)
2040de70:	fdc42703          	lw	a4,-36(s0)
2040de74:	00f707b3          	add	a5,a4,a5
2040de78:	0007c783          	lbu	a5,0(a5)
2040de7c:	02078c63          	beqz	a5,2040deb4 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc+0x68>
2040de80:	fe842683          	lw	a3,-24(s0)
2040de84:	fec42703          	lw	a4,-20(s0)
2040de88:	00100593          	li	a1,1
2040de8c:	00000613          	li	a2,0
2040de90:	00b687b3          	add	a5,a3,a1
2040de94:	00078513          	mv	a0,a5
2040de98:	00d53533          	sltu	a0,a0,a3
2040de9c:	00c70833          	add	a6,a4,a2
2040dea0:	01050733          	add	a4,a0,a6
2040dea4:	00070813          	mv	a6,a4
2040dea8:	fef42423          	sw	a5,-24(s0)
2040deac:	ff042623          	sw	a6,-20(s0)
2040deb0:	fbdff06f          	j	2040de6c <_ZN3tvm7runtime12RPCReference9StrLengthEPKc+0x20>
    return len;
2040deb4:	fe842783          	lw	a5,-24(s0)
2040deb8:	fec42803          	lw	a6,-20(s0)
  }
2040debc:	00078513          	mv	a0,a5
2040dec0:	00080593          	mv	a1,a6
2040dec4:	02c12403          	lw	s0,44(sp)
2040dec8:	03010113          	addi	sp,sp,48
2040decc:	00008067          	ret

2040ded0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandlerC1EPNS1_7SessionEPNS1_11FrameBufferE>:
namespace runtime {
namespace micro_rpc {

class MicroIOHandler {
 public:
  MicroIOHandler(Session* session, FrameBuffer* receive_buffer)
2040ded0:	fe010113          	addi	sp,sp,-32
2040ded4:	00812e23          	sw	s0,28(sp)
2040ded8:	02010413          	addi	s0,sp,32
2040dedc:	fea42623          	sw	a0,-20(s0)
2040dee0:	feb42423          	sw	a1,-24(s0)
2040dee4:	fec42223          	sw	a2,-28(s0)
      : session_{session}, receive_buffer_{receive_buffer} {}
2040dee8:	fec42783          	lw	a5,-20(s0)
2040deec:	fe842703          	lw	a4,-24(s0)
2040def0:	00e7a023          	sw	a4,0(a5)
2040def4:	fec42783          	lw	a5,-20(s0)
2040def8:	fe442703          	lw	a4,-28(s0)
2040defc:	00e7a223          	sw	a4,4(a5)
2040df00:	00000013          	nop
2040df04:	01c12403          	lw	s0,28(sp)
2040df08:	02010113          	addi	sp,sp,32
2040df0c:	00008067          	ret

2040df10 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>:

  void MessageStart(size_t message_size_bytes) {
2040df10:	fe010113          	addi	sp,sp,-32
2040df14:	00112e23          	sw	ra,28(sp)
2040df18:	00812c23          	sw	s0,24(sp)
2040df1c:	02010413          	addi	s0,sp,32
2040df20:	fea42623          	sw	a0,-20(s0)
2040df24:	feb42423          	sw	a1,-24(s0)
    session_->StartMessage(MessageType::kNormal, message_size_bytes + 8);
2040df28:	fec42783          	lw	a5,-20(s0)
2040df2c:	0007a703          	lw	a4,0(a5)
2040df30:	fe842783          	lw	a5,-24(s0)
2040df34:	00878793          	addi	a5,a5,8
2040df38:	00078613          	mv	a2,a5
2040df3c:	01000593          	li	a1,16
2040df40:	00070513          	mv	a0,a4
2040df44:	c51fe0ef          	jal	ra,2040cb94 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj>
  }
2040df48:	00000013          	nop
2040df4c:	01c12083          	lw	ra,28(sp)
2040df50:	01812403          	lw	s0,24(sp)
2040df54:	02010113          	addi	sp,sp,32
2040df58:	00008067          	ret

2040df5c <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj>:

  ssize_t PosixWrite(const uint8_t* buf, size_t buf_size_bytes) {
2040df5c:	fd010113          	addi	sp,sp,-48
2040df60:	02112623          	sw	ra,44(sp)
2040df64:	02812423          	sw	s0,40(sp)
2040df68:	03010413          	addi	s0,sp,48
2040df6c:	fca42e23          	sw	a0,-36(s0)
2040df70:	fcb42c23          	sw	a1,-40(s0)
2040df74:	fcc42a23          	sw	a2,-44(s0)
    int to_return = session_->SendBodyChunk(buf, buf_size_bytes);
2040df78:	fdc42783          	lw	a5,-36(s0)
2040df7c:	0007a783          	lw	a5,0(a5)
2040df80:	fd442603          	lw	a2,-44(s0)
2040df84:	fd842583          	lw	a1,-40(s0)
2040df88:	00078513          	mv	a0,a5
2040df8c:	cb1fe0ef          	jal	ra,2040cc3c <_ZN3tvm7runtime9micro_rpc7Session13SendBodyChunkEPKhj>
2040df90:	00050793          	mv	a5,a0
2040df94:	fef42623          	sw	a5,-20(s0)
    if (to_return < 0) {
2040df98:	fec42783          	lw	a5,-20(s0)
2040df9c:	0007d663          	bgez	a5,2040dfa8 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj+0x4c>
      return to_return;
2040dfa0:	fec42783          	lw	a5,-20(s0)
2040dfa4:	0080006f          	j	2040dfac <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj+0x50>
    }
    return buf_size_bytes;
2040dfa8:	fd442783          	lw	a5,-44(s0)
  }
2040dfac:	00078513          	mv	a0,a5
2040dfb0:	02c12083          	lw	ra,44(sp)
2040dfb4:	02812403          	lw	s0,40(sp)
2040dfb8:	03010113          	addi	sp,sp,48
2040dfbc:	00008067          	ret

2040dfc0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>:

  void MessageDone() { CHECK_EQ(session_->FinishMessage(), kTvmErrorNoError, "FinishMessage"); }
2040dfc0:	fe010113          	addi	sp,sp,-32
2040dfc4:	00112e23          	sw	ra,28(sp)
2040dfc8:	00812c23          	sw	s0,24(sp)
2040dfcc:	02010413          	addi	s0,sp,32
2040dfd0:	fea42623          	sw	a0,-20(s0)
2040dfd4:	fec42783          	lw	a5,-20(s0)
2040dfd8:	0007a783          	lw	a5,0(a5)
2040dfdc:	00078513          	mv	a0,a5
2040dfe0:	ca9fe0ef          	jal	ra,2040cc88 <_ZN3tvm7runtime9micro_rpc7Session13FinishMessageEv>
2040dfe4:	00050793          	mv	a5,a0
2040dfe8:	00f037b3          	snez	a5,a5
2040dfec:	0ff7f793          	andi	a5,a5,255
2040dff0:	02078a63          	beqz	a5,2040e024 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv+0x64>
2040dff4:	00013717          	auipc	a4,0x13
2040dff8:	0b070713          	addi	a4,a4,176 # 204210a4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x20>
2040dffc:	00013697          	auipc	a3,0x13
2040e000:	0bc68693          	addi	a3,a3,188 # 204210b8 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x34>
2040e004:	00013617          	auipc	a2,0x13
2040e008:	0b860613          	addi	a2,a2,184 # 204210bc <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x38>
2040e00c:	04600593          	li	a1,70
2040e010:	00013517          	auipc	a0,0x13
2040e014:	0c850513          	addi	a0,a0,200 # 204210d8 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x54>
2040e018:	a41ff0ef          	jal	ra,2040da58 <TVMLogf>
2040e01c:	50000513          	li	a0,1280
2040e020:	951f20ef          	jal	ra,20400970 <TVMPlatformAbort>
2040e024:	00000013          	nop
2040e028:	01c12083          	lw	ra,28(sp)
2040e02c:	01812403          	lw	s0,24(sp)
2040e030:	02010113          	addi	sp,sp,32
2040e034:	00008067          	ret

2040e038 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler9PosixReadEPhj>:

  ssize_t PosixRead(uint8_t* buf, size_t buf_size_bytes) {
2040e038:	fe010113          	addi	sp,sp,-32
2040e03c:	00112e23          	sw	ra,28(sp)
2040e040:	00812c23          	sw	s0,24(sp)
2040e044:	02010413          	addi	s0,sp,32
2040e048:	fea42623          	sw	a0,-20(s0)
2040e04c:	feb42423          	sw	a1,-24(s0)
2040e050:	fec42223          	sw	a2,-28(s0)
    return receive_buffer_->Read(buf, buf_size_bytes);
2040e054:	fec42783          	lw	a5,-20(s0)
2040e058:	0047a783          	lw	a5,4(a5)
2040e05c:	fe442603          	lw	a2,-28(s0)
2040e060:	fe842583          	lw	a1,-24(s0)
2040e064:	00078513          	mv	a0,a5
2040e068:	8cdfd0ef          	jal	ra,2040b934 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040e06c:	00050793          	mv	a5,a0
  }
2040e070:	00078513          	mv	a0,a5
2040e074:	01c12083          	lw	ra,28(sp)
2040e078:	01812403          	lw	s0,24(sp)
2040e07c:	02010113          	addi	sp,sp,32
2040e080:	00008067          	ret

2040e084 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler5CloseEv>:

  void Close() {}
2040e084:	fe010113          	addi	sp,sp,-32
2040e088:	00812e23          	sw	s0,28(sp)
2040e08c:	02010413          	addi	s0,sp,32
2040e090:	fea42623          	sw	a0,-20(s0)
2040e094:	00000013          	nop
2040e098:	01c12403          	lw	s0,28(sp)
2040e09c:	02010113          	addi	sp,sp,32
2040e0a0:	00008067          	ret

2040e0a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>:

  void Exit(int code) {
2040e0a4:	fe010113          	addi	sp,sp,-32
2040e0a8:	00812e23          	sw	s0,28(sp)
2040e0ac:	02010413          	addi	s0,sp,32
2040e0b0:	fea42623          	sw	a0,-20(s0)
2040e0b4:	feb42423          	sw	a1,-24(s0)
    for (;;) {
2040e0b8:	0000006f          	j	2040e0b8 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi+0x14>

2040e0bc <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamC1Ev>:
void* g_write_func_ctx = nullptr;
}  // namespace

class SerialWriteStream : public WriteStream {
 public:
  SerialWriteStream() {}
2040e0bc:	fe010113          	addi	sp,sp,-32
2040e0c0:	00112e23          	sw	ra,28(sp)
2040e0c4:	00812c23          	sw	s0,24(sp)
2040e0c8:	02010413          	addi	s0,sp,32
2040e0cc:	fea42623          	sw	a0,-20(s0)
2040e0d0:	fec42783          	lw	a5,-20(s0)
2040e0d4:	00078513          	mv	a0,a5
2040e0d8:	cf1ff0ef          	jal	ra,2040ddc8 <_ZN3tvm7runtime9micro_rpc11WriteStreamC1Ev>
2040e0dc:	00013717          	auipc	a4,0x13
2040e0e0:	2ac70713          	addi	a4,a4,684 # 20421388 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x8>
2040e0e4:	fec42783          	lw	a5,-20(s0)
2040e0e8:	00e7a023          	sw	a4,0(a5)
2040e0ec:	00000013          	nop
2040e0f0:	01c12083          	lw	ra,28(sp)
2040e0f4:	01812403          	lw	s0,24(sp)
2040e0f8:	02010113          	addi	sp,sp,32
2040e0fc:	00008067          	ret

2040e100 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD1Ev>:
  virtual ~SerialWriteStream() {}
2040e100:	fe010113          	addi	sp,sp,-32
2040e104:	00112e23          	sw	ra,28(sp)
2040e108:	00812c23          	sw	s0,24(sp)
2040e10c:	02010413          	addi	s0,sp,32
2040e110:	fea42623          	sw	a0,-20(s0)
2040e114:	00013717          	auipc	a4,0x13
2040e118:	27470713          	addi	a4,a4,628 # 20421388 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x8>
2040e11c:	fec42783          	lw	a5,-20(s0)
2040e120:	00e7a023          	sw	a4,0(a5)
2040e124:	fec42783          	lw	a5,-20(s0)
2040e128:	00078513          	mv	a0,a5
2040e12c:	e80ff0ef          	jal	ra,2040d7ac <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>
2040e130:	00000013          	nop
2040e134:	01c12083          	lw	ra,28(sp)
2040e138:	01812403          	lw	s0,24(sp)
2040e13c:	02010113          	addi	sp,sp,32
2040e140:	00008067          	ret

2040e144 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD0Ev>:
2040e144:	fe010113          	addi	sp,sp,-32
2040e148:	00112e23          	sw	ra,28(sp)
2040e14c:	00812c23          	sw	s0,24(sp)
2040e150:	02010413          	addi	s0,sp,32
2040e154:	fea42623          	sw	a0,-20(s0)
2040e158:	fec42503          	lw	a0,-20(s0)
2040e15c:	fa5ff0ef          	jal	ra,2040e100 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD1Ev>
2040e160:	fec42503          	lw	a0,-20(s0)
2040e164:	098000ef          	jal	ra,2040e1fc <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamdlEPv>
2040e168:	01c12083          	lw	ra,28(sp)
2040e16c:	01812403          	lw	s0,24(sp)
2040e170:	02010113          	addi	sp,sp,32
2040e174:	00008067          	ret

2040e178 <_ZN3tvm7runtime9micro_rpc17SerialWriteStream5WriteEPKhj>:

  ssize_t Write(const uint8_t* data, size_t data_size_bytes) override {
2040e178:	fe010113          	addi	sp,sp,-32
2040e17c:	00112e23          	sw	ra,28(sp)
2040e180:	00812c23          	sw	s0,24(sp)
2040e184:	02010413          	addi	s0,sp,32
2040e188:	fea42623          	sw	a0,-20(s0)
2040e18c:	feb42423          	sw	a1,-24(s0)
2040e190:	fec42223          	sw	a2,-28(s0)
    return g_write_func(g_write_func_ctx, data, data_size_bytes);
2040e194:	5fbf3797          	auipc	a5,0x5fbf3
2040e198:	d1c78793          	addi	a5,a5,-740 # 80000eb0 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_112g_write_funcE>
2040e19c:	0007a703          	lw	a4,0(a5)
2040e1a0:	5fbf3797          	auipc	a5,0x5fbf3
2040e1a4:	d1478793          	addi	a5,a5,-748 # 80000eb4 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_116g_write_func_ctxE>
2040e1a8:	0007a783          	lw	a5,0(a5)
2040e1ac:	fe442603          	lw	a2,-28(s0)
2040e1b0:	fe842583          	lw	a1,-24(s0)
2040e1b4:	00078513          	mv	a0,a5
2040e1b8:	000700e7          	jalr	a4
2040e1bc:	00050793          	mv	a5,a0
  }
2040e1c0:	00078513          	mv	a0,a5
2040e1c4:	01c12083          	lw	ra,28(sp)
2040e1c8:	01812403          	lw	s0,24(sp)
2040e1cc:	02010113          	addi	sp,sp,32
2040e1d0:	00008067          	ret

2040e1d4 <_ZN3tvm7runtime9micro_rpc17SerialWriteStream10PacketDoneEb>:

  void PacketDone(bool is_valid) override {}
2040e1d4:	fe010113          	addi	sp,sp,-32
2040e1d8:	00812e23          	sw	s0,28(sp)
2040e1dc:	02010413          	addi	s0,sp,32
2040e1e0:	fea42623          	sw	a0,-20(s0)
2040e1e4:	00058793          	mv	a5,a1
2040e1e8:	fef405a3          	sb	a5,-21(s0)
2040e1ec:	00000013          	nop
2040e1f0:	01c12403          	lw	s0,28(sp)
2040e1f4:	02010113          	addi	sp,sp,32
2040e1f8:	00008067          	ret

2040e1fc <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamdlEPv>:

 private:
  void operator delete(void*) noexcept {}  // NOLINT(readability/casting)
2040e1fc:	fe010113          	addi	sp,sp,-32
2040e200:	00812e23          	sw	s0,28(sp)
2040e204:	02010413          	addi	s0,sp,32
2040e208:	fea42623          	sw	a0,-20(s0)
2040e20c:	00000013          	nop
2040e210:	01c12403          	lw	s0,28(sp)
2040e214:	02010113          	addi	sp,sp,32
2040e218:	00008067          	ret

2040e21c <_ZN3tvm7runtime9micro_rpc7SessionD1Ev>:
class Session {
2040e21c:	fe010113          	addi	sp,sp,-32
2040e220:	00112e23          	sw	ra,28(sp)
2040e224:	00812c23          	sw	s0,24(sp)
2040e228:	02010413          	addi	s0,sp,32
2040e22c:	fea42623          	sw	a0,-20(s0)
2040e230:	fec42783          	lw	a5,-20(s0)
2040e234:	00878793          	addi	a5,a5,8
2040e238:	00078513          	mv	a0,a5
2040e23c:	c00ff0ef          	jal	ra,2040d63c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD1Ev>
2040e240:	00000013          	nop
2040e244:	01c12083          	lw	ra,28(sp)
2040e248:	01812403          	lw	s0,24(sp)
2040e24c:	02010113          	addi	sp,sp,32
2040e250:	00008067          	ret

2040e254 <_ZN3tvm7runtime9micro_rpc14MicroRPCServerC1EPhjPFiPvPKhjES4_>:
};

class MicroRPCServer {
 public:
  MicroRPCServer(uint8_t* receive_storage, size_t receive_storage_size_bytes,
2040e254:	fd010113          	addi	sp,sp,-48
2040e258:	02112623          	sw	ra,44(sp)
2040e25c:	02812423          	sw	s0,40(sp)
2040e260:	02912223          	sw	s1,36(sp)
2040e264:	03010413          	addi	s0,sp,48
2040e268:	fea42623          	sw	a0,-20(s0)
2040e26c:	feb42423          	sw	a1,-24(s0)
2040e270:	fec42223          	sw	a2,-28(s0)
2040e274:	fed42023          	sw	a3,-32(s0)
2040e278:	fce42e23          	sw	a4,-36(s0)
        framer_{&send_stream_},
        session_{&framer_, &receive_buffer_, &HandleCompleteMessageCb, this},
        io_{&session_, &receive_buffer_},
        unframer_{session_.Receiver()},
        rpc_server_{&io_},
        is_running_{true} {}
2040e27c:	fec42783          	lw	a5,-20(s0)
2040e280:	fe442603          	lw	a2,-28(s0)
2040e284:	fe842583          	lw	a1,-24(s0)
2040e288:	00078513          	mv	a0,a5
2040e28c:	985ff0ef          	jal	ra,2040dc10 <_ZN3tvm7runtime9micro_rpc11FrameBufferC1EPhj>
2040e290:	fec42783          	lw	a5,-20(s0)
2040e294:	01078793          	addi	a5,a5,16
2040e298:	00078513          	mv	a0,a5
2040e29c:	e21ff0ef          	jal	ra,2040e0bc <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamC1Ev>
2040e2a0:	fec42783          	lw	a5,-20(s0)
2040e2a4:	01478713          	addi	a4,a5,20
2040e2a8:	fec42783          	lw	a5,-20(s0)
2040e2ac:	01078793          	addi	a5,a5,16
2040e2b0:	00078593          	mv	a1,a5
2040e2b4:	00070513          	mv	a0,a4
2040e2b8:	9f1ff0ef          	jal	ra,2040dca8 <_ZN3tvm7runtime9micro_rpc6FramerC1EPNS1_11WriteStreamE>
2040e2bc:	fec42783          	lw	a5,-20(s0)
2040e2c0:	02478513          	addi	a0,a5,36
2040e2c4:	fec42783          	lw	a5,-20(s0)
2040e2c8:	01478793          	addi	a5,a5,20
2040e2cc:	fec42603          	lw	a2,-20(s0)
2040e2d0:	fec42703          	lw	a4,-20(s0)
2040e2d4:	00000697          	auipc	a3,0x0
2040e2d8:	35868693          	addi	a3,a3,856 # 2040e62c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer23HandleCompleteMessageCbEPvNS1_11MessageTypeEPNS1_11FrameBufferE>
2040e2dc:	00078593          	mv	a1,a5
2040e2e0:	a09ff0ef          	jal	ra,2040dce8 <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_>
2040e2e4:	fec42783          	lw	a5,-20(s0)
2040e2e8:	04878713          	addi	a4,a5,72
2040e2ec:	fec42783          	lw	a5,-20(s0)
2040e2f0:	02478793          	addi	a5,a5,36
2040e2f4:	fec42683          	lw	a3,-20(s0)
2040e2f8:	00068613          	mv	a2,a3
2040e2fc:	00078593          	mv	a1,a5
2040e300:	00070513          	mv	a0,a4
2040e304:	bcdff0ef          	jal	ra,2040ded0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandlerC1EPNS1_7SessionEPNS1_11FrameBufferE>
2040e308:	fec42783          	lw	a5,-20(s0)
2040e30c:	05078493          	addi	s1,a5,80
2040e310:	fec42783          	lw	a5,-20(s0)
2040e314:	02478793          	addi	a5,a5,36
2040e318:	00078513          	mv	a0,a5
2040e31c:	a85ff0ef          	jal	ra,2040dda0 <_ZN3tvm7runtime9micro_rpc7Session8ReceiverEv>
2040e320:	00050793          	mv	a5,a0
2040e324:	00078593          	mv	a1,a5
2040e328:	00048513          	mv	a0,s1
2040e32c:	935ff0ef          	jal	ra,2040dc60 <_ZN3tvm7runtime9micro_rpc8UnframerC1EPNS1_11WriteStreamE>
2040e330:	fec42783          	lw	a5,-20(s0)
2040e334:	0f078713          	addi	a4,a5,240
2040e338:	fec42783          	lw	a5,-20(s0)
2040e33c:	04878793          	addi	a5,a5,72
2040e340:	00078593          	mv	a1,a5
2040e344:	00070513          	mv	a0,a4
2040e348:	32c000ef          	jal	ra,2040e674 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEC1EPS3_>
2040e34c:	fec42783          	lw	a5,-20(s0)
2040e350:	00100713          	li	a4,1
2040e354:	10e78423          	sb	a4,264(a5)
2040e358:	00000013          	nop
2040e35c:	02c12083          	lw	ra,44(sp)
2040e360:	02812403          	lw	s0,40(sp)
2040e364:	02412483          	lw	s1,36(sp)
2040e368:	03010113          	addi	sp,sp,48
2040e36c:	00008067          	ret

2040e370 <_ZN3tvm7runtime9micro_rpc14MicroRPCServernwEjPv>:

  void* operator new(size_t count, void* ptr) { return ptr; }
2040e370:	fe010113          	addi	sp,sp,-32
2040e374:	00812e23          	sw	s0,28(sp)
2040e378:	02010413          	addi	s0,sp,32
2040e37c:	fea42623          	sw	a0,-20(s0)
2040e380:	feb42423          	sw	a1,-24(s0)
2040e384:	fe842783          	lw	a5,-24(s0)
2040e388:	00078513          	mv	a0,a5
2040e38c:	01c12403          	lw	s0,28(sp)
2040e390:	02010113          	addi	sp,sp,32
2040e394:	00008067          	ret

2040e398 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv>:

  void Initialize() {
2040e398:	fd010113          	addi	sp,sp,-48
2040e39c:	02112623          	sw	ra,44(sp)
2040e3a0:	02812423          	sw	s0,40(sp)
2040e3a4:	03010413          	addi	s0,sp,48
2040e3a8:	fca42e23          	sw	a0,-36(s0)
    uint8_t initial_session_nonce = Session::kInvalidNonce;
2040e3ac:	fe0405a3          	sb	zero,-21(s0)
    tvm_crt_error_t error =
        TVMPlatformGenerateRandom(&initial_session_nonce, sizeof(initial_session_nonce));
2040e3b0:	feb40793          	addi	a5,s0,-21
2040e3b4:	00100593          	li	a1,1
2040e3b8:	00078513          	mv	a0,a5
2040e3bc:	de0f20ef          	jal	ra,2040099c <TVMPlatformGenerateRandom>
2040e3c0:	fea42623          	sw	a0,-20(s0)
    CHECK_EQ(kTvmErrorNoError, error, "generating random session id");
2040e3c4:	fec42783          	lw	a5,-20(s0)
2040e3c8:	02078a63          	beqz	a5,2040e3fc <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv+0x64>
2040e3cc:	00013717          	auipc	a4,0x13
2040e3d0:	d7070713          	addi	a4,a4,-656 # 2042113c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0xb8>
2040e3d4:	00013697          	auipc	a3,0x13
2040e3d8:	ce468693          	addi	a3,a3,-796 # 204210b8 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x34>
2040e3dc:	00013617          	auipc	a2,0x13
2040e3e0:	cc860613          	addi	a2,a2,-824 # 204210a4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x20>
2040e3e4:	07f00593          	li	a1,127
2040e3e8:	00013517          	auipc	a0,0x13
2040e3ec:	d5c50513          	addi	a0,a0,-676 # 20421144 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0xc0>
2040e3f0:	e68ff0ef          	jal	ra,2040da58 <TVMLogf>
2040e3f4:	50000513          	li	a0,1280
2040e3f8:	d78f20ef          	jal	ra,20400970 <TVMPlatformAbort>
    CHECK_EQ(kTvmErrorNoError, session_.Initialize(initial_session_nonce), "rpc server init");
2040e3fc:	fdc42783          	lw	a5,-36(s0)
2040e400:	02478793          	addi	a5,a5,36
2040e404:	feb44703          	lbu	a4,-21(s0)
2040e408:	00070593          	mv	a1,a4
2040e40c:	00078513          	mv	a0,a5
2040e410:	975fe0ef          	jal	ra,2040cd84 <_ZN3tvm7runtime9micro_rpc7Session10InitializeEh>
2040e414:	00050793          	mv	a5,a0
2040e418:	00f037b3          	snez	a5,a5
2040e41c:	0ff7f793          	andi	a5,a5,255
2040e420:	02078a63          	beqz	a5,2040e454 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv+0xbc>
2040e424:	00013717          	auipc	a4,0x13
2040e428:	d9070713          	addi	a4,a4,-624 # 204211b4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x130>
2040e42c:	00013697          	auipc	a3,0x13
2040e430:	c8c68693          	addi	a3,a3,-884 # 204210b8 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x34>
2040e434:	00013617          	auipc	a2,0x13
2040e438:	c7060613          	addi	a2,a2,-912 # 204210a4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x20>
2040e43c:	08000593          	li	a1,128
2040e440:	00013517          	auipc	a0,0x13
2040e444:	da050513          	addi	a0,a0,-608 # 204211e0 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x15c>
2040e448:	e10ff0ef          	jal	ra,2040da58 <TVMLogf>
2040e44c:	50000513          	li	a0,1280
2040e450:	d20f20ef          	jal	ra,20400970 <TVMPlatformAbort>
  }
2040e454:	00000013          	nop
2040e458:	02c12083          	lw	ra,44(sp)
2040e45c:	02812403          	lw	s0,40(sp)
2040e460:	03010113          	addi	sp,sp,48
2040e464:	00008067          	ret

2040e468 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj>:
   *     data to process. On return, updated to point past data that has been consumed.
   * \param new_data_size_bytes Points to the number of valid bytes in `new_data`. On return,
   *     updated to the number of unprocessed bytes remaining in `new_data` (usually 0).
   * \return an error code indicating the outcome of the processing loop.
   */
  tvm_crt_error_t Loop(uint8_t** new_data, size_t* new_data_size_bytes) {
2040e468:	fd010113          	addi	sp,sp,-48
2040e46c:	02112623          	sw	ra,44(sp)
2040e470:	02812423          	sw	s0,40(sp)
2040e474:	03010413          	addi	s0,sp,48
2040e478:	fca42e23          	sw	a0,-36(s0)
2040e47c:	fcb42c23          	sw	a1,-40(s0)
2040e480:	fcc42a23          	sw	a2,-44(s0)
    if (!is_running_) {
2040e484:	fdc42783          	lw	a5,-36(s0)
2040e488:	1087c783          	lbu	a5,264(a5)
2040e48c:	0017c793          	xori	a5,a5,1
2040e490:	0ff7f793          	andi	a5,a5,255
2040e494:	00078663          	beqz	a5,2040e4a0 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0x38>
      return kTvmErrorPlatformShutdown;
2040e498:	50200793          	li	a5,1282
2040e49c:	0a80006f          	j	2040e544 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xdc>
    }

    tvm_crt_error_t err = kTvmErrorNoError;
2040e4a0:	fe042623          	sw	zero,-20(s0)
    if (new_data != nullptr && new_data_size_bytes != nullptr && *new_data_size_bytes > 0) {
2040e4a4:	fd842783          	lw	a5,-40(s0)
2040e4a8:	06078a63          	beqz	a5,2040e51c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xb4>
2040e4ac:	fd442783          	lw	a5,-44(s0)
2040e4b0:	06078663          	beqz	a5,2040e51c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xb4>
2040e4b4:	fd442783          	lw	a5,-44(s0)
2040e4b8:	0007a783          	lw	a5,0(a5)
2040e4bc:	06078063          	beqz	a5,2040e51c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xb4>
      size_t bytes_consumed;
      err = unframer_.Write(*new_data, *new_data_size_bytes, &bytes_consumed);
2040e4c0:	fdc42783          	lw	a5,-36(s0)
2040e4c4:	05078713          	addi	a4,a5,80
2040e4c8:	fd842783          	lw	a5,-40(s0)
2040e4cc:	0007a583          	lw	a1,0(a5)
2040e4d0:	fd442783          	lw	a5,-44(s0)
2040e4d4:	0007a783          	lw	a5,0(a5)
2040e4d8:	fe840693          	addi	a3,s0,-24
2040e4dc:	00078613          	mv	a2,a5
2040e4e0:	00070513          	mv	a0,a4
2040e4e4:	ec8fd0ef          	jal	ra,2040bbac <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj>
2040e4e8:	fea42623          	sw	a0,-20(s0)
      *new_data += bytes_consumed;
2040e4ec:	fd842783          	lw	a5,-40(s0)
2040e4f0:	0007a703          	lw	a4,0(a5)
2040e4f4:	fe842783          	lw	a5,-24(s0)
2040e4f8:	00f70733          	add	a4,a4,a5
2040e4fc:	fd842783          	lw	a5,-40(s0)
2040e500:	00e7a023          	sw	a4,0(a5)
      *new_data_size_bytes -= bytes_consumed;
2040e504:	fd442783          	lw	a5,-44(s0)
2040e508:	0007a703          	lw	a4,0(a5)
2040e50c:	fe842783          	lw	a5,-24(s0)
2040e510:	40f70733          	sub	a4,a4,a5
2040e514:	fd442783          	lw	a5,-44(s0)
2040e518:	00e7a023          	sw	a4,0(a5)
    }

    if (err == kTvmErrorNoError && !is_running_) {
2040e51c:	fec42783          	lw	a5,-20(s0)
2040e520:	02079063          	bnez	a5,2040e540 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xd8>
2040e524:	fdc42783          	lw	a5,-36(s0)
2040e528:	1087c783          	lbu	a5,264(a5)
2040e52c:	0017c793          	xori	a5,a5,1
2040e530:	0ff7f793          	andi	a5,a5,255
2040e534:	00078663          	beqz	a5,2040e540 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xd8>
      err = kTvmErrorPlatformShutdown;
2040e538:	50200793          	li	a5,1282
2040e53c:	fef42623          	sw	a5,-20(s0)
    }

    return err;
2040e540:	fec42783          	lw	a5,-20(s0)
  }
2040e544:	00078513          	mv	a0,a5
2040e548:	02c12083          	lw	ra,44(sp)
2040e54c:	02812403          	lw	s0,40(sp)
2040e550:	03010113          	addi	sp,sp,48
2040e554:	00008067          	ret

2040e558 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer3LogEPKhj>:

  void Log(const uint8_t* message, size_t message_size_bytes) {
2040e558:	fd010113          	addi	sp,sp,-48
2040e55c:	02112623          	sw	ra,44(sp)
2040e560:	02812423          	sw	s0,40(sp)
2040e564:	03010413          	addi	s0,sp,48
2040e568:	fca42e23          	sw	a0,-36(s0)
2040e56c:	fcb42c23          	sw	a1,-40(s0)
2040e570:	fcc42a23          	sw	a2,-44(s0)
    tvm_crt_error_t to_return =
        session_.SendMessage(MessageType::kLog, message, message_size_bytes);
2040e574:	fdc42783          	lw	a5,-36(s0)
2040e578:	02478793          	addi	a5,a5,36
2040e57c:	fd442683          	lw	a3,-44(s0)
2040e580:	fd842603          	lw	a2,-40(s0)
2040e584:	00300593          	li	a1,3
2040e588:	00078513          	mv	a0,a5
2040e58c:	89dfe0ef          	jal	ra,2040ce28 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj>
2040e590:	fea42623          	sw	a0,-20(s0)
    if (to_return != 0) {
2040e594:	fec42783          	lw	a5,-20(s0)
2040e598:	00078663          	beqz	a5,2040e5a4 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer3LogEPKhj+0x4c>
      TVMPlatformAbort(to_return);
2040e59c:	fec42503          	lw	a0,-20(s0)
2040e5a0:	bd0f20ef          	jal	ra,20400970 <TVMPlatformAbort>
    }
  }
2040e5a4:	00000013          	nop
2040e5a8:	02c12083          	lw	ra,44(sp)
2040e5ac:	02812403          	lw	s0,40(sp)
2040e5b0:	03010113          	addi	sp,sp,48
2040e5b4:	00008067          	ret

2040e5b8 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE>:
  Unframer unframer_;
  MinRPCServer<MicroIOHandler> rpc_server_;

  bool is_running_;

  void HandleCompleteMessage(MessageType message_type, FrameBuffer* buf) {
2040e5b8:	fe010113          	addi	sp,sp,-32
2040e5bc:	00112e23          	sw	ra,28(sp)
2040e5c0:	00812c23          	sw	s0,24(sp)
2040e5c4:	02010413          	addi	s0,sp,32
2040e5c8:	fea42623          	sw	a0,-20(s0)
2040e5cc:	00058793          	mv	a5,a1
2040e5d0:	fec42223          	sw	a2,-28(s0)
2040e5d4:	fef405a3          	sb	a5,-21(s0)
    if (message_type != MessageType::kNormal) {
2040e5d8:	feb44703          	lbu	a4,-21(s0)
2040e5dc:	01000793          	li	a5,16
2040e5e0:	02f71c63          	bne	a4,a5,2040e618 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE+0x60>
      return;
    }

    is_running_ = rpc_server_.ProcessOnePacket();
2040e5e4:	fec42783          	lw	a5,-20(s0)
2040e5e8:	0f078793          	addi	a5,a5,240
2040e5ec:	00078513          	mv	a0,a5
2040e5f0:	0f4000ef          	jal	ra,2040e6e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv>
2040e5f4:	00050793          	mv	a5,a0
2040e5f8:	00078713          	mv	a4,a5
2040e5fc:	fec42783          	lw	a5,-20(s0)
2040e600:	10e78423          	sb	a4,264(a5)
    session_.ClearReceiveBuffer();
2040e604:	fec42783          	lw	a5,-20(s0)
2040e608:	02478793          	addi	a5,a5,36
2040e60c:	00078513          	mv	a0,a5
2040e610:	b29fe0ef          	jal	ra,2040d138 <_ZN3tvm7runtime9micro_rpc7Session18ClearReceiveBufferEv>
2040e614:	0080006f          	j	2040e61c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE+0x64>
      return;
2040e618:	00000013          	nop
  }
2040e61c:	01c12083          	lw	ra,28(sp)
2040e620:	01812403          	lw	s0,24(sp)
2040e624:	02010113          	addi	sp,sp,32
2040e628:	00008067          	ret

2040e62c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer23HandleCompleteMessageCbEPvNS1_11MessageTypeEPNS1_11FrameBufferE>:

  static void HandleCompleteMessageCb(void* context, MessageType message_type, FrameBuffer* buf) {
2040e62c:	fe010113          	addi	sp,sp,-32
2040e630:	00112e23          	sw	ra,28(sp)
2040e634:	00812c23          	sw	s0,24(sp)
2040e638:	02010413          	addi	s0,sp,32
2040e63c:	fea42623          	sw	a0,-20(s0)
2040e640:	00058793          	mv	a5,a1
2040e644:	fec42223          	sw	a2,-28(s0)
2040e648:	fef405a3          	sb	a5,-21(s0)
    static_cast<MicroRPCServer*>(context)->HandleCompleteMessage(message_type, buf);
2040e64c:	feb44783          	lbu	a5,-21(s0)
2040e650:	fe442603          	lw	a2,-28(s0)
2040e654:	00078593          	mv	a1,a5
2040e658:	fec42503          	lw	a0,-20(s0)
2040e65c:	f5dff0ef          	jal	ra,2040e5b8 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE>
  }
2040e660:	00000013          	nop
2040e664:	01c12083          	lw	ra,28(sp)
2040e668:	01812403          	lw	s0,24(sp)
2040e66c:	02010113          	addi	sp,sp,32
2040e670:	00008067          	ret

2040e674 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEC1EPS3_>:

  /*!
   * \brief Constructor.
   * \param io The IO handler.
   */
  explicit MinRPCServer(TIOHandler* io) : io_(io), arena_(PageAllocator(io)) {}
2040e674:	fd010113          	addi	sp,sp,-48
2040e678:	02112623          	sw	ra,44(sp)
2040e67c:	02812423          	sw	s0,40(sp)
2040e680:	02912223          	sw	s1,36(sp)
2040e684:	03010413          	addi	s0,sp,48
2040e688:	fca42e23          	sw	a0,-36(s0)
2040e68c:	fcb42c23          	sw	a1,-40(s0)
2040e690:	fdc42783          	lw	a5,-36(s0)
2040e694:	fd842703          	lw	a4,-40(s0)
2040e698:	00e7a023          	sw	a4,0(a5)
2040e69c:	fdc42783          	lw	a5,-36(s0)
2040e6a0:	00478493          	addi	s1,a5,4
2040e6a4:	fec40793          	addi	a5,s0,-20
2040e6a8:	fd842583          	lw	a1,-40(s0)
2040e6ac:	00078513          	mv	a0,a5
2040e6b0:	164000ef          	jal	ra,2040e814 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEEC1EPS4_>
2040e6b4:	fec42583          	lw	a1,-20(s0)
2040e6b8:	00048513          	mv	a0,s1
2040e6bc:	188000ef          	jal	ra,2040e844 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEEC1ES7_>
2040e6c0:	fdc42783          	lw	a5,-36(s0)
2040e6c4:	00100713          	li	a4,1
2040e6c8:	00e78a23          	sb	a4,20(a5)
2040e6cc:	00000013          	nop
2040e6d0:	02c12083          	lw	ra,44(sp)
2040e6d4:	02812403          	lw	s0,40(sp)
2040e6d8:	02412483          	lw	s1,36(sp)
2040e6dc:	03010113          	addi	sp,sp,48
2040e6e0:	00008067          	ret

2040e6e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv>:
  /*! \brief Process a single request.
   *
   * \return true when the server should continue processing requests. false when it should be
   *  shutdown.
   */
  bool ProcessOnePacket() {
2040e6e4:	fd010113          	addi	sp,sp,-48
2040e6e8:	02112623          	sw	ra,44(sp)
2040e6ec:	02812423          	sw	s0,40(sp)
2040e6f0:	03010413          	addi	s0,sp,48
2040e6f4:	fca42e23          	sw	a0,-36(s0)
    RPCCode code;
    uint64_t packet_len;

    arena_.RecycleAll();
2040e6f8:	fdc42783          	lw	a5,-36(s0)
2040e6fc:	00478793          	addi	a5,a5,4
2040e700:	00078513          	mv	a0,a5
2040e704:	218000ef          	jal	ra,2040e91c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10RecycleAllEv>
    allow_clean_shutdown_ = true;
2040e708:	fdc42783          	lw	a5,-36(s0)
2040e70c:	00100713          	li	a4,1
2040e710:	00e78a23          	sb	a4,20(a5)

    this->Read(&packet_len);
2040e714:	fe040793          	addi	a5,s0,-32
2040e718:	00078593          	mv	a1,a5
2040e71c:	fdc42503          	lw	a0,-36(s0)
2040e720:	270000ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    if (packet_len == 0) return true;
2040e724:	fe042683          	lw	a3,-32(s0)
2040e728:	fe442703          	lw	a4,-28(s0)
2040e72c:	00068793          	mv	a5,a3
2040e730:	00e7e7b3          	or	a5,a5,a4
2040e734:	00079663          	bnez	a5,2040e740 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x5c>
2040e738:	00100793          	li	a5,1
2040e73c:	0c40006f          	j	2040e800 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x11c>
    this->Read(&code);
2040e740:	fec40793          	addi	a5,s0,-20
2040e744:	00078593          	mv	a1,a5
2040e748:	fdc42503          	lw	a0,-36(s0)
2040e74c:	280000ef          	jal	ra,2040e9cc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadINS0_7RPCCodeEEEvPT_>

    allow_clean_shutdown_ = false;
2040e750:	fdc42783          	lw	a5,-36(s0)
2040e754:	00078a23          	sb	zero,20(a5)

    if (code >= RPCCode::kSyscallCodeStart) {
2040e758:	fec42703          	lw	a4,-20(s0)
2040e75c:	00800793          	li	a5,8
2040e760:	00e7dc63          	ble	a4,a5,2040e778 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x94>
      this->HandleSyscallFunc(code);
2040e764:	fec42783          	lw	a5,-20(s0)
2040e768:	00078593          	mv	a1,a5
2040e76c:	fdc42503          	lw	a0,-36(s0)
2040e770:	298000ef          	jal	ra,2040ea08 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE>
2040e774:	0880006f          	j	2040e7fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
    } else {
      switch (code) {
2040e778:	fec42783          	lw	a5,-20(s0)
2040e77c:	00700713          	li	a4,7
2040e780:	06f76463          	bltu	a4,a5,2040e7e8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x104>
2040e784:	00279713          	slli	a4,a5,0x2
2040e788:	00013797          	auipc	a5,0x13
2040e78c:	b0478793          	addi	a5,a5,-1276 # 2042128c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x208>
2040e790:	00f707b3          	add	a5,a4,a5
2040e794:	0007a703          	lw	a4,0(a5)
2040e798:	00013797          	auipc	a5,0x13
2040e79c:	af478793          	addi	a5,a5,-1292 # 2042128c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x208>
2040e7a0:	00f707b3          	add	a5,a4,a5
2040e7a4:	00078067          	jr	a5
        case RPCCode::kCallFunc: {
          HandleNormalCallFunc();
2040e7a8:	fdc42503          	lw	a0,-36(s0)
2040e7ac:	454000ef          	jal	ra,2040ec00 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv>
          break;
2040e7b0:	04c0006f          	j	2040e7fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kInitServer: {
          HandleInitServer();
2040e7b4:	fdc42503          	lw	a0,-36(s0)
2040e7b8:	5fc000ef          	jal	ra,2040edb4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16HandleInitServerEv>
          break;
2040e7bc:	0400006f          	j	2040e7fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kCopyFromRemote: {
          HandleCopyFromRemote();
2040e7c0:	fdc42503          	lw	a0,-36(s0)
2040e7c4:	698000ef          	jal	ra,2040ee5c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv>
          break;
2040e7c8:	0340006f          	j	2040e7fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kCopyToRemote: {
          HandleCopyToRemote();
2040e7cc:	fdc42503          	lw	a0,-36(s0)
2040e7d0:	12d000ef          	jal	ra,2040f0fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv>
          break;
2040e7d4:	0280006f          	j	2040e7fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kShutdown: {
          this->Shutdown();
2040e7d8:	fdc42503          	lw	a0,-36(s0)
2040e7dc:	355000ef          	jal	ra,2040f330 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE8ShutdownEv>
          return false;
2040e7e0:	00000793          	li	a5,0
2040e7e4:	01c0006f          	j	2040e800 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x11c>
        }
        default: {
          this->ThrowError(RPCServerStatus::kUnknownRPCCode);
2040e7e8:	00000613          	li	a2,0
2040e7ec:	00600593          	li	a1,6
2040e7f0:	fdc42503          	lw	a0,-36(s0)
2040e7f4:	385000ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
2040e7f8:	00000013          	nop
        }
      }
    }

    return true;
2040e7fc:	00100793          	li	a5,1
  }
2040e800:	00078513          	mv	a0,a5
2040e804:	02c12083          	lw	ra,44(sp)
2040e808:	02812403          	lw	s0,40(sp)
2040e80c:	03010113          	addi	sp,sp,48
2040e810:	00008067          	ret

2040e814 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEEC1EPS4_>:
template <typename TIOHandler>
class PageAllocator {
 public:
  using ArenaPageHeader = tvm::support::ArenaPageHeader;

  explicit PageAllocator(TIOHandler* io) : io_(io) {}
2040e814:	fe010113          	addi	sp,sp,-32
2040e818:	00812e23          	sw	s0,28(sp)
2040e81c:	02010413          	addi	s0,sp,32
2040e820:	fea42623          	sw	a0,-20(s0)
2040e824:	feb42423          	sw	a1,-24(s0)
2040e828:	fec42783          	lw	a5,-20(s0)
2040e82c:	fe842703          	lw	a4,-24(s0)
2040e830:	00e7a023          	sw	a4,0(a5)
2040e834:	00000013          	nop
2040e838:	01c12403          	lw	s0,28(sp)
2040e83c:	02010113          	addi	sp,sp,32
2040e840:	00008067          	ret

2040e844 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEEC1ES7_>:
 *  chunk and frees them all only during destruction.
 */
template <typename PageAllocator>
class GenericArena {
 public:
  explicit GenericArena(PageAllocator alloc = PageAllocator()) : alloc_(alloc) {
2040e844:	fe010113          	addi	sp,sp,-32
2040e848:	00112e23          	sw	ra,28(sp)
2040e84c:	00812c23          	sw	s0,24(sp)
2040e850:	02010413          	addi	s0,sp,32
2040e854:	fea42623          	sw	a0,-20(s0)
2040e858:	feb42423          	sw	a1,-24(s0)
2040e85c:	fec42783          	lw	a5,-20(s0)
2040e860:	fe842703          	lw	a4,-24(s0)
2040e864:	00e7a023          	sw	a4,0(a5)
2040e868:	fec42783          	lw	a5,-20(s0)
2040e86c:	0007a223          	sw	zero,4(a5)
2040e870:	fec42783          	lw	a5,-20(s0)
2040e874:	0007a423          	sw	zero,8(a5)
2040e878:	fec42783          	lw	a5,-20(s0)
2040e87c:	0007a623          	sw	zero,12(a5)
    // eagerly allocate the first page.
    head_ = tail_ = alloc_.allocate(1);
2040e880:	fec42783          	lw	a5,-20(s0)
2040e884:	00100593          	li	a1,1
2040e888:	00078513          	mv	a0,a5
2040e88c:	331000ef          	jal	ra,2040f3bc <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj>
2040e890:	00050713          	mv	a4,a0
2040e894:	fec42783          	lw	a5,-20(s0)
2040e898:	00e7a423          	sw	a4,8(a5)
2040e89c:	fec42783          	lw	a5,-20(s0)
2040e8a0:	0087a703          	lw	a4,8(a5)
2040e8a4:	fec42783          	lw	a5,-20(s0)
2040e8a8:	00e7a223          	sw	a4,4(a5)
    head_->next = nullptr;
2040e8ac:	fec42783          	lw	a5,-20(s0)
2040e8b0:	0047a783          	lw	a5,4(a5)
2040e8b4:	0007a023          	sw	zero,0(a5)
  }
2040e8b8:	00000013          	nop
2040e8bc:	01c12083          	lw	ra,28(sp)
2040e8c0:	01812403          	lw	s0,24(sp)
2040e8c4:	02010113          	addi	sp,sp,32
2040e8c8:	00008067          	ret

2040e8cc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE7FreeAllEv>:
#if TVM_ARENA_HAS_DESTRUCTOR
  ~GenericArena() { this->FreeAll(); }
#endif

  /*! \brief Free all pages. */
  void FreeAll() {
2040e8cc:	fe010113          	addi	sp,sp,-32
2040e8d0:	00112e23          	sw	ra,28(sp)
2040e8d4:	00812c23          	sw	s0,24(sp)
2040e8d8:	02010413          	addi	s0,sp,32
2040e8dc:	fea42623          	sw	a0,-20(s0)
    FreePageList(&head_);
2040e8e0:	fec42783          	lw	a5,-20(s0)
2040e8e4:	00478793          	addi	a5,a5,4
2040e8e8:	00078593          	mv	a1,a5
2040e8ec:	fec42503          	lw	a0,-20(s0)
2040e8f0:	3ad000ef          	jal	ra,2040f49c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE>
    FreePageList(&free_list_);
2040e8f4:	fec42783          	lw	a5,-20(s0)
2040e8f8:	00c78793          	addi	a5,a5,12
2040e8fc:	00078593          	mv	a1,a5
2040e900:	fec42503          	lw	a0,-20(s0)
2040e904:	399000ef          	jal	ra,2040f49c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE>
  }
2040e908:	00000013          	nop
2040e90c:	01c12083          	lw	ra,28(sp)
2040e910:	01812403          	lw	s0,24(sp)
2040e914:	02010113          	addi	sp,sp,32
2040e918:	00008067          	ret

2040e91c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10RecycleAllEv>:
  /*! \brief Recycle all the pages in the arena */
  void RecycleAll() {
2040e91c:	fe010113          	addi	sp,sp,-32
2040e920:	00812e23          	sw	s0,28(sp)
2040e924:	02010413          	addi	s0,sp,32
2040e928:	fea42623          	sw	a0,-20(s0)
    // put all the current list to the free list.
    tail_->next = free_list_;
2040e92c:	fec42783          	lw	a5,-20(s0)
2040e930:	0087a783          	lw	a5,8(a5)
2040e934:	fec42703          	lw	a4,-20(s0)
2040e938:	00c72703          	lw	a4,12(a4)
2040e93c:	00e7a023          	sw	a4,0(a5)
    // allocate the first in the free list to head
    free_list_ = head_->next;
2040e940:	fec42783          	lw	a5,-20(s0)
2040e944:	0047a783          	lw	a5,4(a5)
2040e948:	0007a703          	lw	a4,0(a5)
2040e94c:	fec42783          	lw	a5,-20(s0)
2040e950:	00e7a623          	sw	a4,12(a5)
    head_->next = nullptr;
2040e954:	fec42783          	lw	a5,-20(s0)
2040e958:	0047a783          	lw	a5,4(a5)
2040e95c:	0007a023          	sw	zero,0(a5)
    // Reset the head.
    head_->offset = sizeof(ArenaPageHeader);
2040e960:	fec42783          	lw	a5,-20(s0)
2040e964:	0047a783          	lw	a5,4(a5)
2040e968:	00c00713          	li	a4,12
2040e96c:	00e7a423          	sw	a4,8(a5)
    tail_ = head_;
2040e970:	fec42783          	lw	a5,-20(s0)
2040e974:	0047a703          	lw	a4,4(a5)
2040e978:	fec42783          	lw	a5,-20(s0)
2040e97c:	00e7a423          	sw	a4,8(a5)
  }
2040e980:	00000013          	nop
2040e984:	01c12403          	lw	s0,28(sp)
2040e988:	02010113          	addi	sp,sp,32
2040e98c:	00008067          	ret

2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>:
  void Read(T* data) {
2040e990:	fe010113          	addi	sp,sp,-32
2040e994:	00112e23          	sw	ra,28(sp)
2040e998:	00812c23          	sw	s0,24(sp)
2040e99c:	02010413          	addi	s0,sp,32
2040e9a0:	fea42623          	sw	a0,-20(s0)
2040e9a4:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
2040e9a8:	00800613          	li	a2,8
2040e9ac:	fe842583          	lw	a1,-24(s0)
2040e9b0:	fec42503          	lw	a0,-20(s0)
2040e9b4:	355000ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2040e9b8:	00000013          	nop
2040e9bc:	01c12083          	lw	ra,28(sp)
2040e9c0:	01812403          	lw	s0,24(sp)
2040e9c4:	02010113          	addi	sp,sp,32
2040e9c8:	00008067          	ret

2040e9cc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadINS0_7RPCCodeEEEvPT_>:
  void Read(T* data) {
2040e9cc:	fe010113          	addi	sp,sp,-32
2040e9d0:	00112e23          	sw	ra,28(sp)
2040e9d4:	00812c23          	sw	s0,24(sp)
2040e9d8:	02010413          	addi	s0,sp,32
2040e9dc:	fea42623          	sw	a0,-20(s0)
2040e9e0:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
2040e9e4:	00400613          	li	a2,4
2040e9e8:	fe842583          	lw	a1,-24(s0)
2040e9ec:	fec42503          	lw	a0,-20(s0)
2040e9f0:	319000ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2040e9f4:	00000013          	nop
2040e9f8:	01c12083          	lw	ra,28(sp)
2040e9fc:	01812403          	lw	s0,24(sp)
2040ea00:	02010113          	addi	sp,sp,32
2040ea04:	00008067          	ret

2040ea08 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE>:
  void HandleSyscallFunc(RPCCode code) {
2040ea08:	fd010113          	addi	sp,sp,-48
2040ea0c:	02112623          	sw	ra,44(sp)
2040ea10:	02812423          	sw	s0,40(sp)
2040ea14:	03010413          	addi	s0,sp,48
2040ea18:	fca42e23          	sw	a0,-36(s0)
2040ea1c:	fcb42c23          	sw	a1,-40(s0)
    RecvPackedSeq(&values, &tcodes, &num_args);
2040ea20:	fe440693          	addi	a3,s0,-28
2040ea24:	fe840713          	addi	a4,s0,-24
2040ea28:	fec40793          	addi	a5,s0,-20
2040ea2c:	00070613          	mv	a2,a4
2040ea30:	00078593          	mv	a1,a5
2040ea34:	fdc42503          	lw	a0,-36(s0)
2040ea38:	3c5000ef          	jal	ra,2040f5fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>
    switch (code) {
2040ea3c:	fd842783          	lw	a5,-40(s0)
2040ea40:	ff778793          	addi	a5,a5,-9
2040ea44:	00b00713          	li	a4,11
2040ea48:	18f76863          	bltu	a4,a5,2040ebd8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1d0>
2040ea4c:	00279713          	slli	a4,a5,0x2
2040ea50:	00013797          	auipc	a5,0x13
2040ea54:	85c78793          	addi	a5,a5,-1956 # 204212ac <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x228>
2040ea58:	00f707b3          	add	a5,a4,a5
2040ea5c:	0007a703          	lw	a4,0(a5)
2040ea60:	00013797          	auipc	a5,0x13
2040ea64:	84c78793          	addi	a5,a5,-1972 # 204212ac <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x228>
2040ea68:	00f707b3          	add	a5,a4,a5
2040ea6c:	00078067          	jr	a5
        this->SyscallFreeHandle(values, tcodes, num_args);
2040ea70:	fec42783          	lw	a5,-20(s0)
2040ea74:	fe842703          	lw	a4,-24(s0)
2040ea78:	fe442683          	lw	a3,-28(s0)
2040ea7c:	00070613          	mv	a2,a4
2040ea80:	00078593          	mv	a1,a5
2040ea84:	fdc42503          	lw	a0,-36(s0)
2040ea88:	3bd000ef          	jal	ra,2040f644 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii>
        break;
2040ea8c:	1600006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallGetGlobalFunc(values, tcodes, num_args);
2040ea90:	fec42783          	lw	a5,-20(s0)
2040ea94:	fe842703          	lw	a4,-24(s0)
2040ea98:	fe442683          	lw	a3,-28(s0)
2040ea9c:	00070613          	mv	a2,a4
2040eaa0:	00078593          	mv	a1,a5
2040eaa4:	fdc42503          	lw	a0,-36(s0)
2040eaa8:	4e5000ef          	jal	ra,2040f78c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii>
        break;
2040eaac:	1400006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->ReturnException("SetDevice not supported");
2040eab0:	00012597          	auipc	a1,0x12
2040eab4:	79458593          	addi	a1,a1,1940 # 20421244 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x1c0>
2040eab8:	fdc42503          	lw	a0,-36(s0)
2040eabc:	581000ef          	jal	ra,2040f83c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
        break;
2040eac0:	12c0006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->ReturnException("GetAttr not supported");
2040eac4:	00012597          	auipc	a1,0x12
2040eac8:	79858593          	addi	a1,a1,1944 # 2042125c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x1d8>
2040eacc:	fdc42503          	lw	a0,-36(s0)
2040ead0:	56d000ef          	jal	ra,2040f83c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
        break;
2040ead4:	1180006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevAllocData(values, tcodes, num_args);
2040ead8:	fec42783          	lw	a5,-20(s0)
2040eadc:	fe842703          	lw	a4,-24(s0)
2040eae0:	fe442683          	lw	a3,-28(s0)
2040eae4:	00070613          	mv	a2,a4
2040eae8:	00078593          	mv	a1,a5
2040eaec:	fdc42503          	lw	a0,-36(s0)
2040eaf0:	585000ef          	jal	ra,2040f874 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii>
        break;
2040eaf4:	0f80006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevAllocDataWithScope(values, tcodes, num_args);
2040eaf8:	fec42783          	lw	a5,-20(s0)
2040eafc:	fe842703          	lw	a4,-24(s0)
2040eb00:	fe442683          	lw	a3,-28(s0)
2040eb04:	00070613          	mv	a2,a4
2040eb08:	00078593          	mv	a1,a5
2040eb0c:	fdc42503          	lw	a0,-36(s0)
2040eb10:	6d1000ef          	jal	ra,2040f9e0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii>
        break;
2040eb14:	0d80006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevFreeData(values, tcodes, num_args);
2040eb18:	fec42783          	lw	a5,-20(s0)
2040eb1c:	fe842703          	lw	a4,-24(s0)
2040eb20:	fe442683          	lw	a3,-28(s0)
2040eb24:	00070613          	mv	a2,a4
2040eb28:	00078593          	mv	a1,a5
2040eb2c:	fdc42503          	lw	a0,-36(s0)
2040eb30:	7ed000ef          	jal	ra,2040fb1c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii>
        break;
2040eb34:	0b80006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevCreateStream(values, tcodes, num_args);
2040eb38:	fec42783          	lw	a5,-20(s0)
2040eb3c:	fe842703          	lw	a4,-24(s0)
2040eb40:	fe442683          	lw	a3,-28(s0)
2040eb44:	00070613          	mv	a2,a4
2040eb48:	00078593          	mv	a1,a5
2040eb4c:	fdc42503          	lw	a0,-36(s0)
2040eb50:	0b4010ef          	jal	ra,2040fc04 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii>
        break;
2040eb54:	0980006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevFreeStream(values, tcodes, num_args);
2040eb58:	fec42783          	lw	a5,-20(s0)
2040eb5c:	fe842703          	lw	a4,-24(s0)
2040eb60:	fe442683          	lw	a3,-28(s0)
2040eb64:	00070613          	mv	a2,a4
2040eb68:	00078593          	mv	a1,a5
2040eb6c:	fdc42503          	lw	a0,-36(s0)
2040eb70:	160010ef          	jal	ra,2040fcd0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii>
        break;
2040eb74:	0780006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevStreamSync(values, tcodes, num_args);
2040eb78:	fec42783          	lw	a5,-20(s0)
2040eb7c:	fe842703          	lw	a4,-24(s0)
2040eb80:	fe442683          	lw	a3,-28(s0)
2040eb84:	00070613          	mv	a2,a4
2040eb88:	00078593          	mv	a1,a5
2040eb8c:	fdc42503          	lw	a0,-36(s0)
2040eb90:	234010ef          	jal	ra,2040fdc4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii>
        break;
2040eb94:	0580006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevSetStream(values, tcodes, num_args);
2040eb98:	fec42783          	lw	a5,-20(s0)
2040eb9c:	fe842703          	lw	a4,-24(s0)
2040eba0:	fe442683          	lw	a3,-28(s0)
2040eba4:	00070613          	mv	a2,a4
2040eba8:	00078593          	mv	a1,a5
2040ebac:	fdc42503          	lw	a0,-36(s0)
2040ebb0:	308010ef          	jal	ra,2040feb8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii>
        break;
2040ebb4:	0380006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallCopyAmongRemote(values, tcodes, num_args);
2040ebb8:	fec42783          	lw	a5,-20(s0)
2040ebbc:	fe842703          	lw	a4,-24(s0)
2040ebc0:	fe442683          	lw	a3,-28(s0)
2040ebc4:	00070613          	mv	a2,a4
2040ebc8:	00078593          	mv	a1,a5
2040ebcc:	fdc42503          	lw	a0,-36(s0)
2040ebd0:	3dc010ef          	jal	ra,2040ffac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii>
        break;
2040ebd4:	0180006f          	j	2040ebec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->ReturnException("Syscall not recognized");
2040ebd8:	00012597          	auipc	a1,0x12
2040ebdc:	69c58593          	addi	a1,a1,1692 # 20421274 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x1f0>
2040ebe0:	fdc42503          	lw	a0,-36(s0)
2040ebe4:	459000ef          	jal	ra,2040f83c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
        break;
2040ebe8:	00000013          	nop
  }
2040ebec:	00000013          	nop
2040ebf0:	02c12083          	lw	ra,44(sp)
2040ebf4:	02812403          	lw	s0,40(sp)
2040ebf8:	03010113          	addi	sp,sp,48
2040ebfc:	00008067          	ret

2040ec00 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv>:
  void HandleNormalCallFunc() {
2040ec00:	f9010113          	addi	sp,sp,-112
2040ec04:	06112623          	sw	ra,108(sp)
2040ec08:	06812423          	sw	s0,104(sp)
2040ec0c:	07212223          	sw	s2,100(sp)
2040ec10:	07312023          	sw	s3,96(sp)
2040ec14:	07010413          	addi	s0,sp,112
2040ec18:	f8a42e23          	sw	a0,-100(s0)
    this->Read(&call_handle);
2040ec1c:	fe040793          	addi	a5,s0,-32
2040ec20:	00078593          	mv	a1,a5
2040ec24:	f9c42503          	lw	a0,-100(s0)
2040ec28:	d69ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    RecvPackedSeq(&values, &tcodes, &num_args);
2040ec2c:	fd440693          	addi	a3,s0,-44
2040ec30:	fd840713          	addi	a4,s0,-40
2040ec34:	fdc40793          	addi	a5,s0,-36
2040ec38:	00070613          	mv	a2,a4
2040ec3c:	00078593          	mv	a1,a5
2040ec40:	f9c42503          	lw	a0,-100(s0)
2040ec44:	1b9000ef          	jal	ra,2040f5fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>
    int call_ecode = TVMFuncCall(reinterpret_cast<void*>(call_handle), values, tcodes, num_args,
2040ec48:	fe042783          	lw	a5,-32(s0)
2040ec4c:	fe442803          	lw	a6,-28(s0)
2040ec50:	00078813          	mv	a6,a5
2040ec54:	fdc42583          	lw	a1,-36(s0)
2040ec58:	fd842603          	lw	a2,-40(s0)
2040ec5c:	fd442683          	lw	a3,-44(s0)
2040ec60:	fac40793          	addi	a5,s0,-84
2040ec64:	00478513          	addi	a0,a5,4
2040ec68:	fb840793          	addi	a5,s0,-72
2040ec6c:	00878713          	addi	a4,a5,8
2040ec70:	00050793          	mv	a5,a0
2040ec74:	00080513          	mv	a0,a6
2040ec78:	cc5f20ef          	jal	ra,2040193c <TVMFuncCall>
2040ec7c:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040ec80:	fec42783          	lw	a5,-20(s0)
2040ec84:	10079663          	bnez	a5,2040ed90 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x190>
      int rv_tcode = ret_tcode[1];
2040ec88:	fb042783          	lw	a5,-80(s0)
2040ec8c:	fef42423          	sw	a5,-24(s0)
      ret_tcode[0] = kDLInt;
2040ec90:	fa042623          	sw	zero,-84(s0)
      ret_value[0].v_int64 = rv_tcode;
2040ec94:	fe842783          	lw	a5,-24(s0)
2040ec98:	00078913          	mv	s2,a5
2040ec9c:	41f7d793          	srai	a5,a5,0x1f
2040eca0:	00078993          	mv	s3,a5
2040eca4:	fb242c23          	sw	s2,-72(s0)
2040eca8:	fb342e23          	sw	s3,-68(s0)
      if (rv_tcode == kTVMNDArrayHandle) {
2040ecac:	fe842703          	lw	a4,-24(s0)
2040ecb0:	00d00793          	li	a5,13
2040ecb4:	02f71e63          	bne	a4,a5,2040ecf0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0xf0>
        ret_tcode[1] = kTVMDLTensorHandle;
2040ecb8:	00700793          	li	a5,7
2040ecbc:	faf42823          	sw	a5,-80(s0)
        ret_value[2].v_handle = ret_value[1].v_handle;
2040ecc0:	fc042783          	lw	a5,-64(s0)
2040ecc4:	fcf42423          	sw	a5,-56(s0)
        ret_tcode[2] = kTVMOpaqueHandle;
2040ecc8:	00300793          	li	a5,3
2040eccc:	faf42a23          	sw	a5,-76(s0)
        this->ReturnPackedSeq(ret_value, ret_tcode, 3);
2040ecd0:	fac40713          	addi	a4,s0,-84
2040ecd4:	fb840793          	addi	a5,s0,-72
2040ecd8:	00300693          	li	a3,3
2040ecdc:	00070613          	mv	a2,a4
2040ece0:	00078593          	mv	a1,a5
2040ece4:	f9c42503          	lw	a0,-100(s0)
2040ece8:	3d8010ef          	jal	ra,204100c0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
  }
2040ecec:	0ac0006f          	j	2040ed98 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
      } else if (rv_tcode == kTVMBytes) {
2040ecf0:	fe842703          	lw	a4,-24(s0)
2040ecf4:	00c00793          	li	a5,12
2040ecf8:	02f71c63          	bne	a4,a5,2040ed30 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x130>
        ret_tcode[1] = kTVMBytes;
2040ecfc:	00c00793          	li	a5,12
2040ed00:	faf42823          	sw	a5,-80(s0)
        this->ReturnPackedSeq(ret_value, ret_tcode, 2);
2040ed04:	fac40713          	addi	a4,s0,-84
2040ed08:	fb840793          	addi	a5,s0,-72
2040ed0c:	00200693          	li	a3,2
2040ed10:	00070613          	mv	a2,a4
2040ed14:	00078593          	mv	a1,a5
2040ed18:	f9c42503          	lw	a0,-100(s0)
2040ed1c:	3a4010ef          	jal	ra,204100c0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
        TVMByteArrayFree(reinterpret_cast<TVMByteArray*>(ret_value[1].v_handle));  // NOLINT(*)
2040ed20:	fc042783          	lw	a5,-64(s0)
2040ed24:	00078513          	mv	a0,a5
2040ed28:	b9df20ef          	jal	ra,204018c4 <TVMByteArrayFree>
  }
2040ed2c:	06c0006f          	j	2040ed98 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
      } else if (rv_tcode == kTVMPackedFuncHandle || rv_tcode == kTVMModuleHandle) {
2040ed30:	fe842703          	lw	a4,-24(s0)
2040ed34:	00a00793          	li	a5,10
2040ed38:	00f70863          	beq	a4,a5,2040ed48 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x148>
2040ed3c:	fe842703          	lw	a4,-24(s0)
2040ed40:	00900793          	li	a5,9
2040ed44:	02f71663          	bne	a4,a5,2040ed70 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x170>
        ret_tcode[1] = kTVMOpaqueHandle;
2040ed48:	00300793          	li	a5,3
2040ed4c:	faf42823          	sw	a5,-80(s0)
        this->ReturnPackedSeq(ret_value, ret_tcode, 2);
2040ed50:	fac40713          	addi	a4,s0,-84
2040ed54:	fb840793          	addi	a5,s0,-72
2040ed58:	00200693          	li	a3,2
2040ed5c:	00070613          	mv	a2,a4
2040ed60:	00078593          	mv	a1,a5
2040ed64:	f9c42503          	lw	a0,-100(s0)
2040ed68:	358010ef          	jal	ra,204100c0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
  }
2040ed6c:	02c0006f          	j	2040ed98 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
        this->ReturnPackedSeq(ret_value, ret_tcode, 2);
2040ed70:	fac40713          	addi	a4,s0,-84
2040ed74:	fb840793          	addi	a5,s0,-72
2040ed78:	00200693          	li	a3,2
2040ed7c:	00070613          	mv	a2,a4
2040ed80:	00078593          	mv	a1,a5
2040ed84:	f9c42503          	lw	a0,-100(s0)
2040ed88:	338010ef          	jal	ra,204100c0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
  }
2040ed8c:	00c0006f          	j	2040ed98 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
      this->ReturnLastTVMError();
2040ed90:	f9c42503          	lw	a0,-100(s0)
2040ed94:	374010ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040ed98:	00000013          	nop
2040ed9c:	06c12083          	lw	ra,108(sp)
2040eda0:	06812403          	lw	s0,104(sp)
2040eda4:	06412903          	lw	s2,100(sp)
2040eda8:	06012983          	lw	s3,96(sp)
2040edac:	07010113          	addi	sp,sp,112
2040edb0:	00008067          	ret

2040edb4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16HandleInitServerEv>:
  void HandleInitServer() {
2040edb4:	fc010113          	addi	sp,sp,-64
2040edb8:	02112e23          	sw	ra,60(sp)
2040edbc:	02812c23          	sw	s0,56(sp)
2040edc0:	04010413          	addi	s0,sp,64
2040edc4:	fca42623          	sw	a0,-52(s0)
    this->Read(&len);
2040edc8:	fe040793          	addi	a5,s0,-32
2040edcc:	00078593          	mv	a1,a5
2040edd0:	fcc42503          	lw	a0,-52(s0)
2040edd4:	bbdff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    char* proto_ver = this->ArenaAlloc<char>(len + 1);
2040edd8:	fe042783          	lw	a5,-32(s0)
2040eddc:	fe442803          	lw	a6,-28(s0)
2040ede0:	00178793          	addi	a5,a5,1
2040ede4:	00078593          	mv	a1,a5
2040ede8:	fcc42503          	lw	a0,-52(s0)
2040edec:	358010ef          	jal	ra,20410144 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>
2040edf0:	fea42623          	sw	a0,-20(s0)
    this->ReadArray(proto_ver, len);
2040edf4:	fe042783          	lw	a5,-32(s0)
2040edf8:	fe442803          	lw	a6,-28(s0)
2040edfc:	00078613          	mv	a2,a5
2040ee00:	fec42583          	lw	a1,-20(s0)
2040ee04:	fcc42503          	lw	a0,-52(s0)
2040ee08:	380010ef          	jal	ra,20410188 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>
    RecvPackedSeq(&values, &tcodes, &num_args);
2040ee0c:	fd440693          	addi	a3,s0,-44
2040ee10:	fd840713          	addi	a4,s0,-40
2040ee14:	fdc40793          	addi	a5,s0,-36
2040ee18:	00070613          	mv	a2,a4
2040ee1c:	00078593          	mv	a1,a5
2040ee20:	fcc42503          	lw	a0,-52(s0)
2040ee24:	7d8000ef          	jal	ra,2040f5fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>
    MINRPC_CHECK(num_args == 0);
2040ee28:	fd442783          	lw	a5,-44(s0)
2040ee2c:	00078a63          	beqz	a5,2040ee40 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16HandleInitServerEv+0x8c>
2040ee30:	00000613          	li	a2,0
2040ee34:	00900593          	li	a1,9
2040ee38:	fcc42503          	lw	a0,-52(s0)
2040ee3c:	53c000ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    this->ReturnVoid();
2040ee40:	fcc42503          	lw	a0,-52(s0)
2040ee44:	380010ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040ee48:	00000013          	nop
2040ee4c:	03c12083          	lw	ra,60(sp)
2040ee50:	03812403          	lw	s0,56(sp)
2040ee54:	04010113          	addi	sp,sp,64
2040ee58:	00008067          	ret

2040ee5c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv>:
  void HandleCopyFromRemote() {
2040ee5c:	f8010113          	addi	sp,sp,-128
2040ee60:	06112e23          	sw	ra,124(sp)
2040ee64:	06812c23          	sw	s0,120(sp)
2040ee68:	08010413          	addi	s0,sp,128
2040ee6c:	f8a42623          	sw	a0,-116(s0)
    DLTensor* arr = this->ArenaAlloc<DLTensor>(1);
2040ee70:	00100593          	li	a1,1
2040ee74:	f8c42503          	lw	a0,-116(s0)
2040ee78:	408010ef          	jal	ra,20410280 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>
2040ee7c:	fea42223          	sw	a0,-28(s0)
    this->Read(&data_handle);
2040ee80:	fd840793          	addi	a5,s0,-40
2040ee84:	00078593          	mv	a1,a5
2040ee88:	f8c42503          	lw	a0,-116(s0)
2040ee8c:	b05ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    arr->data = reinterpret_cast<void*>(data_handle);
2040ee90:	fd842783          	lw	a5,-40(s0)
2040ee94:	fdc42803          	lw	a6,-36(s0)
2040ee98:	00078713          	mv	a4,a5
2040ee9c:	fe442783          	lw	a5,-28(s0)
2040eea0:	00e7a023          	sw	a4,0(a5)
    this->Read(&(arr->device));
2040eea4:	fe442783          	lw	a5,-28(s0)
2040eea8:	00478793          	addi	a5,a5,4
2040eeac:	00078593          	mv	a1,a5
2040eeb0:	f8c42503          	lw	a0,-116(s0)
2040eeb4:	410010ef          	jal	ra,204102c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
    this->Read(&(arr->ndim));
2040eeb8:	fe442783          	lw	a5,-28(s0)
2040eebc:	00c78793          	addi	a5,a5,12
2040eec0:	00078593          	mv	a1,a5
2040eec4:	f8c42503          	lw	a0,-116(s0)
2040eec8:	438010ef          	jal	ra,20410300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    this->Read(&(arr->dtype));
2040eecc:	fe442783          	lw	a5,-28(s0)
2040eed0:	01078793          	addi	a5,a5,16
2040eed4:	00078593          	mv	a1,a5
2040eed8:	f8c42503          	lw	a0,-116(s0)
2040eedc:	460010ef          	jal	ra,2041033c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
    arr->shape = this->ArenaAlloc<int64_t>(arr->ndim);
2040eee0:	fe442783          	lw	a5,-28(s0)
2040eee4:	00c7a783          	lw	a5,12(a5)
2040eee8:	00078593          	mv	a1,a5
2040eeec:	f8c42503          	lw	a0,-116(s0)
2040eef0:	488010ef          	jal	ra,20410378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>
2040eef4:	00050713          	mv	a4,a0
2040eef8:	fe442783          	lw	a5,-28(s0)
2040eefc:	00e7aa23          	sw	a4,20(a5)
    this->ReadArray(arr->shape, arr->ndim);
2040ef00:	fe442783          	lw	a5,-28(s0)
2040ef04:	0147a703          	lw	a4,20(a5)
2040ef08:	fe442783          	lw	a5,-28(s0)
2040ef0c:	00c7a783          	lw	a5,12(a5)
2040ef10:	00078613          	mv	a2,a5
2040ef14:	00070593          	mv	a1,a4
2040ef18:	f8c42503          	lw	a0,-116(s0)
2040ef1c:	4a0010ef          	jal	ra,204103bc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>
    arr->strides = nullptr;
2040ef20:	fe442783          	lw	a5,-28(s0)
2040ef24:	0007ac23          	sw	zero,24(a5)
    this->Read(&(arr->byte_offset));
2040ef28:	fe442783          	lw	a5,-28(s0)
2040ef2c:	02078793          	addi	a5,a5,32
2040ef30:	00078593          	mv	a1,a5
2040ef34:	f8c42503          	lw	a0,-116(s0)
2040ef38:	a59ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    this->Read(&num_bytes);
2040ef3c:	fd040793          	addi	a5,s0,-48
2040ef40:	00078593          	mv	a1,a5
2040ef44:	f8c42503          	lw	a0,-116(s0)
2040ef48:	a49ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    int call_ecode = 0;
2040ef4c:	fe042423          	sw	zero,-24(s0)
    if (arr->device.device_type == kDLCPU) {
2040ef50:	fe442783          	lw	a5,-28(s0)
2040ef54:	0047a703          	lw	a4,4(a5)
2040ef58:	00100793          	li	a5,1
2040ef5c:	02f71463          	bne	a4,a5,2040ef84 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x128>
      data_ptr = reinterpret_cast<uint8_t*>(data_handle) + arr->byte_offset;
2040ef60:	fe442783          	lw	a5,-28(s0)
2040ef64:	0247a803          	lw	a6,36(a5)
2040ef68:	0207a783          	lw	a5,32(a5)
2040ef6c:	00078713          	mv	a4,a5
2040ef70:	fd842783          	lw	a5,-40(s0)
2040ef74:	fdc42803          	lw	a6,-36(s0)
2040ef78:	00f707b3          	add	a5,a4,a5
2040ef7c:	fef42623          	sw	a5,-20(s0)
2040ef80:	0b00006f          	j	2040f030 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x1d4>
      data_ptr = this->ArenaAlloc<uint8_t>(num_bytes);
2040ef84:	fd042783          	lw	a5,-48(s0)
2040ef88:	fd442803          	lw	a6,-44(s0)
2040ef8c:	00078593          	mv	a1,a5
2040ef90:	f8c42503          	lw	a0,-116(s0)
2040ef94:	46c010ef          	jal	ra,20410400 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIhEEPT_i>
2040ef98:	fea42623          	sw	a0,-20(s0)
      temp.data = reinterpret_cast<void*>(data_ptr);
2040ef9c:	fec42783          	lw	a5,-20(s0)
2040efa0:	f8f42c23          	sw	a5,-104(s0)
      temp.device = DLDevice{kDLCPU, 0};
2040efa4:	00100793          	li	a5,1
2040efa8:	f8f42e23          	sw	a5,-100(s0)
2040efac:	fa042023          	sw	zero,-96(s0)
      temp.ndim = arr->ndim;
2040efb0:	fe442783          	lw	a5,-28(s0)
2040efb4:	00c7a783          	lw	a5,12(a5)
2040efb8:	faf42223          	sw	a5,-92(s0)
      temp.dtype = arr->dtype;
2040efbc:	fe442783          	lw	a5,-28(s0)
2040efc0:	0107a783          	lw	a5,16(a5)
2040efc4:	faf42423          	sw	a5,-88(s0)
      temp.shape = arr->shape;
2040efc8:	fe442783          	lw	a5,-28(s0)
2040efcc:	0147a783          	lw	a5,20(a5)
2040efd0:	faf42623          	sw	a5,-84(s0)
      temp.strides = nullptr;
2040efd4:	fa042823          	sw	zero,-80(s0)
      temp.byte_offset = 0;
2040efd8:	00000793          	li	a5,0
2040efdc:	00000813          	li	a6,0
2040efe0:	faf42c23          	sw	a5,-72(s0)
2040efe4:	fb042e23          	sw	a6,-68(s0)
      call_ecode = TVMDeviceCopyDataFromTo(arr, &temp, nullptr);
2040efe8:	f9840793          	addi	a5,s0,-104
2040efec:	00000613          	li	a2,0
2040eff0:	00078593          	mv	a1,a5
2040eff4:	fe442503          	lw	a0,-28(s0)
2040eff8:	a48f20ef          	jal	ra,20401240 <TVMDeviceCopyDataFromTo>
2040effc:	fea42423          	sw	a0,-24(s0)
      if (call_ecode == 0) {
2040f000:	fe842783          	lw	a5,-24(s0)
2040f004:	02079663          	bnez	a5,2040f030 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x1d4>
        call_ecode = TVMSynchronize(arr->device.device_type, arr->device.device_id, nullptr);
2040f008:	fe442783          	lw	a5,-28(s0)
2040f00c:	0047a783          	lw	a5,4(a5)
2040f010:	00078713          	mv	a4,a5
2040f014:	fe442783          	lw	a5,-28(s0)
2040f018:	0087a783          	lw	a5,8(a5)
2040f01c:	00000613          	li	a2,0
2040f020:	00078593          	mv	a1,a5
2040f024:	00070513          	mv	a0,a4
2040f028:	bfcf20ef          	jal	ra,20401424 <TVMSynchronize>
2040f02c:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2040f030:	fe842783          	lw	a5,-24(s0)
2040f034:	0a079663          	bnez	a5,2040f0e0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x284>
      RPCCode code = RPCCode::kCopyAck;
2040f038:	00800793          	li	a5,8
2040f03c:	fcf42623          	sw	a5,-52(s0)
      uint64_t packet_nbytes = sizeof(code) + num_bytes;
2040f040:	fd042783          	lw	a5,-48(s0)
2040f044:	fd442803          	lw	a6,-44(s0)
2040f048:	00400593          	li	a1,4
2040f04c:	00000613          	li	a2,0
2040f050:	00b786b3          	add	a3,a5,a1
2040f054:	00068513          	mv	a0,a3
2040f058:	00f53533          	sltu	a0,a0,a5
2040f05c:	00c80733          	add	a4,a6,a2
2040f060:	00e507b3          	add	a5,a0,a4
2040f064:	00078713          	mv	a4,a5
2040f068:	00068793          	mv	a5,a3
2040f06c:	00070813          	mv	a6,a4
2040f070:	fcf42023          	sw	a5,-64(s0)
2040f074:	fd042223          	sw	a6,-60(s0)
      io_->MessageStart(packet_nbytes);
2040f078:	f8c42783          	lw	a5,-116(s0)
2040f07c:	0007a703          	lw	a4,0(a5)
2040f080:	fc042783          	lw	a5,-64(s0)
2040f084:	fc442803          	lw	a6,-60(s0)
2040f088:	00078593          	mv	a1,a5
2040f08c:	00070513          	mv	a0,a4
2040f090:	e81fe0ef          	jal	ra,2040df10 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
      this->Write(packet_nbytes);
2040f094:	fc040793          	addi	a5,s0,-64
2040f098:	00078593          	mv	a1,a5
2040f09c:	f8c42503          	lw	a0,-116(s0)
2040f0a0:	3a4010ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
      this->Write(code);
2040f0a4:	fcc40793          	addi	a5,s0,-52
2040f0a8:	00078593          	mv	a1,a5
2040f0ac:	f8c42503          	lw	a0,-116(s0)
2040f0b0:	3cc010ef          	jal	ra,2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
      this->WriteArray(data_ptr, num_bytes);
2040f0b4:	fd042783          	lw	a5,-48(s0)
2040f0b8:	fd442803          	lw	a6,-44(s0)
2040f0bc:	00078613          	mv	a2,a5
2040f0c0:	fec42583          	lw	a1,-20(s0)
2040f0c4:	f8c42503          	lw	a0,-116(s0)
2040f0c8:	3ec010ef          	jal	ra,204104b4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIhEEvPT_j>
      io_->MessageDone();
2040f0cc:	f8c42783          	lw	a5,-116(s0)
2040f0d0:	0007a783          	lw	a5,0(a5)
2040f0d4:	00078513          	mv	a0,a5
2040f0d8:	ee9fe0ef          	jal	ra,2040dfc0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
  }
2040f0dc:	00c0006f          	j	2040f0e8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x28c>
      this->ReturnLastTVMError();
2040f0e0:	f8c42503          	lw	a0,-116(s0)
2040f0e4:	024010ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f0e8:	00000013          	nop
2040f0ec:	07c12083          	lw	ra,124(sp)
2040f0f0:	07812403          	lw	s0,120(sp)
2040f0f4:	08010113          	addi	sp,sp,128
2040f0f8:	00008067          	ret

2040f0fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv>:
  void HandleCopyToRemote() {
2040f0fc:	f9010113          	addi	sp,sp,-112
2040f100:	06112623          	sw	ra,108(sp)
2040f104:	06812423          	sw	s0,104(sp)
2040f108:	07010413          	addi	s0,sp,112
2040f10c:	f8a42e23          	sw	a0,-100(s0)
    DLTensor* arr = this->ArenaAlloc<DLTensor>(1);
2040f110:	00100593          	li	a1,1
2040f114:	f9c42503          	lw	a0,-100(s0)
2040f118:	168010ef          	jal	ra,20410280 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>
2040f11c:	fea42423          	sw	a0,-24(s0)
    this->Read(&data_handle);
2040f120:	fd840793          	addi	a5,s0,-40
2040f124:	00078593          	mv	a1,a5
2040f128:	f9c42503          	lw	a0,-100(s0)
2040f12c:	865ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    arr->data = reinterpret_cast<void*>(data_handle);
2040f130:	fd842783          	lw	a5,-40(s0)
2040f134:	fdc42803          	lw	a6,-36(s0)
2040f138:	00078713          	mv	a4,a5
2040f13c:	fe842783          	lw	a5,-24(s0)
2040f140:	00e7a023          	sw	a4,0(a5)
    this->Read(&(arr->device));
2040f144:	fe842783          	lw	a5,-24(s0)
2040f148:	00478793          	addi	a5,a5,4
2040f14c:	00078593          	mv	a1,a5
2040f150:	f9c42503          	lw	a0,-100(s0)
2040f154:	170010ef          	jal	ra,204102c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
    this->Read(&(arr->ndim));
2040f158:	fe842783          	lw	a5,-24(s0)
2040f15c:	00c78793          	addi	a5,a5,12
2040f160:	00078593          	mv	a1,a5
2040f164:	f9c42503          	lw	a0,-100(s0)
2040f168:	198010ef          	jal	ra,20410300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    this->Read(&(arr->dtype));
2040f16c:	fe842783          	lw	a5,-24(s0)
2040f170:	01078793          	addi	a5,a5,16
2040f174:	00078593          	mv	a1,a5
2040f178:	f9c42503          	lw	a0,-100(s0)
2040f17c:	1c0010ef          	jal	ra,2041033c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
    arr->shape = this->ArenaAlloc<int64_t>(arr->ndim);
2040f180:	fe842783          	lw	a5,-24(s0)
2040f184:	00c7a783          	lw	a5,12(a5)
2040f188:	00078593          	mv	a1,a5
2040f18c:	f9c42503          	lw	a0,-100(s0)
2040f190:	1e8010ef          	jal	ra,20410378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>
2040f194:	00050713          	mv	a4,a0
2040f198:	fe842783          	lw	a5,-24(s0)
2040f19c:	00e7aa23          	sw	a4,20(a5)
    this->ReadArray(arr->shape, arr->ndim);
2040f1a0:	fe842783          	lw	a5,-24(s0)
2040f1a4:	0147a703          	lw	a4,20(a5)
2040f1a8:	fe842783          	lw	a5,-24(s0)
2040f1ac:	00c7a783          	lw	a5,12(a5)
2040f1b0:	00078613          	mv	a2,a5
2040f1b4:	00070593          	mv	a1,a4
2040f1b8:	f9c42503          	lw	a0,-100(s0)
2040f1bc:	200010ef          	jal	ra,204103bc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>
    arr->strides = nullptr;
2040f1c0:	fe842783          	lw	a5,-24(s0)
2040f1c4:	0007ac23          	sw	zero,24(a5)
    this->Read(&(arr->byte_offset));
2040f1c8:	fe842783          	lw	a5,-24(s0)
2040f1cc:	02078793          	addi	a5,a5,32
2040f1d0:	00078593          	mv	a1,a5
2040f1d4:	f9c42503          	lw	a0,-100(s0)
2040f1d8:	fb8ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    this->Read(&num_bytes);
2040f1dc:	fd040793          	addi	a5,s0,-48
2040f1e0:	00078593          	mv	a1,a5
2040f1e4:	f9c42503          	lw	a0,-100(s0)
2040f1e8:	fa8ff0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    int call_ecode = 0;
2040f1ec:	fe042623          	sw	zero,-20(s0)
    if (arr->device.device_type == kDLCPU) {
2040f1f0:	fe842783          	lw	a5,-24(s0)
2040f1f4:	0047a703          	lw	a4,4(a5)
2040f1f8:	00100793          	li	a5,1
2040f1fc:	04f71063          	bne	a4,a5,2040f23c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x140>
      uint8_t* dptr = reinterpret_cast<uint8_t*>(data_handle) + arr->byte_offset;
2040f200:	fe842783          	lw	a5,-24(s0)
2040f204:	0247a803          	lw	a6,36(a5)
2040f208:	0207a783          	lw	a5,32(a5)
2040f20c:	00078713          	mv	a4,a5
2040f210:	fd842783          	lw	a5,-40(s0)
2040f214:	fdc42803          	lw	a6,-36(s0)
2040f218:	00f707b3          	add	a5,a4,a5
2040f21c:	fef42023          	sw	a5,-32(s0)
      this->ReadArray(dptr, num_bytes);
2040f220:	fd042783          	lw	a5,-48(s0)
2040f224:	fd442803          	lw	a6,-44(s0)
2040f228:	00078613          	mv	a2,a5
2040f22c:	fe042583          	lw	a1,-32(s0)
2040f230:	f9c42503          	lw	a0,-100(s0)
2040f234:	2bc010ef          	jal	ra,204104f0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIhEEvPT_j>
2040f238:	0c80006f          	j	2040f300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x204>
      uint8_t* temp_data = this->ArenaAlloc<uint8_t>(num_bytes);
2040f23c:	fd042783          	lw	a5,-48(s0)
2040f240:	fd442803          	lw	a6,-44(s0)
2040f244:	00078593          	mv	a1,a5
2040f248:	f9c42503          	lw	a0,-100(s0)
2040f24c:	1b4010ef          	jal	ra,20410400 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIhEEPT_i>
2040f250:	fea42223          	sw	a0,-28(s0)
      this->ReadArray(temp_data, num_bytes);
2040f254:	fd042783          	lw	a5,-48(s0)
2040f258:	fd442803          	lw	a6,-44(s0)
2040f25c:	00078613          	mv	a2,a5
2040f260:	fe442583          	lw	a1,-28(s0)
2040f264:	f9c42503          	lw	a0,-100(s0)
2040f268:	288010ef          	jal	ra,204104f0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIhEEvPT_j>
      temp.data = temp_data;
2040f26c:	fe442783          	lw	a5,-28(s0)
2040f270:	faf42423          	sw	a5,-88(s0)
      temp.device = DLDevice{kDLCPU, 0};
2040f274:	00100793          	li	a5,1
2040f278:	faf42623          	sw	a5,-84(s0)
2040f27c:	fa042823          	sw	zero,-80(s0)
      temp.ndim = arr->ndim;
2040f280:	fe842783          	lw	a5,-24(s0)
2040f284:	00c7a783          	lw	a5,12(a5)
2040f288:	faf42a23          	sw	a5,-76(s0)
      temp.dtype = arr->dtype;
2040f28c:	fe842783          	lw	a5,-24(s0)
2040f290:	0107a783          	lw	a5,16(a5)
2040f294:	faf42c23          	sw	a5,-72(s0)
      temp.shape = arr->shape;
2040f298:	fe842783          	lw	a5,-24(s0)
2040f29c:	0147a783          	lw	a5,20(a5)
2040f2a0:	faf42e23          	sw	a5,-68(s0)
      temp.strides = nullptr;
2040f2a4:	fc042023          	sw	zero,-64(s0)
      temp.byte_offset = 0;
2040f2a8:	00000793          	li	a5,0
2040f2ac:	00000813          	li	a6,0
2040f2b0:	fcf42423          	sw	a5,-56(s0)
2040f2b4:	fd042623          	sw	a6,-52(s0)
      call_ecode = TVMDeviceCopyDataFromTo(&temp, arr, nullptr);
2040f2b8:	fa840793          	addi	a5,s0,-88
2040f2bc:	00000613          	li	a2,0
2040f2c0:	fe842583          	lw	a1,-24(s0)
2040f2c4:	00078513          	mv	a0,a5
2040f2c8:	f79f10ef          	jal	ra,20401240 <TVMDeviceCopyDataFromTo>
2040f2cc:	fea42623          	sw	a0,-20(s0)
      if (call_ecode == 0) {
2040f2d0:	fec42783          	lw	a5,-20(s0)
2040f2d4:	02079663          	bnez	a5,2040f300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x204>
        call_ecode = TVMSynchronize(arr->device.device_type, arr->device.device_id, nullptr);
2040f2d8:	fe842783          	lw	a5,-24(s0)
2040f2dc:	0047a783          	lw	a5,4(a5)
2040f2e0:	00078713          	mv	a4,a5
2040f2e4:	fe842783          	lw	a5,-24(s0)
2040f2e8:	0087a783          	lw	a5,8(a5)
2040f2ec:	00000613          	li	a2,0
2040f2f0:	00078593          	mv	a1,a5
2040f2f4:	00070513          	mv	a0,a4
2040f2f8:	92cf20ef          	jal	ra,20401424 <TVMSynchronize>
2040f2fc:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040f300:	fec42783          	lw	a5,-20(s0)
2040f304:	00079863          	bnez	a5,2040f314 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x218>
      this->ReturnVoid();
2040f308:	f9c42503          	lw	a0,-100(s0)
2040f30c:	6b9000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040f310:	00c0006f          	j	2040f31c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x220>
      this->ReturnLastTVMError();
2040f314:	f9c42503          	lw	a0,-100(s0)
2040f318:	5f1000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f31c:	00000013          	nop
2040f320:	06c12083          	lw	ra,108(sp)
2040f324:	06812403          	lw	s0,104(sp)
2040f328:	07010113          	addi	sp,sp,112
2040f32c:	00008067          	ret

2040f330 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE8ShutdownEv>:
  void Shutdown() {
2040f330:	fe010113          	addi	sp,sp,-32
2040f334:	00112e23          	sw	ra,28(sp)
2040f338:	00812c23          	sw	s0,24(sp)
2040f33c:	02010413          	addi	s0,sp,32
2040f340:	fea42623          	sw	a0,-20(s0)
    arena_.FreeAll();
2040f344:	fec42783          	lw	a5,-20(s0)
2040f348:	00478793          	addi	a5,a5,4
2040f34c:	00078513          	mv	a0,a5
2040f350:	d7cff0ef          	jal	ra,2040e8cc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE7FreeAllEv>
    io_->Close();
2040f354:	fec42783          	lw	a5,-20(s0)
2040f358:	0007a783          	lw	a5,0(a5)
2040f35c:	00078513          	mv	a0,a5
2040f360:	d25fe0ef          	jal	ra,2040e084 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler5CloseEv>
  }
2040f364:	00000013          	nop
2040f368:	01c12083          	lw	ra,28(sp)
2040f36c:	01812403          	lw	s0,24(sp)
2040f370:	02010113          	addi	sp,sp,32
2040f374:	00008067          	ret

2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>:
  void ThrowError(RPCServerStatus code, RPCCode info = RPCCode::kNone) {
2040f378:	fe010113          	addi	sp,sp,-32
2040f37c:	00112e23          	sw	ra,28(sp)
2040f380:	00812c23          	sw	s0,24(sp)
2040f384:	02010413          	addi	s0,sp,32
2040f388:	fea42623          	sw	a0,-20(s0)
2040f38c:	feb42423          	sw	a1,-24(s0)
2040f390:	fec42223          	sw	a2,-28(s0)
    io_->Exit(static_cast<int>(code));
2040f394:	fec42783          	lw	a5,-20(s0)
2040f398:	0007a783          	lw	a5,0(a5)
2040f39c:	fe842583          	lw	a1,-24(s0)
2040f3a0:	00078513          	mv	a0,a5
2040f3a4:	d01fe0ef          	jal	ra,2040e0a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
  }
2040f3a8:	00000013          	nop
2040f3ac:	01c12083          	lw	ra,28(sp)
2040f3b0:	01812403          	lw	s0,24(sp)
2040f3b4:	02010113          	addi	sp,sp,32
2040f3b8:	00008067          	ret

2040f3bc <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj>:

  ArenaPageHeader* allocate(size_t min_size) {
2040f3bc:	fd010113          	addi	sp,sp,-48
2040f3c0:	02112623          	sw	ra,44(sp)
2040f3c4:	02812423          	sw	s0,40(sp)
2040f3c8:	03010413          	addi	s0,sp,48
2040f3cc:	fca42e23          	sw	a0,-36(s0)
2040f3d0:	fcb42c23          	sw	a1,-40(s0)
    size_t npages = ((min_size + kPageSize - 1) / kPageSize);
2040f3d4:	fd842783          	lw	a5,-40(s0)
2040f3d8:	7ff78793          	addi	a5,a5,2047
2040f3dc:	00b7d793          	srli	a5,a5,0xb
2040f3e0:	fef42623          	sw	a5,-20(s0)
    void* data;

    if (TVMDeviceAllocDataSpace(DLDevice{kDLCPU, 0}, npages * kPageSize, kPageAlign,
2040f3e4:	00100813          	li	a6,1
2040f3e8:	00000893          	li	a7,0
2040f3ec:	fec42783          	lw	a5,-20(s0)
2040f3f0:	00b79613          	slli	a2,a5,0xb
2040f3f4:	f0077793          	andi	a5,a4,-256
2040f3f8:	00078713          	mv	a4,a5
2040f3fc:	ffff07b7          	lui	a5,0xffff0
2040f400:	0ff78793          	addi	a5,a5,255 # ffff00ff <pulp__FC+0xffff0100>
2040f404:	00f777b3          	and	a5,a4,a5
2040f408:	1007e793          	ori	a5,a5,256
2040f40c:	00078713          	mv	a4,a5
2040f410:	000107b7          	lui	a5,0x10
2040f414:	fff78793          	addi	a5,a5,-1 # ffff <__stack_size+0xf7ff>
2040f418:	00f77733          	and	a4,a4,a5
2040f41c:	000107b7          	lui	a5,0x10
2040f420:	00f767b3          	or	a5,a4,a5
2040f424:	00078713          	mv	a4,a5
2040f428:	fe440793          	addi	a5,s0,-28
2040f42c:	00800693          	li	a3,8
2040f430:	00080513          	mv	a0,a6
2040f434:	00088593          	mv	a1,a7
2040f438:	af9f10ef          	jal	ra,20400f30 <TVMDeviceAllocDataSpace>
2040f43c:	00050793          	mv	a5,a0
                                DLDataType{kDLInt, 1, 1}, &data) != 0) {
2040f440:	00f037b3          	snez	a5,a5
2040f444:	0ff7f793          	andi	a5,a5,255
    if (TVMDeviceAllocDataSpace(DLDevice{kDLCPU, 0}, npages * kPageSize, kPageAlign,
2040f448:	00078c63          	beqz	a5,2040f460 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj+0xa4>
      io_->Exit(static_cast<int>(RPCServerStatus::kAllocError));
2040f44c:	fdc42783          	lw	a5,-36(s0)
2040f450:	0007a783          	lw	a5,0(a5) # 10000 <__stack_size+0xf800>
2040f454:	00c00593          	li	a1,12
2040f458:	00078513          	mv	a0,a5
2040f45c:	c49fe0ef          	jal	ra,2040e0a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
    }

    ArenaPageHeader* header = static_cast<ArenaPageHeader*>(data);
2040f460:	fe442783          	lw	a5,-28(s0)
2040f464:	fef42423          	sw	a5,-24(s0)
    header->size = npages * kPageSize;
2040f468:	fec42783          	lw	a5,-20(s0)
2040f46c:	00b79713          	slli	a4,a5,0xb
2040f470:	fe842783          	lw	a5,-24(s0)
2040f474:	00e7a223          	sw	a4,4(a5)
    header->offset = sizeof(ArenaPageHeader);
2040f478:	fe842783          	lw	a5,-24(s0)
2040f47c:	00c00713          	li	a4,12
2040f480:	00e7a423          	sw	a4,8(a5)
    return header;
2040f484:	fe842783          	lw	a5,-24(s0)
  }
2040f488:	00078513          	mv	a0,a5
2040f48c:	02c12083          	lw	ra,44(sp)
2040f490:	02812403          	lw	s0,40(sp)
2040f494:	03010113          	addi	sp,sp,48
2040f498:	00008067          	ret

2040f49c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE>:
  }
  /*!
   * \brief Free all the pages in the list.
   * \param ptr The head ptr.
   */
  void FreePageList(ArenaPageHeader** ptr) {
2040f49c:	fd010113          	addi	sp,sp,-48
2040f4a0:	02112623          	sw	ra,44(sp)
2040f4a4:	02812423          	sw	s0,40(sp)
2040f4a8:	03010413          	addi	s0,sp,48
2040f4ac:	fca42e23          	sw	a0,-36(s0)
2040f4b0:	fcb42c23          	sw	a1,-40(s0)
    // delete all the allocated pages.
    while (ptr[0] != nullptr) {
2040f4b4:	fd842783          	lw	a5,-40(s0)
2040f4b8:	0007a783          	lw	a5,0(a5)
2040f4bc:	02078c63          	beqz	a5,2040f4f4 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE+0x58>
      ArenaPageHeader* temp = ptr[0];
2040f4c0:	fd842783          	lw	a5,-40(s0)
2040f4c4:	0007a783          	lw	a5,0(a5)
2040f4c8:	fef42623          	sw	a5,-20(s0)
      ptr[0] = ptr[0]->next;
2040f4cc:	fd842783          	lw	a5,-40(s0)
2040f4d0:	0007a783          	lw	a5,0(a5)
2040f4d4:	0007a703          	lw	a4,0(a5)
2040f4d8:	fd842783          	lw	a5,-40(s0)
2040f4dc:	00e7a023          	sw	a4,0(a5)
      alloc_.deallocate(temp);
2040f4e0:	fdc42783          	lw	a5,-36(s0)
2040f4e4:	fec42583          	lw	a1,-20(s0)
2040f4e8:	00078513          	mv	a0,a5
2040f4ec:	040010ef          	jal	ra,2041052c <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE10deallocateEPNS_7support15ArenaPageHeaderE>
    while (ptr[0] != nullptr) {
2040f4f0:	fc5ff06f          	j	2040f4b4 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE+0x18>
    }
  }
2040f4f4:	00000013          	nop
2040f4f8:	02c12083          	lw	ra,44(sp)
2040f4fc:	02812403          	lw	s0,40(sp)
2040f500:	03010113          	addi	sp,sp,48
2040f504:	00008067          	ret

2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>:
  void ReadRawBytes(void* data, size_t size) {
2040f508:	fd010113          	addi	sp,sp,-48
2040f50c:	02112623          	sw	ra,44(sp)
2040f510:	02812423          	sw	s0,40(sp)
2040f514:	03010413          	addi	s0,sp,48
2040f518:	fca42e23          	sw	a0,-36(s0)
2040f51c:	fcb42c23          	sw	a1,-40(s0)
2040f520:	fcc42a23          	sw	a2,-44(s0)
    uint8_t* buf = reinterpret_cast<uint8_t*>(data);
2040f524:	fd842783          	lw	a5,-40(s0)
2040f528:	fef42623          	sw	a5,-20(s0)
    size_t ndone = 0;
2040f52c:	fe042423          	sw	zero,-24(s0)
    while (ndone < size) {
2040f530:	fe842703          	lw	a4,-24(s0)
2040f534:	fd442783          	lw	a5,-44(s0)
2040f538:	0af77863          	bleu	a5,a4,2040f5e8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xe0>
      ssize_t ret = io_->PosixRead(buf, size - ndone);
2040f53c:	fdc42783          	lw	a5,-36(s0)
2040f540:	0007a683          	lw	a3,0(a5)
2040f544:	fd442703          	lw	a4,-44(s0)
2040f548:	fe842783          	lw	a5,-24(s0)
2040f54c:	40f707b3          	sub	a5,a4,a5
2040f550:	00078613          	mv	a2,a5
2040f554:	fec42583          	lw	a1,-20(s0)
2040f558:	00068513          	mv	a0,a3
2040f55c:	addfe0ef          	jal	ra,2040e038 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler9PosixReadEPhj>
2040f560:	fea42223          	sw	a0,-28(s0)
      if (ret == 0) {
2040f564:	fe442783          	lw	a5,-28(s0)
2040f568:	04079063          	bnez	a5,2040f5a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xa0>
        if (allow_clean_shutdown_) {
2040f56c:	fdc42783          	lw	a5,-36(s0)
2040f570:	0147c783          	lbu	a5,20(a5)
2040f574:	02078263          	beqz	a5,2040f598 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0x90>
          this->Shutdown();
2040f578:	fdc42503          	lw	a0,-36(s0)
2040f57c:	db5ff0ef          	jal	ra,2040f330 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE8ShutdownEv>
          io_->Exit(0);
2040f580:	fdc42783          	lw	a5,-36(s0)
2040f584:	0007a783          	lw	a5,0(a5)
2040f588:	00000593          	li	a1,0
2040f58c:	00078513          	mv	a0,a5
2040f590:	b15fe0ef          	jal	ra,2040e0a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
2040f594:	0140006f          	j	2040f5a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xa0>
          this->ThrowError(RPCServerStatus::kReadError);
2040f598:	00000613          	li	a2,0
2040f59c:	00a00593          	li	a1,10
2040f5a0:	fdc42503          	lw	a0,-36(s0)
2040f5a4:	dd5ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      if (ret == -1) {
2040f5a8:	fe442703          	lw	a4,-28(s0)
2040f5ac:	fff00793          	li	a5,-1
2040f5b0:	00f71a63          	bne	a4,a5,2040f5c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xbc>
        this->ThrowError(RPCServerStatus::kReadError);
2040f5b4:	00000613          	li	a2,0
2040f5b8:	00a00593          	li	a1,10
2040f5bc:	fdc42503          	lw	a0,-36(s0)
2040f5c0:	db9ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      ndone += ret;
2040f5c4:	fe442783          	lw	a5,-28(s0)
2040f5c8:	fe842703          	lw	a4,-24(s0)
2040f5cc:	00f707b3          	add	a5,a4,a5
2040f5d0:	fef42423          	sw	a5,-24(s0)
      buf += ret;
2040f5d4:	fe442783          	lw	a5,-28(s0)
2040f5d8:	fec42703          	lw	a4,-20(s0)
2040f5dc:	00f707b3          	add	a5,a4,a5
2040f5e0:	fef42623          	sw	a5,-20(s0)
    while (ndone < size) {
2040f5e4:	f4dff06f          	j	2040f530 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0x28>
  }
2040f5e8:	00000013          	nop
2040f5ec:	02c12083          	lw	ra,44(sp)
2040f5f0:	02812403          	lw	s0,40(sp)
2040f5f4:	03010113          	addi	sp,sp,48
2040f5f8:	00008067          	ret

2040f5fc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>:
  void RecvPackedSeq(TVMValue** out_values, int** out_tcodes, int* out_num_args) {
2040f5fc:	fe010113          	addi	sp,sp,-32
2040f600:	00112e23          	sw	ra,28(sp)
2040f604:	00812c23          	sw	s0,24(sp)
2040f608:	02010413          	addi	s0,sp,32
2040f60c:	fea42623          	sw	a0,-20(s0)
2040f610:	feb42423          	sw	a1,-24(s0)
2040f614:	fec42223          	sw	a2,-28(s0)
2040f618:	fed42023          	sw	a3,-32(s0)
    RPCReference::RecvPackedSeq(out_values, out_tcodes, out_num_args, this);
2040f61c:	fec42683          	lw	a3,-20(s0)
2040f620:	fe042603          	lw	a2,-32(s0)
2040f624:	fe442583          	lw	a1,-28(s0)
2040f628:	fe842503          	lw	a0,-24(s0)
2040f62c:	769000ef          	jal	ra,20410594 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_>
  }
2040f630:	00000013          	nop
2040f634:	01c12083          	lw	ra,28(sp)
2040f638:	01812403          	lw	s0,24(sp)
2040f63c:	02010113          	addi	sp,sp,32
2040f640:	00008067          	ret

2040f644 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii>:
  void SyscallFreeHandle(TVMValue* values, int* tcodes, int num_args) {
2040f644:	fd010113          	addi	sp,sp,-48
2040f648:	02112623          	sw	ra,44(sp)
2040f64c:	02812423          	sw	s0,40(sp)
2040f650:	03010413          	addi	s0,sp,48
2040f654:	fca42e23          	sw	a0,-36(s0)
2040f658:	fcb42c23          	sw	a1,-40(s0)
2040f65c:	fcc42a23          	sw	a2,-44(s0)
2040f660:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040f664:	fd042703          	lw	a4,-48(s0)
2040f668:	00200793          	li	a5,2
2040f66c:	00f70a63          	beq	a4,a5,2040f680 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x3c>
2040f670:	00000613          	li	a2,0
2040f674:	00900593          	li	a1,9
2040f678:	fdc42503          	lw	a0,-36(s0)
2040f67c:	cfdff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMOpaqueHandle);
2040f680:	fd442783          	lw	a5,-44(s0)
2040f684:	0007a703          	lw	a4,0(a5)
2040f688:	00300793          	li	a5,3
2040f68c:	00f70a63          	beq	a4,a5,2040f6a0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x5c>
2040f690:	00000613          	li	a2,0
2040f694:	00900593          	li	a1,9
2040f698:	fdc42503          	lw	a0,-36(s0)
2040f69c:	cddff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kDLInt);
2040f6a0:	fd442783          	lw	a5,-44(s0)
2040f6a4:	00478793          	addi	a5,a5,4
2040f6a8:	0007a783          	lw	a5,0(a5)
2040f6ac:	00078a63          	beqz	a5,2040f6c0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x7c>
2040f6b0:	00000613          	li	a2,0
2040f6b4:	00900593          	li	a1,9
2040f6b8:	fdc42503          	lw	a0,-36(s0)
2040f6bc:	cbdff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    void* handle = values[0].v_handle;
2040f6c0:	fd842783          	lw	a5,-40(s0)
2040f6c4:	0007a783          	lw	a5,0(a5)
2040f6c8:	fef42423          	sw	a5,-24(s0)
    int64_t type_code = values[1].v_int64;
2040f6cc:	fd842783          	lw	a5,-40(s0)
2040f6d0:	00878793          	addi	a5,a5,8
2040f6d4:	0047a803          	lw	a6,4(a5)
2040f6d8:	0007a783          	lw	a5,0(a5)
2040f6dc:	fef42023          	sw	a5,-32(s0)
2040f6e0:	ff042223          	sw	a6,-28(s0)
    if (type_code == kTVMNDArrayHandle) {
2040f6e4:	fe042703          	lw	a4,-32(s0)
2040f6e8:	00d00793          	li	a5,13
2040f6ec:	00f71e63          	bne	a4,a5,2040f708 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xc4>
2040f6f0:	fe442783          	lw	a5,-28(s0)
2040f6f4:	00079a63          	bnez	a5,2040f708 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xc4>
      call_ecode = TVMArrayFree(static_cast<TVMArrayHandle>(handle));
2040f6f8:	fe842503          	lw	a0,-24(s0)
2040f6fc:	fdcf10ef          	jal	ra,20400ed8 <TVMArrayFree>
2040f700:	fea42623          	sw	a0,-20(s0)
2040f704:	0580006f          	j	2040f75c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x118>
    } else if (type_code == kTVMPackedFuncHandle) {
2040f708:	fe042703          	lw	a4,-32(s0)
2040f70c:	00a00793          	li	a5,10
2040f710:	00f71e63          	bne	a4,a5,2040f72c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xe8>
2040f714:	fe442783          	lw	a5,-28(s0)
2040f718:	00079a63          	bnez	a5,2040f72c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xe8>
      call_ecode = TVMFuncFree(handle);
2040f71c:	fe842503          	lw	a0,-24(s0)
2040f720:	ed4f20ef          	jal	ra,20401df4 <TVMFuncFree>
2040f724:	fea42623          	sw	a0,-20(s0)
2040f728:	0340006f          	j	2040f75c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x118>
      MINRPC_CHECK(type_code == kTVMModuleHandle);
2040f72c:	fe042703          	lw	a4,-32(s0)
2040f730:	00900793          	li	a5,9
2040f734:	00f71663          	bne	a4,a5,2040f740 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xfc>
2040f738:	fe442783          	lw	a5,-28(s0)
2040f73c:	00078a63          	beqz	a5,2040f750 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x10c>
2040f740:	00000613          	li	a2,0
2040f744:	00900593          	li	a1,9
2040f748:	fdc42503          	lw	a0,-36(s0)
2040f74c:	c2dff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      call_ecode = TVMModFree(handle);
2040f750:	fe842503          	lw	a0,-24(s0)
2040f754:	ed5f10ef          	jal	ra,20401628 <TVMModFree>
2040f758:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040f75c:	fec42783          	lw	a5,-20(s0)
2040f760:	00079863          	bnez	a5,2040f770 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x12c>
      this->ReturnVoid();
2040f764:	fdc42503          	lw	a0,-36(s0)
2040f768:	25d000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040f76c:	00c0006f          	j	2040f778 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x134>
      this->ReturnLastTVMError();
2040f770:	fdc42503          	lw	a0,-36(s0)
2040f774:	195000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f778:	00000013          	nop
2040f77c:	02c12083          	lw	ra,44(sp)
2040f780:	02812403          	lw	s0,40(sp)
2040f784:	03010113          	addi	sp,sp,48
2040f788:	00008067          	ret

2040f78c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii>:
  void SyscallGetGlobalFunc(TVMValue* values, int* tcodes, int num_args) {
2040f78c:	fd010113          	addi	sp,sp,-48
2040f790:	02112623          	sw	ra,44(sp)
2040f794:	02812423          	sw	s0,40(sp)
2040f798:	03010413          	addi	s0,sp,48
2040f79c:	fca42e23          	sw	a0,-36(s0)
2040f7a0:	fcb42c23          	sw	a1,-40(s0)
2040f7a4:	fcc42a23          	sw	a2,-44(s0)
2040f7a8:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 1);
2040f7ac:	fd042703          	lw	a4,-48(s0)
2040f7b0:	00100793          	li	a5,1
2040f7b4:	00f70a63          	beq	a4,a5,2040f7c8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x3c>
2040f7b8:	00000613          	li	a2,0
2040f7bc:	00900593          	li	a1,9
2040f7c0:	fdc42503          	lw	a0,-36(s0)
2040f7c4:	bb5ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMStr);
2040f7c8:	fd442783          	lw	a5,-44(s0)
2040f7cc:	0007a703          	lw	a4,0(a5)
2040f7d0:	00b00793          	li	a5,11
2040f7d4:	00f70a63          	beq	a4,a5,2040f7e8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x5c>
2040f7d8:	00000613          	li	a2,0
2040f7dc:	00900593          	li	a1,9
2040f7e0:	fdc42503          	lw	a0,-36(s0)
2040f7e4:	b95ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    int call_ecode = TVMFuncGetGlobal(values[0].v_str, &handle);
2040f7e8:	fd842783          	lw	a5,-40(s0)
2040f7ec:	0007a783          	lw	a5,0(a5)
2040f7f0:	fe840713          	addi	a4,s0,-24
2040f7f4:	00070593          	mv	a1,a4
2040f7f8:	00078513          	mv	a0,a5
2040f7fc:	b30f20ef          	jal	ra,20401b2c <TVMFuncGetGlobal>
2040f800:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040f804:	fec42783          	lw	a5,-20(s0)
2040f808:	00079c63          	bnez	a5,2040f820 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x94>
      this->ReturnHandle(handle);
2040f80c:	fe842783          	lw	a5,-24(s0)
2040f810:	00078593          	mv	a1,a5
2040f814:	fdc42503          	lw	a0,-36(s0)
2040f818:	058010ef          	jal	ra,20410870 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040f81c:	00c0006f          	j	2040f828 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x9c>
      this->ReturnLastTVMError();
2040f820:	fdc42503          	lw	a0,-36(s0)
2040f824:	0e5000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f828:	00000013          	nop
2040f82c:	02c12083          	lw	ra,44(sp)
2040f830:	02812403          	lw	s0,40(sp)
2040f834:	03010113          	addi	sp,sp,48
2040f838:	00008067          	ret

2040f83c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>:
  void ReturnException(const char* msg) { RPCReference::ReturnException(msg, this); }
2040f83c:	fe010113          	addi	sp,sp,-32
2040f840:	00112e23          	sw	ra,28(sp)
2040f844:	00812c23          	sw	s0,24(sp)
2040f848:	02010413          	addi	s0,sp,32
2040f84c:	fea42623          	sw	a0,-20(s0)
2040f850:	feb42423          	sw	a1,-24(s0)
2040f854:	fec42583          	lw	a1,-20(s0)
2040f858:	fe842503          	lw	a0,-24(s0)
2040f85c:	0fc010ef          	jal	ra,20410958 <_ZN3tvm7runtime12RPCReference15ReturnExceptionINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPKcPT_>
2040f860:	00000013          	nop
2040f864:	01c12083          	lw	ra,28(sp)
2040f868:	01812403          	lw	s0,24(sp)
2040f86c:	02010113          	addi	sp,sp,32
2040f870:	00008067          	ret

2040f874 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii>:
  void SyscallDevAllocData(TVMValue* values, int* tcodes, int num_args) {
2040f874:	fb010113          	addi	sp,sp,-80
2040f878:	04112623          	sw	ra,76(sp)
2040f87c:	04812423          	sw	s0,72(sp)
2040f880:	05010413          	addi	s0,sp,80
2040f884:	faa42e23          	sw	a0,-68(s0)
2040f888:	fab42c23          	sw	a1,-72(s0)
2040f88c:	fac42a23          	sw	a2,-76(s0)
2040f890:	fad42823          	sw	a3,-80(s0)
    MINRPC_CHECK(num_args == 4);
2040f894:	fb042703          	lw	a4,-80(s0)
2040f898:	00400793          	li	a5,4
2040f89c:	00f70a63          	beq	a4,a5,2040f8b0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x3c>
2040f8a0:	00000613          	li	a2,0
2040f8a4:	00900593          	li	a1,9
2040f8a8:	fbc42503          	lw	a0,-68(s0)
2040f8ac:	acdff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040f8b0:	fb442783          	lw	a5,-76(s0)
2040f8b4:	0007a703          	lw	a4,0(a5)
2040f8b8:	00600793          	li	a5,6
2040f8bc:	00f70a63          	beq	a4,a5,2040f8d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x5c>
2040f8c0:	00000613          	li	a2,0
2040f8c4:	00900593          	li	a1,9
2040f8c8:	fbc42503          	lw	a0,-68(s0)
2040f8cc:	aadff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kDLInt);
2040f8d0:	fb442783          	lw	a5,-76(s0)
2040f8d4:	00478793          	addi	a5,a5,4
2040f8d8:	0007a783          	lw	a5,0(a5)
2040f8dc:	00078a63          	beqz	a5,2040f8f0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x7c>
2040f8e0:	00000613          	li	a2,0
2040f8e4:	00900593          	li	a1,9
2040f8e8:	fbc42503          	lw	a0,-68(s0)
2040f8ec:	a8dff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[2] == kDLInt);
2040f8f0:	fb442783          	lw	a5,-76(s0)
2040f8f4:	00878793          	addi	a5,a5,8
2040f8f8:	0007a783          	lw	a5,0(a5)
2040f8fc:	00078a63          	beqz	a5,2040f910 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x9c>
2040f900:	00000613          	li	a2,0
2040f904:	00900593          	li	a1,9
2040f908:	fbc42503          	lw	a0,-68(s0)
2040f90c:	a6dff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[3] == kTVMDataType);
2040f910:	fb442783          	lw	a5,-76(s0)
2040f914:	00c78793          	addi	a5,a5,12
2040f918:	0007a703          	lw	a4,0(a5)
2040f91c:	00500793          	li	a5,5
2040f920:	00f70a63          	beq	a4,a5,2040f934 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0xc0>
2040f924:	00000613          	li	a2,0
2040f928:	00900593          	li	a1,9
2040f92c:	fbc42503          	lw	a0,-68(s0)
2040f930:	a49ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040f934:	fb842783          	lw	a5,-72(s0)
2040f938:	0047a803          	lw	a6,4(a5)
2040f93c:	0007a783          	lw	a5,0(a5)
2040f940:	fcf42a23          	sw	a5,-44(s0)
2040f944:	fd042c23          	sw	a6,-40(s0)
    int64_t nbytes = values[1].v_int64;
2040f948:	fb842783          	lw	a5,-72(s0)
2040f94c:	00878793          	addi	a5,a5,8
2040f950:	0047a803          	lw	a6,4(a5)
2040f954:	0007a783          	lw	a5,0(a5)
2040f958:	fef42423          	sw	a5,-24(s0)
2040f95c:	ff042623          	sw	a6,-20(s0)
    int64_t alignment = values[2].v_int64;
2040f960:	fb842783          	lw	a5,-72(s0)
2040f964:	01078793          	addi	a5,a5,16
2040f968:	0047a803          	lw	a6,4(a5)
2040f96c:	0007a783          	lw	a5,0(a5)
2040f970:	fef42023          	sw	a5,-32(s0)
2040f974:	ff042223          	sw	a6,-28(s0)
    DLDataType type_hint = values[3].v_type;
2040f978:	fb842783          	lw	a5,-72(s0)
2040f97c:	01878793          	addi	a5,a5,24
2040f980:	0007a783          	lw	a5,0(a5)
2040f984:	fcf42823          	sw	a5,-48(s0)
    int call_ecode = TVMDeviceAllocDataSpace(dev, nbytes, alignment, type_hint, &handle);
2040f988:	fe842603          	lw	a2,-24(s0)
2040f98c:	fe042683          	lw	a3,-32(s0)
2040f990:	fcc40793          	addi	a5,s0,-52
2040f994:	fd042703          	lw	a4,-48(s0)
2040f998:	fd442503          	lw	a0,-44(s0)
2040f99c:	fd842583          	lw	a1,-40(s0)
2040f9a0:	d90f10ef          	jal	ra,20400f30 <TVMDeviceAllocDataSpace>
2040f9a4:	fca42e23          	sw	a0,-36(s0)
    if (call_ecode == 0) {
2040f9a8:	fdc42783          	lw	a5,-36(s0)
2040f9ac:	00079c63          	bnez	a5,2040f9c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x150>
      this->ReturnHandle(handle);
2040f9b0:	fcc42783          	lw	a5,-52(s0)
2040f9b4:	00078593          	mv	a1,a5
2040f9b8:	fbc42503          	lw	a0,-68(s0)
2040f9bc:	6b5000ef          	jal	ra,20410870 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040f9c0:	00c0006f          	j	2040f9cc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x158>
      this->ReturnLastTVMError();
2040f9c4:	fbc42503          	lw	a0,-68(s0)
2040f9c8:	740000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f9cc:	00000013          	nop
2040f9d0:	04c12083          	lw	ra,76(sp)
2040f9d4:	04812403          	lw	s0,72(sp)
2040f9d8:	05010113          	addi	sp,sp,80
2040f9dc:	00008067          	ret

2040f9e0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii>:
  void SyscallDevAllocDataWithScope(TVMValue* values, int* tcodes, int num_args) {
2040f9e0:	fd010113          	addi	sp,sp,-48
2040f9e4:	02112623          	sw	ra,44(sp)
2040f9e8:	02812423          	sw	s0,40(sp)
2040f9ec:	03010413          	addi	s0,sp,48
2040f9f0:	fca42e23          	sw	a0,-36(s0)
2040f9f4:	fcb42c23          	sw	a1,-40(s0)
2040f9f8:	fcc42a23          	sw	a2,-44(s0)
2040f9fc:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fa00:	fd042703          	lw	a4,-48(s0)
2040fa04:	00200793          	li	a5,2
2040fa08:	00f70a63          	beq	a4,a5,2040fa1c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x3c>
2040fa0c:	00000613          	li	a2,0
2040fa10:	00900593          	li	a1,9
2040fa14:	fdc42503          	lw	a0,-36(s0)
2040fa18:	961ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMDLTensorHandle);
2040fa1c:	fd442783          	lw	a5,-44(s0)
2040fa20:	0007a703          	lw	a4,0(a5)
2040fa24:	00700793          	li	a5,7
2040fa28:	00f70a63          	beq	a4,a5,2040fa3c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x5c>
2040fa2c:	00000613          	li	a2,0
2040fa30:	00900593          	li	a1,9
2040fa34:	fdc42503          	lw	a0,-36(s0)
2040fa38:	941ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMNullptr || tcodes[1] == kTVMStr);
2040fa3c:	fd442783          	lw	a5,-44(s0)
2040fa40:	00478793          	addi	a5,a5,4
2040fa44:	0007a703          	lw	a4,0(a5)
2040fa48:	00400793          	li	a5,4
2040fa4c:	02f70463          	beq	a4,a5,2040fa74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x94>
2040fa50:	fd442783          	lw	a5,-44(s0)
2040fa54:	00478793          	addi	a5,a5,4
2040fa58:	0007a703          	lw	a4,0(a5)
2040fa5c:	00b00793          	li	a5,11
2040fa60:	00f70a63          	beq	a4,a5,2040fa74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x94>
2040fa64:	00000613          	li	a2,0
2040fa68:	00900593          	li	a1,9
2040fa6c:	fdc42503          	lw	a0,-36(s0)
2040fa70:	909ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLTensor* arr = reinterpret_cast<DLTensor*>(values[0].v_handle);
2040fa74:	fd842783          	lw	a5,-40(s0)
2040fa78:	0007a783          	lw	a5,0(a5)
2040fa7c:	fef42623          	sw	a5,-20(s0)
    const char* mem_scope = (tcodes[1] == kTVMNullptr ? nullptr : values[1].v_str);
2040fa80:	fd442783          	lw	a5,-44(s0)
2040fa84:	00478793          	addi	a5,a5,4
2040fa88:	0007a703          	lw	a4,0(a5)
2040fa8c:	00400793          	li	a5,4
2040fa90:	00f70a63          	beq	a4,a5,2040faa4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0xc4>
2040fa94:	fd842783          	lw	a5,-40(s0)
2040fa98:	00878793          	addi	a5,a5,8
2040fa9c:	0007a783          	lw	a5,0(a5)
2040faa0:	0080006f          	j	2040faa8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0xc8>
2040faa4:	00000793          	li	a5,0
2040faa8:	fef42423          	sw	a5,-24(s0)
    int call_ecode = TVMDeviceAllocDataSpaceWithScope(arr->device, arr->ndim, arr->shape,
2040faac:	fec42783          	lw	a5,-20(s0)
2040fab0:	00c7a603          	lw	a2,12(a5)
2040fab4:	fec42783          	lw	a5,-20(s0)
2040fab8:	0147a683          	lw	a3,20(a5)
2040fabc:	fe040793          	addi	a5,s0,-32
2040fac0:	fec42703          	lw	a4,-20(s0)
2040fac4:	fec42583          	lw	a1,-20(s0)
2040fac8:	00078813          	mv	a6,a5
2040facc:	fe842783          	lw	a5,-24(s0)
2040fad0:	01072703          	lw	a4,16(a4)
2040fad4:	0045a503          	lw	a0,4(a1)
2040fad8:	0085a583          	lw	a1,8(a1)
2040fadc:	ce8f10ef          	jal	ra,20400fc4 <TVMDeviceAllocDataSpaceWithScope>
2040fae0:	fea42223          	sw	a0,-28(s0)
    if (call_ecode == 0) {
2040fae4:	fe442783          	lw	a5,-28(s0)
2040fae8:	00079c63          	bnez	a5,2040fb00 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x120>
      this->ReturnHandle(handle);
2040faec:	fe042783          	lw	a5,-32(s0)
2040faf0:	00078593          	mv	a1,a5
2040faf4:	fdc42503          	lw	a0,-36(s0)
2040faf8:	579000ef          	jal	ra,20410870 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040fafc:	00c0006f          	j	2040fb08 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x128>
      this->ReturnLastTVMError();
2040fb00:	fdc42503          	lw	a0,-36(s0)
2040fb04:	604000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fb08:	00000013          	nop
2040fb0c:	02c12083          	lw	ra,44(sp)
2040fb10:	02812403          	lw	s0,40(sp)
2040fb14:	03010113          	addi	sp,sp,48
2040fb18:	00008067          	ret

2040fb1c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii>:
  void SyscallDevFreeData(TVMValue* values, int* tcodes, int num_args) {
2040fb1c:	fd010113          	addi	sp,sp,-48
2040fb20:	02112623          	sw	ra,44(sp)
2040fb24:	02812423          	sw	s0,40(sp)
2040fb28:	03010413          	addi	s0,sp,48
2040fb2c:	fca42e23          	sw	a0,-36(s0)
2040fb30:	fcb42c23          	sw	a1,-40(s0)
2040fb34:	fcc42a23          	sw	a2,-44(s0)
2040fb38:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fb3c:	fd042703          	lw	a4,-48(s0)
2040fb40:	00200793          	li	a5,2
2040fb44:	00f70a63          	beq	a4,a5,2040fb58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0x3c>
2040fb48:	00000613          	li	a2,0
2040fb4c:	00900593          	li	a1,9
2040fb50:	fdc42503          	lw	a0,-36(s0)
2040fb54:	825ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040fb58:	fd442783          	lw	a5,-44(s0)
2040fb5c:	0007a703          	lw	a4,0(a5)
2040fb60:	00600793          	li	a5,6
2040fb64:	00f70a63          	beq	a4,a5,2040fb78 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0x5c>
2040fb68:	00000613          	li	a2,0
2040fb6c:	00900593          	li	a1,9
2040fb70:	fdc42503          	lw	a0,-36(s0)
2040fb74:	805ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
2040fb78:	fd442783          	lw	a5,-44(s0)
2040fb7c:	00478793          	addi	a5,a5,4
2040fb80:	0007a703          	lw	a4,0(a5)
2040fb84:	00300793          	li	a5,3
2040fb88:	00f70a63          	beq	a4,a5,2040fb9c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0x80>
2040fb8c:	00000613          	li	a2,0
2040fb90:	00900593          	li	a1,9
2040fb94:	fdc42503          	lw	a0,-36(s0)
2040fb98:	fe0ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040fb9c:	fd842783          	lw	a5,-40(s0)
2040fba0:	0047a803          	lw	a6,4(a5)
2040fba4:	0007a783          	lw	a5,0(a5)
2040fba8:	fef42023          	sw	a5,-32(s0)
2040fbac:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
2040fbb0:	fd842783          	lw	a5,-40(s0)
2040fbb4:	00878793          	addi	a5,a5,8
2040fbb8:	0007a783          	lw	a5,0(a5)
2040fbbc:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMDeviceFreeDataSpace(dev, handle);
2040fbc0:	fec42603          	lw	a2,-20(s0)
2040fbc4:	fe042503          	lw	a0,-32(s0)
2040fbc8:	fe442583          	lw	a1,-28(s0)
2040fbcc:	d34f10ef          	jal	ra,20401100 <TVMDeviceFreeDataSpace>
2040fbd0:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2040fbd4:	fe842783          	lw	a5,-24(s0)
2040fbd8:	00079863          	bnez	a5,2040fbe8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0xcc>
      this->ReturnVoid();
2040fbdc:	fdc42503          	lw	a0,-36(s0)
2040fbe0:	5e4000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040fbe4:	00c0006f          	j	2040fbf0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0xd4>
      this->ReturnLastTVMError();
2040fbe8:	fdc42503          	lw	a0,-36(s0)
2040fbec:	51c000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fbf0:	00000013          	nop
2040fbf4:	02c12083          	lw	ra,44(sp)
2040fbf8:	02812403          	lw	s0,40(sp)
2040fbfc:	03010113          	addi	sp,sp,48
2040fc00:	00008067          	ret

2040fc04 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii>:
  void SyscallDevCreateStream(TVMValue* values, int* tcodes, int num_args) {
2040fc04:	fd010113          	addi	sp,sp,-48
2040fc08:	02112623          	sw	ra,44(sp)
2040fc0c:	02812423          	sw	s0,40(sp)
2040fc10:	03010413          	addi	s0,sp,48
2040fc14:	fca42e23          	sw	a0,-36(s0)
2040fc18:	fcb42c23          	sw	a1,-40(s0)
2040fc1c:	fcc42a23          	sw	a2,-44(s0)
2040fc20:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 1);
2040fc24:	fd042703          	lw	a4,-48(s0)
2040fc28:	00100793          	li	a5,1
2040fc2c:	00f70a63          	beq	a4,a5,2040fc40 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0x3c>
2040fc30:	00000613          	li	a2,0
2040fc34:	00900593          	li	a1,9
2040fc38:	fdc42503          	lw	a0,-36(s0)
2040fc3c:	f3cff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040fc40:	fd442783          	lw	a5,-44(s0)
2040fc44:	0007a703          	lw	a4,0(a5)
2040fc48:	00600793          	li	a5,6
2040fc4c:	00f70a63          	beq	a4,a5,2040fc60 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0x5c>
2040fc50:	00000613          	li	a2,0
2040fc54:	00900593          	li	a1,9
2040fc58:	fdc42503          	lw	a0,-36(s0)
2040fc5c:	f1cff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040fc60:	fd842783          	lw	a5,-40(s0)
2040fc64:	0047a803          	lw	a6,4(a5)
2040fc68:	0007a783          	lw	a5,0(a5)
2040fc6c:	fef42223          	sw	a5,-28(s0)
2040fc70:	ff042423          	sw	a6,-24(s0)
    int call_ecode = TVMStreamCreate(dev.device_type, dev.device_id, &handle);
2040fc74:	fe442783          	lw	a5,-28(s0)
2040fc78:	00078693          	mv	a3,a5
2040fc7c:	fe842783          	lw	a5,-24(s0)
2040fc80:	fe040713          	addi	a4,s0,-32
2040fc84:	00070613          	mv	a2,a4
2040fc88:	00078593          	mv	a1,a5
2040fc8c:	00068513          	mv	a0,a3
2040fc90:	f0cf10ef          	jal	ra,2040139c <TVMStreamCreate>
2040fc94:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040fc98:	fec42783          	lw	a5,-20(s0)
2040fc9c:	00079c63          	bnez	a5,2040fcb4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0xb0>
      this->ReturnHandle(handle);
2040fca0:	fe042783          	lw	a5,-32(s0)
2040fca4:	00078593          	mv	a1,a5
2040fca8:	fdc42503          	lw	a0,-36(s0)
2040fcac:	3c5000ef          	jal	ra,20410870 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040fcb0:	00c0006f          	j	2040fcbc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0xb8>
      this->ReturnLastTVMError();
2040fcb4:	fdc42503          	lw	a0,-36(s0)
2040fcb8:	450000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fcbc:	00000013          	nop
2040fcc0:	02c12083          	lw	ra,44(sp)
2040fcc4:	02812403          	lw	s0,40(sp)
2040fcc8:	03010113          	addi	sp,sp,48
2040fccc:	00008067          	ret

2040fcd0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii>:
  void SyscallDevFreeStream(TVMValue* values, int* tcodes, int num_args) {
2040fcd0:	fd010113          	addi	sp,sp,-48
2040fcd4:	02112623          	sw	ra,44(sp)
2040fcd8:	02812423          	sw	s0,40(sp)
2040fcdc:	03010413          	addi	s0,sp,48
2040fce0:	fca42e23          	sw	a0,-36(s0)
2040fce4:	fcb42c23          	sw	a1,-40(s0)
2040fce8:	fcc42a23          	sw	a2,-44(s0)
2040fcec:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fcf0:	fd042703          	lw	a4,-48(s0)
2040fcf4:	00200793          	li	a5,2
2040fcf8:	00f70a63          	beq	a4,a5,2040fd0c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0x3c>
2040fcfc:	00000613          	li	a2,0
2040fd00:	00900593          	li	a1,9
2040fd04:	fdc42503          	lw	a0,-36(s0)
2040fd08:	e70ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040fd0c:	fd442783          	lw	a5,-44(s0)
2040fd10:	0007a703          	lw	a4,0(a5)
2040fd14:	00600793          	li	a5,6
2040fd18:	00f70a63          	beq	a4,a5,2040fd2c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0x5c>
2040fd1c:	00000613          	li	a2,0
2040fd20:	00900593          	li	a1,9
2040fd24:	fdc42503          	lw	a0,-36(s0)
2040fd28:	e50ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
2040fd2c:	fd442783          	lw	a5,-44(s0)
2040fd30:	00478793          	addi	a5,a5,4
2040fd34:	0007a703          	lw	a4,0(a5)
2040fd38:	00300793          	li	a5,3
2040fd3c:	00f70a63          	beq	a4,a5,2040fd50 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0x80>
2040fd40:	00000613          	li	a2,0
2040fd44:	00900593          	li	a1,9
2040fd48:	fdc42503          	lw	a0,-36(s0)
2040fd4c:	e2cff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040fd50:	fd842783          	lw	a5,-40(s0)
2040fd54:	0047a803          	lw	a6,4(a5)
2040fd58:	0007a783          	lw	a5,0(a5)
2040fd5c:	fef42023          	sw	a5,-32(s0)
2040fd60:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
2040fd64:	fd842783          	lw	a5,-40(s0)
2040fd68:	00878793          	addi	a5,a5,8
2040fd6c:	0007a783          	lw	a5,0(a5)
2040fd70:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMStreamFree(dev.device_type, dev.device_id, handle);
2040fd74:	fe042783          	lw	a5,-32(s0)
2040fd78:	00078713          	mv	a4,a5
2040fd7c:	fe442783          	lw	a5,-28(s0)
2040fd80:	fec42603          	lw	a2,-20(s0)
2040fd84:	00078593          	mv	a1,a5
2040fd88:	00070513          	mv	a0,a4
2040fd8c:	e40f10ef          	jal	ra,204013cc <TVMStreamFree>
2040fd90:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2040fd94:	fe842783          	lw	a5,-24(s0)
2040fd98:	00079863          	bnez	a5,2040fda8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0xd8>
      this->ReturnVoid();
2040fd9c:	fdc42503          	lw	a0,-36(s0)
2040fda0:	424000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040fda4:	00c0006f          	j	2040fdb0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0xe0>
      this->ReturnLastTVMError();
2040fda8:	fdc42503          	lw	a0,-36(s0)
2040fdac:	35c000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fdb0:	00000013          	nop
2040fdb4:	02c12083          	lw	ra,44(sp)
2040fdb8:	02812403          	lw	s0,40(sp)
2040fdbc:	03010113          	addi	sp,sp,48
2040fdc0:	00008067          	ret

2040fdc4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii>:
  void SyscallDevStreamSync(TVMValue* values, int* tcodes, int num_args) {
2040fdc4:	fd010113          	addi	sp,sp,-48
2040fdc8:	02112623          	sw	ra,44(sp)
2040fdcc:	02812423          	sw	s0,40(sp)
2040fdd0:	03010413          	addi	s0,sp,48
2040fdd4:	fca42e23          	sw	a0,-36(s0)
2040fdd8:	fcb42c23          	sw	a1,-40(s0)
2040fddc:	fcc42a23          	sw	a2,-44(s0)
2040fde0:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fde4:	fd042703          	lw	a4,-48(s0)
2040fde8:	00200793          	li	a5,2
2040fdec:	00f70a63          	beq	a4,a5,2040fe00 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0x3c>
2040fdf0:	00000613          	li	a2,0
2040fdf4:	00900593          	li	a1,9
2040fdf8:	fdc42503          	lw	a0,-36(s0)
2040fdfc:	d7cff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040fe00:	fd442783          	lw	a5,-44(s0)
2040fe04:	0007a703          	lw	a4,0(a5)
2040fe08:	00600793          	li	a5,6
2040fe0c:	00f70a63          	beq	a4,a5,2040fe20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0x5c>
2040fe10:	00000613          	li	a2,0
2040fe14:	00900593          	li	a1,9
2040fe18:	fdc42503          	lw	a0,-36(s0)
2040fe1c:	d5cff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
2040fe20:	fd442783          	lw	a5,-44(s0)
2040fe24:	00478793          	addi	a5,a5,4
2040fe28:	0007a703          	lw	a4,0(a5)
2040fe2c:	00300793          	li	a5,3
2040fe30:	00f70a63          	beq	a4,a5,2040fe44 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0x80>
2040fe34:	00000613          	li	a2,0
2040fe38:	00900593          	li	a1,9
2040fe3c:	fdc42503          	lw	a0,-36(s0)
2040fe40:	d38ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040fe44:	fd842783          	lw	a5,-40(s0)
2040fe48:	0047a803          	lw	a6,4(a5)
2040fe4c:	0007a783          	lw	a5,0(a5)
2040fe50:	fef42023          	sw	a5,-32(s0)
2040fe54:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
2040fe58:	fd842783          	lw	a5,-40(s0)
2040fe5c:	00878793          	addi	a5,a5,8
2040fe60:	0007a783          	lw	a5,0(a5)
2040fe64:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMSynchronize(dev.device_type, dev.device_id, handle);
2040fe68:	fe042783          	lw	a5,-32(s0)
2040fe6c:	00078713          	mv	a4,a5
2040fe70:	fe442783          	lw	a5,-28(s0)
2040fe74:	fec42603          	lw	a2,-20(s0)
2040fe78:	00078593          	mv	a1,a5
2040fe7c:	00070513          	mv	a0,a4
2040fe80:	da4f10ef          	jal	ra,20401424 <TVMSynchronize>
2040fe84:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2040fe88:	fe842783          	lw	a5,-24(s0)
2040fe8c:	00079863          	bnez	a5,2040fe9c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0xd8>
      this->ReturnVoid();
2040fe90:	fdc42503          	lw	a0,-36(s0)
2040fe94:	330000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040fe98:	00c0006f          	j	2040fea4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0xe0>
      this->ReturnLastTVMError();
2040fe9c:	fdc42503          	lw	a0,-36(s0)
2040fea0:	268000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fea4:	00000013          	nop
2040fea8:	02c12083          	lw	ra,44(sp)
2040feac:	02812403          	lw	s0,40(sp)
2040feb0:	03010113          	addi	sp,sp,48
2040feb4:	00008067          	ret

2040feb8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii>:
  void SyscallDevSetStream(TVMValue* values, int* tcodes, int num_args) {
2040feb8:	fd010113          	addi	sp,sp,-48
2040febc:	02112623          	sw	ra,44(sp)
2040fec0:	02812423          	sw	s0,40(sp)
2040fec4:	03010413          	addi	s0,sp,48
2040fec8:	fca42e23          	sw	a0,-36(s0)
2040fecc:	fcb42c23          	sw	a1,-40(s0)
2040fed0:	fcc42a23          	sw	a2,-44(s0)
2040fed4:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fed8:	fd042703          	lw	a4,-48(s0)
2040fedc:	00200793          	li	a5,2
2040fee0:	00f70a63          	beq	a4,a5,2040fef4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0x3c>
2040fee4:	00000613          	li	a2,0
2040fee8:	00900593          	li	a1,9
2040feec:	fdc42503          	lw	a0,-36(s0)
2040fef0:	c88ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040fef4:	fd442783          	lw	a5,-44(s0)
2040fef8:	0007a703          	lw	a4,0(a5)
2040fefc:	00600793          	li	a5,6
2040ff00:	00f70a63          	beq	a4,a5,2040ff14 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0x5c>
2040ff04:	00000613          	li	a2,0
2040ff08:	00900593          	li	a1,9
2040ff0c:	fdc42503          	lw	a0,-36(s0)
2040ff10:	c68ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
2040ff14:	fd442783          	lw	a5,-44(s0)
2040ff18:	00478793          	addi	a5,a5,4
2040ff1c:	0007a703          	lw	a4,0(a5)
2040ff20:	00300793          	li	a5,3
2040ff24:	00f70a63          	beq	a4,a5,2040ff38 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0x80>
2040ff28:	00000613          	li	a2,0
2040ff2c:	00900593          	li	a1,9
2040ff30:	fdc42503          	lw	a0,-36(s0)
2040ff34:	c44ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040ff38:	fd842783          	lw	a5,-40(s0)
2040ff3c:	0047a803          	lw	a6,4(a5)
2040ff40:	0007a783          	lw	a5,0(a5)
2040ff44:	fef42023          	sw	a5,-32(s0)
2040ff48:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
2040ff4c:	fd842783          	lw	a5,-40(s0)
2040ff50:	00878793          	addi	a5,a5,8
2040ff54:	0007a783          	lw	a5,0(a5)
2040ff58:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMSetStream(dev.device_type, dev.device_id, handle);
2040ff5c:	fe042783          	lw	a5,-32(s0)
2040ff60:	00078713          	mv	a4,a5
2040ff64:	fe442783          	lw	a5,-28(s0)
2040ff68:	fec42603          	lw	a2,-20(s0)
2040ff6c:	00078593          	mv	a1,a5
2040ff70:	00070513          	mv	a0,a4
2040ff74:	c84f10ef          	jal	ra,204013f8 <TVMSetStream>
2040ff78:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2040ff7c:	fe842783          	lw	a5,-24(s0)
2040ff80:	00079863          	bnez	a5,2040ff90 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0xd8>
      this->ReturnVoid();
2040ff84:	fdc42503          	lw	a0,-36(s0)
2040ff88:	23c000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040ff8c:	00c0006f          	j	2040ff98 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0xe0>
      this->ReturnLastTVMError();
2040ff90:	fdc42503          	lw	a0,-36(s0)
2040ff94:	174000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040ff98:	00000013          	nop
2040ff9c:	02c12083          	lw	ra,44(sp)
2040ffa0:	02812403          	lw	s0,40(sp)
2040ffa4:	03010113          	addi	sp,sp,48
2040ffa8:	00008067          	ret

2040ffac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii>:
  void SyscallCopyAmongRemote(TVMValue* values, int* tcodes, int num_args) {
2040ffac:	fd010113          	addi	sp,sp,-48
2040ffb0:	02112623          	sw	ra,44(sp)
2040ffb4:	02812423          	sw	s0,40(sp)
2040ffb8:	03010413          	addi	s0,sp,48
2040ffbc:	fca42e23          	sw	a0,-36(s0)
2040ffc0:	fcb42c23          	sw	a1,-40(s0)
2040ffc4:	fcc42a23          	sw	a2,-44(s0)
2040ffc8:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 3);
2040ffcc:	fd042703          	lw	a4,-48(s0)
2040ffd0:	00300793          	li	a5,3
2040ffd4:	00f70a63          	beq	a4,a5,2040ffe8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x3c>
2040ffd8:	00000613          	li	a2,0
2040ffdc:	00900593          	li	a1,9
2040ffe0:	fdc42503          	lw	a0,-36(s0)
2040ffe4:	b94ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMDLTensorHandle);
2040ffe8:	fd442783          	lw	a5,-44(s0)
2040ffec:	0007a703          	lw	a4,0(a5)
2040fff0:	00700793          	li	a5,7
2040fff4:	00f70a63          	beq	a4,a5,20410008 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x5c>
2040fff8:	00000613          	li	a2,0
2040fffc:	00900593          	li	a1,9
20410000:	fdc42503          	lw	a0,-36(s0)
20410004:	b74ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMDLTensorHandle);
20410008:	fd442783          	lw	a5,-44(s0)
2041000c:	00478793          	addi	a5,a5,4
20410010:	0007a703          	lw	a4,0(a5)
20410014:	00700793          	li	a5,7
20410018:	00f70a63          	beq	a4,a5,2041002c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x80>
2041001c:	00000613          	li	a2,0
20410020:	00900593          	li	a1,9
20410024:	fdc42503          	lw	a0,-36(s0)
20410028:	b50ff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[2] == kTVMOpaqueHandle);
2041002c:	fd442783          	lw	a5,-44(s0)
20410030:	00878793          	addi	a5,a5,8
20410034:	0007a703          	lw	a4,0(a5)
20410038:	00300793          	li	a5,3
2041003c:	00f70a63          	beq	a4,a5,20410050 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0xa4>
20410040:	00000613          	li	a2,0
20410044:	00900593          	li	a1,9
20410048:	fdc42503          	lw	a0,-36(s0)
2041004c:	b2cff0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    void* from = values[0].v_handle;
20410050:	fd842783          	lw	a5,-40(s0)
20410054:	0007a783          	lw	a5,0(a5)
20410058:	fef42623          	sw	a5,-20(s0)
    void* to = values[1].v_handle;
2041005c:	fd842783          	lw	a5,-40(s0)
20410060:	00878793          	addi	a5,a5,8
20410064:	0007a783          	lw	a5,0(a5)
20410068:	fef42423          	sw	a5,-24(s0)
    TVMStreamHandle stream = values[2].v_handle;
2041006c:	fd842783          	lw	a5,-40(s0)
20410070:	01078793          	addi	a5,a5,16
20410074:	0007a783          	lw	a5,0(a5)
20410078:	fef42223          	sw	a5,-28(s0)
    int call_ecode = TVMDeviceCopyDataFromTo(reinterpret_cast<DLTensor*>(from),
2041007c:	fe442603          	lw	a2,-28(s0)
20410080:	fe842583          	lw	a1,-24(s0)
20410084:	fec42503          	lw	a0,-20(s0)
20410088:	9b8f10ef          	jal	ra,20401240 <TVMDeviceCopyDataFromTo>
2041008c:	fea42023          	sw	a0,-32(s0)
    if (call_ecode == 0) {
20410090:	fe042783          	lw	a5,-32(s0)
20410094:	00079863          	bnez	a5,204100a4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0xf8>
      this->ReturnVoid();
20410098:	fdc42503          	lw	a0,-36(s0)
2041009c:	128000ef          	jal	ra,204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
204100a0:	00c0006f          	j	204100ac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x100>
      this->ReturnLastTVMError();
204100a4:	fdc42503          	lw	a0,-36(s0)
204100a8:	060000ef          	jal	ra,20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
204100ac:	00000013          	nop
204100b0:	02c12083          	lw	ra,44(sp)
204100b4:	02812403          	lw	s0,40(sp)
204100b8:	03010113          	addi	sp,sp,48
204100bc:	00008067          	ret

204100c0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>:
  void ReturnPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args) {
204100c0:	fe010113          	addi	sp,sp,-32
204100c4:	00112e23          	sw	ra,28(sp)
204100c8:	00812c23          	sw	s0,24(sp)
204100cc:	02010413          	addi	s0,sp,32
204100d0:	fea42623          	sw	a0,-20(s0)
204100d4:	feb42423          	sw	a1,-24(s0)
204100d8:	fec42223          	sw	a2,-28(s0)
204100dc:	fed42023          	sw	a3,-32(s0)
    RPCReference::ReturnPackedSeq(arg_values, type_codes, num_args, this);
204100e0:	fec42683          	lw	a3,-20(s0)
204100e4:	fe042603          	lw	a2,-32(s0)
204100e8:	fe442583          	lw	a1,-28(s0)
204100ec:	fe842503          	lw	a0,-24(s0)
204100f0:	185000ef          	jal	ra,20410a74 <_ZN3tvm7runtime12RPCReference15ReturnPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiiPT_>
  }
204100f4:	00000013          	nop
204100f8:	01c12083          	lw	ra,28(sp)
204100fc:	01812403          	lw	s0,24(sp)
20410100:	02010113          	addi	sp,sp,32
20410104:	00008067          	ret

20410108 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>:
  void ReturnLastTVMError() { this->ReturnException(TVMGetLastError()); }
20410108:	fe010113          	addi	sp,sp,-32
2041010c:	00112e23          	sw	ra,28(sp)
20410110:	00812c23          	sw	s0,24(sp)
20410114:	02010413          	addi	s0,sp,32
20410118:	fea42623          	sw	a0,-20(s0)
2041011c:	cc5f00ef          	jal	ra,20400de0 <TVMGetLastError>
20410120:	00050793          	mv	a5,a0
20410124:	00078593          	mv	a1,a5
20410128:	fec42503          	lw	a0,-20(s0)
2041012c:	f10ff0ef          	jal	ra,2040f83c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
20410130:	00000013          	nop
20410134:	01c12083          	lw	ra,28(sp)
20410138:	01812403          	lw	s0,24(sp)
2041013c:	02010113          	addi	sp,sp,32
20410140:	00008067          	ret

20410144 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>:
  T* ArenaAlloc(int count) {
20410144:	fe010113          	addi	sp,sp,-32
20410148:	00112e23          	sw	ra,28(sp)
2041014c:	00812c23          	sw	s0,24(sp)
20410150:	02010413          	addi	s0,sp,32
20410154:	fea42623          	sw	a0,-20(s0)
20410158:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
2041015c:	fec42783          	lw	a5,-20(s0)
20410160:	00478793          	addi	a5,a5,4
20410164:	fe842583          	lw	a1,-24(s0)
20410168:	00078513          	mv	a0,a5
2041016c:	1e5000ef          	jal	ra,20410b50 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IcEEPT_i>
20410170:	00050793          	mv	a5,a0
  }
20410174:	00078513          	mv	a0,a5
20410178:	01c12083          	lw	ra,28(sp)
2041017c:	01812403          	lw	s0,24(sp)
20410180:	02010113          	addi	sp,sp,32
20410184:	00008067          	ret

20410188 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>:
  void ReadArray(T* data, size_t count) {
20410188:	fe010113          	addi	sp,sp,-32
2041018c:	00112e23          	sw	ra,28(sp)
20410190:	00812c23          	sw	s0,24(sp)
20410194:	02010413          	addi	s0,sp,32
20410198:	fea42623          	sw	a0,-20(s0)
2041019c:	feb42423          	sw	a1,-24(s0)
204101a0:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
204101a4:	fe442603          	lw	a2,-28(s0)
204101a8:	fe842583          	lw	a1,-24(s0)
204101ac:	fec42503          	lw	a0,-20(s0)
204101b0:	b58ff0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
204101b4:	01c12083          	lw	ra,28(sp)
204101b8:	01812403          	lw	s0,24(sp)
204101bc:	02010113          	addi	sp,sp,32
204101c0:	00008067          	ret

204101c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>:
  void ReturnVoid() {
204101c4:	fc010113          	addi	sp,sp,-64
204101c8:	02112e23          	sw	ra,60(sp)
204101cc:	02812c23          	sw	s0,56(sp)
204101d0:	04010413          	addi	s0,sp,64
204101d4:	fca42623          	sw	a0,-52(s0)
    int32_t num_args = 1;
204101d8:	00100793          	li	a5,1
204101dc:	fef42623          	sw	a5,-20(s0)
    int32_t tcode = kTVMNullptr;
204101e0:	00400793          	li	a5,4
204101e4:	fef42423          	sw	a5,-24(s0)
    RPCCode code = RPCCode::kReturn;
204101e8:	00400793          	li	a5,4
204101ec:	fef42223          	sw	a5,-28(s0)
    uint64_t packet_nbytes = sizeof(code) + sizeof(num_args) + sizeof(tcode);
204101f0:	00c00793          	li	a5,12
204101f4:	00000813          	li	a6,0
204101f8:	fcf42c23          	sw	a5,-40(s0)
204101fc:	fd042e23          	sw	a6,-36(s0)
    io_->MessageStart(packet_nbytes);
20410200:	fcc42783          	lw	a5,-52(s0)
20410204:	0007a703          	lw	a4,0(a5)
20410208:	fd842783          	lw	a5,-40(s0)
2041020c:	fdc42803          	lw	a6,-36(s0)
20410210:	00078593          	mv	a1,a5
20410214:	00070513          	mv	a0,a4
20410218:	cf9fd0ef          	jal	ra,2040df10 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
    this->Write(packet_nbytes);
2041021c:	fd840793          	addi	a5,s0,-40
20410220:	00078593          	mv	a1,a5
20410224:	fcc42503          	lw	a0,-52(s0)
20410228:	21c000ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    this->Write(code);
2041022c:	fe440793          	addi	a5,s0,-28
20410230:	00078593          	mv	a1,a5
20410234:	fcc42503          	lw	a0,-52(s0)
20410238:	244000ef          	jal	ra,2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    this->Write(num_args);
2041023c:	fec40793          	addi	a5,s0,-20
20410240:	00078593          	mv	a1,a5
20410244:	fcc42503          	lw	a0,-52(s0)
20410248:	14d000ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    this->Write(tcode);
2041024c:	fe840793          	addi	a5,s0,-24
20410250:	00078593          	mv	a1,a5
20410254:	fcc42503          	lw	a0,-52(s0)
20410258:	13d000ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    io_->MessageDone();
2041025c:	fcc42783          	lw	a5,-52(s0)
20410260:	0007a783          	lw	a5,0(a5)
20410264:	00078513          	mv	a0,a5
20410268:	d59fd0ef          	jal	ra,2040dfc0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
  }
2041026c:	00000013          	nop
20410270:	03c12083          	lw	ra,60(sp)
20410274:	03812403          	lw	s0,56(sp)
20410278:	04010113          	addi	sp,sp,64
2041027c:	00008067          	ret

20410280 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>:
  T* ArenaAlloc(int count) {
20410280:	fe010113          	addi	sp,sp,-32
20410284:	00112e23          	sw	ra,28(sp)
20410288:	00812c23          	sw	s0,24(sp)
2041028c:	02010413          	addi	s0,sp,32
20410290:	fea42623          	sw	a0,-20(s0)
20410294:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410298:	fec42783          	lw	a5,-20(s0)
2041029c:	00478793          	addi	a5,a5,4
204102a0:	fe842583          	lw	a1,-24(s0)
204102a4:	00078513          	mv	a0,a5
204102a8:	125000ef          	jal	ra,20410bcc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8DLTensorEEPT_i>
204102ac:	00050793          	mv	a5,a0
  }
204102b0:	00078513          	mv	a0,a5
204102b4:	01c12083          	lw	ra,28(sp)
204102b8:	01812403          	lw	s0,24(sp)
204102bc:	02010113          	addi	sp,sp,32
204102c0:	00008067          	ret

204102c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>:
  void Read(T* data) {
204102c4:	fe010113          	addi	sp,sp,-32
204102c8:	00112e23          	sw	ra,28(sp)
204102cc:	00812c23          	sw	s0,24(sp)
204102d0:	02010413          	addi	s0,sp,32
204102d4:	fea42623          	sw	a0,-20(s0)
204102d8:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
204102dc:	00800613          	li	a2,8
204102e0:	fe842583          	lw	a1,-24(s0)
204102e4:	fec42503          	lw	a0,-20(s0)
204102e8:	a20ff0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
204102ec:	00000013          	nop
204102f0:	01c12083          	lw	ra,28(sp)
204102f4:	01812403          	lw	s0,24(sp)
204102f8:	02010113          	addi	sp,sp,32
204102fc:	00008067          	ret

20410300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>:
  void Read(T* data) {
20410300:	fe010113          	addi	sp,sp,-32
20410304:	00112e23          	sw	ra,28(sp)
20410308:	00812c23          	sw	s0,24(sp)
2041030c:	02010413          	addi	s0,sp,32
20410310:	fea42623          	sw	a0,-20(s0)
20410314:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
20410318:	00400613          	li	a2,4
2041031c:	fe842583          	lw	a1,-24(s0)
20410320:	fec42503          	lw	a0,-20(s0)
20410324:	9e4ff0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410328:	00000013          	nop
2041032c:	01c12083          	lw	ra,28(sp)
20410330:	01812403          	lw	s0,24(sp)
20410334:	02010113          	addi	sp,sp,32
20410338:	00008067          	ret

2041033c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>:
  void Read(T* data) {
2041033c:	fe010113          	addi	sp,sp,-32
20410340:	00112e23          	sw	ra,28(sp)
20410344:	00812c23          	sw	s0,24(sp)
20410348:	02010413          	addi	s0,sp,32
2041034c:	fea42623          	sw	a0,-20(s0)
20410350:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
20410354:	00400613          	li	a2,4
20410358:	fe842583          	lw	a1,-24(s0)
2041035c:	fec42503          	lw	a0,-20(s0)
20410360:	9a8ff0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410364:	00000013          	nop
20410368:	01c12083          	lw	ra,28(sp)
2041036c:	01812403          	lw	s0,24(sp)
20410370:	02010113          	addi	sp,sp,32
20410374:	00008067          	ret

20410378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>:
  T* ArenaAlloc(int count) {
20410378:	fe010113          	addi	sp,sp,-32
2041037c:	00112e23          	sw	ra,28(sp)
20410380:	00812c23          	sw	s0,24(sp)
20410384:	02010413          	addi	s0,sp,32
20410388:	fea42623          	sw	a0,-20(s0)
2041038c:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410390:	fec42783          	lw	a5,-20(s0)
20410394:	00478793          	addi	a5,a5,4
20410398:	fe842583          	lw	a1,-24(s0)
2041039c:	00078513          	mv	a0,a5
204103a0:	081000ef          	jal	ra,20410c20 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IxEEPT_i>
204103a4:	00050793          	mv	a5,a0
  }
204103a8:	00078513          	mv	a0,a5
204103ac:	01c12083          	lw	ra,28(sp)
204103b0:	01812403          	lw	s0,24(sp)
204103b4:	02010113          	addi	sp,sp,32
204103b8:	00008067          	ret

204103bc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>:
  void ReadArray(T* data, size_t count) {
204103bc:	fe010113          	addi	sp,sp,-32
204103c0:	00112e23          	sw	ra,28(sp)
204103c4:	00812c23          	sw	s0,24(sp)
204103c8:	02010413          	addi	s0,sp,32
204103cc:	fea42623          	sw	a0,-20(s0)
204103d0:	feb42423          	sw	a1,-24(s0)
204103d4:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
204103d8:	fe442783          	lw	a5,-28(s0)
204103dc:	00379793          	slli	a5,a5,0x3
204103e0:	00078613          	mv	a2,a5
204103e4:	fe842583          	lw	a1,-24(s0)
204103e8:	fec42503          	lw	a0,-20(s0)
204103ec:	91cff0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
204103f0:	01c12083          	lw	ra,28(sp)
204103f4:	01812403          	lw	s0,24(sp)
204103f8:	02010113          	addi	sp,sp,32
204103fc:	00008067          	ret

20410400 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIhEEPT_i>:
  T* ArenaAlloc(int count) {
20410400:	fe010113          	addi	sp,sp,-32
20410404:	00112e23          	sw	ra,28(sp)
20410408:	00812c23          	sw	s0,24(sp)
2041040c:	02010413          	addi	s0,sp,32
20410410:	fea42623          	sw	a0,-20(s0)
20410414:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410418:	fec42783          	lw	a5,-20(s0)
2041041c:	00478793          	addi	a5,a5,4
20410420:	fe842583          	lw	a1,-24(s0)
20410424:	00078513          	mv	a0,a5
20410428:	041000ef          	jal	ra,20410c68 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IhEEPT_i>
2041042c:	00050793          	mv	a5,a0
  }
20410430:	00078513          	mv	a0,a5
20410434:	01c12083          	lw	ra,28(sp)
20410438:	01812403          	lw	s0,24(sp)
2041043c:	02010113          	addi	sp,sp,32
20410440:	00008067          	ret

20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>:
  void Write(const T& data) {
20410444:	fe010113          	addi	sp,sp,-32
20410448:	00112e23          	sw	ra,28(sp)
2041044c:	00812c23          	sw	s0,24(sp)
20410450:	02010413          	addi	s0,sp,32
20410454:	fea42623          	sw	a0,-20(s0)
20410458:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
2041045c:	00800613          	li	a2,8
20410460:	fe842583          	lw	a1,-24(s0)
20410464:	fec42503          	lw	a0,-20(s0)
20410468:	045000ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
2041046c:	01c12083          	lw	ra,28(sp)
20410470:	01812403          	lw	s0,24(sp)
20410474:	02010113          	addi	sp,sp,32
20410478:	00008067          	ret

2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>:
  void Write(const T& data) {
2041047c:	fe010113          	addi	sp,sp,-32
20410480:	00112e23          	sw	ra,28(sp)
20410484:	00812c23          	sw	s0,24(sp)
20410488:	02010413          	addi	s0,sp,32
2041048c:	fea42623          	sw	a0,-20(s0)
20410490:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20410494:	00400613          	li	a2,4
20410498:	fe842583          	lw	a1,-24(s0)
2041049c:	fec42503          	lw	a0,-20(s0)
204104a0:	00d000ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
204104a4:	01c12083          	lw	ra,28(sp)
204104a8:	01812403          	lw	s0,24(sp)
204104ac:	02010113          	addi	sp,sp,32
204104b0:	00008067          	ret

204104b4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIhEEvPT_j>:
  void WriteArray(T* data, size_t count) {
204104b4:	fe010113          	addi	sp,sp,-32
204104b8:	00112e23          	sw	ra,28(sp)
204104bc:	00812c23          	sw	s0,24(sp)
204104c0:	02010413          	addi	s0,sp,32
204104c4:	fea42623          	sw	a0,-20(s0)
204104c8:	feb42423          	sw	a1,-24(s0)
204104cc:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
204104d0:	fe442603          	lw	a2,-28(s0)
204104d4:	fe842583          	lw	a1,-24(s0)
204104d8:	fec42503          	lw	a0,-20(s0)
204104dc:	7d0000ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
204104e0:	01c12083          	lw	ra,28(sp)
204104e4:	01812403          	lw	s0,24(sp)
204104e8:	02010113          	addi	sp,sp,32
204104ec:	00008067          	ret

204104f0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIhEEvPT_j>:
  void ReadArray(T* data, size_t count) {
204104f0:	fe010113          	addi	sp,sp,-32
204104f4:	00112e23          	sw	ra,28(sp)
204104f8:	00812c23          	sw	s0,24(sp)
204104fc:	02010413          	addi	s0,sp,32
20410500:	fea42623          	sw	a0,-20(s0)
20410504:	feb42423          	sw	a1,-24(s0)
20410508:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
2041050c:	fe442603          	lw	a2,-28(s0)
20410510:	fe842583          	lw	a1,-24(s0)
20410514:	fec42503          	lw	a0,-20(s0)
20410518:	ff1fe0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2041051c:	01c12083          	lw	ra,28(sp)
20410520:	01812403          	lw	s0,24(sp)
20410524:	02010113          	addi	sp,sp,32
20410528:	00008067          	ret

2041052c <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE10deallocateEPNS_7support15ArenaPageHeaderE>:

  void deallocate(ArenaPageHeader* page) {
2041052c:	fe010113          	addi	sp,sp,-32
20410530:	00112e23          	sw	ra,28(sp)
20410534:	00812c23          	sw	s0,24(sp)
20410538:	02010413          	addi	s0,sp,32
2041053c:	fea42623          	sw	a0,-20(s0)
20410540:	feb42423          	sw	a1,-24(s0)
    if (TVMDeviceFreeDataSpace(DLDevice{kDLCPU, 0}, page) != 0) {
20410544:	00100793          	li	a5,1
20410548:	00000813          	li	a6,0
2041054c:	fe842603          	lw	a2,-24(s0)
20410550:	00078513          	mv	a0,a5
20410554:	00080593          	mv	a1,a6
20410558:	ba9f00ef          	jal	ra,20401100 <TVMDeviceFreeDataSpace>
2041055c:	00050793          	mv	a5,a0
20410560:	00f037b3          	snez	a5,a5
20410564:	0ff7f793          	andi	a5,a5,255
20410568:	00078c63          	beqz	a5,20410580 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE10deallocateEPNS_7support15ArenaPageHeaderE+0x54>
      io_->Exit(static_cast<int>(RPCServerStatus::kAllocError));
2041056c:	fec42783          	lw	a5,-20(s0)
20410570:	0007a783          	lw	a5,0(a5)
20410574:	00c00593          	li	a1,12
20410578:	00078513          	mv	a0,a5
2041057c:	b29fd0ef          	jal	ra,2040e0a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
    }
  }
20410580:	00000013          	nop
20410584:	01c12083          	lw	ra,28(sp)
20410588:	01812403          	lw	s0,24(sp)
2041058c:	02010113          	addi	sp,sp,32
20410590:	00008067          	ret

20410594 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_>:
   * \param channel The communication channel handler.
   * \tparam TChannel The type of the communication channel.
   * \note The temporary space are populated via an arena inside channel.
   */
  template <typename TChannel>
  static void RecvPackedSeq(TVMValue** out_values, int** out_tcodes, int* out_num_args,
20410594:	fa010113          	addi	sp,sp,-96
20410598:	04112e23          	sw	ra,92(sp)
2041059c:	04812c23          	sw	s0,88(sp)
204105a0:	06010413          	addi	s0,sp,96
204105a4:	faa42623          	sw	a0,-84(s0)
204105a8:	fab42423          	sw	a1,-88(s0)
204105ac:	fac42223          	sw	a2,-92(s0)
204105b0:	fad42023          	sw	a3,-96(s0)
                            TChannel* channel) {
    // receive number of args
    int num_args;
    channel->Read(&num_args);
204105b4:	fd040793          	addi	a5,s0,-48
204105b8:	00078593          	mv	a1,a5
204105bc:	fa042503          	lw	a0,-96(s0)
204105c0:	d41ff0ef          	jal	ra,20410300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    *out_num_args = num_args;
204105c4:	fd042703          	lw	a4,-48(s0)
204105c8:	fa442783          	lw	a5,-92(s0)
204105cc:	00e7a023          	sw	a4,0(a5)

    if (num_args == 0) {
204105d0:	fd042783          	lw	a5,-48(s0)
204105d4:	00079c63          	bnez	a5,204105ec <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x58>
      *out_values = nullptr;
204105d8:	fac42783          	lw	a5,-84(s0)
204105dc:	0007a023          	sw	zero,0(a5)
      *out_tcodes = nullptr;
204105e0:	fa842783          	lw	a5,-88(s0)
204105e4:	0007a023          	sw	zero,0(a5)
204105e8:	2780006f          	j	20410860 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2cc>
      return;
    }

    TVMValue* values = channel->template ArenaAlloc<TVMValue>(num_args);
204105ec:	fd042783          	lw	a5,-48(s0)
204105f0:	00078593          	mv	a1,a5
204105f4:	fa042503          	lw	a0,-96(s0)
204105f8:	76c000ef          	jal	ra,20410d64 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8TVMValueEEPT_i>
204105fc:	fea42423          	sw	a0,-24(s0)
    int* tcodes = channel->template ArenaAlloc<int>(num_args);
20410600:	fd042783          	lw	a5,-48(s0)
20410604:	00078593          	mv	a1,a5
20410608:	fa042503          	lw	a0,-96(s0)
2041060c:	79c000ef          	jal	ra,20410da8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIiEEPT_i>
20410610:	fea42223          	sw	a0,-28(s0)
    *out_values = values;
20410614:	fac42783          	lw	a5,-84(s0)
20410618:	fe842703          	lw	a4,-24(s0)
2041061c:	00e7a023          	sw	a4,0(a5)
    *out_tcodes = tcodes;
20410620:	fa842783          	lw	a5,-88(s0)
20410624:	fe442703          	lw	a4,-28(s0)
20410628:	00e7a023          	sw	a4,0(a5)

    // receive type code.
    channel->ReadArray(tcodes, num_args);
2041062c:	fd042783          	lw	a5,-48(s0)
20410630:	00078613          	mv	a2,a5
20410634:	fe442583          	lw	a1,-28(s0)
20410638:	fa042503          	lw	a0,-96(s0)
2041063c:	7b0000ef          	jal	ra,20410dec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIiEEvPT_j>

    // receive arguments
    for (int i = 0; i < num_args; ++i) {
20410640:	fe042623          	sw	zero,-20(s0)
20410644:	fd042783          	lw	a5,-48(s0)
20410648:	fec42703          	lw	a4,-20(s0)
2041064c:	20f75a63          	ble	a5,a4,20410860 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2cc>
      auto& value = values[i];
20410650:	fec42783          	lw	a5,-20(s0)
20410654:	00379793          	slli	a5,a5,0x3
20410658:	fe842703          	lw	a4,-24(s0)
2041065c:	00f707b3          	add	a5,a4,a5
20410660:	fef42023          	sw	a5,-32(s0)
      switch (tcodes[i]) {
20410664:	fec42783          	lw	a5,-20(s0)
20410668:	00279793          	slli	a5,a5,0x2
2041066c:	fe442703          	lw	a4,-28(s0)
20410670:	00f707b3          	add	a5,a4,a5
20410674:	0007a783          	lw	a5,0(a5)
20410678:	00c00713          	li	a4,12
2041067c:	1cf76063          	bltu	a4,a5,2041083c <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2a8>
20410680:	00279713          	slli	a4,a5,0x2
20410684:	00011797          	auipc	a5,0x11
20410688:	c5878793          	addi	a5,a5,-936 # 204212dc <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x258>
2041068c:	00f707b3          	add	a5,a4,a5
20410690:	0007a703          	lw	a4,0(a5)
20410694:	00011797          	auipc	a5,0x11
20410698:	c4878793          	addi	a5,a5,-952 # 204212dc <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x258>
2041069c:	00f707b3          	add	a5,a4,a5
204106a0:	00078067          	jr	a5
        case kDLInt:
        case kDLUInt:
        case kDLFloat: {
          channel->template Read<int64_t>(&(value.v_int64));
204106a4:	fe042783          	lw	a5,-32(s0)
204106a8:	00078593          	mv	a1,a5
204106ac:	fa042503          	lw	a0,-96(s0)
204106b0:	780000ef          	jal	ra,20410e30 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIxEEvPT_>
          break;
204106b4:	19c0006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMDataType: {
          channel->Read(&(value.v_type));
204106b8:	fe042783          	lw	a5,-32(s0)
204106bc:	00078593          	mv	a1,a5
204106c0:	fa042503          	lw	a0,-96(s0)
204106c4:	c79ff0ef          	jal	ra,2041033c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
          int32_t padding = 0;
204106c8:	fc042623          	sw	zero,-52(s0)
          channel->template Read<int32_t>(&padding);
204106cc:	fcc40793          	addi	a5,s0,-52
204106d0:	00078593          	mv	a1,a5
204106d4:	fa042503          	lw	a0,-96(s0)
204106d8:	794000ef          	jal	ra,20410e6c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIlEEvPT_>
          break;
204106dc:	00000013          	nop
204106e0:	1700006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kDLDevice: {
          channel->Read(&(value.v_device));
204106e4:	fe042783          	lw	a5,-32(s0)
204106e8:	00078593          	mv	a1,a5
204106ec:	fa042503          	lw	a0,-96(s0)
204106f0:	bd5ff0ef          	jal	ra,204102c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
          break;
204106f4:	15c0006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        case kTVMPackedFuncHandle:
        case kTVMModuleHandle:
        case kTVMOpaqueHandle: {
          // always send handle in 64 bit.
          uint64_t handle;
          channel->Read(&handle);
204106f8:	fc040793          	addi	a5,s0,-64
204106fc:	00078593          	mv	a1,a5
20410700:	fa042503          	lw	a0,-96(s0)
20410704:	a8cfe0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
          value.v_handle = reinterpret_cast<void*>(handle);
20410708:	fc042783          	lw	a5,-64(s0)
2041070c:	fc442803          	lw	a6,-60(s0)
20410710:	00078713          	mv	a4,a5
20410714:	fe042783          	lw	a5,-32(s0)
20410718:	00e7a023          	sw	a4,0(a5)
          break;
2041071c:	00000013          	nop
20410720:	1300006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMNullptr: {
          value.v_handle = nullptr;
20410724:	fe042783          	lw	a5,-32(s0)
20410728:	0007a023          	sw	zero,0(a5)
          break;
2041072c:	1240006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMStr: {
          uint64_t len;
          channel->Read(&len);
20410730:	fb840793          	addi	a5,s0,-72
20410734:	00078593          	mv	a1,a5
20410738:	fa042503          	lw	a0,-96(s0)
2041073c:	a54fe0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
          char* str = channel->template ArenaAlloc<char>(len + 1);
20410740:	fb842783          	lw	a5,-72(s0)
20410744:	fbc42803          	lw	a6,-68(s0)
20410748:	00178793          	addi	a5,a5,1
2041074c:	00078593          	mv	a1,a5
20410750:	fa042503          	lw	a0,-96(s0)
20410754:	9f1ff0ef          	jal	ra,20410144 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>
20410758:	fca42a23          	sw	a0,-44(s0)
          str[len] = '\0';
2041075c:	fb842783          	lw	a5,-72(s0)
20410760:	fbc42803          	lw	a6,-68(s0)
20410764:	00078713          	mv	a4,a5
20410768:	fd442783          	lw	a5,-44(s0)
2041076c:	00e787b3          	add	a5,a5,a4
20410770:	00078023          	sb	zero,0(a5)
          channel->ReadArray(str, len);
20410774:	fb842783          	lw	a5,-72(s0)
20410778:	fbc42803          	lw	a6,-68(s0)
2041077c:	00078613          	mv	a2,a5
20410780:	fd442583          	lw	a1,-44(s0)
20410784:	fa042503          	lw	a0,-96(s0)
20410788:	a01ff0ef          	jal	ra,20410188 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>
          value.v_str = str;
2041078c:	fe042783          	lw	a5,-32(s0)
20410790:	fd442703          	lw	a4,-44(s0)
20410794:	00e7a023          	sw	a4,0(a5)
          break;
20410798:	00000013          	nop
2041079c:	0b40006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMBytes: {
          uint64_t len;
          channel->Read(&len);
204107a0:	fb040793          	addi	a5,s0,-80
204107a4:	00078593          	mv	a1,a5
204107a8:	fa042503          	lw	a0,-96(s0)
204107ac:	9e4fe0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
          TVMByteArray* arr = channel->template ArenaAlloc<TVMByteArray>(1);
204107b0:	00100593          	li	a1,1
204107b4:	fa042503          	lw	a0,-96(s0)
204107b8:	6f0000ef          	jal	ra,20410ea8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI12TVMByteArrayEEPT_i>
204107bc:	fca42e23          	sw	a0,-36(s0)
          char* data = channel->template ArenaAlloc<char>(len);
204107c0:	fb042783          	lw	a5,-80(s0)
204107c4:	fb442803          	lw	a6,-76(s0)
204107c8:	00078593          	mv	a1,a5
204107cc:	fa042503          	lw	a0,-96(s0)
204107d0:	975ff0ef          	jal	ra,20410144 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>
204107d4:	fca42c23          	sw	a0,-40(s0)
          arr->size = len;
204107d8:	fb042783          	lw	a5,-80(s0)
204107dc:	fb442803          	lw	a6,-76(s0)
204107e0:	00078713          	mv	a4,a5
204107e4:	fdc42783          	lw	a5,-36(s0)
204107e8:	00e7a223          	sw	a4,4(a5)
          arr->data = data;
204107ec:	fdc42783          	lw	a5,-36(s0)
204107f0:	fd842703          	lw	a4,-40(s0)
204107f4:	00e7a023          	sw	a4,0(a5)
          channel->ReadArray(data, len);
204107f8:	fb042783          	lw	a5,-80(s0)
204107fc:	fb442803          	lw	a6,-76(s0)
20410800:	00078613          	mv	a2,a5
20410804:	fd842583          	lw	a1,-40(s0)
20410808:	fa042503          	lw	a0,-96(s0)
2041080c:	97dff0ef          	jal	ra,20410188 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>
          value.v_handle = arr;
20410810:	fe042783          	lw	a5,-32(s0)
20410814:	fdc42703          	lw	a4,-36(s0)
20410818:	00e7a023          	sw	a4,0(a5)
          break;
2041081c:	00000013          	nop
20410820:	0300006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMDLTensorHandle: {
          value.v_handle = ReceiveDLTensor(channel);
20410824:	fa042503          	lw	a0,-96(s0)
20410828:	6c4000ef          	jal	ra,20410eec <_ZN3tvm7runtime12RPCReference15ReceiveDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEP8DLTensorT_>
2041082c:	00050713          	mv	a4,a0
20410830:	fe042783          	lw	a5,-32(s0)
20410834:	00e7a023          	sw	a4,0(a5)
          break;
20410838:	0180006f          	j	20410850 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        default: {
          channel->ThrowError(RPCServerStatus::kUnknownTypeCode);
2041083c:	00000613          	li	a2,0
20410840:	00500593          	li	a1,5
20410844:	fa042503          	lw	a0,-96(s0)
20410848:	b31fe0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
2041084c:	00000013          	nop
    for (int i = 0; i < num_args; ++i) {
20410850:	fec42783          	lw	a5,-20(s0)
20410854:	00178793          	addi	a5,a5,1
20410858:	fef42623          	sw	a5,-20(s0)
2041085c:	de9ff06f          	j	20410644 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0xb0>
        }
      }
    }
  }
20410860:	05c12083          	lw	ra,92(sp)
20410864:	05812403          	lw	s0,88(sp)
20410868:	06010113          	addi	sp,sp,96
2041086c:	00008067          	ret

20410870 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>:
  void ReturnHandle(void* handle) {
20410870:	fc010113          	addi	sp,sp,-64
20410874:	02112e23          	sw	ra,60(sp)
20410878:	02812c23          	sw	s0,56(sp)
2041087c:	04010413          	addi	s0,sp,64
20410880:	fca42623          	sw	a0,-52(s0)
20410884:	fcb42423          	sw	a1,-56(s0)
    int32_t num_args = 1;
20410888:	00100713          	li	a4,1
2041088c:	fee42623          	sw	a4,-20(s0)
    int32_t tcode = kTVMOpaqueHandle;
20410890:	00300713          	li	a4,3
20410894:	fee42423          	sw	a4,-24(s0)
    RPCCode code = RPCCode::kReturn;
20410898:	00400713          	li	a4,4
2041089c:	fee42223          	sw	a4,-28(s0)
    uint64_t encode_handle = reinterpret_cast<uint64_t>(handle);
204108a0:	fc842703          	lw	a4,-56(s0)
204108a4:	00070793          	mv	a5,a4
204108a8:	41f75713          	srai	a4,a4,0x1f
204108ac:	00070813          	mv	a6,a4
204108b0:	fcf42c23          	sw	a5,-40(s0)
204108b4:	fd042e23          	sw	a6,-36(s0)
    uint64_t packet_nbytes =
204108b8:	01400793          	li	a5,20
204108bc:	00000813          	li	a6,0
204108c0:	fcf42823          	sw	a5,-48(s0)
204108c4:	fd042a23          	sw	a6,-44(s0)
    io_->MessageStart(packet_nbytes);
204108c8:	fcc42783          	lw	a5,-52(s0)
204108cc:	0007a703          	lw	a4,0(a5)
204108d0:	fd042783          	lw	a5,-48(s0)
204108d4:	fd442803          	lw	a6,-44(s0)
204108d8:	00078593          	mv	a1,a5
204108dc:	00070513          	mv	a0,a4
204108e0:	e30fd0ef          	jal	ra,2040df10 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
    this->Write(packet_nbytes);
204108e4:	fd040793          	addi	a5,s0,-48
204108e8:	00078593          	mv	a1,a5
204108ec:	fcc42503          	lw	a0,-52(s0)
204108f0:	b55ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    this->Write(code);
204108f4:	fe440793          	addi	a5,s0,-28
204108f8:	00078593          	mv	a1,a5
204108fc:	fcc42503          	lw	a0,-52(s0)
20410900:	b7dff0ef          	jal	ra,2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    this->Write(num_args);
20410904:	fec40793          	addi	a5,s0,-20
20410908:	00078593          	mv	a1,a5
2041090c:	fcc42503          	lw	a0,-52(s0)
20410910:	284000ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    this->Write(tcode);
20410914:	fe840793          	addi	a5,s0,-24
20410918:	00078593          	mv	a1,a5
2041091c:	fcc42503          	lw	a0,-52(s0)
20410920:	274000ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    this->Write(encode_handle);
20410924:	fd840793          	addi	a5,s0,-40
20410928:	00078593          	mv	a1,a5
2041092c:	fcc42503          	lw	a0,-52(s0)
20410930:	b15ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    io_->MessageDone();
20410934:	fcc42783          	lw	a5,-52(s0)
20410938:	0007a783          	lw	a5,0(a5)
2041093c:	00078513          	mv	a0,a5
20410940:	e80fd0ef          	jal	ra,2040dfc0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
  }
20410944:	00000013          	nop
20410948:	03c12083          	lw	ra,60(sp)
2041094c:	03812403          	lw	s0,56(sp)
20410950:	04010113          	addi	sp,sp,64
20410954:	00008067          	ret

20410958 <_ZN3tvm7runtime12RPCReference15ReturnExceptionINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPKcPT_>:
   * \param msg The error message.
   * \param channel The communication channel handler.
   * \tparam TChannel The type of the communication channel.
   */
  template <typename TChannel>
  static void ReturnException(const char* msg, TChannel* channel) {
20410958:	fc010113          	addi	sp,sp,-64
2041095c:	02112e23          	sw	ra,60(sp)
20410960:	02812c23          	sw	s0,56(sp)
20410964:	04010413          	addi	s0,sp,64
20410968:	fca42623          	sw	a0,-52(s0)
2041096c:	fcb42423          	sw	a1,-56(s0)
    RPCCode code = RPCCode::kException;
20410970:	00500793          	li	a5,5
20410974:	fef42623          	sw	a5,-20(s0)
    int32_t num_args = 1;
20410978:	00100793          	li	a5,1
2041097c:	fef42423          	sw	a5,-24(s0)
    int32_t tcode = kTVMStr;
20410980:	00b00793          	li	a5,11
20410984:	fef42223          	sw	a5,-28(s0)
    uint64_t len = StrLength(msg);
20410988:	fcc42503          	lw	a0,-52(s0)
2041098c:	cc0fd0ef          	jal	ra,2040de4c <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>
20410990:	00050793          	mv	a5,a0
20410994:	00058813          	mv	a6,a1
20410998:	fcf42c23          	sw	a5,-40(s0)
2041099c:	fd042e23          	sw	a6,-36(s0)

    uint64_t packet_nbytes = sizeof(code) + sizeof(num_args) + sizeof(tcode) + sizeof(len) + len;
204109a0:	fd842783          	lw	a5,-40(s0)
204109a4:	fdc42803          	lw	a6,-36(s0)
204109a8:	01400593          	li	a1,20
204109ac:	00000613          	li	a2,0
204109b0:	00b786b3          	add	a3,a5,a1
204109b4:	00068513          	mv	a0,a3
204109b8:	00f53533          	sltu	a0,a0,a5
204109bc:	00c80733          	add	a4,a6,a2
204109c0:	00e507b3          	add	a5,a0,a4
204109c4:	00078713          	mv	a4,a5
204109c8:	00068793          	mv	a5,a3
204109cc:	00070813          	mv	a6,a4
204109d0:	fcf42823          	sw	a5,-48(s0)
204109d4:	fd042a23          	sw	a6,-44(s0)

    channel->MessageStart(packet_nbytes);
204109d8:	fd042783          	lw	a5,-48(s0)
204109dc:	fd442803          	lw	a6,-44(s0)
204109e0:	00078593          	mv	a1,a5
204109e4:	00080613          	mv	a2,a6
204109e8:	fc842503          	lw	a0,-56(s0)
204109ec:	600000ef          	jal	ra,20410fec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12MessageStartEy>
    channel->Write(packet_nbytes);
204109f0:	fd040793          	addi	a5,s0,-48
204109f4:	00078593          	mv	a1,a5
204109f8:	fc842503          	lw	a0,-56(s0)
204109fc:	a49ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->Write(code);
20410a00:	fec40793          	addi	a5,s0,-20
20410a04:	00078593          	mv	a1,a5
20410a08:	fc842503          	lw	a0,-56(s0)
20410a0c:	a71ff0ef          	jal	ra,2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    channel->Write(num_args);
20410a10:	fe840793          	addi	a5,s0,-24
20410a14:	00078593          	mv	a1,a5
20410a18:	fc842503          	lw	a0,-56(s0)
20410a1c:	178000ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    channel->Write(tcode);
20410a20:	fe440793          	addi	a5,s0,-28
20410a24:	00078593          	mv	a1,a5
20410a28:	fc842503          	lw	a0,-56(s0)
20410a2c:	168000ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    channel->Write(len);
20410a30:	fd840793          	addi	a5,s0,-40
20410a34:	00078593          	mv	a1,a5
20410a38:	fc842503          	lw	a0,-56(s0)
20410a3c:	a09ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->WriteArray(msg, len);
20410a40:	fd842783          	lw	a5,-40(s0)
20410a44:	fdc42803          	lw	a6,-36(s0)
20410a48:	00078613          	mv	a2,a5
20410a4c:	fcc42583          	lw	a1,-52(s0)
20410a50:	fc842503          	lw	a0,-56(s0)
20410a54:	5e0000ef          	jal	ra,20411034 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>
    channel->MessageDone();
20410a58:	fc842503          	lw	a0,-56(s0)
20410a5c:	614000ef          	jal	ra,20411070 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE11MessageDoneEv>
  }
20410a60:	00000013          	nop
20410a64:	03c12083          	lw	ra,60(sp)
20410a68:	03812403          	lw	s0,56(sp)
20410a6c:	04010113          	addi	sp,sp,64
20410a70:	00008067          	ret

20410a74 <_ZN3tvm7runtime12RPCReference15ReturnPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiiPT_>:
   * \param msg The error message.
   * \param channel The communication channel handler.
   * \tparam TChannel The type of the communication channel.
   */
  template <typename TChannel>
  static void ReturnPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args,
20410a74:	fd010113          	addi	sp,sp,-48
20410a78:	02112623          	sw	ra,44(sp)
20410a7c:	02812423          	sw	s0,40(sp)
20410a80:	03010413          	addi	s0,sp,48
20410a84:	fca42e23          	sw	a0,-36(s0)
20410a88:	fcb42c23          	sw	a1,-40(s0)
20410a8c:	fcc42a23          	sw	a2,-44(s0)
20410a90:	fcd42823          	sw	a3,-48(s0)
                              TChannel* channel) {
    RPCCode code = RPCCode::kReturn;
20410a94:	00400793          	li	a5,4
20410a98:	fef42623          	sw	a5,-20(s0)

    uint64_t packet_nbytes =
        sizeof(code) + PackedSeqGetNumBytes(arg_values, type_codes, num_args, false, channel);
20410a9c:	fd042703          	lw	a4,-48(s0)
20410aa0:	00000693          	li	a3,0
20410aa4:	fd442603          	lw	a2,-44(s0)
20410aa8:	fd842583          	lw	a1,-40(s0)
20410aac:	fdc42503          	lw	a0,-36(s0)
20410ab0:	5f8000ef          	jal	ra,204110a8 <_ZN3tvm7runtime12RPCReference20PackedSeqGetNumBytesINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEyPK8TVMValuePKiibPT_>
20410ab4:	00050693          	mv	a3,a0
20410ab8:	00058713          	mv	a4,a1
20410abc:	00400593          	li	a1,4
20410ac0:	00000613          	li	a2,0
20410ac4:	00b687b3          	add	a5,a3,a1
20410ac8:	00078513          	mv	a0,a5
20410acc:	00d53533          	sltu	a0,a0,a3
20410ad0:	00c70833          	add	a6,a4,a2
20410ad4:	01050733          	add	a4,a0,a6
20410ad8:	00070813          	mv	a6,a4
    uint64_t packet_nbytes =
20410adc:	fef42023          	sw	a5,-32(s0)
20410ae0:	ff042223          	sw	a6,-28(s0)

    channel->MessageStart(packet_nbytes);
20410ae4:	fe042783          	lw	a5,-32(s0)
20410ae8:	fe442803          	lw	a6,-28(s0)
20410aec:	00078593          	mv	a1,a5
20410af0:	00080613          	mv	a2,a6
20410af4:	fd042503          	lw	a0,-48(s0)
20410af8:	4f4000ef          	jal	ra,20410fec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12MessageStartEy>
    channel->Write(packet_nbytes);
20410afc:	fe040793          	addi	a5,s0,-32
20410b00:	00078593          	mv	a1,a5
20410b04:	fd042503          	lw	a0,-48(s0)
20410b08:	93dff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->Write(code);
20410b0c:	fec40793          	addi	a5,s0,-20
20410b10:	00078593          	mv	a1,a5
20410b14:	fd042503          	lw	a0,-48(s0)
20410b18:	965ff0ef          	jal	ra,2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    SendPackedSeq(arg_values, type_codes, num_args, false, channel);
20410b1c:	fd042703          	lw	a4,-48(s0)
20410b20:	00000693          	li	a3,0
20410b24:	fd442603          	lw	a2,-44(s0)
20410b28:	fd842583          	lw	a1,-40(s0)
20410b2c:	fdc42503          	lw	a0,-36(s0)
20410b30:	5f8000ef          	jal	ra,20411128 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_>
    channel->MessageDone();
20410b34:	fd042503          	lw	a0,-48(s0)
20410b38:	538000ef          	jal	ra,20411070 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE11MessageDoneEv>
  }
20410b3c:	00000013          	nop
20410b40:	02c12083          	lw	ra,44(sp)
20410b44:	02812403          	lw	s0,40(sp)
20410b48:	03010113          	addi	sp,sp,48
20410b4c:	00008067          	ret

20410b50 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IcEEPT_i>:
  T* allocate_(int count = 1) {
20410b50:	fe010113          	addi	sp,sp,-32
20410b54:	00112e23          	sw	ra,28(sp)
20410b58:	00812c23          	sw	s0,24(sp)
20410b5c:	02010413          	addi	s0,sp,32
20410b60:	fea42623          	sw	a0,-20(s0)
20410b64:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20410b68:	fe842783          	lw	a5,-24(s0)
20410b6c:	00100613          	li	a2,1
20410b70:	00078593          	mv	a1,a5
20410b74:	fec42503          	lw	a0,-20(s0)
20410b78:	09d000ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20410b7c:	00050793          	mv	a5,a0
  }
20410b80:	00078513          	mv	a0,a5
20410b84:	01c12083          	lw	ra,28(sp)
20410b88:	01812403          	lw	s0,24(sp)
20410b8c:	02010113          	addi	sp,sp,32
20410b90:	00008067          	ret

20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>:
  void Write(const T& data) {
20410b94:	fe010113          	addi	sp,sp,-32
20410b98:	00112e23          	sw	ra,28(sp)
20410b9c:	00812c23          	sw	s0,24(sp)
20410ba0:	02010413          	addi	s0,sp,32
20410ba4:	fea42623          	sw	a0,-20(s0)
20410ba8:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20410bac:	00400613          	li	a2,4
20410bb0:	fe842583          	lw	a1,-24(s0)
20410bb4:	fec42503          	lw	a0,-20(s0)
20410bb8:	0f4000ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20410bbc:	01c12083          	lw	ra,28(sp)
20410bc0:	01812403          	lw	s0,24(sp)
20410bc4:	02010113          	addi	sp,sp,32
20410bc8:	00008067          	ret

20410bcc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8DLTensorEEPT_i>:
  T* allocate_(int count = 1) {
20410bcc:	fe010113          	addi	sp,sp,-32
20410bd0:	00112e23          	sw	ra,28(sp)
20410bd4:	00812c23          	sw	s0,24(sp)
20410bd8:	02010413          	addi	s0,sp,32
20410bdc:	fea42623          	sw	a0,-20(s0)
20410be0:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20410be4:	fe842703          	lw	a4,-24(s0)
20410be8:	00070793          	mv	a5,a4
20410bec:	00279793          	slli	a5,a5,0x2
20410bf0:	00e787b3          	add	a5,a5,a4
20410bf4:	00379793          	slli	a5,a5,0x3
20410bf8:	00800613          	li	a2,8
20410bfc:	00078593          	mv	a1,a5
20410c00:	fec42503          	lw	a0,-20(s0)
20410c04:	011000ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20410c08:	00050793          	mv	a5,a0
  }
20410c0c:	00078513          	mv	a0,a5
20410c10:	01c12083          	lw	ra,28(sp)
20410c14:	01812403          	lw	s0,24(sp)
20410c18:	02010113          	addi	sp,sp,32
20410c1c:	00008067          	ret

20410c20 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IxEEPT_i>:
  T* allocate_(int count = 1) {
20410c20:	fe010113          	addi	sp,sp,-32
20410c24:	00112e23          	sw	ra,28(sp)
20410c28:	00812c23          	sw	s0,24(sp)
20410c2c:	02010413          	addi	s0,sp,32
20410c30:	fea42623          	sw	a0,-20(s0)
20410c34:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20410c38:	fe842783          	lw	a5,-24(s0)
20410c3c:	00379793          	slli	a5,a5,0x3
20410c40:	00800613          	li	a2,8
20410c44:	00078593          	mv	a1,a5
20410c48:	fec42503          	lw	a0,-20(s0)
20410c4c:	7c8000ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20410c50:	00050793          	mv	a5,a0
  }
20410c54:	00078513          	mv	a0,a5
20410c58:	01c12083          	lw	ra,28(sp)
20410c5c:	01812403          	lw	s0,24(sp)
20410c60:	02010113          	addi	sp,sp,32
20410c64:	00008067          	ret

20410c68 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IhEEPT_i>:
  T* allocate_(int count = 1) {
20410c68:	fe010113          	addi	sp,sp,-32
20410c6c:	00112e23          	sw	ra,28(sp)
20410c70:	00812c23          	sw	s0,24(sp)
20410c74:	02010413          	addi	s0,sp,32
20410c78:	fea42623          	sw	a0,-20(s0)
20410c7c:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20410c80:	fe842783          	lw	a5,-24(s0)
20410c84:	00100613          	li	a2,1
20410c88:	00078593          	mv	a1,a5
20410c8c:	fec42503          	lw	a0,-20(s0)
20410c90:	784000ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20410c94:	00050793          	mv	a5,a0
  }
20410c98:	00078513          	mv	a0,a5
20410c9c:	01c12083          	lw	ra,28(sp)
20410ca0:	01812403          	lw	s0,24(sp)
20410ca4:	02010113          	addi	sp,sp,32
20410ca8:	00008067          	ret

20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>:
  void WriteRawBytes(const void* data, size_t size) {
20410cac:	fd010113          	addi	sp,sp,-48
20410cb0:	02112623          	sw	ra,44(sp)
20410cb4:	02812423          	sw	s0,40(sp)
20410cb8:	03010413          	addi	s0,sp,48
20410cbc:	fca42e23          	sw	a0,-36(s0)
20410cc0:	fcb42c23          	sw	a1,-40(s0)
20410cc4:	fcc42a23          	sw	a2,-44(s0)
    const uint8_t* buf = reinterpret_cast<const uint8_t*>(data);
20410cc8:	fd842783          	lw	a5,-40(s0)
20410ccc:	fef42623          	sw	a5,-20(s0)
    size_t ndone = 0;
20410cd0:	fe042423          	sw	zero,-24(s0)
    while (ndone < size) {
20410cd4:	fe842703          	lw	a4,-24(s0)
20410cd8:	fd442783          	lw	a5,-44(s0)
20410cdc:	06f77a63          	bleu	a5,a4,20410d50 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0xa4>
      ssize_t ret = io_->PosixWrite(buf, size - ndone);
20410ce0:	fdc42783          	lw	a5,-36(s0)
20410ce4:	0007a683          	lw	a3,0(a5)
20410ce8:	fd442703          	lw	a4,-44(s0)
20410cec:	fe842783          	lw	a5,-24(s0)
20410cf0:	40f707b3          	sub	a5,a4,a5
20410cf4:	00078613          	mv	a2,a5
20410cf8:	fec42583          	lw	a1,-20(s0)
20410cfc:	00068513          	mv	a0,a3
20410d00:	a5cfd0ef          	jal	ra,2040df5c <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj>
20410d04:	fea42223          	sw	a0,-28(s0)
      if (ret == 0 || ret == -1) {
20410d08:	fe442783          	lw	a5,-28(s0)
20410d0c:	00078863          	beqz	a5,20410d1c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0x70>
20410d10:	fe442703          	lw	a4,-28(s0)
20410d14:	fff00793          	li	a5,-1
20410d18:	00f71a63          	bne	a4,a5,20410d2c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0x80>
        this->ThrowError(RPCServerStatus::kWriteError);
20410d1c:	00000613          	li	a2,0
20410d20:	00b00593          	li	a1,11
20410d24:	fdc42503          	lw	a0,-36(s0)
20410d28:	e50fe0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      buf += ret;
20410d2c:	fe442783          	lw	a5,-28(s0)
20410d30:	fec42703          	lw	a4,-20(s0)
20410d34:	00f707b3          	add	a5,a4,a5
20410d38:	fef42623          	sw	a5,-20(s0)
      ndone += ret;
20410d3c:	fe442783          	lw	a5,-28(s0)
20410d40:	fe842703          	lw	a4,-24(s0)
20410d44:	00f707b3          	add	a5,a4,a5
20410d48:	fef42423          	sw	a5,-24(s0)
    while (ndone < size) {
20410d4c:	f89ff06f          	j	20410cd4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0x28>
  }
20410d50:	00000013          	nop
20410d54:	02c12083          	lw	ra,44(sp)
20410d58:	02812403          	lw	s0,40(sp)
20410d5c:	03010113          	addi	sp,sp,48
20410d60:	00008067          	ret

20410d64 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8TVMValueEEPT_i>:
  T* ArenaAlloc(int count) {
20410d64:	fe010113          	addi	sp,sp,-32
20410d68:	00112e23          	sw	ra,28(sp)
20410d6c:	00812c23          	sw	s0,24(sp)
20410d70:	02010413          	addi	s0,sp,32
20410d74:	fea42623          	sw	a0,-20(s0)
20410d78:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410d7c:	fec42783          	lw	a5,-20(s0)
20410d80:	00478793          	addi	a5,a5,4
20410d84:	fe842583          	lw	a1,-24(s0)
20410d88:	00078513          	mv	a0,a5
20410d8c:	7e0000ef          	jal	ra,2041156c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8TVMValueEEPT_i>
20410d90:	00050793          	mv	a5,a0
  }
20410d94:	00078513          	mv	a0,a5
20410d98:	01c12083          	lw	ra,28(sp)
20410d9c:	01812403          	lw	s0,24(sp)
20410da0:	02010113          	addi	sp,sp,32
20410da4:	00008067          	ret

20410da8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIiEEPT_i>:
  T* ArenaAlloc(int count) {
20410da8:	fe010113          	addi	sp,sp,-32
20410dac:	00112e23          	sw	ra,28(sp)
20410db0:	00812c23          	sw	s0,24(sp)
20410db4:	02010413          	addi	s0,sp,32
20410db8:	fea42623          	sw	a0,-20(s0)
20410dbc:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410dc0:	fec42783          	lw	a5,-20(s0)
20410dc4:	00478793          	addi	a5,a5,4
20410dc8:	fe842583          	lw	a1,-24(s0)
20410dcc:	00078513          	mv	a0,a5
20410dd0:	7e4000ef          	jal	ra,204115b4 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IiEEPT_i>
20410dd4:	00050793          	mv	a5,a0
  }
20410dd8:	00078513          	mv	a0,a5
20410ddc:	01c12083          	lw	ra,28(sp)
20410de0:	01812403          	lw	s0,24(sp)
20410de4:	02010113          	addi	sp,sp,32
20410de8:	00008067          	ret

20410dec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIiEEvPT_j>:
  void ReadArray(T* data, size_t count) {
20410dec:	fe010113          	addi	sp,sp,-32
20410df0:	00112e23          	sw	ra,28(sp)
20410df4:	00812c23          	sw	s0,24(sp)
20410df8:	02010413          	addi	s0,sp,32
20410dfc:	fea42623          	sw	a0,-20(s0)
20410e00:	feb42423          	sw	a1,-24(s0)
20410e04:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
20410e08:	fe442783          	lw	a5,-28(s0)
20410e0c:	00279793          	slli	a5,a5,0x2
20410e10:	00078613          	mv	a2,a5
20410e14:	fe842583          	lw	a1,-24(s0)
20410e18:	fec42503          	lw	a0,-20(s0)
20410e1c:	eecfe0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410e20:	01c12083          	lw	ra,28(sp)
20410e24:	01812403          	lw	s0,24(sp)
20410e28:	02010113          	addi	sp,sp,32
20410e2c:	00008067          	ret

20410e30 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIxEEvPT_>:
  void Read(T* data) {
20410e30:	fe010113          	addi	sp,sp,-32
20410e34:	00112e23          	sw	ra,28(sp)
20410e38:	00812c23          	sw	s0,24(sp)
20410e3c:	02010413          	addi	s0,sp,32
20410e40:	fea42623          	sw	a0,-20(s0)
20410e44:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
20410e48:	00800613          	li	a2,8
20410e4c:	fe842583          	lw	a1,-24(s0)
20410e50:	fec42503          	lw	a0,-20(s0)
20410e54:	eb4fe0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410e58:	00000013          	nop
20410e5c:	01c12083          	lw	ra,28(sp)
20410e60:	01812403          	lw	s0,24(sp)
20410e64:	02010113          	addi	sp,sp,32
20410e68:	00008067          	ret

20410e6c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIlEEvPT_>:
  void Read(T* data) {
20410e6c:	fe010113          	addi	sp,sp,-32
20410e70:	00112e23          	sw	ra,28(sp)
20410e74:	00812c23          	sw	s0,24(sp)
20410e78:	02010413          	addi	s0,sp,32
20410e7c:	fea42623          	sw	a0,-20(s0)
20410e80:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
20410e84:	00400613          	li	a2,4
20410e88:	fe842583          	lw	a1,-24(s0)
20410e8c:	fec42503          	lw	a0,-20(s0)
20410e90:	e78fe0ef          	jal	ra,2040f508 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410e94:	00000013          	nop
20410e98:	01c12083          	lw	ra,28(sp)
20410e9c:	01812403          	lw	s0,24(sp)
20410ea0:	02010113          	addi	sp,sp,32
20410ea4:	00008067          	ret

20410ea8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI12TVMByteArrayEEPT_i>:
  T* ArenaAlloc(int count) {
20410ea8:	fe010113          	addi	sp,sp,-32
20410eac:	00112e23          	sw	ra,28(sp)
20410eb0:	00812c23          	sw	s0,24(sp)
20410eb4:	02010413          	addi	s0,sp,32
20410eb8:	fea42623          	sw	a0,-20(s0)
20410ebc:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410ec0:	fec42783          	lw	a5,-20(s0)
20410ec4:	00478793          	addi	a5,a5,4
20410ec8:	fe842583          	lw	a1,-24(s0)
20410ecc:	00078513          	mv	a0,a5
20410ed0:	72c000ef          	jal	ra,204115fc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I12TVMByteArrayEEPT_i>
20410ed4:	00050793          	mv	a5,a0
  }
20410ed8:	00078513          	mv	a0,a5
20410edc:	01c12083          	lw	ra,28(sp)
20410ee0:	01812403          	lw	s0,24(sp)
20410ee4:	02010113          	addi	sp,sp,32
20410ee8:	00008067          	ret

20410eec <_ZN3tvm7runtime12RPCReference15ReceiveDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEP8DLTensorT_>:
  static DLTensor* ReceiveDLTensor(TChannelPtr channel) {
20410eec:	fd010113          	addi	sp,sp,-48
20410ef0:	02112623          	sw	ra,44(sp)
20410ef4:	02812423          	sw	s0,40(sp)
20410ef8:	03010413          	addi	s0,sp,48
20410efc:	fca42e23          	sw	a0,-36(s0)
    channel->Read(&handle);
20410f00:	fe040793          	addi	a5,s0,-32
20410f04:	00078593          	mv	a1,a5
20410f08:	fdc42503          	lw	a0,-36(s0)
20410f0c:	a85fd0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    DLTensor* arr = channel->template ArenaAlloc<DLTensor>(1);
20410f10:	00100593          	li	a1,1
20410f14:	fdc42503          	lw	a0,-36(s0)
20410f18:	b68ff0ef          	jal	ra,20410280 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>
20410f1c:	fea42623          	sw	a0,-20(s0)
    DLTensor& tensor = *arr;
20410f20:	fec42783          	lw	a5,-20(s0)
20410f24:	fef42423          	sw	a5,-24(s0)
    tensor.data = reinterpret_cast<void*>(handle);
20410f28:	fe042783          	lw	a5,-32(s0)
20410f2c:	fe442803          	lw	a6,-28(s0)
20410f30:	00078713          	mv	a4,a5
20410f34:	fe842783          	lw	a5,-24(s0)
20410f38:	00e7a023          	sw	a4,0(a5)
    channel->Read(&(tensor.device));
20410f3c:	fe842783          	lw	a5,-24(s0)
20410f40:	00478793          	addi	a5,a5,4
20410f44:	00078593          	mv	a1,a5
20410f48:	fdc42503          	lw	a0,-36(s0)
20410f4c:	b78ff0ef          	jal	ra,204102c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
    channel->Read(&(tensor.ndim));
20410f50:	fe842783          	lw	a5,-24(s0)
20410f54:	00c78793          	addi	a5,a5,12
20410f58:	00078593          	mv	a1,a5
20410f5c:	fdc42503          	lw	a0,-36(s0)
20410f60:	ba0ff0ef          	jal	ra,20410300 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    channel->Read(&(tensor.dtype));
20410f64:	fe842783          	lw	a5,-24(s0)
20410f68:	01078793          	addi	a5,a5,16
20410f6c:	00078593          	mv	a1,a5
20410f70:	fdc42503          	lw	a0,-36(s0)
20410f74:	bc8ff0ef          	jal	ra,2041033c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
    tensor.shape = channel->template ArenaAlloc<int64_t>(tensor.ndim);
20410f78:	fe842783          	lw	a5,-24(s0)
20410f7c:	00c7a783          	lw	a5,12(a5)
20410f80:	00078593          	mv	a1,a5
20410f84:	fdc42503          	lw	a0,-36(s0)
20410f88:	bf0ff0ef          	jal	ra,20410378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>
20410f8c:	00050713          	mv	a4,a0
20410f90:	fe842783          	lw	a5,-24(s0)
20410f94:	00e7aa23          	sw	a4,20(a5)
    channel->ReadArray(tensor.shape, tensor.ndim);
20410f98:	fe842783          	lw	a5,-24(s0)
20410f9c:	0147a703          	lw	a4,20(a5)
20410fa0:	fe842783          	lw	a5,-24(s0)
20410fa4:	00c7a783          	lw	a5,12(a5)
20410fa8:	00078613          	mv	a2,a5
20410fac:	00070593          	mv	a1,a4
20410fb0:	fdc42503          	lw	a0,-36(s0)
20410fb4:	c08ff0ef          	jal	ra,204103bc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>
    tensor.strides = nullptr;
20410fb8:	fe842783          	lw	a5,-24(s0)
20410fbc:	0007ac23          	sw	zero,24(a5)
    channel->Read(&(tensor.byte_offset));
20410fc0:	fe842783          	lw	a5,-24(s0)
20410fc4:	02078793          	addi	a5,a5,32
20410fc8:	00078593          	mv	a1,a5
20410fcc:	fdc42503          	lw	a0,-36(s0)
20410fd0:	9c1fd0ef          	jal	ra,2040e990 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    return arr;
20410fd4:	fec42783          	lw	a5,-20(s0)
  }
20410fd8:	00078513          	mv	a0,a5
20410fdc:	02c12083          	lw	ra,44(sp)
20410fe0:	02812403          	lw	s0,40(sp)
20410fe4:	03010113          	addi	sp,sp,48
20410fe8:	00008067          	ret

20410fec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12MessageStartEy>:
  void MessageStart(uint64_t packet_nbytes) { io_->MessageStart(packet_nbytes); }
20410fec:	fe010113          	addi	sp,sp,-32
20410ff0:	00112e23          	sw	ra,28(sp)
20410ff4:	00812c23          	sw	s0,24(sp)
20410ff8:	02010413          	addi	s0,sp,32
20410ffc:	fea42623          	sw	a0,-20(s0)
20411000:	feb42023          	sw	a1,-32(s0)
20411004:	fec42223          	sw	a2,-28(s0)
20411008:	fec42783          	lw	a5,-20(s0)
2041100c:	0007a783          	lw	a5,0(a5)
20411010:	fe042703          	lw	a4,-32(s0)
20411014:	00070593          	mv	a1,a4
20411018:	00078513          	mv	a0,a5
2041101c:	ef5fc0ef          	jal	ra,2040df10 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
20411020:	00000013          	nop
20411024:	01c12083          	lw	ra,28(sp)
20411028:	01812403          	lw	s0,24(sp)
2041102c:	02010113          	addi	sp,sp,32
20411030:	00008067          	ret

20411034 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>:
  void WriteArray(T* data, size_t count) {
20411034:	fe010113          	addi	sp,sp,-32
20411038:	00112e23          	sw	ra,28(sp)
2041103c:	00812c23          	sw	s0,24(sp)
20411040:	02010413          	addi	s0,sp,32
20411044:	fea42623          	sw	a0,-20(s0)
20411048:	feb42423          	sw	a1,-24(s0)
2041104c:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
20411050:	fe442603          	lw	a2,-28(s0)
20411054:	fe842583          	lw	a1,-24(s0)
20411058:	fec42503          	lw	a0,-20(s0)
2041105c:	c51ff0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411060:	01c12083          	lw	ra,28(sp)
20411064:	01812403          	lw	s0,24(sp)
20411068:	02010113          	addi	sp,sp,32
2041106c:	00008067          	ret

20411070 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE11MessageDoneEv>:
  void MessageDone() { io_->MessageDone(); }
20411070:	fe010113          	addi	sp,sp,-32
20411074:	00112e23          	sw	ra,28(sp)
20411078:	00812c23          	sw	s0,24(sp)
2041107c:	02010413          	addi	s0,sp,32
20411080:	fea42623          	sw	a0,-20(s0)
20411084:	fec42783          	lw	a5,-20(s0)
20411088:	0007a783          	lw	a5,0(a5)
2041108c:	00078513          	mv	a0,a5
20411090:	f31fc0ef          	jal	ra,2040dfc0 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
20411094:	00000013          	nop
20411098:	01c12083          	lw	ra,28(sp)
2041109c:	01812403          	lw	s0,24(sp)
204110a0:	02010113          	addi	sp,sp,32
204110a4:	00008067          	ret

204110a8 <_ZN3tvm7runtime12RPCReference20PackedSeqGetNumBytesINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEyPK8TVMValuePKiibPT_>:
  static uint64_t PackedSeqGetNumBytes(const TVMValue* arg_values, const int* type_codes,
204110a8:	fc010113          	addi	sp,sp,-64
204110ac:	02112e23          	sw	ra,60(sp)
204110b0:	02812c23          	sw	s0,56(sp)
204110b4:	04010413          	addi	s0,sp,64
204110b8:	fca42e23          	sw	a0,-36(s0)
204110bc:	fcb42c23          	sw	a1,-40(s0)
204110c0:	fcc42a23          	sw	a2,-44(s0)
204110c4:	00068793          	mv	a5,a3
204110c8:	fce42623          	sw	a4,-52(s0)
204110cc:	fcf409a3          	sb	a5,-45(s0)
    PackedSeqNumBytesGetter<TChannel> getter(channel);
204110d0:	fe040793          	addi	a5,s0,-32
204110d4:	fcc42583          	lw	a1,-52(s0)
204110d8:	00078513          	mv	a0,a5
204110dc:	568000ef          	jal	ra,20411644 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEC1EPS8_>
    SendPackedSeq(arg_values, type_codes, num_args, client_mode, &getter);
204110e0:	fe040713          	addi	a4,s0,-32
204110e4:	fd344783          	lbu	a5,-45(s0)
204110e8:	00078693          	mv	a3,a5
204110ec:	fd442603          	lw	a2,-44(s0)
204110f0:	fd842583          	lw	a1,-40(s0)
204110f4:	fdc42503          	lw	a0,-36(s0)
204110f8:	590000ef          	jal	ra,20411688 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_>
    return getter.num_bytes();
204110fc:	fe040793          	addi	a5,s0,-32
20411100:	00078513          	mv	a0,a5
20411104:	065000ef          	jal	ra,20411968 <_ZNK3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE9num_bytesEv>
20411108:	00050793          	mv	a5,a0
2041110c:	00058813          	mv	a6,a1
  }
20411110:	00078513          	mv	a0,a5
20411114:	00080593          	mv	a1,a6
20411118:	03c12083          	lw	ra,60(sp)
2041111c:	03812403          	lw	s0,56(sp)
20411120:	04010113          	addi	sp,sp,64
20411124:	00008067          	ret

20411128 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_>:
  static void SendPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args,
20411128:	f7010113          	addi	sp,sp,-144
2041112c:	08112623          	sw	ra,140(sp)
20411130:	08812423          	sw	s0,136(sp)
20411134:	09212223          	sw	s2,132(sp)
20411138:	09312023          	sw	s3,128(sp)
2041113c:	07412e23          	sw	s4,124(sp)
20411140:	07512c23          	sw	s5,120(sp)
20411144:	07612a23          	sw	s6,116(sp)
20411148:	07712823          	sw	s7,112(sp)
2041114c:	09010413          	addi	s0,sp,144
20411150:	f8a42623          	sw	a0,-116(s0)
20411154:	f8b42423          	sw	a1,-120(s0)
20411158:	f8c42223          	sw	a2,-124(s0)
2041115c:	00068793          	mv	a5,a3
20411160:	f6e42e23          	sw	a4,-132(s0)
20411164:	f8f401a3          	sb	a5,-125(s0)
    channel->Write(num_args);
20411168:	f8440793          	addi	a5,s0,-124
2041116c:	00078593          	mv	a1,a5
20411170:	f7c42503          	lw	a0,-132(s0)
20411174:	025000ef          	jal	ra,20411998 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIiEEvRKT_>
    channel->WriteArray(type_codes, num_args);
20411178:	f8442783          	lw	a5,-124(s0)
2041117c:	00078613          	mv	a2,a5
20411180:	f8842583          	lw	a1,-120(s0)
20411184:	f7c42503          	lw	a0,-132(s0)
20411188:	049000ef          	jal	ra,204119d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKiEEvPT_j>
    for (int i = 0; i < num_args; ++i) {
2041118c:	fc042e23          	sw	zero,-36(s0)
20411190:	f8442783          	lw	a5,-124(s0)
20411194:	fdc42703          	lw	a4,-36(s0)
20411198:	24f75863          	ble	a5,a4,204113e8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2c0>
      int tcode = type_codes[i];
2041119c:	fdc42783          	lw	a5,-36(s0)
204111a0:	00279793          	slli	a5,a5,0x2
204111a4:	f8842703          	lw	a4,-120(s0)
204111a8:	00f707b3          	add	a5,a4,a5
204111ac:	0007a783          	lw	a5,0(a5)
204111b0:	fcf42c23          	sw	a5,-40(s0)
      TVMValue value = arg_values[i];
204111b4:	fdc42783          	lw	a5,-36(s0)
204111b8:	00379793          	slli	a5,a5,0x3
204111bc:	f8c42703          	lw	a4,-116(s0)
204111c0:	00f707b3          	add	a5,a4,a5
204111c4:	0047a803          	lw	a6,4(a5)
204111c8:	0007a783          	lw	a5,0(a5)
204111cc:	fcf42023          	sw	a5,-64(s0)
204111d0:	fd042223          	sw	a6,-60(s0)
      switch (tcode) {
204111d4:	fd842703          	lw	a4,-40(s0)
204111d8:	00d00793          	li	a5,13
204111dc:	1ee7e263          	bltu	a5,a4,204113c0 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x298>
204111e0:	fd842783          	lw	a5,-40(s0)
204111e4:	00279713          	slli	a4,a5,0x2
204111e8:	00010797          	auipc	a5,0x10
204111ec:	12878793          	addi	a5,a5,296 # 20421310 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x28c>
204111f0:	00f707b3          	add	a5,a4,a5
204111f4:	0007a703          	lw	a4,0(a5)
204111f8:	00010797          	auipc	a5,0x10
204111fc:	11878793          	addi	a5,a5,280 # 20421310 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x28c>
20411200:	00f707b3          	add	a5,a4,a5
20411204:	00078067          	jr	a5
          channel->template Write<int64_t>(value.v_int64);
20411208:	fc040793          	addi	a5,s0,-64
2041120c:	00078593          	mv	a1,a5
20411210:	f7c42503          	lw	a0,-132(s0)
20411214:	001000ef          	jal	ra,20411a14 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIxEEvRKT_>
          break;
20411218:	1c00006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->Write(value.v_type);
2041121c:	fc040793          	addi	a5,s0,-64
20411220:	00078593          	mv	a1,a5
20411224:	f7c42503          	lw	a0,-132(s0)
20411228:	025000ef          	jal	ra,20411a4c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI10DLDataTypeEEvRKT_>
          int32_t padding = 0;
2041122c:	fa042e23          	sw	zero,-68(s0)
          channel->template Write<int32_t>(padding);
20411230:	fbc40793          	addi	a5,s0,-68
20411234:	00078593          	mv	a1,a5
20411238:	f7c42503          	lw	a0,-132(s0)
2041123c:	959ff0ef          	jal	ra,20410b94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
          break;
20411240:	00000013          	nop
20411244:	1940006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->Write(value.v_device);
20411248:	fc040793          	addi	a5,s0,-64
2041124c:	00078593          	mv	a1,a5
20411250:	f7c42503          	lw	a0,-132(s0)
20411254:	031000ef          	jal	ra,20411a84 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI8DLDeviceEEvRKT_>
          break;
20411258:	1800006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          if (!client_mode) {
2041125c:	f8344783          	lbu	a5,-125(s0)
20411260:	0017c793          	xori	a5,a5,1
20411264:	0ff7f793          	andi	a5,a5,255
20411268:	00078a63          	beqz	a5,2041127c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x154>
            channel->ThrowError(RPCServerStatus::kInvalidTypeCodeObject);
2041126c:	00000613          	li	a2,0
20411270:	00100593          	li	a1,1
20411274:	f7c42503          	lw	a0,-132(s0)
20411278:	900fe0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
2041127c:	fc042783          	lw	a5,-64(s0)
20411280:	00078913          	mv	s2,a5
20411284:	41f7d793          	srai	a5,a5,0x1f
20411288:	00078993          	mv	s3,a5
2041128c:	fb242823          	sw	s2,-80(s0)
20411290:	fb342a23          	sw	s3,-76(s0)
          channel->Write(handle);
20411294:	fb040793          	addi	a5,s0,-80
20411298:	00078593          	mv	a1,a5
2041129c:	f7c42503          	lw	a0,-132(s0)
204112a0:	9a4ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          break;
204112a4:	00000013          	nop
204112a8:	1300006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
204112ac:	fc042783          	lw	a5,-64(s0)
204112b0:	00078a13          	mv	s4,a5
204112b4:	41f7d793          	srai	a5,a5,0x1f
204112b8:	00078a93          	mv	s5,a5
204112bc:	fb442423          	sw	s4,-88(s0)
204112c0:	fb542623          	sw	s5,-84(s0)
          channel->Write(handle);
204112c4:	fa840793          	addi	a5,s0,-88
204112c8:	00078593          	mv	a1,a5
204112cc:	f7c42503          	lw	a0,-132(s0)
204112d0:	974ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          break;
204112d4:	00000013          	nop
204112d8:	1000006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->ThrowError(RPCServerStatus::kInvalidTypeCodeNDArray);
204112dc:	00000613          	li	a2,0
204112e0:	00200593          	li	a1,2
204112e4:	f7c42503          	lw	a0,-132(s0)
204112e8:	890fe0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
204112ec:	0ec0006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          DLTensor* arr = static_cast<DLTensor*>(value.v_handle);
204112f0:	fc042783          	lw	a5,-64(s0)
204112f4:	fcf42623          	sw	a5,-52(s0)
          SendDLTensor(channel, arr);
204112f8:	fcc42583          	lw	a1,-52(s0)
204112fc:	f7c42503          	lw	a0,-132(s0)
20411300:	7bc000ef          	jal	ra,20411abc <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvT_P8DLTensor>
          break;
20411304:	0d40006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          const char* s = value.v_str;
20411308:	fc042783          	lw	a5,-64(s0)
2041130c:	fcf42823          	sw	a5,-48(s0)
          uint64_t len = StrLength(s);
20411310:	fd042503          	lw	a0,-48(s0)
20411314:	b39fc0ef          	jal	ra,2040de4c <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>
20411318:	00050793          	mv	a5,a0
2041131c:	00058813          	mv	a6,a1
20411320:	faf42023          	sw	a5,-96(s0)
20411324:	fb042223          	sw	a6,-92(s0)
          channel->Write(len);
20411328:	fa040793          	addi	a5,s0,-96
2041132c:	00078593          	mv	a1,a5
20411330:	f7c42503          	lw	a0,-132(s0)
20411334:	910ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          channel->WriteArray(s, len);
20411338:	fa042783          	lw	a5,-96(s0)
2041133c:	fa442803          	lw	a6,-92(s0)
20411340:	00078613          	mv	a2,a5
20411344:	fd042583          	lw	a1,-48(s0)
20411348:	f7c42503          	lw	a0,-132(s0)
2041134c:	ce9ff0ef          	jal	ra,20411034 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>
          break;
20411350:	00000013          	nop
20411354:	0840006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          TVMByteArray* bytes = static_cast<TVMByteArray*>(arg_values[i].v_handle);
20411358:	fdc42783          	lw	a5,-36(s0)
2041135c:	00379793          	slli	a5,a5,0x3
20411360:	f8c42703          	lw	a4,-116(s0)
20411364:	00f707b3          	add	a5,a4,a5
20411368:	0007a783          	lw	a5,0(a5)
2041136c:	fcf42a23          	sw	a5,-44(s0)
          uint64_t len = bytes->size;
20411370:	fd442783          	lw	a5,-44(s0)
20411374:	0047a783          	lw	a5,4(a5)
20411378:	00078b13          	mv	s6,a5
2041137c:	00000b93          	li	s7,0
20411380:	f9642c23          	sw	s6,-104(s0)
20411384:	f9742e23          	sw	s7,-100(s0)
          channel->Write(len);
20411388:	f9840793          	addi	a5,s0,-104
2041138c:	00078593          	mv	a1,a5
20411390:	f7c42503          	lw	a0,-132(s0)
20411394:	8b0ff0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          channel->WriteArray(bytes->data, len);
20411398:	fd442783          	lw	a5,-44(s0)
2041139c:	0007a703          	lw	a4,0(a5)
204113a0:	f9842783          	lw	a5,-104(s0)
204113a4:	f9c42803          	lw	a6,-100(s0)
204113a8:	00078613          	mv	a2,a5
204113ac:	00070593          	mv	a1,a4
204113b0:	f7c42503          	lw	a0,-132(s0)
204113b4:	c81ff0ef          	jal	ra,20411034 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>
          break;
204113b8:	00000013          	nop
204113bc:	01c0006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->ThrowError(RPCServerStatus::kUnknownTypeCode);
204113c0:	00000613          	li	a2,0
204113c4:	00500593          	li	a1,5
204113c8:	f7c42503          	lw	a0,-132(s0)
204113cc:	fadfd0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
204113d0:	0080006f          	j	204113d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          break;
204113d4:	00000013          	nop
    for (int i = 0; i < num_args; ++i) {
204113d8:	fdc42783          	lw	a5,-36(s0)
204113dc:	00178793          	addi	a5,a5,1
204113e0:	fcf42e23          	sw	a5,-36(s0)
204113e4:	dadff06f          	j	20411190 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x68>
  }
204113e8:	00000013          	nop
204113ec:	08c12083          	lw	ra,140(sp)
204113f0:	08812403          	lw	s0,136(sp)
204113f4:	08412903          	lw	s2,132(sp)
204113f8:	08012983          	lw	s3,128(sp)
204113fc:	07c12a03          	lw	s4,124(sp)
20411400:	07812a83          	lw	s5,120(sp)
20411404:	07412b03          	lw	s6,116(sp)
20411408:	07012b83          	lw	s7,112(sp)
2041140c:	09010113          	addi	sp,sp,144
20411410:	00008067          	ret

20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>:
  void* Alloc(size_t size, size_t align) {
20411414:	fd010113          	addi	sp,sp,-48
20411418:	02112623          	sw	ra,44(sp)
2041141c:	02812423          	sw	s0,40(sp)
20411420:	03010413          	addi	s0,sp,48
20411424:	fca42e23          	sw	a0,-36(s0)
20411428:	fcb42c23          	sw	a1,-40(s0)
2041142c:	fcc42a23          	sw	a2,-44(s0)
    size_t offset = UpperAlign(head_->offset, align);
20411430:	fdc42783          	lw	a5,-36(s0)
20411434:	0047a783          	lw	a5,4(a5)
20411438:	0087a783          	lw	a5,8(a5)
2041143c:	fd442603          	lw	a2,-44(s0)
20411440:	00078593          	mv	a1,a5
20411444:	fdc42503          	lw	a0,-36(s0)
20411448:	768000ef          	jal	ra,20411bb0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10UpperAlignEjj>
2041144c:	fea42423          	sw	a0,-24(s0)
    if (offset + size <= head_->size) {
20411450:	fe842703          	lw	a4,-24(s0)
20411454:	fd842783          	lw	a5,-40(s0)
20411458:	00f70733          	add	a4,a4,a5
2041145c:	fdc42783          	lw	a5,-36(s0)
20411460:	0047a783          	lw	a5,4(a5)
20411464:	0047a783          	lw	a5,4(a5)
20411468:	02e7e863          	bltu	a5,a4,20411498 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0x84>
      head_->offset = offset + size;
2041146c:	fdc42783          	lw	a5,-36(s0)
20411470:	0047a783          	lw	a5,4(a5)
20411474:	fe842683          	lw	a3,-24(s0)
20411478:	fd842703          	lw	a4,-40(s0)
2041147c:	00e68733          	add	a4,a3,a4
20411480:	00e7a423          	sw	a4,8(a5)
      return reinterpret_cast<char*>(head_) + offset;
20411484:	fdc42783          	lw	a5,-36(s0)
20411488:	0047a703          	lw	a4,4(a5)
2041148c:	fe842783          	lw	a5,-24(s0)
20411490:	00f707b3          	add	a5,a4,a5
20411494:	0c40006f          	j	20411558 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0x144>
      offset = UpperAlign(sizeof(ArenaPageHeader), align);
20411498:	fd442603          	lw	a2,-44(s0)
2041149c:	00c00593          	li	a1,12
204114a0:	fdc42503          	lw	a0,-36(s0)
204114a4:	70c000ef          	jal	ra,20411bb0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10UpperAlignEjj>
204114a8:	fea42423          	sw	a0,-24(s0)
      if (free_list_ != nullptr && offset + size <= free_list_->size) {
204114ac:	fdc42783          	lw	a5,-36(s0)
204114b0:	00c7a783          	lw	a5,12(a5)
204114b4:	04078263          	beqz	a5,204114f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0xe4>
204114b8:	fe842703          	lw	a4,-24(s0)
204114bc:	fd842783          	lw	a5,-40(s0)
204114c0:	00f70733          	add	a4,a4,a5
204114c4:	fdc42783          	lw	a5,-36(s0)
204114c8:	00c7a783          	lw	a5,12(a5)
204114cc:	0047a783          	lw	a5,4(a5)
204114d0:	02e7e463          	bltu	a5,a4,204114f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0xe4>
        new_head = free_list_;
204114d4:	fdc42783          	lw	a5,-36(s0)
204114d8:	00c7a783          	lw	a5,12(a5)
204114dc:	fef42623          	sw	a5,-20(s0)
        free_list_ = free_list_->next;
204114e0:	fdc42783          	lw	a5,-36(s0)
204114e4:	00c7a783          	lw	a5,12(a5)
204114e8:	0007a703          	lw	a4,0(a5)
204114ec:	fdc42783          	lw	a5,-36(s0)
204114f0:	00e7a623          	sw	a4,12(a5)
204114f4:	0240006f          	j	20411518 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0x104>
        new_head = alloc_.allocate(offset + size);
204114f8:	fdc42683          	lw	a3,-36(s0)
204114fc:	fe842703          	lw	a4,-24(s0)
20411500:	fd842783          	lw	a5,-40(s0)
20411504:	00f707b3          	add	a5,a4,a5
20411508:	00078593          	mv	a1,a5
2041150c:	00068513          	mv	a0,a3
20411510:	eadfd0ef          	jal	ra,2040f3bc <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj>
20411514:	fea42623          	sw	a0,-20(s0)
      new_head->next = head_;
20411518:	fdc42783          	lw	a5,-36(s0)
2041151c:	0047a703          	lw	a4,4(a5)
20411520:	fec42783          	lw	a5,-20(s0)
20411524:	00e7a023          	sw	a4,0(a5)
      new_head->offset = offset + size;
20411528:	fe842703          	lw	a4,-24(s0)
2041152c:	fd842783          	lw	a5,-40(s0)
20411530:	00f70733          	add	a4,a4,a5
20411534:	fec42783          	lw	a5,-20(s0)
20411538:	00e7a423          	sw	a4,8(a5)
      head_ = new_head;
2041153c:	fdc42783          	lw	a5,-36(s0)
20411540:	fec42703          	lw	a4,-20(s0)
20411544:	00e7a223          	sw	a4,4(a5)
      return reinterpret_cast<char*>(head_) + offset;
20411548:	fdc42783          	lw	a5,-36(s0)
2041154c:	0047a703          	lw	a4,4(a5)
20411550:	fe842783          	lw	a5,-24(s0)
20411554:	00f707b3          	add	a5,a4,a5
  }
20411558:	00078513          	mv	a0,a5
2041155c:	02c12083          	lw	ra,44(sp)
20411560:	02812403          	lw	s0,40(sp)
20411564:	03010113          	addi	sp,sp,48
20411568:	00008067          	ret

2041156c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8TVMValueEEPT_i>:
  T* allocate_(int count = 1) {
2041156c:	fe010113          	addi	sp,sp,-32
20411570:	00112e23          	sw	ra,28(sp)
20411574:	00812c23          	sw	s0,24(sp)
20411578:	02010413          	addi	s0,sp,32
2041157c:	fea42623          	sw	a0,-20(s0)
20411580:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20411584:	fe842783          	lw	a5,-24(s0)
20411588:	00379793          	slli	a5,a5,0x3
2041158c:	00800613          	li	a2,8
20411590:	00078593          	mv	a1,a5
20411594:	fec42503          	lw	a0,-20(s0)
20411598:	e7dff0ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
2041159c:	00050793          	mv	a5,a0
  }
204115a0:	00078513          	mv	a0,a5
204115a4:	01c12083          	lw	ra,28(sp)
204115a8:	01812403          	lw	s0,24(sp)
204115ac:	02010113          	addi	sp,sp,32
204115b0:	00008067          	ret

204115b4 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IiEEPT_i>:
  T* allocate_(int count = 1) {
204115b4:	fe010113          	addi	sp,sp,-32
204115b8:	00112e23          	sw	ra,28(sp)
204115bc:	00812c23          	sw	s0,24(sp)
204115c0:	02010413          	addi	s0,sp,32
204115c4:	fea42623          	sw	a0,-20(s0)
204115c8:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
204115cc:	fe842783          	lw	a5,-24(s0)
204115d0:	00279793          	slli	a5,a5,0x2
204115d4:	00400613          	li	a2,4
204115d8:	00078593          	mv	a1,a5
204115dc:	fec42503          	lw	a0,-20(s0)
204115e0:	e35ff0ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
204115e4:	00050793          	mv	a5,a0
  }
204115e8:	00078513          	mv	a0,a5
204115ec:	01c12083          	lw	ra,28(sp)
204115f0:	01812403          	lw	s0,24(sp)
204115f4:	02010113          	addi	sp,sp,32
204115f8:	00008067          	ret

204115fc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I12TVMByteArrayEEPT_i>:
  T* allocate_(int count = 1) {
204115fc:	fe010113          	addi	sp,sp,-32
20411600:	00112e23          	sw	ra,28(sp)
20411604:	00812c23          	sw	s0,24(sp)
20411608:	02010413          	addi	s0,sp,32
2041160c:	fea42623          	sw	a0,-20(s0)
20411610:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20411614:	fe842783          	lw	a5,-24(s0)
20411618:	00379793          	slli	a5,a5,0x3
2041161c:	00400613          	li	a2,4
20411620:	00078593          	mv	a1,a5
20411624:	fec42503          	lw	a0,-20(s0)
20411628:	dedff0ef          	jal	ra,20411414 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
2041162c:	00050793          	mv	a5,a0
  }
20411630:	00078513          	mv	a0,a5
20411634:	01c12083          	lw	ra,28(sp)
20411638:	01812403          	lw	s0,24(sp)
2041163c:	02010113          	addi	sp,sp,32
20411640:	00008067          	ret

20411644 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEC1EPS8_>:
    explicit PackedSeqNumBytesGetter(TChannel* channel) : channel_(channel) {}
20411644:	fe010113          	addi	sp,sp,-32
20411648:	00812e23          	sw	s0,28(sp)
2041164c:	02010413          	addi	s0,sp,32
20411650:	fea42623          	sw	a0,-20(s0)
20411654:	feb42423          	sw	a1,-24(s0)
20411658:	fec42783          	lw	a5,-20(s0)
2041165c:	fe842703          	lw	a4,-24(s0)
20411660:	00e7a023          	sw	a4,0(a5)
20411664:	fec42783          	lw	a5,-20(s0)
20411668:	00000693          	li	a3,0
2041166c:	00000713          	li	a4,0
20411670:	00d7a423          	sw	a3,8(a5)
20411674:	00e7a623          	sw	a4,12(a5)
20411678:	00000013          	nop
2041167c:	01c12403          	lw	s0,28(sp)
20411680:	02010113          	addi	sp,sp,32
20411684:	00008067          	ret

20411688 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_>:
  static void SendPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args,
20411688:	f7010113          	addi	sp,sp,-144
2041168c:	08112623          	sw	ra,140(sp)
20411690:	08812423          	sw	s0,136(sp)
20411694:	09212223          	sw	s2,132(sp)
20411698:	09312023          	sw	s3,128(sp)
2041169c:	07412e23          	sw	s4,124(sp)
204116a0:	07512c23          	sw	s5,120(sp)
204116a4:	07612a23          	sw	s6,116(sp)
204116a8:	07712823          	sw	s7,112(sp)
204116ac:	09010413          	addi	s0,sp,144
204116b0:	f8a42623          	sw	a0,-116(s0)
204116b4:	f8b42423          	sw	a1,-120(s0)
204116b8:	f8c42223          	sw	a2,-124(s0)
204116bc:	00068793          	mv	a5,a3
204116c0:	f6e42e23          	sw	a4,-132(s0)
204116c4:	f8f401a3          	sb	a5,-125(s0)
    channel->Write(num_args);
204116c8:	f8440793          	addi	a5,s0,-124
204116cc:	00078593          	mv	a1,a5
204116d0:	f7c42503          	lw	a0,-132(s0)
204116d4:	548000ef          	jal	ra,20411c1c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIiEEvRKT_>
    channel->WriteArray(type_codes, num_args);
204116d8:	f8442783          	lw	a5,-124(s0)
204116dc:	00078613          	mv	a2,a5
204116e0:	f8842583          	lw	a1,-120(s0)
204116e4:	f7c42503          	lw	a0,-132(s0)
204116e8:	598000ef          	jal	ra,20411c80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIiEEvPKT_j>
    for (int i = 0; i < num_args; ++i) {
204116ec:	fc042e23          	sw	zero,-36(s0)
204116f0:	f8442783          	lw	a5,-124(s0)
204116f4:	fdc42703          	lw	a4,-36(s0)
204116f8:	24f75263          	ble	a5,a4,2041193c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2b4>
      int tcode = type_codes[i];
204116fc:	fdc42783          	lw	a5,-36(s0)
20411700:	00279793          	slli	a5,a5,0x2
20411704:	f8842703          	lw	a4,-120(s0)
20411708:	00f707b3          	add	a5,a4,a5
2041170c:	0007a783          	lw	a5,0(a5)
20411710:	fcf42c23          	sw	a5,-40(s0)
      TVMValue value = arg_values[i];
20411714:	fdc42783          	lw	a5,-36(s0)
20411718:	00379793          	slli	a5,a5,0x3
2041171c:	f8c42703          	lw	a4,-116(s0)
20411720:	00f707b3          	add	a5,a4,a5
20411724:	0047a803          	lw	a6,4(a5)
20411728:	0007a783          	lw	a5,0(a5)
2041172c:	fcf42023          	sw	a5,-64(s0)
20411730:	fd042223          	sw	a6,-60(s0)
      switch (tcode) {
20411734:	fd842703          	lw	a4,-40(s0)
20411738:	00d00793          	li	a5,13
2041173c:	1ce7ee63          	bltu	a5,a4,20411918 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x290>
20411740:	fd842783          	lw	a5,-40(s0)
20411744:	00279713          	slli	a4,a5,0x2
20411748:	00010797          	auipc	a5,0x10
2041174c:	c0078793          	addi	a5,a5,-1024 # 20421348 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x2c4>
20411750:	00f707b3          	add	a5,a4,a5
20411754:	0007a703          	lw	a4,0(a5)
20411758:	00010797          	auipc	a5,0x10
2041175c:	bf078793          	addi	a5,a5,-1040 # 20421348 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x2c4>
20411760:	00f707b3          	add	a5,a4,a5
20411764:	00078067          	jr	a5
          channel->template Write<int64_t>(value.v_int64);
20411768:	fc040793          	addi	a5,s0,-64
2041176c:	00078593          	mv	a1,a5
20411770:	f7c42503          	lw	a0,-132(s0)
20411774:	57c000ef          	jal	ra,20411cf0 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIxEEvRKT_>
          break;
20411778:	1b40006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->Write(value.v_type);
2041177c:	fc040793          	addi	a5,s0,-64
20411780:	00078593          	mv	a1,a5
20411784:	f7c42503          	lw	a0,-132(s0)
20411788:	5cc000ef          	jal	ra,20411d54 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI10DLDataTypeEEvRKT_>
          int32_t padding = 0;
2041178c:	fa042e23          	sw	zero,-68(s0)
          channel->template Write<int32_t>(padding);
20411790:	fbc40793          	addi	a5,s0,-68
20411794:	00078593          	mv	a1,a5
20411798:	f7c42503          	lw	a0,-132(s0)
2041179c:	61c000ef          	jal	ra,20411db8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIlEEvRKT_>
          break;
204117a0:	00000013          	nop
204117a4:	1880006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->Write(value.v_device);
204117a8:	fc040793          	addi	a5,s0,-64
204117ac:	00078593          	mv	a1,a5
204117b0:	f7c42503          	lw	a0,-132(s0)
204117b4:	668000ef          	jal	ra,20411e1c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI8DLDeviceEEvRKT_>
          break;
204117b8:	1740006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          if (!client_mode) {
204117bc:	f8344783          	lbu	a5,-125(s0)
204117c0:	0017c793          	xori	a5,a5,1
204117c4:	0ff7f793          	andi	a5,a5,255
204117c8:	00078863          	beqz	a5,204117d8 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x150>
            channel->ThrowError(RPCServerStatus::kInvalidTypeCodeObject);
204117cc:	00100593          	li	a1,1
204117d0:	f7c42503          	lw	a0,-132(s0)
204117d4:	6ac000ef          	jal	ra,20411e80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
204117d8:	fc042783          	lw	a5,-64(s0)
204117dc:	00078913          	mv	s2,a5
204117e0:	41f7d793          	srai	a5,a5,0x1f
204117e4:	00078993          	mv	s3,a5
204117e8:	fb242823          	sw	s2,-80(s0)
204117ec:	fb342a23          	sw	s3,-76(s0)
          channel->Write(handle);
204117f0:	fb040793          	addi	a5,s0,-80
204117f4:	00078593          	mv	a1,a5
204117f8:	f7c42503          	lw	a0,-132(s0)
204117fc:	6c8000ef          	jal	ra,20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          break;
20411800:	00000013          	nop
20411804:	1280006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
20411808:	fc042783          	lw	a5,-64(s0)
2041180c:	00078a13          	mv	s4,a5
20411810:	41f7d793          	srai	a5,a5,0x1f
20411814:	00078a93          	mv	s5,a5
20411818:	fb442423          	sw	s4,-88(s0)
2041181c:	fb542623          	sw	s5,-84(s0)
          channel->Write(handle);
20411820:	fa840793          	addi	a5,s0,-88
20411824:	00078593          	mv	a1,a5
20411828:	f7c42503          	lw	a0,-132(s0)
2041182c:	698000ef          	jal	ra,20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          break;
20411830:	00000013          	nop
20411834:	0f80006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->ThrowError(RPCServerStatus::kInvalidTypeCodeNDArray);
20411838:	00200593          	li	a1,2
2041183c:	f7c42503          	lw	a0,-132(s0)
20411840:	640000ef          	jal	ra,20411e80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
          break;
20411844:	0e80006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          DLTensor* arr = static_cast<DLTensor*>(value.v_handle);
20411848:	fc042783          	lw	a5,-64(s0)
2041184c:	fcf42623          	sw	a5,-52(s0)
          SendDLTensor(channel, arr);
20411850:	fcc42583          	lw	a1,-52(s0)
20411854:	f7c42503          	lw	a0,-132(s0)
20411858:	6d0000ef          	jal	ra,20411f28 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvT_P8DLTensor>
          break;
2041185c:	0d00006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          const char* s = value.v_str;
20411860:	fc042783          	lw	a5,-64(s0)
20411864:	fcf42823          	sw	a5,-48(s0)
          uint64_t len = StrLength(s);
20411868:	fd042503          	lw	a0,-48(s0)
2041186c:	de0fc0ef          	jal	ra,2040de4c <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>
20411870:	00050793          	mv	a5,a0
20411874:	00058813          	mv	a6,a1
20411878:	faf42023          	sw	a5,-96(s0)
2041187c:	fb042223          	sw	a6,-92(s0)
          channel->Write(len);
20411880:	fa040793          	addi	a5,s0,-96
20411884:	00078593          	mv	a1,a5
20411888:	f7c42503          	lw	a0,-132(s0)
2041188c:	638000ef          	jal	ra,20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          channel->WriteArray(s, len);
20411890:	fa042783          	lw	a5,-96(s0)
20411894:	fa442803          	lw	a6,-92(s0)
20411898:	00078613          	mv	a2,a5
2041189c:	fd042583          	lw	a1,-48(s0)
204118a0:	f7c42503          	lw	a0,-132(s0)
204118a4:	774000ef          	jal	ra,20412018 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIcEEvPKT_j>
          break;
204118a8:	00000013          	nop
204118ac:	0800006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          TVMByteArray* bytes = static_cast<TVMByteArray*>(arg_values[i].v_handle);
204118b0:	fdc42783          	lw	a5,-36(s0)
204118b4:	00379793          	slli	a5,a5,0x3
204118b8:	f8c42703          	lw	a4,-116(s0)
204118bc:	00f707b3          	add	a5,a4,a5
204118c0:	0007a783          	lw	a5,0(a5)
204118c4:	fcf42a23          	sw	a5,-44(s0)
          uint64_t len = bytes->size;
204118c8:	fd442783          	lw	a5,-44(s0)
204118cc:	0047a783          	lw	a5,4(a5)
204118d0:	00078b13          	mv	s6,a5
204118d4:	00000b93          	li	s7,0
204118d8:	f9642c23          	sw	s6,-104(s0)
204118dc:	f9742e23          	sw	s7,-100(s0)
          channel->Write(len);
204118e0:	f9840793          	addi	a5,s0,-104
204118e4:	00078593          	mv	a1,a5
204118e8:	f7c42503          	lw	a0,-132(s0)
204118ec:	5d8000ef          	jal	ra,20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          channel->WriteArray(bytes->data, len);
204118f0:	fd442783          	lw	a5,-44(s0)
204118f4:	0007a703          	lw	a4,0(a5)
204118f8:	f9842783          	lw	a5,-104(s0)
204118fc:	f9c42803          	lw	a6,-100(s0)
20411900:	00078613          	mv	a2,a5
20411904:	00070593          	mv	a1,a4
20411908:	f7c42503          	lw	a0,-132(s0)
2041190c:	70c000ef          	jal	ra,20412018 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIcEEvPKT_j>
          break;
20411910:	00000013          	nop
20411914:	0180006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->ThrowError(RPCServerStatus::kUnknownTypeCode);
20411918:	00500593          	li	a1,5
2041191c:	f7c42503          	lw	a0,-132(s0)
20411920:	560000ef          	jal	ra,20411e80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
          break;
20411924:	0080006f          	j	2041192c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          break;
20411928:	00000013          	nop
    for (int i = 0; i < num_args; ++i) {
2041192c:	fdc42783          	lw	a5,-36(s0)
20411930:	00178793          	addi	a5,a5,1
20411934:	fcf42e23          	sw	a5,-36(s0)
20411938:	db9ff06f          	j	204116f0 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x68>
  }
2041193c:	00000013          	nop
20411940:	08c12083          	lw	ra,140(sp)
20411944:	08812403          	lw	s0,136(sp)
20411948:	08412903          	lw	s2,132(sp)
2041194c:	08012983          	lw	s3,128(sp)
20411950:	07c12a03          	lw	s4,124(sp)
20411954:	07812a83          	lw	s5,120(sp)
20411958:	07412b03          	lw	s6,116(sp)
2041195c:	07012b83          	lw	s7,112(sp)
20411960:	09010113          	addi	sp,sp,144
20411964:	00008067          	ret

20411968 <_ZNK3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE9num_bytesEv>:
    uint64_t num_bytes() const { return num_bytes_; }
20411968:	fe010113          	addi	sp,sp,-32
2041196c:	00812e23          	sw	s0,28(sp)
20411970:	02010413          	addi	s0,sp,32
20411974:	fea42623          	sw	a0,-20(s0)
20411978:	fec42783          	lw	a5,-20(s0)
2041197c:	00c7a803          	lw	a6,12(a5)
20411980:	0087a783          	lw	a5,8(a5)
20411984:	00078513          	mv	a0,a5
20411988:	00080593          	mv	a1,a6
2041198c:	01c12403          	lw	s0,28(sp)
20411990:	02010113          	addi	sp,sp,32
20411994:	00008067          	ret

20411998 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIiEEvRKT_>:
  void Write(const T& data) {
20411998:	fe010113          	addi	sp,sp,-32
2041199c:	00112e23          	sw	ra,28(sp)
204119a0:	00812c23          	sw	s0,24(sp)
204119a4:	02010413          	addi	s0,sp,32
204119a8:	fea42623          	sw	a0,-20(s0)
204119ac:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
204119b0:	00400613          	li	a2,4
204119b4:	fe842583          	lw	a1,-24(s0)
204119b8:	fec42503          	lw	a0,-20(s0)
204119bc:	af0ff0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
204119c0:	01c12083          	lw	ra,28(sp)
204119c4:	01812403          	lw	s0,24(sp)
204119c8:	02010113          	addi	sp,sp,32
204119cc:	00008067          	ret

204119d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKiEEvPT_j>:
  void WriteArray(T* data, size_t count) {
204119d0:	fe010113          	addi	sp,sp,-32
204119d4:	00112e23          	sw	ra,28(sp)
204119d8:	00812c23          	sw	s0,24(sp)
204119dc:	02010413          	addi	s0,sp,32
204119e0:	fea42623          	sw	a0,-20(s0)
204119e4:	feb42423          	sw	a1,-24(s0)
204119e8:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
204119ec:	fe442783          	lw	a5,-28(s0)
204119f0:	00279793          	slli	a5,a5,0x2
204119f4:	00078613          	mv	a2,a5
204119f8:	fe842583          	lw	a1,-24(s0)
204119fc:	fec42503          	lw	a0,-20(s0)
20411a00:	aacff0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411a04:	01c12083          	lw	ra,28(sp)
20411a08:	01812403          	lw	s0,24(sp)
20411a0c:	02010113          	addi	sp,sp,32
20411a10:	00008067          	ret

20411a14 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIxEEvRKT_>:
  void Write(const T& data) {
20411a14:	fe010113          	addi	sp,sp,-32
20411a18:	00112e23          	sw	ra,28(sp)
20411a1c:	00812c23          	sw	s0,24(sp)
20411a20:	02010413          	addi	s0,sp,32
20411a24:	fea42623          	sw	a0,-20(s0)
20411a28:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411a2c:	00800613          	li	a2,8
20411a30:	fe842583          	lw	a1,-24(s0)
20411a34:	fec42503          	lw	a0,-20(s0)
20411a38:	a74ff0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411a3c:	01c12083          	lw	ra,28(sp)
20411a40:	01812403          	lw	s0,24(sp)
20411a44:	02010113          	addi	sp,sp,32
20411a48:	00008067          	ret

20411a4c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI10DLDataTypeEEvRKT_>:
  void Write(const T& data) {
20411a4c:	fe010113          	addi	sp,sp,-32
20411a50:	00112e23          	sw	ra,28(sp)
20411a54:	00812c23          	sw	s0,24(sp)
20411a58:	02010413          	addi	s0,sp,32
20411a5c:	fea42623          	sw	a0,-20(s0)
20411a60:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411a64:	00400613          	li	a2,4
20411a68:	fe842583          	lw	a1,-24(s0)
20411a6c:	fec42503          	lw	a0,-20(s0)
20411a70:	a3cff0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411a74:	01c12083          	lw	ra,28(sp)
20411a78:	01812403          	lw	s0,24(sp)
20411a7c:	02010113          	addi	sp,sp,32
20411a80:	00008067          	ret

20411a84 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI8DLDeviceEEvRKT_>:
  void Write(const T& data) {
20411a84:	fe010113          	addi	sp,sp,-32
20411a88:	00112e23          	sw	ra,28(sp)
20411a8c:	00812c23          	sw	s0,24(sp)
20411a90:	02010413          	addi	s0,sp,32
20411a94:	fea42623          	sw	a0,-20(s0)
20411a98:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411a9c:	00800613          	li	a2,8
20411aa0:	fe842583          	lw	a1,-24(s0)
20411aa4:	fec42503          	lw	a0,-20(s0)
20411aa8:	a04ff0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411aac:	01c12083          	lw	ra,28(sp)
20411ab0:	01812403          	lw	s0,24(sp)
20411ab4:	02010113          	addi	sp,sp,32
20411ab8:	00008067          	ret

20411abc <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvT_P8DLTensor>:
  static void SendDLTensor(TChannelPtr channel, DLTensor* arr) {
20411abc:	fd010113          	addi	sp,sp,-48
20411ac0:	02112623          	sw	ra,44(sp)
20411ac4:	02812423          	sw	s0,40(sp)
20411ac8:	03010413          	addi	s0,sp,48
20411acc:	fca42e23          	sw	a0,-36(s0)
20411ad0:	fcb42c23          	sw	a1,-40(s0)
    dev = arr->device;
20411ad4:	fd842783          	lw	a5,-40(s0)
20411ad8:	0087a803          	lw	a6,8(a5)
20411adc:	0047a783          	lw	a5,4(a5)
20411ae0:	fef42423          	sw	a5,-24(s0)
20411ae4:	ff042623          	sw	a6,-20(s0)
    data = reinterpret_cast<uint64_t>(arr->data);
20411ae8:	fd842783          	lw	a5,-40(s0)
20411aec:	0007a783          	lw	a5,0(a5)
20411af0:	00078693          	mv	a3,a5
20411af4:	41f7d793          	srai	a5,a5,0x1f
20411af8:	00078713          	mv	a4,a5
20411afc:	fed42023          	sw	a3,-32(s0)
20411b00:	fee42223          	sw	a4,-28(s0)
    channel->Write(data);
20411b04:	fe040793          	addi	a5,s0,-32
20411b08:	00078593          	mv	a1,a5
20411b0c:	fdc42503          	lw	a0,-36(s0)
20411b10:	935fe0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->Write(dev);
20411b14:	fe840793          	addi	a5,s0,-24
20411b18:	00078593          	mv	a1,a5
20411b1c:	fdc42503          	lw	a0,-36(s0)
20411b20:	f65ff0ef          	jal	ra,20411a84 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI8DLDeviceEEvRKT_>
    channel->Write(arr->ndim);
20411b24:	fd842783          	lw	a5,-40(s0)
20411b28:	00c78793          	addi	a5,a5,12
20411b2c:	00078593          	mv	a1,a5
20411b30:	fdc42503          	lw	a0,-36(s0)
20411b34:	e65ff0ef          	jal	ra,20411998 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIiEEvRKT_>
    channel->Write(arr->dtype);
20411b38:	fd842783          	lw	a5,-40(s0)
20411b3c:	01078793          	addi	a5,a5,16
20411b40:	00078593          	mv	a1,a5
20411b44:	fdc42503          	lw	a0,-36(s0)
20411b48:	f05ff0ef          	jal	ra,20411a4c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI10DLDataTypeEEvRKT_>
    channel->WriteArray(arr->shape, arr->ndim);
20411b4c:	fd842783          	lw	a5,-40(s0)
20411b50:	0147a703          	lw	a4,20(a5)
20411b54:	fd842783          	lw	a5,-40(s0)
20411b58:	00c7a783          	lw	a5,12(a5)
20411b5c:	00078613          	mv	a2,a5
20411b60:	00070593          	mv	a1,a4
20411b64:	fdc42503          	lw	a0,-36(s0)
20411b68:	51c000ef          	jal	ra,20412084 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIxEEvPT_j>
    if (arr->strides != nullptr) {
20411b6c:	fd842783          	lw	a5,-40(s0)
20411b70:	0187a783          	lw	a5,24(a5)
20411b74:	00078a63          	beqz	a5,20411b88 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvT_P8DLTensor+0xcc>
      channel->ThrowError(RPCServerStatus::kInvalidDLTensorFieldStride);
20411b78:	00000613          	li	a2,0
20411b7c:	00300593          	li	a1,3
20411b80:	fdc42503          	lw	a0,-36(s0)
20411b84:	ff4fd0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    channel->Write(arr->byte_offset);
20411b88:	fd842783          	lw	a5,-40(s0)
20411b8c:	02078793          	addi	a5,a5,32
20411b90:	00078593          	mv	a1,a5
20411b94:	fdc42503          	lw	a0,-36(s0)
20411b98:	8adfe0ef          	jal	ra,20410444 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    return;
20411b9c:	00000013          	nop
  }
20411ba0:	02c12083          	lw	ra,44(sp)
20411ba4:	02812403          	lw	s0,40(sp)
20411ba8:	03010113          	addi	sp,sp,48
20411bac:	00008067          	ret

20411bb0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10UpperAlignEjj>:
  size_t UpperAlign(size_t offset, size_t align) {
20411bb0:	fe010113          	addi	sp,sp,-32
20411bb4:	00112e23          	sw	ra,28(sp)
20411bb8:	00812c23          	sw	s0,24(sp)
20411bbc:	02010413          	addi	s0,sp,32
20411bc0:	fea42623          	sw	a0,-20(s0)
20411bc4:	feb42423          	sw	a1,-24(s0)
20411bc8:	fec42223          	sw	a2,-28(s0)
    return offset + (align - (offset % align)) % align;
20411bcc:	fe842783          	lw	a5,-24(s0)
20411bd0:	fe442583          	lw	a1,-28(s0)
20411bd4:	00078513          	mv	a0,a5
20411bd8:	43d0d0ef          	jal	ra,2041f814 <__umodsi3>
20411bdc:	00050793          	mv	a5,a0
20411be0:	00078713          	mv	a4,a5
20411be4:	fe442783          	lw	a5,-28(s0)
20411be8:	40e787b3          	sub	a5,a5,a4
20411bec:	fe442583          	lw	a1,-28(s0)
20411bf0:	00078513          	mv	a0,a5
20411bf4:	4210d0ef          	jal	ra,2041f814 <__umodsi3>
20411bf8:	00050793          	mv	a5,a0
20411bfc:	00078713          	mv	a4,a5
20411c00:	fe842783          	lw	a5,-24(s0)
20411c04:	00f707b3          	add	a5,a4,a5
  }
20411c08:	00078513          	mv	a0,a5
20411c0c:	01c12083          	lw	ra,28(sp)
20411c10:	01812403          	lw	s0,24(sp)
20411c14:	02010113          	addi	sp,sp,32
20411c18:	00008067          	ret

20411c1c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIiEEvRKT_>:
    void Write(const T& value) {
20411c1c:	fe010113          	addi	sp,sp,-32
20411c20:	00812e23          	sw	s0,28(sp)
20411c24:	02010413          	addi	s0,sp,32
20411c28:	fea42623          	sw	a0,-20(s0)
20411c2c:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20411c30:	fec42783          	lw	a5,-20(s0)
20411c34:	00c7a803          	lw	a6,12(a5)
20411c38:	0087a783          	lw	a5,8(a5)
20411c3c:	00400593          	li	a1,4
20411c40:	00000613          	li	a2,0
20411c44:	00b786b3          	add	a3,a5,a1
20411c48:	00068513          	mv	a0,a3
20411c4c:	00f53533          	sltu	a0,a0,a5
20411c50:	00c80733          	add	a4,a6,a2
20411c54:	00e507b3          	add	a5,a0,a4
20411c58:	00078713          	mv	a4,a5
20411c5c:	00068793          	mv	a5,a3
20411c60:	00070813          	mv	a6,a4
20411c64:	fec42703          	lw	a4,-20(s0)
20411c68:	00f72423          	sw	a5,8(a4)
20411c6c:	01072623          	sw	a6,12(a4)
    }
20411c70:	00000013          	nop
20411c74:	01c12403          	lw	s0,28(sp)
20411c78:	02010113          	addi	sp,sp,32
20411c7c:	00008067          	ret

20411c80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIiEEvPKT_j>:
    void WriteArray(const T* value, size_t num) {
20411c80:	fe010113          	addi	sp,sp,-32
20411c84:	00812e23          	sw	s0,28(sp)
20411c88:	02010413          	addi	s0,sp,32
20411c8c:	fea42623          	sw	a0,-20(s0)
20411c90:	feb42423          	sw	a1,-24(s0)
20411c94:	fec42223          	sw	a2,-28(s0)
      num_bytes_ += sizeof(T) * num;
20411c98:	fec42783          	lw	a5,-20(s0)
20411c9c:	00c7a803          	lw	a6,12(a5)
20411ca0:	0087a783          	lw	a5,8(a5)
20411ca4:	fe442703          	lw	a4,-28(s0)
20411ca8:	00271713          	slli	a4,a4,0x2
20411cac:	00070313          	mv	t1,a4
20411cb0:	00000393          	li	t2,0
20411cb4:	006786b3          	add	a3,a5,t1
20411cb8:	00068613          	mv	a2,a3
20411cbc:	00f63633          	sltu	a2,a2,a5
20411cc0:	00780733          	add	a4,a6,t2
20411cc4:	00e607b3          	add	a5,a2,a4
20411cc8:	00078713          	mv	a4,a5
20411ccc:	00068793          	mv	a5,a3
20411cd0:	00070813          	mv	a6,a4
20411cd4:	fec42703          	lw	a4,-20(s0)
20411cd8:	00f72423          	sw	a5,8(a4)
20411cdc:	01072623          	sw	a6,12(a4)
    }
20411ce0:	00000013          	nop
20411ce4:	01c12403          	lw	s0,28(sp)
20411ce8:	02010113          	addi	sp,sp,32
20411cec:	00008067          	ret

20411cf0 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIxEEvRKT_>:
    void Write(const T& value) {
20411cf0:	fe010113          	addi	sp,sp,-32
20411cf4:	00812e23          	sw	s0,28(sp)
20411cf8:	02010413          	addi	s0,sp,32
20411cfc:	fea42623          	sw	a0,-20(s0)
20411d00:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20411d04:	fec42783          	lw	a5,-20(s0)
20411d08:	00c7a803          	lw	a6,12(a5)
20411d0c:	0087a783          	lw	a5,8(a5)
20411d10:	00800593          	li	a1,8
20411d14:	00000613          	li	a2,0
20411d18:	00b786b3          	add	a3,a5,a1
20411d1c:	00068513          	mv	a0,a3
20411d20:	00f53533          	sltu	a0,a0,a5
20411d24:	00c80733          	add	a4,a6,a2
20411d28:	00e507b3          	add	a5,a0,a4
20411d2c:	00078713          	mv	a4,a5
20411d30:	00068793          	mv	a5,a3
20411d34:	00070813          	mv	a6,a4
20411d38:	fec42703          	lw	a4,-20(s0)
20411d3c:	00f72423          	sw	a5,8(a4)
20411d40:	01072623          	sw	a6,12(a4)
    }
20411d44:	00000013          	nop
20411d48:	01c12403          	lw	s0,28(sp)
20411d4c:	02010113          	addi	sp,sp,32
20411d50:	00008067          	ret

20411d54 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI10DLDataTypeEEvRKT_>:
    void Write(const T& value) {
20411d54:	fe010113          	addi	sp,sp,-32
20411d58:	00812e23          	sw	s0,28(sp)
20411d5c:	02010413          	addi	s0,sp,32
20411d60:	fea42623          	sw	a0,-20(s0)
20411d64:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20411d68:	fec42783          	lw	a5,-20(s0)
20411d6c:	00c7a803          	lw	a6,12(a5)
20411d70:	0087a783          	lw	a5,8(a5)
20411d74:	00400593          	li	a1,4
20411d78:	00000613          	li	a2,0
20411d7c:	00b786b3          	add	a3,a5,a1
20411d80:	00068513          	mv	a0,a3
20411d84:	00f53533          	sltu	a0,a0,a5
20411d88:	00c80733          	add	a4,a6,a2
20411d8c:	00e507b3          	add	a5,a0,a4
20411d90:	00078713          	mv	a4,a5
20411d94:	00068793          	mv	a5,a3
20411d98:	00070813          	mv	a6,a4
20411d9c:	fec42703          	lw	a4,-20(s0)
20411da0:	00f72423          	sw	a5,8(a4)
20411da4:	01072623          	sw	a6,12(a4)
    }
20411da8:	00000013          	nop
20411dac:	01c12403          	lw	s0,28(sp)
20411db0:	02010113          	addi	sp,sp,32
20411db4:	00008067          	ret

20411db8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIlEEvRKT_>:
    void Write(const T& value) {
20411db8:	fe010113          	addi	sp,sp,-32
20411dbc:	00812e23          	sw	s0,28(sp)
20411dc0:	02010413          	addi	s0,sp,32
20411dc4:	fea42623          	sw	a0,-20(s0)
20411dc8:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20411dcc:	fec42783          	lw	a5,-20(s0)
20411dd0:	00c7a803          	lw	a6,12(a5)
20411dd4:	0087a783          	lw	a5,8(a5)
20411dd8:	00400593          	li	a1,4
20411ddc:	00000613          	li	a2,0
20411de0:	00b786b3          	add	a3,a5,a1
20411de4:	00068513          	mv	a0,a3
20411de8:	00f53533          	sltu	a0,a0,a5
20411dec:	00c80733          	add	a4,a6,a2
20411df0:	00e507b3          	add	a5,a0,a4
20411df4:	00078713          	mv	a4,a5
20411df8:	00068793          	mv	a5,a3
20411dfc:	00070813          	mv	a6,a4
20411e00:	fec42703          	lw	a4,-20(s0)
20411e04:	00f72423          	sw	a5,8(a4)
20411e08:	01072623          	sw	a6,12(a4)
    }
20411e0c:	00000013          	nop
20411e10:	01c12403          	lw	s0,28(sp)
20411e14:	02010113          	addi	sp,sp,32
20411e18:	00008067          	ret

20411e1c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI8DLDeviceEEvRKT_>:
    void Write(const T& value) {
20411e1c:	fe010113          	addi	sp,sp,-32
20411e20:	00812e23          	sw	s0,28(sp)
20411e24:	02010413          	addi	s0,sp,32
20411e28:	fea42623          	sw	a0,-20(s0)
20411e2c:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20411e30:	fec42783          	lw	a5,-20(s0)
20411e34:	00c7a803          	lw	a6,12(a5)
20411e38:	0087a783          	lw	a5,8(a5)
20411e3c:	00800593          	li	a1,8
20411e40:	00000613          	li	a2,0
20411e44:	00b786b3          	add	a3,a5,a1
20411e48:	00068513          	mv	a0,a3
20411e4c:	00f53533          	sltu	a0,a0,a5
20411e50:	00c80733          	add	a4,a6,a2
20411e54:	00e507b3          	add	a5,a0,a4
20411e58:	00078713          	mv	a4,a5
20411e5c:	00068793          	mv	a5,a3
20411e60:	00070813          	mv	a6,a4
20411e64:	fec42703          	lw	a4,-20(s0)
20411e68:	00f72423          	sw	a5,8(a4)
20411e6c:	01072623          	sw	a6,12(a4)
    }
20411e70:	00000013          	nop
20411e74:	01c12403          	lw	s0,28(sp)
20411e78:	02010113          	addi	sp,sp,32
20411e7c:	00008067          	ret

20411e80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>:
    void ThrowError(RPCServerStatus status) { channel_->ThrowError(status); }
20411e80:	fe010113          	addi	sp,sp,-32
20411e84:	00112e23          	sw	ra,28(sp)
20411e88:	00812c23          	sw	s0,24(sp)
20411e8c:	02010413          	addi	s0,sp,32
20411e90:	fea42623          	sw	a0,-20(s0)
20411e94:	feb42423          	sw	a1,-24(s0)
20411e98:	fec42783          	lw	a5,-20(s0)
20411e9c:	0007a783          	lw	a5,0(a5)
20411ea0:	00000613          	li	a2,0
20411ea4:	fe842583          	lw	a1,-24(s0)
20411ea8:	00078513          	mv	a0,a5
20411eac:	cccfd0ef          	jal	ra,2040f378 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
20411eb0:	00000013          	nop
20411eb4:	01c12083          	lw	ra,28(sp)
20411eb8:	01812403          	lw	s0,24(sp)
20411ebc:	02010113          	addi	sp,sp,32
20411ec0:	00008067          	ret

20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>:
    void Write(const T& value) {
20411ec4:	fe010113          	addi	sp,sp,-32
20411ec8:	00812e23          	sw	s0,28(sp)
20411ecc:	02010413          	addi	s0,sp,32
20411ed0:	fea42623          	sw	a0,-20(s0)
20411ed4:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20411ed8:	fec42783          	lw	a5,-20(s0)
20411edc:	00c7a803          	lw	a6,12(a5)
20411ee0:	0087a783          	lw	a5,8(a5)
20411ee4:	00800593          	li	a1,8
20411ee8:	00000613          	li	a2,0
20411eec:	00b786b3          	add	a3,a5,a1
20411ef0:	00068513          	mv	a0,a3
20411ef4:	00f53533          	sltu	a0,a0,a5
20411ef8:	00c80733          	add	a4,a6,a2
20411efc:	00e507b3          	add	a5,a0,a4
20411f00:	00078713          	mv	a4,a5
20411f04:	00068793          	mv	a5,a3
20411f08:	00070813          	mv	a6,a4
20411f0c:	fec42703          	lw	a4,-20(s0)
20411f10:	00f72423          	sw	a5,8(a4)
20411f14:	01072623          	sw	a6,12(a4)
    }
20411f18:	00000013          	nop
20411f1c:	01c12403          	lw	s0,28(sp)
20411f20:	02010113          	addi	sp,sp,32
20411f24:	00008067          	ret

20411f28 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvT_P8DLTensor>:
  static void SendDLTensor(TChannelPtr channel, DLTensor* arr) {
20411f28:	fd010113          	addi	sp,sp,-48
20411f2c:	02112623          	sw	ra,44(sp)
20411f30:	02812423          	sw	s0,40(sp)
20411f34:	03010413          	addi	s0,sp,48
20411f38:	fca42e23          	sw	a0,-36(s0)
20411f3c:	fcb42c23          	sw	a1,-40(s0)
    dev = arr->device;
20411f40:	fd842783          	lw	a5,-40(s0)
20411f44:	0087a803          	lw	a6,8(a5)
20411f48:	0047a783          	lw	a5,4(a5)
20411f4c:	fef42423          	sw	a5,-24(s0)
20411f50:	ff042623          	sw	a6,-20(s0)
    data = reinterpret_cast<uint64_t>(arr->data);
20411f54:	fd842783          	lw	a5,-40(s0)
20411f58:	0007a783          	lw	a5,0(a5)
20411f5c:	00078693          	mv	a3,a5
20411f60:	41f7d793          	srai	a5,a5,0x1f
20411f64:	00078713          	mv	a4,a5
20411f68:	fed42023          	sw	a3,-32(s0)
20411f6c:	fee42223          	sw	a4,-28(s0)
    channel->Write(data);
20411f70:	fe040793          	addi	a5,s0,-32
20411f74:	00078593          	mv	a1,a5
20411f78:	fdc42503          	lw	a0,-36(s0)
20411f7c:	f49ff0ef          	jal	ra,20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
    channel->Write(dev);
20411f80:	fe840793          	addi	a5,s0,-24
20411f84:	00078593          	mv	a1,a5
20411f88:	fdc42503          	lw	a0,-36(s0)
20411f8c:	e91ff0ef          	jal	ra,20411e1c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI8DLDeviceEEvRKT_>
    channel->Write(arr->ndim);
20411f90:	fd842783          	lw	a5,-40(s0)
20411f94:	00c78793          	addi	a5,a5,12
20411f98:	00078593          	mv	a1,a5
20411f9c:	fdc42503          	lw	a0,-36(s0)
20411fa0:	c7dff0ef          	jal	ra,20411c1c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIiEEvRKT_>
    channel->Write(arr->dtype);
20411fa4:	fd842783          	lw	a5,-40(s0)
20411fa8:	01078793          	addi	a5,a5,16
20411fac:	00078593          	mv	a1,a5
20411fb0:	fdc42503          	lw	a0,-36(s0)
20411fb4:	da1ff0ef          	jal	ra,20411d54 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI10DLDataTypeEEvRKT_>
    channel->WriteArray(arr->shape, arr->ndim);
20411fb8:	fd842783          	lw	a5,-40(s0)
20411fbc:	0147a703          	lw	a4,20(a5)
20411fc0:	fd842783          	lw	a5,-40(s0)
20411fc4:	00c7a783          	lw	a5,12(a5)
20411fc8:	00078613          	mv	a2,a5
20411fcc:	00070593          	mv	a1,a4
20411fd0:	fdc42503          	lw	a0,-36(s0)
20411fd4:	0f4000ef          	jal	ra,204120c8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIxEEvPKT_j>
    if (arr->strides != nullptr) {
20411fd8:	fd842783          	lw	a5,-40(s0)
20411fdc:	0187a783          	lw	a5,24(a5)
20411fe0:	00078863          	beqz	a5,20411ff0 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvT_P8DLTensor+0xc8>
      channel->ThrowError(RPCServerStatus::kInvalidDLTensorFieldStride);
20411fe4:	00300593          	li	a1,3
20411fe8:	fdc42503          	lw	a0,-36(s0)
20411fec:	e95ff0ef          	jal	ra,20411e80 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
    channel->Write(arr->byte_offset);
20411ff0:	fd842783          	lw	a5,-40(s0)
20411ff4:	02078793          	addi	a5,a5,32
20411ff8:	00078593          	mv	a1,a5
20411ffc:	fdc42503          	lw	a0,-36(s0)
20412000:	ec5ff0ef          	jal	ra,20411ec4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
    return;
20412004:	00000013          	nop
  }
20412008:	02c12083          	lw	ra,44(sp)
2041200c:	02812403          	lw	s0,40(sp)
20412010:	03010113          	addi	sp,sp,48
20412014:	00008067          	ret

20412018 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIcEEvPKT_j>:
    void WriteArray(const T* value, size_t num) {
20412018:	fe010113          	addi	sp,sp,-32
2041201c:	00812e23          	sw	s0,28(sp)
20412020:	02010413          	addi	s0,sp,32
20412024:	fea42623          	sw	a0,-20(s0)
20412028:	feb42423          	sw	a1,-24(s0)
2041202c:	fec42223          	sw	a2,-28(s0)
      num_bytes_ += sizeof(T) * num;
20412030:	fec42783          	lw	a5,-20(s0)
20412034:	00c7a803          	lw	a6,12(a5)
20412038:	0087a783          	lw	a5,8(a5)
2041203c:	fe442703          	lw	a4,-28(s0)
20412040:	00070313          	mv	t1,a4
20412044:	00000393          	li	t2,0
20412048:	006786b3          	add	a3,a5,t1
2041204c:	00068613          	mv	a2,a3
20412050:	00f63633          	sltu	a2,a2,a5
20412054:	00780733          	add	a4,a6,t2
20412058:	00e607b3          	add	a5,a2,a4
2041205c:	00078713          	mv	a4,a5
20412060:	00068793          	mv	a5,a3
20412064:	00070813          	mv	a6,a4
20412068:	fec42703          	lw	a4,-20(s0)
2041206c:	00f72423          	sw	a5,8(a4)
20412070:	01072623          	sw	a6,12(a4)
    }
20412074:	00000013          	nop
20412078:	01c12403          	lw	s0,28(sp)
2041207c:	02010113          	addi	sp,sp,32
20412080:	00008067          	ret

20412084 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIxEEvPT_j>:
  void WriteArray(T* data, size_t count) {
20412084:	fe010113          	addi	sp,sp,-32
20412088:	00112e23          	sw	ra,28(sp)
2041208c:	00812c23          	sw	s0,24(sp)
20412090:	02010413          	addi	s0,sp,32
20412094:	fea42623          	sw	a0,-20(s0)
20412098:	feb42423          	sw	a1,-24(s0)
2041209c:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
204120a0:	fe442783          	lw	a5,-28(s0)
204120a4:	00379793          	slli	a5,a5,0x3
204120a8:	00078613          	mv	a2,a5
204120ac:	fe842583          	lw	a1,-24(s0)
204120b0:	fec42503          	lw	a0,-20(s0)
204120b4:	bf9fe0ef          	jal	ra,20410cac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
204120b8:	01c12083          	lw	ra,28(sp)
204120bc:	01812403          	lw	s0,24(sp)
204120c0:	02010113          	addi	sp,sp,32
204120c4:	00008067          	ret

204120c8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIxEEvPKT_j>:
    void WriteArray(const T* value, size_t num) {
204120c8:	fe010113          	addi	sp,sp,-32
204120cc:	00812e23          	sw	s0,28(sp)
204120d0:	02010413          	addi	s0,sp,32
204120d4:	fea42623          	sw	a0,-20(s0)
204120d8:	feb42423          	sw	a1,-24(s0)
204120dc:	fec42223          	sw	a2,-28(s0)
      num_bytes_ += sizeof(T) * num;
204120e0:	fec42783          	lw	a5,-20(s0)
204120e4:	00c7a803          	lw	a6,12(a5)
204120e8:	0087a783          	lw	a5,8(a5)
204120ec:	fe442703          	lw	a4,-28(s0)
204120f0:	00371713          	slli	a4,a4,0x3
204120f4:	00070313          	mv	t1,a4
204120f8:	00000393          	li	t2,0
204120fc:	006786b3          	add	a3,a5,t1
20412100:	00068613          	mv	a2,a3
20412104:	00f63633          	sltu	a2,a2,a5
20412108:	00780733          	add	a4,a6,t2
2041210c:	00e607b3          	add	a5,a2,a4
20412110:	00078713          	mv	a4,a5
20412114:	00068793          	mv	a5,a3
20412118:	00070813          	mv	a6,a4
2041211c:	fec42703          	lw	a4,-20(s0)
20412120:	00f72423          	sw	a5,8(a4)
20412124:	01072623          	sw	a6,12(a4)
    }
20412128:	00000013          	nop
2041212c:	01c12403          	lw	s0,28(sp)
20412130:	02010113          	addi	sp,sp,32
20412134:	00008067          	ret

20412138 <__wrap_malloc>:

/* These functions are intended for embedded RV32 systems and are
   obviously incorrect in general. */

void* __wrap_malloc(unsigned long sz)
{
20412138:	fd010113          	addi	sp,sp,-48
2041213c:	02112623          	sw	ra,44(sp)
20412140:	02812423          	sw	s0,40(sp)
20412144:	03010413          	addi	s0,sp,48
20412148:	fca42e23          	sw	a0,-36(s0)
  extern void* sbrk(long);
  void* res = sbrk(sz);
2041214c:	fdc42783          	lw	a5,-36(s0)
20412150:	00078513          	mv	a0,a5
20412154:	194000ef          	jal	ra,204122e8 <__wrap_sbrk>
20412158:	fea42623          	sw	a0,-20(s0)
  if ((long)res == -1)
2041215c:	fec42703          	lw	a4,-20(s0)
20412160:	fff00793          	li	a5,-1
20412164:	00f71663          	bne	a4,a5,20412170 <__wrap_malloc+0x38>
    return 0;
20412168:	00000793          	li	a5,0
2041216c:	0080006f          	j	20412174 <__wrap_malloc+0x3c>
  return res;
20412170:	fec42783          	lw	a5,-20(s0)
}
20412174:	00078513          	mv	a0,a5
20412178:	02c12083          	lw	ra,44(sp)
2041217c:	02812403          	lw	s0,40(sp)
20412180:	03010113          	addi	sp,sp,48
20412184:	00008067          	ret

20412188 <__wrap_free>:

void __wrap_free(void* ptr)
{
20412188:	fe010113          	addi	sp,sp,-32
2041218c:	00812e23          	sw	s0,28(sp)
20412190:	02010413          	addi	s0,sp,32
20412194:	fea42623          	sw	a0,-20(s0)
}
20412198:	00000013          	nop
2041219c:	01c12403          	lw	s0,28(sp)
204121a0:	02010113          	addi	sp,sp,32
204121a4:	00008067          	ret

204121a8 <_stub>:
/* See LICENSE of license details. */
#ifndef _SIFIVE_SYS_STUB_H
#define _SIFIVE_SYS_STUB_H

static inline int _stub(int err)
{
204121a8:	fe010113          	addi	sp,sp,-32
204121ac:	00812e23          	sw	s0,28(sp)
204121b0:	02010413          	addi	s0,sp,32
204121b4:	fea42623          	sw	a0,-20(s0)
  return -1;
204121b8:	fff00793          	li	a5,-1
}
204121bc:	00078513          	mv	a0,a5
204121c0:	01c12403          	lw	s0,28(sp)
204121c4:	02010113          	addi	sp,sp,32
204121c8:	00008067          	ret

204121cc <__wrap_write>:
#include "platform.h"
#include "stub.h"
#include "weak_under_alias.h"

ssize_t __wrap_write(int fd, const void* ptr, size_t len)
{
204121cc:	fd010113          	addi	sp,sp,-48
204121d0:	02112623          	sw	ra,44(sp)
204121d4:	02812423          	sw	s0,40(sp)
204121d8:	03010413          	addi	s0,sp,48
204121dc:	fca42e23          	sw	a0,-36(s0)
204121e0:	fcb42c23          	sw	a1,-40(s0)
204121e4:	fcc42a23          	sw	a2,-44(s0)
  const uint8_t * current = (const char *)ptr;
204121e8:	fd842783          	lw	a5,-40(s0)
204121ec:	fef42423          	sw	a5,-24(s0)

  if (isatty(fd)) {
204121f0:	fdc42503          	lw	a0,-36(s0)
204121f4:	0b0000ef          	jal	ra,204122a4 <__wrap_isatty>
204121f8:	00050793          	mv	a5,a0
204121fc:	08078463          	beqz	a5,20412284 <__wrap_write+0xb8>
    for (size_t jj = 0; jj < len; jj++) {
20412200:	fe042623          	sw	zero,-20(s0)
20412204:	06c0006f          	j	20412270 <__wrap_write+0xa4>
      while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
20412208:	00000013          	nop
2041220c:	100137b7          	lui	a5,0x10013
20412210:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x10012800>
20412214:	fe07cce3          	bltz	a5,2041220c <__wrap_write+0x40>
      UART0_REG(UART_REG_TXFIFO) = current[jj];
20412218:	fe842703          	lw	a4,-24(s0)
2041221c:	fec42783          	lw	a5,-20(s0)
20412220:	00f707b3          	add	a5,a4,a5
20412224:	0007c703          	lbu	a4,0(a5)
20412228:	100137b7          	lui	a5,0x10013
2041222c:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x10012800>

      if (current[jj] == '\n') {
20412230:	fe842703          	lw	a4,-24(s0)
20412234:	fec42783          	lw	a5,-20(s0)
20412238:	00f707b3          	add	a5,a4,a5
2041223c:	0007c703          	lbu	a4,0(a5)
20412240:	00a00793          	li	a5,10
20412244:	02f71063          	bne	a4,a5,20412264 <__wrap_write+0x98>
        while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
20412248:	00000013          	nop
2041224c:	100137b7          	lui	a5,0x10013
20412250:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x10012800>
20412254:	fe07cce3          	bltz	a5,2041224c <__wrap_write+0x80>
        UART0_REG(UART_REG_TXFIFO) = '\r';
20412258:	100137b7          	lui	a5,0x10013
2041225c:	00d00713          	li	a4,13
20412260:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x10012800>
    for (size_t jj = 0; jj < len; jj++) {
20412264:	fec42783          	lw	a5,-20(s0)
20412268:	00178793          	addi	a5,a5,1
2041226c:	fef42623          	sw	a5,-20(s0)
20412270:	fec42703          	lw	a4,-20(s0)
20412274:	fd442783          	lw	a5,-44(s0)
20412278:	f8f768e3          	bltu	a4,a5,20412208 <__wrap_write+0x3c>
      }
    }
    return len;
2041227c:	fd442783          	lw	a5,-44(s0)
20412280:	0100006f          	j	20412290 <__wrap_write+0xc4>
  }

  return _stub(EBADF);
20412284:	00900513          	li	a0,9
20412288:	f21ff0ef          	jal	ra,204121a8 <_stub>
2041228c:	00050793          	mv	a5,a0
}
20412290:	00078513          	mv	a0,a5
20412294:	02c12083          	lw	ra,44(sp)
20412298:	02812403          	lw	s0,40(sp)
2041229c:	03010113          	addi	sp,sp,48
204122a0:	00008067          	ret

204122a4 <__wrap_isatty>:

#include <unistd.h>
#include "weak_under_alias.h"

int __wrap_isatty(int fd)
{
204122a4:	fe010113          	addi	sp,sp,-32
204122a8:	00812e23          	sw	s0,28(sp)
204122ac:	02010413          	addi	s0,sp,32
204122b0:	fea42623          	sw	a0,-20(s0)
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
204122b4:	fec42703          	lw	a4,-20(s0)
204122b8:	00100793          	li	a5,1
204122bc:	00f70863          	beq	a4,a5,204122cc <__wrap_isatty+0x28>
204122c0:	fec42703          	lw	a4,-20(s0)
204122c4:	00200793          	li	a5,2
204122c8:	00f71663          	bne	a4,a5,204122d4 <__wrap_isatty+0x30>
    return 1;
204122cc:	00100793          	li	a5,1
204122d0:	0080006f          	j	204122d8 <__wrap_isatty+0x34>

  return 0;
204122d4:	00000793          	li	a5,0
}
204122d8:	00078513          	mv	a0,a5
204122dc:	01c12403          	lw	s0,28(sp)
204122e0:	02010113          	addi	sp,sp,32
204122e4:	00008067          	ret

204122e8 <__wrap_sbrk>:

#include <stddef.h>
#include "weak_under_alias.h"

void *__wrap_sbrk(ptrdiff_t incr)
{
204122e8:	fe010113          	addi	sp,sp,-32
204122ec:	00812e23          	sw	s0,28(sp)
204122f0:	02010413          	addi	s0,sp,32
204122f4:	fea42623          	sw	a0,-20(s0)
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
204122f8:	5fbee797          	auipc	a5,0x5fbee
204122fc:	73878793          	addi	a5,a5,1848 # 80000a30 <curbrk.1393>
20412300:	0007a703          	lw	a4,0(a5)
20412304:	fec42783          	lw	a5,-20(s0)
20412308:	00f70733          	add	a4,a4,a5
2041230c:	5fbf1797          	auipc	a5,0x5fbf1
20412310:	be478793          	addi	a5,a5,-1052 # 80002ef0 <_end>
20412314:	02f76263          	bltu	a4,a5,20412338 <__wrap_sbrk+0x50>
20412318:	5fbee797          	auipc	a5,0x5fbee
2041231c:	71878793          	addi	a5,a5,1816 # 80000a30 <curbrk.1393>
20412320:	0007a703          	lw	a4,0(a5)
20412324:	fec42783          	lw	a5,-20(s0)
20412328:	00f70733          	add	a4,a4,a5
2041232c:	60bed797          	auipc	a5,0x60bed
20412330:	4d478793          	addi	a5,a5,1236 # 80fff800 <_heap_end>
20412334:	00e7f663          	bleu	a4,a5,20412340 <__wrap_sbrk+0x58>
    return NULL - 1;
20412338:	fff00793          	li	a5,-1
2041233c:	03c0006f          	j	20412378 <__wrap_sbrk+0x90>

  curbrk += incr;
20412340:	5fbee797          	auipc	a5,0x5fbee
20412344:	6f078793          	addi	a5,a5,1776 # 80000a30 <curbrk.1393>
20412348:	0007a703          	lw	a4,0(a5)
2041234c:	fec42783          	lw	a5,-20(s0)
20412350:	00f70733          	add	a4,a4,a5
20412354:	5fbee797          	auipc	a5,0x5fbee
20412358:	6dc78793          	addi	a5,a5,1756 # 80000a30 <curbrk.1393>
2041235c:	00e7a023          	sw	a4,0(a5)
  return curbrk - incr;
20412360:	5fbee797          	auipc	a5,0x5fbee
20412364:	6d078793          	addi	a5,a5,1744 # 80000a30 <curbrk.1393>
20412368:	0007a703          	lw	a4,0(a5)
2041236c:	fec42783          	lw	a5,-20(s0)
20412370:	40f007b3          	neg	a5,a5
20412374:	00f707b3          	add	a5,a4,a5
}
20412378:	00078513          	mv	a0,a5
2041237c:	01c12403          	lw	s0,28(sp)
20412380:	02010113          	addi	sp,sp,32
20412384:	00008067          	ret

20412388 <__wrap_exit>:
#include <unistd.h>
#include "platform.h"
#include "weak_under_alias.h"

void __wrap_exit(int code)
{
20412388:	fc010113          	addi	sp,sp,-64
2041238c:	02112e23          	sw	ra,60(sp)
20412390:	02812c23          	sw	s0,56(sp)
20412394:	04010413          	addi	s0,sp,64
20412398:	fca42623          	sw	a0,-52(s0)
  const char message[] = "\nProgam has exited with code:";
2041239c:	0000f797          	auipc	a5,0xf
204123a0:	00078793          	mv	a5,a5
204123a4:	0007a883          	lw	a7,0(a5) # 2042139c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1c>
204123a8:	0047a803          	lw	a6,4(a5)
204123ac:	0087a503          	lw	a0,8(a5)
204123b0:	00c7a583          	lw	a1,12(a5)
204123b4:	0107a603          	lw	a2,16(a5)
204123b8:	0147a683          	lw	a3,20(a5)
204123bc:	0187a703          	lw	a4,24(a5)
204123c0:	fd142823          	sw	a7,-48(s0)
204123c4:	fd042a23          	sw	a6,-44(s0)
204123c8:	fca42c23          	sw	a0,-40(s0)
204123cc:	fcb42e23          	sw	a1,-36(s0)
204123d0:	fec42023          	sw	a2,-32(s0)
204123d4:	fed42223          	sw	a3,-28(s0)
204123d8:	fee42423          	sw	a4,-24(s0)
204123dc:	01c7d783          	lhu	a5,28(a5)
204123e0:	fef41623          	sh	a5,-20(s0)

  write(STDERR_FILENO, message, sizeof(message) - 1);
204123e4:	fd040793          	addi	a5,s0,-48
204123e8:	01d00613          	li	a2,29
204123ec:	00078593          	mv	a1,a5
204123f0:	00200513          	li	a0,2
204123f4:	dd9ff0ef          	jal	ra,204121cc <__wrap_write>
  write_hex(STDERR_FILENO, code);
204123f8:	fcc42783          	lw	a5,-52(s0)
204123fc:	00078593          	mv	a1,a5
20412400:	00200513          	li	a0,2
20412404:	0a8000ef          	jal	ra,204124ac <write_hex>
  write(STDERR_FILENO, "\n", 1);
20412408:	00100613          	li	a2,1
2041240c:	0000f597          	auipc	a1,0xf
20412410:	f8c58593          	addi	a1,a1,-116 # 20421398 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x18>
20412414:	00200513          	li	a0,2
20412418:	db5ff0ef          	jal	ra,204121cc <__wrap_write>

  for (;;);
2041241c:	0000006f          	j	2041241c <__wrap_exit+0x94>

20412420 <__wrap_puts>:
#include "platform.h"
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_puts(const char *s)
{
20412420:	fe010113          	addi	sp,sp,-32
20412424:	00812e23          	sw	s0,28(sp)
20412428:	02010413          	addi	s0,sp,32
2041242c:	fea42623          	sw	a0,-20(s0)
  while (*s != '\0') {
20412430:	05c0006f          	j	2041248c <__wrap_puts+0x6c>
    while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
20412434:	00000013          	nop
20412438:	100137b7          	lui	a5,0x10013
2041243c:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x10012800>
20412440:	fe07cce3          	bltz	a5,20412438 <__wrap_puts+0x18>
    UART0_REG(UART_REG_TXFIFO) = *s;
20412444:	fec42783          	lw	a5,-20(s0)
20412448:	0007c703          	lbu	a4,0(a5)
2041244c:	100137b7          	lui	a5,0x10013
20412450:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x10012800>

    if (*s == '\n') {
20412454:	fec42783          	lw	a5,-20(s0)
20412458:	0007c703          	lbu	a4,0(a5)
2041245c:	00a00793          	li	a5,10
20412460:	02f71063          	bne	a4,a5,20412480 <__wrap_puts+0x60>
      while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
20412464:	00000013          	nop
20412468:	100137b7          	lui	a5,0x10013
2041246c:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x10012800>
20412470:	fe07cce3          	bltz	a5,20412468 <__wrap_puts+0x48>
      UART0_REG(UART_REG_TXFIFO) = '\r';
20412474:	100137b7          	lui	a5,0x10013
20412478:	00d00713          	li	a4,13
2041247c:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x10012800>
    }

    ++s;
20412480:	fec42783          	lw	a5,-20(s0)
20412484:	00178793          	addi	a5,a5,1
20412488:	fef42623          	sw	a5,-20(s0)
  while (*s != '\0') {
2041248c:	fec42783          	lw	a5,-20(s0)
20412490:	0007c783          	lbu	a5,0(a5)
20412494:	fa0790e3          	bnez	a5,20412434 <__wrap_puts+0x14>
  }

  return 0;
20412498:	00000793          	li	a5,0
}
2041249c:	00078513          	mv	a0,a5
204124a0:	01c12403          	lw	s0,28(sp)
204124a4:	02010113          	addi	sp,sp,32
204124a8:	00008067          	ret

204124ac <write_hex>:
#include <stdint.h>
#include <unistd.h>
#include "platform.h"

void write_hex(int fd, unsigned long int hex)
{
204124ac:	fd010113          	addi	sp,sp,-48
204124b0:	02112623          	sw	ra,44(sp)
204124b4:	02812423          	sw	s0,40(sp)
204124b8:	03010413          	addi	s0,sp,48
204124bc:	fca42e23          	sw	a0,-36(s0)
204124c0:	fcb42c23          	sw	a1,-40(s0)
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
204124c4:	00200613          	li	a2,2
204124c8:	0000f597          	auipc	a1,0xf
204124cc:	ef458593          	addi	a1,a1,-268 # 204213bc <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x3c>
204124d0:	fdc42503          	lw	a0,-36(s0)
204124d4:	cf9ff0ef          	jal	ra,204121cc <__wrap_write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
204124d8:	00800793          	li	a5,8
204124dc:	fef407a3          	sb	a5,-17(s0)
204124e0:	0880006f          	j	20412568 <write_hex+0xbc>
    jj = ii - 1;
204124e4:	fef44783          	lbu	a5,-17(s0)
204124e8:	fff78793          	addi	a5,a5,-1
204124ec:	fef40723          	sb	a5,-18(s0)
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
204124f0:	fee44783          	lbu	a5,-18(s0)
204124f4:	00279793          	slli	a5,a5,0x2
204124f8:	00f00713          	li	a4,15
204124fc:	00f717b3          	sll	a5,a4,a5
20412500:	00078713          	mv	a4,a5
20412504:	fd842783          	lw	a5,-40(s0)
20412508:	00f77733          	and	a4,a4,a5
2041250c:	fee44783          	lbu	a5,-18(s0)
20412510:	00279793          	slli	a5,a5,0x2
20412514:	00f757b3          	srl	a5,a4,a5
20412518:	fef406a3          	sb	a5,-19(s0)
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
2041251c:	fed44703          	lbu	a4,-19(s0)
20412520:	00900793          	li	a5,9
20412524:	00e7ea63          	bltu	a5,a4,20412538 <write_hex+0x8c>
20412528:	fed44783          	lbu	a5,-19(s0)
2041252c:	03078793          	addi	a5,a5,48
20412530:	0ff7f793          	andi	a5,a5,255
20412534:	0100006f          	j	20412544 <write_hex+0x98>
20412538:	fed44783          	lbu	a5,-19(s0)
2041253c:	03778793          	addi	a5,a5,55
20412540:	0ff7f793          	andi	a5,a5,255
20412544:	fef40623          	sb	a5,-20(s0)
    write(fd, &towrite, 1);
20412548:	fec40793          	addi	a5,s0,-20
2041254c:	00100613          	li	a2,1
20412550:	00078593          	mv	a1,a5
20412554:	fdc42503          	lw	a0,-36(s0)
20412558:	c75ff0ef          	jal	ra,204121cc <__wrap_write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
2041255c:	fef44783          	lbu	a5,-17(s0)
20412560:	fff78793          	addi	a5,a5,-1
20412564:	fef407a3          	sb	a5,-17(s0)
20412568:	fef44783          	lbu	a5,-17(s0)
2041256c:	f6079ce3          	bnez	a5,204124e4 <write_hex+0x38>
  }
}
20412570:	00000013          	nop
20412574:	02c12083          	lw	ra,44(sp)
20412578:	02812403          	lw	s0,40(sp)
2041257c:	03010113          	addi	sp,sp,48
20412580:	00008067          	ret

20412584 <putchar>:
#include <string.h>
#include <unistd.h>

#undef putchar
int putchar(int ch)
{
20412584:	fe010113          	addi	sp,sp,-32
20412588:	00112e23          	sw	ra,28(sp)
2041258c:	00812c23          	sw	s0,24(sp)
20412590:	02010413          	addi	s0,sp,32
20412594:	fea42623          	sw	a0,-20(s0)
  return write(STDOUT_FILENO, &ch, 1) == 1 ? ch : -1;
20412598:	fec40793          	addi	a5,s0,-20
2041259c:	00100613          	li	a2,1
204125a0:	00078593          	mv	a1,a5
204125a4:	00100513          	li	a0,1
204125a8:	c25ff0ef          	jal	ra,204121cc <__wrap_write>
204125ac:	00050713          	mv	a4,a0
204125b0:	00100793          	li	a5,1
204125b4:	00f71663          	bne	a4,a5,204125c0 <putchar+0x3c>
204125b8:	fec42783          	lw	a5,-20(s0)
204125bc:	0080006f          	j	204125c4 <putchar+0x40>
204125c0:	fff00793          	li	a5,-1
}
204125c4:	00078513          	mv	a0,a5
204125c8:	01c12083          	lw	ra,28(sp)
204125cc:	01812403          	lw	s0,24(sp)
204125d0:	02010113          	addi	sp,sp,32
204125d4:	00008067          	ret

204125d8 <sprintf_putch>:

static void sprintf_putch(int ch, void** data)
{
204125d8:	fd010113          	addi	sp,sp,-48
204125dc:	02812623          	sw	s0,44(sp)
204125e0:	03010413          	addi	s0,sp,48
204125e4:	fca42e23          	sw	a0,-36(s0)
204125e8:	fcb42c23          	sw	a1,-40(s0)
  char** pstr = (char**)data;
204125ec:	fd842783          	lw	a5,-40(s0)
204125f0:	fef42623          	sw	a5,-20(s0)
  **pstr = ch;
204125f4:	fec42783          	lw	a5,-20(s0)
204125f8:	0007a783          	lw	a5,0(a5)
204125fc:	fdc42703          	lw	a4,-36(s0)
20412600:	0ff77713          	andi	a4,a4,255
20412604:	00e78023          	sb	a4,0(a5)
  (*pstr)++;
20412608:	fec42783          	lw	a5,-20(s0)
2041260c:	0007a783          	lw	a5,0(a5)
20412610:	00178713          	addi	a4,a5,1
20412614:	fec42783          	lw	a5,-20(s0)
20412618:	00e7a023          	sw	a4,0(a5)
}
2041261c:	00000013          	nop
20412620:	02c12403          	lw	s0,44(sp)
20412624:	03010113          	addi	sp,sp,48
20412628:	00008067          	ret

2041262c <getuint>:

static unsigned long getuint(va_list *ap, int lflag)
{
2041262c:	fe010113          	addi	sp,sp,-32
20412630:	00812e23          	sw	s0,28(sp)
20412634:	02010413          	addi	s0,sp,32
20412638:	fea42623          	sw	a0,-20(s0)
2041263c:	feb42423          	sw	a1,-24(s0)
  if (lflag)
20412640:	fe842783          	lw	a5,-24(s0)
20412644:	02078063          	beqz	a5,20412664 <getuint+0x38>
    return va_arg(*ap, unsigned long);
20412648:	fec42783          	lw	a5,-20(s0)
2041264c:	0007a783          	lw	a5,0(a5)
20412650:	00478693          	addi	a3,a5,4
20412654:	fec42703          	lw	a4,-20(s0)
20412658:	00d72023          	sw	a3,0(a4)
2041265c:	0007a783          	lw	a5,0(a5)
20412660:	01c0006f          	j	2041267c <getuint+0x50>
  else
    return va_arg(*ap, unsigned int);
20412664:	fec42783          	lw	a5,-20(s0)
20412668:	0007a783          	lw	a5,0(a5)
2041266c:	00478693          	addi	a3,a5,4
20412670:	fec42703          	lw	a4,-20(s0)
20412674:	00d72023          	sw	a3,0(a4)
20412678:	0007a783          	lw	a5,0(a5)
}
2041267c:	00078513          	mv	a0,a5
20412680:	01c12403          	lw	s0,28(sp)
20412684:	02010113          	addi	sp,sp,32
20412688:	00008067          	ret

2041268c <getint>:

static long getint(va_list *ap, int lflag)
{
2041268c:	fe010113          	addi	sp,sp,-32
20412690:	00812e23          	sw	s0,28(sp)
20412694:	02010413          	addi	s0,sp,32
20412698:	fea42623          	sw	a0,-20(s0)
2041269c:	feb42423          	sw	a1,-24(s0)
  if (lflag)
204126a0:	fe842783          	lw	a5,-24(s0)
204126a4:	02078063          	beqz	a5,204126c4 <getint+0x38>
    return va_arg(*ap, long);
204126a8:	fec42783          	lw	a5,-20(s0)
204126ac:	0007a783          	lw	a5,0(a5)
204126b0:	00478693          	addi	a3,a5,4
204126b4:	fec42703          	lw	a4,-20(s0)
204126b8:	00d72023          	sw	a3,0(a4)
204126bc:	0007a783          	lw	a5,0(a5)
204126c0:	01c0006f          	j	204126dc <getint+0x50>
  else
    return va_arg(*ap, int);
204126c4:	fec42783          	lw	a5,-20(s0)
204126c8:	0007a783          	lw	a5,0(a5)
204126cc:	00478693          	addi	a3,a5,4
204126d0:	fec42703          	lw	a4,-20(s0)
204126d4:	00d72023          	sw	a3,0(a4)
204126d8:	0007a783          	lw	a5,0(a5)
}
204126dc:	00078513          	mv	a0,a5
204126e0:	01c12403          	lw	s0,28(sp)
204126e4:	02010113          	addi	sp,sp,32
204126e8:	00008067          	ret

204126ec <printnum>:

static inline void printnum(void (*putch)(int, void**), void **putdat,
                    unsigned long num, unsigned base, int width, int padc)
{
204126ec:	f4010113          	addi	sp,sp,-192
204126f0:	0a112e23          	sw	ra,188(sp)
204126f4:	0a812c23          	sw	s0,184(sp)
204126f8:	0a912a23          	sw	s1,180(sp)
204126fc:	0c010413          	addi	s0,sp,192
20412700:	f4a42e23          	sw	a0,-164(s0)
20412704:	f4b42c23          	sw	a1,-168(s0)
20412708:	f4c42a23          	sw	a2,-172(s0)
2041270c:	f4d42823          	sw	a3,-176(s0)
20412710:	f4e42623          	sw	a4,-180(s0)
20412714:	f4f42423          	sw	a5,-184(s0)
  unsigned digs[sizeof(num)*8];
  int pos = 0;
20412718:	fe042623          	sw	zero,-20(s0)

  while (1)
  {
    digs[pos++] = num % base;
2041271c:	fec42483          	lw	s1,-20(s0)
20412720:	00148793          	addi	a5,s1,1
20412724:	fef42623          	sw	a5,-20(s0)
20412728:	f5442783          	lw	a5,-172(s0)
2041272c:	f5042583          	lw	a1,-176(s0)
20412730:	00078513          	mv	a0,a5
20412734:	0e00d0ef          	jal	ra,2041f814 <__umodsi3>
20412738:	00050793          	mv	a5,a0
2041273c:	00078713          	mv	a4,a5
20412740:	00249793          	slli	a5,s1,0x2
20412744:	ff040693          	addi	a3,s0,-16
20412748:	00f687b3          	add	a5,a3,a5
2041274c:	f6e7ae23          	sw	a4,-132(a5)
    if (num < base)
20412750:	f5442703          	lw	a4,-172(s0)
20412754:	f5042783          	lw	a5,-176(s0)
20412758:	00f76e63          	bltu	a4,a5,20412774 <printnum+0x88>
      break;
    num /= base;
2041275c:	f5042583          	lw	a1,-176(s0)
20412760:	f5442503          	lw	a0,-172(s0)
20412764:	0840d0ef          	jal	ra,2041f7e8 <__udivsi3>
20412768:	00050793          	mv	a5,a0
2041276c:	f4f42a23          	sw	a5,-172(s0)
    digs[pos++] = num % base;
20412770:	fadff06f          	j	2041271c <printnum+0x30>
      break;
20412774:	00000013          	nop
  }

  while (width-- > pos)
20412778:	0140006f          	j	2041278c <printnum+0xa0>
    putch(padc, putdat);
2041277c:	f5c42783          	lw	a5,-164(s0)
20412780:	f5842583          	lw	a1,-168(s0)
20412784:	f4842503          	lw	a0,-184(s0)
20412788:	000780e7          	jalr	a5
  while (width-- > pos)
2041278c:	f4c42783          	lw	a5,-180(s0)
20412790:	fff78713          	addi	a4,a5,-1
20412794:	f4e42623          	sw	a4,-180(s0)
20412798:	fec42703          	lw	a4,-20(s0)
2041279c:	fef740e3          	blt	a4,a5,2041277c <printnum+0x90>

  while (pos-- > 0)
204127a0:	0540006f          	j	204127f4 <printnum+0x108>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
204127a4:	fec42783          	lw	a5,-20(s0)
204127a8:	00279793          	slli	a5,a5,0x2
204127ac:	ff040713          	addi	a4,s0,-16
204127b0:	00f707b3          	add	a5,a4,a5
204127b4:	f7c7a703          	lw	a4,-132(a5)
204127b8:	fec42783          	lw	a5,-20(s0)
204127bc:	00279793          	slli	a5,a5,0x2
204127c0:	ff040693          	addi	a3,s0,-16
204127c4:	00f687b3          	add	a5,a3,a5
204127c8:	f7c7a683          	lw	a3,-132(a5)
204127cc:	00900793          	li	a5,9
204127d0:	00d7f663          	bleu	a3,a5,204127dc <printnum+0xf0>
204127d4:	05700793          	li	a5,87
204127d8:	0080006f          	j	204127e0 <printnum+0xf4>
204127dc:	03000793          	li	a5,48
204127e0:	00e787b3          	add	a5,a5,a4
204127e4:	f5c42703          	lw	a4,-164(s0)
204127e8:	f5842583          	lw	a1,-168(s0)
204127ec:	00078513          	mv	a0,a5
204127f0:	000700e7          	jalr	a4
  while (pos-- > 0)
204127f4:	fec42783          	lw	a5,-20(s0)
204127f8:	fff78713          	addi	a4,a5,-1
204127fc:	fee42623          	sw	a4,-20(s0)
20412800:	faf042e3          	bgtz	a5,204127a4 <printnum+0xb8>
}
20412804:	00000013          	nop
20412808:	0bc12083          	lw	ra,188(sp)
2041280c:	0b812403          	lw	s0,184(sp)
20412810:	0b412483          	lw	s1,180(sp)
20412814:	0c010113          	addi	sp,sp,192
20412818:	00008067          	ret

2041281c <vprintfmt>:
  for (char* p = buf; p < pbuf; p++)
    putch(*p, putdat);
}
*/
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
{
2041281c:	fc010113          	addi	sp,sp,-64
20412820:	02112e23          	sw	ra,60(sp)
20412824:	02812c23          	sw	s0,56(sp)
20412828:	02912a23          	sw	s1,52(sp)
2041282c:	03212823          	sw	s2,48(sp)
20412830:	04010413          	addi	s0,sp,64
20412834:	fca42623          	sw	a0,-52(s0)
20412838:	fcb42423          	sw	a1,-56(s0)
2041283c:	fcc42223          	sw	a2,-60(s0)
20412840:	fcd42023          	sw	a3,-64(s0)
  unsigned long num;
  int base, lflag, width, precision, altflag;
  char padc;

  while (1) {
    while ((ch = *(unsigned char *) fmt) != '%') {
20412844:	0240006f          	j	20412868 <vprintfmt+0x4c>
      if (ch == '\0')
20412848:	38048663          	beqz	s1,20412bd4 <vprintfmt+0x3b8>
        return;
      fmt++;
2041284c:	fc442783          	lw	a5,-60(s0)
20412850:	00178793          	addi	a5,a5,1
20412854:	fcf42223          	sw	a5,-60(s0)
      putch(ch, putdat);
20412858:	fcc42783          	lw	a5,-52(s0)
2041285c:	fc842583          	lw	a1,-56(s0)
20412860:	00048513          	mv	a0,s1
20412864:	000780e7          	jalr	a5
    while ((ch = *(unsigned char *) fmt) != '%') {
20412868:	fc442783          	lw	a5,-60(s0)
2041286c:	0007c783          	lbu	a5,0(a5)
20412870:	00078493          	mv	s1,a5
20412874:	02500793          	li	a5,37
20412878:	fcf498e3          	bne	s1,a5,20412848 <vprintfmt+0x2c>
    }
    fmt++;
2041287c:	fc442783          	lw	a5,-60(s0)
20412880:	00178793          	addi	a5,a5,1
20412884:	fcf42223          	sw	a5,-60(s0)

    // Process a %-escape sequence
    last_fmt = fmt;
20412888:	fc442783          	lw	a5,-60(s0)
2041288c:	fcf42a23          	sw	a5,-44(s0)
    padc = ' ';
20412890:	02000793          	li	a5,32
20412894:	fcf40da3          	sb	a5,-37(s0)
    width = -1;
20412898:	fff00793          	li	a5,-1
2041289c:	fef42023          	sw	a5,-32(s0)
    precision = -1;
204128a0:	fff00793          	li	a5,-1
204128a4:	fcf42e23          	sw	a5,-36(s0)
    lflag = 0;
204128a8:	fe042223          	sw	zero,-28(s0)
    altflag = 0;
204128ac:	fc042823          	sw	zero,-48(s0)
  reswitch:
    switch (ch = *(unsigned char *) fmt++) {
204128b0:	fc442783          	lw	a5,-60(s0)
204128b4:	00178713          	addi	a4,a5,1
204128b8:	fce42223          	sw	a4,-60(s0)
204128bc:	0007c783          	lbu	a5,0(a5)
204128c0:	00078493          	mv	s1,a5
204128c4:	fdd48793          	addi	a5,s1,-35
204128c8:	05500713          	li	a4,85
204128cc:	2ef76263          	bltu	a4,a5,20412bb0 <vprintfmt+0x394>
204128d0:	00279713          	slli	a4,a5,0x2
204128d4:	0000f797          	auipc	a5,0xf
204128d8:	af478793          	addi	a5,a5,-1292 # 204213c8 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x48>
204128dc:	00f707b3          	add	a5,a4,a5
204128e0:	0007a703          	lw	a4,0(a5)
204128e4:	0000f797          	auipc	a5,0xf
204128e8:	ae478793          	addi	a5,a5,-1308 # 204213c8 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x48>
204128ec:	00f707b3          	add	a5,a4,a5
204128f0:	00078067          	jr	a5

    // flag to pad on the right
    case '-':
      padc = '-';
204128f4:	02d00793          	li	a5,45
204128f8:	fcf40da3          	sb	a5,-37(s0)
      goto reswitch;
204128fc:	fb5ff06f          	j	204128b0 <vprintfmt+0x94>

    // flag to pad with 0's instead of spaces
    case '0':
      padc = '0';
20412900:	03000793          	li	a5,48
20412904:	fcf40da3          	sb	a5,-37(s0)
      goto reswitch;
20412908:	fa9ff06f          	j	204128b0 <vprintfmt+0x94>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      for (precision = 0; ; ++fmt) {
2041290c:	fc042e23          	sw	zero,-36(s0)
        precision = precision * 10 + ch - '0';
20412910:	fdc42703          	lw	a4,-36(s0)
20412914:	00070793          	mv	a5,a4
20412918:	00279793          	slli	a5,a5,0x2
2041291c:	00e787b3          	add	a5,a5,a4
20412920:	00179793          	slli	a5,a5,0x1
20412924:	00f487b3          	add	a5,s1,a5
20412928:	fd078793          	addi	a5,a5,-48
2041292c:	fcf42e23          	sw	a5,-36(s0)
        ch = *fmt;
20412930:	fc442783          	lw	a5,-60(s0)
20412934:	0007c783          	lbu	a5,0(a5)
20412938:	00078493          	mv	s1,a5
        if (ch < '0' || ch > '9')
2041293c:	02f00793          	li	a5,47
20412940:	0497d863          	ble	s1,a5,20412990 <vprintfmt+0x174>
20412944:	03900793          	li	a5,57
20412948:	0497c463          	blt	a5,s1,20412990 <vprintfmt+0x174>
      for (precision = 0; ; ++fmt) {
2041294c:	fc442783          	lw	a5,-60(s0)
20412950:	00178793          	addi	a5,a5,1
20412954:	fcf42223          	sw	a5,-60(s0)
        precision = precision * 10 + ch - '0';
20412958:	fb9ff06f          	j	20412910 <vprintfmt+0xf4>
          break;
      }
      goto process_precision;

    case '*':
      precision = va_arg(ap, int);
2041295c:	fc042783          	lw	a5,-64(s0)
20412960:	00478713          	addi	a4,a5,4
20412964:	fce42023          	sw	a4,-64(s0)
20412968:	0007a783          	lw	a5,0(a5)
2041296c:	fcf42e23          	sw	a5,-36(s0)
      goto process_precision;
20412970:	0240006f          	j	20412994 <vprintfmt+0x178>

    case '.':
      if (width < 0)
20412974:	fe042783          	lw	a5,-32(s0)
20412978:	f207dce3          	bgez	a5,204128b0 <vprintfmt+0x94>
        width = 0;
2041297c:	fe042023          	sw	zero,-32(s0)
      goto reswitch;
20412980:	f31ff06f          	j	204128b0 <vprintfmt+0x94>

    case '#':
      altflag = 1;
20412984:	00100793          	li	a5,1
20412988:	fcf42823          	sw	a5,-48(s0)
      goto reswitch;
2041298c:	f25ff06f          	j	204128b0 <vprintfmt+0x94>
      goto process_precision;
20412990:	00000013          	nop

    process_precision:
      if (width < 0)
20412994:	fe042783          	lw	a5,-32(s0)
20412998:	f007dce3          	bgez	a5,204128b0 <vprintfmt+0x94>
        width = precision, precision = -1;
2041299c:	fdc42783          	lw	a5,-36(s0)
204129a0:	fef42023          	sw	a5,-32(s0)
204129a4:	fff00793          	li	a5,-1
204129a8:	fcf42e23          	sw	a5,-36(s0)
      goto reswitch;
204129ac:	f05ff06f          	j	204128b0 <vprintfmt+0x94>

    // long flag
    case 'l':
      if (lflag)
204129b0:	fe442783          	lw	a5,-28(s0)
204129b4:	1e079c63          	bnez	a5,20412bac <vprintfmt+0x390>
        goto bad;
      goto reswitch;
204129b8:	ef9ff06f          	j	204128b0 <vprintfmt+0x94>

    // character
    case 'c':
      putch(va_arg(ap, int), putdat);
204129bc:	fc042783          	lw	a5,-64(s0)
204129c0:	00478713          	addi	a4,a5,4
204129c4:	fce42023          	sw	a4,-64(s0)
204129c8:	0007a783          	lw	a5,0(a5)
204129cc:	fcc42703          	lw	a4,-52(s0)
204129d0:	fc842583          	lw	a1,-56(s0)
204129d4:	00078513          	mv	a0,a5
204129d8:	000700e7          	jalr	a4
      break;
204129dc:	1f40006f          	j	20412bd0 <vprintfmt+0x3b4>
      //print_double(putch, putdat, va_arg(ap, double), width, precision);
      break;

    // string
    case 's':
      if ((p = va_arg(ap, char *)) == NULL)
204129e0:	fc042783          	lw	a5,-64(s0)
204129e4:	00478713          	addi	a4,a5,4
204129e8:	fce42023          	sw	a4,-64(s0)
204129ec:	0007a903          	lw	s2,0(a5)
204129f0:	00091663          	bnez	s2,204129fc <vprintfmt+0x1e0>
        p = "(null)";
204129f4:	0000f917          	auipc	s2,0xf
204129f8:	9cc90913          	addi	s2,s2,-1588 # 204213c0 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x40>
      if (width > 0 && padc != '-')
204129fc:	fe042783          	lw	a5,-32(s0)
20412a00:	08f05063          	blez	a5,20412a80 <vprintfmt+0x264>
20412a04:	fdb44703          	lbu	a4,-37(s0)
20412a08:	02d00793          	li	a5,45
20412a0c:	06f70a63          	beq	a4,a5,20412a80 <vprintfmt+0x264>
        for (width -= strnlen(p, precision); width > 0; width--)
20412a10:	fdc42783          	lw	a5,-36(s0)
20412a14:	00078593          	mv	a1,a5
20412a18:	00090513          	mv	a0,s2
20412a1c:	199000ef          	jal	ra,204133b4 <strnlen>
20412a20:	00050713          	mv	a4,a0
20412a24:	fe042783          	lw	a5,-32(s0)
20412a28:	40e787b3          	sub	a5,a5,a4
20412a2c:	fef42023          	sw	a5,-32(s0)
20412a30:	0240006f          	j	20412a54 <vprintfmt+0x238>
          putch(padc, putdat);
20412a34:	fdb44783          	lbu	a5,-37(s0)
20412a38:	fcc42703          	lw	a4,-52(s0)
20412a3c:	fc842583          	lw	a1,-56(s0)
20412a40:	00078513          	mv	a0,a5
20412a44:	000700e7          	jalr	a4
        for (width -= strnlen(p, precision); width > 0; width--)
20412a48:	fe042783          	lw	a5,-32(s0)
20412a4c:	fff78793          	addi	a5,a5,-1
20412a50:	fef42023          	sw	a5,-32(s0)
20412a54:	fe042783          	lw	a5,-32(s0)
20412a58:	fcf04ee3          	bgtz	a5,20412a34 <vprintfmt+0x218>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
20412a5c:	0240006f          	j	20412a80 <vprintfmt+0x264>
        putch(ch, putdat);
20412a60:	fcc42783          	lw	a5,-52(s0)
20412a64:	fc842583          	lw	a1,-56(s0)
20412a68:	00048513          	mv	a0,s1
20412a6c:	000780e7          	jalr	a5
        p++;
20412a70:	00190913          	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
20412a74:	fe042783          	lw	a5,-32(s0)
20412a78:	fff78793          	addi	a5,a5,-1
20412a7c:	fef42023          	sw	a5,-32(s0)
20412a80:	00094783          	lbu	a5,0(s2)
20412a84:	00078493          	mv	s1,a5
20412a88:	04048063          	beqz	s1,20412ac8 <vprintfmt+0x2ac>
20412a8c:	fdc42783          	lw	a5,-36(s0)
20412a90:	fc07c8e3          	bltz	a5,20412a60 <vprintfmt+0x244>
20412a94:	fdc42783          	lw	a5,-36(s0)
20412a98:	fff78793          	addi	a5,a5,-1
20412a9c:	fcf42e23          	sw	a5,-36(s0)
20412aa0:	fdc42783          	lw	a5,-36(s0)
20412aa4:	fa07dee3          	bgez	a5,20412a60 <vprintfmt+0x244>
      }
      for (; width > 0; width--)
20412aa8:	0200006f          	j	20412ac8 <vprintfmt+0x2ac>
        putch(' ', putdat);
20412aac:	fcc42783          	lw	a5,-52(s0)
20412ab0:	fc842583          	lw	a1,-56(s0)
20412ab4:	02000513          	li	a0,32
20412ab8:	000780e7          	jalr	a5
      for (; width > 0; width--)
20412abc:	fe042783          	lw	a5,-32(s0)
20412ac0:	fff78793          	addi	a5,a5,-1
20412ac4:	fef42023          	sw	a5,-32(s0)
20412ac8:	fe042783          	lw	a5,-32(s0)
20412acc:	fef040e3          	bgtz	a5,20412aac <vprintfmt+0x290>
      break;
20412ad0:	1000006f          	j	20412bd0 <vprintfmt+0x3b4>

    // (signed) decimal
    case 'd':
      num = getint(&ap, lflag);
20412ad4:	fc040793          	addi	a5,s0,-64
20412ad8:	fe442583          	lw	a1,-28(s0)
20412adc:	00078513          	mv	a0,a5
20412ae0:	badff0ef          	jal	ra,2041268c <getint>
20412ae4:	00050793          	mv	a5,a0
20412ae8:	fef42623          	sw	a5,-20(s0)
      if ((long) num < 0) {
20412aec:	fec42783          	lw	a5,-20(s0)
20412af0:	0207d063          	bgez	a5,20412b10 <vprintfmt+0x2f4>
        putch('-', putdat);
20412af4:	fcc42783          	lw	a5,-52(s0)
20412af8:	fc842583          	lw	a1,-56(s0)
20412afc:	02d00513          	li	a0,45
20412b00:	000780e7          	jalr	a5
        num = -(long) num;
20412b04:	fec42783          	lw	a5,-20(s0)
20412b08:	40f007b3          	neg	a5,a5
20412b0c:	fef42623          	sw	a5,-20(s0)
      }
      base = 10;
20412b10:	00a00793          	li	a5,10
20412b14:	fef42423          	sw	a5,-24(s0)
      goto signed_number;
20412b18:	0600006f          	j	20412b78 <vprintfmt+0x35c>

    // unsigned decimal
    case 'u':
      base = 10;
20412b1c:	00a00793          	li	a5,10
20412b20:	fef42423          	sw	a5,-24(s0)
      goto unsigned_number;
20412b24:	0400006f          	j	20412b64 <vprintfmt+0x348>

    // (unsigned) octal
    case 'o':
      // should do something with padding so it's always 3 octits
      base = 8;
20412b28:	00800793          	li	a5,8
20412b2c:	fef42423          	sw	a5,-24(s0)
      goto unsigned_number;
20412b30:	0340006f          	j	20412b64 <vprintfmt+0x348>

    // pointer
    case 'p':
      lflag = 1;
20412b34:	00100793          	li	a5,1
20412b38:	fef42223          	sw	a5,-28(s0)
      putch('0', putdat);
20412b3c:	fcc42783          	lw	a5,-52(s0)
20412b40:	fc842583          	lw	a1,-56(s0)
20412b44:	03000513          	li	a0,48
20412b48:	000780e7          	jalr	a5
      putch('x', putdat);
20412b4c:	fcc42783          	lw	a5,-52(s0)
20412b50:	fc842583          	lw	a1,-56(s0)
20412b54:	07800513          	li	a0,120
20412b58:	000780e7          	jalr	a5
      /* fall through to 'x' */

    // (unsigned) hexadecimal
    case 'x':
      base = 16;
20412b5c:	01000793          	li	a5,16
20412b60:	fef42423          	sw	a5,-24(s0)
    unsigned_number:
      num = getuint(&ap, lflag);
20412b64:	fc040793          	addi	a5,s0,-64
20412b68:	fe442583          	lw	a1,-28(s0)
20412b6c:	00078513          	mv	a0,a5
20412b70:	abdff0ef          	jal	ra,2041262c <getuint>
20412b74:	fea42623          	sw	a0,-20(s0)
    signed_number:
      printnum(putch, putdat, num, base, width, padc);
20412b78:	fe842683          	lw	a3,-24(s0)
20412b7c:	fdb44783          	lbu	a5,-37(s0)
20412b80:	fe042703          	lw	a4,-32(s0)
20412b84:	fec42603          	lw	a2,-20(s0)
20412b88:	fc842583          	lw	a1,-56(s0)
20412b8c:	fcc42503          	lw	a0,-52(s0)
20412b90:	b5dff0ef          	jal	ra,204126ec <printnum>
      break;
20412b94:	03c0006f          	j	20412bd0 <vprintfmt+0x3b4>

    // escaped '%' character
    case '%':
      putch(ch, putdat);
20412b98:	fcc42783          	lw	a5,-52(s0)
20412b9c:	fc842583          	lw	a1,-56(s0)
20412ba0:	00048513          	mv	a0,s1
20412ba4:	000780e7          	jalr	a5
      break;
20412ba8:	0280006f          	j	20412bd0 <vprintfmt+0x3b4>
        goto bad;
20412bac:	00000013          	nop

    // unrecognized escape sequence - just print it literally
    default:
    bad:
      putch('%', putdat);
20412bb0:	fcc42783          	lw	a5,-52(s0)
20412bb4:	fc842583          	lw	a1,-56(s0)
20412bb8:	02500513          	li	a0,37
20412bbc:	000780e7          	jalr	a5
      fmt = last_fmt;
20412bc0:	fd442783          	lw	a5,-44(s0)
20412bc4:	fcf42223          	sw	a5,-60(s0)
      break;
20412bc8:	0080006f          	j	20412bd0 <vprintfmt+0x3b4>
      break;
20412bcc:	00000013          	nop
    while ((ch = *(unsigned char *) fmt) != '%') {
20412bd0:	c99ff06f          	j	20412868 <vprintfmt+0x4c>
        return;
20412bd4:	00000013          	nop
    }
  }
}
20412bd8:	03c12083          	lw	ra,60(sp)
20412bdc:	03812403          	lw	s0,56(sp)
20412be0:	03412483          	lw	s1,52(sp)
20412be4:	03012903          	lw	s2,48(sp)
20412be8:	04010113          	addi	sp,sp,64
20412bec:	00008067          	ret

20412bf0 <__wrap_printf>:

int __wrap_printf(const char* fmt, ...)
{
20412bf0:	fb010113          	addi	sp,sp,-80
20412bf4:	02112623          	sw	ra,44(sp)
20412bf8:	02812423          	sw	s0,40(sp)
20412bfc:	03010413          	addi	s0,sp,48
20412c00:	fca42e23          	sw	a0,-36(s0)
20412c04:	00b42223          	sw	a1,4(s0)
20412c08:	00c42423          	sw	a2,8(s0)
20412c0c:	00d42623          	sw	a3,12(s0)
20412c10:	00e42823          	sw	a4,16(s0)
20412c14:	00f42a23          	sw	a5,20(s0)
20412c18:	01042c23          	sw	a6,24(s0)
20412c1c:	01142e23          	sw	a7,28(s0)
  va_list ap;
  va_start(ap, fmt);
20412c20:	02040793          	addi	a5,s0,32
20412c24:	fe478793          	addi	a5,a5,-28
20412c28:	fef42623          	sw	a5,-20(s0)

  vprintfmt((void*)putchar, 0, fmt, ap);
20412c2c:	fec42783          	lw	a5,-20(s0)
20412c30:	00078693          	mv	a3,a5
20412c34:	fdc42603          	lw	a2,-36(s0)
20412c38:	00000593          	li	a1,0
20412c3c:	00000517          	auipc	a0,0x0
20412c40:	94850513          	addi	a0,a0,-1720 # 20412584 <putchar>
20412c44:	bd9ff0ef          	jal	ra,2041281c <vprintfmt>

  va_end(ap);
  return 0; // incorrect return value, but who cares, anyway?
20412c48:	00000793          	li	a5,0
}
20412c4c:	00078513          	mv	a0,a5
20412c50:	02c12083          	lw	ra,44(sp)
20412c54:	02812403          	lw	s0,40(sp)
20412c58:	05010113          	addi	sp,sp,80
20412c5c:	00008067          	ret

20412c60 <__wrap_sprintf>:

int __wrap_sprintf(char* str, const char* fmt, ...)
{
20412c60:	fb010113          	addi	sp,sp,-80
20412c64:	02112623          	sw	ra,44(sp)
20412c68:	02812423          	sw	s0,40(sp)
20412c6c:	03010413          	addi	s0,sp,48
20412c70:	fca42e23          	sw	a0,-36(s0)
20412c74:	fcb42c23          	sw	a1,-40(s0)
20412c78:	00c42423          	sw	a2,8(s0)
20412c7c:	00d42623          	sw	a3,12(s0)
20412c80:	00e42823          	sw	a4,16(s0)
20412c84:	00f42a23          	sw	a5,20(s0)
20412c88:	01042c23          	sw	a6,24(s0)
20412c8c:	01142e23          	sw	a7,28(s0)
  va_list ap;
  char* str0 = str;
20412c90:	fdc42783          	lw	a5,-36(s0)
20412c94:	fef42623          	sw	a5,-20(s0)
  va_start(ap, fmt);
20412c98:	02040793          	addi	a5,s0,32
20412c9c:	fe878793          	addi	a5,a5,-24
20412ca0:	fef42423          	sw	a5,-24(s0)

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
20412ca4:	fe842703          	lw	a4,-24(s0)
20412ca8:	fdc40793          	addi	a5,s0,-36
20412cac:	00070693          	mv	a3,a4
20412cb0:	fd842603          	lw	a2,-40(s0)
20412cb4:	00078593          	mv	a1,a5
20412cb8:	00000517          	auipc	a0,0x0
20412cbc:	92050513          	addi	a0,a0,-1760 # 204125d8 <sprintf_putch>
20412cc0:	b5dff0ef          	jal	ra,2041281c <vprintfmt>
  *str = 0;
20412cc4:	fdc42783          	lw	a5,-36(s0)
20412cc8:	00078023          	sb	zero,0(a5)

  va_end(ap);
  return str - str0;
20412ccc:	fdc42783          	lw	a5,-36(s0)
20412cd0:	00078713          	mv	a4,a5
20412cd4:	fec42783          	lw	a5,-20(s0)
20412cd8:	40f707b3          	sub	a5,a4,a5
}
20412cdc:	00078513          	mv	a0,a5
20412ce0:	02c12083          	lw	ra,44(sp)
20412ce4:	02812403          	lw	s0,40(sp)
20412ce8:	05010113          	addi	sp,sp,80
20412cec:	00008067          	ret

20412cf0 <__assert_func>:
20412cf0:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20412cf4:	1141                	addi	sp,sp,-16
20412cf6:	8832                	mv	a6,a2
20412cf8:	c606                	sw	ra,12(sp)
20412cfa:	88aa                	mv	a7,a0
20412cfc:	872e                	mv	a4,a1
20412cfe:	8636                	mv	a2,a3
20412d00:	47c8                	lw	a0,12(a5)
20412d02:	00080e63          	beqz	a6,20412d1e <__assert_func+0x2e>
20412d06:	204217b7          	lui	a5,0x20421
20412d0a:	52078793          	addi	a5,a5,1312 # 20421520 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1a0>
20412d0e:	204215b7          	lui	a1,0x20421
20412d12:	86c6                	mv	a3,a7
20412d14:	53058593          	addi	a1,a1,1328 # 20421530 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1b0>
20412d18:	2845                	jal	20412dc8 <fiprintf>
20412d1a:	292040ef          	jal	ra,20416fac <abort>
20412d1e:	20421837          	lui	a6,0x20421
20412d22:	52c80793          	addi	a5,a6,1324 # 2042152c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1ac>
20412d26:	52c80813          	addi	a6,a6,1324
20412d2a:	b7d5                	j	20412d0e <__assert_func+0x1e>

20412d2c <__assert>:
20412d2c:	1141                	addi	sp,sp,-16
20412d2e:	86b2                	mv	a3,a2
20412d30:	4601                	li	a2,0
20412d32:	c606                	sw	ra,12(sp)
20412d34:	3f75                	jal	20412cf0 <__assert_func>

20412d36 <atexit>:
20412d36:	85aa                	mv	a1,a0
20412d38:	4681                	li	a3,0
20412d3a:	4601                	li	a2,0
20412d3c:	4501                	li	a0,0
20412d3e:	27e0406f          	j	20416fbc <__register_exitproc>

20412d42 <exit>:
20412d42:	1141                	addi	sp,sp,-16
20412d44:	4581                	li	a1,0
20412d46:	c422                	sw	s0,8(sp)
20412d48:	c606                	sw	ra,12(sp)
20412d4a:	842a                	mv	s0,a0
20412d4c:	2d0040ef          	jal	ra,2041701c <__call_exitprocs>
20412d50:	8941a503          	lw	a0,-1900(gp) # 80000a34 <_global_impure_ptr>
20412d54:	5d5c                	lw	a5,60(a0)
20412d56:	c391                	beqz	a5,20412d5a <exit+0x18>
20412d58:	9782                	jalr	a5
20412d5a:	8522                	mv	a0,s0
20412d5c:	e2cff0ef          	jal	ra,20412388 <__wrap_exit>

20412d60 <__libc_fini_array>:
20412d60:	1101                	addi	sp,sp,-32
20412d62:	204227b7          	lui	a5,0x20422
20412d66:	20422737          	lui	a4,0x20422
20412d6a:	cc22                	sw	s0,24(sp)
20412d6c:	2ec70713          	addi	a4,a4,748 # 204222ec <__fini_array_end>
20412d70:	2ec78413          	addi	s0,a5,748 # 204222ec <__fini_array_end>
20412d74:	8c19                	sub	s0,s0,a4
20412d76:	ca26                	sw	s1,20(sp)
20412d78:	c84a                	sw	s2,16(sp)
20412d7a:	c64e                	sw	s3,12(sp)
20412d7c:	ce06                	sw	ra,28(sp)
20412d7e:	8409                	srai	s0,s0,0x2
20412d80:	4481                	li	s1,0
20412d82:	2ec78913          	addi	s2,a5,748
20412d86:	59f1                	li	s3,-4
20412d88:	00941a63          	bne	s0,s1,20412d9c <__libc_fini_array+0x3c>
20412d8c:	4462                	lw	s0,24(sp)
20412d8e:	40f2                	lw	ra,28(sp)
20412d90:	44d2                	lw	s1,20(sp)
20412d92:	4942                	lw	s2,16(sp)
20412d94:	49b2                	lw	s3,12(sp)
20412d96:	6105                	addi	sp,sp,32
20412d98:	ab9f806f          	j	2040b850 <_fini>
20412d9c:	033487b3          	mul	a5,s1,s3
20412da0:	0485                	addi	s1,s1,1
20412da2:	97ca                	add	a5,a5,s2
20412da4:	ffc7a783          	lw	a5,-4(a5)
20412da8:	9782                	jalr	a5
20412daa:	bff9                	j	20412d88 <__libc_fini_array+0x28>

20412dac <_fiprintf_r>:
20412dac:	7139                	addi	sp,sp,-64
20412dae:	d636                	sw	a3,44(sp)
20412db0:	1074                	addi	a3,sp,44
20412db2:	ce06                	sw	ra,28(sp)
20412db4:	d83a                	sw	a4,48(sp)
20412db6:	da3e                	sw	a5,52(sp)
20412db8:	dc42                	sw	a6,56(sp)
20412dba:	de46                	sw	a7,60(sp)
20412dbc:	c636                	sw	a3,12(sp)
20412dbe:	7e5010ef          	jal	ra,20414da2 <_vfiprintf_r>
20412dc2:	40f2                	lw	ra,28(sp)
20412dc4:	6121                	addi	sp,sp,64
20412dc6:	8082                	ret

20412dc8 <fiprintf>:
20412dc8:	7139                	addi	sp,sp,-64
20412dca:	da3e                	sw	a5,52(sp)
20412dcc:	d432                	sw	a2,40(sp)
20412dce:	862e                	mv	a2,a1
20412dd0:	85aa                	mv	a1,a0
20412dd2:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20412dd6:	d636                	sw	a3,44(sp)
20412dd8:	1034                	addi	a3,sp,40
20412dda:	ce06                	sw	ra,28(sp)
20412ddc:	d83a                	sw	a4,48(sp)
20412dde:	dc42                	sw	a6,56(sp)
20412de0:	de46                	sw	a7,60(sp)
20412de2:	c636                	sw	a3,12(sp)
20412de4:	7bf010ef          	jal	ra,20414da2 <_vfiprintf_r>
20412de8:	40f2                	lw	ra,28(sp)
20412dea:	6121                	addi	sp,sp,64
20412dec:	8082                	ret

20412dee <_fprintf_r>:
20412dee:	7139                	addi	sp,sp,-64
20412df0:	d636                	sw	a3,44(sp)
20412df2:	1074                	addi	a3,sp,44
20412df4:	ce06                	sw	ra,28(sp)
20412df6:	d83a                	sw	a4,48(sp)
20412df8:	da3e                	sw	a5,52(sp)
20412dfa:	dc42                	sw	a6,56(sp)
20412dfc:	de46                	sw	a7,60(sp)
20412dfe:	c636                	sw	a3,12(sp)
20412e00:	11b020ef          	jal	ra,2041571a <_vfprintf_r>
20412e04:	40f2                	lw	ra,28(sp)
20412e06:	6121                	addi	sp,sp,64
20412e08:	8082                	ret

20412e0a <fprintf>:
20412e0a:	7139                	addi	sp,sp,-64
20412e0c:	da3e                	sw	a5,52(sp)
20412e0e:	d432                	sw	a2,40(sp)
20412e10:	862e                	mv	a2,a1
20412e12:	85aa                	mv	a1,a0
20412e14:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20412e18:	d636                	sw	a3,44(sp)
20412e1a:	1034                	addi	a3,sp,40
20412e1c:	ce06                	sw	ra,28(sp)
20412e1e:	d83a                	sw	a4,48(sp)
20412e20:	dc42                	sw	a6,56(sp)
20412e22:	de46                	sw	a7,60(sp)
20412e24:	c636                	sw	a3,12(sp)
20412e26:	0f5020ef          	jal	ra,2041571a <_vfprintf_r>
20412e2a:	40f2                	lw	ra,28(sp)
20412e2c:	6121                	addi	sp,sp,64
20412e2e:	8082                	ret

20412e30 <_fwrite_r>:
20412e30:	715d                	addi	sp,sp,-80
20412e32:	c4a2                	sw	s0,72(sp)
20412e34:	02c68433          	mul	s0,a3,a2
20412e38:	087c                	addi	a5,sp,28
20412e3a:	d23e                	sw	a5,36(sp)
20412e3c:	4785                	li	a5,1
20412e3e:	c2a6                	sw	s1,68(sp)
20412e40:	c0ca                	sw	s2,64(sp)
20412e42:	de4e                	sw	s3,60(sp)
20412e44:	c686                	sw	ra,76(sp)
20412e46:	ce2e                	sw	a1,28(sp)
20412e48:	d43e                	sw	a5,40(sp)
20412e4a:	d022                	sw	s0,32(sp)
20412e4c:	d622                	sw	s0,44(sp)
20412e4e:	892a                	mv	s2,a0
20412e50:	89b2                	mv	s3,a2
20412e52:	84b6                	mv	s1,a3
20412e54:	c519                	beqz	a0,20412e62 <_fwrite_r+0x32>
20412e56:	5d1c                	lw	a5,56(a0)
20412e58:	e789                	bnez	a5,20412e62 <_fwrite_r+0x32>
20412e5a:	c63a                	sw	a4,12(sp)
20412e5c:	4d8040ef          	jal	ra,20417334 <__sinit>
20412e60:	4732                	lw	a4,12(sp)
20412e62:	00c71783          	lh	a5,12(a4)
20412e66:	01279693          	slli	a3,a5,0x12
20412e6a:	0006cb63          	bltz	a3,20412e80 <_fwrite_r+0x50>
20412e6e:	6609                	lui	a2,0x2
20412e70:	5374                	lw	a3,100(a4)
20412e72:	8fd1                	or	a5,a5,a2
20412e74:	00f71623          	sh	a5,12(a4)
20412e78:	77f9                	lui	a5,0xffffe
20412e7a:	17fd                	addi	a5,a5,-1
20412e7c:	8ff5                	and	a5,a5,a3
20412e7e:	d37c                	sw	a5,100(a4)
20412e80:	1050                	addi	a2,sp,36
20412e82:	85ba                	mv	a1,a4
20412e84:	854a                	mv	a0,s2
20412e86:	125040ef          	jal	ra,204177aa <__sfvwrite_r>
20412e8a:	c509                	beqz	a0,20412e94 <_fwrite_r+0x64>
20412e8c:	56b2                	lw	a3,44(sp)
20412e8e:	8c15                	sub	s0,s0,a3
20412e90:	033454b3          	divu	s1,s0,s3
20412e94:	40b6                	lw	ra,76(sp)
20412e96:	4426                	lw	s0,72(sp)
20412e98:	8526                	mv	a0,s1
20412e9a:	4906                	lw	s2,64(sp)
20412e9c:	4496                	lw	s1,68(sp)
20412e9e:	59f2                	lw	s3,60(sp)
20412ea0:	6161                	addi	sp,sp,80
20412ea2:	8082                	ret

20412ea4 <fwrite>:
20412ea4:	8736                	mv	a4,a3
20412ea6:	86b2                	mv	a3,a2
20412ea8:	862e                	mv	a2,a1
20412eaa:	85aa                	mv	a1,a0
20412eac:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20412eb0:	b741                	j	20412e30 <_fwrite_r>

20412eb2 <__libc_init_array>:
20412eb2:	1141                	addi	sp,sp,-16
20412eb4:	c422                	sw	s0,8(sp)
20412eb6:	c226                	sw	s1,4(sp)
20412eb8:	20422437          	lui	s0,0x20422
20412ebc:	204224b7          	lui	s1,0x20422
20412ec0:	2ec48793          	addi	a5,s1,748 # 204222ec <__fini_array_end>
20412ec4:	2ec40413          	addi	s0,s0,748 # 204222ec <__fini_array_end>
20412ec8:	8c1d                	sub	s0,s0,a5
20412eca:	c04a                	sw	s2,0(sp)
20412ecc:	c606                	sw	ra,12(sp)
20412ece:	8409                	srai	s0,s0,0x2
20412ed0:	2ec48493          	addi	s1,s1,748
20412ed4:	4901                	li	s2,0
20412ed6:	02891963          	bne	s2,s0,20412f08 <__libc_init_array+0x56>
20412eda:	204224b7          	lui	s1,0x20422
20412ede:	8e3f80ef          	jal	ra,2040b7c0 <_init>
20412ee2:	20422437          	lui	s0,0x20422
20412ee6:	2ec48793          	addi	a5,s1,748 # 204222ec <__fini_array_end>
20412eea:	2ec40413          	addi	s0,s0,748 # 204222ec <__fini_array_end>
20412eee:	8c1d                	sub	s0,s0,a5
20412ef0:	8409                	srai	s0,s0,0x2
20412ef2:	2ec48493          	addi	s1,s1,748
20412ef6:	4901                	li	s2,0
20412ef8:	00891d63          	bne	s2,s0,20412f12 <__libc_init_array+0x60>
20412efc:	40b2                	lw	ra,12(sp)
20412efe:	4422                	lw	s0,8(sp)
20412f00:	4492                	lw	s1,4(sp)
20412f02:	4902                	lw	s2,0(sp)
20412f04:	0141                	addi	sp,sp,16
20412f06:	8082                	ret
20412f08:	409c                	lw	a5,0(s1)
20412f0a:	0905                	addi	s2,s2,1
20412f0c:	0491                	addi	s1,s1,4
20412f0e:	9782                	jalr	a5
20412f10:	b7d9                	j	20412ed6 <__libc_init_array+0x24>
20412f12:	409c                	lw	a5,0(s1)
20412f14:	0905                	addi	s2,s2,1
20412f16:	0491                	addi	s1,s1,4
20412f18:	9782                	jalr	a5
20412f1a:	bff9                	j	20412ef8 <__libc_init_array+0x46>

20412f1c <_setlocale_r>:
20412f1c:	1141                	addi	sp,sp,-16
20412f1e:	c226                	sw	s1,4(sp)
20412f20:	c606                	sw	ra,12(sp)
20412f22:	c422                	sw	s0,8(sp)
20412f24:	204214b7          	lui	s1,0x20421
20412f28:	c615                	beqz	a2,20412f54 <_setlocale_r+0x38>
20412f2a:	204215b7          	lui	a1,0x20421
20412f2e:	56458593          	addi	a1,a1,1380 # 20421564 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1e4>
20412f32:	8532                	mv	a0,a2
20412f34:	8432                	mv	s0,a2
20412f36:	2cd5                	jal	2041322a <strcmp>
20412f38:	cd11                	beqz	a0,20412f54 <_setlocale_r+0x38>
20412f3a:	56048593          	addi	a1,s1,1376 # 20421560 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1e0>
20412f3e:	8522                	mv	a0,s0
20412f40:	24ed                	jal	2041322a <strcmp>
20412f42:	c909                	beqz	a0,20412f54 <_setlocale_r+0x38>
20412f44:	204215b7          	lui	a1,0x20421
20412f48:	52c58593          	addi	a1,a1,1324 # 2042152c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1ac>
20412f4c:	8522                	mv	a0,s0
20412f4e:	2cf1                	jal	2041322a <strcmp>
20412f50:	4781                	li	a5,0
20412f52:	e119                	bnez	a0,20412f58 <_setlocale_r+0x3c>
20412f54:	56048793          	addi	a5,s1,1376
20412f58:	40b2                	lw	ra,12(sp)
20412f5a:	4422                	lw	s0,8(sp)
20412f5c:	4492                	lw	s1,4(sp)
20412f5e:	853e                	mv	a0,a5
20412f60:	0141                	addi	sp,sp,16
20412f62:	8082                	ret

20412f64 <__locale_mb_cur_max>:
20412f64:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20412f68:	5bdc                	lw	a5,52(a5)
20412f6a:	e789                	bnez	a5,20412f74 <__locale_mb_cur_max+0x10>
20412f6c:	800007b7          	lui	a5,0x80000
20412f70:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20412f74:	1287c503          	lbu	a0,296(a5)
20412f78:	8082                	ret

20412f7a <__locale_ctype_ptr_l>:
20412f7a:	0ec52503          	lw	a0,236(a0)
20412f7e:	8082                	ret

20412f80 <__locale_ctype_ptr>:
20412f80:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20412f84:	5bdc                	lw	a5,52(a5)
20412f86:	e789                	bnez	a5,20412f90 <__locale_ctype_ptr+0x10>
20412f88:	800007b7          	lui	a5,0x80000
20412f8c:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20412f90:	0ec7a503          	lw	a0,236(a5)
20412f94:	8082                	ret

20412f96 <setlocale>:
20412f96:	862e                	mv	a2,a1
20412f98:	85aa                	mv	a1,a0
20412f9a:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20412f9e:	bfbd                	j	20412f1c <_setlocale_r>

20412fa0 <_mbtowc_r>:
20412fa0:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20412fa4:	5bdc                	lw	a5,52(a5)
20412fa6:	e789                	bnez	a5,20412fb0 <_mbtowc_r+0x10>
20412fa8:	800007b7          	lui	a5,0x80000
20412fac:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20412fb0:	0e47a303          	lw	t1,228(a5)
20412fb4:	8302                	jr	t1

20412fb6 <__ascii_mbtowc>:
20412fb6:	e185                	bnez	a1,20412fd6 <__ascii_mbtowc+0x20>
20412fb8:	1141                	addi	sp,sp,-16
20412fba:	006c                	addi	a1,sp,12
20412fbc:	4501                	li	a0,0
20412fbe:	ca11                	beqz	a2,20412fd2 <__ascii_mbtowc+0x1c>
20412fc0:	5579                	li	a0,-2
20412fc2:	ca81                	beqz	a3,20412fd2 <__ascii_mbtowc+0x1c>
20412fc4:	00064783          	lbu	a5,0(a2) # 2000 <__stack_size+0x1800>
20412fc8:	c19c                	sw	a5,0(a1)
20412fca:	00064503          	lbu	a0,0(a2)
20412fce:	00a03533          	snez	a0,a0
20412fd2:	0141                	addi	sp,sp,16
20412fd4:	8082                	ret
20412fd6:	4501                	li	a0,0
20412fd8:	ca19                	beqz	a2,20412fee <__ascii_mbtowc+0x38>
20412fda:	5579                	li	a0,-2
20412fdc:	ca89                	beqz	a3,20412fee <__ascii_mbtowc+0x38>
20412fde:	00064783          	lbu	a5,0(a2)
20412fe2:	c19c                	sw	a5,0(a1)
20412fe4:	00064503          	lbu	a0,0(a2)
20412fe8:	00a03533          	snez	a0,a0
20412fec:	8082                	ret
20412fee:	8082                	ret

20412ff0 <memcpy>:
20412ff0:	00a5c7b3          	xor	a5,a1,a0
20412ff4:	8b8d                	andi	a5,a5,3
20412ff6:	00c50733          	add	a4,a0,a2
20412ffa:	e781                	bnez	a5,20413002 <memcpy+0x12>
20412ffc:	478d                	li	a5,3
20412ffe:	00c7ef63          	bltu	a5,a2,2041301c <memcpy+0x2c>
20413002:	87aa                	mv	a5,a0
20413004:	00e56963          	bltu	a0,a4,20413016 <memcpy+0x26>
20413008:	8082                	ret
2041300a:	0005c683          	lbu	a3,0(a1)
2041300e:	0785                	addi	a5,a5,1
20413010:	0585                	addi	a1,a1,1
20413012:	fed78fa3          	sb	a3,-1(a5)
20413016:	fee7eae3          	bltu	a5,a4,2041300a <memcpy+0x1a>
2041301a:	8082                	ret
2041301c:	00357793          	andi	a5,a0,3
20413020:	ebbd                	bnez	a5,20413096 <memcpy+0xa6>
20413022:	87aa                	mv	a5,a0
20413024:	ffc77693          	andi	a3,a4,-4
20413028:	fe068613          	addi	a2,a3,-32
2041302c:	06c7fc63          	bleu	a2,a5,204130a4 <memcpy+0xb4>
20413030:	0005a383          	lw	t2,0(a1)
20413034:	0045a283          	lw	t0,4(a1)
20413038:	0085af83          	lw	t6,8(a1)
2041303c:	00c5af03          	lw	t5,12(a1)
20413040:	0105ae83          	lw	t4,16(a1)
20413044:	0145ae03          	lw	t3,20(a1)
20413048:	0185a303          	lw	t1,24(a1)
2041304c:	01c5a883          	lw	a7,28(a1)
20413050:	02458593          	addi	a1,a1,36
20413054:	02478793          	addi	a5,a5,36
20413058:	ffc5a803          	lw	a6,-4(a1)
2041305c:	fc77ae23          	sw	t2,-36(a5)
20413060:	fe57a023          	sw	t0,-32(a5)
20413064:	fff7a223          	sw	t6,-28(a5)
20413068:	ffe7a423          	sw	t5,-24(a5)
2041306c:	ffd7a623          	sw	t4,-20(a5)
20413070:	ffc7a823          	sw	t3,-16(a5)
20413074:	fe67aa23          	sw	t1,-12(a5)
20413078:	ff17ac23          	sw	a7,-8(a5)
2041307c:	ff07ae23          	sw	a6,-4(a5)
20413080:	b775                	j	2041302c <memcpy+0x3c>
20413082:	0005c683          	lbu	a3,0(a1)
20413086:	0785                	addi	a5,a5,1
20413088:	0585                	addi	a1,a1,1
2041308a:	fed78fa3          	sb	a3,-1(a5)
2041308e:	0037f693          	andi	a3,a5,3
20413092:	fae5                	bnez	a3,20413082 <memcpy+0x92>
20413094:	bf41                	j	20413024 <memcpy+0x34>
20413096:	87aa                	mv	a5,a0
20413098:	bfdd                	j	2041308e <memcpy+0x9e>
2041309a:	4190                	lw	a2,0(a1)
2041309c:	0791                	addi	a5,a5,4
2041309e:	0591                	addi	a1,a1,4
204130a0:	fec7ae23          	sw	a2,-4(a5)
204130a4:	fed7ebe3          	bltu	a5,a3,2041309a <memcpy+0xaa>
204130a8:	f6e7e7e3          	bltu	a5,a4,20413016 <memcpy+0x26>
204130ac:	8082                	ret

204130ae <memset>:
204130ae:	483d                	li	a6,15
204130b0:	872a                	mv	a4,a0
204130b2:	02c87363          	bleu	a2,a6,204130d8 <memset+0x2a>
204130b6:	00f77793          	andi	a5,a4,15
204130ba:	efbd                	bnez	a5,20413138 <memset+0x8a>
204130bc:	e5ad                	bnez	a1,20413126 <memset+0x78>
204130be:	ff067693          	andi	a3,a2,-16
204130c2:	8a3d                	andi	a2,a2,15
204130c4:	96ba                	add	a3,a3,a4
204130c6:	c30c                	sw	a1,0(a4)
204130c8:	c34c                	sw	a1,4(a4)
204130ca:	c70c                	sw	a1,8(a4)
204130cc:	c74c                	sw	a1,12(a4)
204130ce:	0741                	addi	a4,a4,16
204130d0:	fed76be3          	bltu	a4,a3,204130c6 <memset+0x18>
204130d4:	e211                	bnez	a2,204130d8 <memset+0x2a>
204130d6:	8082                	ret
204130d8:	40c806b3          	sub	a3,a6,a2
204130dc:	068a                	slli	a3,a3,0x2
204130de:	00000297          	auipc	t0,0x0
204130e2:	9696                	add	a3,a3,t0
204130e4:	00a68067          	jr	10(a3)
204130e8:	00b70723          	sb	a1,14(a4)
204130ec:	00b706a3          	sb	a1,13(a4)
204130f0:	00b70623          	sb	a1,12(a4)
204130f4:	00b705a3          	sb	a1,11(a4)
204130f8:	00b70523          	sb	a1,10(a4)
204130fc:	00b704a3          	sb	a1,9(a4)
20413100:	00b70423          	sb	a1,8(a4)
20413104:	00b703a3          	sb	a1,7(a4)
20413108:	00b70323          	sb	a1,6(a4)
2041310c:	00b702a3          	sb	a1,5(a4)
20413110:	00b70223          	sb	a1,4(a4)
20413114:	00b701a3          	sb	a1,3(a4)
20413118:	00b70123          	sb	a1,2(a4)
2041311c:	00b700a3          	sb	a1,1(a4)
20413120:	00b70023          	sb	a1,0(a4)
20413124:	8082                	ret
20413126:	0ff5f593          	andi	a1,a1,255
2041312a:	00859693          	slli	a3,a1,0x8
2041312e:	8dd5                	or	a1,a1,a3
20413130:	01059693          	slli	a3,a1,0x10
20413134:	8dd5                	or	a1,a1,a3
20413136:	b761                	j	204130be <memset+0x10>
20413138:	00279693          	slli	a3,a5,0x2
2041313c:	00000297          	auipc	t0,0x0
20413140:	9696                	add	a3,a3,t0
20413142:	8286                	mv	t0,ra
20413144:	fa8680e7          	jalr	-88(a3)
20413148:	8096                	mv	ra,t0
2041314a:	17c1                	addi	a5,a5,-16
2041314c:	8f1d                	sub	a4,a4,a5
2041314e:	963e                	add	a2,a2,a5
20413150:	f8c874e3          	bleu	a2,a6,204130d8 <memset+0x2a>
20413154:	b7a5                	j	204130bc <memset+0xe>

20413156 <_snprintf_r>:
20413156:	7175                	addi	sp,sp,-144
20413158:	de86                	sw	ra,124(sp)
2041315a:	dca2                	sw	s0,120(sp)
2041315c:	daa6                	sw	s1,116(sp)
2041315e:	c13a                	sw	a4,128(sp)
20413160:	c33e                	sw	a5,132(sp)
20413162:	c542                	sw	a6,136(sp)
20413164:	c746                	sw	a7,140(sp)
20413166:	00065b63          	bgez	a2,2041317c <_snprintf_r+0x26>
2041316a:	08b00793          	li	a5,139
2041316e:	c11c                	sw	a5,0(a0)
20413170:	557d                	li	a0,-1
20413172:	50f6                	lw	ra,124(sp)
20413174:	5466                	lw	s0,120(sp)
20413176:	54d6                	lw	s1,116(sp)
20413178:	6149                	addi	sp,sp,144
2041317a:	8082                	ret
2041317c:	20800793          	li	a5,520
20413180:	00f11a23          	sh	a5,20(sp)
20413184:	c42e                	sw	a1,8(sp)
20413186:	cc2e                	sw	a1,24(sp)
20413188:	8432                	mv	s0,a2
2041318a:	4781                	li	a5,0
2041318c:	c219                	beqz	a2,20413192 <_snprintf_r+0x3c>
2041318e:	fff60793          	addi	a5,a2,-1
20413192:	8636                	mv	a2,a3
20413194:	c83e                	sw	a5,16(sp)
20413196:	ce3e                	sw	a5,28(sp)
20413198:	0114                	addi	a3,sp,128
2041319a:	57fd                	li	a5,-1
2041319c:	002c                	addi	a1,sp,8
2041319e:	00f11b23          	sh	a5,22(sp)
204131a2:	84aa                	mv	s1,a0
204131a4:	c236                	sw	a3,4(sp)
204131a6:	2b21                	jal	204136be <_svfprintf_r>
204131a8:	57fd                	li	a5,-1
204131aa:	00f55563          	ble	a5,a0,204131b4 <_snprintf_r+0x5e>
204131ae:	08b00793          	li	a5,139
204131b2:	c09c                	sw	a5,0(s1)
204131b4:	dc5d                	beqz	s0,20413172 <_snprintf_r+0x1c>
204131b6:	47a2                	lw	a5,8(sp)
204131b8:	00078023          	sb	zero,0(a5)
204131bc:	bf5d                	j	20413172 <_snprintf_r+0x1c>

204131be <snprintf>:
204131be:	7135                	addi	sp,sp,-160
204131c0:	daa6                	sw	s1,116(sp)
204131c2:	cb3e                	sw	a5,148(sp)
204131c4:	de86                	sw	ra,124(sp)
204131c6:	dca2                	sw	s0,120(sp)
204131c8:	c736                	sw	a3,140(sp)
204131ca:	c93a                	sw	a4,144(sp)
204131cc:	cd42                	sw	a6,152(sp)
204131ce:	cf46                	sw	a7,156(sp)
204131d0:	8981a483          	lw	s1,-1896(gp) # 80000a38 <_impure_ptr>
204131d4:	0005db63          	bgez	a1,204131ea <snprintf+0x2c>
204131d8:	08b00793          	li	a5,139
204131dc:	c09c                	sw	a5,0(s1)
204131de:	557d                	li	a0,-1
204131e0:	50f6                	lw	ra,124(sp)
204131e2:	5466                	lw	s0,120(sp)
204131e4:	54d6                	lw	s1,116(sp)
204131e6:	610d                	addi	sp,sp,160
204131e8:	8082                	ret
204131ea:	20800793          	li	a5,520
204131ee:	00f11a23          	sh	a5,20(sp)
204131f2:	c42a                	sw	a0,8(sp)
204131f4:	cc2a                	sw	a0,24(sp)
204131f6:	4781                	li	a5,0
204131f8:	c199                	beqz	a1,204131fe <snprintf+0x40>
204131fa:	fff58793          	addi	a5,a1,-1
204131fe:	c83e                	sw	a5,16(sp)
20413200:	ce3e                	sw	a5,28(sp)
20413202:	0174                	addi	a3,sp,140
20413204:	57fd                	li	a5,-1
20413206:	842e                	mv	s0,a1
20413208:	8526                	mv	a0,s1
2041320a:	002c                	addi	a1,sp,8
2041320c:	00f11b23          	sh	a5,22(sp)
20413210:	c236                	sw	a3,4(sp)
20413212:	2175                	jal	204136be <_svfprintf_r>
20413214:	57fd                	li	a5,-1
20413216:	00f55563          	ble	a5,a0,20413220 <snprintf+0x62>
2041321a:	08b00793          	li	a5,139
2041321e:	c09c                	sw	a5,0(s1)
20413220:	d061                	beqz	s0,204131e0 <snprintf+0x22>
20413222:	47a2                	lw	a5,8(sp)
20413224:	00078023          	sb	zero,0(a5)
20413228:	bf65                	j	204131e0 <snprintf+0x22>

2041322a <strcmp>:
2041322a:	00b56733          	or	a4,a0,a1
2041322e:	53fd                	li	t2,-1
20413230:	8b0d                	andi	a4,a4,3
20413232:	e779                	bnez	a4,20413300 <strcmp+0xd6>
20413234:	7f7f8e37          	lui	t3,0x7f7f8
20413238:	f7fe0e13          	addi	t3,t3,-129 # 7f7f7f7f <__fini_array_end+0x5f3d5c93>
2041323c:	4110                	lw	a2,0(a0)
2041323e:	4194                	lw	a3,0(a1)
20413240:	01c672b3          	and	t0,a2,t3
20413244:	01c66333          	or	t1,a2,t3
20413248:	92f2                	add	t0,t0,t3
2041324a:	0062e2b3          	or	t0,t0,t1
2041324e:	0c729763          	bne	t0,t2,2041331c <strcmp+0xf2>
20413252:	06d61863          	bne	a2,a3,204132c2 <strcmp+0x98>
20413256:	4150                	lw	a2,4(a0)
20413258:	41d4                	lw	a3,4(a1)
2041325a:	01c672b3          	and	t0,a2,t3
2041325e:	01c66333          	or	t1,a2,t3
20413262:	92f2                	add	t0,t0,t3
20413264:	0062e2b3          	or	t0,t0,t1
20413268:	0a729863          	bne	t0,t2,20413318 <strcmp+0xee>
2041326c:	04d61b63          	bne	a2,a3,204132c2 <strcmp+0x98>
20413270:	4510                	lw	a2,8(a0)
20413272:	4594                	lw	a3,8(a1)
20413274:	01c672b3          	and	t0,a2,t3
20413278:	01c66333          	or	t1,a2,t3
2041327c:	92f2                	add	t0,t0,t3
2041327e:	0062e2b3          	or	t0,t0,t1
20413282:	0a729163          	bne	t0,t2,20413324 <strcmp+0xfa>
20413286:	02d61e63          	bne	a2,a3,204132c2 <strcmp+0x98>
2041328a:	4550                	lw	a2,12(a0)
2041328c:	45d4                	lw	a3,12(a1)
2041328e:	01c672b3          	and	t0,a2,t3
20413292:	01c66333          	or	t1,a2,t3
20413296:	92f2                	add	t0,t0,t3
20413298:	0062e2b3          	or	t0,t0,t1
2041329c:	08729a63          	bne	t0,t2,20413330 <strcmp+0x106>
204132a0:	02d61163          	bne	a2,a3,204132c2 <strcmp+0x98>
204132a4:	4910                	lw	a2,16(a0)
204132a6:	4994                	lw	a3,16(a1)
204132a8:	01c672b3          	and	t0,a2,t3
204132ac:	01c66333          	or	t1,a2,t3
204132b0:	92f2                	add	t0,t0,t3
204132b2:	0062e2b3          	or	t0,t0,t1
204132b6:	08729363          	bne	t0,t2,2041333c <strcmp+0x112>
204132ba:	0551                	addi	a0,a0,20
204132bc:	05d1                	addi	a1,a1,20
204132be:	f6d60fe3          	beq	a2,a3,2041323c <strcmp+0x12>
204132c2:	01061713          	slli	a4,a2,0x10
204132c6:	01069793          	slli	a5,a3,0x10
204132ca:	00f71c63          	bne	a4,a5,204132e2 <strcmp+0xb8>
204132ce:	01065713          	srli	a4,a2,0x10
204132d2:	0106d793          	srli	a5,a3,0x10
204132d6:	40f70533          	sub	a0,a4,a5
204132da:	0ff57593          	andi	a1,a0,255
204132de:	e991                	bnez	a1,204132f2 <strcmp+0xc8>
204132e0:	8082                	ret
204132e2:	8341                	srli	a4,a4,0x10
204132e4:	83c1                	srli	a5,a5,0x10
204132e6:	40f70533          	sub	a0,a4,a5
204132ea:	0ff57593          	andi	a1,a0,255
204132ee:	e191                	bnez	a1,204132f2 <strcmp+0xc8>
204132f0:	8082                	ret
204132f2:	0ff77713          	andi	a4,a4,255
204132f6:	0ff7f793          	andi	a5,a5,255
204132fa:	40f70533          	sub	a0,a4,a5
204132fe:	8082                	ret
20413300:	00054603          	lbu	a2,0(a0)
20413304:	0005c683          	lbu	a3,0(a1)
20413308:	0505                	addi	a0,a0,1
2041330a:	0585                	addi	a1,a1,1
2041330c:	00d61363          	bne	a2,a3,20413312 <strcmp+0xe8>
20413310:	fa65                	bnez	a2,20413300 <strcmp+0xd6>
20413312:	40d60533          	sub	a0,a2,a3
20413316:	8082                	ret
20413318:	0511                	addi	a0,a0,4
2041331a:	0591                	addi	a1,a1,4
2041331c:	fed612e3          	bne	a2,a3,20413300 <strcmp+0xd6>
20413320:	4501                	li	a0,0
20413322:	8082                	ret
20413324:	0521                	addi	a0,a0,8
20413326:	05a1                	addi	a1,a1,8
20413328:	fcd61ce3          	bne	a2,a3,20413300 <strcmp+0xd6>
2041332c:	4501                	li	a0,0
2041332e:	8082                	ret
20413330:	0531                	addi	a0,a0,12
20413332:	05b1                	addi	a1,a1,12
20413334:	fcd616e3          	bne	a2,a3,20413300 <strcmp+0xd6>
20413338:	4501                	li	a0,0
2041333a:	8082                	ret
2041333c:	0541                	addi	a0,a0,16
2041333e:	05c1                	addi	a1,a1,16
20413340:	fcd610e3          	bne	a2,a3,20413300 <strcmp+0xd6>
20413344:	4501                	li	a0,0
20413346:	8082                	ret

20413348 <strlen>:
20413348:	87aa                	mv	a5,a0
2041334a:	0785                	addi	a5,a5,1
2041334c:	fff7c703          	lbu	a4,-1(a5)
20413350:	ff6d                	bnez	a4,2041334a <strlen+0x2>
20413352:	40a78533          	sub	a0,a5,a0
20413356:	157d                	addi	a0,a0,-1
20413358:	8082                	ret

2041335a <strncmp>:
2041335a:	c21d                	beqz	a2,20413380 <strncmp+0x26>
2041335c:	00150713          	addi	a4,a0,1
20413360:	9532                	add	a0,a0,a2
20413362:	fff74783          	lbu	a5,-1(a4)
20413366:	0005c683          	lbu	a3,0(a1)
2041336a:	00d78563          	beq	a5,a3,20413374 <strncmp+0x1a>
2041336e:	40d78533          	sub	a0,a5,a3
20413372:	8082                	ret
20413374:	fea70de3          	beq	a4,a0,2041336e <strncmp+0x14>
20413378:	0705                	addi	a4,a4,1
2041337a:	dbf5                	beqz	a5,2041336e <strncmp+0x14>
2041337c:	0585                	addi	a1,a1,1
2041337e:	b7d5                	j	20413362 <strncmp+0x8>
20413380:	4501                	li	a0,0
20413382:	8082                	ret

20413384 <strncpy>:
20413384:	872a                	mv	a4,a0
20413386:	e211                	bnez	a2,2041338a <strncpy+0x6>
20413388:	8082                	ret
2041338a:	0585                	addi	a1,a1,1
2041338c:	fff5c683          	lbu	a3,-1(a1)
20413390:	00170793          	addi	a5,a4,1
20413394:	fff60813          	addi	a6,a2,-1
20413398:	fed78fa3          	sb	a3,-1(a5)
2041339c:	e689                	bnez	a3,204133a6 <strncpy+0x22>
2041339e:	9732                	add	a4,a4,a2
204133a0:	00e79663          	bne	a5,a4,204133ac <strncpy+0x28>
204133a4:	8082                	ret
204133a6:	873e                	mv	a4,a5
204133a8:	8642                	mv	a2,a6
204133aa:	bff1                	j	20413386 <strncpy+0x2>
204133ac:	0785                	addi	a5,a5,1
204133ae:	fe078fa3          	sb	zero,-1(a5)
204133b2:	b7fd                	j	204133a0 <strncpy+0x1c>

204133b4 <strnlen>:
204133b4:	95aa                	add	a1,a1,a0
204133b6:	87aa                	mv	a5,a0
204133b8:	00b79563          	bne	a5,a1,204133c2 <strnlen+0xe>
204133bc:	40a78533          	sub	a0,a5,a0
204133c0:	8082                	ret
204133c2:	0007c703          	lbu	a4,0(a5)
204133c6:	db7d                	beqz	a4,204133bc <strnlen+0x8>
204133c8:	0785                	addi	a5,a5,1
204133ca:	b7fd                	j	204133b8 <strnlen+0x4>

204133cc <_strtol_l.isra.0>:
204133cc:	7179                	addi	sp,sp,-48
204133ce:	d04a                	sw	s2,32(sp)
204133d0:	ce4e                	sw	s3,28(sp)
204133d2:	d606                	sw	ra,44(sp)
204133d4:	d422                	sw	s0,40(sp)
204133d6:	d226                	sw	s1,36(sp)
204133d8:	89aa                	mv	s3,a0
204133da:	892e                	mv	s2,a1
204133dc:	00190493          	addi	s1,s2,1
204133e0:	fff4c403          	lbu	s0,-1(s1)
204133e4:	853a                	mv	a0,a4
204133e6:	c62e                	sw	a1,12(sp)
204133e8:	c432                	sw	a2,8(sp)
204133ea:	c236                	sw	a3,4(sp)
204133ec:	c03a                	sw	a4,0(sp)
204133ee:	b8dff0ef          	jal	ra,20412f7a <__locale_ctype_ptr_l>
204133f2:	9522                	add	a0,a0,s0
204133f4:	00154783          	lbu	a5,1(a0)
204133f8:	45b2                	lw	a1,12(sp)
204133fa:	4622                	lw	a2,8(sp)
204133fc:	8ba1                	andi	a5,a5,8
204133fe:	4692                	lw	a3,4(sp)
20413400:	4702                	lw	a4,0(sp)
20413402:	e7c9                	bnez	a5,2041348c <_strtol_l.isra.0+0xc0>
20413404:	02d00793          	li	a5,45
20413408:	08f41463          	bne	s0,a5,20413490 <_strtol_l.isra.0+0xc4>
2041340c:	0004c783          	lbu	a5,0(s1)
20413410:	4305                	li	t1,1
20413412:	00290493          	addi	s1,s2,2
20413416:	c6fd                	beqz	a3,20413504 <_strtol_l.isra.0+0x138>
20413418:	4741                	li	a4,16
2041341a:	02e69263          	bne	a3,a4,2041343e <_strtol_l.isra.0+0x72>
2041341e:	03000713          	li	a4,48
20413422:	00e79e63          	bne	a5,a4,2041343e <_strtol_l.isra.0+0x72>
20413426:	0004c783          	lbu	a5,0(s1)
2041342a:	05800713          	li	a4,88
2041342e:	0df7f793          	andi	a5,a5,223
20413432:	0ce79463          	bne	a5,a4,204134fa <_strtol_l.isra.0+0x12e>
20413436:	0014c783          	lbu	a5,1(s1)
2041343a:	46c1                	li	a3,16
2041343c:	0489                	addi	s1,s1,2
2041343e:	800008b7          	lui	a7,0x80000
20413442:	00031463          	bnez	t1,2041344a <_strtol_l.isra.0+0x7e>
20413446:	fff8c893          	not	a7,a7
2041344a:	02d8ff33          	remu	t5,a7,a3
2041344e:	4801                	li	a6,0
20413450:	4501                	li	a0,0
20413452:	4fa5                	li	t6,9
20413454:	4ee5                	li	t4,25
20413456:	52fd                	li	t0,-1
20413458:	02d8de33          	divu	t3,a7,a3
2041345c:	fd078713          	addi	a4,a5,-48
20413460:	04efe463          	bltu	t6,a4,204134a8 <_strtol_l.isra.0+0xdc>
20413464:	87ba                	mv	a5,a4
20413466:	04d7df63          	ble	a3,a5,204134c4 <_strtol_l.isra.0+0xf8>
2041346a:	00580d63          	beq	a6,t0,20413484 <_strtol_l.isra.0+0xb8>
2041346e:	587d                	li	a6,-1
20413470:	00ae6a63          	bltu	t3,a0,20413484 <_strtol_l.isra.0+0xb8>
20413474:	00ae1463          	bne	t3,a0,2041347c <_strtol_l.isra.0+0xb0>
20413478:	00ff4663          	blt	t5,a5,20413484 <_strtol_l.isra.0+0xb8>
2041347c:	4805                	li	a6,1
2041347e:	02a68533          	mul	a0,a3,a0
20413482:	953e                	add	a0,a0,a5
20413484:	0485                	addi	s1,s1,1
20413486:	fff4c783          	lbu	a5,-1(s1)
2041348a:	bfc9                	j	2041345c <_strtol_l.isra.0+0x90>
2041348c:	8926                	mv	s2,s1
2041348e:	b7b9                	j	204133dc <_strtol_l.isra.0+0x10>
20413490:	02b00793          	li	a5,43
20413494:	00f40563          	beq	s0,a5,2041349e <_strtol_l.isra.0+0xd2>
20413498:	87a2                	mv	a5,s0
2041349a:	4301                	li	t1,0
2041349c:	bfad                	j	20413416 <_strtol_l.isra.0+0x4a>
2041349e:	0004c783          	lbu	a5,0(s1)
204134a2:	00290493          	addi	s1,s2,2
204134a6:	bfd5                	j	2041349a <_strtol_l.isra.0+0xce>
204134a8:	fbf78713          	addi	a4,a5,-65
204134ac:	00eee563          	bltu	t4,a4,204134b6 <_strtol_l.isra.0+0xea>
204134b0:	fc978793          	addi	a5,a5,-55
204134b4:	bf4d                	j	20413466 <_strtol_l.isra.0+0x9a>
204134b6:	f9f78713          	addi	a4,a5,-97
204134ba:	00eee563          	bltu	t4,a4,204134c4 <_strtol_l.isra.0+0xf8>
204134be:	fa978793          	addi	a5,a5,-87
204134c2:	b755                	j	20413466 <_strtol_l.isra.0+0x9a>
204134c4:	57fd                	li	a5,-1
204134c6:	00f81f63          	bne	a6,a5,204134e4 <_strtol_l.isra.0+0x118>
204134ca:	02200793          	li	a5,34
204134ce:	00f9a023          	sw	a5,0(s3)
204134d2:	8546                	mv	a0,a7
204134d4:	ee19                	bnez	a2,204134f2 <_strtol_l.isra.0+0x126>
204134d6:	50b2                	lw	ra,44(sp)
204134d8:	5422                	lw	s0,40(sp)
204134da:	5492                	lw	s1,36(sp)
204134dc:	5902                	lw	s2,32(sp)
204134de:	49f2                	lw	s3,28(sp)
204134e0:	6145                	addi	sp,sp,48
204134e2:	8082                	ret
204134e4:	00030463          	beqz	t1,204134ec <_strtol_l.isra.0+0x120>
204134e8:	40a00533          	neg	a0,a0
204134ec:	d66d                	beqz	a2,204134d6 <_strtol_l.isra.0+0x10a>
204134ee:	00080463          	beqz	a6,204134f6 <_strtol_l.isra.0+0x12a>
204134f2:	fff48593          	addi	a1,s1,-1
204134f6:	c20c                	sw	a1,0(a2)
204134f8:	bff9                	j	204134d6 <_strtol_l.isra.0+0x10a>
204134fa:	03000793          	li	a5,48
204134fe:	f2a1                	bnez	a3,2041343e <_strtol_l.isra.0+0x72>
20413500:	46a1                	li	a3,8
20413502:	bf35                	j	2041343e <_strtol_l.isra.0+0x72>
20413504:	03000713          	li	a4,48
20413508:	f0e78fe3          	beq	a5,a4,20413426 <_strtol_l.isra.0+0x5a>
2041350c:	46a9                	li	a3,10
2041350e:	bf05                	j	2041343e <_strtol_l.isra.0+0x72>

20413510 <_strtol_r>:
20413510:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413514:	5bd8                	lw	a4,52(a5)
20413516:	e709                	bnez	a4,20413520 <_strtol_r+0x10>
20413518:	80000737          	lui	a4,0x80000
2041351c:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413520:	b575                	j	204133cc <_strtol_l.isra.0>

20413522 <strtol_l>:
20413522:	8736                	mv	a4,a3
20413524:	86b2                	mv	a3,a2
20413526:	862e                	mv	a2,a1
20413528:	85aa                	mv	a1,a0
2041352a:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041352e:	bd79                	j	204133cc <_strtol_l.isra.0>

20413530 <strtol>:
20413530:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413534:	86b2                	mv	a3,a2
20413536:	5bd8                	lw	a4,52(a5)
20413538:	e709                	bnez	a4,20413542 <strtol+0x12>
2041353a:	80000737          	lui	a4,0x80000
2041353e:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413542:	862e                	mv	a2,a1
20413544:	85aa                	mv	a1,a0
20413546:	853e                	mv	a0,a5
20413548:	b551                	j	204133cc <_strtol_l.isra.0>

2041354a <_strtoul_l.isra.0>:
2041354a:	7179                	addi	sp,sp,-48
2041354c:	d04a                	sw	s2,32(sp)
2041354e:	ce4e                	sw	s3,28(sp)
20413550:	d606                	sw	ra,44(sp)
20413552:	d422                	sw	s0,40(sp)
20413554:	d226                	sw	s1,36(sp)
20413556:	89aa                	mv	s3,a0
20413558:	892e                	mv	s2,a1
2041355a:	00190493          	addi	s1,s2,1
2041355e:	fff4c403          	lbu	s0,-1(s1)
20413562:	853a                	mv	a0,a4
20413564:	c62e                	sw	a1,12(sp)
20413566:	c432                	sw	a2,8(sp)
20413568:	c236                	sw	a3,4(sp)
2041356a:	c03a                	sw	a4,0(sp)
2041356c:	a0fff0ef          	jal	ra,20412f7a <__locale_ctype_ptr_l>
20413570:	9522                	add	a0,a0,s0
20413572:	00154783          	lbu	a5,1(a0)
20413576:	45b2                	lw	a1,12(sp)
20413578:	4622                	lw	a2,8(sp)
2041357a:	8ba1                	andi	a5,a5,8
2041357c:	4692                	lw	a3,4(sp)
2041357e:	4702                	lw	a4,0(sp)
20413580:	efbd                	bnez	a5,204135fe <_strtoul_l.isra.0+0xb4>
20413582:	02d00793          	li	a5,45
20413586:	06f41e63          	bne	s0,a5,20413602 <_strtoul_l.isra.0+0xb8>
2041358a:	0004c783          	lbu	a5,0(s1)
2041358e:	4305                	li	t1,1
20413590:	00290493          	addi	s1,s2,2
20413594:	c2f5                	beqz	a3,20413678 <_strtoul_l.isra.0+0x12e>
20413596:	4741                	li	a4,16
20413598:	02e69263          	bne	a3,a4,204135bc <_strtoul_l.isra.0+0x72>
2041359c:	03000713          	li	a4,48
204135a0:	00e79e63          	bne	a5,a4,204135bc <_strtoul_l.isra.0+0x72>
204135a4:	0004c783          	lbu	a5,0(s1)
204135a8:	05800713          	li	a4,88
204135ac:	0df7f793          	andi	a5,a5,223
204135b0:	0ae79f63          	bne	a5,a4,2041366e <_strtoul_l.isra.0+0x124>
204135b4:	0014c783          	lbu	a5,1(s1)
204135b8:	46c1                	li	a3,16
204135ba:	0489                	addi	s1,s1,2
204135bc:	577d                	li	a4,-1
204135be:	02d75e33          	divu	t3,a4,a3
204135c2:	4801                	li	a6,0
204135c4:	4501                	li	a0,0
204135c6:	4f25                	li	t5,9
204135c8:	4ee5                	li	t4,25
204135ca:	02d778b3          	remu	a7,a4,a3
204135ce:	fd078713          	addi	a4,a5,-48
204135d2:	04ef6463          	bltu	t5,a4,2041361a <_strtoul_l.isra.0+0xd0>
204135d6:	87ba                	mv	a5,a4
204135d8:	06d7d163          	ble	a3,a5,2041363a <_strtoul_l.isra.0+0xf0>
204135dc:	04084d63          	bltz	a6,20413636 <_strtoul_l.isra.0+0xec>
204135e0:	587d                	li	a6,-1
204135e2:	00ae6a63          	bltu	t3,a0,204135f6 <_strtoul_l.isra.0+0xac>
204135e6:	00ae1463          	bne	t3,a0,204135ee <_strtoul_l.isra.0+0xa4>
204135ea:	00f8c663          	blt	a7,a5,204135f6 <_strtoul_l.isra.0+0xac>
204135ee:	4805                	li	a6,1
204135f0:	02a68533          	mul	a0,a3,a0
204135f4:	953e                	add	a0,a0,a5
204135f6:	0485                	addi	s1,s1,1
204135f8:	fff4c783          	lbu	a5,-1(s1)
204135fc:	bfc9                	j	204135ce <_strtoul_l.isra.0+0x84>
204135fe:	8926                	mv	s2,s1
20413600:	bfa9                	j	2041355a <_strtoul_l.isra.0+0x10>
20413602:	02b00793          	li	a5,43
20413606:	00f40563          	beq	s0,a5,20413610 <_strtoul_l.isra.0+0xc6>
2041360a:	87a2                	mv	a5,s0
2041360c:	4301                	li	t1,0
2041360e:	b759                	j	20413594 <_strtoul_l.isra.0+0x4a>
20413610:	0004c783          	lbu	a5,0(s1)
20413614:	00290493          	addi	s1,s2,2
20413618:	bfd5                	j	2041360c <_strtoul_l.isra.0+0xc2>
2041361a:	fbf78713          	addi	a4,a5,-65
2041361e:	00eee563          	bltu	t4,a4,20413628 <_strtoul_l.isra.0+0xde>
20413622:	fc978793          	addi	a5,a5,-55
20413626:	bf4d                	j	204135d8 <_strtoul_l.isra.0+0x8e>
20413628:	f9f78713          	addi	a4,a5,-97
2041362c:	00eee763          	bltu	t4,a4,2041363a <_strtoul_l.isra.0+0xf0>
20413630:	fa978793          	addi	a5,a5,-87
20413634:	b755                	j	204135d8 <_strtoul_l.isra.0+0x8e>
20413636:	587d                	li	a6,-1
20413638:	bf7d                	j	204135f6 <_strtoul_l.isra.0+0xac>
2041363a:	00085f63          	bgez	a6,20413658 <_strtoul_l.isra.0+0x10e>
2041363e:	02200793          	li	a5,34
20413642:	00f9a023          	sw	a5,0(s3)
20413646:	557d                	li	a0,-1
20413648:	ee19                	bnez	a2,20413666 <_strtoul_l.isra.0+0x11c>
2041364a:	50b2                	lw	ra,44(sp)
2041364c:	5422                	lw	s0,40(sp)
2041364e:	5492                	lw	s1,36(sp)
20413650:	5902                	lw	s2,32(sp)
20413652:	49f2                	lw	s3,28(sp)
20413654:	6145                	addi	sp,sp,48
20413656:	8082                	ret
20413658:	00030463          	beqz	t1,20413660 <_strtoul_l.isra.0+0x116>
2041365c:	40a00533          	neg	a0,a0
20413660:	d66d                	beqz	a2,2041364a <_strtoul_l.isra.0+0x100>
20413662:	00080463          	beqz	a6,2041366a <_strtoul_l.isra.0+0x120>
20413666:	fff48593          	addi	a1,s1,-1
2041366a:	c20c                	sw	a1,0(a2)
2041366c:	bff9                	j	2041364a <_strtoul_l.isra.0+0x100>
2041366e:	03000793          	li	a5,48
20413672:	f6a9                	bnez	a3,204135bc <_strtoul_l.isra.0+0x72>
20413674:	46a1                	li	a3,8
20413676:	b799                	j	204135bc <_strtoul_l.isra.0+0x72>
20413678:	03000713          	li	a4,48
2041367c:	f2e784e3          	beq	a5,a4,204135a4 <_strtoul_l.isra.0+0x5a>
20413680:	46a9                	li	a3,10
20413682:	bf2d                	j	204135bc <_strtoul_l.isra.0+0x72>

20413684 <_strtoul_r>:
20413684:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413688:	5bd8                	lw	a4,52(a5)
2041368a:	e709                	bnez	a4,20413694 <_strtoul_r+0x10>
2041368c:	80000737          	lui	a4,0x80000
20413690:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413694:	bd5d                	j	2041354a <_strtoul_l.isra.0>

20413696 <strtoul_l>:
20413696:	8736                	mv	a4,a3
20413698:	86b2                	mv	a3,a2
2041369a:	862e                	mv	a2,a1
2041369c:	85aa                	mv	a1,a0
2041369e:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
204136a2:	b565                	j	2041354a <_strtoul_l.isra.0>

204136a4 <strtoul>:
204136a4:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
204136a8:	86b2                	mv	a3,a2
204136aa:	5bd8                	lw	a4,52(a5)
204136ac:	e709                	bnez	a4,204136b6 <strtoul+0x12>
204136ae:	80000737          	lui	a4,0x80000
204136b2:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
204136b6:	862e                	mv	a2,a1
204136b8:	85aa                	mv	a1,a0
204136ba:	853e                	mv	a0,a5
204136bc:	b579                	j	2041354a <_strtoul_l.isra.0>

204136be <_svfprintf_r>:
204136be:	7105                	addi	sp,sp,-480
204136c0:	1c112e23          	sw	ra,476(sp)
204136c4:	1c912a23          	sw	s1,468(sp)
204136c8:	1d212823          	sw	s2,464(sp)
204136cc:	1d312623          	sw	s3,460(sp)
204136d0:	1d512223          	sw	s5,452(sp)
204136d4:	89ae                	mv	s3,a1
204136d6:	84b2                	mv	s1,a2
204136d8:	8ab6                	mv	s5,a3
204136da:	1c812c23          	sw	s0,472(sp)
204136de:	1d412423          	sw	s4,456(sp)
204136e2:	1d612023          	sw	s6,448(sp)
204136e6:	1b712e23          	sw	s7,444(sp)
204136ea:	1b812c23          	sw	s8,440(sp)
204136ee:	1b912a23          	sw	s9,436(sp)
204136f2:	1ba12823          	sw	s10,432(sp)
204136f6:	1bb12623          	sw	s11,428(sp)
204136fa:	892a                	mv	s2,a0
204136fc:	2ed050ef          	jal	ra,204191e8 <_localeconv_r>
20413700:	4108                	lw	a0,0(a0)
20413702:	c4aa                	sw	a0,72(sp)
20413704:	c45ff0ef          	jal	ra,20413348 <strlen>
20413708:	00c9d783          	lhu	a5,12(s3)
2041370c:	dc2a                	sw	a0,56(sp)
2041370e:	d182                	sw	zero,224(sp)
20413710:	d382                	sw	zero,228(sp)
20413712:	d582                	sw	zero,232(sp)
20413714:	d782                	sw	zero,236(sp)
20413716:	0807f793          	andi	a5,a5,128
2041371a:	cb85                	beqz	a5,2041374a <_svfprintf_r+0x8c>
2041371c:	0109a783          	lw	a5,16(s3)
20413720:	e78d                	bnez	a5,2041374a <_svfprintf_r+0x8c>
20413722:	04000593          	li	a1,64
20413726:	854a                	mv	a0,s2
20413728:	3f1050ef          	jal	ra,20419318 <_malloc_r>
2041372c:	00a9a023          	sw	a0,0(s3)
20413730:	00a9a823          	sw	a0,16(s3)
20413734:	e519                	bnez	a0,20413742 <_svfprintf_r+0x84>
20413736:	47b1                	li	a5,12
20413738:	00f92023          	sw	a5,0(s2)
2041373c:	55fd                	li	a1,-1
2041373e:	de2e                	sw	a1,60(sp)
20413740:	a109                	j	20413b42 <_svfprintf_r+0x484>
20413742:	04000793          	li	a5,64
20413746:	00f9aa23          	sw	a5,20(s3)
2041374a:	0fc10893          	addi	a7,sp,252
2041374e:	cbc6                	sw	a7,212(sp)
20413750:	cf82                	sw	zero,220(sp)
20413752:	cd82                	sw	zero,216(sp)
20413754:	4a01                	li	s4,0
20413756:	cc82                	sw	zero,88(sp)
20413758:	ca82                	sw	zero,84(sp)
2041375a:	d402                	sw	zero,40(sp)
2041375c:	c282                	sw	zero,68(sp)
2041375e:	c882                	sw	zero,80(sp)
20413760:	de02                	sw	zero,60(sp)
20413762:	8426                	mv	s0,s1
20413764:	02500713          	li	a4,37
20413768:	00044783          	lbu	a5,0(s0)
2041376c:	c399                	beqz	a5,20413772 <_svfprintf_r+0xb4>
2041376e:	08e79363          	bne	a5,a4,204137f4 <_svfprintf_r+0x136>
20413772:	40940b33          	sub	s6,s0,s1
20413776:	020b0c63          	beqz	s6,204137ae <_svfprintf_r+0xf0>
2041377a:	47fe                	lw	a5,220(sp)
2041377c:	0098a023          	sw	s1,0(a7) # 80000000 <pulp__FC+0x80000001>
20413780:	0168a223          	sw	s6,4(a7)
20413784:	97da                	add	a5,a5,s6
20413786:	cfbe                	sw	a5,220(sp)
20413788:	47ee                	lw	a5,216(sp)
2041378a:	471d                	li	a4,7
2041378c:	08a1                	addi	a7,a7,8
2041378e:	0785                	addi	a5,a5,1
20413790:	cdbe                	sw	a5,216(sp)
20413792:	00f75b63          	ble	a5,a4,204137a8 <_svfprintf_r+0xea>
20413796:	09d0                	addi	a2,sp,212
20413798:	85ce                	mv	a1,s3
2041379a:	854a                	mv	a0,s2
2041379c:	0ee070ef          	jal	ra,2041a88a <__ssprint_r>
204137a0:	38051b63          	bnez	a0,20413b36 <_svfprintf_r+0x478>
204137a4:	0fc10893          	addi	a7,sp,252
204137a8:	5672                	lw	a2,60(sp)
204137aa:	965a                	add	a2,a2,s6
204137ac:	de32                	sw	a2,60(sp)
204137ae:	00044783          	lbu	a5,0(s0)
204137b2:	e399                	bnez	a5,204137b8 <_svfprintf_r+0xfa>
204137b4:	5380106f          	j	20414cec <_svfprintf_r+0x162e>
204137b8:	0405                	addi	s0,s0,1
204137ba:	d822                	sw	s0,48(sp)
204137bc:	0a010ba3          	sb	zero,183(sp)
204137c0:	5b7d                	li	s6,-1
204137c2:	c082                	sw	zero,64(sp)
204137c4:	4401                	li	s0,0
204137c6:	4c29                	li	s8,10
204137c8:	02a00b93          	li	s7,42
204137cc:	05a00613          	li	a2,90
204137d0:	4725                	li	a4,9
204137d2:	56c2                	lw	a3,48(sp)
204137d4:	0006cd03          	lbu	s10,0(a3)
204137d8:	0685                	addi	a3,a3,1
204137da:	d836                	sw	a3,48(sp)
204137dc:	fe0d0793          	addi	a5,s10,-32
204137e0:	56f665e3          	bltu	a2,a5,2041454a <_svfprintf_r+0xe8c>
204137e4:	204215b7          	lui	a1,0x20421
204137e8:	078a                	slli	a5,a5,0x2
204137ea:	57058593          	addi	a1,a1,1392 # 20421570 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1f0>
204137ee:	97ae                	add	a5,a5,a1
204137f0:	439c                	lw	a5,0(a5)
204137f2:	8782                	jr	a5
204137f4:	0405                	addi	s0,s0,1
204137f6:	bf8d                	j	20413768 <_svfprintf_r+0xaa>
204137f8:	204217b7          	lui	a5,0x20421
204137fc:	75478793          	addi	a5,a5,1876 # 20421754 <zeroes.4369+0x68>
20413800:	ccbe                	sw	a5,88(sp)
20413802:	02047793          	andi	a5,s0,32
20413806:	3e0786e3          	beqz	a5,204143f2 <_svfprintf_r+0xd34>
2041380a:	0a9d                	addi	s5,s5,7
2041380c:	ff8afa93          	andi	s5,s5,-8
20413810:	000aac03          	lw	s8,0(s5)
20413814:	004aac83          	lw	s9,4(s5)
20413818:	008a8793          	addi	a5,s5,8
2041381c:	d63e                	sw	a5,44(sp)
2041381e:	00147793          	andi	a5,s0,1
20413822:	cf89                	beqz	a5,2041383c <_svfprintf_r+0x17e>
20413824:	019c67b3          	or	a5,s8,s9
20413828:	cb91                	beqz	a5,2041383c <_svfprintf_r+0x17e>
2041382a:	03000793          	li	a5,48
2041382e:	0af10c23          	sb	a5,184(sp)
20413832:	87ea                	mv	a5,s10
20413834:	0af10ca3          	sb	a5,185(sp)
20413838:	00246413          	ori	s0,s0,2
2041383c:	bff47413          	andi	s0,s0,-1025
20413840:	4789                	li	a5,2
20413842:	0d10006f          	j	20414112 <_svfprintf_r+0xa54>
20413846:	854a                	mv	a0,s2
20413848:	c246                	sw	a7,4(sp)
2041384a:	19f050ef          	jal	ra,204191e8 <_localeconv_r>
2041384e:	4148                	lw	a0,4(a0)
20413850:	c8aa                	sw	a0,80(sp)
20413852:	af7ff0ef          	jal	ra,20413348 <strlen>
20413856:	c2aa                	sw	a0,68(sp)
20413858:	854a                	mv	a0,s2
2041385a:	18f050ef          	jal	ra,204191e8 <_localeconv_r>
2041385e:	4508                	lw	a0,8(a0)
20413860:	4616                	lw	a2,68(sp)
20413862:	4892                	lw	a7,4(sp)
20413864:	d42a                	sw	a0,40(sp)
20413866:	d23d                	beqz	a2,204137cc <_svfprintf_r+0x10e>
20413868:	d135                	beqz	a0,204137cc <_svfprintf_r+0x10e>
2041386a:	00054783          	lbu	a5,0(a0)
2041386e:	dfb9                	beqz	a5,204137cc <_svfprintf_r+0x10e>
20413870:	40046413          	ori	s0,s0,1024
20413874:	bfa1                	j	204137cc <_svfprintf_r+0x10e>
20413876:	0b714783          	lbu	a5,183(sp)
2041387a:	fba9                	bnez	a5,204137cc <_svfprintf_r+0x10e>
2041387c:	02000793          	li	a5,32
20413880:	0af10ba3          	sb	a5,183(sp)
20413884:	b7a1                	j	204137cc <_svfprintf_r+0x10e>
20413886:	00146413          	ori	s0,s0,1
2041388a:	b789                	j	204137cc <_svfprintf_r+0x10e>
2041388c:	000aa683          	lw	a3,0(s5)
20413890:	0a91                	addi	s5,s5,4
20413892:	c0b6                	sw	a3,64(sp)
20413894:	f206dce3          	bgez	a3,204137cc <_svfprintf_r+0x10e>
20413898:	40d006b3          	neg	a3,a3
2041389c:	c0b6                	sw	a3,64(sp)
2041389e:	00446413          	ori	s0,s0,4
204138a2:	b72d                	j	204137cc <_svfprintf_r+0x10e>
204138a4:	02b00793          	li	a5,43
204138a8:	bfe1                	j	20413880 <_svfprintf_r+0x1c2>
204138aa:	55c2                	lw	a1,48(sp)
204138ac:	0005cd03          	lbu	s10,0(a1)
204138b0:	00158793          	addi	a5,a1,1
204138b4:	037d1963          	bne	s10,s7,204138e6 <_svfprintf_r+0x228>
204138b8:	000aab03          	lw	s6,0(s5)
204138bc:	004a8713          	addi	a4,s5,4
204138c0:	000b5363          	bgez	s6,204138c6 <_svfprintf_r+0x208>
204138c4:	5b7d                	li	s6,-1
204138c6:	8aba                	mv	s5,a4
204138c8:	d83e                	sw	a5,48(sp)
204138ca:	b709                	j	204137cc <_svfprintf_r+0x10e>
204138cc:	038b0333          	mul	t1,s6,s8
204138d0:	0785                	addi	a5,a5,1
204138d2:	fff7cd03          	lbu	s10,-1(a5)
204138d6:	00d30b33          	add	s6,t1,a3
204138da:	fd0d0693          	addi	a3,s10,-48
204138de:	fed777e3          	bleu	a3,a4,204138cc <_svfprintf_r+0x20e>
204138e2:	d83e                	sw	a5,48(sp)
204138e4:	bde5                	j	204137dc <_svfprintf_r+0x11e>
204138e6:	4b01                	li	s6,0
204138e8:	bfcd                	j	204138da <_svfprintf_r+0x21c>
204138ea:	08046413          	ori	s0,s0,128
204138ee:	bdf9                	j	204137cc <_svfprintf_r+0x10e>
204138f0:	57c2                	lw	a5,48(sp)
204138f2:	c082                	sw	zero,64(sp)
204138f4:	4586                	lw	a1,64(sp)
204138f6:	fd0d0d13          	addi	s10,s10,-48
204138fa:	0785                	addi	a5,a5,1
204138fc:	038586b3          	mul	a3,a1,s8
20413900:	9d36                	add	s10,s10,a3
20413902:	c0ea                	sw	s10,64(sp)
20413904:	fff7cd03          	lbu	s10,-1(a5)
20413908:	fd0d0693          	addi	a3,s10,-48
2041390c:	fed774e3          	bleu	a3,a4,204138f4 <_svfprintf_r+0x236>
20413910:	bfc9                	j	204138e2 <_svfprintf_r+0x224>
20413912:	00846413          	ori	s0,s0,8
20413916:	bd5d                	j	204137cc <_svfprintf_r+0x10e>
20413918:	5642                	lw	a2,48(sp)
2041391a:	06800793          	li	a5,104
2041391e:	00064703          	lbu	a4,0(a2)
20413922:	00f71763          	bne	a4,a5,20413930 <_svfprintf_r+0x272>
20413926:	0605                	addi	a2,a2,1
20413928:	d832                	sw	a2,48(sp)
2041392a:	20046413          	ori	s0,s0,512
2041392e:	bd79                	j	204137cc <_svfprintf_r+0x10e>
20413930:	04046413          	ori	s0,s0,64
20413934:	bd61                	j	204137cc <_svfprintf_r+0x10e>
20413936:	56c2                	lw	a3,48(sp)
20413938:	06c00793          	li	a5,108
2041393c:	0006c703          	lbu	a4,0(a3)
20413940:	00f71763          	bne	a4,a5,2041394e <_svfprintf_r+0x290>
20413944:	0685                	addi	a3,a3,1
20413946:	d836                	sw	a3,48(sp)
20413948:	02046413          	ori	s0,s0,32
2041394c:	b541                	j	204137cc <_svfprintf_r+0x10e>
2041394e:	01046413          	ori	s0,s0,16
20413952:	bdad                	j	204137cc <_svfprintf_r+0x10e>
20413954:	000aa783          	lw	a5,0(s5)
20413958:	004a8713          	addi	a4,s5,4
2041395c:	d63a                	sw	a4,44(sp)
2041395e:	12f10e23          	sb	a5,316(sp)
20413962:	0a010ba3          	sb	zero,183(sp)
20413966:	d202                	sw	zero,36(sp)
20413968:	4b05                	li	s6,1
2041396a:	4a81                	li	s5,0
2041396c:	4c01                	li	s8,0
2041396e:	4b81                	li	s7,0
20413970:	4c81                	li	s9,0
20413972:	1a64                	addi	s1,sp,316
20413974:	0610006f          	j	204141d4 <_svfprintf_r+0xb16>
20413978:	01046413          	ori	s0,s0,16
2041397c:	02047793          	andi	a5,s0,32
20413980:	cba9                	beqz	a5,204139d2 <_svfprintf_r+0x314>
20413982:	0a9d                	addi	s5,s5,7
20413984:	ff8afa93          	andi	s5,s5,-8
20413988:	000aac03          	lw	s8,0(s5)
2041398c:	004aac83          	lw	s9,4(s5)
20413990:	008a8793          	addi	a5,s5,8
20413994:	d63e                	sw	a5,44(sp)
20413996:	000cde63          	bgez	s9,204139b2 <_svfprintf_r+0x2f4>
2041399a:	41800c33          	neg	s8,s8
2041399e:	018037b3          	snez	a5,s8
204139a2:	41900cb3          	neg	s9,s9
204139a6:	40fc8cb3          	sub	s9,s9,a5
204139aa:	02d00793          	li	a5,45
204139ae:	0af10ba3          	sb	a5,183(sp)
204139b2:	57fd                	li	a5,-1
204139b4:	26fb16e3          	bne	s6,a5,20414420 <_svfprintf_r+0xd62>
204139b8:	2c0c97e3          	bnez	s9,20414486 <_svfprintf_r+0xdc8>
204139bc:	47a5                	li	a5,9
204139be:	2d87e4e3          	bltu	a5,s8,20414486 <_svfprintf_r+0xdc8>
204139c2:	030c0c13          	addi	s8,s8,48
204139c6:	19810fa3          	sb	s8,415(sp)
204139ca:	19f10493          	addi	s1,sp,415
204139ce:	2a30006f          	j	20414470 <_svfprintf_r+0xdb2>
204139d2:	004a8593          	addi	a1,s5,4
204139d6:	d62e                	sw	a1,44(sp)
204139d8:	01047793          	andi	a5,s0,16
204139dc:	c791                	beqz	a5,204139e8 <_svfprintf_r+0x32a>
204139de:	000aac03          	lw	s8,0(s5)
204139e2:	41fc5c93          	srai	s9,s8,0x1f
204139e6:	bf45                	j	20413996 <_svfprintf_r+0x2d8>
204139e8:	04047793          	andi	a5,s0,64
204139ec:	000aac03          	lw	s8,0(s5)
204139f0:	c789                	beqz	a5,204139fa <_svfprintf_r+0x33c>
204139f2:	0c42                	slli	s8,s8,0x10
204139f4:	410c5c13          	srai	s8,s8,0x10
204139f8:	b7ed                	j	204139e2 <_svfprintf_r+0x324>
204139fa:	20047793          	andi	a5,s0,512
204139fe:	d3f5                	beqz	a5,204139e2 <_svfprintf_r+0x324>
20413a00:	0c62                	slli	s8,s8,0x18
20413a02:	418c5c13          	srai	s8,s8,0x18
20413a06:	bff1                	j	204139e2 <_svfprintf_r+0x324>
20413a08:	00847793          	andi	a5,s0,8
20413a0c:	cfad                	beqz	a5,20413a86 <_svfprintf_r+0x3c8>
20413a0e:	000aa783          	lw	a5,0(s5)
20413a12:	004a8613          	addi	a2,s5,4
20413a16:	d632                	sw	a2,44(sp)
20413a18:	43d4                	lw	a3,4(a5)
20413a1a:	4390                	lw	a2,0(a5)
20413a1c:	4798                	lw	a4,8(a5)
20413a1e:	47dc                	lw	a5,12(a5)
20413a20:	d1b2                	sw	a2,224(sp)
20413a22:	d3b6                	sw	a3,228(sp)
20413a24:	d5ba                	sw	a4,232(sp)
20413a26:	d7be                	sw	a5,236(sp)
20413a28:	1188                	addi	a0,sp,224
20413a2a:	c246                	sw	a7,4(sp)
20413a2c:	778050ef          	jal	ra,204191a4 <_ldcheck>
20413a30:	df2a                	sw	a0,188(sp)
20413a32:	4789                	li	a5,2
20413a34:	4892                	lw	a7,4(sp)
20413a36:	08f51563          	bne	a0,a5,20413ac0 <_svfprintf_r+0x402>
20413a3a:	578e                	lw	a5,224(sp)
20413a3c:	090c                	addi	a1,sp,144
20413a3e:	1108                	addi	a0,sp,160
20413a40:	d13e                	sw	a5,160(sp)
20413a42:	579e                	lw	a5,228(sp)
20413a44:	c902                	sw	zero,144(sp)
20413a46:	cb02                	sw	zero,148(sp)
20413a48:	d33e                	sw	a5,164(sp)
20413a4a:	57ae                	lw	a5,232(sp)
20413a4c:	cd02                	sw	zero,152(sp)
20413a4e:	cf02                	sw	zero,156(sp)
20413a50:	d53e                	sw	a5,168(sp)
20413a52:	57be                	lw	a5,236(sp)
20413a54:	d73e                	sw	a5,172(sp)
20413a56:	3ef090ef          	jal	ra,2041d644 <__letf2>
20413a5a:	4892                	lw	a7,4(sp)
20413a5c:	00055663          	bgez	a0,20413a68 <_svfprintf_r+0x3aa>
20413a60:	02d00793          	li	a5,45
20413a64:	0af10ba3          	sb	a5,183(sp)
20413a68:	04700793          	li	a5,71
20413a6c:	05a7c563          	blt	a5,s10,20413ab6 <_svfprintf_r+0x3f8>
20413a70:	204214b7          	lui	s1,0x20421
20413a74:	73048493          	addi	s1,s1,1840 # 20421730 <zeroes.4369+0x44>
20413a78:	f7f47413          	andi	s0,s0,-129
20413a7c:	d202                	sw	zero,36(sp)
20413a7e:	4b0d                	li	s6,3
20413a80:	4a81                	li	s5,0
20413a82:	1f90006f          	j	2041447a <_svfprintf_r+0xdbc>
20413a86:	0a9d                	addi	s5,s5,7
20413a88:	ff8afa93          	andi	s5,s5,-8
20413a8c:	000aa583          	lw	a1,0(s5)
20413a90:	004aa603          	lw	a2,4(s5)
20413a94:	008a8693          	addi	a3,s5,8
20413a98:	1108                	addi	a0,sp,160
20413a9a:	c246                	sw	a7,4(sp)
20413a9c:	d636                	sw	a3,44(sp)
20413a9e:	1150b0ef          	jal	ra,2041f3b2 <__extenddftf2>
20413aa2:	578a                	lw	a5,160(sp)
20413aa4:	4892                	lw	a7,4(sp)
20413aa6:	d1be                	sw	a5,224(sp)
20413aa8:	579a                	lw	a5,164(sp)
20413aaa:	d3be                	sw	a5,228(sp)
20413aac:	57aa                	lw	a5,168(sp)
20413aae:	d5be                	sw	a5,232(sp)
20413ab0:	57ba                	lw	a5,172(sp)
20413ab2:	d7be                	sw	a5,236(sp)
20413ab4:	bf95                	j	20413a28 <_svfprintf_r+0x36a>
20413ab6:	204214b7          	lui	s1,0x20421
20413aba:	73448493          	addi	s1,s1,1844 # 20421734 <zeroes.4369+0x48>
20413abe:	bf6d                	j	20413a78 <_svfprintf_r+0x3ba>
20413ac0:	4785                	li	a5,1
20413ac2:	02f51063          	bne	a0,a5,20413ae2 <_svfprintf_r+0x424>
20413ac6:	04700793          	li	a5,71
20413aca:	01a7c763          	blt	a5,s10,20413ad8 <_svfprintf_r+0x41a>
20413ace:	204214b7          	lui	s1,0x20421
20413ad2:	73848493          	addi	s1,s1,1848 # 20421738 <zeroes.4369+0x4c>
20413ad6:	b74d                	j	20413a78 <_svfprintf_r+0x3ba>
20413ad8:	204214b7          	lui	s1,0x20421
20413adc:	73c48493          	addi	s1,s1,1852 # 2042173c <zeroes.4369+0x50>
20413ae0:	bf61                	j	20413a78 <_svfprintf_r+0x3ba>
20413ae2:	fdfd7b93          	andi	s7,s10,-33
20413ae6:	04100793          	li	a5,65
20413aea:	08fb9963          	bne	s7,a5,20413b7c <_svfprintf_r+0x4be>
20413aee:	03000793          	li	a5,48
20413af2:	0af10c23          	sb	a5,184(sp)
20413af6:	06100713          	li	a4,97
20413afa:	05800793          	li	a5,88
20413afe:	00ed1463          	bne	s10,a4,20413b06 <_svfprintf_r+0x448>
20413b02:	07800793          	li	a5,120
20413b06:	0af10ca3          	sb	a5,185(sp)
20413b0a:	06300793          	li	a5,99
20413b0e:	00246413          	ori	s0,s0,2
20413b12:	3967d563          	ble	s6,a5,20413e9c <_svfprintf_r+0x7de>
20413b16:	001b0593          	addi	a1,s6,1
20413b1a:	854a                	mv	a0,s2
20413b1c:	c246                	sw	a7,4(sp)
20413b1e:	7fa050ef          	jal	ra,20419318 <_malloc_r>
20413b22:	84aa                	mv	s1,a0
20413b24:	4892                	lw	a7,4(sp)
20413b26:	36051e63          	bnez	a0,20413ea2 <_svfprintf_r+0x7e4>
20413b2a:	00c9d783          	lhu	a5,12(s3)
20413b2e:	0407e793          	ori	a5,a5,64
20413b32:	00f99623          	sh	a5,12(s3)
20413b36:	00c9d783          	lhu	a5,12(s3)
20413b3a:	0407f793          	andi	a5,a5,64
20413b3e:	be079fe3          	bnez	a5,2041373c <_svfprintf_r+0x7e>
20413b42:	1dc12083          	lw	ra,476(sp)
20413b46:	1d812403          	lw	s0,472(sp)
20413b4a:	5572                	lw	a0,60(sp)
20413b4c:	1d412483          	lw	s1,468(sp)
20413b50:	1d012903          	lw	s2,464(sp)
20413b54:	1cc12983          	lw	s3,460(sp)
20413b58:	1c812a03          	lw	s4,456(sp)
20413b5c:	1c412a83          	lw	s5,452(sp)
20413b60:	1c012b03          	lw	s6,448(sp)
20413b64:	1bc12b83          	lw	s7,444(sp)
20413b68:	1b812c03          	lw	s8,440(sp)
20413b6c:	1b412c83          	lw	s9,436(sp)
20413b70:	1b012d03          	lw	s10,432(sp)
20413b74:	1ac12d83          	lw	s11,428(sp)
20413b78:	613d                	addi	sp,sp,480
20413b7a:	8082                	ret
20413b7c:	57fd                	li	a5,-1
20413b7e:	32fb0463          	beq	s6,a5,20413ea6 <_svfprintf_r+0x7e8>
20413b82:	04700793          	li	a5,71
20413b86:	d202                	sw	zero,36(sp)
20413b88:	00fb9463          	bne	s7,a5,20413b90 <_svfprintf_r+0x4d2>
20413b8c:	320b0063          	beqz	s6,20413eac <_svfprintf_r+0x7ee>
20413b90:	5abe                	lw	s5,236(sp)
20413b92:	10046713          	ori	a4,s0,256
20413b96:	da3a                	sw	a4,52(sp)
20413b98:	c682                	sw	zero,76(sp)
20413b9a:	5e0e                	lw	t3,224(sp)
20413b9c:	5d9e                	lw	s11,228(sp)
20413b9e:	5cae                	lw	s9,232(sp)
20413ba0:	000ad963          	bgez	s5,20413bb2 <_svfprintf_r+0x4f4>
20413ba4:	800007b7          	lui	a5,0x80000
20413ba8:	0157cab3          	xor	s5,a5,s5
20413bac:	02d00793          	li	a5,45
20413bb0:	c6be                	sw	a5,76(sp)
20413bb2:	04100793          	li	a5,65
20413bb6:	32fb9863          	bne	s7,a5,20413ee6 <_svfprintf_r+0x828>
20413bba:	1108                	addi	a0,sp,160
20413bbc:	c246                	sw	a7,4(sp)
20413bbe:	d172                	sw	t3,160(sp)
20413bc0:	d36e                	sw	s11,164(sp)
20413bc2:	d566                	sw	s9,168(sp)
20413bc4:	d756                	sw	s5,172(sp)
20413bc6:	1570b0ef          	jal	ra,2041f51c <__trunctfdf2>
20413bca:	1970                	addi	a2,sp,188
20413bcc:	151060ef          	jal	ra,2041a51c <frexp>
20413bd0:	862e                	mv	a2,a1
20413bd2:	85aa                	mv	a1,a0
20413bd4:	1108                	addi	a0,sp,160
20413bd6:	7dc0b0ef          	jal	ra,2041f3b2 <__extenddftf2>
20413bda:	558a                	lw	a1,160(sp)
20413bdc:	204217b7          	lui	a5,0x20421
20413be0:	70078793          	addi	a5,a5,1792 # 20421700 <zeroes.4369+0x14>
20413be4:	c12e                	sw	a1,128(sp)
20413be6:	559a                	lw	a1,164(sp)
20413be8:	4390                	lw	a2,0(a5)
20413bea:	43d4                	lw	a3,4(a5)
20413bec:	c32e                	sw	a1,132(sp)
20413bee:	55aa                	lw	a1,168(sp)
20413bf0:	4798                	lw	a4,8(a5)
20413bf2:	47dc                	lw	a5,12(a5)
20413bf4:	c52e                	sw	a1,136(sp)
20413bf6:	55ba                	lw	a1,172(sp)
20413bf8:	d8b2                	sw	a2,112(sp)
20413bfa:	0908                	addi	a0,sp,144
20413bfc:	c72e                	sw	a1,140(sp)
20413bfe:	1890                	addi	a2,sp,112
20413c00:	010c                	addi	a1,sp,128
20413c02:	dab6                	sw	a3,116(sp)
20413c04:	dcba                	sw	a4,120(sp)
20413c06:	debe                	sw	a5,124(sp)
20413c08:	34f090ef          	jal	ra,2041d756 <__multf3>
20413c0c:	43ca                	lw	t2,144(sp)
20413c0e:	485a                	lw	a6,148(sp)
20413c10:	4dea                	lw	s11,152(sp)
20413c12:	4cfa                	lw	s9,156(sp)
20413c14:	090c                	addi	a1,sp,144
20413c16:	1108                	addi	a0,sp,160
20413c18:	d11e                	sw	t2,160(sp)
20413c1a:	d342                	sw	a6,164(sp)
20413c1c:	d01e                	sw	t2,32(sp)
20413c1e:	cc42                	sw	a6,24(sp)
20413c20:	d56e                	sw	s11,168(sp)
20413c22:	d766                	sw	s9,172(sp)
20413c24:	c902                	sw	zero,144(sp)
20413c26:	cb02                	sw	zero,148(sp)
20413c28:	cd02                	sw	zero,152(sp)
20413c2a:	cf02                	sw	zero,156(sp)
20413c2c:	061090ef          	jal	ra,2041d48c <__eqtf2>
20413c30:	5382                	lw	t2,32(sp)
20413c32:	4862                	lw	a6,24(sp)
20413c34:	4892                	lw	a7,4(sp)
20413c36:	e119                	bnez	a0,20413c3c <_svfprintf_r+0x57e>
20413c38:	4785                	li	a5,1
20413c3a:	df3e                	sw	a5,188(sp)
20413c3c:	06100793          	li	a5,97
20413c40:	26fd1963          	bne	s10,a5,20413eb2 <_svfprintf_r+0x7f4>
20413c44:	20421a37          	lui	s4,0x20421
20413c48:	740a0a13          	addi	s4,s4,1856 # 20421740 <zeroes.4369+0x54>
20413c4c:	20421737          	lui	a4,0x20421
20413c50:	71070713          	addi	a4,a4,1808 # 20421710 <zeroes.4369+0x24>
20413c54:	4314                	lw	a3,0(a4)
20413c56:	435c                	lw	a5,4(a4)
20413c58:	fffb0e13          	addi	t3,s6,-1
20413c5c:	d0b6                	sw	a3,96(sp)
20413c5e:	4714                	lw	a3,8(a4)
20413c60:	4758                	lw	a4,12(a4)
20413c62:	8c26                	mv	s8,s1
20413c64:	d2be                	sw	a5,100(sp)
20413c66:	d4b6                	sw	a3,104(sp)
20413c68:	d6ba                	sw	a4,108(sp)
20413c6a:	5706                	lw	a4,96(sp)
20413c6c:	5796                	lw	a5,100(sp)
20413c6e:	56a6                	lw	a3,104(sp)
20413c70:	c13a                	sw	a4,128(sp)
20413c72:	5736                	lw	a4,108(sp)
20413c74:	090c                	addi	a1,sp,144
20413c76:	0110                	addi	a2,sp,128
20413c78:	1108                	addi	a0,sp,160
20413c7a:	c246                	sw	a7,4(sp)
20413c7c:	c472                	sw	t3,8(sp)
20413c7e:	c91e                	sw	t2,144(sp)
20413c80:	cb42                	sw	a6,148(sp)
20413c82:	c33e                	sw	a5,132(sp)
20413c84:	c73a                	sw	a4,140(sp)
20413c86:	cd6e                	sw	s11,152(sp)
20413c88:	cf66                	sw	s9,156(sp)
20413c8a:	c536                	sw	a3,136(sp)
20413c8c:	2cb090ef          	jal	ra,2041d756 <__multf3>
20413c90:	560a                	lw	a2,160(sp)
20413c92:	569a                	lw	a3,164(sp)
20413c94:	1108                	addi	a0,sp,160
20413c96:	d032                	sw	a2,32(sp)
20413c98:	cc36                	sw	a3,24(sp)
20413c9a:	5340b0ef          	jal	ra,2041f1ce <__fixtfsi>
20413c9e:	85aa                	mv	a1,a0
20413ca0:	8aaa                	mv	s5,a0
20413ca2:	1108                	addi	a0,sp,160
20413ca4:	5daa                	lw	s11,168(sp)
20413ca6:	5cba                	lw	s9,172(sp)
20413ca8:	61c0b0ef          	jal	ra,2041f2c4 <__floatsitf>
20413cac:	570a                	lw	a4,160(sp)
20413cae:	5602                	lw	a2,32(sp)
20413cb0:	46e2                	lw	a3,24(sp)
20413cb2:	d8ba                	sw	a4,112(sp)
20413cb4:	571a                	lw	a4,164(sp)
20413cb6:	c132                	sw	a2,128(sp)
20413cb8:	010c                	addi	a1,sp,128
20413cba:	daba                	sw	a4,116(sp)
20413cbc:	572a                	lw	a4,168(sp)
20413cbe:	1890                	addi	a2,sp,112
20413cc0:	0908                	addi	a0,sp,144
20413cc2:	dcba                	sw	a4,120(sp)
20413cc4:	573a                	lw	a4,172(sp)
20413cc6:	c56e                	sw	s11,136(sp)
20413cc8:	c766                	sw	s9,140(sp)
20413cca:	deba                	sw	a4,124(sp)
20413ccc:	c336                	sw	a3,132(sp)
20413cce:	65e0a0ef          	jal	ra,2041e32c <__subtf3>
20413cd2:	015a0733          	add	a4,s4,s5
20413cd6:	00074703          	lbu	a4,0(a4)
20413cda:	0c05                	addi	s8,s8,1
20413cdc:	4f6a                	lw	t5,152(sp)
20413cde:	4efa                	lw	t4,156(sp)
20413ce0:	42ca                	lw	t0,144(sp)
20413ce2:	4fda                	lw	t6,148(sp)
20413ce4:	feec0fa3          	sb	a4,-1(s8)
20413ce8:	4e22                	lw	t3,8(sp)
20413cea:	577d                	li	a4,-1
20413cec:	8dfa                	mv	s11,t5
20413cee:	cef2                	sw	t3,92(sp)
20413cf0:	8cf6                	mv	s9,t4
20413cf2:	4892                	lw	a7,4(sp)
20413cf4:	02ee0f63          	beq	t3,a4,20413d32 <_svfprintf_r+0x674>
20413cf8:	1e7d                	addi	t3,t3,-1
20413cfa:	090c                	addi	a1,sp,144
20413cfc:	1108                	addi	a0,sp,160
20413cfe:	d116                	sw	t0,160(sp)
20413d00:	d37e                	sw	t6,164(sp)
20413d02:	d57a                	sw	t5,168(sp)
20413d04:	d776                	sw	t4,172(sp)
20413d06:	ce16                	sw	t0,28(sp)
20413d08:	d016                	sw	t0,32(sp)
20413d0a:	cc7e                	sw	t6,24(sp)
20413d0c:	c472                	sw	t3,8(sp)
20413d0e:	c676                	sw	t4,12(sp)
20413d10:	c87a                	sw	t5,16(sp)
20413d12:	ca7e                	sw	t6,20(sp)
20413d14:	c902                	sw	zero,144(sp)
20413d16:	cb02                	sw	zero,148(sp)
20413d18:	cd02                	sw	zero,152(sp)
20413d1a:	cf02                	sw	zero,156(sp)
20413d1c:	770090ef          	jal	ra,2041d48c <__eqtf2>
20413d20:	42f2                	lw	t0,28(sp)
20413d22:	5382                	lw	t2,32(sp)
20413d24:	4862                	lw	a6,24(sp)
20413d26:	4892                	lw	a7,4(sp)
20413d28:	4e22                	lw	t3,8(sp)
20413d2a:	4eb2                	lw	t4,12(sp)
20413d2c:	4f42                	lw	t5,16(sp)
20413d2e:	4fd2                	lw	t6,20(sp)
20413d30:	fd0d                	bnez	a0,20413c6a <_svfprintf_r+0x5ac>
20413d32:	20421737          	lui	a4,0x20421
20413d36:	72070713          	addi	a4,a4,1824 # 20421720 <zeroes.4369+0x34>
20413d3a:	4310                	lw	a2,0(a4)
20413d3c:	4354                	lw	a3,4(a4)
20413d3e:	00872d83          	lw	s11,8(a4)
20413d42:	00c72c83          	lw	s9,12(a4)
20413d46:	090c                	addi	a1,sp,144
20413d48:	1108                	addi	a0,sp,160
20413d4a:	d116                	sw	t0,160(sp)
20413d4c:	d37e                	sw	t6,164(sp)
20413d4e:	d57a                	sw	t5,168(sp)
20413d50:	d776                	sw	t4,172(sp)
20413d52:	c932                	sw	a2,144(sp)
20413d54:	cb36                	sw	a3,148(sp)
20413d56:	ce16                	sw	t0,28(sp)
20413d58:	d032                	sw	a2,32(sp)
20413d5a:	cc36                	sw	a3,24(sp)
20413d5c:	c246                	sw	a7,4(sp)
20413d5e:	c676                	sw	t4,12(sp)
20413d60:	c87a                	sw	t5,16(sp)
20413d62:	ca7e                	sw	t6,20(sp)
20413d64:	cd6e                	sw	s11,152(sp)
20413d66:	cf66                	sw	s9,156(sp)
20413d68:	7ca090ef          	jal	ra,2041d532 <__getf2>
20413d6c:	42f2                	lw	t0,28(sp)
20413d6e:	5602                	lw	a2,32(sp)
20413d70:	46e2                	lw	a3,24(sp)
20413d72:	4892                	lw	a7,4(sp)
20413d74:	4eb2                	lw	t4,12(sp)
20413d76:	4f42                	lw	t5,16(sp)
20413d78:	4fd2                	lw	t6,20(sp)
20413d7a:	02a04563          	bgtz	a0,20413da4 <_svfprintf_r+0x6e6>
20413d7e:	090c                	addi	a1,sp,144
20413d80:	1108                	addi	a0,sp,160
20413d82:	d116                	sw	t0,160(sp)
20413d84:	d37e                	sw	t6,164(sp)
20413d86:	d57a                	sw	t5,168(sp)
20413d88:	d776                	sw	t4,172(sp)
20413d8a:	c932                	sw	a2,144(sp)
20413d8c:	cb36                	sw	a3,148(sp)
20413d8e:	cd6e                	sw	s11,152(sp)
20413d90:	cf66                	sw	s9,156(sp)
20413d92:	6fa090ef          	jal	ra,2041d48c <__eqtf2>
20413d96:	4892                	lw	a7,4(sp)
20413d98:	14051163          	bnez	a0,20413eda <_svfprintf_r+0x81c>
20413d9c:	001afa93          	andi	s5,s5,1
20413da0:	120a8d63          	beqz	s5,20413eda <_svfprintf_r+0x81c>
20413da4:	00fa4603          	lbu	a2,15(s4)
20413da8:	c7e2                	sw	s8,204(sp)
20413daa:	03000593          	li	a1,48
20413dae:	46be                	lw	a3,204(sp)
20413db0:	fff68713          	addi	a4,a3,-1
20413db4:	c7ba                	sw	a4,204(sp)
20413db6:	fff6c703          	lbu	a4,-1(a3)
20413dba:	10c70163          	beq	a4,a2,20413ebc <_svfprintf_r+0x7fe>
20413dbe:	03900613          	li	a2,57
20413dc2:	10c71063          	bne	a4,a2,20413ec2 <_svfprintf_r+0x804>
20413dc6:	00aa4703          	lbu	a4,10(s4)
20413dca:	fee68fa3          	sb	a4,-1(a3)
20413dce:	8a62                	mv	s4,s8
20413dd0:	04700713          	li	a4,71
20413dd4:	409a0a33          	sub	s4,s4,s1
20413dd8:	5cfa                	lw	s9,188(sp)
20413dda:	1ceb9e63          	bne	s7,a4,20413fb6 <_svfprintf_r+0x8f8>
20413dde:	5775                	li	a4,-3
20413de0:	00ecc463          	blt	s9,a4,20413de8 <_svfprintf_r+0x72a>
20413de4:	239b5d63          	ble	s9,s6,2041401e <_svfprintf_r+0x960>
20413de8:	1d79                	addi	s10,s10,-2
20413dea:	fffc8693          	addi	a3,s9,-1
20413dee:	df36                	sw	a3,188(sp)
20413df0:	fdfd7613          	andi	a2,s10,-33
20413df4:	04100513          	li	a0,65
20413df8:	0ffd7713          	andi	a4,s10,255
20413dfc:	4581                	li	a1,0
20413dfe:	00a61663          	bne	a2,a0,20413e0a <_svfprintf_r+0x74c>
20413e02:	073d                	addi	a4,a4,15
20413e04:	0ff77713          	andi	a4,a4,255
20413e08:	4585                	li	a1,1
20413e0a:	0ce10223          	sb	a4,196(sp)
20413e0e:	02b00793          	li	a5,43
20413e12:	0006d763          	bgez	a3,20413e20 <_svfprintf_r+0x762>
20413e16:	4685                	li	a3,1
20413e18:	419686b3          	sub	a3,a3,s9
20413e1c:	02d00793          	li	a5,45
20413e20:	0cf102a3          	sb	a5,197(sp)
20413e24:	47a5                	li	a5,9
20413e26:	1cd7d363          	ble	a3,a5,20413fec <_svfprintf_r+0x92e>
20413e2a:	0d310713          	addi	a4,sp,211
20413e2e:	853a                	mv	a0,a4
20413e30:	45a9                	li	a1,10
20413e32:	4825                	li	a6,9
20413e34:	02b6e7b3          	rem	a5,a3,a1
20413e38:	fff70613          	addi	a2,a4,-1
20413e3c:	02b6c6b3          	div	a3,a3,a1
20413e40:	03078793          	addi	a5,a5,48
20413e44:	fef70fa3          	sb	a5,-1(a4)
20413e48:	18d84963          	blt	a6,a3,20413fda <_svfprintf_r+0x91c>
20413e4c:	03068793          	addi	a5,a3,48
20413e50:	fef60fa3          	sb	a5,-1(a2)
20413e54:	1779                	addi	a4,a4,-2
20413e56:	0c610613          	addi	a2,sp,198
20413e5a:	18a76263          	bltu	a4,a0,20413fde <_svfprintf_r+0x920>
20413e5e:	01dc                	addi	a5,sp,196
20413e60:	40f607b3          	sub	a5,a2,a5
20413e64:	cabe                	sw	a5,84(sp)
20413e66:	01478b33          	add	s6,a5,s4
20413e6a:	4785                	li	a5,1
20413e6c:	0147c563          	blt	a5,s4,20413e76 <_svfprintf_r+0x7b8>
20413e70:	00147793          	andi	a5,s0,1
20413e74:	c399                	beqz	a5,20413e7a <_svfprintf_r+0x7bc>
20413e76:	55e2                	lw	a1,56(sp)
20413e78:	9b2e                	add	s6,s6,a1
20413e7a:	bff47413          	andi	s0,s0,-1025
20413e7e:	10046413          	ori	s0,s0,256
20413e82:	da22                	sw	s0,52(sp)
20413e84:	4c01                	li	s8,0
20413e86:	4b81                	li	s7,0
20413e88:	4c81                	li	s9,0
20413e8a:	4736                	lw	a4,76(sp)
20413e8c:	c709                	beqz	a4,20413e96 <_svfprintf_r+0x7d8>
20413e8e:	02d00713          	li	a4,45
20413e92:	0ae10ba3          	sb	a4,183(sp)
20413e96:	5452                	lw	s0,52(sp)
20413e98:	4a81                	li	s5,0
20413e9a:	ae2d                	j	204141d4 <_svfprintf_r+0xb16>
20413e9c:	d202                	sw	zero,36(sp)
20413e9e:	1a64                	addi	s1,sp,316
20413ea0:	b9c5                	j	20413b90 <_svfprintf_r+0x4d2>
20413ea2:	d22a                	sw	a0,36(sp)
20413ea4:	b1f5                	j	20413b90 <_svfprintf_r+0x4d2>
20413ea6:	d202                	sw	zero,36(sp)
20413ea8:	4b19                	li	s6,6
20413eaa:	b1dd                	j	20413b90 <_svfprintf_r+0x4d2>
20413eac:	d25a                	sw	s6,36(sp)
20413eae:	4b05                	li	s6,1
20413eb0:	b1c5                	j	20413b90 <_svfprintf_r+0x4d2>
20413eb2:	20421a37          	lui	s4,0x20421
20413eb6:	754a0a13          	addi	s4,s4,1876 # 20421754 <zeroes.4369+0x68>
20413eba:	bb49                	j	20413c4c <_svfprintf_r+0x58e>
20413ebc:	feb68fa3          	sb	a1,-1(a3)
20413ec0:	b5fd                	j	20413dae <_svfprintf_r+0x6f0>
20413ec2:	0705                	addi	a4,a4,1
20413ec4:	0ff77713          	andi	a4,a4,255
20413ec8:	b709                	j	20413dca <_svfprintf_r+0x70c>
20413eca:	0a05                	addi	s4,s4,1
20413ecc:	feea0fa3          	sb	a4,-1(s4)
20413ed0:	414c07b3          	sub	a5,s8,s4
20413ed4:	fe07dbe3          	bgez	a5,20413eca <_svfprintf_r+0x80c>
20413ed8:	bde5                	j	20413dd0 <_svfprintf_r+0x712>
20413eda:	47f6                	lw	a5,92(sp)
20413edc:	8a62                	mv	s4,s8
20413ede:	03000713          	li	a4,48
20413ee2:	9c3e                	add	s8,s8,a5
20413ee4:	b7f5                	j	20413ed0 <_svfprintf_r+0x812>
20413ee6:	04600793          	li	a5,70
20413eea:	00fb8b63          	beq	s7,a5,20413f00 <_svfprintf_r+0x842>
20413eee:	04500793          	li	a5,69
20413ef2:	001b0c13          	addi	s8,s6,1
20413ef6:	00fb8363          	beq	s7,a5,20413efc <_svfprintf_r+0x83e>
20413efa:	8c5a                	mv	s8,s6
20413efc:	4609                	li	a2,2
20413efe:	a019                	j	20413f04 <_svfprintf_r+0x846>
20413f00:	8c5a                	mv	s8,s6
20413f02:	460d                	li	a2,3
20413f04:	019c                	addi	a5,sp,192
20413f06:	0cc10813          	addi	a6,sp,204
20413f0a:	1978                	addi	a4,sp,188
20413f0c:	86e2                	mv	a3,s8
20413f0e:	110c                	addi	a1,sp,160
20413f10:	854a                	mv	a0,s2
20413f12:	d172                	sw	t3,160(sp)
20413f14:	c246                	sw	a7,4(sp)
20413f16:	c472                	sw	t3,8(sp)
20413f18:	d36e                	sw	s11,164(sp)
20413f1a:	d566                	sw	s9,168(sp)
20413f1c:	d756                	sw	s5,172(sp)
20413f1e:	173040ef          	jal	ra,20418890 <_ldtoa_r>
20413f22:	04700793          	li	a5,71
20413f26:	84aa                	mv	s1,a0
20413f28:	4892                	lw	a7,4(sp)
20413f2a:	4e22                	lw	t3,8(sp)
20413f2c:	00fb9563          	bne	s7,a5,20413f36 <_svfprintf_r+0x878>
20413f30:	00147793          	andi	a5,s0,1
20413f34:	c7b5                	beqz	a5,20413fa0 <_svfprintf_r+0x8e2>
20413f36:	04600793          	li	a5,70
20413f3a:	01848a33          	add	s4,s1,s8
20413f3e:	02fb9f63          	bne	s7,a5,20413f7c <_svfprintf_r+0x8be>
20413f42:	0004c703          	lbu	a4,0(s1)
20413f46:	03000793          	li	a5,48
20413f4a:	02f71763          	bne	a4,a5,20413f78 <_svfprintf_r+0x8ba>
20413f4e:	090c                	addi	a1,sp,144
20413f50:	1108                	addi	a0,sp,160
20413f52:	d172                	sw	t3,160(sp)
20413f54:	c246                	sw	a7,4(sp)
20413f56:	c472                	sw	t3,8(sp)
20413f58:	d36e                	sw	s11,164(sp)
20413f5a:	d566                	sw	s9,168(sp)
20413f5c:	d756                	sw	s5,172(sp)
20413f5e:	c902                	sw	zero,144(sp)
20413f60:	cb02                	sw	zero,148(sp)
20413f62:	cd02                	sw	zero,152(sp)
20413f64:	cf02                	sw	zero,156(sp)
20413f66:	526090ef          	jal	ra,2041d48c <__eqtf2>
20413f6a:	4892                	lw	a7,4(sp)
20413f6c:	4e22                	lw	t3,8(sp)
20413f6e:	c509                	beqz	a0,20413f78 <_svfprintf_r+0x8ba>
20413f70:	4785                	li	a5,1
20413f72:	41878c33          	sub	s8,a5,s8
20413f76:	df62                	sw	s8,188(sp)
20413f78:	57fa                	lw	a5,188(sp)
20413f7a:	9a3e                	add	s4,s4,a5
20413f7c:	090c                	addi	a1,sp,144
20413f7e:	1108                	addi	a0,sp,160
20413f80:	c246                	sw	a7,4(sp)
20413f82:	d172                	sw	t3,160(sp)
20413f84:	d36e                	sw	s11,164(sp)
20413f86:	d566                	sw	s9,168(sp)
20413f88:	d756                	sw	s5,172(sp)
20413f8a:	c902                	sw	zero,144(sp)
20413f8c:	cb02                	sw	zero,148(sp)
20413f8e:	cd02                	sw	zero,152(sp)
20413f90:	cf02                	sw	zero,156(sp)
20413f92:	4fa090ef          	jal	ra,2041d48c <__eqtf2>
20413f96:	4892                	lw	a7,4(sp)
20413f98:	03000713          	li	a4,48
20413f9c:	e909                	bnez	a0,20413fae <_svfprintf_r+0x8f0>
20413f9e:	c7d2                	sw	s4,204(sp)
20413fa0:	4a3e                	lw	s4,204(sp)
20413fa2:	b53d                	j	20413dd0 <_svfprintf_r+0x712>
20413fa4:	00178693          	addi	a3,a5,1
20413fa8:	c7b6                	sw	a3,204(sp)
20413faa:	00e78023          	sb	a4,0(a5)
20413fae:	47be                	lw	a5,204(sp)
20413fb0:	ff47eae3          	bltu	a5,s4,20413fa4 <_svfprintf_r+0x8e6>
20413fb4:	b7f5                	j	20413fa0 <_svfprintf_r+0x8e2>
20413fb6:	04600713          	li	a4,70
20413fba:	e2eb98e3          	bne	s7,a4,20413dea <_svfprintf_r+0x72c>
20413fbe:	05905763          	blez	s9,2041400c <_svfprintf_r+0x94e>
20413fc2:	000b1563          	bnez	s6,20413fcc <_svfprintf_r+0x90e>
20413fc6:	00147713          	andi	a4,s0,1
20413fca:	cf41                	beqz	a4,20414062 <_svfprintf_r+0x9a4>
20413fcc:	5662                	lw	a2,56(sp)
20413fce:	00cc8733          	add	a4,s9,a2
20413fd2:	9b3a                	add	s6,s6,a4
20413fd4:	06600d13          	li	s10,102
20413fd8:	a895                	j	2041404c <_svfprintf_r+0x98e>
20413fda:	8732                	mv	a4,a2
20413fdc:	bda1                	j	20413e34 <_svfprintf_r+0x776>
20413fde:	0705                	addi	a4,a4,1
20413fe0:	fff74783          	lbu	a5,-1(a4)
20413fe4:	0605                	addi	a2,a2,1
20413fe6:	fef60fa3          	sb	a5,-1(a2)
20413fea:	bd85                	j	20413e5a <_svfprintf_r+0x79c>
20413fec:	0c610713          	addi	a4,sp,198
20413ff0:	e599                	bnez	a1,20413ffe <_svfprintf_r+0x940>
20413ff2:	03000793          	li	a5,48
20413ff6:	0cf10323          	sb	a5,198(sp)
20413ffa:	0c710713          	addi	a4,sp,199
20413ffe:	03068793          	addi	a5,a3,48
20414002:	00170613          	addi	a2,a4,1
20414006:	00f70023          	sb	a5,0(a4)
2041400a:	bd91                	j	20413e5e <_svfprintf_r+0x7a0>
2041400c:	000b1563          	bnez	s6,20414016 <_svfprintf_r+0x958>
20414010:	00147713          	andi	a4,s0,1
20414014:	cb29                	beqz	a4,20414066 <_svfprintf_r+0x9a8>
20414016:	56e2                	lw	a3,56(sp)
20414018:	00168713          	addi	a4,a3,1
2041401c:	bf5d                	j	20413fd2 <_svfprintf_r+0x914>
2041401e:	014ccc63          	blt	s9,s4,20414036 <_svfprintf_r+0x978>
20414022:	00147713          	andi	a4,s0,1
20414026:	8b66                	mv	s6,s9
20414028:	c701                	beqz	a4,20414030 <_svfprintf_r+0x972>
2041402a:	5762                	lw	a4,56(sp)
2041402c:	00ec8b33          	add	s6,s9,a4
20414030:	06700d13          	li	s10,103
20414034:	a821                	j	2041404c <_svfprintf_r+0x98e>
20414036:	57e2                	lw	a5,56(sp)
20414038:	06700d13          	li	s10,103
2041403c:	00fa0b33          	add	s6,s4,a5
20414040:	01904663          	bgtz	s9,2041404c <_svfprintf_r+0x98e>
20414044:	419b0333          	sub	t1,s6,s9
20414048:	00130b13          	addi	s6,t1,1
2041404c:	40047b93          	andi	s7,s0,1024
20414050:	4c01                	li	s8,0
20414052:	e20b8ce3          	beqz	s7,20413e8a <_svfprintf_r+0x7cc>
20414056:	4b81                	li	s7,0
20414058:	e39059e3          	blez	s9,20413e8a <_svfprintf_r+0x7cc>
2041405c:	0ff00693          	li	a3,255
20414060:	a015                	j	20414084 <_svfprintf_r+0x9c6>
20414062:	8b66                	mv	s6,s9
20414064:	bf85                	j	20413fd4 <_svfprintf_r+0x916>
20414066:	06600d13          	li	s10,102
2041406a:	4b05                	li	s6,1
2041406c:	b7c5                	j	2041404c <_svfprintf_r+0x98e>
2041406e:	03975063          	ble	s9,a4,2041408e <_svfprintf_r+0x9d0>
20414072:	55a2                	lw	a1,40(sp)
20414074:	40ec8cb3          	sub	s9,s9,a4
20414078:	0015c703          	lbu	a4,1(a1)
2041407c:	c305                	beqz	a4,2041409c <_svfprintf_r+0x9de>
2041407e:	0585                	addi	a1,a1,1
20414080:	0b85                	addi	s7,s7,1
20414082:	d42e                	sw	a1,40(sp)
20414084:	5622                	lw	a2,40(sp)
20414086:	00064703          	lbu	a4,0(a2)
2041408a:	fed712e3          	bne	a4,a3,2041406e <_svfprintf_r+0x9b0>
2041408e:	4696                	lw	a3,68(sp)
20414090:	018b8733          	add	a4,s7,s8
20414094:	02d70733          	mul	a4,a4,a3
20414098:	9b3a                	add	s6,s6,a4
2041409a:	bbc5                	j	20413e8a <_svfprintf_r+0x7cc>
2041409c:	0c05                	addi	s8,s8,1
2041409e:	b7dd                	j	20414084 <_svfprintf_r+0x9c6>
204140a0:	000aa783          	lw	a5,0(s5)
204140a4:	0a91                	addi	s5,s5,4
204140a6:	d656                	sw	s5,44(sp)
204140a8:	02047713          	andi	a4,s0,32
204140ac:	cb11                	beqz	a4,204140c0 <_svfprintf_r+0xa02>
204140ae:	55f2                	lw	a1,60(sp)
204140b0:	41f5d713          	srai	a4,a1,0x1f
204140b4:	c38c                	sw	a1,0(a5)
204140b6:	c3d8                	sw	a4,4(a5)
204140b8:	5ab2                	lw	s5,44(sp)
204140ba:	54c2                	lw	s1,48(sp)
204140bc:	ea6ff06f          	j	20413762 <_svfprintf_r+0xa4>
204140c0:	01047713          	andi	a4,s0,16
204140c4:	c701                	beqz	a4,204140cc <_svfprintf_r+0xa0e>
204140c6:	5672                	lw	a2,60(sp)
204140c8:	c390                	sw	a2,0(a5)
204140ca:	b7fd                	j	204140b8 <_svfprintf_r+0x9fa>
204140cc:	04047713          	andi	a4,s0,64
204140d0:	c709                	beqz	a4,204140da <_svfprintf_r+0xa1c>
204140d2:	5772                	lw	a4,60(sp)
204140d4:	00e79023          	sh	a4,0(a5)
204140d8:	b7c5                	j	204140b8 <_svfprintf_r+0x9fa>
204140da:	20047413          	andi	s0,s0,512
204140de:	c409                	beqz	s0,204140e8 <_svfprintf_r+0xa2a>
204140e0:	5772                	lw	a4,60(sp)
204140e2:	00e78023          	sb	a4,0(a5)
204140e6:	bfc9                	j	204140b8 <_svfprintf_r+0x9fa>
204140e8:	56f2                	lw	a3,60(sp)
204140ea:	c394                	sw	a3,0(a5)
204140ec:	b7f1                	j	204140b8 <_svfprintf_r+0x9fa>
204140ee:	01046413          	ori	s0,s0,16
204140f2:	02047793          	andi	a5,s0,32
204140f6:	c3a1                	beqz	a5,20414136 <_svfprintf_r+0xa78>
204140f8:	0a9d                	addi	s5,s5,7
204140fa:	ff8afa93          	andi	s5,s5,-8
204140fe:	000aac03          	lw	s8,0(s5)
20414102:	004aac83          	lw	s9,4(s5)
20414106:	008a8713          	addi	a4,s5,8
2041410a:	d63a                	sw	a4,44(sp)
2041410c:	bff47413          	andi	s0,s0,-1025
20414110:	4781                	li	a5,0
20414112:	0a010ba3          	sb	zero,183(sp)
20414116:	577d                	li	a4,-1
20414118:	30eb0763          	beq	s6,a4,20414426 <_svfprintf_r+0xd68>
2041411c:	8722                	mv	a4,s0
2041411e:	019c66b3          	or	a3,s8,s9
20414122:	f7f47413          	andi	s0,s0,-129
20414126:	30069063          	bnez	a3,20414426 <_svfprintf_r+0xd68>
2041412a:	400b0663          	beqz	s6,20414536 <_svfprintf_r+0xe78>
2041412e:	4705                	li	a4,1
20414130:	2ee79e63          	bne	a5,a4,2041442c <_svfprintf_r+0xd6e>
20414134:	b079                	j	204139c2 <_svfprintf_r+0x304>
20414136:	004a8793          	addi	a5,s5,4
2041413a:	d63e                	sw	a5,44(sp)
2041413c:	01047793          	andi	a5,s0,16
20414140:	c781                	beqz	a5,20414148 <_svfprintf_r+0xa8a>
20414142:	000aac03          	lw	s8,0(s5)
20414146:	a031                	j	20414152 <_svfprintf_r+0xa94>
20414148:	04047793          	andi	a5,s0,64
2041414c:	c789                	beqz	a5,20414156 <_svfprintf_r+0xa98>
2041414e:	000adc03          	lhu	s8,0(s5)
20414152:	4c81                	li	s9,0
20414154:	bf65                	j	2041410c <_svfprintf_r+0xa4e>
20414156:	20047793          	andi	a5,s0,512
2041415a:	d7e5                	beqz	a5,20414142 <_svfprintf_r+0xa84>
2041415c:	000acc03          	lbu	s8,0(s5)
20414160:	bfcd                	j	20414152 <_svfprintf_r+0xa94>
20414162:	77e1                	lui	a5,0xffff8
20414164:	8307c793          	xori	a5,a5,-2000
20414168:	0af11c23          	sh	a5,184(sp)
2041416c:	204217b7          	lui	a5,0x20421
20414170:	74078793          	addi	a5,a5,1856 # 20421740 <zeroes.4369+0x54>
20414174:	004a8593          	addi	a1,s5,4
20414178:	ccbe                	sw	a5,88(sp)
2041417a:	d62e                	sw	a1,44(sp)
2041417c:	000aac03          	lw	s8,0(s5)
20414180:	4c81                	li	s9,0
20414182:	00246413          	ori	s0,s0,2
20414186:	4789                	li	a5,2
20414188:	07800d13          	li	s10,120
2041418c:	b759                	j	20414112 <_svfprintf_r+0xa54>
2041418e:	004a8613          	addi	a2,s5,4
20414192:	d632                	sw	a2,44(sp)
20414194:	0a010ba3          	sb	zero,183(sp)
20414198:	57fd                	li	a5,-1
2041419a:	000aa483          	lw	s1,0(s5)
2041419e:	02fb0063          	beq	s6,a5,204141be <_svfprintf_r+0xb00>
204141a2:	865a                	mv	a2,s6
204141a4:	4581                	li	a1,0
204141a6:	8526                	mv	a0,s1
204141a8:	c246                	sw	a7,4(sp)
204141aa:	606050ef          	jal	ra,204197b0 <memchr>
204141ae:	d22a                	sw	a0,36(sp)
204141b0:	4892                	lw	a7,4(sp)
204141b2:	8c0507e3          	beqz	a0,20413a80 <_svfprintf_r+0x3c2>
204141b6:	40950b33          	sub	s6,a0,s1
204141ba:	d202                	sw	zero,36(sp)
204141bc:	b0d1                	j	20413a80 <_svfprintf_r+0x3c2>
204141be:	8526                	mv	a0,s1
204141c0:	c246                	sw	a7,4(sp)
204141c2:	986ff0ef          	jal	ra,20413348 <strlen>
204141c6:	4892                	lw	a7,4(sp)
204141c8:	8b2a                	mv	s6,a0
204141ca:	d202                	sw	zero,36(sp)
204141cc:	4a81                	li	s5,0
204141ce:	4c01                	li	s8,0
204141d0:	4b81                	li	s7,0
204141d2:	4c81                	li	s9,0
204141d4:	da56                	sw	s5,52(sp)
204141d6:	016ad363          	ble	s6,s5,204141dc <_svfprintf_r+0xb1e>
204141da:	da5a                	sw	s6,52(sp)
204141dc:	0b714703          	lbu	a4,183(sp)
204141e0:	c701                	beqz	a4,204141e8 <_svfprintf_r+0xb2a>
204141e2:	5752                	lw	a4,52(sp)
204141e4:	0705                	addi	a4,a4,1
204141e6:	da3a                	sw	a4,52(sp)
204141e8:	00247d93          	andi	s11,s0,2
204141ec:	000d8563          	beqz	s11,204141f6 <_svfprintf_r+0xb38>
204141f0:	57d2                	lw	a5,52(sp)
204141f2:	0789                	addi	a5,a5,2
204141f4:	da3e                	sw	a5,52(sp)
204141f6:	08447693          	andi	a3,s0,132
204141fa:	c6b6                	sw	a3,76(sp)
204141fc:	eaa1                	bnez	a3,2041424c <_svfprintf_r+0xb8e>
204141fe:	4706                	lw	a4,64(sp)
20414200:	57d2                	lw	a5,52(sp)
20414202:	40f70e33          	sub	t3,a4,a5
20414206:	05c05363          	blez	t3,2041424c <_svfprintf_r+0xb8e>
2041420a:	20421eb7          	lui	t4,0x20421
2041420e:	4f41                	li	t5,16
20414210:	6dce8e93          	addi	t4,t4,1756 # 204216dc <blanks.4368>
20414214:	4f9d                	li	t6,7
20414216:	46ee                	lw	a3,216(sp)
20414218:	01d8a023          	sw	t4,0(a7)
2041421c:	477e                	lw	a4,220(sp)
2041421e:	0685                	addi	a3,a3,1
20414220:	00888613          	addi	a2,a7,8
20414224:	33cf4d63          	blt	t5,t3,2041455e <_svfprintf_r+0xea0>
20414228:	9772                	add	a4,a4,t3
2041422a:	01c8a223          	sw	t3,4(a7)
2041422e:	cfba                	sw	a4,220(sp)
20414230:	cdb6                	sw	a3,216(sp)
20414232:	471d                	li	a4,7
20414234:	88b2                	mv	a7,a2
20414236:	00d75b63          	ble	a3,a4,2041424c <_svfprintf_r+0xb8e>
2041423a:	09d0                	addi	a2,sp,212
2041423c:	85ce                	mv	a1,s3
2041423e:	854a                	mv	a0,s2
20414240:	64a060ef          	jal	ra,2041a88a <__ssprint_r>
20414244:	260513e3          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414248:	0fc10893          	addi	a7,sp,252
2041424c:	0b714703          	lbu	a4,183(sp)
20414250:	cb1d                	beqz	a4,20414286 <_svfprintf_r+0xbc8>
20414252:	0b710713          	addi	a4,sp,183
20414256:	00e8a023          	sw	a4,0(a7)
2041425a:	4705                	li	a4,1
2041425c:	00e8a223          	sw	a4,4(a7)
20414260:	477e                	lw	a4,220(sp)
20414262:	469d                	li	a3,7
20414264:	08a1                	addi	a7,a7,8
20414266:	0705                	addi	a4,a4,1
20414268:	cfba                	sw	a4,220(sp)
2041426a:	476e                	lw	a4,216(sp)
2041426c:	0705                	addi	a4,a4,1
2041426e:	cdba                	sw	a4,216(sp)
20414270:	00e6db63          	ble	a4,a3,20414286 <_svfprintf_r+0xbc8>
20414274:	09d0                	addi	a2,sp,212
20414276:	85ce                	mv	a1,s3
20414278:	854a                	mv	a0,s2
2041427a:	610060ef          	jal	ra,2041a88a <__ssprint_r>
2041427e:	220516e3          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414282:	0fc10893          	addi	a7,sp,252
20414286:	020d8b63          	beqz	s11,204142bc <_svfprintf_r+0xbfe>
2041428a:	1938                	addi	a4,sp,184
2041428c:	00e8a023          	sw	a4,0(a7)
20414290:	4709                	li	a4,2
20414292:	00e8a223          	sw	a4,4(a7)
20414296:	477e                	lw	a4,220(sp)
20414298:	469d                	li	a3,7
2041429a:	08a1                	addi	a7,a7,8
2041429c:	0709                	addi	a4,a4,2
2041429e:	cfba                	sw	a4,220(sp)
204142a0:	476e                	lw	a4,216(sp)
204142a2:	0705                	addi	a4,a4,1
204142a4:	cdba                	sw	a4,216(sp)
204142a6:	00e6db63          	ble	a4,a3,204142bc <_svfprintf_r+0xbfe>
204142aa:	09d0                	addi	a2,sp,212
204142ac:	85ce                	mv	a1,s3
204142ae:	854a                	mv	a0,s2
204142b0:	5da060ef          	jal	ra,2041a88a <__ssprint_r>
204142b4:	1e051be3          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204142b8:	0fc10893          	addi	a7,sp,252
204142bc:	46b6                	lw	a3,76(sp)
204142be:	08000713          	li	a4,128
204142c2:	04e69963          	bne	a3,a4,20414314 <_svfprintf_r+0xc56>
204142c6:	4706                	lw	a4,64(sp)
204142c8:	57d2                	lw	a5,52(sp)
204142ca:	40f70db3          	sub	s11,a4,a5
204142ce:	05b05363          	blez	s11,20414314 <_svfprintf_r+0xc56>
204142d2:	47c1                	li	a5,16
204142d4:	4e1d                	li	t3,7
204142d6:	476e                	lw	a4,216(sp)
204142d8:	46fe                	lw	a3,220(sp)
204142da:	00888613          	addi	a2,a7,8
204142de:	0705                	addi	a4,a4,1
204142e0:	2bb7c963          	blt	a5,s11,20414592 <_svfprintf_r+0xed4>
204142e4:	204217b7          	lui	a5,0x20421
204142e8:	01b8a223          	sw	s11,4(a7)
204142ec:	6ec78793          	addi	a5,a5,1772 # 204216ec <zeroes.4369>
204142f0:	9db6                	add	s11,s11,a3
204142f2:	00f8a023          	sw	a5,0(a7)
204142f6:	cfee                	sw	s11,220(sp)
204142f8:	cdba                	sw	a4,216(sp)
204142fa:	469d                	li	a3,7
204142fc:	88b2                	mv	a7,a2
204142fe:	00e6db63          	ble	a4,a3,20414314 <_svfprintf_r+0xc56>
20414302:	09d0                	addi	a2,sp,212
20414304:	85ce                	mv	a1,s3
20414306:	854a                	mv	a0,s2
20414308:	582060ef          	jal	ra,2041a88a <__ssprint_r>
2041430c:	18051fe3          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414310:	0fc10893          	addi	a7,sp,252
20414314:	416a8ab3          	sub	s5,s5,s6
20414318:	05505363          	blez	s5,2041435e <_svfprintf_r+0xca0>
2041431c:	4dc1                	li	s11,16
2041431e:	481d                	li	a6,7
20414320:	476e                	lw	a4,216(sp)
20414322:	46fe                	lw	a3,220(sp)
20414324:	00888613          	addi	a2,a7,8
20414328:	0705                	addi	a4,a4,1
2041432a:	2b5dc063          	blt	s11,s5,204145ca <_svfprintf_r+0xf0c>
2041432e:	204217b7          	lui	a5,0x20421
20414332:	0158a223          	sw	s5,4(a7)
20414336:	6ec78793          	addi	a5,a5,1772 # 204216ec <zeroes.4369>
2041433a:	9ab6                	add	s5,s5,a3
2041433c:	00f8a023          	sw	a5,0(a7)
20414340:	cfd6                	sw	s5,220(sp)
20414342:	cdba                	sw	a4,216(sp)
20414344:	469d                	li	a3,7
20414346:	88b2                	mv	a7,a2
20414348:	00e6db63          	ble	a4,a3,2041435e <_svfprintf_r+0xca0>
2041434c:	09d0                	addi	a2,sp,212
2041434e:	85ce                	mv	a1,s3
20414350:	854a                	mv	a0,s2
20414352:	538060ef          	jal	ra,2041a88a <__ssprint_r>
20414356:	14051ae3          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
2041435a:	0fc10893          	addi	a7,sp,252
2041435e:	10047713          	andi	a4,s0,256
20414362:	4dfe                	lw	s11,220(sp)
20414364:	28071d63          	bnez	a4,204145fe <_svfprintf_r+0xf40>
20414368:	01bb0333          	add	t1,s6,s11
2041436c:	0098a023          	sw	s1,0(a7)
20414370:	0168a223          	sw	s6,4(a7)
20414374:	cf9a                	sw	t1,220(sp)
20414376:	47ee                	lw	a5,216(sp)
20414378:	471d                	li	a4,7
2041437a:	08a1                	addi	a7,a7,8
2041437c:	0785                	addi	a5,a5,1
2041437e:	cdbe                	sw	a5,216(sp)
20414380:	34f75d63          	ble	a5,a4,204146da <_svfprintf_r+0x101c>
20414384:	09d0                	addi	a2,sp,212
20414386:	85ce                	mv	a1,s3
20414388:	854a                	mv	a0,s2
2041438a:	500060ef          	jal	ra,2041a88a <__ssprint_r>
2041438e:	10051ee3          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414392:	0fc10893          	addi	a7,sp,252
20414396:	a691                	j	204146da <_svfprintf_r+0x101c>
20414398:	01046413          	ori	s0,s0,16
2041439c:	02047793          	andi	a5,s0,32
204143a0:	cf89                	beqz	a5,204143ba <_svfprintf_r+0xcfc>
204143a2:	0a9d                	addi	s5,s5,7
204143a4:	ff8afa93          	andi	s5,s5,-8
204143a8:	000aac03          	lw	s8,0(s5)
204143ac:	004aac83          	lw	s9,4(s5)
204143b0:	008a8693          	addi	a3,s5,8
204143b4:	d636                	sw	a3,44(sp)
204143b6:	4785                	li	a5,1
204143b8:	bba9                	j	20414112 <_svfprintf_r+0xa54>
204143ba:	004a8713          	addi	a4,s5,4
204143be:	d63a                	sw	a4,44(sp)
204143c0:	01047793          	andi	a5,s0,16
204143c4:	c781                	beqz	a5,204143cc <_svfprintf_r+0xd0e>
204143c6:	000aac03          	lw	s8,0(s5)
204143ca:	a031                	j	204143d6 <_svfprintf_r+0xd18>
204143cc:	04047793          	andi	a5,s0,64
204143d0:	c789                	beqz	a5,204143da <_svfprintf_r+0xd1c>
204143d2:	000adc03          	lhu	s8,0(s5)
204143d6:	4c81                	li	s9,0
204143d8:	bff9                	j	204143b6 <_svfprintf_r+0xcf8>
204143da:	20047793          	andi	a5,s0,512
204143de:	d7e5                	beqz	a5,204143c6 <_svfprintf_r+0xd08>
204143e0:	000acc03          	lbu	s8,0(s5)
204143e4:	bfcd                	j	204143d6 <_svfprintf_r+0xd18>
204143e6:	204217b7          	lui	a5,0x20421
204143ea:	74078793          	addi	a5,a5,1856 # 20421740 <zeroes.4369+0x54>
204143ee:	c12ff06f          	j	20413800 <_svfprintf_r+0x142>
204143f2:	004a8593          	addi	a1,s5,4
204143f6:	d62e                	sw	a1,44(sp)
204143f8:	01047793          	andi	a5,s0,16
204143fc:	c781                	beqz	a5,20414404 <_svfprintf_r+0xd46>
204143fe:	000aac03          	lw	s8,0(s5)
20414402:	a031                	j	2041440e <_svfprintf_r+0xd50>
20414404:	04047793          	andi	a5,s0,64
20414408:	c791                	beqz	a5,20414414 <_svfprintf_r+0xd56>
2041440a:	000adc03          	lhu	s8,0(s5)
2041440e:	4c81                	li	s9,0
20414410:	c0eff06f          	j	2041381e <_svfprintf_r+0x160>
20414414:	20047793          	andi	a5,s0,512
20414418:	d3fd                	beqz	a5,204143fe <_svfprintf_r+0xd40>
2041441a:	000acc03          	lbu	s8,0(s5)
2041441e:	bfc5                	j	2041440e <_svfprintf_r+0xd50>
20414420:	8722                	mv	a4,s0
20414422:	4785                	li	a5,1
20414424:	b9ed                	j	2041411e <_svfprintf_r+0xa60>
20414426:	4705                	li	a4,1
20414428:	d8e78863          	beq	a5,a4,204139b8 <_svfprintf_r+0x2fa>
2041442c:	4709                	li	a4,2
2041442e:	0ce78e63          	beq	a5,a4,2041450a <_svfprintf_r+0xe4c>
20414432:	131c                	addi	a5,sp,416
20414434:	01dc9693          	slli	a3,s9,0x1d
20414438:	007c7713          	andi	a4,s8,7
2041443c:	003c5c13          	srli	s8,s8,0x3
20414440:	03070713          	addi	a4,a4,48
20414444:	0186ec33          	or	s8,a3,s8
20414448:	003cdc93          	srli	s9,s9,0x3
2041444c:	fee78fa3          	sb	a4,-1(a5)
20414450:	019c66b3          	or	a3,s8,s9
20414454:	fff78493          	addi	s1,a5,-1
20414458:	e68d                	bnez	a3,20414482 <_svfprintf_r+0xdc4>
2041445a:	00147693          	andi	a3,s0,1
2041445e:	ca89                	beqz	a3,20414470 <_svfprintf_r+0xdb2>
20414460:	03000693          	li	a3,48
20414464:	00d70663          	beq	a4,a3,20414470 <_svfprintf_r+0xdb2>
20414468:	fed48fa3          	sb	a3,-1(s1)
2041446c:	ffe78493          	addi	s1,a5,-2
20414470:	1314                	addi	a3,sp,416
20414472:	8ada                	mv	s5,s6
20414474:	d202                	sw	zero,36(sp)
20414476:	40968b33          	sub	s6,a3,s1
2041447a:	4c01                	li	s8,0
2041447c:	4b81                	li	s7,0
2041447e:	4c81                	li	s9,0
20414480:	bb91                	j	204141d4 <_svfprintf_r+0xb16>
20414482:	87a6                	mv	a5,s1
20414484:	bf45                	j	20414434 <_svfprintf_r+0xd76>
20414486:	4a01                	li	s4,0
20414488:	1a010d93          	addi	s11,sp,416
2041448c:	40047a93          	andi	s5,s0,1024
20414490:	4ba5                	li	s7,9
20414492:	4629                	li	a2,10
20414494:	4681                	li	a3,0
20414496:	8562                	mv	a0,s8
20414498:	85e6                	mv	a1,s9
2041449a:	c246                	sw	a7,4(sp)
2041449c:	393070ef          	jal	ra,2041c02e <__umoddi3>
204144a0:	03050513          	addi	a0,a0,48
204144a4:	fead8fa3          	sb	a0,-1(s11)
204144a8:	fffd8493          	addi	s1,s11,-1
204144ac:	0a05                	addi	s4,s4,1
204144ae:	4892                	lw	a7,4(sp)
204144b0:	020a8f63          	beqz	s5,204144ee <_svfprintf_r+0xe30>
204144b4:	5622                	lw	a2,40(sp)
204144b6:	00064783          	lbu	a5,0(a2)
204144ba:	02fa1a63          	bne	s4,a5,204144ee <_svfprintf_r+0xe30>
204144be:	0ff00693          	li	a3,255
204144c2:	02da0663          	beq	s4,a3,204144ee <_svfprintf_r+0xe30>
204144c6:	000c9463          	bnez	s9,204144ce <_svfprintf_r+0xe10>
204144ca:	038bf263          	bleu	s8,s7,204144ee <_svfprintf_r+0xe30>
204144ce:	4716                	lw	a4,68(sp)
204144d0:	45c6                	lw	a1,80(sp)
204144d2:	c246                	sw	a7,4(sp)
204144d4:	8c99                	sub	s1,s1,a4
204144d6:	863a                	mv	a2,a4
204144d8:	8526                	mv	a0,s1
204144da:	eabfe0ef          	jal	ra,20413384 <strncpy>
204144de:	55a2                	lw	a1,40(sp)
204144e0:	4a01                	li	s4,0
204144e2:	4892                	lw	a7,4(sp)
204144e4:	0015c783          	lbu	a5,1(a1)
204144e8:	c399                	beqz	a5,204144ee <_svfprintf_r+0xe30>
204144ea:	0585                	addi	a1,a1,1
204144ec:	d42e                	sw	a1,40(sp)
204144ee:	8562                	mv	a0,s8
204144f0:	85e6                	mv	a1,s9
204144f2:	4629                	li	a2,10
204144f4:	4681                	li	a3,0
204144f6:	c246                	sw	a7,4(sp)
204144f8:	7d8070ef          	jal	ra,2041bcd0 <__udivdi3>
204144fc:	8cae                	mv	s9,a1
204144fe:	8dc9                	or	a1,a1,a0
20414500:	8c2a                	mv	s8,a0
20414502:	4892                	lw	a7,4(sp)
20414504:	d5b5                	beqz	a1,20414470 <_svfprintf_r+0xdb2>
20414506:	8da6                	mv	s11,s1
20414508:	b769                	j	20414492 <_svfprintf_r+0xdd4>
2041450a:	1304                	addi	s1,sp,416
2041450c:	4666                	lw	a2,88(sp)
2041450e:	00fc7793          	andi	a5,s8,15
20414512:	14fd                	addi	s1,s1,-1
20414514:	97b2                	add	a5,a5,a2
20414516:	0007c783          	lbu	a5,0(a5)
2041451a:	004c5c13          	srli	s8,s8,0x4
2041451e:	00f48023          	sb	a5,0(s1)
20414522:	01cc9793          	slli	a5,s9,0x1c
20414526:	0187ec33          	or	s8,a5,s8
2041452a:	004cdc93          	srli	s9,s9,0x4
2041452e:	019c67b3          	or	a5,s8,s9
20414532:	ffe9                	bnez	a5,2041450c <_svfprintf_r+0xe4e>
20414534:	bf35                	j	20414470 <_svfprintf_r+0xdb2>
20414536:	1304                	addi	s1,sp,416
20414538:	ff85                	bnez	a5,20414470 <_svfprintf_r+0xdb2>
2041453a:	8b05                	andi	a4,a4,1
2041453c:	db15                	beqz	a4,20414470 <_svfprintf_r+0xdb2>
2041453e:	03000793          	li	a5,48
20414542:	18f10fa3          	sb	a5,415(sp)
20414546:	c84ff06f          	j	204139ca <_svfprintf_r+0x30c>
2041454a:	7a0d0163          	beqz	s10,20414cec <_svfprintf_r+0x162e>
2041454e:	87ea                	mv	a5,s10
20414550:	12f10e23          	sb	a5,316(sp)
20414554:	0a010ba3          	sb	zero,183(sp)
20414558:	d656                	sw	s5,44(sp)
2041455a:	c0cff06f          	j	20413966 <_svfprintf_r+0x2a8>
2041455e:	0741                	addi	a4,a4,16
20414560:	01e8a223          	sw	t5,4(a7)
20414564:	cfba                	sw	a4,220(sp)
20414566:	cdb6                	sw	a3,216(sp)
20414568:	02dfd263          	ble	a3,t6,2041458c <_svfprintf_r+0xece>
2041456c:	09d0                	addi	a2,sp,212
2041456e:	85ce                	mv	a1,s3
20414570:	854a                	mv	a0,s2
20414572:	c472                	sw	t3,8(sp)
20414574:	c676                	sw	t4,12(sp)
20414576:	c87a                	sw	t5,16(sp)
20414578:	ca7e                	sw	t6,20(sp)
2041457a:	310060ef          	jal	ra,2041a88a <__ssprint_r>
2041457e:	4e22                	lw	t3,8(sp)
20414580:	4eb2                	lw	t4,12(sp)
20414582:	4f42                	lw	t5,16(sp)
20414584:	4fd2                	lw	t6,20(sp)
20414586:	72051263          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
2041458a:	19f0                	addi	a2,sp,252
2041458c:	1e41                	addi	t3,t3,-16
2041458e:	88b2                	mv	a7,a2
20414590:	b159                	j	20414216 <_svfprintf_r+0xb58>
20414592:	204215b7          	lui	a1,0x20421
20414596:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
2041459a:	06c1                	addi	a3,a3,16
2041459c:	00b8a023          	sw	a1,0(a7)
204145a0:	00f8a223          	sw	a5,4(a7)
204145a4:	cfb6                	sw	a3,220(sp)
204145a6:	cdba                	sw	a4,216(sp)
204145a8:	00ee5e63          	ble	a4,t3,204145c4 <_svfprintf_r+0xf06>
204145ac:	09d0                	addi	a2,sp,212
204145ae:	85ce                	mv	a1,s3
204145b0:	854a                	mv	a0,s2
204145b2:	d03e                	sw	a5,32(sp)
204145b4:	c472                	sw	t3,8(sp)
204145b6:	2d4060ef          	jal	ra,2041a88a <__ssprint_r>
204145ba:	5782                	lw	a5,32(sp)
204145bc:	4e22                	lw	t3,8(sp)
204145be:	6e051663          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204145c2:	19f0                	addi	a2,sp,252
204145c4:	1dc1                	addi	s11,s11,-16
204145c6:	88b2                	mv	a7,a2
204145c8:	b339                	j	204142d6 <_svfprintf_r+0xc18>
204145ca:	204215b7          	lui	a1,0x20421
204145ce:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
204145d2:	06c1                	addi	a3,a3,16
204145d4:	00b8a023          	sw	a1,0(a7)
204145d8:	01b8a223          	sw	s11,4(a7)
204145dc:	cfb6                	sw	a3,220(sp)
204145de:	cdba                	sw	a4,216(sp)
204145e0:	00e85c63          	ble	a4,a6,204145f8 <_svfprintf_r+0xf3a>
204145e4:	09d0                	addi	a2,sp,212
204145e6:	85ce                	mv	a1,s3
204145e8:	854a                	mv	a0,s2
204145ea:	cc42                	sw	a6,24(sp)
204145ec:	29e060ef          	jal	ra,2041a88a <__ssprint_r>
204145f0:	4862                	lw	a6,24(sp)
204145f2:	6a051c63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204145f6:	19f0                	addi	a2,sp,252
204145f8:	1ac1                	addi	s5,s5,-16
204145fa:	88b2                	mv	a7,a2
204145fc:	b315                	j	20414320 <_svfprintf_r+0xc62>
204145fe:	06500713          	li	a4,101
20414602:	51a75463          	ble	s10,a4,20414b0a <_svfprintf_r+0x144c>
20414606:	570e                	lw	a4,224(sp)
20414608:	090c                	addi	a1,sp,144
2041460a:	1108                	addi	a0,sp,160
2041460c:	d13a                	sw	a4,160(sp)
2041460e:	571e                	lw	a4,228(sp)
20414610:	c246                	sw	a7,4(sp)
20414612:	c902                	sw	zero,144(sp)
20414614:	d33a                	sw	a4,164(sp)
20414616:	572e                	lw	a4,232(sp)
20414618:	cb02                	sw	zero,148(sp)
2041461a:	cd02                	sw	zero,152(sp)
2041461c:	d53a                	sw	a4,168(sp)
2041461e:	573e                	lw	a4,236(sp)
20414620:	cf02                	sw	zero,156(sp)
20414622:	d73a                	sw	a4,172(sp)
20414624:	669080ef          	jal	ra,2041d48c <__eqtf2>
20414628:	4892                	lw	a7,4(sp)
2041462a:	10051b63          	bnez	a0,20414740 <_svfprintf_r+0x1082>
2041462e:	204217b7          	lui	a5,0x20421
20414632:	76878793          	addi	a5,a5,1896 # 20421768 <zeroes.4369+0x7c>
20414636:	00f8a023          	sw	a5,0(a7)
2041463a:	4785                	li	a5,1
2041463c:	00f8a223          	sw	a5,4(a7)
20414640:	47ee                	lw	a5,216(sp)
20414642:	0d85                	addi	s11,s11,1
20414644:	cfee                	sw	s11,220(sp)
20414646:	0785                	addi	a5,a5,1
20414648:	cdbe                	sw	a5,216(sp)
2041464a:	471d                	li	a4,7
2041464c:	08a1                	addi	a7,a7,8
2041464e:	00f75b63          	ble	a5,a4,20414664 <_svfprintf_r+0xfa6>
20414652:	09d0                	addi	a2,sp,212
20414654:	85ce                	mv	a1,s3
20414656:	854a                	mv	a0,s2
20414658:	232060ef          	jal	ra,2041a88a <__ssprint_r>
2041465c:	64051763          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414660:	0fc10893          	addi	a7,sp,252
20414664:	57fa                	lw	a5,188(sp)
20414666:	0147c563          	blt	a5,s4,20414670 <_svfprintf_r+0xfb2>
2041466a:	00147793          	andi	a5,s0,1
2041466e:	c7b5                	beqz	a5,204146da <_svfprintf_r+0x101c>
20414670:	5662                	lw	a2,56(sp)
20414672:	47fe                	lw	a5,220(sp)
20414674:	45a6                	lw	a1,72(sp)
20414676:	00c8a223          	sw	a2,4(a7)
2041467a:	97b2                	add	a5,a5,a2
2041467c:	cfbe                	sw	a5,220(sp)
2041467e:	47ee                	lw	a5,216(sp)
20414680:	00b8a023          	sw	a1,0(a7)
20414684:	471d                	li	a4,7
20414686:	0785                	addi	a5,a5,1
20414688:	cdbe                	sw	a5,216(sp)
2041468a:	08a1                	addi	a7,a7,8
2041468c:	00f75b63          	ble	a5,a4,204146a2 <_svfprintf_r+0xfe4>
20414690:	09d0                	addi	a2,sp,212
20414692:	85ce                	mv	a1,s3
20414694:	854a                	mv	a0,s2
20414696:	1f4060ef          	jal	ra,2041a88a <__ssprint_r>
2041469a:	60051863          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
2041469e:	0fc10893          	addi	a7,sp,252
204146a2:	fffa0493          	addi	s1,s4,-1
204146a6:	02905a63          	blez	s1,204146da <_svfprintf_r+0x101c>
204146aa:	4ac1                	li	s5,16
204146ac:	4b9d                	li	s7,7
204146ae:	47ee                	lw	a5,216(sp)
204146b0:	477e                	lw	a4,220(sp)
204146b2:	00888693          	addi	a3,a7,8
204146b6:	0785                	addi	a5,a5,1
204146b8:	049acc63          	blt	s5,s1,20414710 <_svfprintf_r+0x1052>
204146bc:	20421637          	lui	a2,0x20421
204146c0:	6ec60613          	addi	a2,a2,1772 # 204216ec <zeroes.4369>
204146c4:	0098a223          	sw	s1,4(a7)
204146c8:	00c8a023          	sw	a2,0(a7)
204146cc:	94ba                	add	s1,s1,a4
204146ce:	cfa6                	sw	s1,220(sp)
204146d0:	cdbe                	sw	a5,216(sp)
204146d2:	471d                	li	a4,7
204146d4:	88b6                	mv	a7,a3
204146d6:	caf747e3          	blt	a4,a5,20414384 <_svfprintf_r+0xcc6>
204146da:	8811                	andi	s0,s0,4
204146dc:	58041563          	bnez	s0,20414c66 <_svfprintf_r+0x15a8>
204146e0:	4d06                	lw	s10,64(sp)
204146e2:	5752                	lw	a4,52(sp)
204146e4:	00ed5363          	ble	a4,s10,204146ea <_svfprintf_r+0x102c>
204146e8:	8d3a                	mv	s10,a4
204146ea:	57f2                	lw	a5,60(sp)
204146ec:	97ea                	add	a5,a5,s10
204146ee:	de3e                	sw	a5,60(sp)
204146f0:	47fe                	lw	a5,220(sp)
204146f2:	cb81                	beqz	a5,20414702 <_svfprintf_r+0x1044>
204146f4:	09d0                	addi	a2,sp,212
204146f6:	85ce                	mv	a1,s3
204146f8:	854a                	mv	a0,s2
204146fa:	190060ef          	jal	ra,2041a88a <__ssprint_r>
204146fe:	5a051663          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414702:	5712                	lw	a4,36(sp)
20414704:	cd82                	sw	zero,216(sp)
20414706:	5c071e63          	bnez	a4,20414ce2 <_svfprintf_r+0x1624>
2041470a:	0fc10893          	addi	a7,sp,252
2041470e:	b26d                	j	204140b8 <_svfprintf_r+0x9fa>
20414710:	204215b7          	lui	a1,0x20421
20414714:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
20414718:	0741                	addi	a4,a4,16
2041471a:	00b8a023          	sw	a1,0(a7)
2041471e:	0158a223          	sw	s5,4(a7)
20414722:	cfba                	sw	a4,220(sp)
20414724:	cdbe                	sw	a5,216(sp)
20414726:	00fbda63          	ble	a5,s7,2041473a <_svfprintf_r+0x107c>
2041472a:	09d0                	addi	a2,sp,212
2041472c:	85ce                	mv	a1,s3
2041472e:	854a                	mv	a0,s2
20414730:	15a060ef          	jal	ra,2041a88a <__ssprint_r>
20414734:	56051b63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414738:	19f4                	addi	a3,sp,252
2041473a:	14c1                	addi	s1,s1,-16
2041473c:	88b6                	mv	a7,a3
2041473e:	bf85                	j	204146ae <_svfprintf_r+0xff0>
20414740:	577a                	lw	a4,188(sp)
20414742:	10e04163          	bgtz	a4,20414844 <_svfprintf_r+0x1186>
20414746:	204217b7          	lui	a5,0x20421
2041474a:	76878793          	addi	a5,a5,1896 # 20421768 <zeroes.4369+0x7c>
2041474e:	00f8a023          	sw	a5,0(a7)
20414752:	4785                	li	a5,1
20414754:	00f8a223          	sw	a5,4(a7)
20414758:	47ee                	lw	a5,216(sp)
2041475a:	0d85                	addi	s11,s11,1
2041475c:	cfee                	sw	s11,220(sp)
2041475e:	0785                	addi	a5,a5,1
20414760:	cdbe                	sw	a5,216(sp)
20414762:	471d                	li	a4,7
20414764:	08a1                	addi	a7,a7,8
20414766:	00f75b63          	ble	a5,a4,2041477c <_svfprintf_r+0x10be>
2041476a:	09d0                	addi	a2,sp,212
2041476c:	85ce                	mv	a1,s3
2041476e:	854a                	mv	a0,s2
20414770:	11a060ef          	jal	ra,2041a88a <__ssprint_r>
20414774:	52051b63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414778:	0fc10893          	addi	a7,sp,252
2041477c:	57fa                	lw	a5,188(sp)
2041477e:	e791                	bnez	a5,2041478a <_svfprintf_r+0x10cc>
20414780:	000a1563          	bnez	s4,2041478a <_svfprintf_r+0x10cc>
20414784:	00147793          	andi	a5,s0,1
20414788:	dba9                	beqz	a5,204146da <_svfprintf_r+0x101c>
2041478a:	5762                	lw	a4,56(sp)
2041478c:	47fe                	lw	a5,220(sp)
2041478e:	46a6                	lw	a3,72(sp)
20414790:	00e8a223          	sw	a4,4(a7)
20414794:	97ba                	add	a5,a5,a4
20414796:	cfbe                	sw	a5,220(sp)
20414798:	47ee                	lw	a5,216(sp)
2041479a:	00d8a023          	sw	a3,0(a7)
2041479e:	471d                	li	a4,7
204147a0:	0785                	addi	a5,a5,1
204147a2:	cdbe                	sw	a5,216(sp)
204147a4:	08a1                	addi	a7,a7,8
204147a6:	00f75b63          	ble	a5,a4,204147bc <_svfprintf_r+0x10fe>
204147aa:	09d0                	addi	a2,sp,212
204147ac:	85ce                	mv	a1,s3
204147ae:	854a                	mv	a0,s2
204147b0:	0da060ef          	jal	ra,2041a88a <__ssprint_r>
204147b4:	4e051b63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204147b8:	0fc10893          	addi	a7,sp,252
204147bc:	5afa                	lw	s5,188(sp)
204147be:	040ad363          	bgez	s5,20414804 <_svfprintf_r+0x1146>
204147c2:	41500ab3          	neg	s5,s5
204147c6:	8746                	mv	a4,a7
204147c8:	4bc1                	li	s7,16
204147ca:	4c1d                	li	s8,7
204147cc:	47ee                	lw	a5,216(sp)
204147ce:	46fe                	lw	a3,220(sp)
204147d0:	08a1                	addi	a7,a7,8
204147d2:	0785                	addi	a5,a5,1
204147d4:	055bc063          	blt	s7,s5,20414814 <_svfprintf_r+0x1156>
204147d8:	20421637          	lui	a2,0x20421
204147dc:	01572223          	sw	s5,4(a4)
204147e0:	6ec60613          	addi	a2,a2,1772 # 204216ec <zeroes.4369>
204147e4:	9ab6                	add	s5,s5,a3
204147e6:	c310                	sw	a2,0(a4)
204147e8:	cfd6                	sw	s5,220(sp)
204147ea:	cdbe                	sw	a5,216(sp)
204147ec:	471d                	li	a4,7
204147ee:	00f75b63          	ble	a5,a4,20414804 <_svfprintf_r+0x1146>
204147f2:	09d0                	addi	a2,sp,212
204147f4:	85ce                	mv	a1,s3
204147f6:	854a                	mv	a0,s2
204147f8:	092060ef          	jal	ra,2041a88a <__ssprint_r>
204147fc:	4a051763          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414800:	0fc10893          	addi	a7,sp,252
20414804:	47fe                	lw	a5,220(sp)
20414806:	0098a023          	sw	s1,0(a7)
2041480a:	0148a223          	sw	s4,4(a7)
2041480e:	97d2                	add	a5,a5,s4
20414810:	cfbe                	sw	a5,220(sp)
20414812:	b695                	j	20414376 <_svfprintf_r+0xcb8>
20414814:	204215b7          	lui	a1,0x20421
20414818:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
2041481c:	06c1                	addi	a3,a3,16
2041481e:	c30c                	sw	a1,0(a4)
20414820:	01772223          	sw	s7,4(a4)
20414824:	cfb6                	sw	a3,220(sp)
20414826:	cdbe                	sw	a5,216(sp)
20414828:	00fc5b63          	ble	a5,s8,2041483e <_svfprintf_r+0x1180>
2041482c:	09d0                	addi	a2,sp,212
2041482e:	85ce                	mv	a1,s3
20414830:	854a                	mv	a0,s2
20414832:	058060ef          	jal	ra,2041a88a <__ssprint_r>
20414836:	46051a63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
2041483a:	0fc10893          	addi	a7,sp,252
2041483e:	1ac1                	addi	s5,s5,-16
20414840:	8746                	mv	a4,a7
20414842:	b769                	j	204147cc <_svfprintf_r+0x110e>
20414844:	8ae6                	mv	s5,s9
20414846:	019a5363          	ble	s9,s4,2041484c <_svfprintf_r+0x118e>
2041484a:	8ad2                	mv	s5,s4
2041484c:	03505863          	blez	s5,2041487c <_svfprintf_r+0x11be>
20414850:	476e                	lw	a4,216(sp)
20414852:	9dd6                	add	s11,s11,s5
20414854:	0098a023          	sw	s1,0(a7)
20414858:	0705                	addi	a4,a4,1
2041485a:	0158a223          	sw	s5,4(a7)
2041485e:	cfee                	sw	s11,220(sp)
20414860:	cdba                	sw	a4,216(sp)
20414862:	469d                	li	a3,7
20414864:	08a1                	addi	a7,a7,8
20414866:	00e6db63          	ble	a4,a3,2041487c <_svfprintf_r+0x11be>
2041486a:	09d0                	addi	a2,sp,212
2041486c:	85ce                	mv	a1,s3
2041486e:	854a                	mv	a0,s2
20414870:	01a060ef          	jal	ra,2041a88a <__ssprint_r>
20414874:	42051b63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414878:	0fc10893          	addi	a7,sp,252
2041487c:	000ad363          	bgez	s5,20414882 <_svfprintf_r+0x11c4>
20414880:	4a81                	li	s5,0
20414882:	415c8ab3          	sub	s5,s9,s5
20414886:	05505363          	blez	s5,204148cc <_svfprintf_r+0x120e>
2041488a:	4d41                	li	s10,16
2041488c:	4d9d                	li	s11,7
2041488e:	476e                	lw	a4,216(sp)
20414890:	46fe                	lw	a3,220(sp)
20414892:	00888613          	addi	a2,a7,8
20414896:	0705                	addi	a4,a4,1
20414898:	135d4763          	blt	s10,s5,204149c6 <_svfprintf_r+0x1308>
2041489c:	204215b7          	lui	a1,0x20421
204148a0:	0158a223          	sw	s5,4(a7)
204148a4:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
204148a8:	9ab6                	add	s5,s5,a3
204148aa:	00b8a023          	sw	a1,0(a7)
204148ae:	cfd6                	sw	s5,220(sp)
204148b0:	cdba                	sw	a4,216(sp)
204148b2:	469d                	li	a3,7
204148b4:	88b2                	mv	a7,a2
204148b6:	00e6db63          	ble	a4,a3,204148cc <_svfprintf_r+0x120e>
204148ba:	09d0                	addi	a2,sp,212
204148bc:	85ce                	mv	a1,s3
204148be:	854a                	mv	a0,s2
204148c0:	7cb050ef          	jal	ra,2041a88a <__ssprint_r>
204148c4:	3e051363          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204148c8:	0fc10893          	addi	a7,sp,252
204148cc:	40047793          	andi	a5,s0,1024
204148d0:	01948ab3          	add	s5,s1,s9
204148d4:	cf89                	beqz	a5,204148ee <_svfprintf_r+0x1230>
204148d6:	4d1d                	li	s10,7
204148d8:	01448db3          	add	s11,s1,s4
204148dc:	100b9d63          	bnez	s7,204149f6 <_svfprintf_r+0x1338>
204148e0:	100c1d63          	bnez	s8,204149fa <_svfprintf_r+0x133c>
204148e4:	014487b3          	add	a5,s1,s4
204148e8:	0157f363          	bleu	s5,a5,204148ee <_svfprintf_r+0x1230>
204148ec:	8abe                	mv	s5,a5
204148ee:	57fa                	lw	a5,188(sp)
204148f0:	0147c563          	blt	a5,s4,204148fa <_svfprintf_r+0x123c>
204148f4:	00147793          	andi	a5,s0,1
204148f8:	cb95                	beqz	a5,2041492c <_svfprintf_r+0x126e>
204148fa:	5762                	lw	a4,56(sp)
204148fc:	47fe                	lw	a5,220(sp)
204148fe:	46a6                	lw	a3,72(sp)
20414900:	00e8a223          	sw	a4,4(a7)
20414904:	97ba                	add	a5,a5,a4
20414906:	cfbe                	sw	a5,220(sp)
20414908:	47ee                	lw	a5,216(sp)
2041490a:	00d8a023          	sw	a3,0(a7)
2041490e:	471d                	li	a4,7
20414910:	0785                	addi	a5,a5,1
20414912:	cdbe                	sw	a5,216(sp)
20414914:	08a1                	addi	a7,a7,8
20414916:	00f75b63          	ble	a5,a4,2041492c <_svfprintf_r+0x126e>
2041491a:	09d0                	addi	a2,sp,212
2041491c:	85ce                	mv	a1,s3
2041491e:	854a                	mv	a0,s2
20414920:	76b050ef          	jal	ra,2041a88a <__ssprint_r>
20414924:	38051363          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414928:	0fc10893          	addi	a7,sp,252
2041492c:	94d2                	add	s1,s1,s4
2041492e:	415487b3          	sub	a5,s1,s5
20414932:	54fa                	lw	s1,188(sp)
20414934:	409a04b3          	sub	s1,s4,s1
20414938:	0097d363          	ble	s1,a5,2041493e <_svfprintf_r+0x1280>
2041493c:	84be                	mv	s1,a5
2041493e:	02905963          	blez	s1,20414970 <_svfprintf_r+0x12b2>
20414942:	47fe                	lw	a5,220(sp)
20414944:	0158a023          	sw	s5,0(a7)
20414948:	0098a223          	sw	s1,4(a7)
2041494c:	97a6                	add	a5,a5,s1
2041494e:	cfbe                	sw	a5,220(sp)
20414950:	47ee                	lw	a5,216(sp)
20414952:	471d                	li	a4,7
20414954:	08a1                	addi	a7,a7,8
20414956:	0785                	addi	a5,a5,1
20414958:	cdbe                	sw	a5,216(sp)
2041495a:	00f75b63          	ble	a5,a4,20414970 <_svfprintf_r+0x12b2>
2041495e:	09d0                	addi	a2,sp,212
20414960:	85ce                	mv	a1,s3
20414962:	854a                	mv	a0,s2
20414964:	727050ef          	jal	ra,2041a88a <__ssprint_r>
20414968:	34051163          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
2041496c:	0fc10893          	addi	a7,sp,252
20414970:	87a6                	mv	a5,s1
20414972:	0004d363          	bgez	s1,20414978 <_svfprintf_r+0x12ba>
20414976:	4781                	li	a5,0
20414978:	54fa                	lw	s1,188(sp)
2041497a:	409a04b3          	sub	s1,s4,s1
2041497e:	8c9d                	sub	s1,s1,a5
20414980:	d4905de3          	blez	s1,204146da <_svfprintf_r+0x101c>
20414984:	4ac1                	li	s5,16
20414986:	4b9d                	li	s7,7
20414988:	47ee                	lw	a5,216(sp)
2041498a:	477e                	lw	a4,220(sp)
2041498c:	00888693          	addi	a3,a7,8
20414990:	0785                	addi	a5,a5,1
20414992:	d29ad5e3          	ble	s1,s5,204146bc <_svfprintf_r+0xffe>
20414996:	204215b7          	lui	a1,0x20421
2041499a:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
2041499e:	0741                	addi	a4,a4,16
204149a0:	00b8a023          	sw	a1,0(a7)
204149a4:	0158a223          	sw	s5,4(a7)
204149a8:	cfba                	sw	a4,220(sp)
204149aa:	cdbe                	sw	a5,216(sp)
204149ac:	00fbda63          	ble	a5,s7,204149c0 <_svfprintf_r+0x1302>
204149b0:	09d0                	addi	a2,sp,212
204149b2:	85ce                	mv	a1,s3
204149b4:	854a                	mv	a0,s2
204149b6:	6d5050ef          	jal	ra,2041a88a <__ssprint_r>
204149ba:	2e051863          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204149be:	19f4                	addi	a3,sp,252
204149c0:	14c1                	addi	s1,s1,-16
204149c2:	88b6                	mv	a7,a3
204149c4:	b7d1                	j	20414988 <_svfprintf_r+0x12ca>
204149c6:	204217b7          	lui	a5,0x20421
204149ca:	6ec78793          	addi	a5,a5,1772 # 204216ec <zeroes.4369>
204149ce:	06c1                	addi	a3,a3,16
204149d0:	00f8a023          	sw	a5,0(a7)
204149d4:	01a8a223          	sw	s10,4(a7)
204149d8:	cfb6                	sw	a3,220(sp)
204149da:	cdba                	sw	a4,216(sp)
204149dc:	00edda63          	ble	a4,s11,204149f0 <_svfprintf_r+0x1332>
204149e0:	09d0                	addi	a2,sp,212
204149e2:	85ce                	mv	a1,s3
204149e4:	854a                	mv	a0,s2
204149e6:	6a5050ef          	jal	ra,2041a88a <__ssprint_r>
204149ea:	2c051063          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
204149ee:	19f0                	addi	a2,sp,252
204149f0:	1ac1                	addi	s5,s5,-16
204149f2:	88b2                	mv	a7,a2
204149f4:	bd69                	j	2041488e <_svfprintf_r+0x11d0>
204149f6:	080c0c63          	beqz	s8,20414a8e <_svfprintf_r+0x13d0>
204149fa:	1c7d                	addi	s8,s8,-1
204149fc:	4716                	lw	a4,68(sp)
204149fe:	47fe                	lw	a5,220(sp)
20414a00:	46c6                	lw	a3,80(sp)
20414a02:	00e8a223          	sw	a4,4(a7)
20414a06:	97ba                	add	a5,a5,a4
20414a08:	cfbe                	sw	a5,220(sp)
20414a0a:	47ee                	lw	a5,216(sp)
20414a0c:	00d8a023          	sw	a3,0(a7)
20414a10:	08a1                	addi	a7,a7,8
20414a12:	0785                	addi	a5,a5,1
20414a14:	cdbe                	sw	a5,216(sp)
20414a16:	00fd5b63          	ble	a5,s10,20414a2c <_svfprintf_r+0x136e>
20414a1a:	09d0                	addi	a2,sp,212
20414a1c:	85ce                	mv	a1,s3
20414a1e:	854a                	mv	a0,s2
20414a20:	66b050ef          	jal	ra,2041a88a <__ssprint_r>
20414a24:	28051363          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414a28:	0fc10893          	addi	a7,sp,252
20414a2c:	57a2                	lw	a5,40(sp)
20414a2e:	415d8733          	sub	a4,s11,s5
20414a32:	0007cb03          	lbu	s6,0(a5)
20414a36:	01675363          	ble	s6,a4,20414a3c <_svfprintf_r+0x137e>
20414a3a:	8b3a                	mv	s6,a4
20414a3c:	03605863          	blez	s6,20414a6c <_svfprintf_r+0x13ae>
20414a40:	477e                	lw	a4,220(sp)
20414a42:	0158a023          	sw	s5,0(a7)
20414a46:	0168a223          	sw	s6,4(a7)
20414a4a:	975a                	add	a4,a4,s6
20414a4c:	cfba                	sw	a4,220(sp)
20414a4e:	476e                	lw	a4,216(sp)
20414a50:	08a1                	addi	a7,a7,8
20414a52:	0705                	addi	a4,a4,1
20414a54:	cdba                	sw	a4,216(sp)
20414a56:	00ed5b63          	ble	a4,s10,20414a6c <_svfprintf_r+0x13ae>
20414a5a:	09d0                	addi	a2,sp,212
20414a5c:	85ce                	mv	a1,s3
20414a5e:	854a                	mv	a0,s2
20414a60:	62b050ef          	jal	ra,2041a88a <__ssprint_r>
20414a64:	24051363          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414a68:	0fc10893          	addi	a7,sp,252
20414a6c:	875a                	mv	a4,s6
20414a6e:	000b5363          	bgez	s6,20414a74 <_svfprintf_r+0x13b6>
20414a72:	4701                	li	a4,0
20414a74:	55a2                	lw	a1,40(sp)
20414a76:	4841                	li	a6,16
20414a78:	0005c783          	lbu	a5,0(a1)
20414a7c:	40e78b33          	sub	s6,a5,a4
20414a80:	05604563          	bgtz	s6,20414aca <_svfprintf_r+0x140c>
20414a84:	5622                	lw	a2,40(sp)
20414a86:	00064783          	lbu	a5,0(a2)
20414a8a:	9abe                	add	s5,s5,a5
20414a8c:	bd81                	j	204148dc <_svfprintf_r+0x121e>
20414a8e:	5622                	lw	a2,40(sp)
20414a90:	1bfd                	addi	s7,s7,-1
20414a92:	167d                	addi	a2,a2,-1
20414a94:	d432                	sw	a2,40(sp)
20414a96:	b79d                	j	204149fc <_svfprintf_r+0x133e>
20414a98:	204217b7          	lui	a5,0x20421
20414a9c:	6ec78793          	addi	a5,a5,1772 # 204216ec <zeroes.4369>
20414aa0:	06c1                	addi	a3,a3,16
20414aa2:	00f8a023          	sw	a5,0(a7)
20414aa6:	0108a223          	sw	a6,4(a7)
20414aaa:	cfb6                	sw	a3,220(sp)
20414aac:	cdba                	sw	a4,216(sp)
20414aae:	00ed5c63          	ble	a4,s10,20414ac6 <_svfprintf_r+0x1408>
20414ab2:	09d0                	addi	a2,sp,212
20414ab4:	85ce                	mv	a1,s3
20414ab6:	854a                	mv	a0,s2
20414ab8:	cc42                	sw	a6,24(sp)
20414aba:	5d1050ef          	jal	ra,2041a88a <__ssprint_r>
20414abe:	4862                	lw	a6,24(sp)
20414ac0:	1e051563          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414ac4:	19f0                	addi	a2,sp,252
20414ac6:	1b41                	addi	s6,s6,-16
20414ac8:	88b2                	mv	a7,a2
20414aca:	476e                	lw	a4,216(sp)
20414acc:	46fe                	lw	a3,220(sp)
20414ace:	00888613          	addi	a2,a7,8
20414ad2:	0705                	addi	a4,a4,1
20414ad4:	fd6842e3          	blt	a6,s6,20414a98 <_svfprintf_r+0x13da>
20414ad8:	204215b7          	lui	a1,0x20421
20414adc:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
20414ae0:	00db07b3          	add	a5,s6,a3
20414ae4:	00b8a023          	sw	a1,0(a7)
20414ae8:	0168a223          	sw	s6,4(a7)
20414aec:	cfbe                	sw	a5,220(sp)
20414aee:	cdba                	sw	a4,216(sp)
20414af0:	88b2                	mv	a7,a2
20414af2:	f8ed59e3          	ble	a4,s10,20414a84 <_svfprintf_r+0x13c6>
20414af6:	09d0                	addi	a2,sp,212
20414af8:	85ce                	mv	a1,s3
20414afa:	854a                	mv	a0,s2
20414afc:	58f050ef          	jal	ra,2041a88a <__ssprint_r>
20414b00:	1a051563          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414b04:	0fc10893          	addi	a7,sp,252
20414b08:	bfb5                	j	20414a84 <_svfprintf_r+0x13c6>
20414b0a:	47ee                	lw	a5,216(sp)
20414b0c:	4705                	li	a4,1
20414b0e:	0098a023          	sw	s1,0(a7)
20414b12:	0d85                	addi	s11,s11,1
20414b14:	0785                	addi	a5,a5,1
20414b16:	00888b93          	addi	s7,a7,8
20414b1a:	01474663          	blt	a4,s4,20414b26 <_svfprintf_r+0x1468>
20414b1e:	00147693          	andi	a3,s0,1
20414b22:	12068a63          	beqz	a3,20414c56 <_svfprintf_r+0x1598>
20414b26:	4705                	li	a4,1
20414b28:	00e8a223          	sw	a4,4(a7)
20414b2c:	cfee                	sw	s11,220(sp)
20414b2e:	cdbe                	sw	a5,216(sp)
20414b30:	471d                	li	a4,7
20414b32:	00f75b63          	ble	a5,a4,20414b48 <_svfprintf_r+0x148a>
20414b36:	09d0                	addi	a2,sp,212
20414b38:	85ce                	mv	a1,s3
20414b3a:	854a                	mv	a0,s2
20414b3c:	54f050ef          	jal	ra,2041a88a <__ssprint_r>
20414b40:	16051563          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414b44:	0fc10b93          	addi	s7,sp,252
20414b48:	5762                	lw	a4,56(sp)
20414b4a:	47fe                	lw	a5,220(sp)
20414b4c:	46a6                	lw	a3,72(sp)
20414b4e:	00eba223          	sw	a4,4(s7)
20414b52:	97ba                	add	a5,a5,a4
20414b54:	cfbe                	sw	a5,220(sp)
20414b56:	47ee                	lw	a5,216(sp)
20414b58:	00dba023          	sw	a3,0(s7)
20414b5c:	471d                	li	a4,7
20414b5e:	0785                	addi	a5,a5,1
20414b60:	cdbe                	sw	a5,216(sp)
20414b62:	0ba1                	addi	s7,s7,8
20414b64:	00f75b63          	ble	a5,a4,20414b7a <_svfprintf_r+0x14bc>
20414b68:	09d0                	addi	a2,sp,212
20414b6a:	85ce                	mv	a1,s3
20414b6c:	854a                	mv	a0,s2
20414b6e:	51d050ef          	jal	ra,2041a88a <__ssprint_r>
20414b72:	12051c63          	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414b76:	0fc10b93          	addi	s7,sp,252
20414b7a:	578e                	lw	a5,224(sp)
20414b7c:	090c                	addi	a1,sp,144
20414b7e:	1108                	addi	a0,sp,160
20414b80:	d13e                	sw	a5,160(sp)
20414b82:	579e                	lw	a5,228(sp)
20414b84:	fffa0a93          	addi	s5,s4,-1
20414b88:	c902                	sw	zero,144(sp)
20414b8a:	d33e                	sw	a5,164(sp)
20414b8c:	57ae                	lw	a5,232(sp)
20414b8e:	cb02                	sw	zero,148(sp)
20414b90:	cd02                	sw	zero,152(sp)
20414b92:	d53e                	sw	a5,168(sp)
20414b94:	57be                	lw	a5,236(sp)
20414b96:	cf02                	sw	zero,156(sp)
20414b98:	d73e                	sw	a5,172(sp)
20414b9a:	0f3080ef          	jal	ra,2041d48c <__eqtf2>
20414b9e:	cd21                	beqz	a0,20414bf6 <_svfprintf_r+0x1538>
20414ba0:	47fe                	lw	a5,220(sp)
20414ba2:	476e                	lw	a4,216(sp)
20414ba4:	0485                	addi	s1,s1,1
20414ba6:	17fd                	addi	a5,a5,-1
20414ba8:	97d2                	add	a5,a5,s4
20414baa:	0705                	addi	a4,a4,1
20414bac:	009ba023          	sw	s1,0(s7)
20414bb0:	015ba223          	sw	s5,4(s7)
20414bb4:	cfbe                	sw	a5,220(sp)
20414bb6:	cdba                	sw	a4,216(sp)
20414bb8:	479d                	li	a5,7
20414bba:	0ba1                	addi	s7,s7,8
20414bbc:	00e7da63          	ble	a4,a5,20414bd0 <_svfprintf_r+0x1512>
20414bc0:	09d0                	addi	a2,sp,212
20414bc2:	85ce                	mv	a1,s3
20414bc4:	854a                	mv	a0,s2
20414bc6:	4c5050ef          	jal	ra,2041a88a <__ssprint_r>
20414bca:	e165                	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414bcc:	0fc10b93          	addi	s7,sp,252
20414bd0:	01dc                	addi	a5,sp,196
20414bd2:	46d6                	lw	a3,84(sp)
20414bd4:	00fba023          	sw	a5,0(s7)
20414bd8:	47fe                	lw	a5,220(sp)
20414bda:	00dba223          	sw	a3,4(s7)
20414bde:	471d                	li	a4,7
20414be0:	97b6                	add	a5,a5,a3
20414be2:	cfbe                	sw	a5,220(sp)
20414be4:	47ee                	lw	a5,216(sp)
20414be6:	008b8893          	addi	a7,s7,8
20414bea:	0785                	addi	a5,a5,1
20414bec:	cdbe                	sw	a5,216(sp)
20414bee:	aef756e3          	ble	a5,a4,204146da <_svfprintf_r+0x101c>
20414bf2:	f92ff06f          	j	20414384 <_svfprintf_r+0xcc6>
20414bf6:	fd505de3          	blez	s5,20414bd0 <_svfprintf_r+0x1512>
20414bfa:	44c1                	li	s1,16
20414bfc:	4c1d                	li	s8,7
20414bfe:	476e                	lw	a4,216(sp)
20414c00:	47fe                	lw	a5,220(sp)
20414c02:	008b8693          	addi	a3,s7,8
20414c06:	0705                	addi	a4,a4,1
20414c08:	0354c063          	blt	s1,s5,20414c28 <_svfprintf_r+0x156a>
20414c0c:	20421637          	lui	a2,0x20421
20414c10:	97d6                	add	a5,a5,s5
20414c12:	6ec60613          	addi	a2,a2,1772 # 204216ec <zeroes.4369>
20414c16:	00cba023          	sw	a2,0(s7)
20414c1a:	015ba223          	sw	s5,4(s7)
20414c1e:	cfbe                	sw	a5,220(sp)
20414c20:	cdba                	sw	a4,216(sp)
20414c22:	479d                	li	a5,7
20414c24:	8bb6                	mv	s7,a3
20414c26:	bf59                	j	20414bbc <_svfprintf_r+0x14fe>
20414c28:	204215b7          	lui	a1,0x20421
20414c2c:	6ec58593          	addi	a1,a1,1772 # 204216ec <zeroes.4369>
20414c30:	07c1                	addi	a5,a5,16
20414c32:	00bba023          	sw	a1,0(s7)
20414c36:	009ba223          	sw	s1,4(s7)
20414c3a:	cfbe                	sw	a5,220(sp)
20414c3c:	cdba                	sw	a4,216(sp)
20414c3e:	00ec5963          	ble	a4,s8,20414c50 <_svfprintf_r+0x1592>
20414c42:	09d0                	addi	a2,sp,212
20414c44:	85ce                	mv	a1,s3
20414c46:	854a                	mv	a0,s2
20414c48:	443050ef          	jal	ra,2041a88a <__ssprint_r>
20414c4c:	ed39                	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414c4e:	19f4                	addi	a3,sp,252
20414c50:	1ac1                	addi	s5,s5,-16
20414c52:	8bb6                	mv	s7,a3
20414c54:	b76d                	j	20414bfe <_svfprintf_r+0x1540>
20414c56:	00e8a223          	sw	a4,4(a7)
20414c5a:	cfee                	sw	s11,220(sp)
20414c5c:	cdbe                	sw	a5,216(sp)
20414c5e:	471d                	li	a4,7
20414c60:	f6f758e3          	ble	a5,a4,20414bd0 <_svfprintf_r+0x1512>
20414c64:	bfb1                	j	20414bc0 <_svfprintf_r+0x1502>
20414c66:	4586                	lw	a1,64(sp)
20414c68:	56d2                	lw	a3,52(sp)
20414c6a:	40d58433          	sub	s0,a1,a3
20414c6e:	a68059e3          	blez	s0,204146e0 <_svfprintf_r+0x1022>
20414c72:	204214b7          	lui	s1,0x20421
20414c76:	4ac1                	li	s5,16
20414c78:	6dc48493          	addi	s1,s1,1756 # 204216dc <blanks.4368>
20414c7c:	4b9d                	li	s7,7
20414c7e:	47ee                	lw	a5,216(sp)
20414c80:	0098a023          	sw	s1,0(a7)
20414c84:	477e                	lw	a4,220(sp)
20414c86:	0785                	addi	a5,a5,1
20414c88:	028acb63          	blt	s5,s0,20414cbe <_svfprintf_r+0x1600>
20414c8c:	0088a223          	sw	s0,4(a7)
20414c90:	943a                	add	s0,s0,a4
20414c92:	cfa2                	sw	s0,220(sp)
20414c94:	cdbe                	sw	a5,216(sp)
20414c96:	471d                	li	a4,7
20414c98:	a4f754e3          	ble	a5,a4,204146e0 <_svfprintf_r+0x1022>
20414c9c:	09d0                	addi	a2,sp,212
20414c9e:	85ce                	mv	a1,s3
20414ca0:	854a                	mv	a0,s2
20414ca2:	3e9050ef          	jal	ra,2041a88a <__ssprint_r>
20414ca6:	a2050de3          	beqz	a0,204146e0 <_svfprintf_r+0x1022>
20414caa:	5792                	lw	a5,36(sp)
20414cac:	e399                	bnez	a5,20414cb2 <_svfprintf_r+0x15f4>
20414cae:	e89fe06f          	j	20413b36 <_svfprintf_r+0x478>
20414cb2:	85be                	mv	a1,a5
20414cb4:	854a                	mv	a0,s2
20414cb6:	14b020ef          	jal	ra,20417600 <_free_r>
20414cba:	e7dfe06f          	j	20413b36 <_svfprintf_r+0x478>
20414cbe:	0741                	addi	a4,a4,16
20414cc0:	0158a223          	sw	s5,4(a7)
20414cc4:	cfba                	sw	a4,220(sp)
20414cc6:	cdbe                	sw	a5,216(sp)
20414cc8:	08a1                	addi	a7,a7,8
20414cca:	00fbda63          	ble	a5,s7,20414cde <_svfprintf_r+0x1620>
20414cce:	09d0                	addi	a2,sp,212
20414cd0:	85ce                	mv	a1,s3
20414cd2:	854a                	mv	a0,s2
20414cd4:	3b7050ef          	jal	ra,2041a88a <__ssprint_r>
20414cd8:	f969                	bnez	a0,20414caa <_svfprintf_r+0x15ec>
20414cda:	0fc10893          	addi	a7,sp,252
20414cde:	1441                	addi	s0,s0,-16
20414ce0:	bf79                	j	20414c7e <_svfprintf_r+0x15c0>
20414ce2:	5592                	lw	a1,36(sp)
20414ce4:	854a                	mv	a0,s2
20414ce6:	11b020ef          	jal	ra,20417600 <_free_r>
20414cea:	b405                	j	2041470a <_svfprintf_r+0x104c>
20414cec:	47fe                	lw	a5,220(sp)
20414cee:	e399                	bnez	a5,20414cf4 <_svfprintf_r+0x1636>
20414cf0:	e47fe06f          	j	20413b36 <_svfprintf_r+0x478>
20414cf4:	09d0                	addi	a2,sp,212
20414cf6:	85ce                	mv	a1,s3
20414cf8:	854a                	mv	a0,s2
20414cfa:	391050ef          	jal	ra,2041a88a <__ssprint_r>
20414cfe:	e39fe06f          	j	20413b36 <_svfprintf_r+0x478>

20414d02 <__sprint_r>:
20414d02:	461c                	lw	a5,8(a2)
20414d04:	7179                	addi	sp,sp,-48
20414d06:	d422                	sw	s0,40(sp)
20414d08:	d606                	sw	ra,44(sp)
20414d0a:	d226                	sw	s1,36(sp)
20414d0c:	d04a                	sw	s2,32(sp)
20414d0e:	ce4e                	sw	s3,28(sp)
20414d10:	cc52                	sw	s4,24(sp)
20414d12:	ca56                	sw	s5,20(sp)
20414d14:	c85a                	sw	s6,16(sp)
20414d16:	c65e                	sw	s7,12(sp)
20414d18:	c462                	sw	s8,8(sp)
20414d1a:	8432                	mv	s0,a2
20414d1c:	e385                	bnez	a5,20414d3c <__sprint_r+0x3a>
20414d1e:	00062223          	sw	zero,4(a2)
20414d22:	4501                	li	a0,0
20414d24:	50b2                	lw	ra,44(sp)
20414d26:	5422                	lw	s0,40(sp)
20414d28:	5492                	lw	s1,36(sp)
20414d2a:	5902                	lw	s2,32(sp)
20414d2c:	49f2                	lw	s3,28(sp)
20414d2e:	4a62                	lw	s4,24(sp)
20414d30:	4ad2                	lw	s5,20(sp)
20414d32:	4b42                	lw	s6,16(sp)
20414d34:	4bb2                	lw	s7,12(sp)
20414d36:	4c22                	lw	s8,8(sp)
20414d38:	6145                	addi	sp,sp,48
20414d3a:	8082                	ret
20414d3c:	51fc                	lw	a5,100(a1)
20414d3e:	892e                	mv	s2,a1
20414d40:	01279713          	slli	a4,a5,0x12
20414d44:	04075a63          	bgez	a4,20414d98 <__sprint_r+0x96>
20414d48:	4204                	lw	s1,0(a2)
20414d4a:	8a2a                	mv	s4,a0
20414d4c:	5bfd                	li	s7,-1
20414d4e:	441c                	lw	a5,8(s0)
20414d50:	e799                	bnez	a5,20414d5e <__sprint_r+0x5c>
20414d52:	4501                	li	a0,0
20414d54:	00042423          	sw	zero,8(s0)
20414d58:	00042223          	sw	zero,4(s0)
20414d5c:	b7e1                	j	20414d24 <__sprint_r+0x22>
20414d5e:	0044a983          	lw	s3,4(s1)
20414d62:	0004ab03          	lw	s6,0(s1)
20414d66:	4a81                	li	s5,0
20414d68:	0029dc13          	srli	s8,s3,0x2
20414d6c:	018acb63          	blt	s5,s8,20414d82 <__sprint_r+0x80>
20414d70:	441c                	lw	a5,8(s0)
20414d72:	ffc9f993          	andi	s3,s3,-4
20414d76:	04a1                	addi	s1,s1,8
20414d78:	413789b3          	sub	s3,a5,s3
20414d7c:	01342423          	sw	s3,8(s0)
20414d80:	b7f9                	j	20414d4e <__sprint_r+0x4c>
20414d82:	000b2583          	lw	a1,0(s6)
20414d86:	864a                	mv	a2,s2
20414d88:	8552                	mv	a0,s4
20414d8a:	76e020ef          	jal	ra,204174f8 <_fputwc_r>
20414d8e:	0b11                	addi	s6,s6,4
20414d90:	01750763          	beq	a0,s7,20414d9e <__sprint_r+0x9c>
20414d94:	0a85                	addi	s5,s5,1
20414d96:	bfd9                	j	20414d6c <__sprint_r+0x6a>
20414d98:	213020ef          	jal	ra,204177aa <__sfvwrite_r>
20414d9c:	bf65                	j	20414d54 <__sprint_r+0x52>
20414d9e:	557d                	li	a0,-1
20414da0:	bf55                	j	20414d54 <__sprint_r+0x52>

20414da2 <_vfiprintf_r>:
20414da2:	7169                	addi	sp,sp,-304
20414da4:	12812423          	sw	s0,296(sp)
20414da8:	13212023          	sw	s2,288(sp)
20414dac:	11312e23          	sw	s3,284(sp)
20414db0:	11412c23          	sw	s4,280(sp)
20414db4:	12112623          	sw	ra,300(sp)
20414db8:	12912223          	sw	s1,292(sp)
20414dbc:	11512a23          	sw	s5,276(sp)
20414dc0:	11612823          	sw	s6,272(sp)
20414dc4:	11712623          	sw	s7,268(sp)
20414dc8:	11812423          	sw	s8,264(sp)
20414dcc:	11912223          	sw	s9,260(sp)
20414dd0:	11a12023          	sw	s10,256(sp)
20414dd4:	dfee                	sw	s11,252(sp)
20414dd6:	89aa                	mv	s3,a0
20414dd8:	842e                	mv	s0,a1
20414dda:	8a32                	mv	s4,a2
20414ddc:	8936                	mv	s2,a3
20414dde:	c509                	beqz	a0,20414de8 <_vfiprintf_r+0x46>
20414de0:	5d1c                	lw	a5,56(a0)
20414de2:	e399                	bnez	a5,20414de8 <_vfiprintf_r+0x46>
20414de4:	550020ef          	jal	ra,20417334 <__sinit>
20414de8:	00c41783          	lh	a5,12(s0)
20414dec:	01279713          	slli	a4,a5,0x12
20414df0:	00074b63          	bltz	a4,20414e06 <_vfiprintf_r+0x64>
20414df4:	6689                	lui	a3,0x2
20414df6:	5078                	lw	a4,100(s0)
20414df8:	8fd5                	or	a5,a5,a3
20414dfa:	00f41623          	sh	a5,12(s0)
20414dfe:	77f9                	lui	a5,0xffffe
20414e00:	17fd                	addi	a5,a5,-1
20414e02:	8ff9                	and	a5,a5,a4
20414e04:	d07c                	sw	a5,100(s0)
20414e06:	00c45783          	lhu	a5,12(s0)
20414e0a:	8ba1                	andi	a5,a5,8
20414e0c:	c3a5                	beqz	a5,20414e6c <_vfiprintf_r+0xca>
20414e0e:	481c                	lw	a5,16(s0)
20414e10:	cfb1                	beqz	a5,20414e6c <_vfiprintf_r+0xca>
20414e12:	00c45783          	lhu	a5,12(s0)
20414e16:	4729                	li	a4,10
20414e18:	8be9                	andi	a5,a5,26
20414e1a:	06e79063          	bne	a5,a4,20414e7a <_vfiprintf_r+0xd8>
20414e1e:	00e41783          	lh	a5,14(s0)
20414e22:	0407cc63          	bltz	a5,20414e7a <_vfiprintf_r+0xd8>
20414e26:	86ca                	mv	a3,s2
20414e28:	8652                	mv	a2,s4
20414e2a:	85a2                	mv	a1,s0
20414e2c:	854e                	mv	a0,s3
20414e2e:	061000ef          	jal	ra,2041568e <__sbprintf>
20414e32:	8baa                	mv	s7,a0
20414e34:	12c12083          	lw	ra,300(sp)
20414e38:	12812403          	lw	s0,296(sp)
20414e3c:	855e                	mv	a0,s7
20414e3e:	12412483          	lw	s1,292(sp)
20414e42:	12012903          	lw	s2,288(sp)
20414e46:	11c12983          	lw	s3,284(sp)
20414e4a:	11812a03          	lw	s4,280(sp)
20414e4e:	11412a83          	lw	s5,276(sp)
20414e52:	11012b03          	lw	s6,272(sp)
20414e56:	10c12b83          	lw	s7,268(sp)
20414e5a:	10812c03          	lw	s8,264(sp)
20414e5e:	10412c83          	lw	s9,260(sp)
20414e62:	10012d03          	lw	s10,256(sp)
20414e66:	5dfe                	lw	s11,252(sp)
20414e68:	6155                	addi	sp,sp,304
20414e6a:	8082                	ret
20414e6c:	85a2                	mv	a1,s0
20414e6e:	854e                	mv	a0,s3
20414e70:	066020ef          	jal	ra,20416ed6 <__swsetup_r>
20414e74:	dd59                	beqz	a0,20414e12 <_vfiprintf_r+0x70>
20414e76:	5bfd                	li	s7,-1
20414e78:	bf75                	j	20414e34 <_vfiprintf_r+0x92>
20414e7a:	04c10b13          	addi	s6,sp,76
20414e7e:	c0da                	sw	s6,64(sp)
20414e80:	c482                	sw	zero,72(sp)
20414e82:	c282                	sw	zero,68(sp)
20414e84:	875a                	mv	a4,s6
20414e86:	d202                	sw	zero,36(sp)
20414e88:	ce02                	sw	zero,28(sp)
20414e8a:	d002                	sw	zero,32(sp)
20414e8c:	d402                	sw	zero,40(sp)
20414e8e:	4b81                	li	s7,0
20414e90:	84d2                	mv	s1,s4
20414e92:	02500693          	li	a3,37
20414e96:	0004c783          	lbu	a5,0(s1)
20414e9a:	c399                	beqz	a5,20414ea0 <_vfiprintf_r+0xfe>
20414e9c:	06d79c63          	bne	a5,a3,20414f14 <_vfiprintf_r+0x172>
20414ea0:	41448ab3          	sub	s5,s1,s4
20414ea4:	020a8863          	beqz	s5,20414ed4 <_vfiprintf_r+0x132>
20414ea8:	47a6                	lw	a5,72(sp)
20414eaa:	01472023          	sw	s4,0(a4)
20414eae:	01572223          	sw	s5,4(a4)
20414eb2:	97d6                	add	a5,a5,s5
20414eb4:	c4be                	sw	a5,72(sp)
20414eb6:	4796                	lw	a5,68(sp)
20414eb8:	469d                	li	a3,7
20414eba:	0721                	addi	a4,a4,8
20414ebc:	0785                	addi	a5,a5,1
20414ebe:	c2be                	sw	a5,68(sp)
20414ec0:	00f6d963          	ble	a5,a3,20414ed2 <_vfiprintf_r+0x130>
20414ec4:	0090                	addi	a2,sp,64
20414ec6:	85a2                	mv	a1,s0
20414ec8:	854e                	mv	a0,s3
20414eca:	3d25                	jal	20414d02 <__sprint_r>
20414ecc:	76051963          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
20414ed0:	875a                	mv	a4,s6
20414ed2:	9bd6                	add	s7,s7,s5
20414ed4:	0004c783          	lbu	a5,0(s1)
20414ed8:	78078c63          	beqz	a5,20415670 <_vfiprintf_r+0x8ce>
20414edc:	00148a13          	addi	s4,s1,1
20414ee0:	02010da3          	sb	zero,59(sp)
20414ee4:	54fd                	li	s1,-1
20414ee6:	4a81                	li	s5,0
20414ee8:	4d01                	li	s10,0
20414eea:	4c29                	li	s8,10
20414eec:	02a00c93          	li	s9,42
20414ef0:	05a00813          	li	a6,90
20414ef4:	45a5                	li	a1,9
20414ef6:	000a4603          	lbu	a2,0(s4)
20414efa:	0a05                	addi	s4,s4,1
20414efc:	fe060693          	addi	a3,a2,-32
20414f00:	66d86663          	bltu	a6,a3,2041556c <_vfiprintf_r+0x7ca>
20414f04:	204217b7          	lui	a5,0x20421
20414f08:	068a                	slli	a3,a3,0x2
20414f0a:	76c78793          	addi	a5,a5,1900 # 2042176c <zeroes.4369+0x80>
20414f0e:	96be                	add	a3,a3,a5
20414f10:	4294                	lw	a3,0(a3)
20414f12:	8682                	jr	a3
20414f14:	0485                	addi	s1,s1,1
20414f16:	b741                	j	20414e96 <_vfiprintf_r+0xf4>
20414f18:	204216b7          	lui	a3,0x20421
20414f1c:	75468693          	addi	a3,a3,1876 # 20421754 <zeroes.4369+0x68>
20414f20:	d236                	sw	a3,36(sp)
20414f22:	020d7693          	andi	a3,s10,32
20414f26:	4e068463          	beqz	a3,2041540e <_vfiprintf_r+0x66c>
20414f2a:	091d                	addi	s2,s2,7
20414f2c:	ff897913          	andi	s2,s2,-8
20414f30:	00092883          	lw	a7,0(s2)
20414f34:	00492c83          	lw	s9,4(s2)
20414f38:	00890c13          	addi	s8,s2,8
20414f3c:	001d7693          	andi	a3,s10,1
20414f40:	ce81                	beqz	a3,20414f58 <_vfiprintf_r+0x1b6>
20414f42:	0198e6b3          	or	a3,a7,s9
20414f46:	ca89                	beqz	a3,20414f58 <_vfiprintf_r+0x1b6>
20414f48:	03000693          	li	a3,48
20414f4c:	02d10e23          	sb	a3,60(sp)
20414f50:	02c10ea3          	sb	a2,61(sp)
20414f54:	002d6d13          	ori	s10,s10,2
20414f58:	bffd7d13          	andi	s10,s10,-1025
20414f5c:	a4b5                	j	204151c8 <_vfiprintf_r+0x426>
20414f5e:	854e                	mv	a0,s3
20414f60:	c83a                	sw	a4,16(sp)
20414f62:	286040ef          	jal	ra,204191e8 <_localeconv_r>
20414f66:	4148                	lw	a0,4(a0)
20414f68:	d42a                	sw	a0,40(sp)
20414f6a:	bdefe0ef          	jal	ra,20413348 <strlen>
20414f6e:	d02a                	sw	a0,32(sp)
20414f70:	854e                	mv	a0,s3
20414f72:	276040ef          	jal	ra,204191e8 <_localeconv_r>
20414f76:	4508                	lw	a0,8(a0)
20414f78:	5782                	lw	a5,32(sp)
20414f7a:	4742                	lw	a4,16(sp)
20414f7c:	ce2a                	sw	a0,28(sp)
20414f7e:	dbad                	beqz	a5,20414ef0 <_vfiprintf_r+0x14e>
20414f80:	d925                	beqz	a0,20414ef0 <_vfiprintf_r+0x14e>
20414f82:	00054683          	lbu	a3,0(a0)
20414f86:	d6ad                	beqz	a3,20414ef0 <_vfiprintf_r+0x14e>
20414f88:	400d6d13          	ori	s10,s10,1024
20414f8c:	b795                	j	20414ef0 <_vfiprintf_r+0x14e>
20414f8e:	03b14683          	lbu	a3,59(sp)
20414f92:	feb9                	bnez	a3,20414ef0 <_vfiprintf_r+0x14e>
20414f94:	02000693          	li	a3,32
20414f98:	02d10da3          	sb	a3,59(sp)
20414f9c:	bf91                	j	20414ef0 <_vfiprintf_r+0x14e>
20414f9e:	001d6d13          	ori	s10,s10,1
20414fa2:	b7b9                	j	20414ef0 <_vfiprintf_r+0x14e>
20414fa4:	00092a83          	lw	s5,0(s2)
20414fa8:	0911                	addi	s2,s2,4
20414faa:	f40ad3e3          	bgez	s5,20414ef0 <_vfiprintf_r+0x14e>
20414fae:	41500ab3          	neg	s5,s5
20414fb2:	004d6d13          	ori	s10,s10,4
20414fb6:	bf2d                	j	20414ef0 <_vfiprintf_r+0x14e>
20414fb8:	02b00693          	li	a3,43
20414fbc:	bff1                	j	20414f98 <_vfiprintf_r+0x1f6>
20414fbe:	000a4603          	lbu	a2,0(s4)
20414fc2:	001a0693          	addi	a3,s4,1
20414fc6:	03961863          	bne	a2,s9,20414ff6 <_vfiprintf_r+0x254>
20414fca:	00092483          	lw	s1,0(s2)
20414fce:	00490613          	addi	a2,s2,4
20414fd2:	0004d363          	bgez	s1,20414fd8 <_vfiprintf_r+0x236>
20414fd6:	54fd                	li	s1,-1
20414fd8:	8932                	mv	s2,a2
20414fda:	8a36                	mv	s4,a3
20414fdc:	bf11                	j	20414ef0 <_vfiprintf_r+0x14e>
20414fde:	038484b3          	mul	s1,s1,s8
20414fe2:	0685                	addi	a3,a3,1
20414fe4:	fff6c603          	lbu	a2,-1(a3)
20414fe8:	94aa                	add	s1,s1,a0
20414fea:	fd060513          	addi	a0,a2,-48
20414fee:	fea5f8e3          	bleu	a0,a1,20414fde <_vfiprintf_r+0x23c>
20414ff2:	8a36                	mv	s4,a3
20414ff4:	b721                	j	20414efc <_vfiprintf_r+0x15a>
20414ff6:	4481                	li	s1,0
20414ff8:	bfcd                	j	20414fea <_vfiprintf_r+0x248>
20414ffa:	080d6d13          	ori	s10,s10,128
20414ffe:	bdcd                	j	20414ef0 <_vfiprintf_r+0x14e>
20415000:	86d2                	mv	a3,s4
20415002:	4a81                	li	s5,0
20415004:	038a8ab3          	mul	s5,s5,s8
20415008:	fd060613          	addi	a2,a2,-48
2041500c:	0685                	addi	a3,a3,1
2041500e:	9ab2                	add	s5,s5,a2
20415010:	fff6c603          	lbu	a2,-1(a3)
20415014:	fd060513          	addi	a0,a2,-48
20415018:	fea5f6e3          	bleu	a0,a1,20415004 <_vfiprintf_r+0x262>
2041501c:	bfd9                	j	20414ff2 <_vfiprintf_r+0x250>
2041501e:	000a4603          	lbu	a2,0(s4)
20415022:	06800693          	li	a3,104
20415026:	00d61663          	bne	a2,a3,20415032 <_vfiprintf_r+0x290>
2041502a:	0a05                	addi	s4,s4,1
2041502c:	200d6d13          	ori	s10,s10,512
20415030:	b5c1                	j	20414ef0 <_vfiprintf_r+0x14e>
20415032:	040d6d13          	ori	s10,s10,64
20415036:	bd6d                	j	20414ef0 <_vfiprintf_r+0x14e>
20415038:	000a4603          	lbu	a2,0(s4)
2041503c:	06c00693          	li	a3,108
20415040:	00d61663          	bne	a2,a3,2041504c <_vfiprintf_r+0x2aa>
20415044:	0a05                	addi	s4,s4,1
20415046:	020d6d13          	ori	s10,s10,32
2041504a:	b55d                	j	20414ef0 <_vfiprintf_r+0x14e>
2041504c:	010d6d13          	ori	s10,s10,16
20415050:	b545                	j	20414ef0 <_vfiprintf_r+0x14e>
20415052:	00092683          	lw	a3,0(s2)
20415056:	00490c13          	addi	s8,s2,4
2041505a:	02010da3          	sb	zero,59(sp)
2041505e:	08d10623          	sb	a3,140(sp)
20415062:	4485                	li	s1,1
20415064:	4c81                	li	s9,0
20415066:	08c10913          	addi	s2,sp,140
2041506a:	a269                	j	204151f4 <_vfiprintf_r+0x452>
2041506c:	010d6d13          	ori	s10,s10,16
20415070:	020d7693          	andi	a3,s10,32
20415074:	c6b9                	beqz	a3,204150c2 <_vfiprintf_r+0x320>
20415076:	091d                	addi	s2,s2,7
20415078:	ff897913          	andi	s2,s2,-8
2041507c:	00092883          	lw	a7,0(s2)
20415080:	00492c83          	lw	s9,4(s2)
20415084:	00890c13          	addi	s8,s2,8
20415088:	000cde63          	bgez	s9,204150a4 <_vfiprintf_r+0x302>
2041508c:	411008b3          	neg	a7,a7
20415090:	011036b3          	snez	a3,a7
20415094:	41900333          	neg	t1,s9
20415098:	40d30cb3          	sub	s9,t1,a3
2041509c:	02d00693          	li	a3,45
204150a0:	02d10da3          	sb	a3,59(sp)
204150a4:	56fd                	li	a3,-1
204150a6:	38d49963          	bne	s1,a3,20415438 <_vfiprintf_r+0x696>
204150aa:	3e0c9663          	bnez	s9,20415496 <_vfiprintf_r+0x6f4>
204150ae:	46a5                	li	a3,9
204150b0:	3f16e363          	bltu	a3,a7,20415496 <_vfiprintf_r+0x6f4>
204150b4:	03088893          	addi	a7,a7,48
204150b8:	0f1107a3          	sb	a7,239(sp)
204150bc:	0ef10913          	addi	s2,sp,239
204150c0:	a6e1                	j	20415488 <_vfiprintf_r+0x6e6>
204150c2:	010d7693          	andi	a3,s10,16
204150c6:	00490c13          	addi	s8,s2,4
204150ca:	c691                	beqz	a3,204150d6 <_vfiprintf_r+0x334>
204150cc:	00092883          	lw	a7,0(s2)
204150d0:	41f8dc93          	srai	s9,a7,0x1f
204150d4:	bf55                	j	20415088 <_vfiprintf_r+0x2e6>
204150d6:	040d7693          	andi	a3,s10,64
204150da:	00092883          	lw	a7,0(s2)
204150de:	c689                	beqz	a3,204150e8 <_vfiprintf_r+0x346>
204150e0:	08c2                	slli	a7,a7,0x10
204150e2:	4108d893          	srai	a7,a7,0x10
204150e6:	b7ed                	j	204150d0 <_vfiprintf_r+0x32e>
204150e8:	200d7693          	andi	a3,s10,512
204150ec:	d2f5                	beqz	a3,204150d0 <_vfiprintf_r+0x32e>
204150ee:	08e2                	slli	a7,a7,0x18
204150f0:	4188d893          	srai	a7,a7,0x18
204150f4:	bff1                	j	204150d0 <_vfiprintf_r+0x32e>
204150f6:	020d7613          	andi	a2,s10,32
204150fa:	00092683          	lw	a3,0(s2)
204150fe:	0911                	addi	s2,s2,4
20415100:	c619                	beqz	a2,2041510e <_vfiprintf_r+0x36c>
20415102:	41fbd793          	srai	a5,s7,0x1f
20415106:	0176a023          	sw	s7,0(a3)
2041510a:	c2dc                	sw	a5,4(a3)
2041510c:	b351                	j	20414e90 <_vfiprintf_r+0xee>
2041510e:	010d7613          	andi	a2,s10,16
20415112:	c601                	beqz	a2,2041511a <_vfiprintf_r+0x378>
20415114:	0176a023          	sw	s7,0(a3)
20415118:	bba5                	j	20414e90 <_vfiprintf_r+0xee>
2041511a:	040d7613          	andi	a2,s10,64
2041511e:	c609                	beqz	a2,20415128 <_vfiprintf_r+0x386>
20415120:	87de                	mv	a5,s7
20415122:	00f69023          	sh	a5,0(a3)
20415126:	b3ad                	j	20414e90 <_vfiprintf_r+0xee>
20415128:	200d7793          	andi	a5,s10,512
2041512c:	d7e5                	beqz	a5,20415114 <_vfiprintf_r+0x372>
2041512e:	87de                	mv	a5,s7
20415130:	00f68023          	sb	a5,0(a3)
20415134:	bbb1                	j	20414e90 <_vfiprintf_r+0xee>
20415136:	010d6d13          	ori	s10,s10,16
2041513a:	020d7693          	andi	a3,s10,32
2041513e:	ce9d                	beqz	a3,2041517c <_vfiprintf_r+0x3da>
20415140:	091d                	addi	s2,s2,7
20415142:	ff897913          	andi	s2,s2,-8
20415146:	00092883          	lw	a7,0(s2)
2041514a:	00492c83          	lw	s9,4(s2)
2041514e:	00890c13          	addi	s8,s2,8
20415152:	bffd7d13          	andi	s10,s10,-1025
20415156:	4681                	li	a3,0
20415158:	02010da3          	sb	zero,59(sp)
2041515c:	567d                	li	a2,-1
2041515e:	2ec48063          	beq	s1,a2,2041543e <_vfiprintf_r+0x69c>
20415162:	866a                	mv	a2,s10
20415164:	0198e5b3          	or	a1,a7,s9
20415168:	f7fd7d13          	andi	s10,s10,-129
2041516c:	2c059963          	bnez	a1,2041543e <_vfiprintf_r+0x69c>
20415170:	3e048463          	beqz	s1,20415558 <_vfiprintf_r+0x7b6>
20415174:	4605                	li	a2,1
20415176:	2cc69763          	bne	a3,a2,20415444 <_vfiprintf_r+0x6a2>
2041517a:	bf2d                	j	204150b4 <_vfiprintf_r+0x312>
2041517c:	010d7693          	andi	a3,s10,16
20415180:	00490c13          	addi	s8,s2,4
20415184:	c681                	beqz	a3,2041518c <_vfiprintf_r+0x3ea>
20415186:	00092883          	lw	a7,0(s2)
2041518a:	a031                	j	20415196 <_vfiprintf_r+0x3f4>
2041518c:	040d7693          	andi	a3,s10,64
20415190:	c689                	beqz	a3,2041519a <_vfiprintf_r+0x3f8>
20415192:	00095883          	lhu	a7,0(s2)
20415196:	4c81                	li	s9,0
20415198:	bf6d                	j	20415152 <_vfiprintf_r+0x3b0>
2041519a:	200d7693          	andi	a3,s10,512
2041519e:	d6e5                	beqz	a3,20415186 <_vfiprintf_r+0x3e4>
204151a0:	00094883          	lbu	a7,0(s2)
204151a4:	bfcd                	j	20415196 <_vfiprintf_r+0x3f4>
204151a6:	76e1                	lui	a3,0xffff8
204151a8:	8306c693          	xori	a3,a3,-2000
204151ac:	02d11e23          	sh	a3,60(sp)
204151b0:	00092883          	lw	a7,0(s2)
204151b4:	204216b7          	lui	a3,0x20421
204151b8:	74068693          	addi	a3,a3,1856 # 20421740 <zeroes.4369+0x54>
204151bc:	00490c13          	addi	s8,s2,4
204151c0:	4c81                	li	s9,0
204151c2:	002d6d13          	ori	s10,s10,2
204151c6:	d236                	sw	a3,36(sp)
204151c8:	4689                	li	a3,2
204151ca:	b779                	j	20415158 <_vfiprintf_r+0x3b6>
204151cc:	02010da3          	sb	zero,59(sp)
204151d0:	56fd                	li	a3,-1
204151d2:	00490c13          	addi	s8,s2,4
204151d6:	00092903          	lw	s2,0(s2)
204151da:	1cd48863          	beq	s1,a3,204153aa <_vfiprintf_r+0x608>
204151de:	8626                	mv	a2,s1
204151e0:	4581                	li	a1,0
204151e2:	854a                	mv	a0,s2
204151e4:	c83a                	sw	a4,16(sp)
204151e6:	5ca040ef          	jal	ra,204197b0 <memchr>
204151ea:	4c81                	li	s9,0
204151ec:	4742                	lw	a4,16(sp)
204151ee:	c119                	beqz	a0,204151f4 <_vfiprintf_r+0x452>
204151f0:	412504b3          	sub	s1,a0,s2
204151f4:	cc66                	sw	s9,24(sp)
204151f6:	009cd363          	ble	s1,s9,204151fc <_vfiprintf_r+0x45a>
204151fa:	cc26                	sw	s1,24(sp)
204151fc:	03b14683          	lbu	a3,59(sp)
20415200:	c681                	beqz	a3,20415208 <_vfiprintf_r+0x466>
20415202:	47e2                	lw	a5,24(sp)
20415204:	0785                	addi	a5,a5,1
20415206:	cc3e                	sw	a5,24(sp)
20415208:	002d7d93          	andi	s11,s10,2
2041520c:	000d8563          	beqz	s11,20415216 <_vfiprintf_r+0x474>
20415210:	47e2                	lw	a5,24(sp)
20415212:	0789                	addi	a5,a5,2
20415214:	cc3e                	sw	a5,24(sp)
20415216:	084d7793          	andi	a5,s10,132
2041521a:	d63e                	sw	a5,44(sp)
2041521c:	e7a1                	bnez	a5,20415264 <_vfiprintf_r+0x4c2>
2041521e:	47e2                	lw	a5,24(sp)
20415220:	40fa86b3          	sub	a3,s5,a5
20415224:	04d05063          	blez	a3,20415264 <_vfiprintf_r+0x4c2>
20415228:	204227b7          	lui	a5,0x20422
2041522c:	48c1                	li	a7,16
2041522e:	8d878813          	addi	a6,a5,-1832 # 204218d8 <blanks.4359>
20415232:	431d                	li	t1,7
20415234:	4616                	lw	a2,68(sp)
20415236:	01072023          	sw	a6,0(a4)
2041523a:	45a6                	lw	a1,72(sp)
2041523c:	0605                	addi	a2,a2,1
2041523e:	00870513          	addi	a0,a4,8
20415242:	32d8cd63          	blt	a7,a3,2041557c <_vfiprintf_r+0x7da>
20415246:	c354                	sw	a3,4(a4)
20415248:	96ae                	add	a3,a3,a1
2041524a:	c4b6                	sw	a3,72(sp)
2041524c:	c2b2                	sw	a2,68(sp)
2041524e:	469d                	li	a3,7
20415250:	872a                	mv	a4,a0
20415252:	00c6d963          	ble	a2,a3,20415264 <_vfiprintf_r+0x4c2>
20415256:	0090                	addi	a2,sp,64
20415258:	85a2                	mv	a1,s0
2041525a:	854e                	mv	a0,s3
2041525c:	345d                	jal	20414d02 <__sprint_r>
2041525e:	3e051063          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
20415262:	875a                	mv	a4,s6
20415264:	03b14683          	lbu	a3,59(sp)
20415268:	c69d                	beqz	a3,20415296 <_vfiprintf_r+0x4f4>
2041526a:	03b10613          	addi	a2,sp,59
2041526e:	c310                	sw	a2,0(a4)
20415270:	4605                	li	a2,1
20415272:	4696                	lw	a3,68(sp)
20415274:	c350                	sw	a2,4(a4)
20415276:	4626                	lw	a2,72(sp)
20415278:	0685                	addi	a3,a3,1
2041527a:	c2b6                	sw	a3,68(sp)
2041527c:	0605                	addi	a2,a2,1
2041527e:	c4b2                	sw	a2,72(sp)
20415280:	461d                	li	a2,7
20415282:	0721                	addi	a4,a4,8
20415284:	00d65963          	ble	a3,a2,20415296 <_vfiprintf_r+0x4f4>
20415288:	0090                	addi	a2,sp,64
2041528a:	85a2                	mv	a1,s0
2041528c:	854e                	mv	a0,s3
2041528e:	3c95                	jal	20414d02 <__sprint_r>
20415290:	3a051763          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
20415294:	875a                	mv	a4,s6
20415296:	020d8763          	beqz	s11,204152c4 <_vfiprintf_r+0x522>
2041529a:	1870                	addi	a2,sp,60
2041529c:	c310                	sw	a2,0(a4)
2041529e:	4609                	li	a2,2
204152a0:	4696                	lw	a3,68(sp)
204152a2:	c350                	sw	a2,4(a4)
204152a4:	4626                	lw	a2,72(sp)
204152a6:	0685                	addi	a3,a3,1
204152a8:	c2b6                	sw	a3,68(sp)
204152aa:	0609                	addi	a2,a2,2
204152ac:	c4b2                	sw	a2,72(sp)
204152ae:	461d                	li	a2,7
204152b0:	0721                	addi	a4,a4,8
204152b2:	00d65963          	ble	a3,a2,204152c4 <_vfiprintf_r+0x522>
204152b6:	0090                	addi	a2,sp,64
204152b8:	85a2                	mv	a1,s0
204152ba:	854e                	mv	a0,s3
204152bc:	3499                	jal	20414d02 <__sprint_r>
204152be:	38051063          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
204152c2:	875a                	mv	a4,s6
204152c4:	57b2                	lw	a5,44(sp)
204152c6:	08000693          	li	a3,128
204152ca:	04d79563          	bne	a5,a3,20415314 <_vfiprintf_r+0x572>
204152ce:	47e2                	lw	a5,24(sp)
204152d0:	40fa8db3          	sub	s11,s5,a5
204152d4:	05b05063          	blez	s11,20415314 <_vfiprintf_r+0x572>
204152d8:	4841                	li	a6,16
204152da:	489d                	li	a7,7
204152dc:	4696                	lw	a3,68(sp)
204152de:	204227b7          	lui	a5,0x20422
204152e2:	8e878793          	addi	a5,a5,-1816 # 204218e8 <zeroes.4360>
204152e6:	c31c                	sw	a5,0(a4)
204152e8:	4626                	lw	a2,72(sp)
204152ea:	0685                	addi	a3,a3,1
204152ec:	00870593          	addi	a1,a4,8
204152f0:	2bb84f63          	blt	a6,s11,204155ae <_vfiprintf_r+0x80c>
204152f4:	01b72223          	sw	s11,4(a4)
204152f8:	9db2                	add	s11,s11,a2
204152fa:	c4ee                	sw	s11,72(sp)
204152fc:	c2b6                	sw	a3,68(sp)
204152fe:	461d                	li	a2,7
20415300:	872e                	mv	a4,a1
20415302:	00d65963          	ble	a3,a2,20415314 <_vfiprintf_r+0x572>
20415306:	0090                	addi	a2,sp,64
20415308:	85a2                	mv	a1,s0
2041530a:	854e                	mv	a0,s3
2041530c:	3add                	jal	20414d02 <__sprint_r>
2041530e:	32051863          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
20415312:	875a                	mv	a4,s6
20415314:	409c8cb3          	sub	s9,s9,s1
20415318:	05905063          	blez	s9,20415358 <_vfiprintf_r+0x5b6>
2041531c:	4dc1                	li	s11,16
2041531e:	481d                	li	a6,7
20415320:	4696                	lw	a3,68(sp)
20415322:	204227b7          	lui	a5,0x20422
20415326:	8e878793          	addi	a5,a5,-1816 # 204218e8 <zeroes.4360>
2041532a:	c31c                	sw	a5,0(a4)
2041532c:	4626                	lw	a2,72(sp)
2041532e:	0685                	addi	a3,a3,1
20415330:	00870593          	addi	a1,a4,8
20415334:	2b9dc263          	blt	s11,s9,204155d8 <_vfiprintf_r+0x836>
20415338:	01972223          	sw	s9,4(a4)
2041533c:	9cb2                	add	s9,s9,a2
2041533e:	c4e6                	sw	s9,72(sp)
20415340:	c2b6                	sw	a3,68(sp)
20415342:	461d                	li	a2,7
20415344:	872e                	mv	a4,a1
20415346:	00d65963          	ble	a3,a2,20415358 <_vfiprintf_r+0x5b6>
2041534a:	0090                	addi	a2,sp,64
2041534c:	85a2                	mv	a1,s0
2041534e:	854e                	mv	a0,s3
20415350:	3a4d                	jal	20414d02 <__sprint_r>
20415352:	2e051663          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
20415356:	875a                	mv	a4,s6
20415358:	46a6                	lw	a3,72(sp)
2041535a:	c344                	sw	s1,4(a4)
2041535c:	01272023          	sw	s2,0(a4)
20415360:	94b6                	add	s1,s1,a3
20415362:	4696                	lw	a3,68(sp)
20415364:	c4a6                	sw	s1,72(sp)
20415366:	461d                	li	a2,7
20415368:	0685                	addi	a3,a3,1
2041536a:	c2b6                	sw	a3,68(sp)
2041536c:	0721                	addi	a4,a4,8
2041536e:	00d65963          	ble	a3,a2,20415380 <_vfiprintf_r+0x5de>
20415372:	0090                	addi	a2,sp,64
20415374:	85a2                	mv	a1,s0
20415376:	854e                	mv	a0,s3
20415378:	3269                	jal	20414d02 <__sprint_r>
2041537a:	2c051263          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
2041537e:	875a                	mv	a4,s6
20415380:	004d7793          	andi	a5,s10,4
20415384:	26079d63          	bnez	a5,204155fe <_vfiprintf_r+0x85c>
20415388:	4762                	lw	a4,24(sp)
2041538a:	00ead363          	ble	a4,s5,20415390 <_vfiprintf_r+0x5ee>
2041538e:	8aba                	mv	s5,a4
20415390:	47a6                	lw	a5,72(sp)
20415392:	9bd6                	add	s7,s7,s5
20415394:	c799                	beqz	a5,204153a2 <_vfiprintf_r+0x600>
20415396:	0090                	addi	a2,sp,64
20415398:	85a2                	mv	a1,s0
2041539a:	854e                	mv	a0,s3
2041539c:	329d                	jal	20414d02 <__sprint_r>
2041539e:	2a051063          	bnez	a0,2041563e <_vfiprintf_r+0x89c>
204153a2:	c282                	sw	zero,68(sp)
204153a4:	8962                	mv	s2,s8
204153a6:	875a                	mv	a4,s6
204153a8:	b4e5                	j	20414e90 <_vfiprintf_r+0xee>
204153aa:	854a                	mv	a0,s2
204153ac:	c83a                	sw	a4,16(sp)
204153ae:	f9bfd0ef          	jal	ra,20413348 <strlen>
204153b2:	84aa                	mv	s1,a0
204153b4:	4c81                	li	s9,0
204153b6:	4742                	lw	a4,16(sp)
204153b8:	bd35                	j	204151f4 <_vfiprintf_r+0x452>
204153ba:	010d6d13          	ori	s10,s10,16
204153be:	020d7693          	andi	a3,s10,32
204153c2:	ce81                	beqz	a3,204153da <_vfiprintf_r+0x638>
204153c4:	091d                	addi	s2,s2,7
204153c6:	ff897913          	andi	s2,s2,-8
204153ca:	00092883          	lw	a7,0(s2)
204153ce:	00492c83          	lw	s9,4(s2)
204153d2:	00890c13          	addi	s8,s2,8
204153d6:	4685                	li	a3,1
204153d8:	b341                	j	20415158 <_vfiprintf_r+0x3b6>
204153da:	010d7693          	andi	a3,s10,16
204153de:	00490c13          	addi	s8,s2,4
204153e2:	c681                	beqz	a3,204153ea <_vfiprintf_r+0x648>
204153e4:	00092883          	lw	a7,0(s2)
204153e8:	a031                	j	204153f4 <_vfiprintf_r+0x652>
204153ea:	040d7693          	andi	a3,s10,64
204153ee:	c689                	beqz	a3,204153f8 <_vfiprintf_r+0x656>
204153f0:	00095883          	lhu	a7,0(s2)
204153f4:	4c81                	li	s9,0
204153f6:	b7c5                	j	204153d6 <_vfiprintf_r+0x634>
204153f8:	200d7693          	andi	a3,s10,512
204153fc:	d6e5                	beqz	a3,204153e4 <_vfiprintf_r+0x642>
204153fe:	00094883          	lbu	a7,0(s2)
20415402:	bfcd                	j	204153f4 <_vfiprintf_r+0x652>
20415404:	204216b7          	lui	a3,0x20421
20415408:	74068693          	addi	a3,a3,1856 # 20421740 <zeroes.4369+0x54>
2041540c:	be11                	j	20414f20 <_vfiprintf_r+0x17e>
2041540e:	010d7693          	andi	a3,s10,16
20415412:	00490c13          	addi	s8,s2,4
20415416:	c681                	beqz	a3,2041541e <_vfiprintf_r+0x67c>
20415418:	00092883          	lw	a7,0(s2)
2041541c:	a031                	j	20415428 <_vfiprintf_r+0x686>
2041541e:	040d7693          	andi	a3,s10,64
20415422:	c689                	beqz	a3,2041542c <_vfiprintf_r+0x68a>
20415424:	00095883          	lhu	a7,0(s2)
20415428:	4c81                	li	s9,0
2041542a:	be09                	j	20414f3c <_vfiprintf_r+0x19a>
2041542c:	200d7693          	andi	a3,s10,512
20415430:	d6e5                	beqz	a3,20415418 <_vfiprintf_r+0x676>
20415432:	00094883          	lbu	a7,0(s2)
20415436:	bfcd                	j	20415428 <_vfiprintf_r+0x686>
20415438:	866a                	mv	a2,s10
2041543a:	4685                	li	a3,1
2041543c:	b325                	j	20415164 <_vfiprintf_r+0x3c2>
2041543e:	4605                	li	a2,1
20415440:	c6c685e3          	beq	a3,a2,204150aa <_vfiprintf_r+0x308>
20415444:	4609                	li	a2,2
20415446:	0ec68263          	beq	a3,a2,2041552a <_vfiprintf_r+0x788>
2041544a:	1994                	addi	a3,sp,240
2041544c:	01dc9593          	slli	a1,s9,0x1d
20415450:	0078f613          	andi	a2,a7,7
20415454:	0038d893          	srli	a7,a7,0x3
20415458:	03060613          	addi	a2,a2,48
2041545c:	0115e8b3          	or	a7,a1,a7
20415460:	003cdc93          	srli	s9,s9,0x3
20415464:	fec68fa3          	sb	a2,-1(a3)
20415468:	0198e5b3          	or	a1,a7,s9
2041546c:	fff68913          	addi	s2,a3,-1
20415470:	e18d                	bnez	a1,20415492 <_vfiprintf_r+0x6f0>
20415472:	001d7593          	andi	a1,s10,1
20415476:	c989                	beqz	a1,20415488 <_vfiprintf_r+0x6e6>
20415478:	03000593          	li	a1,48
2041547c:	00b60663          	beq	a2,a1,20415488 <_vfiprintf_r+0x6e6>
20415480:	feb90fa3          	sb	a1,-1(s2)
20415484:	ffe68913          	addi	s2,a3,-2
20415488:	199c                	addi	a5,sp,240
2041548a:	8ca6                	mv	s9,s1
2041548c:	412784b3          	sub	s1,a5,s2
20415490:	b395                	j	204151f4 <_vfiprintf_r+0x452>
20415492:	86ca                	mv	a3,s2
20415494:	bf65                	j	2041544c <_vfiprintf_r+0x6aa>
20415496:	400d7793          	andi	a5,s10,1024
2041549a:	4d81                	li	s11,0
2041549c:	0f010e13          	addi	t3,sp,240
204154a0:	cc3e                	sw	a5,24(sp)
204154a2:	8546                	mv	a0,a7
204154a4:	4629                	li	a2,10
204154a6:	4681                	li	a3,0
204154a8:	85e6                	mv	a1,s9
204154aa:	fffe0913          	addi	s2,t3,-1
204154ae:	c83a                	sw	a4,16(sp)
204154b0:	c446                	sw	a7,8(sp)
204154b2:	ca72                	sw	t3,20(sp)
204154b4:	37b060ef          	jal	ra,2041c02e <__umoddi3>
204154b8:	4e52                	lw	t3,20(sp)
204154ba:	47e2                	lw	a5,24(sp)
204154bc:	03050513          	addi	a0,a0,48
204154c0:	feae0fa3          	sb	a0,-1(t3)
204154c4:	0d85                	addi	s11,s11,1
204154c6:	4742                	lw	a4,16(sp)
204154c8:	48a2                	lw	a7,8(sp)
204154ca:	c3b1                	beqz	a5,2041550e <_vfiprintf_r+0x76c>
204154cc:	47f2                	lw	a5,28(sp)
204154ce:	0007c683          	lbu	a3,0(a5)
204154d2:	03b69e63          	bne	a3,s11,2041550e <_vfiprintf_r+0x76c>
204154d6:	0ff00793          	li	a5,255
204154da:	02fd8a63          	beq	s11,a5,2041550e <_vfiprintf_r+0x76c>
204154de:	000c9563          	bnez	s9,204154e8 <_vfiprintf_r+0x746>
204154e2:	47a5                	li	a5,9
204154e4:	0317f563          	bleu	a7,a5,2041550e <_vfiprintf_r+0x76c>
204154e8:	5782                	lw	a5,32(sp)
204154ea:	55a2                	lw	a1,40(sp)
204154ec:	c83a                	sw	a4,16(sp)
204154ee:	40f90933          	sub	s2,s2,a5
204154f2:	863e                	mv	a2,a5
204154f4:	854a                	mv	a0,s2
204154f6:	c446                	sw	a7,8(sp)
204154f8:	e8dfd0ef          	jal	ra,20413384 <strncpy>
204154fc:	47f2                	lw	a5,28(sp)
204154fe:	4d81                	li	s11,0
20415500:	4742                	lw	a4,16(sp)
20415502:	0017c683          	lbu	a3,1(a5)
20415506:	48a2                	lw	a7,8(sp)
20415508:	c299                	beqz	a3,2041550e <_vfiprintf_r+0x76c>
2041550a:	0785                	addi	a5,a5,1
2041550c:	ce3e                	sw	a5,28(sp)
2041550e:	8546                	mv	a0,a7
20415510:	85e6                	mv	a1,s9
20415512:	4629                	li	a2,10
20415514:	4681                	li	a3,0
20415516:	c83a                	sw	a4,16(sp)
20415518:	7b8060ef          	jal	ra,2041bcd0 <__udivdi3>
2041551c:	8cae                	mv	s9,a1
2041551e:	8dc9                	or	a1,a1,a0
20415520:	88aa                	mv	a7,a0
20415522:	4742                	lw	a4,16(sp)
20415524:	d1b5                	beqz	a1,20415488 <_vfiprintf_r+0x6e6>
20415526:	8e4a                	mv	t3,s2
20415528:	bfad                	j	204154a2 <_vfiprintf_r+0x700>
2041552a:	0f010913          	addi	s2,sp,240
2041552e:	5792                	lw	a5,36(sp)
20415530:	00f8f693          	andi	a3,a7,15
20415534:	197d                	addi	s2,s2,-1
20415536:	96be                	add	a3,a3,a5
20415538:	0006c683          	lbu	a3,0(a3)
2041553c:	0048d893          	srli	a7,a7,0x4
20415540:	00d90023          	sb	a3,0(s2)
20415544:	01cc9693          	slli	a3,s9,0x1c
20415548:	0116e8b3          	or	a7,a3,a7
2041554c:	004cdc93          	srli	s9,s9,0x4
20415550:	0198e6b3          	or	a3,a7,s9
20415554:	fee9                	bnez	a3,2041552e <_vfiprintf_r+0x78c>
20415556:	bf0d                	j	20415488 <_vfiprintf_r+0x6e6>
20415558:	0f010913          	addi	s2,sp,240
2041555c:	f695                	bnez	a3,20415488 <_vfiprintf_r+0x6e6>
2041555e:	8a05                	andi	a2,a2,1
20415560:	d605                	beqz	a2,20415488 <_vfiprintf_r+0x6e6>
20415562:	03000693          	li	a3,48
20415566:	0ed107a3          	sb	a3,239(sp)
2041556a:	be89                	j	204150bc <_vfiprintf_r+0x31a>
2041556c:	10060263          	beqz	a2,20415670 <_vfiprintf_r+0x8ce>
20415570:	08c10623          	sb	a2,140(sp)
20415574:	02010da3          	sb	zero,59(sp)
20415578:	8c4a                	mv	s8,s2
2041557a:	b4e5                	j	20415062 <_vfiprintf_r+0x2c0>
2041557c:	05c1                	addi	a1,a1,16
2041557e:	01172223          	sw	a7,4(a4)
20415582:	c4ae                	sw	a1,72(sp)
20415584:	c2b2                	sw	a2,68(sp)
20415586:	02c35163          	ble	a2,t1,204155a8 <_vfiprintf_r+0x806>
2041558a:	0090                	addi	a2,sp,64
2041558c:	85a2                	mv	a1,s0
2041558e:	854e                	mv	a0,s3
20415590:	c81a                	sw	t1,16(sp)
20415592:	ca36                	sw	a3,20(sp)
20415594:	c642                	sw	a6,12(sp)
20415596:	c446                	sw	a7,8(sp)
20415598:	f6aff0ef          	jal	ra,20414d02 <__sprint_r>
2041559c:	4342                	lw	t1,16(sp)
2041559e:	46d2                	lw	a3,20(sp)
204155a0:	4832                	lw	a6,12(sp)
204155a2:	48a2                	lw	a7,8(sp)
204155a4:	ed49                	bnez	a0,2041563e <_vfiprintf_r+0x89c>
204155a6:	855a                	mv	a0,s6
204155a8:	16c1                	addi	a3,a3,-16
204155aa:	872a                	mv	a4,a0
204155ac:	b161                	j	20415234 <_vfiprintf_r+0x492>
204155ae:	0641                	addi	a2,a2,16
204155b0:	01072223          	sw	a6,4(a4)
204155b4:	c4b2                	sw	a2,72(sp)
204155b6:	c2b6                	sw	a3,68(sp)
204155b8:	00d8dd63          	ble	a3,a7,204155d2 <_vfiprintf_r+0x830>
204155bc:	0090                	addi	a2,sp,64
204155be:	85a2                	mv	a1,s0
204155c0:	854e                	mv	a0,s3
204155c2:	c642                	sw	a6,12(sp)
204155c4:	c446                	sw	a7,8(sp)
204155c6:	f3cff0ef          	jal	ra,20414d02 <__sprint_r>
204155ca:	4832                	lw	a6,12(sp)
204155cc:	48a2                	lw	a7,8(sp)
204155ce:	e925                	bnez	a0,2041563e <_vfiprintf_r+0x89c>
204155d0:	85da                	mv	a1,s6
204155d2:	1dc1                	addi	s11,s11,-16
204155d4:	872e                	mv	a4,a1
204155d6:	b319                	j	204152dc <_vfiprintf_r+0x53a>
204155d8:	0641                	addi	a2,a2,16
204155da:	01b72223          	sw	s11,4(a4)
204155de:	c4b2                	sw	a2,72(sp)
204155e0:	c2b6                	sw	a3,68(sp)
204155e2:	00d85b63          	ble	a3,a6,204155f8 <_vfiprintf_r+0x856>
204155e6:	0090                	addi	a2,sp,64
204155e8:	85a2                	mv	a1,s0
204155ea:	854e                	mv	a0,s3
204155ec:	c642                	sw	a6,12(sp)
204155ee:	f14ff0ef          	jal	ra,20414d02 <__sprint_r>
204155f2:	4832                	lw	a6,12(sp)
204155f4:	e529                	bnez	a0,2041563e <_vfiprintf_r+0x89c>
204155f6:	85da                	mv	a1,s6
204155f8:	1cc1                	addi	s9,s9,-16
204155fa:	872e                	mv	a4,a1
204155fc:	b315                	j	20415320 <_vfiprintf_r+0x57e>
204155fe:	47e2                	lw	a5,24(sp)
20415600:	40fa84b3          	sub	s1,s5,a5
20415604:	d89052e3          	blez	s1,20415388 <_vfiprintf_r+0x5e6>
20415608:	204227b7          	lui	a5,0x20422
2041560c:	4cc1                	li	s9,16
2041560e:	8d878913          	addi	s2,a5,-1832 # 204218d8 <blanks.4359>
20415612:	4d9d                	li	s11,7
20415614:	4796                	lw	a5,68(sp)
20415616:	01272023          	sw	s2,0(a4)
2041561a:	46a6                	lw	a3,72(sp)
2041561c:	0785                	addi	a5,a5,1
2041561e:	029cc863          	blt	s9,s1,2041564e <_vfiprintf_r+0x8ac>
20415622:	c344                	sw	s1,4(a4)
20415624:	94b6                	add	s1,s1,a3
20415626:	c4a6                	sw	s1,72(sp)
20415628:	c2be                	sw	a5,68(sp)
2041562a:	471d                	li	a4,7
2041562c:	d4f75ee3          	ble	a5,a4,20415388 <_vfiprintf_r+0x5e6>
20415630:	0090                	addi	a2,sp,64
20415632:	85a2                	mv	a1,s0
20415634:	854e                	mv	a0,s3
20415636:	eccff0ef          	jal	ra,20414d02 <__sprint_r>
2041563a:	d40507e3          	beqz	a0,20415388 <_vfiprintf_r+0x5e6>
2041563e:	00c45783          	lhu	a5,12(s0)
20415642:	0407f793          	andi	a5,a5,64
20415646:	fe078763          	beqz	a5,20414e34 <_vfiprintf_r+0x92>
2041564a:	82dff06f          	j	20414e76 <_vfiprintf_r+0xd4>
2041564e:	06c1                	addi	a3,a3,16
20415650:	01972223          	sw	s9,4(a4)
20415654:	c4b6                	sw	a3,72(sp)
20415656:	c2be                	sw	a5,68(sp)
20415658:	0721                	addi	a4,a4,8
2041565a:	00fdd963          	ble	a5,s11,2041566c <_vfiprintf_r+0x8ca>
2041565e:	0090                	addi	a2,sp,64
20415660:	85a2                	mv	a1,s0
20415662:	854e                	mv	a0,s3
20415664:	e9eff0ef          	jal	ra,20414d02 <__sprint_r>
20415668:	f979                	bnez	a0,2041563e <_vfiprintf_r+0x89c>
2041566a:	875a                	mv	a4,s6
2041566c:	14c1                	addi	s1,s1,-16
2041566e:	b75d                	j	20415614 <_vfiprintf_r+0x872>
20415670:	47a6                	lw	a5,72(sp)
20415672:	d7f1                	beqz	a5,2041563e <_vfiprintf_r+0x89c>
20415674:	0090                	addi	a2,sp,64
20415676:	85a2                	mv	a1,s0
20415678:	854e                	mv	a0,s3
2041567a:	e88ff0ef          	jal	ra,20414d02 <__sprint_r>
2041567e:	b7c1                	j	2041563e <_vfiprintf_r+0x89c>

20415680 <vfiprintf>:
20415680:	86b2                	mv	a3,a2
20415682:	862e                	mv	a2,a1
20415684:	85aa                	mv	a1,a0
20415686:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041568a:	f18ff06f          	j	20414da2 <_vfiprintf_r>

2041568e <__sbprintf>:
2041568e:	00c5d783          	lhu	a5,12(a1)
20415692:	b8010113          	addi	sp,sp,-1152
20415696:	46812c23          	sw	s0,1144(sp)
2041569a:	9bf5                	andi	a5,a5,-3
2041569c:	00f11a23          	sh	a5,20(sp)
204156a0:	51fc                	lw	a5,100(a1)
204156a2:	842e                	mv	s0,a1
204156a4:	46912a23          	sw	s1,1140(sp)
204156a8:	d6be                	sw	a5,108(sp)
204156aa:	00e5d783          	lhu	a5,14(a1)
204156ae:	47212823          	sw	s2,1136(sp)
204156b2:	46112e23          	sw	ra,1148(sp)
204156b6:	00f11b23          	sh	a5,22(sp)
204156ba:	4ddc                	lw	a5,28(a1)
204156bc:	892a                	mv	s2,a0
204156be:	d002                	sw	zero,32(sp)
204156c0:	d23e                	sw	a5,36(sp)
204156c2:	51dc                	lw	a5,36(a1)
204156c4:	002c                	addi	a1,sp,8
204156c6:	d63e                	sw	a5,44(sp)
204156c8:	189c                	addi	a5,sp,112
204156ca:	c43e                	sw	a5,8(sp)
204156cc:	cc3e                	sw	a5,24(sp)
204156ce:	40000793          	li	a5,1024
204156d2:	c83e                	sw	a5,16(sp)
204156d4:	ce3e                	sw	a5,28(sp)
204156d6:	eccff0ef          	jal	ra,20414da2 <_vfiprintf_r>
204156da:	84aa                	mv	s1,a0
204156dc:	00054863          	bltz	a0,204156ec <__sbprintf+0x5e>
204156e0:	002c                	addi	a1,sp,8
204156e2:	854a                	mv	a0,s2
204156e4:	33d010ef          	jal	ra,20417220 <_fflush_r>
204156e8:	c111                	beqz	a0,204156ec <__sbprintf+0x5e>
204156ea:	54fd                	li	s1,-1
204156ec:	01415783          	lhu	a5,20(sp)
204156f0:	0407f793          	andi	a5,a5,64
204156f4:	c799                	beqz	a5,20415702 <__sbprintf+0x74>
204156f6:	00c45783          	lhu	a5,12(s0)
204156fa:	0407e793          	ori	a5,a5,64
204156fe:	00f41623          	sh	a5,12(s0)
20415702:	47c12083          	lw	ra,1148(sp)
20415706:	47812403          	lw	s0,1144(sp)
2041570a:	8526                	mv	a0,s1
2041570c:	47012903          	lw	s2,1136(sp)
20415710:	47412483          	lw	s1,1140(sp)
20415714:	48010113          	addi	sp,sp,1152
20415718:	8082                	ret

2041571a <_vfprintf_r>:
2041571a:	7105                	addi	sp,sp,-480
2041571c:	1c112e23          	sw	ra,476(sp)
20415720:	1c912a23          	sw	s1,468(sp)
20415724:	1d212823          	sw	s2,464(sp)
20415728:	1d312623          	sw	s3,460(sp)
2041572c:	1d512223          	sw	s5,452(sp)
20415730:	892e                	mv	s2,a1
20415732:	84b2                	mv	s1,a2
20415734:	8ab6                	mv	s5,a3
20415736:	1c812c23          	sw	s0,472(sp)
2041573a:	1d412423          	sw	s4,456(sp)
2041573e:	1d612023          	sw	s6,448(sp)
20415742:	1b712e23          	sw	s7,444(sp)
20415746:	1b812c23          	sw	s8,440(sp)
2041574a:	1b912a23          	sw	s9,436(sp)
2041574e:	1ba12823          	sw	s10,432(sp)
20415752:	1bb12623          	sw	s11,428(sp)
20415756:	89aa                	mv	s3,a0
20415758:	291030ef          	jal	ra,204191e8 <_localeconv_r>
2041575c:	4108                	lw	a0,0(a0)
2041575e:	c4aa                	sw	a0,72(sp)
20415760:	be9fd0ef          	jal	ra,20413348 <strlen>
20415764:	dc2a                	sw	a0,56(sp)
20415766:	d182                	sw	zero,224(sp)
20415768:	d382                	sw	zero,228(sp)
2041576a:	d582                	sw	zero,232(sp)
2041576c:	d782                	sw	zero,236(sp)
2041576e:	00098863          	beqz	s3,2041577e <_vfprintf_r+0x64>
20415772:	0389a783          	lw	a5,56(s3)
20415776:	e781                	bnez	a5,2041577e <_vfprintf_r+0x64>
20415778:	854e                	mv	a0,s3
2041577a:	3bb010ef          	jal	ra,20417334 <__sinit>
2041577e:	00c91783          	lh	a5,12(s2)
20415782:	01279593          	slli	a1,a5,0x12
20415786:	0005cd63          	bltz	a1,204157a0 <_vfprintf_r+0x86>
2041578a:	6689                	lui	a3,0x2
2041578c:	06492703          	lw	a4,100(s2)
20415790:	8fd5                	or	a5,a5,a3
20415792:	00f91623          	sh	a5,12(s2)
20415796:	77f9                	lui	a5,0xffffe
20415798:	17fd                	addi	a5,a5,-1
2041579a:	8ff9                	and	a5,a5,a4
2041579c:	06f92223          	sw	a5,100(s2)
204157a0:	00c95783          	lhu	a5,12(s2)
204157a4:	8ba1                	andi	a5,a5,8
204157a6:	c3b5                	beqz	a5,2041580a <_vfprintf_r+0xf0>
204157a8:	01092783          	lw	a5,16(s2)
204157ac:	cfb9                	beqz	a5,2041580a <_vfprintf_r+0xf0>
204157ae:	00c95783          	lhu	a5,12(s2)
204157b2:	4729                	li	a4,10
204157b4:	8be9                	andi	a5,a5,26
204157b6:	06e79263          	bne	a5,a4,2041581a <_vfprintf_r+0x100>
204157ba:	00e91783          	lh	a5,14(s2)
204157be:	0407ce63          	bltz	a5,2041581a <_vfprintf_r+0x100>
204157c2:	86d6                	mv	a3,s5
204157c4:	8626                	mv	a2,s1
204157c6:	85ca                	mv	a1,s2
204157c8:	854e                	mv	a0,s3
204157ca:	5de010ef          	jal	ra,20416da8 <__sbprintf>
204157ce:	de2a                	sw	a0,60(sp)
204157d0:	1dc12083          	lw	ra,476(sp)
204157d4:	1d812403          	lw	s0,472(sp)
204157d8:	5572                	lw	a0,60(sp)
204157da:	1d412483          	lw	s1,468(sp)
204157de:	1d012903          	lw	s2,464(sp)
204157e2:	1cc12983          	lw	s3,460(sp)
204157e6:	1c812a03          	lw	s4,456(sp)
204157ea:	1c412a83          	lw	s5,452(sp)
204157ee:	1c012b03          	lw	s6,448(sp)
204157f2:	1bc12b83          	lw	s7,444(sp)
204157f6:	1b812c03          	lw	s8,440(sp)
204157fa:	1b412c83          	lw	s9,436(sp)
204157fe:	1b012d03          	lw	s10,432(sp)
20415802:	1ac12d83          	lw	s11,428(sp)
20415806:	613d                	addi	sp,sp,480
20415808:	8082                	ret
2041580a:	85ca                	mv	a1,s2
2041580c:	854e                	mv	a0,s3
2041580e:	6c8010ef          	jal	ra,20416ed6 <__swsetup_r>
20415812:	dd51                	beqz	a0,204157ae <_vfprintf_r+0x94>
20415814:	55fd                	li	a1,-1
20415816:	de2e                	sw	a1,60(sp)
20415818:	bf65                	j	204157d0 <_vfprintf_r+0xb6>
2041581a:	0fc10893          	addi	a7,sp,252
2041581e:	cbc6                	sw	a7,212(sp)
20415820:	cf82                	sw	zero,220(sp)
20415822:	cd82                	sw	zero,216(sp)
20415824:	4a01                	li	s4,0
20415826:	cc82                	sw	zero,88(sp)
20415828:	ca82                	sw	zero,84(sp)
2041582a:	d402                	sw	zero,40(sp)
2041582c:	c282                	sw	zero,68(sp)
2041582e:	c882                	sw	zero,80(sp)
20415830:	de02                	sw	zero,60(sp)
20415832:	8426                	mv	s0,s1
20415834:	02500713          	li	a4,37
20415838:	00044783          	lbu	a5,0(s0)
2041583c:	c399                	beqz	a5,20415842 <_vfprintf_r+0x128>
2041583e:	08e79363          	bne	a5,a4,204158c4 <_vfprintf_r+0x1aa>
20415842:	40940b33          	sub	s6,s0,s1
20415846:	020b0c63          	beqz	s6,2041587e <_vfprintf_r+0x164>
2041584a:	47fe                	lw	a5,220(sp)
2041584c:	0098a023          	sw	s1,0(a7)
20415850:	0168a223          	sw	s6,4(a7)
20415854:	97da                	add	a5,a5,s6
20415856:	cfbe                	sw	a5,220(sp)
20415858:	47ee                	lw	a5,216(sp)
2041585a:	471d                	li	a4,7
2041585c:	08a1                	addi	a7,a7,8
2041585e:	0785                	addi	a5,a5,1
20415860:	cdbe                	sw	a5,216(sp)
20415862:	00f75b63          	ble	a5,a4,20415878 <_vfprintf_r+0x15e>
20415866:	09d0                	addi	a2,sp,212
20415868:	85ca                	mv	a1,s2
2041586a:	854e                	mv	a0,s3
2041586c:	c96ff0ef          	jal	ra,20414d02 <__sprint_r>
20415870:	38051b63          	bnez	a0,20415c06 <_vfprintf_r+0x4ec>
20415874:	0fc10893          	addi	a7,sp,252
20415878:	5672                	lw	a2,60(sp)
2041587a:	965a                	add	a2,a2,s6
2041587c:	de32                	sw	a2,60(sp)
2041587e:	00044783          	lbu	a5,0(s0)
20415882:	e399                	bnez	a5,20415888 <_vfprintf_r+0x16e>
20415884:	5000106f          	j	20416d84 <_vfprintf_r+0x166a>
20415888:	0405                	addi	s0,s0,1
2041588a:	d822                	sw	s0,48(sp)
2041588c:	0a010ba3          	sb	zero,183(sp)
20415890:	5b7d                	li	s6,-1
20415892:	c082                	sw	zero,64(sp)
20415894:	4401                	li	s0,0
20415896:	4c29                	li	s8,10
20415898:	02a00b93          	li	s7,42
2041589c:	05a00613          	li	a2,90
204158a0:	4725                	li	a4,9
204158a2:	56c2                	lw	a3,48(sp)
204158a4:	0006cd03          	lbu	s10,0(a3) # 2000 <__stack_size+0x1800>
204158a8:	0685                	addi	a3,a3,1
204158aa:	d836                	sw	a3,48(sp)
204158ac:	fe0d0793          	addi	a5,s10,-32
204158b0:	52f669e3          	bltu	a2,a5,204165e2 <_vfprintf_r+0xec8>
204158b4:	204225b7          	lui	a1,0x20422
204158b8:	078a                	slli	a5,a5,0x2
204158ba:	8f858593          	addi	a1,a1,-1800 # 204218f8 <zeroes.4360+0x10>
204158be:	97ae                	add	a5,a5,a1
204158c0:	439c                	lw	a5,0(a5)
204158c2:	8782                	jr	a5
204158c4:	0405                	addi	s0,s0,1
204158c6:	bf8d                	j	20415838 <_vfprintf_r+0x11e>
204158c8:	204217b7          	lui	a5,0x20421
204158cc:	75478793          	addi	a5,a5,1876 # 20421754 <zeroes.4369+0x68>
204158d0:	ccbe                	sw	a5,88(sp)
204158d2:	02047793          	andi	a5,s0,32
204158d6:	3a078ae3          	beqz	a5,2041648a <_vfprintf_r+0xd70>
204158da:	0a9d                	addi	s5,s5,7
204158dc:	ff8afa93          	andi	s5,s5,-8
204158e0:	000aac83          	lw	s9,0(s5)
204158e4:	004aac03          	lw	s8,4(s5)
204158e8:	008a8793          	addi	a5,s5,8
204158ec:	d63e                	sw	a5,44(sp)
204158ee:	00147793          	andi	a5,s0,1
204158f2:	cf89                	beqz	a5,2041590c <_vfprintf_r+0x1f2>
204158f4:	018ce7b3          	or	a5,s9,s8
204158f8:	cb91                	beqz	a5,2041590c <_vfprintf_r+0x1f2>
204158fa:	03000793          	li	a5,48
204158fe:	0af10c23          	sb	a5,184(sp)
20415902:	87ea                	mv	a5,s10
20415904:	0af10ca3          	sb	a5,185(sp)
20415908:	00246413          	ori	s0,s0,2
2041590c:	bff47413          	andi	s0,s0,-1025
20415910:	4789                	li	a5,2
20415912:	0990006f          	j	204161aa <_vfprintf_r+0xa90>
20415916:	854e                	mv	a0,s3
20415918:	c246                	sw	a7,4(sp)
2041591a:	0cf030ef          	jal	ra,204191e8 <_localeconv_r>
2041591e:	4148                	lw	a0,4(a0)
20415920:	c8aa                	sw	a0,80(sp)
20415922:	a27fd0ef          	jal	ra,20413348 <strlen>
20415926:	c2aa                	sw	a0,68(sp)
20415928:	854e                	mv	a0,s3
2041592a:	0bf030ef          	jal	ra,204191e8 <_localeconv_r>
2041592e:	4508                	lw	a0,8(a0)
20415930:	4616                	lw	a2,68(sp)
20415932:	4892                	lw	a7,4(sp)
20415934:	d42a                	sw	a0,40(sp)
20415936:	d23d                	beqz	a2,2041589c <_vfprintf_r+0x182>
20415938:	d135                	beqz	a0,2041589c <_vfprintf_r+0x182>
2041593a:	00054783          	lbu	a5,0(a0)
2041593e:	dfb9                	beqz	a5,2041589c <_vfprintf_r+0x182>
20415940:	40046413          	ori	s0,s0,1024
20415944:	bfa1                	j	2041589c <_vfprintf_r+0x182>
20415946:	0b714783          	lbu	a5,183(sp)
2041594a:	fba9                	bnez	a5,2041589c <_vfprintf_r+0x182>
2041594c:	02000793          	li	a5,32
20415950:	0af10ba3          	sb	a5,183(sp)
20415954:	b7a1                	j	2041589c <_vfprintf_r+0x182>
20415956:	00146413          	ori	s0,s0,1
2041595a:	b789                	j	2041589c <_vfprintf_r+0x182>
2041595c:	000aa683          	lw	a3,0(s5)
20415960:	0a91                	addi	s5,s5,4
20415962:	c0b6                	sw	a3,64(sp)
20415964:	f206dce3          	bgez	a3,2041589c <_vfprintf_r+0x182>
20415968:	40d006b3          	neg	a3,a3
2041596c:	c0b6                	sw	a3,64(sp)
2041596e:	00446413          	ori	s0,s0,4
20415972:	b72d                	j	2041589c <_vfprintf_r+0x182>
20415974:	02b00793          	li	a5,43
20415978:	bfe1                	j	20415950 <_vfprintf_r+0x236>
2041597a:	55c2                	lw	a1,48(sp)
2041597c:	0005cd03          	lbu	s10,0(a1)
20415980:	00158793          	addi	a5,a1,1
20415984:	037d1963          	bne	s10,s7,204159b6 <_vfprintf_r+0x29c>
20415988:	000aab03          	lw	s6,0(s5)
2041598c:	004a8713          	addi	a4,s5,4
20415990:	000b5363          	bgez	s6,20415996 <_vfprintf_r+0x27c>
20415994:	5b7d                	li	s6,-1
20415996:	8aba                	mv	s5,a4
20415998:	d83e                	sw	a5,48(sp)
2041599a:	b709                	j	2041589c <_vfprintf_r+0x182>
2041599c:	038b0333          	mul	t1,s6,s8
204159a0:	0785                	addi	a5,a5,1
204159a2:	fff7cd03          	lbu	s10,-1(a5)
204159a6:	00d30b33          	add	s6,t1,a3
204159aa:	fd0d0693          	addi	a3,s10,-48
204159ae:	fed777e3          	bleu	a3,a4,2041599c <_vfprintf_r+0x282>
204159b2:	d83e                	sw	a5,48(sp)
204159b4:	bde5                	j	204158ac <_vfprintf_r+0x192>
204159b6:	4b01                	li	s6,0
204159b8:	bfcd                	j	204159aa <_vfprintf_r+0x290>
204159ba:	08046413          	ori	s0,s0,128
204159be:	bdf9                	j	2041589c <_vfprintf_r+0x182>
204159c0:	57c2                	lw	a5,48(sp)
204159c2:	c082                	sw	zero,64(sp)
204159c4:	4586                	lw	a1,64(sp)
204159c6:	fd0d0d13          	addi	s10,s10,-48
204159ca:	0785                	addi	a5,a5,1
204159cc:	038586b3          	mul	a3,a1,s8
204159d0:	9d36                	add	s10,s10,a3
204159d2:	c0ea                	sw	s10,64(sp)
204159d4:	fff7cd03          	lbu	s10,-1(a5)
204159d8:	fd0d0693          	addi	a3,s10,-48
204159dc:	fed774e3          	bleu	a3,a4,204159c4 <_vfprintf_r+0x2aa>
204159e0:	bfc9                	j	204159b2 <_vfprintf_r+0x298>
204159e2:	00846413          	ori	s0,s0,8
204159e6:	bd5d                	j	2041589c <_vfprintf_r+0x182>
204159e8:	5642                	lw	a2,48(sp)
204159ea:	06800793          	li	a5,104
204159ee:	00064703          	lbu	a4,0(a2)
204159f2:	00f71763          	bne	a4,a5,20415a00 <_vfprintf_r+0x2e6>
204159f6:	0605                	addi	a2,a2,1
204159f8:	d832                	sw	a2,48(sp)
204159fa:	20046413          	ori	s0,s0,512
204159fe:	bd79                	j	2041589c <_vfprintf_r+0x182>
20415a00:	04046413          	ori	s0,s0,64
20415a04:	bd61                	j	2041589c <_vfprintf_r+0x182>
20415a06:	56c2                	lw	a3,48(sp)
20415a08:	06c00793          	li	a5,108
20415a0c:	0006c703          	lbu	a4,0(a3)
20415a10:	00f71763          	bne	a4,a5,20415a1e <_vfprintf_r+0x304>
20415a14:	0685                	addi	a3,a3,1
20415a16:	d836                	sw	a3,48(sp)
20415a18:	02046413          	ori	s0,s0,32
20415a1c:	b541                	j	2041589c <_vfprintf_r+0x182>
20415a1e:	01046413          	ori	s0,s0,16
20415a22:	bdad                	j	2041589c <_vfprintf_r+0x182>
20415a24:	000aa783          	lw	a5,0(s5)
20415a28:	004a8713          	addi	a4,s5,4
20415a2c:	d63a                	sw	a4,44(sp)
20415a2e:	12f10e23          	sb	a5,316(sp)
20415a32:	0a010ba3          	sb	zero,183(sp)
20415a36:	d202                	sw	zero,36(sp)
20415a38:	4b05                	li	s6,1
20415a3a:	4a81                	li	s5,0
20415a3c:	4c01                	li	s8,0
20415a3e:	4b81                	li	s7,0
20415a40:	4c81                	li	s9,0
20415a42:	1a64                	addi	s1,sp,316
20415a44:	0290006f          	j	2041626c <_vfprintf_r+0xb52>
20415a48:	01046413          	ori	s0,s0,16
20415a4c:	02047793          	andi	a5,s0,32
20415a50:	cba9                	beqz	a5,20415aa2 <_vfprintf_r+0x388>
20415a52:	0a9d                	addi	s5,s5,7
20415a54:	ff8afa93          	andi	s5,s5,-8
20415a58:	000aac83          	lw	s9,0(s5)
20415a5c:	004aac03          	lw	s8,4(s5)
20415a60:	008a8793          	addi	a5,s5,8
20415a64:	d63e                	sw	a5,44(sp)
20415a66:	000c5e63          	bgez	s8,20415a82 <_vfprintf_r+0x368>
20415a6a:	41900cb3          	neg	s9,s9
20415a6e:	019037b3          	snez	a5,s9
20415a72:	41800c33          	neg	s8,s8
20415a76:	40fc0c33          	sub	s8,s8,a5
20415a7a:	02d00793          	li	a5,45
20415a7e:	0af10ba3          	sb	a5,183(sp)
20415a82:	57fd                	li	a5,-1
20415a84:	22fb1ae3          	bne	s6,a5,204164b8 <_vfprintf_r+0xd9e>
20415a88:	280c1be3          	bnez	s8,2041651e <_vfprintf_r+0xe04>
20415a8c:	47a5                	li	a5,9
20415a8e:	2997e8e3          	bltu	a5,s9,2041651e <_vfprintf_r+0xe04>
20415a92:	030c8c93          	addi	s9,s9,48
20415a96:	19910fa3          	sb	s9,415(sp)
20415a9a:	19f10493          	addi	s1,sp,415
20415a9e:	26b0006f          	j	20416508 <_vfprintf_r+0xdee>
20415aa2:	004a8593          	addi	a1,s5,4
20415aa6:	d62e                	sw	a1,44(sp)
20415aa8:	01047793          	andi	a5,s0,16
20415aac:	c791                	beqz	a5,20415ab8 <_vfprintf_r+0x39e>
20415aae:	000aac83          	lw	s9,0(s5)
20415ab2:	41fcdc13          	srai	s8,s9,0x1f
20415ab6:	bf45                	j	20415a66 <_vfprintf_r+0x34c>
20415ab8:	04047793          	andi	a5,s0,64
20415abc:	000aac83          	lw	s9,0(s5)
20415ac0:	c789                	beqz	a5,20415aca <_vfprintf_r+0x3b0>
20415ac2:	0cc2                	slli	s9,s9,0x10
20415ac4:	410cdc93          	srai	s9,s9,0x10
20415ac8:	b7ed                	j	20415ab2 <_vfprintf_r+0x398>
20415aca:	20047793          	andi	a5,s0,512
20415ace:	d3f5                	beqz	a5,20415ab2 <_vfprintf_r+0x398>
20415ad0:	0ce2                	slli	s9,s9,0x18
20415ad2:	418cdc93          	srai	s9,s9,0x18
20415ad6:	bff1                	j	20415ab2 <_vfprintf_r+0x398>
20415ad8:	00847793          	andi	a5,s0,8
20415adc:	cfad                	beqz	a5,20415b56 <_vfprintf_r+0x43c>
20415ade:	000aa783          	lw	a5,0(s5)
20415ae2:	004a8613          	addi	a2,s5,4
20415ae6:	d632                	sw	a2,44(sp)
20415ae8:	43d4                	lw	a3,4(a5)
20415aea:	4390                	lw	a2,0(a5)
20415aec:	4798                	lw	a4,8(a5)
20415aee:	47dc                	lw	a5,12(a5)
20415af0:	d1b2                	sw	a2,224(sp)
20415af2:	d3b6                	sw	a3,228(sp)
20415af4:	d5ba                	sw	a4,232(sp)
20415af6:	d7be                	sw	a5,236(sp)
20415af8:	1188                	addi	a0,sp,224
20415afa:	c246                	sw	a7,4(sp)
20415afc:	6a8030ef          	jal	ra,204191a4 <_ldcheck>
20415b00:	df2a                	sw	a0,188(sp)
20415b02:	4789                	li	a5,2
20415b04:	4892                	lw	a7,4(sp)
20415b06:	08f51563          	bne	a0,a5,20415b90 <_vfprintf_r+0x476>
20415b0a:	578e                	lw	a5,224(sp)
20415b0c:	090c                	addi	a1,sp,144
20415b0e:	1108                	addi	a0,sp,160
20415b10:	d13e                	sw	a5,160(sp)
20415b12:	579e                	lw	a5,228(sp)
20415b14:	c902                	sw	zero,144(sp)
20415b16:	cb02                	sw	zero,148(sp)
20415b18:	d33e                	sw	a5,164(sp)
20415b1a:	57ae                	lw	a5,232(sp)
20415b1c:	cd02                	sw	zero,152(sp)
20415b1e:	cf02                	sw	zero,156(sp)
20415b20:	d53e                	sw	a5,168(sp)
20415b22:	57be                	lw	a5,236(sp)
20415b24:	d73e                	sw	a5,172(sp)
20415b26:	31f070ef          	jal	ra,2041d644 <__letf2>
20415b2a:	4892                	lw	a7,4(sp)
20415b2c:	00055663          	bgez	a0,20415b38 <_vfprintf_r+0x41e>
20415b30:	02d00793          	li	a5,45
20415b34:	0af10ba3          	sb	a5,183(sp)
20415b38:	04700793          	li	a5,71
20415b3c:	05a7c563          	blt	a5,s10,20415b86 <_vfprintf_r+0x46c>
20415b40:	204214b7          	lui	s1,0x20421
20415b44:	73048493          	addi	s1,s1,1840 # 20421730 <zeroes.4369+0x44>
20415b48:	f7f47413          	andi	s0,s0,-129
20415b4c:	d202                	sw	zero,36(sp)
20415b4e:	4b0d                	li	s6,3
20415b50:	4a81                	li	s5,0
20415b52:	1c10006f          	j	20416512 <_vfprintf_r+0xdf8>
20415b56:	0a9d                	addi	s5,s5,7
20415b58:	ff8afa93          	andi	s5,s5,-8
20415b5c:	000aa583          	lw	a1,0(s5)
20415b60:	004aa603          	lw	a2,4(s5)
20415b64:	008a8693          	addi	a3,s5,8
20415b68:	1108                	addi	a0,sp,160
20415b6a:	c246                	sw	a7,4(sp)
20415b6c:	d636                	sw	a3,44(sp)
20415b6e:	045090ef          	jal	ra,2041f3b2 <__extenddftf2>
20415b72:	578a                	lw	a5,160(sp)
20415b74:	4892                	lw	a7,4(sp)
20415b76:	d1be                	sw	a5,224(sp)
20415b78:	579a                	lw	a5,164(sp)
20415b7a:	d3be                	sw	a5,228(sp)
20415b7c:	57aa                	lw	a5,168(sp)
20415b7e:	d5be                	sw	a5,232(sp)
20415b80:	57ba                	lw	a5,172(sp)
20415b82:	d7be                	sw	a5,236(sp)
20415b84:	bf95                	j	20415af8 <_vfprintf_r+0x3de>
20415b86:	204214b7          	lui	s1,0x20421
20415b8a:	73448493          	addi	s1,s1,1844 # 20421734 <zeroes.4369+0x48>
20415b8e:	bf6d                	j	20415b48 <_vfprintf_r+0x42e>
20415b90:	4785                	li	a5,1
20415b92:	02f51063          	bne	a0,a5,20415bb2 <_vfprintf_r+0x498>
20415b96:	04700793          	li	a5,71
20415b9a:	01a7c763          	blt	a5,s10,20415ba8 <_vfprintf_r+0x48e>
20415b9e:	204214b7          	lui	s1,0x20421
20415ba2:	73848493          	addi	s1,s1,1848 # 20421738 <zeroes.4369+0x4c>
20415ba6:	b74d                	j	20415b48 <_vfprintf_r+0x42e>
20415ba8:	204214b7          	lui	s1,0x20421
20415bac:	73c48493          	addi	s1,s1,1852 # 2042173c <zeroes.4369+0x50>
20415bb0:	bf61                	j	20415b48 <_vfprintf_r+0x42e>
20415bb2:	fdfd7b93          	andi	s7,s10,-33
20415bb6:	04100793          	li	a5,65
20415bba:	04fb9d63          	bne	s7,a5,20415c14 <_vfprintf_r+0x4fa>
20415bbe:	03000793          	li	a5,48
20415bc2:	0af10c23          	sb	a5,184(sp)
20415bc6:	06100713          	li	a4,97
20415bca:	05800793          	li	a5,88
20415bce:	00ed1463          	bne	s10,a4,20415bd6 <_vfprintf_r+0x4bc>
20415bd2:	07800793          	li	a5,120
20415bd6:	0af10ca3          	sb	a5,185(sp)
20415bda:	06300793          	li	a5,99
20415bde:	00246413          	ori	s0,s0,2
20415be2:	3567d963          	ble	s6,a5,20415f34 <_vfprintf_r+0x81a>
20415be6:	001b0593          	addi	a1,s6,1
20415bea:	854e                	mv	a0,s3
20415bec:	c246                	sw	a7,4(sp)
20415bee:	72a030ef          	jal	ra,20419318 <_malloc_r>
20415bf2:	84aa                	mv	s1,a0
20415bf4:	4892                	lw	a7,4(sp)
20415bf6:	34051263          	bnez	a0,20415f3a <_vfprintf_r+0x820>
20415bfa:	00c95783          	lhu	a5,12(s2)
20415bfe:	0407e793          	ori	a5,a5,64
20415c02:	00f91623          	sh	a5,12(s2)
20415c06:	00c95783          	lhu	a5,12(s2)
20415c0a:	0407f793          	andi	a5,a5,64
20415c0e:	bc0781e3          	beqz	a5,204157d0 <_vfprintf_r+0xb6>
20415c12:	b109                	j	20415814 <_vfprintf_r+0xfa>
20415c14:	57fd                	li	a5,-1
20415c16:	32fb0463          	beq	s6,a5,20415f3e <_vfprintf_r+0x824>
20415c1a:	04700793          	li	a5,71
20415c1e:	d202                	sw	zero,36(sp)
20415c20:	00fb9463          	bne	s7,a5,20415c28 <_vfprintf_r+0x50e>
20415c24:	320b0063          	beqz	s6,20415f44 <_vfprintf_r+0x82a>
20415c28:	5a3e                	lw	s4,236(sp)
20415c2a:	10046713          	ori	a4,s0,256
20415c2e:	da3a                	sw	a4,52(sp)
20415c30:	c682                	sw	zero,76(sp)
20415c32:	5e0e                	lw	t3,224(sp)
20415c34:	5d9e                	lw	s11,228(sp)
20415c36:	5cae                	lw	s9,232(sp)
20415c38:	000a5963          	bgez	s4,20415c4a <_vfprintf_r+0x530>
20415c3c:	800007b7          	lui	a5,0x80000
20415c40:	0147ca33          	xor	s4,a5,s4
20415c44:	02d00793          	li	a5,45
20415c48:	c6be                	sw	a5,76(sp)
20415c4a:	04100793          	li	a5,65
20415c4e:	32fb9863          	bne	s7,a5,20415f7e <_vfprintf_r+0x864>
20415c52:	1108                	addi	a0,sp,160
20415c54:	c246                	sw	a7,4(sp)
20415c56:	d172                	sw	t3,160(sp)
20415c58:	d36e                	sw	s11,164(sp)
20415c5a:	d566                	sw	s9,168(sp)
20415c5c:	d752                	sw	s4,172(sp)
20415c5e:	0bf090ef          	jal	ra,2041f51c <__trunctfdf2>
20415c62:	1970                	addi	a2,sp,188
20415c64:	0b9040ef          	jal	ra,2041a51c <frexp>
20415c68:	862e                	mv	a2,a1
20415c6a:	85aa                	mv	a1,a0
20415c6c:	1108                	addi	a0,sp,160
20415c6e:	744090ef          	jal	ra,2041f3b2 <__extenddftf2>
20415c72:	558a                	lw	a1,160(sp)
20415c74:	204217b7          	lui	a5,0x20421
20415c78:	70078793          	addi	a5,a5,1792 # 20421700 <zeroes.4369+0x14>
20415c7c:	c12e                	sw	a1,128(sp)
20415c7e:	559a                	lw	a1,164(sp)
20415c80:	4390                	lw	a2,0(a5)
20415c82:	43d4                	lw	a3,4(a5)
20415c84:	c32e                	sw	a1,132(sp)
20415c86:	55aa                	lw	a1,168(sp)
20415c88:	4798                	lw	a4,8(a5)
20415c8a:	47dc                	lw	a5,12(a5)
20415c8c:	c52e                	sw	a1,136(sp)
20415c8e:	55ba                	lw	a1,172(sp)
20415c90:	d8b2                	sw	a2,112(sp)
20415c92:	0908                	addi	a0,sp,144
20415c94:	c72e                	sw	a1,140(sp)
20415c96:	1890                	addi	a2,sp,112
20415c98:	010c                	addi	a1,sp,128
20415c9a:	dab6                	sw	a3,116(sp)
20415c9c:	dcba                	sw	a4,120(sp)
20415c9e:	debe                	sw	a5,124(sp)
20415ca0:	2b7070ef          	jal	ra,2041d756 <__multf3>
20415ca4:	43ca                	lw	t2,144(sp)
20415ca6:	485a                	lw	a6,148(sp)
20415ca8:	4dea                	lw	s11,152(sp)
20415caa:	4cfa                	lw	s9,156(sp)
20415cac:	090c                	addi	a1,sp,144
20415cae:	1108                	addi	a0,sp,160
20415cb0:	d11e                	sw	t2,160(sp)
20415cb2:	d342                	sw	a6,164(sp)
20415cb4:	d01e                	sw	t2,32(sp)
20415cb6:	ca42                	sw	a6,20(sp)
20415cb8:	d56e                	sw	s11,168(sp)
20415cba:	d766                	sw	s9,172(sp)
20415cbc:	c902                	sw	zero,144(sp)
20415cbe:	cb02                	sw	zero,148(sp)
20415cc0:	cd02                	sw	zero,152(sp)
20415cc2:	cf02                	sw	zero,156(sp)
20415cc4:	7c8070ef          	jal	ra,2041d48c <__eqtf2>
20415cc8:	5382                	lw	t2,32(sp)
20415cca:	4852                	lw	a6,20(sp)
20415ccc:	4892                	lw	a7,4(sp)
20415cce:	e119                	bnez	a0,20415cd4 <_vfprintf_r+0x5ba>
20415cd0:	4785                	li	a5,1
20415cd2:	df3e                	sw	a5,188(sp)
20415cd4:	06100793          	li	a5,97
20415cd8:	26fd1963          	bne	s10,a5,20415f4a <_vfprintf_r+0x830>
20415cdc:	20421a37          	lui	s4,0x20421
20415ce0:	740a0a13          	addi	s4,s4,1856 # 20421740 <zeroes.4369+0x54>
20415ce4:	20421737          	lui	a4,0x20421
20415ce8:	71070713          	addi	a4,a4,1808 # 20421710 <zeroes.4369+0x24>
20415cec:	4314                	lw	a3,0(a4)
20415cee:	435c                	lw	a5,4(a4)
20415cf0:	fffb0e13          	addi	t3,s6,-1
20415cf4:	d0b6                	sw	a3,96(sp)
20415cf6:	4714                	lw	a3,8(a4)
20415cf8:	4758                	lw	a4,12(a4)
20415cfa:	8c26                	mv	s8,s1
20415cfc:	d2be                	sw	a5,100(sp)
20415cfe:	d4b6                	sw	a3,104(sp)
20415d00:	d6ba                	sw	a4,108(sp)
20415d02:	5706                	lw	a4,96(sp)
20415d04:	5796                	lw	a5,100(sp)
20415d06:	56a6                	lw	a3,104(sp)
20415d08:	c13a                	sw	a4,128(sp)
20415d0a:	5736                	lw	a4,108(sp)
20415d0c:	090c                	addi	a1,sp,144
20415d0e:	0110                	addi	a2,sp,128
20415d10:	1108                	addi	a0,sp,160
20415d12:	c246                	sw	a7,4(sp)
20415d14:	c472                	sw	t3,8(sp)
20415d16:	c91e                	sw	t2,144(sp)
20415d18:	cb42                	sw	a6,148(sp)
20415d1a:	c33e                	sw	a5,132(sp)
20415d1c:	c73a                	sw	a4,140(sp)
20415d1e:	cd6e                	sw	s11,152(sp)
20415d20:	cf66                	sw	s9,156(sp)
20415d22:	c536                	sw	a3,136(sp)
20415d24:	233070ef          	jal	ra,2041d756 <__multf3>
20415d28:	560a                	lw	a2,160(sp)
20415d2a:	569a                	lw	a3,164(sp)
20415d2c:	1108                	addi	a0,sp,160
20415d2e:	d032                	sw	a2,32(sp)
20415d30:	ca36                	sw	a3,20(sp)
20415d32:	49c090ef          	jal	ra,2041f1ce <__fixtfsi>
20415d36:	85aa                	mv	a1,a0
20415d38:	8aaa                	mv	s5,a0
20415d3a:	1108                	addi	a0,sp,160
20415d3c:	5daa                	lw	s11,168(sp)
20415d3e:	5cba                	lw	s9,172(sp)
20415d40:	584090ef          	jal	ra,2041f2c4 <__floatsitf>
20415d44:	570a                	lw	a4,160(sp)
20415d46:	5602                	lw	a2,32(sp)
20415d48:	46d2                	lw	a3,20(sp)
20415d4a:	d8ba                	sw	a4,112(sp)
20415d4c:	571a                	lw	a4,164(sp)
20415d4e:	c132                	sw	a2,128(sp)
20415d50:	010c                	addi	a1,sp,128
20415d52:	daba                	sw	a4,116(sp)
20415d54:	572a                	lw	a4,168(sp)
20415d56:	1890                	addi	a2,sp,112
20415d58:	0908                	addi	a0,sp,144
20415d5a:	dcba                	sw	a4,120(sp)
20415d5c:	573a                	lw	a4,172(sp)
20415d5e:	c56e                	sw	s11,136(sp)
20415d60:	c766                	sw	s9,140(sp)
20415d62:	deba                	sw	a4,124(sp)
20415d64:	c336                	sw	a3,132(sp)
20415d66:	5c6080ef          	jal	ra,2041e32c <__subtf3>
20415d6a:	015a0733          	add	a4,s4,s5
20415d6e:	00074703          	lbu	a4,0(a4)
20415d72:	0c05                	addi	s8,s8,1
20415d74:	4f6a                	lw	t5,152(sp)
20415d76:	4efa                	lw	t4,156(sp)
20415d78:	42ca                	lw	t0,144(sp)
20415d7a:	4fda                	lw	t6,148(sp)
20415d7c:	feec0fa3          	sb	a4,-1(s8)
20415d80:	4e22                	lw	t3,8(sp)
20415d82:	577d                	li	a4,-1
20415d84:	8dfa                	mv	s11,t5
20415d86:	cef2                	sw	t3,92(sp)
20415d88:	8cf6                	mv	s9,t4
20415d8a:	4892                	lw	a7,4(sp)
20415d8c:	02ee0f63          	beq	t3,a4,20415dca <_vfprintf_r+0x6b0>
20415d90:	1e7d                	addi	t3,t3,-1
20415d92:	090c                	addi	a1,sp,144
20415d94:	1108                	addi	a0,sp,160
20415d96:	d116                	sw	t0,160(sp)
20415d98:	d37e                	sw	t6,164(sp)
20415d9a:	d57a                	sw	t5,168(sp)
20415d9c:	d776                	sw	t4,172(sp)
20415d9e:	ce16                	sw	t0,28(sp)
20415da0:	d016                	sw	t0,32(sp)
20415da2:	ca7e                	sw	t6,20(sp)
20415da4:	c472                	sw	t3,8(sp)
20415da6:	c676                	sw	t4,12(sp)
20415da8:	c87a                	sw	t5,16(sp)
20415daa:	cc7e                	sw	t6,24(sp)
20415dac:	c902                	sw	zero,144(sp)
20415dae:	cb02                	sw	zero,148(sp)
20415db0:	cd02                	sw	zero,152(sp)
20415db2:	cf02                	sw	zero,156(sp)
20415db4:	6d8070ef          	jal	ra,2041d48c <__eqtf2>
20415db8:	42f2                	lw	t0,28(sp)
20415dba:	5382                	lw	t2,32(sp)
20415dbc:	4852                	lw	a6,20(sp)
20415dbe:	4892                	lw	a7,4(sp)
20415dc0:	4e22                	lw	t3,8(sp)
20415dc2:	4eb2                	lw	t4,12(sp)
20415dc4:	4f42                	lw	t5,16(sp)
20415dc6:	4fe2                	lw	t6,24(sp)
20415dc8:	fd0d                	bnez	a0,20415d02 <_vfprintf_r+0x5e8>
20415dca:	20421737          	lui	a4,0x20421
20415dce:	72070713          	addi	a4,a4,1824 # 20421720 <zeroes.4369+0x34>
20415dd2:	4310                	lw	a2,0(a4)
20415dd4:	4354                	lw	a3,4(a4)
20415dd6:	00872d83          	lw	s11,8(a4)
20415dda:	00c72c83          	lw	s9,12(a4)
20415dde:	090c                	addi	a1,sp,144
20415de0:	1108                	addi	a0,sp,160
20415de2:	d116                	sw	t0,160(sp)
20415de4:	d37e                	sw	t6,164(sp)
20415de6:	d57a                	sw	t5,168(sp)
20415de8:	d776                	sw	t4,172(sp)
20415dea:	c932                	sw	a2,144(sp)
20415dec:	cb36                	sw	a3,148(sp)
20415dee:	ce16                	sw	t0,28(sp)
20415df0:	d032                	sw	a2,32(sp)
20415df2:	ca36                	sw	a3,20(sp)
20415df4:	c246                	sw	a7,4(sp)
20415df6:	c676                	sw	t4,12(sp)
20415df8:	c87a                	sw	t5,16(sp)
20415dfa:	cc7e                	sw	t6,24(sp)
20415dfc:	cd6e                	sw	s11,152(sp)
20415dfe:	cf66                	sw	s9,156(sp)
20415e00:	732070ef          	jal	ra,2041d532 <__getf2>
20415e04:	42f2                	lw	t0,28(sp)
20415e06:	5602                	lw	a2,32(sp)
20415e08:	46d2                	lw	a3,20(sp)
20415e0a:	4892                	lw	a7,4(sp)
20415e0c:	4eb2                	lw	t4,12(sp)
20415e0e:	4f42                	lw	t5,16(sp)
20415e10:	4fe2                	lw	t6,24(sp)
20415e12:	02a04563          	bgtz	a0,20415e3c <_vfprintf_r+0x722>
20415e16:	090c                	addi	a1,sp,144
20415e18:	1108                	addi	a0,sp,160
20415e1a:	d116                	sw	t0,160(sp)
20415e1c:	d37e                	sw	t6,164(sp)
20415e1e:	d57a                	sw	t5,168(sp)
20415e20:	d776                	sw	t4,172(sp)
20415e22:	c932                	sw	a2,144(sp)
20415e24:	cb36                	sw	a3,148(sp)
20415e26:	cd6e                	sw	s11,152(sp)
20415e28:	cf66                	sw	s9,156(sp)
20415e2a:	662070ef          	jal	ra,2041d48c <__eqtf2>
20415e2e:	4892                	lw	a7,4(sp)
20415e30:	14051163          	bnez	a0,20415f72 <_vfprintf_r+0x858>
20415e34:	001afa93          	andi	s5,s5,1
20415e38:	120a8d63          	beqz	s5,20415f72 <_vfprintf_r+0x858>
20415e3c:	00fa4603          	lbu	a2,15(s4)
20415e40:	c7e2                	sw	s8,204(sp)
20415e42:	03000593          	li	a1,48
20415e46:	46be                	lw	a3,204(sp)
20415e48:	fff68713          	addi	a4,a3,-1
20415e4c:	c7ba                	sw	a4,204(sp)
20415e4e:	fff6c703          	lbu	a4,-1(a3)
20415e52:	10c70163          	beq	a4,a2,20415f54 <_vfprintf_r+0x83a>
20415e56:	03900613          	li	a2,57
20415e5a:	10c71063          	bne	a4,a2,20415f5a <_vfprintf_r+0x840>
20415e5e:	00aa4703          	lbu	a4,10(s4)
20415e62:	fee68fa3          	sb	a4,-1(a3)
20415e66:	8a62                	mv	s4,s8
20415e68:	04700713          	li	a4,71
20415e6c:	409a0a33          	sub	s4,s4,s1
20415e70:	5cfa                	lw	s9,188(sp)
20415e72:	1ceb9e63          	bne	s7,a4,2041604e <_vfprintf_r+0x934>
20415e76:	5775                	li	a4,-3
20415e78:	00ecc463          	blt	s9,a4,20415e80 <_vfprintf_r+0x766>
20415e7c:	239b5d63          	ble	s9,s6,204160b6 <_vfprintf_r+0x99c>
20415e80:	1d79                	addi	s10,s10,-2
20415e82:	fffc8693          	addi	a3,s9,-1
20415e86:	df36                	sw	a3,188(sp)
20415e88:	fdfd7613          	andi	a2,s10,-33
20415e8c:	04100513          	li	a0,65
20415e90:	0ffd7713          	andi	a4,s10,255
20415e94:	4581                	li	a1,0
20415e96:	00a61663          	bne	a2,a0,20415ea2 <_vfprintf_r+0x788>
20415e9a:	073d                	addi	a4,a4,15
20415e9c:	0ff77713          	andi	a4,a4,255
20415ea0:	4585                	li	a1,1
20415ea2:	0ce10223          	sb	a4,196(sp)
20415ea6:	02b00793          	li	a5,43
20415eaa:	0006d763          	bgez	a3,20415eb8 <_vfprintf_r+0x79e>
20415eae:	4685                	li	a3,1
20415eb0:	419686b3          	sub	a3,a3,s9
20415eb4:	02d00793          	li	a5,45
20415eb8:	0cf102a3          	sb	a5,197(sp)
20415ebc:	47a5                	li	a5,9
20415ebe:	1cd7d363          	ble	a3,a5,20416084 <_vfprintf_r+0x96a>
20415ec2:	0d310713          	addi	a4,sp,211
20415ec6:	853a                	mv	a0,a4
20415ec8:	45a9                	li	a1,10
20415eca:	4825                	li	a6,9
20415ecc:	02b6e7b3          	rem	a5,a3,a1
20415ed0:	fff70613          	addi	a2,a4,-1
20415ed4:	02b6c6b3          	div	a3,a3,a1
20415ed8:	03078793          	addi	a5,a5,48
20415edc:	fef70fa3          	sb	a5,-1(a4)
20415ee0:	18d84963          	blt	a6,a3,20416072 <_vfprintf_r+0x958>
20415ee4:	03068793          	addi	a5,a3,48
20415ee8:	fef60fa3          	sb	a5,-1(a2)
20415eec:	1779                	addi	a4,a4,-2
20415eee:	0c610613          	addi	a2,sp,198
20415ef2:	18a76263          	bltu	a4,a0,20416076 <_vfprintf_r+0x95c>
20415ef6:	01dc                	addi	a5,sp,196
20415ef8:	40f607b3          	sub	a5,a2,a5
20415efc:	cabe                	sw	a5,84(sp)
20415efe:	01478b33          	add	s6,a5,s4
20415f02:	4785                	li	a5,1
20415f04:	0147c563          	blt	a5,s4,20415f0e <_vfprintf_r+0x7f4>
20415f08:	00147793          	andi	a5,s0,1
20415f0c:	c399                	beqz	a5,20415f12 <_vfprintf_r+0x7f8>
20415f0e:	55e2                	lw	a1,56(sp)
20415f10:	9b2e                	add	s6,s6,a1
20415f12:	bff47413          	andi	s0,s0,-1025
20415f16:	10046413          	ori	s0,s0,256
20415f1a:	da22                	sw	s0,52(sp)
20415f1c:	4c01                	li	s8,0
20415f1e:	4b81                	li	s7,0
20415f20:	4c81                	li	s9,0
20415f22:	4736                	lw	a4,76(sp)
20415f24:	c709                	beqz	a4,20415f2e <_vfprintf_r+0x814>
20415f26:	02d00713          	li	a4,45
20415f2a:	0ae10ba3          	sb	a4,183(sp)
20415f2e:	5452                	lw	s0,52(sp)
20415f30:	4a81                	li	s5,0
20415f32:	ae2d                	j	2041626c <_vfprintf_r+0xb52>
20415f34:	d202                	sw	zero,36(sp)
20415f36:	1a64                	addi	s1,sp,316
20415f38:	b9c5                	j	20415c28 <_vfprintf_r+0x50e>
20415f3a:	d22a                	sw	a0,36(sp)
20415f3c:	b1f5                	j	20415c28 <_vfprintf_r+0x50e>
20415f3e:	d202                	sw	zero,36(sp)
20415f40:	4b19                	li	s6,6
20415f42:	b1dd                	j	20415c28 <_vfprintf_r+0x50e>
20415f44:	d25a                	sw	s6,36(sp)
20415f46:	4b05                	li	s6,1
20415f48:	b1c5                	j	20415c28 <_vfprintf_r+0x50e>
20415f4a:	20421a37          	lui	s4,0x20421
20415f4e:	754a0a13          	addi	s4,s4,1876 # 20421754 <zeroes.4369+0x68>
20415f52:	bb49                	j	20415ce4 <_vfprintf_r+0x5ca>
20415f54:	feb68fa3          	sb	a1,-1(a3)
20415f58:	b5fd                	j	20415e46 <_vfprintf_r+0x72c>
20415f5a:	0705                	addi	a4,a4,1
20415f5c:	0ff77713          	andi	a4,a4,255
20415f60:	b709                	j	20415e62 <_vfprintf_r+0x748>
20415f62:	0a05                	addi	s4,s4,1
20415f64:	feea0fa3          	sb	a4,-1(s4)
20415f68:	414c07b3          	sub	a5,s8,s4
20415f6c:	fe07dbe3          	bgez	a5,20415f62 <_vfprintf_r+0x848>
20415f70:	bde5                	j	20415e68 <_vfprintf_r+0x74e>
20415f72:	47f6                	lw	a5,92(sp)
20415f74:	8a62                	mv	s4,s8
20415f76:	03000713          	li	a4,48
20415f7a:	9c3e                	add	s8,s8,a5
20415f7c:	b7f5                	j	20415f68 <_vfprintf_r+0x84e>
20415f7e:	04600793          	li	a5,70
20415f82:	00fb8b63          	beq	s7,a5,20415f98 <_vfprintf_r+0x87e>
20415f86:	04500793          	li	a5,69
20415f8a:	001b0a93          	addi	s5,s6,1
20415f8e:	00fb8363          	beq	s7,a5,20415f94 <_vfprintf_r+0x87a>
20415f92:	8ada                	mv	s5,s6
20415f94:	4609                	li	a2,2
20415f96:	a019                	j	20415f9c <_vfprintf_r+0x882>
20415f98:	8ada                	mv	s5,s6
20415f9a:	460d                	li	a2,3
20415f9c:	019c                	addi	a5,sp,192
20415f9e:	0cc10813          	addi	a6,sp,204
20415fa2:	1978                	addi	a4,sp,188
20415fa4:	86d6                	mv	a3,s5
20415fa6:	110c                	addi	a1,sp,160
20415fa8:	854e                	mv	a0,s3
20415faa:	d172                	sw	t3,160(sp)
20415fac:	c246                	sw	a7,4(sp)
20415fae:	c472                	sw	t3,8(sp)
20415fb0:	d36e                	sw	s11,164(sp)
20415fb2:	d566                	sw	s9,168(sp)
20415fb4:	d752                	sw	s4,172(sp)
20415fb6:	0db020ef          	jal	ra,20418890 <_ldtoa_r>
20415fba:	04700793          	li	a5,71
20415fbe:	84aa                	mv	s1,a0
20415fc0:	4892                	lw	a7,4(sp)
20415fc2:	4e22                	lw	t3,8(sp)
20415fc4:	00fb9563          	bne	s7,a5,20415fce <_vfprintf_r+0x8b4>
20415fc8:	00147793          	andi	a5,s0,1
20415fcc:	c7b5                	beqz	a5,20416038 <_vfprintf_r+0x91e>
20415fce:	04600793          	li	a5,70
20415fd2:	01548c33          	add	s8,s1,s5
20415fd6:	02fb9f63          	bne	s7,a5,20416014 <_vfprintf_r+0x8fa>
20415fda:	0004c703          	lbu	a4,0(s1)
20415fde:	03000793          	li	a5,48
20415fe2:	02f71763          	bne	a4,a5,20416010 <_vfprintf_r+0x8f6>
20415fe6:	090c                	addi	a1,sp,144
20415fe8:	1108                	addi	a0,sp,160
20415fea:	d172                	sw	t3,160(sp)
20415fec:	c246                	sw	a7,4(sp)
20415fee:	c472                	sw	t3,8(sp)
20415ff0:	d36e                	sw	s11,164(sp)
20415ff2:	d566                	sw	s9,168(sp)
20415ff4:	d752                	sw	s4,172(sp)
20415ff6:	c902                	sw	zero,144(sp)
20415ff8:	cb02                	sw	zero,148(sp)
20415ffa:	cd02                	sw	zero,152(sp)
20415ffc:	cf02                	sw	zero,156(sp)
20415ffe:	48e070ef          	jal	ra,2041d48c <__eqtf2>
20416002:	4892                	lw	a7,4(sp)
20416004:	4e22                	lw	t3,8(sp)
20416006:	c509                	beqz	a0,20416010 <_vfprintf_r+0x8f6>
20416008:	4785                	li	a5,1
2041600a:	41578ab3          	sub	s5,a5,s5
2041600e:	df56                	sw	s5,188(sp)
20416010:	57fa                	lw	a5,188(sp)
20416012:	9c3e                	add	s8,s8,a5
20416014:	090c                	addi	a1,sp,144
20416016:	1108                	addi	a0,sp,160
20416018:	c246                	sw	a7,4(sp)
2041601a:	d172                	sw	t3,160(sp)
2041601c:	d36e                	sw	s11,164(sp)
2041601e:	d566                	sw	s9,168(sp)
20416020:	d752                	sw	s4,172(sp)
20416022:	c902                	sw	zero,144(sp)
20416024:	cb02                	sw	zero,148(sp)
20416026:	cd02                	sw	zero,152(sp)
20416028:	cf02                	sw	zero,156(sp)
2041602a:	462070ef          	jal	ra,2041d48c <__eqtf2>
2041602e:	4892                	lw	a7,4(sp)
20416030:	03000713          	li	a4,48
20416034:	e909                	bnez	a0,20416046 <_vfprintf_r+0x92c>
20416036:	c7e2                	sw	s8,204(sp)
20416038:	4a3e                	lw	s4,204(sp)
2041603a:	b53d                	j	20415e68 <_vfprintf_r+0x74e>
2041603c:	00178693          	addi	a3,a5,1
20416040:	c7b6                	sw	a3,204(sp)
20416042:	00e78023          	sb	a4,0(a5)
20416046:	47be                	lw	a5,204(sp)
20416048:	ff87eae3          	bltu	a5,s8,2041603c <_vfprintf_r+0x922>
2041604c:	b7f5                	j	20416038 <_vfprintf_r+0x91e>
2041604e:	04600713          	li	a4,70
20416052:	e2eb98e3          	bne	s7,a4,20415e82 <_vfprintf_r+0x768>
20416056:	05905763          	blez	s9,204160a4 <_vfprintf_r+0x98a>
2041605a:	000b1563          	bnez	s6,20416064 <_vfprintf_r+0x94a>
2041605e:	00147713          	andi	a4,s0,1
20416062:	cf41                	beqz	a4,204160fa <_vfprintf_r+0x9e0>
20416064:	5662                	lw	a2,56(sp)
20416066:	00cc8733          	add	a4,s9,a2
2041606a:	9b3a                	add	s6,s6,a4
2041606c:	06600d13          	li	s10,102
20416070:	a895                	j	204160e4 <_vfprintf_r+0x9ca>
20416072:	8732                	mv	a4,a2
20416074:	bda1                	j	20415ecc <_vfprintf_r+0x7b2>
20416076:	0705                	addi	a4,a4,1
20416078:	fff74783          	lbu	a5,-1(a4)
2041607c:	0605                	addi	a2,a2,1
2041607e:	fef60fa3          	sb	a5,-1(a2)
20416082:	bd85                	j	20415ef2 <_vfprintf_r+0x7d8>
20416084:	0c610713          	addi	a4,sp,198
20416088:	e599                	bnez	a1,20416096 <_vfprintf_r+0x97c>
2041608a:	03000793          	li	a5,48
2041608e:	0cf10323          	sb	a5,198(sp)
20416092:	0c710713          	addi	a4,sp,199
20416096:	03068793          	addi	a5,a3,48
2041609a:	00170613          	addi	a2,a4,1
2041609e:	00f70023          	sb	a5,0(a4)
204160a2:	bd91                	j	20415ef6 <_vfprintf_r+0x7dc>
204160a4:	000b1563          	bnez	s6,204160ae <_vfprintf_r+0x994>
204160a8:	00147713          	andi	a4,s0,1
204160ac:	cb29                	beqz	a4,204160fe <_vfprintf_r+0x9e4>
204160ae:	56e2                	lw	a3,56(sp)
204160b0:	00168713          	addi	a4,a3,1
204160b4:	bf5d                	j	2041606a <_vfprintf_r+0x950>
204160b6:	014ccc63          	blt	s9,s4,204160ce <_vfprintf_r+0x9b4>
204160ba:	00147713          	andi	a4,s0,1
204160be:	8b66                	mv	s6,s9
204160c0:	c701                	beqz	a4,204160c8 <_vfprintf_r+0x9ae>
204160c2:	5762                	lw	a4,56(sp)
204160c4:	00ec8b33          	add	s6,s9,a4
204160c8:	06700d13          	li	s10,103
204160cc:	a821                	j	204160e4 <_vfprintf_r+0x9ca>
204160ce:	57e2                	lw	a5,56(sp)
204160d0:	06700d13          	li	s10,103
204160d4:	00fa0b33          	add	s6,s4,a5
204160d8:	01904663          	bgtz	s9,204160e4 <_vfprintf_r+0x9ca>
204160dc:	419b0333          	sub	t1,s6,s9
204160e0:	00130b13          	addi	s6,t1,1
204160e4:	40047b93          	andi	s7,s0,1024
204160e8:	4c01                	li	s8,0
204160ea:	e20b8ce3          	beqz	s7,20415f22 <_vfprintf_r+0x808>
204160ee:	4b81                	li	s7,0
204160f0:	e39059e3          	blez	s9,20415f22 <_vfprintf_r+0x808>
204160f4:	0ff00693          	li	a3,255
204160f8:	a015                	j	2041611c <_vfprintf_r+0xa02>
204160fa:	8b66                	mv	s6,s9
204160fc:	bf85                	j	2041606c <_vfprintf_r+0x952>
204160fe:	06600d13          	li	s10,102
20416102:	4b05                	li	s6,1
20416104:	b7c5                	j	204160e4 <_vfprintf_r+0x9ca>
20416106:	03975063          	ble	s9,a4,20416126 <_vfprintf_r+0xa0c>
2041610a:	55a2                	lw	a1,40(sp)
2041610c:	40ec8cb3          	sub	s9,s9,a4
20416110:	0015c703          	lbu	a4,1(a1)
20416114:	c305                	beqz	a4,20416134 <_vfprintf_r+0xa1a>
20416116:	0585                	addi	a1,a1,1
20416118:	0b85                	addi	s7,s7,1
2041611a:	d42e                	sw	a1,40(sp)
2041611c:	5622                	lw	a2,40(sp)
2041611e:	00064703          	lbu	a4,0(a2)
20416122:	fed712e3          	bne	a4,a3,20416106 <_vfprintf_r+0x9ec>
20416126:	4696                	lw	a3,68(sp)
20416128:	018b8733          	add	a4,s7,s8
2041612c:	02d70733          	mul	a4,a4,a3
20416130:	9b3a                	add	s6,s6,a4
20416132:	bbc5                	j	20415f22 <_vfprintf_r+0x808>
20416134:	0c05                	addi	s8,s8,1
20416136:	b7dd                	j	2041611c <_vfprintf_r+0xa02>
20416138:	000aa783          	lw	a5,0(s5)
2041613c:	0a91                	addi	s5,s5,4
2041613e:	d656                	sw	s5,44(sp)
20416140:	02047713          	andi	a4,s0,32
20416144:	cb11                	beqz	a4,20416158 <_vfprintf_r+0xa3e>
20416146:	55f2                	lw	a1,60(sp)
20416148:	41f5d713          	srai	a4,a1,0x1f
2041614c:	c38c                	sw	a1,0(a5)
2041614e:	c3d8                	sw	a4,4(a5)
20416150:	5ab2                	lw	s5,44(sp)
20416152:	54c2                	lw	s1,48(sp)
20416154:	edeff06f          	j	20415832 <_vfprintf_r+0x118>
20416158:	01047713          	andi	a4,s0,16
2041615c:	c701                	beqz	a4,20416164 <_vfprintf_r+0xa4a>
2041615e:	5672                	lw	a2,60(sp)
20416160:	c390                	sw	a2,0(a5)
20416162:	b7fd                	j	20416150 <_vfprintf_r+0xa36>
20416164:	04047713          	andi	a4,s0,64
20416168:	c709                	beqz	a4,20416172 <_vfprintf_r+0xa58>
2041616a:	5772                	lw	a4,60(sp)
2041616c:	00e79023          	sh	a4,0(a5)
20416170:	b7c5                	j	20416150 <_vfprintf_r+0xa36>
20416172:	20047413          	andi	s0,s0,512
20416176:	c409                	beqz	s0,20416180 <_vfprintf_r+0xa66>
20416178:	5772                	lw	a4,60(sp)
2041617a:	00e78023          	sb	a4,0(a5)
2041617e:	bfc9                	j	20416150 <_vfprintf_r+0xa36>
20416180:	56f2                	lw	a3,60(sp)
20416182:	c394                	sw	a3,0(a5)
20416184:	b7f1                	j	20416150 <_vfprintf_r+0xa36>
20416186:	01046413          	ori	s0,s0,16
2041618a:	02047793          	andi	a5,s0,32
2041618e:	c3a1                	beqz	a5,204161ce <_vfprintf_r+0xab4>
20416190:	0a9d                	addi	s5,s5,7
20416192:	ff8afa93          	andi	s5,s5,-8
20416196:	000aac83          	lw	s9,0(s5)
2041619a:	004aac03          	lw	s8,4(s5)
2041619e:	008a8713          	addi	a4,s5,8
204161a2:	d63a                	sw	a4,44(sp)
204161a4:	bff47413          	andi	s0,s0,-1025
204161a8:	4781                	li	a5,0
204161aa:	0a010ba3          	sb	zero,183(sp)
204161ae:	577d                	li	a4,-1
204161b0:	30eb0763          	beq	s6,a4,204164be <_vfprintf_r+0xda4>
204161b4:	8722                	mv	a4,s0
204161b6:	018ce6b3          	or	a3,s9,s8
204161ba:	f7f47413          	andi	s0,s0,-129
204161be:	30069063          	bnez	a3,204164be <_vfprintf_r+0xda4>
204161c2:	400b0663          	beqz	s6,204165ce <_vfprintf_r+0xeb4>
204161c6:	4705                	li	a4,1
204161c8:	2ee79e63          	bne	a5,a4,204164c4 <_vfprintf_r+0xdaa>
204161cc:	b0d9                	j	20415a92 <_vfprintf_r+0x378>
204161ce:	004a8793          	addi	a5,s5,4
204161d2:	d63e                	sw	a5,44(sp)
204161d4:	01047793          	andi	a5,s0,16
204161d8:	c781                	beqz	a5,204161e0 <_vfprintf_r+0xac6>
204161da:	000aac83          	lw	s9,0(s5)
204161de:	a031                	j	204161ea <_vfprintf_r+0xad0>
204161e0:	04047793          	andi	a5,s0,64
204161e4:	c789                	beqz	a5,204161ee <_vfprintf_r+0xad4>
204161e6:	000adc83          	lhu	s9,0(s5)
204161ea:	4c01                	li	s8,0
204161ec:	bf65                	j	204161a4 <_vfprintf_r+0xa8a>
204161ee:	20047793          	andi	a5,s0,512
204161f2:	d7e5                	beqz	a5,204161da <_vfprintf_r+0xac0>
204161f4:	000acc83          	lbu	s9,0(s5)
204161f8:	bfcd                	j	204161ea <_vfprintf_r+0xad0>
204161fa:	77e1                	lui	a5,0xffff8
204161fc:	8307c793          	xori	a5,a5,-2000
20416200:	0af11c23          	sh	a5,184(sp)
20416204:	204217b7          	lui	a5,0x20421
20416208:	74078793          	addi	a5,a5,1856 # 20421740 <zeroes.4369+0x54>
2041620c:	004a8593          	addi	a1,s5,4
20416210:	ccbe                	sw	a5,88(sp)
20416212:	d62e                	sw	a1,44(sp)
20416214:	000aac83          	lw	s9,0(s5)
20416218:	4c01                	li	s8,0
2041621a:	00246413          	ori	s0,s0,2
2041621e:	4789                	li	a5,2
20416220:	07800d13          	li	s10,120
20416224:	b759                	j	204161aa <_vfprintf_r+0xa90>
20416226:	004a8613          	addi	a2,s5,4
2041622a:	d632                	sw	a2,44(sp)
2041622c:	0a010ba3          	sb	zero,183(sp)
20416230:	57fd                	li	a5,-1
20416232:	000aa483          	lw	s1,0(s5)
20416236:	02fb0063          	beq	s6,a5,20416256 <_vfprintf_r+0xb3c>
2041623a:	865a                	mv	a2,s6
2041623c:	4581                	li	a1,0
2041623e:	8526                	mv	a0,s1
20416240:	c246                	sw	a7,4(sp)
20416242:	56e030ef          	jal	ra,204197b0 <memchr>
20416246:	d22a                	sw	a0,36(sp)
20416248:	4892                	lw	a7,4(sp)
2041624a:	900503e3          	beqz	a0,20415b50 <_vfprintf_r+0x436>
2041624e:	40950b33          	sub	s6,a0,s1
20416252:	d202                	sw	zero,36(sp)
20416254:	b8f5                	j	20415b50 <_vfprintf_r+0x436>
20416256:	8526                	mv	a0,s1
20416258:	c246                	sw	a7,4(sp)
2041625a:	8eefd0ef          	jal	ra,20413348 <strlen>
2041625e:	4892                	lw	a7,4(sp)
20416260:	8b2a                	mv	s6,a0
20416262:	d202                	sw	zero,36(sp)
20416264:	4a81                	li	s5,0
20416266:	4c01                	li	s8,0
20416268:	4b81                	li	s7,0
2041626a:	4c81                	li	s9,0
2041626c:	da56                	sw	s5,52(sp)
2041626e:	016ad363          	ble	s6,s5,20416274 <_vfprintf_r+0xb5a>
20416272:	da5a                	sw	s6,52(sp)
20416274:	0b714703          	lbu	a4,183(sp)
20416278:	c701                	beqz	a4,20416280 <_vfprintf_r+0xb66>
2041627a:	5752                	lw	a4,52(sp)
2041627c:	0705                	addi	a4,a4,1
2041627e:	da3a                	sw	a4,52(sp)
20416280:	00247d93          	andi	s11,s0,2
20416284:	000d8563          	beqz	s11,2041628e <_vfprintf_r+0xb74>
20416288:	57d2                	lw	a5,52(sp)
2041628a:	0789                	addi	a5,a5,2
2041628c:	da3e                	sw	a5,52(sp)
2041628e:	08447693          	andi	a3,s0,132
20416292:	c6b6                	sw	a3,76(sp)
20416294:	eaa1                	bnez	a3,204162e4 <_vfprintf_r+0xbca>
20416296:	4786                	lw	a5,64(sp)
20416298:	56d2                	lw	a3,52(sp)
2041629a:	40d78733          	sub	a4,a5,a3
2041629e:	04e05363          	blez	a4,204162e4 <_vfprintf_r+0xbca>
204162a2:	20422e37          	lui	t3,0x20422
204162a6:	4ec1                	li	t4,16
204162a8:	a64e0e13          	addi	t3,t3,-1436 # 20421a64 <blanks.4383>
204162ac:	4f1d                	li	t5,7
204162ae:	46ee                	lw	a3,216(sp)
204162b0:	01c8a023          	sw	t3,0(a7)
204162b4:	467e                	lw	a2,220(sp)
204162b6:	0685                	addi	a3,a3,1
204162b8:	00888593          	addi	a1,a7,8
204162bc:	32eecd63          	blt	t4,a4,204165f6 <_vfprintf_r+0xedc>
204162c0:	00e8a223          	sw	a4,4(a7)
204162c4:	9732                	add	a4,a4,a2
204162c6:	cfba                	sw	a4,220(sp)
204162c8:	cdb6                	sw	a3,216(sp)
204162ca:	471d                	li	a4,7
204162cc:	88ae                	mv	a7,a1
204162ce:	00d75b63          	ble	a3,a4,204162e4 <_vfprintf_r+0xbca>
204162d2:	09d0                	addi	a2,sp,212
204162d4:	85ca                	mv	a1,s2
204162d6:	854e                	mv	a0,s3
204162d8:	a2bfe0ef          	jal	ra,20414d02 <__sprint_r>
204162dc:	260513e3          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204162e0:	0fc10893          	addi	a7,sp,252
204162e4:	0b714703          	lbu	a4,183(sp)
204162e8:	cb1d                	beqz	a4,2041631e <_vfprintf_r+0xc04>
204162ea:	0b710713          	addi	a4,sp,183
204162ee:	00e8a023          	sw	a4,0(a7)
204162f2:	4705                	li	a4,1
204162f4:	00e8a223          	sw	a4,4(a7)
204162f8:	477e                	lw	a4,220(sp)
204162fa:	469d                	li	a3,7
204162fc:	08a1                	addi	a7,a7,8
204162fe:	0705                	addi	a4,a4,1
20416300:	cfba                	sw	a4,220(sp)
20416302:	476e                	lw	a4,216(sp)
20416304:	0705                	addi	a4,a4,1
20416306:	cdba                	sw	a4,216(sp)
20416308:	00e6db63          	ble	a4,a3,2041631e <_vfprintf_r+0xc04>
2041630c:	09d0                	addi	a2,sp,212
2041630e:	85ca                	mv	a1,s2
20416310:	854e                	mv	a0,s3
20416312:	9f1fe0ef          	jal	ra,20414d02 <__sprint_r>
20416316:	220516e3          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
2041631a:	0fc10893          	addi	a7,sp,252
2041631e:	020d8b63          	beqz	s11,20416354 <_vfprintf_r+0xc3a>
20416322:	1938                	addi	a4,sp,184
20416324:	00e8a023          	sw	a4,0(a7)
20416328:	4709                	li	a4,2
2041632a:	00e8a223          	sw	a4,4(a7)
2041632e:	477e                	lw	a4,220(sp)
20416330:	469d                	li	a3,7
20416332:	08a1                	addi	a7,a7,8
20416334:	0709                	addi	a4,a4,2
20416336:	cfba                	sw	a4,220(sp)
20416338:	476e                	lw	a4,216(sp)
2041633a:	0705                	addi	a4,a4,1
2041633c:	cdba                	sw	a4,216(sp)
2041633e:	00e6db63          	ble	a4,a3,20416354 <_vfprintf_r+0xc3a>
20416342:	09d0                	addi	a2,sp,212
20416344:	85ca                	mv	a1,s2
20416346:	854e                	mv	a0,s3
20416348:	9bbfe0ef          	jal	ra,20414d02 <__sprint_r>
2041634c:	1e051be3          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416350:	0fc10893          	addi	a7,sp,252
20416354:	47b6                	lw	a5,76(sp)
20416356:	08000713          	li	a4,128
2041635a:	04e79963          	bne	a5,a4,204163ac <_vfprintf_r+0xc92>
2041635e:	4586                	lw	a1,64(sp)
20416360:	56d2                	lw	a3,52(sp)
20416362:	40d58db3          	sub	s11,a1,a3
20416366:	05b05363          	blez	s11,204163ac <_vfprintf_r+0xc92>
2041636a:	47c1                	li	a5,16
2041636c:	4e1d                	li	t3,7
2041636e:	476e                	lw	a4,216(sp)
20416370:	46fe                	lw	a3,220(sp)
20416372:	00888613          	addi	a2,a7,8
20416376:	0705                	addi	a4,a4,1
20416378:	2bb7c963          	blt	a5,s11,2041662a <_vfprintf_r+0xf10>
2041637c:	204227b7          	lui	a5,0x20422
20416380:	01b8a223          	sw	s11,4(a7)
20416384:	a7478793          	addi	a5,a5,-1420 # 20421a74 <zeroes.4384>
20416388:	9db6                	add	s11,s11,a3
2041638a:	00f8a023          	sw	a5,0(a7)
2041638e:	cfee                	sw	s11,220(sp)
20416390:	cdba                	sw	a4,216(sp)
20416392:	469d                	li	a3,7
20416394:	88b2                	mv	a7,a2
20416396:	00e6db63          	ble	a4,a3,204163ac <_vfprintf_r+0xc92>
2041639a:	09d0                	addi	a2,sp,212
2041639c:	85ca                	mv	a1,s2
2041639e:	854e                	mv	a0,s3
204163a0:	963fe0ef          	jal	ra,20414d02 <__sprint_r>
204163a4:	18051fe3          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204163a8:	0fc10893          	addi	a7,sp,252
204163ac:	416a8ab3          	sub	s5,s5,s6
204163b0:	05505363          	blez	s5,204163f6 <_vfprintf_r+0xcdc>
204163b4:	4dc1                	li	s11,16
204163b6:	481d                	li	a6,7
204163b8:	476e                	lw	a4,216(sp)
204163ba:	46fe                	lw	a3,220(sp)
204163bc:	00888613          	addi	a2,a7,8
204163c0:	0705                	addi	a4,a4,1
204163c2:	2b5dc063          	blt	s11,s5,20416662 <_vfprintf_r+0xf48>
204163c6:	204227b7          	lui	a5,0x20422
204163ca:	0158a223          	sw	s5,4(a7)
204163ce:	a7478793          	addi	a5,a5,-1420 # 20421a74 <zeroes.4384>
204163d2:	9ab6                	add	s5,s5,a3
204163d4:	00f8a023          	sw	a5,0(a7)
204163d8:	cfd6                	sw	s5,220(sp)
204163da:	cdba                	sw	a4,216(sp)
204163dc:	469d                	li	a3,7
204163de:	88b2                	mv	a7,a2
204163e0:	00e6db63          	ble	a4,a3,204163f6 <_vfprintf_r+0xcdc>
204163e4:	09d0                	addi	a2,sp,212
204163e6:	85ca                	mv	a1,s2
204163e8:	854e                	mv	a0,s3
204163ea:	919fe0ef          	jal	ra,20414d02 <__sprint_r>
204163ee:	14051ae3          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204163f2:	0fc10893          	addi	a7,sp,252
204163f6:	10047713          	andi	a4,s0,256
204163fa:	4dfe                	lw	s11,220(sp)
204163fc:	28071d63          	bnez	a4,20416696 <_vfprintf_r+0xf7c>
20416400:	01bb0333          	add	t1,s6,s11
20416404:	0098a023          	sw	s1,0(a7)
20416408:	0168a223          	sw	s6,4(a7)
2041640c:	cf9a                	sw	t1,220(sp)
2041640e:	47ee                	lw	a5,216(sp)
20416410:	471d                	li	a4,7
20416412:	08a1                	addi	a7,a7,8
20416414:	0785                	addi	a5,a5,1
20416416:	cdbe                	sw	a5,216(sp)
20416418:	34f75d63          	ble	a5,a4,20416772 <_vfprintf_r+0x1058>
2041641c:	09d0                	addi	a2,sp,212
2041641e:	85ca                	mv	a1,s2
20416420:	854e                	mv	a0,s3
20416422:	8e1fe0ef          	jal	ra,20414d02 <__sprint_r>
20416426:	10051ee3          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
2041642a:	0fc10893          	addi	a7,sp,252
2041642e:	a691                	j	20416772 <_vfprintf_r+0x1058>
20416430:	01046413          	ori	s0,s0,16
20416434:	02047793          	andi	a5,s0,32
20416438:	cf89                	beqz	a5,20416452 <_vfprintf_r+0xd38>
2041643a:	0a9d                	addi	s5,s5,7
2041643c:	ff8afa93          	andi	s5,s5,-8
20416440:	000aac83          	lw	s9,0(s5)
20416444:	004aac03          	lw	s8,4(s5)
20416448:	008a8693          	addi	a3,s5,8
2041644c:	d636                	sw	a3,44(sp)
2041644e:	4785                	li	a5,1
20416450:	bba9                	j	204161aa <_vfprintf_r+0xa90>
20416452:	004a8713          	addi	a4,s5,4
20416456:	d63a                	sw	a4,44(sp)
20416458:	01047793          	andi	a5,s0,16
2041645c:	c781                	beqz	a5,20416464 <_vfprintf_r+0xd4a>
2041645e:	000aac83          	lw	s9,0(s5)
20416462:	a031                	j	2041646e <_vfprintf_r+0xd54>
20416464:	04047793          	andi	a5,s0,64
20416468:	c789                	beqz	a5,20416472 <_vfprintf_r+0xd58>
2041646a:	000adc83          	lhu	s9,0(s5)
2041646e:	4c01                	li	s8,0
20416470:	bff9                	j	2041644e <_vfprintf_r+0xd34>
20416472:	20047793          	andi	a5,s0,512
20416476:	d7e5                	beqz	a5,2041645e <_vfprintf_r+0xd44>
20416478:	000acc83          	lbu	s9,0(s5)
2041647c:	bfcd                	j	2041646e <_vfprintf_r+0xd54>
2041647e:	204217b7          	lui	a5,0x20421
20416482:	74078793          	addi	a5,a5,1856 # 20421740 <zeroes.4369+0x54>
20416486:	c4aff06f          	j	204158d0 <_vfprintf_r+0x1b6>
2041648a:	004a8593          	addi	a1,s5,4
2041648e:	d62e                	sw	a1,44(sp)
20416490:	01047793          	andi	a5,s0,16
20416494:	c781                	beqz	a5,2041649c <_vfprintf_r+0xd82>
20416496:	000aac83          	lw	s9,0(s5)
2041649a:	a031                	j	204164a6 <_vfprintf_r+0xd8c>
2041649c:	04047793          	andi	a5,s0,64
204164a0:	c791                	beqz	a5,204164ac <_vfprintf_r+0xd92>
204164a2:	000adc83          	lhu	s9,0(s5)
204164a6:	4c01                	li	s8,0
204164a8:	c46ff06f          	j	204158ee <_vfprintf_r+0x1d4>
204164ac:	20047793          	andi	a5,s0,512
204164b0:	d3fd                	beqz	a5,20416496 <_vfprintf_r+0xd7c>
204164b2:	000acc83          	lbu	s9,0(s5)
204164b6:	bfc5                	j	204164a6 <_vfprintf_r+0xd8c>
204164b8:	8722                	mv	a4,s0
204164ba:	4785                	li	a5,1
204164bc:	b9ed                	j	204161b6 <_vfprintf_r+0xa9c>
204164be:	4705                	li	a4,1
204164c0:	dce78463          	beq	a5,a4,20415a88 <_vfprintf_r+0x36e>
204164c4:	4709                	li	a4,2
204164c6:	0ce78e63          	beq	a5,a4,204165a2 <_vfprintf_r+0xe88>
204164ca:	131c                	addi	a5,sp,416
204164cc:	01dc1693          	slli	a3,s8,0x1d
204164d0:	007cf713          	andi	a4,s9,7
204164d4:	003cdc93          	srli	s9,s9,0x3
204164d8:	03070713          	addi	a4,a4,48
204164dc:	0196ecb3          	or	s9,a3,s9
204164e0:	003c5c13          	srli	s8,s8,0x3
204164e4:	fee78fa3          	sb	a4,-1(a5)
204164e8:	018ce6b3          	or	a3,s9,s8
204164ec:	fff78493          	addi	s1,a5,-1
204164f0:	e68d                	bnez	a3,2041651a <_vfprintf_r+0xe00>
204164f2:	00147693          	andi	a3,s0,1
204164f6:	ca89                	beqz	a3,20416508 <_vfprintf_r+0xdee>
204164f8:	03000693          	li	a3,48
204164fc:	00d70663          	beq	a4,a3,20416508 <_vfprintf_r+0xdee>
20416500:	fed48fa3          	sb	a3,-1(s1)
20416504:	ffe78493          	addi	s1,a5,-2
20416508:	1314                	addi	a3,sp,416
2041650a:	8ada                	mv	s5,s6
2041650c:	d202                	sw	zero,36(sp)
2041650e:	40968b33          	sub	s6,a3,s1
20416512:	4c01                	li	s8,0
20416514:	4b81                	li	s7,0
20416516:	4c81                	li	s9,0
20416518:	bb91                	j	2041626c <_vfprintf_r+0xb52>
2041651a:	87a6                	mv	a5,s1
2041651c:	bf45                	j	204164cc <_vfprintf_r+0xdb2>
2041651e:	4a01                	li	s4,0
20416520:	1a010d93          	addi	s11,sp,416
20416524:	40047a93          	andi	s5,s0,1024
20416528:	4ba5                	li	s7,9
2041652a:	4629                	li	a2,10
2041652c:	4681                	li	a3,0
2041652e:	8566                	mv	a0,s9
20416530:	85e2                	mv	a1,s8
20416532:	c246                	sw	a7,4(sp)
20416534:	2fb050ef          	jal	ra,2041c02e <__umoddi3>
20416538:	03050513          	addi	a0,a0,48
2041653c:	fead8fa3          	sb	a0,-1(s11)
20416540:	fffd8493          	addi	s1,s11,-1
20416544:	0a05                	addi	s4,s4,1
20416546:	4892                	lw	a7,4(sp)
20416548:	020a8f63          	beqz	s5,20416586 <_vfprintf_r+0xe6c>
2041654c:	5622                	lw	a2,40(sp)
2041654e:	00064783          	lbu	a5,0(a2)
20416552:	02fa1a63          	bne	s4,a5,20416586 <_vfprintf_r+0xe6c>
20416556:	0ff00693          	li	a3,255
2041655a:	02da0663          	beq	s4,a3,20416586 <_vfprintf_r+0xe6c>
2041655e:	000c1463          	bnez	s8,20416566 <_vfprintf_r+0xe4c>
20416562:	039bf263          	bleu	s9,s7,20416586 <_vfprintf_r+0xe6c>
20416566:	4716                	lw	a4,68(sp)
20416568:	45c6                	lw	a1,80(sp)
2041656a:	c246                	sw	a7,4(sp)
2041656c:	8c99                	sub	s1,s1,a4
2041656e:	863a                	mv	a2,a4
20416570:	8526                	mv	a0,s1
20416572:	e13fc0ef          	jal	ra,20413384 <strncpy>
20416576:	55a2                	lw	a1,40(sp)
20416578:	4a01                	li	s4,0
2041657a:	4892                	lw	a7,4(sp)
2041657c:	0015c783          	lbu	a5,1(a1)
20416580:	c399                	beqz	a5,20416586 <_vfprintf_r+0xe6c>
20416582:	0585                	addi	a1,a1,1
20416584:	d42e                	sw	a1,40(sp)
20416586:	8566                	mv	a0,s9
20416588:	85e2                	mv	a1,s8
2041658a:	4629                	li	a2,10
2041658c:	4681                	li	a3,0
2041658e:	c246                	sw	a7,4(sp)
20416590:	740050ef          	jal	ra,2041bcd0 <__udivdi3>
20416594:	8c2e                	mv	s8,a1
20416596:	8dc9                	or	a1,a1,a0
20416598:	8caa                	mv	s9,a0
2041659a:	4892                	lw	a7,4(sp)
2041659c:	d5b5                	beqz	a1,20416508 <_vfprintf_r+0xdee>
2041659e:	8da6                	mv	s11,s1
204165a0:	b769                	j	2041652a <_vfprintf_r+0xe10>
204165a2:	1304                	addi	s1,sp,416
204165a4:	4666                	lw	a2,88(sp)
204165a6:	00fcf793          	andi	a5,s9,15
204165aa:	14fd                	addi	s1,s1,-1
204165ac:	97b2                	add	a5,a5,a2
204165ae:	0007c783          	lbu	a5,0(a5)
204165b2:	004cdc93          	srli	s9,s9,0x4
204165b6:	00f48023          	sb	a5,0(s1)
204165ba:	01cc1793          	slli	a5,s8,0x1c
204165be:	0197ecb3          	or	s9,a5,s9
204165c2:	004c5c13          	srli	s8,s8,0x4
204165c6:	018ce7b3          	or	a5,s9,s8
204165ca:	ffe9                	bnez	a5,204165a4 <_vfprintf_r+0xe8a>
204165cc:	bf35                	j	20416508 <_vfprintf_r+0xdee>
204165ce:	1304                	addi	s1,sp,416
204165d0:	ff85                	bnez	a5,20416508 <_vfprintf_r+0xdee>
204165d2:	8b05                	andi	a4,a4,1
204165d4:	db15                	beqz	a4,20416508 <_vfprintf_r+0xdee>
204165d6:	03000793          	li	a5,48
204165da:	18f10fa3          	sb	a5,415(sp)
204165de:	cbcff06f          	j	20415a9a <_vfprintf_r+0x380>
204165e2:	7a0d0163          	beqz	s10,20416d84 <_vfprintf_r+0x166a>
204165e6:	87ea                	mv	a5,s10
204165e8:	12f10e23          	sb	a5,316(sp)
204165ec:	0a010ba3          	sb	zero,183(sp)
204165f0:	d656                	sw	s5,44(sp)
204165f2:	c44ff06f          	j	20415a36 <_vfprintf_r+0x31c>
204165f6:	0641                	addi	a2,a2,16
204165f8:	01d8a223          	sw	t4,4(a7)
204165fc:	cfb2                	sw	a2,220(sp)
204165fe:	cdb6                	sw	a3,216(sp)
20416600:	02df5263          	ble	a3,t5,20416624 <_vfprintf_r+0xf0a>
20416604:	09d0                	addi	a2,sp,212
20416606:	85ca                	mv	a1,s2
20416608:	854e                	mv	a0,s3
2041660a:	d03a                	sw	a4,32(sp)
2041660c:	c472                	sw	t3,8(sp)
2041660e:	c676                	sw	t4,12(sp)
20416610:	c87a                	sw	t5,16(sp)
20416612:	ef0fe0ef          	jal	ra,20414d02 <__sprint_r>
20416616:	5702                	lw	a4,32(sp)
20416618:	4e22                	lw	t3,8(sp)
2041661a:	4eb2                	lw	t4,12(sp)
2041661c:	4f42                	lw	t5,16(sp)
2041661e:	72051263          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416622:	19ec                	addi	a1,sp,252
20416624:	1741                	addi	a4,a4,-16
20416626:	88ae                	mv	a7,a1
20416628:	b159                	j	204162ae <_vfprintf_r+0xb94>
2041662a:	204225b7          	lui	a1,0x20422
2041662e:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
20416632:	06c1                	addi	a3,a3,16
20416634:	00b8a023          	sw	a1,0(a7)
20416638:	00f8a223          	sw	a5,4(a7)
2041663c:	cfb6                	sw	a3,220(sp)
2041663e:	cdba                	sw	a4,216(sp)
20416640:	00ee5e63          	ble	a4,t3,2041665c <_vfprintf_r+0xf42>
20416644:	09d0                	addi	a2,sp,212
20416646:	85ca                	mv	a1,s2
20416648:	854e                	mv	a0,s3
2041664a:	d03e                	sw	a5,32(sp)
2041664c:	c472                	sw	t3,8(sp)
2041664e:	eb4fe0ef          	jal	ra,20414d02 <__sprint_r>
20416652:	5782                	lw	a5,32(sp)
20416654:	4e22                	lw	t3,8(sp)
20416656:	6e051663          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
2041665a:	19f0                	addi	a2,sp,252
2041665c:	1dc1                	addi	s11,s11,-16
2041665e:	88b2                	mv	a7,a2
20416660:	b339                	j	2041636e <_vfprintf_r+0xc54>
20416662:	204225b7          	lui	a1,0x20422
20416666:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
2041666a:	06c1                	addi	a3,a3,16
2041666c:	00b8a023          	sw	a1,0(a7)
20416670:	01b8a223          	sw	s11,4(a7)
20416674:	cfb6                	sw	a3,220(sp)
20416676:	cdba                	sw	a4,216(sp)
20416678:	00e85c63          	ble	a4,a6,20416690 <_vfprintf_r+0xf76>
2041667c:	09d0                	addi	a2,sp,212
2041667e:	85ca                	mv	a1,s2
20416680:	854e                	mv	a0,s3
20416682:	ca42                	sw	a6,20(sp)
20416684:	e7efe0ef          	jal	ra,20414d02 <__sprint_r>
20416688:	4852                	lw	a6,20(sp)
2041668a:	6a051c63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
2041668e:	19f0                	addi	a2,sp,252
20416690:	1ac1                	addi	s5,s5,-16
20416692:	88b2                	mv	a7,a2
20416694:	b315                	j	204163b8 <_vfprintf_r+0xc9e>
20416696:	06500713          	li	a4,101
2041669a:	51a75463          	ble	s10,a4,20416ba2 <_vfprintf_r+0x1488>
2041669e:	570e                	lw	a4,224(sp)
204166a0:	090c                	addi	a1,sp,144
204166a2:	1108                	addi	a0,sp,160
204166a4:	d13a                	sw	a4,160(sp)
204166a6:	571e                	lw	a4,228(sp)
204166a8:	c246                	sw	a7,4(sp)
204166aa:	c902                	sw	zero,144(sp)
204166ac:	d33a                	sw	a4,164(sp)
204166ae:	572e                	lw	a4,232(sp)
204166b0:	cb02                	sw	zero,148(sp)
204166b2:	cd02                	sw	zero,152(sp)
204166b4:	d53a                	sw	a4,168(sp)
204166b6:	573e                	lw	a4,236(sp)
204166b8:	cf02                	sw	zero,156(sp)
204166ba:	d73a                	sw	a4,172(sp)
204166bc:	5d1060ef          	jal	ra,2041d48c <__eqtf2>
204166c0:	4892                	lw	a7,4(sp)
204166c2:	10051b63          	bnez	a0,204167d8 <_vfprintf_r+0x10be>
204166c6:	204217b7          	lui	a5,0x20421
204166ca:	76878793          	addi	a5,a5,1896 # 20421768 <zeroes.4369+0x7c>
204166ce:	00f8a023          	sw	a5,0(a7)
204166d2:	4785                	li	a5,1
204166d4:	00f8a223          	sw	a5,4(a7)
204166d8:	47ee                	lw	a5,216(sp)
204166da:	0d85                	addi	s11,s11,1
204166dc:	cfee                	sw	s11,220(sp)
204166de:	0785                	addi	a5,a5,1
204166e0:	cdbe                	sw	a5,216(sp)
204166e2:	471d                	li	a4,7
204166e4:	08a1                	addi	a7,a7,8
204166e6:	00f75b63          	ble	a5,a4,204166fc <_vfprintf_r+0xfe2>
204166ea:	09d0                	addi	a2,sp,212
204166ec:	85ca                	mv	a1,s2
204166ee:	854e                	mv	a0,s3
204166f0:	e12fe0ef          	jal	ra,20414d02 <__sprint_r>
204166f4:	64051763          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204166f8:	0fc10893          	addi	a7,sp,252
204166fc:	57fa                	lw	a5,188(sp)
204166fe:	0147c563          	blt	a5,s4,20416708 <_vfprintf_r+0xfee>
20416702:	00147793          	andi	a5,s0,1
20416706:	c7b5                	beqz	a5,20416772 <_vfprintf_r+0x1058>
20416708:	5662                	lw	a2,56(sp)
2041670a:	47fe                	lw	a5,220(sp)
2041670c:	45a6                	lw	a1,72(sp)
2041670e:	00c8a223          	sw	a2,4(a7)
20416712:	97b2                	add	a5,a5,a2
20416714:	cfbe                	sw	a5,220(sp)
20416716:	47ee                	lw	a5,216(sp)
20416718:	00b8a023          	sw	a1,0(a7)
2041671c:	471d                	li	a4,7
2041671e:	0785                	addi	a5,a5,1
20416720:	cdbe                	sw	a5,216(sp)
20416722:	08a1                	addi	a7,a7,8
20416724:	00f75b63          	ble	a5,a4,2041673a <_vfprintf_r+0x1020>
20416728:	09d0                	addi	a2,sp,212
2041672a:	85ca                	mv	a1,s2
2041672c:	854e                	mv	a0,s3
2041672e:	dd4fe0ef          	jal	ra,20414d02 <__sprint_r>
20416732:	60051863          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416736:	0fc10893          	addi	a7,sp,252
2041673a:	fffa0493          	addi	s1,s4,-1
2041673e:	02905a63          	blez	s1,20416772 <_vfprintf_r+0x1058>
20416742:	4ac1                	li	s5,16
20416744:	4b9d                	li	s7,7
20416746:	47ee                	lw	a5,216(sp)
20416748:	477e                	lw	a4,220(sp)
2041674a:	00888693          	addi	a3,a7,8
2041674e:	0785                	addi	a5,a5,1
20416750:	049acc63          	blt	s5,s1,204167a8 <_vfprintf_r+0x108e>
20416754:	20422637          	lui	a2,0x20422
20416758:	a7460613          	addi	a2,a2,-1420 # 20421a74 <zeroes.4384>
2041675c:	0098a223          	sw	s1,4(a7)
20416760:	00c8a023          	sw	a2,0(a7)
20416764:	94ba                	add	s1,s1,a4
20416766:	cfa6                	sw	s1,220(sp)
20416768:	cdbe                	sw	a5,216(sp)
2041676a:	471d                	li	a4,7
2041676c:	88b6                	mv	a7,a3
2041676e:	caf747e3          	blt	a4,a5,2041641c <_vfprintf_r+0xd02>
20416772:	8811                	andi	s0,s0,4
20416774:	58041563          	bnez	s0,20416cfe <_vfprintf_r+0x15e4>
20416778:	4d06                	lw	s10,64(sp)
2041677a:	5752                	lw	a4,52(sp)
2041677c:	00ed5363          	ble	a4,s10,20416782 <_vfprintf_r+0x1068>
20416780:	8d3a                	mv	s10,a4
20416782:	57f2                	lw	a5,60(sp)
20416784:	97ea                	add	a5,a5,s10
20416786:	de3e                	sw	a5,60(sp)
20416788:	47fe                	lw	a5,220(sp)
2041678a:	cb81                	beqz	a5,2041679a <_vfprintf_r+0x1080>
2041678c:	09d0                	addi	a2,sp,212
2041678e:	85ca                	mv	a1,s2
20416790:	854e                	mv	a0,s3
20416792:	d70fe0ef          	jal	ra,20414d02 <__sprint_r>
20416796:	5a051663          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
2041679a:	5712                	lw	a4,36(sp)
2041679c:	cd82                	sw	zero,216(sp)
2041679e:	5c071e63          	bnez	a4,20416d7a <_vfprintf_r+0x1660>
204167a2:	0fc10893          	addi	a7,sp,252
204167a6:	b26d                	j	20416150 <_vfprintf_r+0xa36>
204167a8:	204225b7          	lui	a1,0x20422
204167ac:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
204167b0:	0741                	addi	a4,a4,16
204167b2:	00b8a023          	sw	a1,0(a7)
204167b6:	0158a223          	sw	s5,4(a7)
204167ba:	cfba                	sw	a4,220(sp)
204167bc:	cdbe                	sw	a5,216(sp)
204167be:	00fbda63          	ble	a5,s7,204167d2 <_vfprintf_r+0x10b8>
204167c2:	09d0                	addi	a2,sp,212
204167c4:	85ca                	mv	a1,s2
204167c6:	854e                	mv	a0,s3
204167c8:	d3afe0ef          	jal	ra,20414d02 <__sprint_r>
204167cc:	56051b63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204167d0:	19f4                	addi	a3,sp,252
204167d2:	14c1                	addi	s1,s1,-16
204167d4:	88b6                	mv	a7,a3
204167d6:	bf85                	j	20416746 <_vfprintf_r+0x102c>
204167d8:	577a                	lw	a4,188(sp)
204167da:	10e04163          	bgtz	a4,204168dc <_vfprintf_r+0x11c2>
204167de:	204217b7          	lui	a5,0x20421
204167e2:	76878793          	addi	a5,a5,1896 # 20421768 <zeroes.4369+0x7c>
204167e6:	00f8a023          	sw	a5,0(a7)
204167ea:	4785                	li	a5,1
204167ec:	00f8a223          	sw	a5,4(a7)
204167f0:	47ee                	lw	a5,216(sp)
204167f2:	0d85                	addi	s11,s11,1
204167f4:	cfee                	sw	s11,220(sp)
204167f6:	0785                	addi	a5,a5,1
204167f8:	cdbe                	sw	a5,216(sp)
204167fa:	471d                	li	a4,7
204167fc:	08a1                	addi	a7,a7,8
204167fe:	00f75b63          	ble	a5,a4,20416814 <_vfprintf_r+0x10fa>
20416802:	09d0                	addi	a2,sp,212
20416804:	85ca                	mv	a1,s2
20416806:	854e                	mv	a0,s3
20416808:	cfafe0ef          	jal	ra,20414d02 <__sprint_r>
2041680c:	52051b63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416810:	0fc10893          	addi	a7,sp,252
20416814:	57fa                	lw	a5,188(sp)
20416816:	e791                	bnez	a5,20416822 <_vfprintf_r+0x1108>
20416818:	000a1563          	bnez	s4,20416822 <_vfprintf_r+0x1108>
2041681c:	00147793          	andi	a5,s0,1
20416820:	dba9                	beqz	a5,20416772 <_vfprintf_r+0x1058>
20416822:	5762                	lw	a4,56(sp)
20416824:	47fe                	lw	a5,220(sp)
20416826:	46a6                	lw	a3,72(sp)
20416828:	00e8a223          	sw	a4,4(a7)
2041682c:	97ba                	add	a5,a5,a4
2041682e:	cfbe                	sw	a5,220(sp)
20416830:	47ee                	lw	a5,216(sp)
20416832:	00d8a023          	sw	a3,0(a7)
20416836:	471d                	li	a4,7
20416838:	0785                	addi	a5,a5,1
2041683a:	cdbe                	sw	a5,216(sp)
2041683c:	08a1                	addi	a7,a7,8
2041683e:	00f75b63          	ble	a5,a4,20416854 <_vfprintf_r+0x113a>
20416842:	09d0                	addi	a2,sp,212
20416844:	85ca                	mv	a1,s2
20416846:	854e                	mv	a0,s3
20416848:	cbafe0ef          	jal	ra,20414d02 <__sprint_r>
2041684c:	4e051b63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416850:	0fc10893          	addi	a7,sp,252
20416854:	5afa                	lw	s5,188(sp)
20416856:	040ad363          	bgez	s5,2041689c <_vfprintf_r+0x1182>
2041685a:	41500ab3          	neg	s5,s5
2041685e:	8746                	mv	a4,a7
20416860:	4bc1                	li	s7,16
20416862:	4c1d                	li	s8,7
20416864:	47ee                	lw	a5,216(sp)
20416866:	46fe                	lw	a3,220(sp)
20416868:	08a1                	addi	a7,a7,8
2041686a:	0785                	addi	a5,a5,1
2041686c:	055bc063          	blt	s7,s5,204168ac <_vfprintf_r+0x1192>
20416870:	20422637          	lui	a2,0x20422
20416874:	01572223          	sw	s5,4(a4)
20416878:	a7460613          	addi	a2,a2,-1420 # 20421a74 <zeroes.4384>
2041687c:	9ab6                	add	s5,s5,a3
2041687e:	c310                	sw	a2,0(a4)
20416880:	cfd6                	sw	s5,220(sp)
20416882:	cdbe                	sw	a5,216(sp)
20416884:	471d                	li	a4,7
20416886:	00f75b63          	ble	a5,a4,2041689c <_vfprintf_r+0x1182>
2041688a:	09d0                	addi	a2,sp,212
2041688c:	85ca                	mv	a1,s2
2041688e:	854e                	mv	a0,s3
20416890:	c72fe0ef          	jal	ra,20414d02 <__sprint_r>
20416894:	4a051763          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416898:	0fc10893          	addi	a7,sp,252
2041689c:	47fe                	lw	a5,220(sp)
2041689e:	0098a023          	sw	s1,0(a7)
204168a2:	0148a223          	sw	s4,4(a7)
204168a6:	97d2                	add	a5,a5,s4
204168a8:	cfbe                	sw	a5,220(sp)
204168aa:	b695                	j	2041640e <_vfprintf_r+0xcf4>
204168ac:	204225b7          	lui	a1,0x20422
204168b0:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
204168b4:	06c1                	addi	a3,a3,16
204168b6:	c30c                	sw	a1,0(a4)
204168b8:	01772223          	sw	s7,4(a4)
204168bc:	cfb6                	sw	a3,220(sp)
204168be:	cdbe                	sw	a5,216(sp)
204168c0:	00fc5b63          	ble	a5,s8,204168d6 <_vfprintf_r+0x11bc>
204168c4:	09d0                	addi	a2,sp,212
204168c6:	85ca                	mv	a1,s2
204168c8:	854e                	mv	a0,s3
204168ca:	c38fe0ef          	jal	ra,20414d02 <__sprint_r>
204168ce:	46051a63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204168d2:	0fc10893          	addi	a7,sp,252
204168d6:	1ac1                	addi	s5,s5,-16
204168d8:	8746                	mv	a4,a7
204168da:	b769                	j	20416864 <_vfprintf_r+0x114a>
204168dc:	8ae6                	mv	s5,s9
204168de:	019a5363          	ble	s9,s4,204168e4 <_vfprintf_r+0x11ca>
204168e2:	8ad2                	mv	s5,s4
204168e4:	03505863          	blez	s5,20416914 <_vfprintf_r+0x11fa>
204168e8:	476e                	lw	a4,216(sp)
204168ea:	9dd6                	add	s11,s11,s5
204168ec:	0098a023          	sw	s1,0(a7)
204168f0:	0705                	addi	a4,a4,1
204168f2:	0158a223          	sw	s5,4(a7)
204168f6:	cfee                	sw	s11,220(sp)
204168f8:	cdba                	sw	a4,216(sp)
204168fa:	469d                	li	a3,7
204168fc:	08a1                	addi	a7,a7,8
204168fe:	00e6db63          	ble	a4,a3,20416914 <_vfprintf_r+0x11fa>
20416902:	09d0                	addi	a2,sp,212
20416904:	85ca                	mv	a1,s2
20416906:	854e                	mv	a0,s3
20416908:	bfafe0ef          	jal	ra,20414d02 <__sprint_r>
2041690c:	42051b63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416910:	0fc10893          	addi	a7,sp,252
20416914:	000ad363          	bgez	s5,2041691a <_vfprintf_r+0x1200>
20416918:	4a81                	li	s5,0
2041691a:	415c8ab3          	sub	s5,s9,s5
2041691e:	05505363          	blez	s5,20416964 <_vfprintf_r+0x124a>
20416922:	4d41                	li	s10,16
20416924:	4d9d                	li	s11,7
20416926:	476e                	lw	a4,216(sp)
20416928:	46fe                	lw	a3,220(sp)
2041692a:	00888613          	addi	a2,a7,8
2041692e:	0705                	addi	a4,a4,1
20416930:	135d4763          	blt	s10,s5,20416a5e <_vfprintf_r+0x1344>
20416934:	204225b7          	lui	a1,0x20422
20416938:	0158a223          	sw	s5,4(a7)
2041693c:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
20416940:	9ab6                	add	s5,s5,a3
20416942:	00b8a023          	sw	a1,0(a7)
20416946:	cfd6                	sw	s5,220(sp)
20416948:	cdba                	sw	a4,216(sp)
2041694a:	469d                	li	a3,7
2041694c:	88b2                	mv	a7,a2
2041694e:	00e6db63          	ble	a4,a3,20416964 <_vfprintf_r+0x124a>
20416952:	09d0                	addi	a2,sp,212
20416954:	85ca                	mv	a1,s2
20416956:	854e                	mv	a0,s3
20416958:	baafe0ef          	jal	ra,20414d02 <__sprint_r>
2041695c:	3e051363          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416960:	0fc10893          	addi	a7,sp,252
20416964:	40047793          	andi	a5,s0,1024
20416968:	01948ab3          	add	s5,s1,s9
2041696c:	cf89                	beqz	a5,20416986 <_vfprintf_r+0x126c>
2041696e:	4d1d                	li	s10,7
20416970:	01448db3          	add	s11,s1,s4
20416974:	100b9d63          	bnez	s7,20416a8e <_vfprintf_r+0x1374>
20416978:	100c1d63          	bnez	s8,20416a92 <_vfprintf_r+0x1378>
2041697c:	014487b3          	add	a5,s1,s4
20416980:	0157f363          	bleu	s5,a5,20416986 <_vfprintf_r+0x126c>
20416984:	8abe                	mv	s5,a5
20416986:	57fa                	lw	a5,188(sp)
20416988:	0147c563          	blt	a5,s4,20416992 <_vfprintf_r+0x1278>
2041698c:	00147793          	andi	a5,s0,1
20416990:	cb95                	beqz	a5,204169c4 <_vfprintf_r+0x12aa>
20416992:	5762                	lw	a4,56(sp)
20416994:	47fe                	lw	a5,220(sp)
20416996:	46a6                	lw	a3,72(sp)
20416998:	00e8a223          	sw	a4,4(a7)
2041699c:	97ba                	add	a5,a5,a4
2041699e:	cfbe                	sw	a5,220(sp)
204169a0:	47ee                	lw	a5,216(sp)
204169a2:	00d8a023          	sw	a3,0(a7)
204169a6:	471d                	li	a4,7
204169a8:	0785                	addi	a5,a5,1
204169aa:	cdbe                	sw	a5,216(sp)
204169ac:	08a1                	addi	a7,a7,8
204169ae:	00f75b63          	ble	a5,a4,204169c4 <_vfprintf_r+0x12aa>
204169b2:	09d0                	addi	a2,sp,212
204169b4:	85ca                	mv	a1,s2
204169b6:	854e                	mv	a0,s3
204169b8:	b4afe0ef          	jal	ra,20414d02 <__sprint_r>
204169bc:	38051363          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
204169c0:	0fc10893          	addi	a7,sp,252
204169c4:	94d2                	add	s1,s1,s4
204169c6:	415487b3          	sub	a5,s1,s5
204169ca:	54fa                	lw	s1,188(sp)
204169cc:	409a04b3          	sub	s1,s4,s1
204169d0:	0097d363          	ble	s1,a5,204169d6 <_vfprintf_r+0x12bc>
204169d4:	84be                	mv	s1,a5
204169d6:	02905963          	blez	s1,20416a08 <_vfprintf_r+0x12ee>
204169da:	47fe                	lw	a5,220(sp)
204169dc:	0158a023          	sw	s5,0(a7)
204169e0:	0098a223          	sw	s1,4(a7)
204169e4:	97a6                	add	a5,a5,s1
204169e6:	cfbe                	sw	a5,220(sp)
204169e8:	47ee                	lw	a5,216(sp)
204169ea:	471d                	li	a4,7
204169ec:	08a1                	addi	a7,a7,8
204169ee:	0785                	addi	a5,a5,1
204169f0:	cdbe                	sw	a5,216(sp)
204169f2:	00f75b63          	ble	a5,a4,20416a08 <_vfprintf_r+0x12ee>
204169f6:	09d0                	addi	a2,sp,212
204169f8:	85ca                	mv	a1,s2
204169fa:	854e                	mv	a0,s3
204169fc:	b06fe0ef          	jal	ra,20414d02 <__sprint_r>
20416a00:	34051163          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416a04:	0fc10893          	addi	a7,sp,252
20416a08:	87a6                	mv	a5,s1
20416a0a:	0004d363          	bgez	s1,20416a10 <_vfprintf_r+0x12f6>
20416a0e:	4781                	li	a5,0
20416a10:	54fa                	lw	s1,188(sp)
20416a12:	409a04b3          	sub	s1,s4,s1
20416a16:	8c9d                	sub	s1,s1,a5
20416a18:	d4905de3          	blez	s1,20416772 <_vfprintf_r+0x1058>
20416a1c:	4ac1                	li	s5,16
20416a1e:	4b9d                	li	s7,7
20416a20:	47ee                	lw	a5,216(sp)
20416a22:	477e                	lw	a4,220(sp)
20416a24:	00888693          	addi	a3,a7,8
20416a28:	0785                	addi	a5,a5,1
20416a2a:	d29ad5e3          	ble	s1,s5,20416754 <_vfprintf_r+0x103a>
20416a2e:	204225b7          	lui	a1,0x20422
20416a32:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
20416a36:	0741                	addi	a4,a4,16
20416a38:	00b8a023          	sw	a1,0(a7)
20416a3c:	0158a223          	sw	s5,4(a7)
20416a40:	cfba                	sw	a4,220(sp)
20416a42:	cdbe                	sw	a5,216(sp)
20416a44:	00fbda63          	ble	a5,s7,20416a58 <_vfprintf_r+0x133e>
20416a48:	09d0                	addi	a2,sp,212
20416a4a:	85ca                	mv	a1,s2
20416a4c:	854e                	mv	a0,s3
20416a4e:	ab4fe0ef          	jal	ra,20414d02 <__sprint_r>
20416a52:	2e051863          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416a56:	19f4                	addi	a3,sp,252
20416a58:	14c1                	addi	s1,s1,-16
20416a5a:	88b6                	mv	a7,a3
20416a5c:	b7d1                	j	20416a20 <_vfprintf_r+0x1306>
20416a5e:	204227b7          	lui	a5,0x20422
20416a62:	a7478793          	addi	a5,a5,-1420 # 20421a74 <zeroes.4384>
20416a66:	06c1                	addi	a3,a3,16
20416a68:	00f8a023          	sw	a5,0(a7)
20416a6c:	01a8a223          	sw	s10,4(a7)
20416a70:	cfb6                	sw	a3,220(sp)
20416a72:	cdba                	sw	a4,216(sp)
20416a74:	00edda63          	ble	a4,s11,20416a88 <_vfprintf_r+0x136e>
20416a78:	09d0                	addi	a2,sp,212
20416a7a:	85ca                	mv	a1,s2
20416a7c:	854e                	mv	a0,s3
20416a7e:	a84fe0ef          	jal	ra,20414d02 <__sprint_r>
20416a82:	2c051063          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416a86:	19f0                	addi	a2,sp,252
20416a88:	1ac1                	addi	s5,s5,-16
20416a8a:	88b2                	mv	a7,a2
20416a8c:	bd69                	j	20416926 <_vfprintf_r+0x120c>
20416a8e:	080c0c63          	beqz	s8,20416b26 <_vfprintf_r+0x140c>
20416a92:	1c7d                	addi	s8,s8,-1
20416a94:	4716                	lw	a4,68(sp)
20416a96:	47fe                	lw	a5,220(sp)
20416a98:	46c6                	lw	a3,80(sp)
20416a9a:	00e8a223          	sw	a4,4(a7)
20416a9e:	97ba                	add	a5,a5,a4
20416aa0:	cfbe                	sw	a5,220(sp)
20416aa2:	47ee                	lw	a5,216(sp)
20416aa4:	00d8a023          	sw	a3,0(a7)
20416aa8:	08a1                	addi	a7,a7,8
20416aaa:	0785                	addi	a5,a5,1
20416aac:	cdbe                	sw	a5,216(sp)
20416aae:	00fd5b63          	ble	a5,s10,20416ac4 <_vfprintf_r+0x13aa>
20416ab2:	09d0                	addi	a2,sp,212
20416ab4:	85ca                	mv	a1,s2
20416ab6:	854e                	mv	a0,s3
20416ab8:	a4afe0ef          	jal	ra,20414d02 <__sprint_r>
20416abc:	28051363          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416ac0:	0fc10893          	addi	a7,sp,252
20416ac4:	57a2                	lw	a5,40(sp)
20416ac6:	415d8733          	sub	a4,s11,s5
20416aca:	0007cb03          	lbu	s6,0(a5)
20416ace:	01675363          	ble	s6,a4,20416ad4 <_vfprintf_r+0x13ba>
20416ad2:	8b3a                	mv	s6,a4
20416ad4:	03605863          	blez	s6,20416b04 <_vfprintf_r+0x13ea>
20416ad8:	477e                	lw	a4,220(sp)
20416ada:	0158a023          	sw	s5,0(a7)
20416ade:	0168a223          	sw	s6,4(a7)
20416ae2:	975a                	add	a4,a4,s6
20416ae4:	cfba                	sw	a4,220(sp)
20416ae6:	476e                	lw	a4,216(sp)
20416ae8:	08a1                	addi	a7,a7,8
20416aea:	0705                	addi	a4,a4,1
20416aec:	cdba                	sw	a4,216(sp)
20416aee:	00ed5b63          	ble	a4,s10,20416b04 <_vfprintf_r+0x13ea>
20416af2:	09d0                	addi	a2,sp,212
20416af4:	85ca                	mv	a1,s2
20416af6:	854e                	mv	a0,s3
20416af8:	a0afe0ef          	jal	ra,20414d02 <__sprint_r>
20416afc:	24051363          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416b00:	0fc10893          	addi	a7,sp,252
20416b04:	875a                	mv	a4,s6
20416b06:	000b5363          	bgez	s6,20416b0c <_vfprintf_r+0x13f2>
20416b0a:	4701                	li	a4,0
20416b0c:	55a2                	lw	a1,40(sp)
20416b0e:	4841                	li	a6,16
20416b10:	0005c783          	lbu	a5,0(a1)
20416b14:	40e78b33          	sub	s6,a5,a4
20416b18:	05604563          	bgtz	s6,20416b62 <_vfprintf_r+0x1448>
20416b1c:	5622                	lw	a2,40(sp)
20416b1e:	00064783          	lbu	a5,0(a2)
20416b22:	9abe                	add	s5,s5,a5
20416b24:	bd81                	j	20416974 <_vfprintf_r+0x125a>
20416b26:	5622                	lw	a2,40(sp)
20416b28:	1bfd                	addi	s7,s7,-1
20416b2a:	167d                	addi	a2,a2,-1
20416b2c:	d432                	sw	a2,40(sp)
20416b2e:	b79d                	j	20416a94 <_vfprintf_r+0x137a>
20416b30:	204227b7          	lui	a5,0x20422
20416b34:	a7478793          	addi	a5,a5,-1420 # 20421a74 <zeroes.4384>
20416b38:	06c1                	addi	a3,a3,16
20416b3a:	00f8a023          	sw	a5,0(a7)
20416b3e:	0108a223          	sw	a6,4(a7)
20416b42:	cfb6                	sw	a3,220(sp)
20416b44:	cdba                	sw	a4,216(sp)
20416b46:	00ed5c63          	ble	a4,s10,20416b5e <_vfprintf_r+0x1444>
20416b4a:	09d0                	addi	a2,sp,212
20416b4c:	85ca                	mv	a1,s2
20416b4e:	854e                	mv	a0,s3
20416b50:	ca42                	sw	a6,20(sp)
20416b52:	9b0fe0ef          	jal	ra,20414d02 <__sprint_r>
20416b56:	4852                	lw	a6,20(sp)
20416b58:	1e051563          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416b5c:	19f0                	addi	a2,sp,252
20416b5e:	1b41                	addi	s6,s6,-16
20416b60:	88b2                	mv	a7,a2
20416b62:	476e                	lw	a4,216(sp)
20416b64:	46fe                	lw	a3,220(sp)
20416b66:	00888613          	addi	a2,a7,8
20416b6a:	0705                	addi	a4,a4,1
20416b6c:	fd6842e3          	blt	a6,s6,20416b30 <_vfprintf_r+0x1416>
20416b70:	204225b7          	lui	a1,0x20422
20416b74:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
20416b78:	00db07b3          	add	a5,s6,a3
20416b7c:	00b8a023          	sw	a1,0(a7)
20416b80:	0168a223          	sw	s6,4(a7)
20416b84:	cfbe                	sw	a5,220(sp)
20416b86:	cdba                	sw	a4,216(sp)
20416b88:	88b2                	mv	a7,a2
20416b8a:	f8ed59e3          	ble	a4,s10,20416b1c <_vfprintf_r+0x1402>
20416b8e:	09d0                	addi	a2,sp,212
20416b90:	85ca                	mv	a1,s2
20416b92:	854e                	mv	a0,s3
20416b94:	96efe0ef          	jal	ra,20414d02 <__sprint_r>
20416b98:	1a051563          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416b9c:	0fc10893          	addi	a7,sp,252
20416ba0:	bfb5                	j	20416b1c <_vfprintf_r+0x1402>
20416ba2:	47ee                	lw	a5,216(sp)
20416ba4:	4705                	li	a4,1
20416ba6:	0098a023          	sw	s1,0(a7)
20416baa:	0d85                	addi	s11,s11,1
20416bac:	0785                	addi	a5,a5,1
20416bae:	00888b93          	addi	s7,a7,8
20416bb2:	01474663          	blt	a4,s4,20416bbe <_vfprintf_r+0x14a4>
20416bb6:	00147693          	andi	a3,s0,1
20416bba:	12068a63          	beqz	a3,20416cee <_vfprintf_r+0x15d4>
20416bbe:	4705                	li	a4,1
20416bc0:	00e8a223          	sw	a4,4(a7)
20416bc4:	cfee                	sw	s11,220(sp)
20416bc6:	cdbe                	sw	a5,216(sp)
20416bc8:	471d                	li	a4,7
20416bca:	00f75b63          	ble	a5,a4,20416be0 <_vfprintf_r+0x14c6>
20416bce:	09d0                	addi	a2,sp,212
20416bd0:	85ca                	mv	a1,s2
20416bd2:	854e                	mv	a0,s3
20416bd4:	92efe0ef          	jal	ra,20414d02 <__sprint_r>
20416bd8:	16051563          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416bdc:	0fc10b93          	addi	s7,sp,252
20416be0:	5762                	lw	a4,56(sp)
20416be2:	47fe                	lw	a5,220(sp)
20416be4:	46a6                	lw	a3,72(sp)
20416be6:	00eba223          	sw	a4,4(s7)
20416bea:	97ba                	add	a5,a5,a4
20416bec:	cfbe                	sw	a5,220(sp)
20416bee:	47ee                	lw	a5,216(sp)
20416bf0:	00dba023          	sw	a3,0(s7)
20416bf4:	471d                	li	a4,7
20416bf6:	0785                	addi	a5,a5,1
20416bf8:	cdbe                	sw	a5,216(sp)
20416bfa:	0ba1                	addi	s7,s7,8
20416bfc:	00f75b63          	ble	a5,a4,20416c12 <_vfprintf_r+0x14f8>
20416c00:	09d0                	addi	a2,sp,212
20416c02:	85ca                	mv	a1,s2
20416c04:	854e                	mv	a0,s3
20416c06:	8fcfe0ef          	jal	ra,20414d02 <__sprint_r>
20416c0a:	12051c63          	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416c0e:	0fc10b93          	addi	s7,sp,252
20416c12:	578e                	lw	a5,224(sp)
20416c14:	090c                	addi	a1,sp,144
20416c16:	1108                	addi	a0,sp,160
20416c18:	d13e                	sw	a5,160(sp)
20416c1a:	579e                	lw	a5,228(sp)
20416c1c:	fffa0a93          	addi	s5,s4,-1
20416c20:	c902                	sw	zero,144(sp)
20416c22:	d33e                	sw	a5,164(sp)
20416c24:	57ae                	lw	a5,232(sp)
20416c26:	cb02                	sw	zero,148(sp)
20416c28:	cd02                	sw	zero,152(sp)
20416c2a:	d53e                	sw	a5,168(sp)
20416c2c:	57be                	lw	a5,236(sp)
20416c2e:	cf02                	sw	zero,156(sp)
20416c30:	d73e                	sw	a5,172(sp)
20416c32:	05b060ef          	jal	ra,2041d48c <__eqtf2>
20416c36:	cd21                	beqz	a0,20416c8e <_vfprintf_r+0x1574>
20416c38:	47fe                	lw	a5,220(sp)
20416c3a:	476e                	lw	a4,216(sp)
20416c3c:	0485                	addi	s1,s1,1
20416c3e:	17fd                	addi	a5,a5,-1
20416c40:	97d2                	add	a5,a5,s4
20416c42:	0705                	addi	a4,a4,1
20416c44:	009ba023          	sw	s1,0(s7)
20416c48:	015ba223          	sw	s5,4(s7)
20416c4c:	cfbe                	sw	a5,220(sp)
20416c4e:	cdba                	sw	a4,216(sp)
20416c50:	479d                	li	a5,7
20416c52:	0ba1                	addi	s7,s7,8
20416c54:	00e7da63          	ble	a4,a5,20416c68 <_vfprintf_r+0x154e>
20416c58:	09d0                	addi	a2,sp,212
20416c5a:	85ca                	mv	a1,s2
20416c5c:	854e                	mv	a0,s3
20416c5e:	8a4fe0ef          	jal	ra,20414d02 <__sprint_r>
20416c62:	e165                	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416c64:	0fc10b93          	addi	s7,sp,252
20416c68:	01dc                	addi	a5,sp,196
20416c6a:	46d6                	lw	a3,84(sp)
20416c6c:	00fba023          	sw	a5,0(s7)
20416c70:	47fe                	lw	a5,220(sp)
20416c72:	00dba223          	sw	a3,4(s7)
20416c76:	471d                	li	a4,7
20416c78:	97b6                	add	a5,a5,a3
20416c7a:	cfbe                	sw	a5,220(sp)
20416c7c:	47ee                	lw	a5,216(sp)
20416c7e:	008b8893          	addi	a7,s7,8
20416c82:	0785                	addi	a5,a5,1
20416c84:	cdbe                	sw	a5,216(sp)
20416c86:	aef756e3          	ble	a5,a4,20416772 <_vfprintf_r+0x1058>
20416c8a:	f92ff06f          	j	2041641c <_vfprintf_r+0xd02>
20416c8e:	fd505de3          	blez	s5,20416c68 <_vfprintf_r+0x154e>
20416c92:	44c1                	li	s1,16
20416c94:	4c1d                	li	s8,7
20416c96:	476e                	lw	a4,216(sp)
20416c98:	47fe                	lw	a5,220(sp)
20416c9a:	008b8693          	addi	a3,s7,8
20416c9e:	0705                	addi	a4,a4,1
20416ca0:	0354c063          	blt	s1,s5,20416cc0 <_vfprintf_r+0x15a6>
20416ca4:	20422637          	lui	a2,0x20422
20416ca8:	97d6                	add	a5,a5,s5
20416caa:	a7460613          	addi	a2,a2,-1420 # 20421a74 <zeroes.4384>
20416cae:	00cba023          	sw	a2,0(s7)
20416cb2:	015ba223          	sw	s5,4(s7)
20416cb6:	cfbe                	sw	a5,220(sp)
20416cb8:	cdba                	sw	a4,216(sp)
20416cba:	479d                	li	a5,7
20416cbc:	8bb6                	mv	s7,a3
20416cbe:	bf59                	j	20416c54 <_vfprintf_r+0x153a>
20416cc0:	204225b7          	lui	a1,0x20422
20416cc4:	a7458593          	addi	a1,a1,-1420 # 20421a74 <zeroes.4384>
20416cc8:	07c1                	addi	a5,a5,16
20416cca:	00bba023          	sw	a1,0(s7)
20416cce:	009ba223          	sw	s1,4(s7)
20416cd2:	cfbe                	sw	a5,220(sp)
20416cd4:	cdba                	sw	a4,216(sp)
20416cd6:	00ec5963          	ble	a4,s8,20416ce8 <_vfprintf_r+0x15ce>
20416cda:	09d0                	addi	a2,sp,212
20416cdc:	85ca                	mv	a1,s2
20416cde:	854e                	mv	a0,s3
20416ce0:	822fe0ef          	jal	ra,20414d02 <__sprint_r>
20416ce4:	ed39                	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416ce6:	19f4                	addi	a3,sp,252
20416ce8:	1ac1                	addi	s5,s5,-16
20416cea:	8bb6                	mv	s7,a3
20416cec:	b76d                	j	20416c96 <_vfprintf_r+0x157c>
20416cee:	00e8a223          	sw	a4,4(a7)
20416cf2:	cfee                	sw	s11,220(sp)
20416cf4:	cdbe                	sw	a5,216(sp)
20416cf6:	471d                	li	a4,7
20416cf8:	f6f758e3          	ble	a5,a4,20416c68 <_vfprintf_r+0x154e>
20416cfc:	bfb1                	j	20416c58 <_vfprintf_r+0x153e>
20416cfe:	4586                	lw	a1,64(sp)
20416d00:	56d2                	lw	a3,52(sp)
20416d02:	40d58433          	sub	s0,a1,a3
20416d06:	a68059e3          	blez	s0,20416778 <_vfprintf_r+0x105e>
20416d0a:	204224b7          	lui	s1,0x20422
20416d0e:	4ac1                	li	s5,16
20416d10:	a6448493          	addi	s1,s1,-1436 # 20421a64 <blanks.4383>
20416d14:	4b9d                	li	s7,7
20416d16:	47ee                	lw	a5,216(sp)
20416d18:	0098a023          	sw	s1,0(a7)
20416d1c:	477e                	lw	a4,220(sp)
20416d1e:	0785                	addi	a5,a5,1
20416d20:	028acb63          	blt	s5,s0,20416d56 <_vfprintf_r+0x163c>
20416d24:	0088a223          	sw	s0,4(a7)
20416d28:	943a                	add	s0,s0,a4
20416d2a:	cfa2                	sw	s0,220(sp)
20416d2c:	cdbe                	sw	a5,216(sp)
20416d2e:	471d                	li	a4,7
20416d30:	a4f754e3          	ble	a5,a4,20416778 <_vfprintf_r+0x105e>
20416d34:	09d0                	addi	a2,sp,212
20416d36:	85ca                	mv	a1,s2
20416d38:	854e                	mv	a0,s3
20416d3a:	fc9fd0ef          	jal	ra,20414d02 <__sprint_r>
20416d3e:	a2050de3          	beqz	a0,20416778 <_vfprintf_r+0x105e>
20416d42:	5792                	lw	a5,36(sp)
20416d44:	e399                	bnez	a5,20416d4a <_vfprintf_r+0x1630>
20416d46:	ec1fe06f          	j	20415c06 <_vfprintf_r+0x4ec>
20416d4a:	85be                	mv	a1,a5
20416d4c:	854e                	mv	a0,s3
20416d4e:	0b3000ef          	jal	ra,20417600 <_free_r>
20416d52:	eb5fe06f          	j	20415c06 <_vfprintf_r+0x4ec>
20416d56:	0741                	addi	a4,a4,16
20416d58:	0158a223          	sw	s5,4(a7)
20416d5c:	cfba                	sw	a4,220(sp)
20416d5e:	cdbe                	sw	a5,216(sp)
20416d60:	08a1                	addi	a7,a7,8
20416d62:	00fbda63          	ble	a5,s7,20416d76 <_vfprintf_r+0x165c>
20416d66:	09d0                	addi	a2,sp,212
20416d68:	85ca                	mv	a1,s2
20416d6a:	854e                	mv	a0,s3
20416d6c:	f97fd0ef          	jal	ra,20414d02 <__sprint_r>
20416d70:	f969                	bnez	a0,20416d42 <_vfprintf_r+0x1628>
20416d72:	0fc10893          	addi	a7,sp,252
20416d76:	1441                	addi	s0,s0,-16
20416d78:	bf79                	j	20416d16 <_vfprintf_r+0x15fc>
20416d7a:	5592                	lw	a1,36(sp)
20416d7c:	854e                	mv	a0,s3
20416d7e:	083000ef          	jal	ra,20417600 <_free_r>
20416d82:	b405                	j	204167a2 <_vfprintf_r+0x1088>
20416d84:	47fe                	lw	a5,220(sp)
20416d86:	e399                	bnez	a5,20416d8c <_vfprintf_r+0x1672>
20416d88:	e7ffe06f          	j	20415c06 <_vfprintf_r+0x4ec>
20416d8c:	09d0                	addi	a2,sp,212
20416d8e:	85ca                	mv	a1,s2
20416d90:	854e                	mv	a0,s3
20416d92:	f71fd0ef          	jal	ra,20414d02 <__sprint_r>
20416d96:	e71fe06f          	j	20415c06 <_vfprintf_r+0x4ec>

20416d9a <vfprintf>:
20416d9a:	86b2                	mv	a3,a2
20416d9c:	862e                	mv	a2,a1
20416d9e:	85aa                	mv	a1,a0
20416da0:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20416da4:	977fe06f          	j	2041571a <_vfprintf_r>

20416da8 <__sbprintf>:
20416da8:	00c5d783          	lhu	a5,12(a1)
20416dac:	b8010113          	addi	sp,sp,-1152
20416db0:	46812c23          	sw	s0,1144(sp)
20416db4:	9bf5                	andi	a5,a5,-3
20416db6:	00f11a23          	sh	a5,20(sp)
20416dba:	51fc                	lw	a5,100(a1)
20416dbc:	842e                	mv	s0,a1
20416dbe:	46912a23          	sw	s1,1140(sp)
20416dc2:	d6be                	sw	a5,108(sp)
20416dc4:	00e5d783          	lhu	a5,14(a1)
20416dc8:	47212823          	sw	s2,1136(sp)
20416dcc:	46112e23          	sw	ra,1148(sp)
20416dd0:	00f11b23          	sh	a5,22(sp)
20416dd4:	4ddc                	lw	a5,28(a1)
20416dd6:	892a                	mv	s2,a0
20416dd8:	d002                	sw	zero,32(sp)
20416dda:	d23e                	sw	a5,36(sp)
20416ddc:	51dc                	lw	a5,36(a1)
20416dde:	002c                	addi	a1,sp,8
20416de0:	d63e                	sw	a5,44(sp)
20416de2:	189c                	addi	a5,sp,112
20416de4:	c43e                	sw	a5,8(sp)
20416de6:	cc3e                	sw	a5,24(sp)
20416de8:	40000793          	li	a5,1024
20416dec:	c83e                	sw	a5,16(sp)
20416dee:	ce3e                	sw	a5,28(sp)
20416df0:	92bfe0ef          	jal	ra,2041571a <_vfprintf_r>
20416df4:	84aa                	mv	s1,a0
20416df6:	00054763          	bltz	a0,20416e04 <__sbprintf+0x5c>
20416dfa:	002c                	addi	a1,sp,8
20416dfc:	854a                	mv	a0,s2
20416dfe:	210d                	jal	20417220 <_fflush_r>
20416e00:	c111                	beqz	a0,20416e04 <__sbprintf+0x5c>
20416e02:	54fd                	li	s1,-1
20416e04:	01415783          	lhu	a5,20(sp)
20416e08:	0407f793          	andi	a5,a5,64
20416e0c:	c799                	beqz	a5,20416e1a <__sbprintf+0x72>
20416e0e:	00c45783          	lhu	a5,12(s0)
20416e12:	0407e793          	ori	a5,a5,64
20416e16:	00f41623          	sh	a5,12(s0)
20416e1a:	47c12083          	lw	ra,1148(sp)
20416e1e:	47812403          	lw	s0,1144(sp)
20416e22:	8526                	mv	a0,s1
20416e24:	47012903          	lw	s2,1136(sp)
20416e28:	47412483          	lw	s1,1140(sp)
20416e2c:	48010113          	addi	sp,sp,1152
20416e30:	8082                	ret

20416e32 <_vsnprintf_r>:
20416e32:	7119                	addi	sp,sp,-128
20416e34:	dca2                	sw	s0,120(sp)
20416e36:	de86                	sw	ra,124(sp)
20416e38:	daa6                	sw	s1,116(sp)
20416e3a:	8432                	mv	s0,a2
20416e3c:	00065b63          	bgez	a2,20416e52 <_vsnprintf_r+0x20>
20416e40:	08b00793          	li	a5,139
20416e44:	c11c                	sw	a5,0(a0)
20416e46:	557d                	li	a0,-1
20416e48:	50f6                	lw	ra,124(sp)
20416e4a:	5466                	lw	s0,120(sp)
20416e4c:	54d6                	lw	s1,116(sp)
20416e4e:	6109                	addi	sp,sp,128
20416e50:	8082                	ret
20416e52:	8636                	mv	a2,a3
20416e54:	20800693          	li	a3,520
20416e58:	c42e                	sw	a1,8(sp)
20416e5a:	cc2e                	sw	a1,24(sp)
20416e5c:	00d11a23          	sh	a3,20(sp)
20416e60:	4581                	li	a1,0
20416e62:	c019                	beqz	s0,20416e68 <_vsnprintf_r+0x36>
20416e64:	fff40593          	addi	a1,s0,-1
20416e68:	57fd                	li	a5,-1
20416e6a:	c82e                	sw	a1,16(sp)
20416e6c:	ce2e                	sw	a1,28(sp)
20416e6e:	86ba                	mv	a3,a4
20416e70:	002c                	addi	a1,sp,8
20416e72:	00f11b23          	sh	a5,22(sp)
20416e76:	84aa                	mv	s1,a0
20416e78:	847fc0ef          	jal	ra,204136be <_svfprintf_r>
20416e7c:	57fd                	li	a5,-1
20416e7e:	00f55563          	ble	a5,a0,20416e88 <_vsnprintf_r+0x56>
20416e82:	08b00793          	li	a5,139
20416e86:	c09c                	sw	a5,0(s1)
20416e88:	d061                	beqz	s0,20416e48 <_vsnprintf_r+0x16>
20416e8a:	47a2                	lw	a5,8(sp)
20416e8c:	00078023          	sb	zero,0(a5)
20416e90:	bf65                	j	20416e48 <_vsnprintf_r+0x16>

20416e92 <vsnprintf>:
20416e92:	8736                	mv	a4,a3
20416e94:	86b2                	mv	a3,a2
20416e96:	862e                	mv	a2,a1
20416e98:	85aa                	mv	a1,a0
20416e9a:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20416e9e:	bf51                	j	20416e32 <_vsnprintf_r>

20416ea0 <_wctomb_r>:
20416ea0:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20416ea4:	5bdc                	lw	a5,52(a5)
20416ea6:	e789                	bnez	a5,20416eb0 <_wctomb_r+0x10>
20416ea8:	800007b7          	lui	a5,0x80000
20416eac:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20416eb0:	0e07a303          	lw	t1,224(a5)
20416eb4:	8302                	jr	t1

20416eb6 <__ascii_wctomb>:
20416eb6:	cd91                	beqz	a1,20416ed2 <__ascii_wctomb+0x1c>
20416eb8:	0ff00793          	li	a5,255
20416ebc:	00c7f763          	bleu	a2,a5,20416eca <__ascii_wctomb+0x14>
20416ec0:	08a00793          	li	a5,138
20416ec4:	c11c                	sw	a5,0(a0)
20416ec6:	557d                	li	a0,-1
20416ec8:	8082                	ret
20416eca:	00c58023          	sb	a2,0(a1)
20416ece:	4505                	li	a0,1
20416ed0:	8082                	ret
20416ed2:	4501                	li	a0,0
20416ed4:	8082                	ret

20416ed6 <__swsetup_r>:
20416ed6:	1141                	addi	sp,sp,-16
20416ed8:	c226                	sw	s1,4(sp)
20416eda:	84aa                	mv	s1,a0
20416edc:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20416ee0:	c422                	sw	s0,8(sp)
20416ee2:	c606                	sw	ra,12(sp)
20416ee4:	842e                	mv	s0,a1
20416ee6:	c501                	beqz	a0,20416eee <__swsetup_r+0x18>
20416ee8:	5d1c                	lw	a5,56(a0)
20416eea:	e391                	bnez	a5,20416eee <__swsetup_r+0x18>
20416eec:	21a1                	jal	20417334 <__sinit>
20416eee:	00c41703          	lh	a4,12(s0)
20416ef2:	01071793          	slli	a5,a4,0x10
20416ef6:	83c1                	srli	a5,a5,0x10
20416ef8:	0087f693          	andi	a3,a5,8
20416efc:	eea1                	bnez	a3,20416f54 <__swsetup_r+0x7e>
20416efe:	0107f693          	andi	a3,a5,16
20416f02:	ee89                	bnez	a3,20416f1c <__swsetup_r+0x46>
20416f04:	47a5                	li	a5,9
20416f06:	c09c                	sw	a5,0(s1)
20416f08:	04076713          	ori	a4,a4,64
20416f0c:	00e41623          	sh	a4,12(s0)
20416f10:	557d                	li	a0,-1
20416f12:	40b2                	lw	ra,12(sp)
20416f14:	4422                	lw	s0,8(sp)
20416f16:	4492                	lw	s1,4(sp)
20416f18:	0141                	addi	sp,sp,16
20416f1a:	8082                	ret
20416f1c:	8b91                	andi	a5,a5,4
20416f1e:	c78d                	beqz	a5,20416f48 <__swsetup_r+0x72>
20416f20:	580c                	lw	a1,48(s0)
20416f22:	c989                	beqz	a1,20416f34 <__swsetup_r+0x5e>
20416f24:	04040793          	addi	a5,s0,64
20416f28:	00f58463          	beq	a1,a5,20416f30 <__swsetup_r+0x5a>
20416f2c:	8526                	mv	a0,s1
20416f2e:	2dc9                	jal	20417600 <_free_r>
20416f30:	02042823          	sw	zero,48(s0)
20416f34:	00c45783          	lhu	a5,12(s0)
20416f38:	00042223          	sw	zero,4(s0)
20416f3c:	fdb7f793          	andi	a5,a5,-37
20416f40:	00f41623          	sh	a5,12(s0)
20416f44:	481c                	lw	a5,16(s0)
20416f46:	c01c                	sw	a5,0(s0)
20416f48:	00c45783          	lhu	a5,12(s0)
20416f4c:	0087e793          	ori	a5,a5,8
20416f50:	00f41623          	sh	a5,12(s0)
20416f54:	481c                	lw	a5,16(s0)
20416f56:	ef89                	bnez	a5,20416f70 <__swsetup_r+0x9a>
20416f58:	00c45783          	lhu	a5,12(s0)
20416f5c:	20000713          	li	a4,512
20416f60:	2807f793          	andi	a5,a5,640
20416f64:	00e78663          	beq	a5,a4,20416f70 <__swsetup_r+0x9a>
20416f68:	85a2                	mv	a1,s0
20416f6a:	8526                	mv	a0,s1
20416f6c:	30e020ef          	jal	ra,2041927a <__smakebuf_r>
20416f70:	00c45783          	lhu	a5,12(s0)
20416f74:	0017f713          	andi	a4,a5,1
20416f78:	c705                	beqz	a4,20416fa0 <__swsetup_r+0xca>
20416f7a:	485c                	lw	a5,20(s0)
20416f7c:	00042423          	sw	zero,8(s0)
20416f80:	40f007b3          	neg	a5,a5
20416f84:	cc1c                	sw	a5,24(s0)
20416f86:	481c                	lw	a5,16(s0)
20416f88:	4501                	li	a0,0
20416f8a:	f7c1                	bnez	a5,20416f12 <__swsetup_r+0x3c>
20416f8c:	00c41783          	lh	a5,12(s0)
20416f90:	0807f713          	andi	a4,a5,128
20416f94:	df3d                	beqz	a4,20416f12 <__swsetup_r+0x3c>
20416f96:	0407e793          	ori	a5,a5,64
20416f9a:	00f41623          	sh	a5,12(s0)
20416f9e:	bf8d                	j	20416f10 <__swsetup_r+0x3a>
20416fa0:	8b89                	andi	a5,a5,2
20416fa2:	4701                	li	a4,0
20416fa4:	e391                	bnez	a5,20416fa8 <__swsetup_r+0xd2>
20416fa6:	4858                	lw	a4,20(s0)
20416fa8:	c418                	sw	a4,8(s0)
20416faa:	bff1                	j	20416f86 <__swsetup_r+0xb0>

20416fac <abort>:
20416fac:	1141                	addi	sp,sp,-16
20416fae:	4519                	li	a0,6
20416fb0:	c606                	sw	ra,12(sp)
20416fb2:	728030ef          	jal	ra,2041a6da <raise>
20416fb6:	4505                	li	a0,1
20416fb8:	bd0fb0ef          	jal	ra,20412388 <__wrap_exit>

20416fbc <__register_exitproc>:
20416fbc:	8941a703          	lw	a4,-1900(gp) # 80000a34 <_global_impure_ptr>
20416fc0:	832a                	mv	t1,a0
20416fc2:	14872783          	lw	a5,328(a4)
20416fc6:	e789                	bnez	a5,20416fd0 <__register_exitproc+0x14>
20416fc8:	14c70793          	addi	a5,a4,332
20416fcc:	14f72423          	sw	a5,328(a4)
20416fd0:	43d8                	lw	a4,4(a5)
20416fd2:	487d                	li	a6,31
20416fd4:	557d                	li	a0,-1
20416fd6:	04e84263          	blt	a6,a4,2041701a <__register_exitproc+0x5e>
20416fda:	00271893          	slli	a7,a4,0x2
20416fde:	02030963          	beqz	t1,20417010 <__register_exitproc+0x54>
20416fe2:	01178533          	add	a0,a5,a7
20416fe6:	08c52423          	sw	a2,136(a0)
20416fea:	1887a803          	lw	a6,392(a5)
20416fee:	4605                	li	a2,1
20416ff0:	00e61633          	sll	a2,a2,a4
20416ff4:	00c86833          	or	a6,a6,a2
20416ff8:	1907a423          	sw	a6,392(a5)
20416ffc:	10d52423          	sw	a3,264(a0)
20417000:	4689                	li	a3,2
20417002:	00d31763          	bne	t1,a3,20417010 <__register_exitproc+0x54>
20417006:	18c7a683          	lw	a3,396(a5)
2041700a:	8e55                	or	a2,a2,a3
2041700c:	18c7a623          	sw	a2,396(a5)
20417010:	0705                	addi	a4,a4,1
20417012:	c3d8                	sw	a4,4(a5)
20417014:	97c6                	add	a5,a5,a7
20417016:	c78c                	sw	a1,8(a5)
20417018:	4501                	li	a0,0
2041701a:	8082                	ret

2041701c <__call_exitprocs>:
2041701c:	7179                	addi	sp,sp,-48
2041701e:	ce4e                	sw	s3,28(sp)
20417020:	8941a983          	lw	s3,-1900(gp) # 80000a34 <_global_impure_ptr>
20417024:	cc52                	sw	s4,24(sp)
20417026:	ca56                	sw	s5,20(sp)
20417028:	c85a                	sw	s6,16(sp)
2041702a:	d606                	sw	ra,44(sp)
2041702c:	d422                	sw	s0,40(sp)
2041702e:	d226                	sw	s1,36(sp)
20417030:	d04a                	sw	s2,32(sp)
20417032:	c65e                	sw	s7,12(sp)
20417034:	8aaa                	mv	s5,a0
20417036:	8a2e                	mv	s4,a1
20417038:	4b05                	li	s6,1
2041703a:	1489a483          	lw	s1,328(s3)
2041703e:	c881                	beqz	s1,2041704e <__call_exitprocs+0x32>
20417040:	40c0                	lw	s0,4(s1)
20417042:	fff40913          	addi	s2,s0,-1
20417046:	040a                	slli	s0,s0,0x2
20417048:	9426                	add	s0,s0,s1
2041704a:	00095d63          	bgez	s2,20417064 <__call_exitprocs+0x48>
2041704e:	50b2                	lw	ra,44(sp)
20417050:	5422                	lw	s0,40(sp)
20417052:	5492                	lw	s1,36(sp)
20417054:	5902                	lw	s2,32(sp)
20417056:	49f2                	lw	s3,28(sp)
20417058:	4a62                	lw	s4,24(sp)
2041705a:	4ad2                	lw	s5,20(sp)
2041705c:	4b42                	lw	s6,16(sp)
2041705e:	4bb2                	lw	s7,12(sp)
20417060:	6145                	addi	sp,sp,48
20417062:	8082                	ret
20417064:	000a0963          	beqz	s4,20417076 <__call_exitprocs+0x5a>
20417068:	10442783          	lw	a5,260(s0)
2041706c:	01478563          	beq	a5,s4,20417076 <__call_exitprocs+0x5a>
20417070:	197d                	addi	s2,s2,-1
20417072:	1471                	addi	s0,s0,-4
20417074:	bfd9                	j	2041704a <__call_exitprocs+0x2e>
20417076:	40d8                	lw	a4,4(s1)
20417078:	405c                	lw	a5,4(s0)
2041707a:	177d                	addi	a4,a4,-1
2041707c:	03271663          	bne	a4,s2,204170a8 <__call_exitprocs+0x8c>
20417080:	0124a223          	sw	s2,4(s1)
20417084:	d7f5                	beqz	a5,20417070 <__call_exitprocs+0x54>
20417086:	1884a683          	lw	a3,392(s1)
2041708a:	012b1733          	sll	a4,s6,s2
2041708e:	0044ab83          	lw	s7,4(s1)
20417092:	8ef9                	and	a3,a3,a4
20417094:	ee89                	bnez	a3,204170ae <__call_exitprocs+0x92>
20417096:	9782                	jalr	a5
20417098:	40d8                	lw	a4,4(s1)
2041709a:	1489a783          	lw	a5,328(s3)
2041709e:	f9771ee3          	bne	a4,s7,2041703a <__call_exitprocs+0x1e>
204170a2:	fcf487e3          	beq	s1,a5,20417070 <__call_exitprocs+0x54>
204170a6:	bf51                	j	2041703a <__call_exitprocs+0x1e>
204170a8:	00042223          	sw	zero,4(s0)
204170ac:	bfe1                	j	20417084 <__call_exitprocs+0x68>
204170ae:	18c4a683          	lw	a3,396(s1)
204170b2:	08442583          	lw	a1,132(s0)
204170b6:	8f75                	and	a4,a4,a3
204170b8:	e701                	bnez	a4,204170c0 <__call_exitprocs+0xa4>
204170ba:	8556                	mv	a0,s5
204170bc:	9782                	jalr	a5
204170be:	bfe9                	j	20417098 <__call_exitprocs+0x7c>
204170c0:	852e                	mv	a0,a1
204170c2:	9782                	jalr	a5
204170c4:	bfd1                	j	20417098 <__call_exitprocs+0x7c>

204170c6 <__sflush_r>:
204170c6:	00c59783          	lh	a5,12(a1)
204170ca:	1101                	addi	sp,sp,-32
204170cc:	cc22                	sw	s0,24(sp)
204170ce:	01079713          	slli	a4,a5,0x10
204170d2:	8341                	srli	a4,a4,0x10
204170d4:	ca26                	sw	s1,20(sp)
204170d6:	ce06                	sw	ra,28(sp)
204170d8:	c84a                	sw	s2,16(sp)
204170da:	c64e                	sw	s3,12(sp)
204170dc:	00877693          	andi	a3,a4,8
204170e0:	84aa                	mv	s1,a0
204170e2:	842e                	mv	s0,a1
204170e4:	eee5                	bnez	a3,204171dc <__sflush_r+0x116>
204170e6:	6705                	lui	a4,0x1
204170e8:	80070713          	addi	a4,a4,-2048 # 800 <__stack_size>
204170ec:	8fd9                	or	a5,a5,a4
204170ee:	41d8                	lw	a4,4(a1)
204170f0:	00f59623          	sh	a5,12(a1)
204170f4:	00e04d63          	bgtz	a4,2041710e <__sflush_r+0x48>
204170f8:	5dd8                	lw	a4,60(a1)
204170fa:	00e04a63          	bgtz	a4,2041710e <__sflush_r+0x48>
204170fe:	4501                	li	a0,0
20417100:	40f2                	lw	ra,28(sp)
20417102:	4462                	lw	s0,24(sp)
20417104:	44d2                	lw	s1,20(sp)
20417106:	4942                	lw	s2,16(sp)
20417108:	49b2                	lw	s3,12(sp)
2041710a:	6105                	addi	sp,sp,32
2041710c:	8082                	ret
2041710e:	5418                	lw	a4,40(s0)
20417110:	d77d                	beqz	a4,204170fe <__sflush_r+0x38>
20417112:	0004a903          	lw	s2,0(s1)
20417116:	01379693          	slli	a3,a5,0x13
2041711a:	0004a023          	sw	zero,0(s1)
2041711e:	4c4c                	lw	a1,28(s0)
20417120:	0806d563          	bgez	a3,204171aa <__sflush_r+0xe4>
20417124:	4830                	lw	a2,80(s0)
20417126:	00c45783          	lhu	a5,12(s0)
2041712a:	8b91                	andi	a5,a5,4
2041712c:	c799                	beqz	a5,2041713a <__sflush_r+0x74>
2041712e:	405c                	lw	a5,4(s0)
20417130:	8e1d                	sub	a2,a2,a5
20417132:	581c                	lw	a5,48(s0)
20417134:	c399                	beqz	a5,2041713a <__sflush_r+0x74>
20417136:	5c5c                	lw	a5,60(s0)
20417138:	8e1d                	sub	a2,a2,a5
2041713a:	541c                	lw	a5,40(s0)
2041713c:	4c4c                	lw	a1,28(s0)
2041713e:	4681                	li	a3,0
20417140:	8526                	mv	a0,s1
20417142:	9782                	jalr	a5
20417144:	57fd                	li	a5,-1
20417146:	00c45683          	lhu	a3,12(s0)
2041714a:	00f51d63          	bne	a0,a5,20417164 <__sflush_r+0x9e>
2041714e:	409c                	lw	a5,0(s1)
20417150:	4775                	li	a4,29
20417152:	06f76f63          	bltu	a4,a5,204171d0 <__sflush_r+0x10a>
20417156:	20400737          	lui	a4,0x20400
2041715a:	0705                	addi	a4,a4,1
2041715c:	00f75733          	srl	a4,a4,a5
20417160:	8b05                	andi	a4,a4,1
20417162:	c73d                	beqz	a4,204171d0 <__sflush_r+0x10a>
20417164:	77fd                	lui	a5,0xfffff
20417166:	7ff78793          	addi	a5,a5,2047 # fffff7ff <pulp__FC+0xfffff800>
2041716a:	4818                	lw	a4,16(s0)
2041716c:	8ff5                	and	a5,a5,a3
2041716e:	07c2                	slli	a5,a5,0x10
20417170:	87c1                	srai	a5,a5,0x10
20417172:	c018                	sw	a4,0(s0)
20417174:	00f41623          	sh	a5,12(s0)
20417178:	00042223          	sw	zero,4(s0)
2041717c:	01379713          	slli	a4,a5,0x13
20417180:	00075863          	bgez	a4,20417190 <__sflush_r+0xca>
20417184:	57fd                	li	a5,-1
20417186:	00f51463          	bne	a0,a5,2041718e <__sflush_r+0xc8>
2041718a:	409c                	lw	a5,0(s1)
2041718c:	e391                	bnez	a5,20417190 <__sflush_r+0xca>
2041718e:	c828                	sw	a0,80(s0)
20417190:	580c                	lw	a1,48(s0)
20417192:	0124a023          	sw	s2,0(s1)
20417196:	d5a5                	beqz	a1,204170fe <__sflush_r+0x38>
20417198:	04040793          	addi	a5,s0,64
2041719c:	00f58463          	beq	a1,a5,204171a4 <__sflush_r+0xde>
204171a0:	8526                	mv	a0,s1
204171a2:	29b9                	jal	20417600 <_free_r>
204171a4:	02042823          	sw	zero,48(s0)
204171a8:	bf99                	j	204170fe <__sflush_r+0x38>
204171aa:	4601                	li	a2,0
204171ac:	4685                	li	a3,1
204171ae:	8526                	mv	a0,s1
204171b0:	9702                	jalr	a4
204171b2:	57fd                	li	a5,-1
204171b4:	862a                	mv	a2,a0
204171b6:	f6f518e3          	bne	a0,a5,20417126 <__sflush_r+0x60>
204171ba:	409c                	lw	a5,0(s1)
204171bc:	d7ad                	beqz	a5,20417126 <__sflush_r+0x60>
204171be:	4775                	li	a4,29
204171c0:	00e78563          	beq	a5,a4,204171ca <__sflush_r+0x104>
204171c4:	4759                	li	a4,22
204171c6:	04e79463          	bne	a5,a4,2041720e <__sflush_r+0x148>
204171ca:	0124a023          	sw	s2,0(s1)
204171ce:	bf05                	j	204170fe <__sflush_r+0x38>
204171d0:	0406e793          	ori	a5,a3,64
204171d4:	00f41623          	sh	a5,12(s0)
204171d8:	557d                	li	a0,-1
204171da:	b71d                	j	20417100 <__sflush_r+0x3a>
204171dc:	0105a983          	lw	s3,16(a1)
204171e0:	f0098fe3          	beqz	s3,204170fe <__sflush_r+0x38>
204171e4:	0005a903          	lw	s2,0(a1)
204171e8:	8b0d                	andi	a4,a4,3
204171ea:	0135a023          	sw	s3,0(a1)
204171ee:	41390933          	sub	s2,s2,s3
204171f2:	4781                	li	a5,0
204171f4:	e311                	bnez	a4,204171f8 <__sflush_r+0x132>
204171f6:	49dc                	lw	a5,20(a1)
204171f8:	c41c                	sw	a5,8(s0)
204171fa:	f12052e3          	blez	s2,204170fe <__sflush_r+0x38>
204171fe:	505c                	lw	a5,36(s0)
20417200:	4c4c                	lw	a1,28(s0)
20417202:	86ca                	mv	a3,s2
20417204:	864e                	mv	a2,s3
20417206:	8526                	mv	a0,s1
20417208:	9782                	jalr	a5
2041720a:	00a04763          	bgtz	a0,20417218 <__sflush_r+0x152>
2041720e:	00c45783          	lhu	a5,12(s0)
20417212:	0407e793          	ori	a5,a5,64
20417216:	bf7d                	j	204171d4 <__sflush_r+0x10e>
20417218:	99aa                	add	s3,s3,a0
2041721a:	40a90933          	sub	s2,s2,a0
2041721e:	bff1                	j	204171fa <__sflush_r+0x134>

20417220 <_fflush_r>:
20417220:	1101                	addi	sp,sp,-32
20417222:	cc22                	sw	s0,24(sp)
20417224:	ce06                	sw	ra,28(sp)
20417226:	842a                	mv	s0,a0
20417228:	c511                	beqz	a0,20417234 <_fflush_r+0x14>
2041722a:	5d1c                	lw	a5,56(a0)
2041722c:	e781                	bnez	a5,20417234 <_fflush_r+0x14>
2041722e:	c62e                	sw	a1,12(sp)
20417230:	2211                	jal	20417334 <__sinit>
20417232:	45b2                	lw	a1,12(sp)
20417234:	00c59783          	lh	a5,12(a1)
20417238:	c791                	beqz	a5,20417244 <_fflush_r+0x24>
2041723a:	8522                	mv	a0,s0
2041723c:	4462                	lw	s0,24(sp)
2041723e:	40f2                	lw	ra,28(sp)
20417240:	6105                	addi	sp,sp,32
20417242:	b551                	j	204170c6 <__sflush_r>
20417244:	40f2                	lw	ra,28(sp)
20417246:	4462                	lw	s0,24(sp)
20417248:	4501                	li	a0,0
2041724a:	6105                	addi	sp,sp,32
2041724c:	8082                	ret

2041724e <fflush>:
2041724e:	85aa                	mv	a1,a0
20417250:	e909                	bnez	a0,20417262 <fflush+0x14>
20417252:	8941a503          	lw	a0,-1900(gp) # 80000a34 <_global_impure_ptr>
20417256:	204175b7          	lui	a1,0x20417
2041725a:	22058593          	addi	a1,a1,544 # 20417220 <_fflush_r>
2041725e:	0950006f          	j	20417af2 <_fwalk_reent>
20417262:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20417266:	bf6d                	j	20417220 <_fflush_r>

20417268 <__fp_lock>:
20417268:	4501                	li	a0,0
2041726a:	8082                	ret

2041726c <_cleanup_r>:
2041726c:	2041b5b7          	lui	a1,0x2041b
20417270:	44e58593          	addi	a1,a1,1102 # 2041b44e <_fclose_r>
20417274:	07f0006f          	j	20417af2 <_fwalk_reent>

20417278 <std.isra.0>:
20417278:	1141                	addi	sp,sp,-16
2041727a:	c422                	sw	s0,8(sp)
2041727c:	c606                	sw	ra,12(sp)
2041727e:	842a                	mv	s0,a0
20417280:	00b51623          	sh	a1,12(a0)
20417284:	00c51723          	sh	a2,14(a0)
20417288:	00052023          	sw	zero,0(a0)
2041728c:	00052223          	sw	zero,4(a0)
20417290:	00052423          	sw	zero,8(a0)
20417294:	06052223          	sw	zero,100(a0)
20417298:	00052823          	sw	zero,16(a0)
2041729c:	00052a23          	sw	zero,20(a0)
204172a0:	00052c23          	sw	zero,24(a0)
204172a4:	4621                	li	a2,8
204172a6:	4581                	li	a1,0
204172a8:	05c50513          	addi	a0,a0,92
204172ac:	e03fb0ef          	jal	ra,204130ae <memset>
204172b0:	2041a7b7          	lui	a5,0x2041a
204172b4:	7b078793          	addi	a5,a5,1968 # 2041a7b0 <__sread>
204172b8:	d01c                	sw	a5,32(s0)
204172ba:	2041a7b7          	lui	a5,0x2041a
204172be:	7e678793          	addi	a5,a5,2022 # 2041a7e6 <__swrite>
204172c2:	d05c                	sw	a5,36(s0)
204172c4:	2041b7b7          	lui	a5,0x2041b
204172c8:	83878793          	addi	a5,a5,-1992 # 2041a838 <__sseek>
204172cc:	d41c                	sw	a5,40(s0)
204172ce:	2041b7b7          	lui	a5,0x2041b
204172d2:	87078793          	addi	a5,a5,-1936 # 2041a870 <__sclose>
204172d6:	cc40                	sw	s0,28(s0)
204172d8:	d45c                	sw	a5,44(s0)
204172da:	40b2                	lw	ra,12(sp)
204172dc:	4422                	lw	s0,8(sp)
204172de:	0141                	addi	sp,sp,16
204172e0:	8082                	ret

204172e2 <__fp_unlock>:
204172e2:	4501                	li	a0,0
204172e4:	8082                	ret

204172e6 <__sfmoreglue>:
204172e6:	1141                	addi	sp,sp,-16
204172e8:	c226                	sw	s1,4(sp)
204172ea:	06800613          	li	a2,104
204172ee:	fff58493          	addi	s1,a1,-1
204172f2:	02c484b3          	mul	s1,s1,a2
204172f6:	c04a                	sw	s2,0(sp)
204172f8:	892e                	mv	s2,a1
204172fa:	c422                	sw	s0,8(sp)
204172fc:	c606                	sw	ra,12(sp)
204172fe:	07448593          	addi	a1,s1,116
20417302:	016020ef          	jal	ra,20419318 <_malloc_r>
20417306:	842a                	mv	s0,a0
20417308:	cd01                	beqz	a0,20417320 <__sfmoreglue+0x3a>
2041730a:	00052023          	sw	zero,0(a0)
2041730e:	01252223          	sw	s2,4(a0)
20417312:	0531                	addi	a0,a0,12
20417314:	c408                	sw	a0,8(s0)
20417316:	06848613          	addi	a2,s1,104
2041731a:	4581                	li	a1,0
2041731c:	d93fb0ef          	jal	ra,204130ae <memset>
20417320:	8522                	mv	a0,s0
20417322:	40b2                	lw	ra,12(sp)
20417324:	4422                	lw	s0,8(sp)
20417326:	4492                	lw	s1,4(sp)
20417328:	4902                	lw	s2,0(sp)
2041732a:	0141                	addi	sp,sp,16
2041732c:	8082                	ret

2041732e <_cleanup>:
2041732e:	8941a503          	lw	a0,-1900(gp) # 80000a34 <_global_impure_ptr>
20417332:	bf2d                	j	2041726c <_cleanup_r>

20417334 <__sinit>:
20417334:	5d1c                	lw	a5,56(a0)
20417336:	e7a9                	bnez	a5,20417380 <__sinit+0x4c>
20417338:	1141                	addi	sp,sp,-16
2041733a:	204177b7          	lui	a5,0x20417
2041733e:	c606                	sw	ra,12(sp)
20417340:	c422                	sw	s0,8(sp)
20417342:	26c78793          	addi	a5,a5,620 # 2041726c <_cleanup_r>
20417346:	dd5c                	sw	a5,60(a0)
20417348:	478d                	li	a5,3
2041734a:	2ef52223          	sw	a5,740(a0)
2041734e:	2ec50793          	addi	a5,a0,748
20417352:	842a                	mv	s0,a0
20417354:	2ef52423          	sw	a5,744(a0)
20417358:	2e052023          	sw	zero,736(a0)
2041735c:	4148                	lw	a0,4(a0)
2041735e:	4601                	li	a2,0
20417360:	4591                	li	a1,4
20417362:	3f19                	jal	20417278 <std.isra.0>
20417364:	4408                	lw	a0,8(s0)
20417366:	4605                	li	a2,1
20417368:	45a5                	li	a1,9
2041736a:	3739                	jal	20417278 <std.isra.0>
2041736c:	4448                	lw	a0,12(s0)
2041736e:	4609                	li	a2,2
20417370:	45c9                	li	a1,18
20417372:	3719                	jal	20417278 <std.isra.0>
20417374:	4785                	li	a5,1
20417376:	dc1c                	sw	a5,56(s0)
20417378:	40b2                	lw	ra,12(sp)
2041737a:	4422                	lw	s0,8(sp)
2041737c:	0141                	addi	sp,sp,16
2041737e:	8082                	ret
20417380:	8082                	ret

20417382 <__sfp>:
20417382:	1141                	addi	sp,sp,-16
20417384:	c226                	sw	s1,4(sp)
20417386:	8941a483          	lw	s1,-1900(gp) # 80000a34 <_global_impure_ptr>
2041738a:	c04a                	sw	s2,0(sp)
2041738c:	c606                	sw	ra,12(sp)
2041738e:	5c9c                	lw	a5,56(s1)
20417390:	c422                	sw	s0,8(sp)
20417392:	892a                	mv	s2,a0
20417394:	e399                	bnez	a5,2041739a <__sfp+0x18>
20417396:	8526                	mv	a0,s1
20417398:	3f71                	jal	20417334 <__sinit>
2041739a:	2e048493          	addi	s1,s1,736
2041739e:	4480                	lw	s0,8(s1)
204173a0:	40dc                	lw	a5,4(s1)
204173a2:	17fd                	addi	a5,a5,-1
204173a4:	0007d663          	bgez	a5,204173b0 <__sfp+0x2e>
204173a8:	409c                	lw	a5,0(s1)
204173aa:	cb89                	beqz	a5,204173bc <__sfp+0x3a>
204173ac:	4084                	lw	s1,0(s1)
204173ae:	bfc5                	j	2041739e <__sfp+0x1c>
204173b0:	00c41703          	lh	a4,12(s0)
204173b4:	c705                	beqz	a4,204173dc <__sfp+0x5a>
204173b6:	06840413          	addi	s0,s0,104
204173ba:	b7e5                	j	204173a2 <__sfp+0x20>
204173bc:	4591                	li	a1,4
204173be:	854a                	mv	a0,s2
204173c0:	371d                	jal	204172e6 <__sfmoreglue>
204173c2:	c088                	sw	a0,0(s1)
204173c4:	f565                	bnez	a0,204173ac <__sfp+0x2a>
204173c6:	47b1                	li	a5,12
204173c8:	00f92023          	sw	a5,0(s2)
204173cc:	4401                	li	s0,0
204173ce:	8522                	mv	a0,s0
204173d0:	40b2                	lw	ra,12(sp)
204173d2:	4422                	lw	s0,8(sp)
204173d4:	4492                	lw	s1,4(sp)
204173d6:	4902                	lw	s2,0(sp)
204173d8:	0141                	addi	sp,sp,16
204173da:	8082                	ret
204173dc:	77c1                	lui	a5,0xffff0
204173de:	0785                	addi	a5,a5,1
204173e0:	06042223          	sw	zero,100(s0)
204173e4:	00042023          	sw	zero,0(s0)
204173e8:	00042223          	sw	zero,4(s0)
204173ec:	00042423          	sw	zero,8(s0)
204173f0:	c45c                	sw	a5,12(s0)
204173f2:	00042823          	sw	zero,16(s0)
204173f6:	00042a23          	sw	zero,20(s0)
204173fa:	00042c23          	sw	zero,24(s0)
204173fe:	4621                	li	a2,8
20417400:	4581                	li	a1,0
20417402:	05c40513          	addi	a0,s0,92
20417406:	ca9fb0ef          	jal	ra,204130ae <memset>
2041740a:	02042823          	sw	zero,48(s0)
2041740e:	02042a23          	sw	zero,52(s0)
20417412:	04042223          	sw	zero,68(s0)
20417416:	04042423          	sw	zero,72(s0)
2041741a:	bf55                	j	204173ce <__sfp+0x4c>

2041741c <__sfp_lock_acquire>:
2041741c:	8082                	ret

2041741e <__sfp_lock_release>:
2041741e:	8082                	ret

20417420 <__sinit_lock_acquire>:
20417420:	8082                	ret

20417422 <__sinit_lock_release>:
20417422:	8082                	ret

20417424 <__fp_lock_all>:
20417424:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20417428:	204175b7          	lui	a1,0x20417
2041742c:	26858593          	addi	a1,a1,616 # 20417268 <__fp_lock>
20417430:	a585                	j	20417a90 <_fwalk>

20417432 <__fp_unlock_all>:
20417432:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20417436:	204175b7          	lui	a1,0x20417
2041743a:	2e258593          	addi	a1,a1,738 # 204172e2 <__fp_unlock>
2041743e:	ad89                	j	20417a90 <_fwalk>

20417440 <__fputwc>:
20417440:	7179                	addi	sp,sp,-48
20417442:	d422                	sw	s0,40(sp)
20417444:	d226                	sw	s1,36(sp)
20417446:	cc52                	sw	s4,24(sp)
20417448:	d606                	sw	ra,44(sp)
2041744a:	d04a                	sw	s2,32(sp)
2041744c:	ce4e                	sw	s3,28(sp)
2041744e:	ca56                	sw	s5,20(sp)
20417450:	c85a                	sw	s6,16(sp)
20417452:	8a2a                	mv	s4,a0
20417454:	84ae                	mv	s1,a1
20417456:	8432                	mv	s0,a2
20417458:	b0dfb0ef          	jal	ra,20412f64 <__locale_mb_cur_max>
2041745c:	4785                	li	a5,1
2041745e:	02f51c63          	bne	a0,a5,20417496 <__fputwc+0x56>
20417462:	fff48793          	addi	a5,s1,-1
20417466:	0fe00713          	li	a4,254
2041746a:	02f76663          	bltu	a4,a5,20417496 <__fputwc+0x56>
2041746e:	87a6                	mv	a5,s1
20417470:	00f10623          	sb	a5,12(sp)
20417474:	4985                	li	s3,1
20417476:	4901                	li	s2,0
20417478:	5afd                	li	s5,-1
2041747a:	4b29                	li	s6,10
2041747c:	05391063          	bne	s2,s3,204174bc <__fputwc+0x7c>
20417480:	8526                	mv	a0,s1
20417482:	50b2                	lw	ra,44(sp)
20417484:	5422                	lw	s0,40(sp)
20417486:	5492                	lw	s1,36(sp)
20417488:	5902                	lw	s2,32(sp)
2041748a:	49f2                	lw	s3,28(sp)
2041748c:	4a62                	lw	s4,24(sp)
2041748e:	4ad2                	lw	s5,20(sp)
20417490:	4b42                	lw	s6,16(sp)
20417492:	6145                	addi	sp,sp,48
20417494:	8082                	ret
20417496:	05c40693          	addi	a3,s0,92
2041749a:	8626                	mv	a2,s1
2041749c:	006c                	addi	a1,sp,12
2041749e:	8552                	mv	a0,s4
204174a0:	671030ef          	jal	ra,2041b310 <_wcrtomb_r>
204174a4:	57fd                	li	a5,-1
204174a6:	89aa                	mv	s3,a0
204174a8:	fcf517e3          	bne	a0,a5,20417476 <__fputwc+0x36>
204174ac:	00c45783          	lhu	a5,12(s0)
204174b0:	0407e793          	ori	a5,a5,64
204174b4:	00f41623          	sh	a5,12(s0)
204174b8:	557d                	li	a0,-1
204174ba:	b7e1                	j	20417482 <__fputwc+0x42>
204174bc:	0078                	addi	a4,sp,12
204174be:	012707b3          	add	a5,a4,s2
204174c2:	0007c583          	lbu	a1,0(a5) # ffff0000 <pulp__FC+0xffff0001>
204174c6:	441c                	lw	a5,8(s0)
204174c8:	17fd                	addi	a5,a5,-1
204174ca:	c41c                	sw	a5,8(s0)
204174cc:	0007d763          	bgez	a5,204174da <__fputwc+0x9a>
204174d0:	4c18                	lw	a4,24(s0)
204174d2:	00e7cc63          	blt	a5,a4,204174ea <__fputwc+0xaa>
204174d6:	01658a63          	beq	a1,s6,204174ea <__fputwc+0xaa>
204174da:	401c                	lw	a5,0(s0)
204174dc:	00178713          	addi	a4,a5,1
204174e0:	c018                	sw	a4,0(s0)
204174e2:	00b78023          	sb	a1,0(a5)
204174e6:	0905                	addi	s2,s2,1
204174e8:	bf51                	j	2041747c <__fputwc+0x3c>
204174ea:	8622                	mv	a2,s0
204174ec:	8552                	mv	a0,s4
204174ee:	55f030ef          	jal	ra,2041b24c <__swbuf_r>
204174f2:	ff551ae3          	bne	a0,s5,204174e6 <__fputwc+0xa6>
204174f6:	b7c9                	j	204174b8 <__fputwc+0x78>

204174f8 <_fputwc_r>:
204174f8:	00c61783          	lh	a5,12(a2)
204174fc:	01279713          	slli	a4,a5,0x12
20417500:	00074a63          	bltz	a4,20417514 <_fputwc_r+0x1c>
20417504:	5278                	lw	a4,100(a2)
20417506:	6689                	lui	a3,0x2
20417508:	8fd5                	or	a5,a5,a3
2041750a:	00f61623          	sh	a5,12(a2)
2041750e:	6789                	lui	a5,0x2
20417510:	8fd9                	or	a5,a5,a4
20417512:	d27c                	sw	a5,100(a2)
20417514:	b735                	j	20417440 <__fputwc>

20417516 <fputwc>:
20417516:	1101                	addi	sp,sp,-32
20417518:	cc22                	sw	s0,24(sp)
2041751a:	8981a403          	lw	s0,-1896(gp) # 80000a38 <_impure_ptr>
2041751e:	ca26                	sw	s1,20(sp)
20417520:	ce06                	sw	ra,28(sp)
20417522:	84aa                	mv	s1,a0
20417524:	862e                	mv	a2,a1
20417526:	c801                	beqz	s0,20417536 <fputwc+0x20>
20417528:	5c1c                	lw	a5,56(s0)
2041752a:	e791                	bnez	a5,20417536 <fputwc+0x20>
2041752c:	8522                	mv	a0,s0
2041752e:	c62e                	sw	a1,12(sp)
20417530:	e05ff0ef          	jal	ra,20417334 <__sinit>
20417534:	4632                	lw	a2,12(sp)
20417536:	8522                	mv	a0,s0
20417538:	4462                	lw	s0,24(sp)
2041753a:	40f2                	lw	ra,28(sp)
2041753c:	85a6                	mv	a1,s1
2041753e:	44d2                	lw	s1,20(sp)
20417540:	6105                	addi	sp,sp,32
20417542:	bf5d                	j	204174f8 <_fputwc_r>

20417544 <_malloc_trim_r>:
20417544:	7179                	addi	sp,sp,-48
20417546:	d04a                	sw	s2,32(sp)
20417548:	80000937          	lui	s2,0x80000
2041754c:	d422                	sw	s0,40(sp)
2041754e:	d226                	sw	s1,36(sp)
20417550:	ce4e                	sw	s3,28(sp)
20417552:	c62e                	sw	a1,12(sp)
20417554:	d606                	sw	ra,44(sp)
20417556:	89aa                	mv	s3,a0
20417558:	59490913          	addi	s2,s2,1428 # 80000594 <pulp__FC+0x80000595>
2041755c:	2ac020ef          	jal	ra,20419808 <__malloc_lock>
20417560:	00892783          	lw	a5,8(s2)
20417564:	45b2                	lw	a1,12(sp)
20417566:	43c4                	lw	s1,4(a5)
20417568:	6785                	lui	a5,0x1
2041756a:	fef78413          	addi	s0,a5,-17 # fef <__stack_size+0x7ef>
2041756e:	98f1                	andi	s1,s1,-4
20417570:	8c0d                	sub	s0,s0,a1
20417572:	9426                	add	s0,s0,s1
20417574:	8031                	srli	s0,s0,0xc
20417576:	147d                	addi	s0,s0,-1
20417578:	0432                	slli	s0,s0,0xc
2041757a:	00f45d63          	ble	a5,s0,20417594 <_malloc_trim_r+0x50>
2041757e:	854e                	mv	a0,s3
20417580:	28a020ef          	jal	ra,2041980a <__malloc_unlock>
20417584:	4501                	li	a0,0
20417586:	50b2                	lw	ra,44(sp)
20417588:	5422                	lw	s0,40(sp)
2041758a:	5492                	lw	s1,36(sp)
2041758c:	5902                	lw	s2,32(sp)
2041758e:	49f2                	lw	s3,28(sp)
20417590:	6145                	addi	sp,sp,48
20417592:	8082                	ret
20417594:	4581                	li	a1,0
20417596:	854e                	mv	a0,s3
20417598:	755020ef          	jal	ra,2041a4ec <_sbrk_r>
2041759c:	00892783          	lw	a5,8(s2)
204175a0:	97a6                	add	a5,a5,s1
204175a2:	fcf51ee3          	bne	a0,a5,2041757e <_malloc_trim_r+0x3a>
204175a6:	408005b3          	neg	a1,s0
204175aa:	854e                	mv	a0,s3
204175ac:	741020ef          	jal	ra,2041a4ec <_sbrk_r>
204175b0:	57fd                	li	a5,-1
204175b2:	02f51663          	bne	a0,a5,204175de <_malloc_trim_r+0x9a>
204175b6:	4581                	li	a1,0
204175b8:	854e                	mv	a0,s3
204175ba:	733020ef          	jal	ra,2041a4ec <_sbrk_r>
204175be:	00892703          	lw	a4,8(s2)
204175c2:	46bd                	li	a3,15
204175c4:	40e507b3          	sub	a5,a0,a4
204175c8:	faf6dbe3          	ble	a5,a3,2041757e <_malloc_trim_r+0x3a>
204175cc:	89c1a683          	lw	a3,-1892(gp) # 80000a3c <__malloc_sbrk_base>
204175d0:	0017e793          	ori	a5,a5,1
204175d4:	c35c                	sw	a5,4(a4)
204175d6:	8d15                	sub	a0,a0,a3
204175d8:	d0a1ae23          	sw	a0,-740(gp) # 80000ebc <__malloc_current_mallinfo>
204175dc:	b74d                	j	2041757e <_malloc_trim_r+0x3a>
204175de:	00892783          	lw	a5,8(s2)
204175e2:	8c81                	sub	s1,s1,s0
204175e4:	0014e493          	ori	s1,s1,1
204175e8:	c3c4                	sw	s1,4(a5)
204175ea:	d1c1a783          	lw	a5,-740(gp) # 80000ebc <__malloc_current_mallinfo>
204175ee:	854e                	mv	a0,s3
204175f0:	40878433          	sub	s0,a5,s0
204175f4:	d081ae23          	sw	s0,-740(gp) # 80000ebc <__malloc_current_mallinfo>
204175f8:	212020ef          	jal	ra,2041980a <__malloc_unlock>
204175fc:	4505                	li	a0,1
204175fe:	b761                	j	20417586 <_malloc_trim_r+0x42>

20417600 <_free_r>:
20417600:	1a058463          	beqz	a1,204177a8 <_free_r+0x1a8>
20417604:	1141                	addi	sp,sp,-16
20417606:	c422                	sw	s0,8(sp)
20417608:	c226                	sw	s1,4(sp)
2041760a:	842a                	mv	s0,a0
2041760c:	84ae                	mv	s1,a1
2041760e:	c606                	sw	ra,12(sp)
20417610:	1f8020ef          	jal	ra,20419808 <__malloc_lock>
20417614:	ffc4a503          	lw	a0,-4(s1)
20417618:	80000637          	lui	a2,0x80000
2041761c:	ff848693          	addi	a3,s1,-8
20417620:	ffe57793          	andi	a5,a0,-2
20417624:	59460813          	addi	a6,a2,1428 # 80000594 <pulp__FC+0x80000595>
20417628:	00f685b3          	add	a1,a3,a5
2041762c:	41d8                	lw	a4,4(a1)
2041762e:	00882803          	lw	a6,8(a6)
20417632:	59460613          	addi	a2,a2,1428
20417636:	9b71                	andi	a4,a4,-4
20417638:	8905                	andi	a0,a0,1
2041763a:	02b81f63          	bne	a6,a1,20417678 <_free_r+0x78>
2041763e:	97ba                	add	a5,a5,a4
20417640:	e909                	bnez	a0,20417652 <_free_r+0x52>
20417642:	ff84a703          	lw	a4,-8(s1)
20417646:	8e99                	sub	a3,a3,a4
20417648:	468c                	lw	a1,8(a3)
2041764a:	97ba                	add	a5,a5,a4
2041764c:	46d8                	lw	a4,12(a3)
2041764e:	c5d8                	sw	a4,12(a1)
20417650:	c70c                	sw	a1,8(a4)
20417652:	0017e713          	ori	a4,a5,1
20417656:	c2d8                	sw	a4,4(a3)
20417658:	8a01a703          	lw	a4,-1888(gp) # 80000a40 <__malloc_trim_threshold>
2041765c:	c614                	sw	a3,8(a2)
2041765e:	00e7e663          	bltu	a5,a4,2041766a <_free_r+0x6a>
20417662:	8cc1a583          	lw	a1,-1844(gp) # 80000a6c <__malloc_top_pad>
20417666:	8522                	mv	a0,s0
20417668:	3df1                	jal	20417544 <_malloc_trim_r>
2041766a:	8522                	mv	a0,s0
2041766c:	4422                	lw	s0,8(sp)
2041766e:	40b2                	lw	ra,12(sp)
20417670:	4492                	lw	s1,4(sp)
20417672:	0141                	addi	sp,sp,16
20417674:	1960206f          	j	2041980a <__malloc_unlock>
20417678:	c1d8                	sw	a4,4(a1)
2041767a:	4801                	li	a6,0
2041767c:	e115                	bnez	a0,204176a0 <_free_r+0xa0>
2041767e:	ff84a503          	lw	a0,-8(s1)
20417682:	800008b7          	lui	a7,0x80000
20417686:	59c88893          	addi	a7,a7,1436 # 8000059c <pulp__FC+0x8000059d>
2041768a:	8e89                	sub	a3,a3,a0
2041768c:	97aa                	add	a5,a5,a0
2041768e:	4688                	lw	a0,8(a3)
20417690:	07150c63          	beq	a0,a7,20417708 <_free_r+0x108>
20417694:	00c6a883          	lw	a7,12(a3) # 200c <__stack_size+0x180c>
20417698:	01152623          	sw	a7,12(a0)
2041769c:	00a8a423          	sw	a0,8(a7)
204176a0:	00e58533          	add	a0,a1,a4
204176a4:	4148                	lw	a0,4(a0)
204176a6:	8905                	andi	a0,a0,1
204176a8:	e105                	bnez	a0,204176c8 <_free_r+0xc8>
204176aa:	97ba                	add	a5,a5,a4
204176ac:	4598                	lw	a4,8(a1)
204176ae:	04081f63          	bnez	a6,2041770c <_free_r+0x10c>
204176b2:	80000537          	lui	a0,0x80000
204176b6:	59c50513          	addi	a0,a0,1436 # 8000059c <pulp__FC+0x8000059d>
204176ba:	04a71963          	bne	a4,a0,2041770c <_free_r+0x10c>
204176be:	ca54                	sw	a3,20(a2)
204176c0:	ca14                	sw	a3,16(a2)
204176c2:	c6d8                	sw	a4,12(a3)
204176c4:	c698                	sw	a4,8(a3)
204176c6:	4805                	li	a6,1
204176c8:	0017e713          	ori	a4,a5,1
204176cc:	c2d8                	sw	a4,4(a3)
204176ce:	00f68733          	add	a4,a3,a5
204176d2:	c31c                	sw	a5,0(a4)
204176d4:	f8081be3          	bnez	a6,2041766a <_free_r+0x6a>
204176d8:	1ff00713          	li	a4,511
204176dc:	02f76c63          	bltu	a4,a5,20417714 <_free_r+0x114>
204176e0:	838d                	srli	a5,a5,0x3
204176e2:	4027d593          	srai	a1,a5,0x2
204176e6:	4705                	li	a4,1
204176e8:	00b71733          	sll	a4,a4,a1
204176ec:	424c                	lw	a1,4(a2)
204176ee:	0785                	addi	a5,a5,1
204176f0:	078e                	slli	a5,a5,0x3
204176f2:	97b2                	add	a5,a5,a2
204176f4:	8f4d                	or	a4,a4,a1
204176f6:	c258                	sw	a4,4(a2)
204176f8:	4398                	lw	a4,0(a5)
204176fa:	ff878613          	addi	a2,a5,-8
204176fe:	c6d0                	sw	a2,12(a3)
20417700:	c698                	sw	a4,8(a3)
20417702:	c394                	sw	a3,0(a5)
20417704:	c754                	sw	a3,12(a4)
20417706:	b795                	j	2041766a <_free_r+0x6a>
20417708:	4805                	li	a6,1
2041770a:	bf59                	j	204176a0 <_free_r+0xa0>
2041770c:	45cc                	lw	a1,12(a1)
2041770e:	c74c                	sw	a1,12(a4)
20417710:	c598                	sw	a4,8(a1)
20417712:	bf5d                	j	204176c8 <_free_r+0xc8>
20417714:	0097d593          	srli	a1,a5,0x9
20417718:	4711                	li	a4,4
2041771a:	02b76b63          	bltu	a4,a1,20417750 <_free_r+0x150>
2041771e:	0067d713          	srli	a4,a5,0x6
20417722:	03870713          	addi	a4,a4,56 # 20400038 <_start+0x38>
20417726:	00170593          	addi	a1,a4,1
2041772a:	058e                	slli	a1,a1,0x3
2041772c:	95b2                	add	a1,a1,a2
2041772e:	ff858513          	addi	a0,a1,-8
20417732:	418c                	lw	a1,0(a1)
20417734:	06b51463          	bne	a0,a1,2041779c <_free_r+0x19c>
20417738:	4785                	li	a5,1
2041773a:	8709                	srai	a4,a4,0x2
2041773c:	00e79733          	sll	a4,a5,a4
20417740:	425c                	lw	a5,4(a2)
20417742:	8f5d                	or	a4,a4,a5
20417744:	c258                	sw	a4,4(a2)
20417746:	c6c8                	sw	a0,12(a3)
20417748:	c68c                	sw	a1,8(a3)
2041774a:	c514                	sw	a3,8(a0)
2041774c:	c5d4                	sw	a3,12(a1)
2041774e:	bf31                	j	2041766a <_free_r+0x6a>
20417750:	4751                	li	a4,20
20417752:	00b76563          	bltu	a4,a1,2041775c <_free_r+0x15c>
20417756:	05b58713          	addi	a4,a1,91
2041775a:	b7f1                	j	20417726 <_free_r+0x126>
2041775c:	05400713          	li	a4,84
20417760:	00b76763          	bltu	a4,a1,2041776e <_free_r+0x16e>
20417764:	00c7d713          	srli	a4,a5,0xc
20417768:	06e70713          	addi	a4,a4,110
2041776c:	bf6d                	j	20417726 <_free_r+0x126>
2041776e:	15400713          	li	a4,340
20417772:	00b76763          	bltu	a4,a1,20417780 <_free_r+0x180>
20417776:	00f7d713          	srli	a4,a5,0xf
2041777a:	07770713          	addi	a4,a4,119
2041777e:	b765                	j	20417726 <_free_r+0x126>
20417780:	55400513          	li	a0,1364
20417784:	07e00713          	li	a4,126
20417788:	f8b56fe3          	bltu	a0,a1,20417726 <_free_r+0x126>
2041778c:	0127d713          	srli	a4,a5,0x12
20417790:	07c70713          	addi	a4,a4,124
20417794:	bf49                	j	20417726 <_free_r+0x126>
20417796:	458c                	lw	a1,8(a1)
20417798:	00b50663          	beq	a0,a1,204177a4 <_free_r+0x1a4>
2041779c:	41d8                	lw	a4,4(a1)
2041779e:	9b71                	andi	a4,a4,-4
204177a0:	fee7ebe3          	bltu	a5,a4,20417796 <_free_r+0x196>
204177a4:	45c8                	lw	a0,12(a1)
204177a6:	b745                	j	20417746 <_free_r+0x146>
204177a8:	8082                	ret

204177aa <__sfvwrite_r>:
204177aa:	461c                	lw	a5,8(a2)
204177ac:	e781                	bnez	a5,204177b4 <__sfvwrite_r+0xa>
204177ae:	4781                	li	a5,0
204177b0:	853e                	mv	a0,a5
204177b2:	8082                	ret
204177b4:	00c5d783          	lhu	a5,12(a1)
204177b8:	715d                	addi	sp,sp,-80
204177ba:	c4a2                	sw	s0,72(sp)
204177bc:	c0ca                	sw	s2,64(sp)
204177be:	da56                	sw	s5,52(sp)
204177c0:	c686                	sw	ra,76(sp)
204177c2:	c2a6                	sw	s1,68(sp)
204177c4:	de4e                	sw	s3,60(sp)
204177c6:	dc52                	sw	s4,56(sp)
204177c8:	d85a                	sw	s6,48(sp)
204177ca:	d65e                	sw	s7,44(sp)
204177cc:	d462                	sw	s8,40(sp)
204177ce:	d266                	sw	s9,36(sp)
204177d0:	d06a                	sw	s10,32(sp)
204177d2:	ce6e                	sw	s11,28(sp)
204177d4:	8ba1                	andi	a5,a5,8
204177d6:	8ab2                	mv	s5,a2
204177d8:	842e                	mv	s0,a1
204177da:	892a                	mv	s2,a0
204177dc:	cfd9                	beqz	a5,2041787a <__sfvwrite_r+0xd0>
204177de:	499c                	lw	a5,16(a1)
204177e0:	cfc9                	beqz	a5,2041787a <__sfvwrite_r+0xd0>
204177e2:	00c45783          	lhu	a5,12(s0)
204177e6:	000aaa03          	lw	s4,0(s5)
204177ea:	0027f713          	andi	a4,a5,2
204177ee:	0e071863          	bnez	a4,204178de <__sfvwrite_r+0x134>
204177f2:	8b85                	andi	a5,a5,1
204177f4:	16078163          	beqz	a5,20417956 <__sfvwrite_r+0x1ac>
204177f8:	4b81                	li	s7,0
204177fa:	4501                	li	a0,0
204177fc:	4b01                	li	s6,0
204177fe:	4981                	li	s3,0
20417800:	24098963          	beqz	s3,20417a52 <__sfvwrite_r+0x2a8>
20417804:	ed01                	bnez	a0,2041781c <__sfvwrite_r+0x72>
20417806:	864e                	mv	a2,s3
20417808:	45a9                	li	a1,10
2041780a:	855a                	mv	a0,s6
2041780c:	7a5010ef          	jal	ra,204197b0 <memchr>
20417810:	00198b93          	addi	s7,s3,1
20417814:	c501                	beqz	a0,2041781c <__sfvwrite_r+0x72>
20417816:	0505                	addi	a0,a0,1
20417818:	41650bb3          	sub	s7,a0,s6
2041781c:	8c5e                	mv	s8,s7
2041781e:	0179f363          	bleu	s7,s3,20417824 <__sfvwrite_r+0x7a>
20417822:	8c4e                	mv	s8,s3
20417824:	4008                	lw	a0,0(s0)
20417826:	481c                	lw	a5,16(s0)
20417828:	4854                	lw	a3,20(s0)
2041782a:	22a7fb63          	bleu	a0,a5,20417a60 <__sfvwrite_r+0x2b6>
2041782e:	4404                	lw	s1,8(s0)
20417830:	94b6                	add	s1,s1,a3
20417832:	2384d763          	ble	s8,s1,20417a60 <__sfvwrite_r+0x2b6>
20417836:	85da                	mv	a1,s6
20417838:	8626                	mv	a2,s1
2041783a:	791010ef          	jal	ra,204197ca <memmove>
2041783e:	401c                	lw	a5,0(s0)
20417840:	85a2                	mv	a1,s0
20417842:	854a                	mv	a0,s2
20417844:	97a6                	add	a5,a5,s1
20417846:	c01c                	sw	a5,0(s0)
20417848:	9d9ff0ef          	jal	ra,20417220 <_fflush_r>
2041784c:	0e051d63          	bnez	a0,20417946 <__sfvwrite_r+0x19c>
20417850:	409b8bb3          	sub	s7,s7,s1
20417854:	4505                	li	a0,1
20417856:	000b9763          	bnez	s7,20417864 <__sfvwrite_r+0xba>
2041785a:	85a2                	mv	a1,s0
2041785c:	854a                	mv	a0,s2
2041785e:	9c3ff0ef          	jal	ra,20417220 <_fflush_r>
20417862:	e175                	bnez	a0,20417946 <__sfvwrite_r+0x19c>
20417864:	008aa783          	lw	a5,8(s5)
20417868:	9b26                	add	s6,s6,s1
2041786a:	409989b3          	sub	s3,s3,s1
2041786e:	409784b3          	sub	s1,a5,s1
20417872:	009aa423          	sw	s1,8(s5)
20417876:	f4c9                	bnez	s1,20417800 <__sfvwrite_r+0x56>
20417878:	a091                	j	204178bc <__sfvwrite_r+0x112>
2041787a:	85a2                	mv	a1,s0
2041787c:	854a                	mv	a0,s2
2041787e:	e58ff0ef          	jal	ra,20416ed6 <__swsetup_r>
20417882:	57fd                	li	a5,-1
20417884:	dd39                	beqz	a0,204177e2 <__sfvwrite_r+0x38>
20417886:	a825                	j	204178be <__sfvwrite_r+0x114>
20417888:	000a2983          	lw	s3,0(s4)
2041788c:	004a2483          	lw	s1,4(s4)
20417890:	0a21                	addi	s4,s4,8
20417892:	d8fd                	beqz	s1,20417888 <__sfvwrite_r+0xde>
20417894:	86a6                	mv	a3,s1
20417896:	009b7363          	bleu	s1,s6,2041789c <__sfvwrite_r+0xf2>
2041789a:	86da                	mv	a3,s6
2041789c:	505c                	lw	a5,36(s0)
2041789e:	4c4c                	lw	a1,28(s0)
204178a0:	864e                	mv	a2,s3
204178a2:	854a                	mv	a0,s2
204178a4:	9782                	jalr	a5
204178a6:	0aa05063          	blez	a0,20417946 <__sfvwrite_r+0x19c>
204178aa:	008aa783          	lw	a5,8(s5)
204178ae:	99aa                	add	s3,s3,a0
204178b0:	8c89                	sub	s1,s1,a0
204178b2:	40a78533          	sub	a0,a5,a0
204178b6:	00aaa423          	sw	a0,8(s5)
204178ba:	fd61                	bnez	a0,20417892 <__sfvwrite_r+0xe8>
204178bc:	4781                	li	a5,0
204178be:	40b6                	lw	ra,76(sp)
204178c0:	4426                	lw	s0,72(sp)
204178c2:	4496                	lw	s1,68(sp)
204178c4:	4906                	lw	s2,64(sp)
204178c6:	59f2                	lw	s3,60(sp)
204178c8:	5a62                	lw	s4,56(sp)
204178ca:	5ad2                	lw	s5,52(sp)
204178cc:	5b42                	lw	s6,48(sp)
204178ce:	5bb2                	lw	s7,44(sp)
204178d0:	5c22                	lw	s8,40(sp)
204178d2:	5c92                	lw	s9,36(sp)
204178d4:	5d02                	lw	s10,32(sp)
204178d6:	4df2                	lw	s11,28(sp)
204178d8:	853e                	mv	a0,a5
204178da:	6161                	addi	sp,sp,80
204178dc:	8082                	ret
204178de:	80000b37          	lui	s6,0x80000
204178e2:	4981                	li	s3,0
204178e4:	4481                	li	s1,0
204178e6:	c00b4b13          	xori	s6,s6,-1024
204178ea:	b765                	j	20417892 <__sfvwrite_r+0xe8>
204178ec:	000a2b03          	lw	s6,0(s4)
204178f0:	004a2483          	lw	s1,4(s4)
204178f4:	0a21                	addi	s4,s4,8
204178f6:	d8fd                	beqz	s1,204178ec <__sfvwrite_r+0x142>
204178f8:	00c45703          	lhu	a4,12(s0)
204178fc:	441c                	lw	a5,8(s0)
204178fe:	4008                	lw	a0,0(s0)
20417900:	20077693          	andi	a3,a4,512
20417904:	0e068a63          	beqz	a3,204179f8 <__sfvwrite_r+0x24e>
20417908:	08f4ea63          	bltu	s1,a5,2041799c <__sfvwrite_r+0x1f2>
2041790c:	48077693          	andi	a3,a4,1152
20417910:	c6d1                	beqz	a3,2041799c <__sfvwrite_r+0x1f2>
20417912:	01442d83          	lw	s11,20(s0)
20417916:	480c                	lw	a1,16(s0)
20417918:	03bc8db3          	mul	s11,s9,s11
2041791c:	40b509b3          	sub	s3,a0,a1
20417920:	00198793          	addi	a5,s3,1
20417924:	97a6                	add	a5,a5,s1
20417926:	03adcdb3          	div	s11,s11,s10
2041792a:	00fdf363          	bleu	a5,s11,20417930 <__sfvwrite_r+0x186>
2041792e:	8dbe                	mv	s11,a5
20417930:	40077713          	andi	a4,a4,1024
20417934:	c34d                	beqz	a4,204179d6 <__sfvwrite_r+0x22c>
20417936:	85ee                	mv	a1,s11
20417938:	854a                	mv	a0,s2
2041793a:	1df010ef          	jal	ra,20419318 <_malloc_r>
2041793e:	e51d                	bnez	a0,2041796c <__sfvwrite_r+0x1c2>
20417940:	47b1                	li	a5,12
20417942:	00f92023          	sw	a5,0(s2)
20417946:	00c45783          	lhu	a5,12(s0)
2041794a:	0407e793          	ori	a5,a5,64
2041794e:	00f41623          	sh	a5,12(s0)
20417952:	57fd                	li	a5,-1
20417954:	b7ad                	j	204178be <__sfvwrite_r+0x114>
20417956:	80000bb7          	lui	s7,0x80000
2041795a:	ffebcc13          	xori	s8,s7,-2
2041795e:	4b01                	li	s6,0
20417960:	4481                	li	s1,0
20417962:	fffbcb93          	not	s7,s7
20417966:	4c8d                	li	s9,3
20417968:	4d09                	li	s10,2
2041796a:	b771                	j	204178f6 <__sfvwrite_r+0x14c>
2041796c:	480c                	lw	a1,16(s0)
2041796e:	864e                	mv	a2,s3
20417970:	c62a                	sw	a0,12(sp)
20417972:	e7efb0ef          	jal	ra,20412ff0 <memcpy>
20417976:	00c45703          	lhu	a4,12(s0)
2041797a:	47b2                	lw	a5,12(sp)
2041797c:	b7f77713          	andi	a4,a4,-1153
20417980:	08076713          	ori	a4,a4,128
20417984:	00e41623          	sh	a4,12(s0)
20417988:	c81c                	sw	a5,16(s0)
2041798a:	01b42a23          	sw	s11,20(s0)
2041798e:	97ce                	add	a5,a5,s3
20417990:	413d8db3          	sub	s11,s11,s3
20417994:	c01c                	sw	a5,0(s0)
20417996:	01b42423          	sw	s11,8(s0)
2041799a:	87a6                	mv	a5,s1
2041799c:	89a6                	mv	s3,s1
2041799e:	00f4f363          	bleu	a5,s1,204179a4 <__sfvwrite_r+0x1fa>
204179a2:	87a6                	mv	a5,s1
204179a4:	4008                	lw	a0,0(s0)
204179a6:	863e                	mv	a2,a5
204179a8:	85da                	mv	a1,s6
204179aa:	c63e                	sw	a5,12(sp)
204179ac:	61f010ef          	jal	ra,204197ca <memmove>
204179b0:	47b2                	lw	a5,12(sp)
204179b2:	4418                	lw	a4,8(s0)
204179b4:	8f1d                	sub	a4,a4,a5
204179b6:	c418                	sw	a4,8(s0)
204179b8:	4018                	lw	a4,0(s0)
204179ba:	97ba                	add	a5,a5,a4
204179bc:	c01c                	sw	a5,0(s0)
204179be:	008aa783          	lw	a5,8(s5)
204179c2:	9b4e                	add	s6,s6,s3
204179c4:	413484b3          	sub	s1,s1,s3
204179c8:	413789b3          	sub	s3,a5,s3
204179cc:	013aa423          	sw	s3,8(s5)
204179d0:	f20993e3          	bnez	s3,204178f6 <__sfvwrite_r+0x14c>
204179d4:	b5e5                	j	204178bc <__sfvwrite_r+0x112>
204179d6:	866e                	mv	a2,s11
204179d8:	854a                	mv	a0,s2
204179da:	76e020ef          	jal	ra,2041a148 <_realloc_r>
204179de:	87aa                	mv	a5,a0
204179e0:	f545                	bnez	a0,20417988 <__sfvwrite_r+0x1de>
204179e2:	480c                	lw	a1,16(s0)
204179e4:	854a                	mv	a0,s2
204179e6:	c1bff0ef          	jal	ra,20417600 <_free_r>
204179ea:	00c45783          	lhu	a5,12(s0)
204179ee:	f7f7f793          	andi	a5,a5,-129
204179f2:	00f41623          	sh	a5,12(s0)
204179f6:	b7a9                	j	20417940 <__sfvwrite_r+0x196>
204179f8:	4818                	lw	a4,16(s0)
204179fa:	00a76563          	bltu	a4,a0,20417a04 <__sfvwrite_r+0x25a>
204179fe:	4854                	lw	a3,20(s0)
20417a00:	02d4f863          	bleu	a3,s1,20417a30 <__sfvwrite_r+0x286>
20417a04:	89be                	mv	s3,a5
20417a06:	00f4f363          	bleu	a5,s1,20417a0c <__sfvwrite_r+0x262>
20417a0a:	89a6                	mv	s3,s1
20417a0c:	864e                	mv	a2,s3
20417a0e:	85da                	mv	a1,s6
20417a10:	5bb010ef          	jal	ra,204197ca <memmove>
20417a14:	441c                	lw	a5,8(s0)
20417a16:	4018                	lw	a4,0(s0)
20417a18:	413787b3          	sub	a5,a5,s3
20417a1c:	974e                	add	a4,a4,s3
20417a1e:	c41c                	sw	a5,8(s0)
20417a20:	c018                	sw	a4,0(s0)
20417a22:	ffd1                	bnez	a5,204179be <__sfvwrite_r+0x214>
20417a24:	85a2                	mv	a1,s0
20417a26:	854a                	mv	a0,s2
20417a28:	ff8ff0ef          	jal	ra,20417220 <_fflush_r>
20417a2c:	d949                	beqz	a0,204179be <__sfvwrite_r+0x214>
20417a2e:	bf21                	j	20417946 <__sfvwrite_r+0x19c>
20417a30:	87de                	mv	a5,s7
20417a32:	009c6363          	bltu	s8,s1,20417a38 <__sfvwrite_r+0x28e>
20417a36:	87a6                	mv	a5,s1
20417a38:	02d7c7b3          	div	a5,a5,a3
20417a3c:	5058                	lw	a4,36(s0)
20417a3e:	4c4c                	lw	a1,28(s0)
20417a40:	865a                	mv	a2,s6
20417a42:	854a                	mv	a0,s2
20417a44:	02d786b3          	mul	a3,a5,a3
20417a48:	9702                	jalr	a4
20417a4a:	89aa                	mv	s3,a0
20417a4c:	f6a049e3          	bgtz	a0,204179be <__sfvwrite_r+0x214>
20417a50:	bddd                	j	20417946 <__sfvwrite_r+0x19c>
20417a52:	000a2b03          	lw	s6,0(s4)
20417a56:	004a2983          	lw	s3,4(s4)
20417a5a:	4501                	li	a0,0
20417a5c:	0a21                	addi	s4,s4,8
20417a5e:	b34d                	j	20417800 <__sfvwrite_r+0x56>
20417a60:	00dc4b63          	blt	s8,a3,20417a76 <__sfvwrite_r+0x2cc>
20417a64:	505c                	lw	a5,36(s0)
20417a66:	4c4c                	lw	a1,28(s0)
20417a68:	865a                	mv	a2,s6
20417a6a:	854a                	mv	a0,s2
20417a6c:	9782                	jalr	a5
20417a6e:	84aa                	mv	s1,a0
20417a70:	dea040e3          	bgtz	a0,20417850 <__sfvwrite_r+0xa6>
20417a74:	bdc9                	j	20417946 <__sfvwrite_r+0x19c>
20417a76:	8662                	mv	a2,s8
20417a78:	85da                	mv	a1,s6
20417a7a:	551010ef          	jal	ra,204197ca <memmove>
20417a7e:	441c                	lw	a5,8(s0)
20417a80:	84e2                	mv	s1,s8
20417a82:	418787b3          	sub	a5,a5,s8
20417a86:	c41c                	sw	a5,8(s0)
20417a88:	401c                	lw	a5,0(s0)
20417a8a:	97e2                	add	a5,a5,s8
20417a8c:	c01c                	sw	a5,0(s0)
20417a8e:	b3c9                	j	20417850 <__sfvwrite_r+0xa6>

20417a90 <_fwalk>:
20417a90:	7179                	addi	sp,sp,-48
20417a92:	d422                	sw	s0,40(sp)
20417a94:	d04a                	sw	s2,32(sp)
20417a96:	cc52                	sw	s4,24(sp)
20417a98:	ca56                	sw	s5,20(sp)
20417a9a:	d606                	sw	ra,44(sp)
20417a9c:	d226                	sw	s1,36(sp)
20417a9e:	ce4e                	sw	s3,28(sp)
20417aa0:	2e050413          	addi	s0,a0,736
20417aa4:	4901                	li	s2,0
20417aa6:	4a05                	li	s4,1
20417aa8:	5afd                	li	s5,-1
20417aaa:	e819                	bnez	s0,20417ac0 <_fwalk+0x30>
20417aac:	50b2                	lw	ra,44(sp)
20417aae:	5422                	lw	s0,40(sp)
20417ab0:	854a                	mv	a0,s2
20417ab2:	5492                	lw	s1,36(sp)
20417ab4:	5902                	lw	s2,32(sp)
20417ab6:	49f2                	lw	s3,28(sp)
20417ab8:	4a62                	lw	s4,24(sp)
20417aba:	4ad2                	lw	s5,20(sp)
20417abc:	6145                	addi	sp,sp,48
20417abe:	8082                	ret
20417ac0:	4404                	lw	s1,8(s0)
20417ac2:	00442983          	lw	s3,4(s0)
20417ac6:	19fd                	addi	s3,s3,-1
20417ac8:	0009d463          	bgez	s3,20417ad0 <_fwalk+0x40>
20417acc:	4000                	lw	s0,0(s0)
20417ace:	bff1                	j	20417aaa <_fwalk+0x1a>
20417ad0:	00c4d783          	lhu	a5,12(s1)
20417ad4:	00fa7c63          	bleu	a5,s4,20417aec <_fwalk+0x5c>
20417ad8:	00e49783          	lh	a5,14(s1)
20417adc:	01578863          	beq	a5,s5,20417aec <_fwalk+0x5c>
20417ae0:	c62e                	sw	a1,12(sp)
20417ae2:	8526                	mv	a0,s1
20417ae4:	9582                	jalr	a1
20417ae6:	45b2                	lw	a1,12(sp)
20417ae8:	00a96933          	or	s2,s2,a0
20417aec:	06848493          	addi	s1,s1,104
20417af0:	bfd9                	j	20417ac6 <_fwalk+0x36>

20417af2 <_fwalk_reent>:
20417af2:	7179                	addi	sp,sp,-48
20417af4:	d422                	sw	s0,40(sp)
20417af6:	d04a                	sw	s2,32(sp)
20417af8:	cc52                	sw	s4,24(sp)
20417afa:	ca56                	sw	s5,20(sp)
20417afc:	c85a                	sw	s6,16(sp)
20417afe:	c65e                	sw	s7,12(sp)
20417b00:	d606                	sw	ra,44(sp)
20417b02:	d226                	sw	s1,36(sp)
20417b04:	ce4e                	sw	s3,28(sp)
20417b06:	8a2a                	mv	s4,a0
20417b08:	8aae                	mv	s5,a1
20417b0a:	2e050413          	addi	s0,a0,736
20417b0e:	4901                	li	s2,0
20417b10:	4b05                	li	s6,1
20417b12:	5bfd                	li	s7,-1
20417b14:	ec09                	bnez	s0,20417b2e <_fwalk_reent+0x3c>
20417b16:	50b2                	lw	ra,44(sp)
20417b18:	5422                	lw	s0,40(sp)
20417b1a:	854a                	mv	a0,s2
20417b1c:	5492                	lw	s1,36(sp)
20417b1e:	5902                	lw	s2,32(sp)
20417b20:	49f2                	lw	s3,28(sp)
20417b22:	4a62                	lw	s4,24(sp)
20417b24:	4ad2                	lw	s5,20(sp)
20417b26:	4b42                	lw	s6,16(sp)
20417b28:	4bb2                	lw	s7,12(sp)
20417b2a:	6145                	addi	sp,sp,48
20417b2c:	8082                	ret
20417b2e:	4404                	lw	s1,8(s0)
20417b30:	00442983          	lw	s3,4(s0)
20417b34:	19fd                	addi	s3,s3,-1
20417b36:	0009d463          	bgez	s3,20417b3e <_fwalk_reent+0x4c>
20417b3a:	4000                	lw	s0,0(s0)
20417b3c:	bfe1                	j	20417b14 <_fwalk_reent+0x22>
20417b3e:	00c4d783          	lhu	a5,12(s1)
20417b42:	00fb7b63          	bleu	a5,s6,20417b58 <_fwalk_reent+0x66>
20417b46:	00e49783          	lh	a5,14(s1)
20417b4a:	01778763          	beq	a5,s7,20417b58 <_fwalk_reent+0x66>
20417b4e:	85a6                	mv	a1,s1
20417b50:	8552                	mv	a0,s4
20417b52:	9a82                	jalr	s5
20417b54:	00a96933          	or	s2,s2,a0
20417b58:	06848493          	addi	s1,s1,104
20417b5c:	bfe1                	j	20417b34 <_fwalk_reent+0x42>

20417b5e <eclear>:
20417b5e:	01450793          	addi	a5,a0,20
20417b62:	0509                	addi	a0,a0,2
20417b64:	fe051f23          	sh	zero,-2(a0)
20417b68:	fef51de3          	bne	a0,a5,20417b62 <eclear+0x4>
20417b6c:	8082                	ret

20417b6e <emov>:
20417b6e:	01450793          	addi	a5,a0,20
20417b72:	0509                	addi	a0,a0,2
20417b74:	ffe55703          	lhu	a4,-2(a0)
20417b78:	0589                	addi	a1,a1,2
20417b7a:	fee59f23          	sh	a4,-2(a1)
20417b7e:	fea79ae3          	bne	a5,a0,20417b72 <emov+0x4>
20417b82:	8082                	ret

20417b84 <ecleaz>:
20417b84:	01a50793          	addi	a5,a0,26
20417b88:	0509                	addi	a0,a0,2
20417b8a:	fe051f23          	sh	zero,-2(a0)
20417b8e:	fef51de3          	bne	a0,a5,20417b88 <ecleaz+0x4>
20417b92:	8082                	ret

20417b94 <emovz>:
20417b94:	01850713          	addi	a4,a0,24
20417b98:	87ae                	mv	a5,a1
20417b9a:	0509                	addi	a0,a0,2
20417b9c:	ffe55683          	lhu	a3,-2(a0)
20417ba0:	0789                	addi	a5,a5,2
20417ba2:	fed79f23          	sh	a3,-2(a5)
20417ba6:	fea71ae3          	bne	a4,a0,20417b9a <emovz+0x6>
20417baa:	00059c23          	sh	zero,24(a1)
20417bae:	8082                	ret

20417bb0 <ecmpm>:
20417bb0:	00450793          	addi	a5,a0,4
20417bb4:	0591                	addi	a1,a1,4
20417bb6:	0569                	addi	a0,a0,26
20417bb8:	0789                	addi	a5,a5,2
20417bba:	0589                	addi	a1,a1,2
20417bbc:	ffe7d683          	lhu	a3,-2(a5)
20417bc0:	ffe5d703          	lhu	a4,-2(a1)
20417bc4:	00e69663          	bne	a3,a4,20417bd0 <ecmpm+0x20>
20417bc8:	fef518e3          	bne	a0,a5,20417bb8 <ecmpm+0x8>
20417bcc:	4501                	li	a0,0
20417bce:	8082                	ret
20417bd0:	4505                	li	a0,1
20417bd2:	00d76363          	bltu	a4,a3,20417bd8 <ecmpm+0x28>
20417bd6:	557d                	li	a0,-1
20417bd8:	8082                	ret

20417bda <eshdn1>:
20417bda:	00450693          	addi	a3,a0,4
20417bde:	4781                	li	a5,0
20417be0:	0569                	addi	a0,a0,26
20417be2:	7661                	lui	a2,0xffff8
20417be4:	0006d703          	lhu	a4,0(a3)
20417be8:	00177593          	andi	a1,a4,1
20417bec:	c199                	beqz	a1,20417bf2 <eshdn1+0x18>
20417bee:	0017e793          	ori	a5,a5,1
20417bf2:	0027f593          	andi	a1,a5,2
20417bf6:	8305                	srli	a4,a4,0x1
20417bf8:	e991                	bnez	a1,20417c0c <eshdn1+0x32>
20417bfa:	0786                	slli	a5,a5,0x1
20417bfc:	00e69023          	sh	a4,0(a3)
20417c00:	07c2                	slli	a5,a5,0x10
20417c02:	0689                	addi	a3,a3,2
20417c04:	83c1                	srli	a5,a5,0x10
20417c06:	fcd51fe3          	bne	a0,a3,20417be4 <eshdn1+0xa>
20417c0a:	8082                	ret
20417c0c:	8f51                	or	a4,a4,a2
20417c0e:	b7f5                	j	20417bfa <eshdn1+0x20>

20417c10 <eshup1>:
20417c10:	01650693          	addi	a3,a0,22
20417c14:	4701                	li	a4,0
20417c16:	0026d783          	lhu	a5,2(a3)
20417c1a:	01079613          	slli	a2,a5,0x10
20417c1e:	8641                	srai	a2,a2,0x10
20417c20:	00065463          	bgez	a2,20417c28 <eshup1+0x18>
20417c24:	00176713          	ori	a4,a4,1
20417c28:	0786                	slli	a5,a5,0x1
20417c2a:	07c2                	slli	a5,a5,0x10
20417c2c:	00277613          	andi	a2,a4,2
20417c30:	83c1                	srli	a5,a5,0x10
20417c32:	ea11                	bnez	a2,20417c46 <eshup1+0x36>
20417c34:	0706                	slli	a4,a4,0x1
20417c36:	00f69123          	sh	a5,2(a3)
20417c3a:	0742                	slli	a4,a4,0x10
20417c3c:	16f9                	addi	a3,a3,-2
20417c3e:	8341                	srli	a4,a4,0x10
20417c40:	fcd51be3          	bne	a0,a3,20417c16 <eshup1+0x6>
20417c44:	8082                	ret
20417c46:	0017e793          	ori	a5,a5,1
20417c4a:	b7ed                	j	20417c34 <eshup1+0x24>

20417c4c <eshdn8>:
20417c4c:	00450793          	addi	a5,a0,4
20417c50:	4701                	li	a4,0
20417c52:	0569                	addi	a0,a0,26
20417c54:	0007d683          	lhu	a3,0(a5)
20417c58:	0789                	addi	a5,a5,2
20417c5a:	0086d613          	srli	a2,a3,0x8
20417c5e:	8f51                	or	a4,a4,a2
20417c60:	fee79f23          	sh	a4,-2(a5)
20417c64:	00869713          	slli	a4,a3,0x8
20417c68:	0742                	slli	a4,a4,0x10
20417c6a:	8341                	srli	a4,a4,0x10
20417c6c:	fef514e3          	bne	a0,a5,20417c54 <eshdn8+0x8>
20417c70:	8082                	ret

20417c72 <eshup8>:
20417c72:	01650793          	addi	a5,a0,22
20417c76:	4701                	li	a4,0
20417c78:	0027d683          	lhu	a3,2(a5)
20417c7c:	17f9                	addi	a5,a5,-2
20417c7e:	00869613          	slli	a2,a3,0x8
20417c82:	8f51                	or	a4,a4,a2
20417c84:	00e79223          	sh	a4,4(a5)
20417c88:	0086d713          	srli	a4,a3,0x8
20417c8c:	fef516e3          	bne	a0,a5,20417c78 <eshup8+0x6>
20417c90:	8082                	ret

20417c92 <eshup6>:
20417c92:	00450793          	addi	a5,a0,4
20417c96:	01850713          	addi	a4,a0,24
20417c9a:	0789                	addi	a5,a5,2
20417c9c:	0007d683          	lhu	a3,0(a5)
20417ca0:	fed79f23          	sh	a3,-2(a5)
20417ca4:	fef71be3          	bne	a4,a5,20417c9a <eshup6+0x8>
20417ca8:	00051c23          	sh	zero,24(a0)
20417cac:	8082                	ret

20417cae <eshdn6>:
20417cae:	01850793          	addi	a5,a0,24
20417cb2:	01a50713          	addi	a4,a0,26
20417cb6:	00450693          	addi	a3,a0,4
20417cba:	17f9                	addi	a5,a5,-2
20417cbc:	0007d603          	lhu	a2,0(a5)
20417cc0:	1779                	addi	a4,a4,-2
20417cc2:	00c71023          	sh	a2,0(a4)
20417cc6:	fef69ae3          	bne	a3,a5,20417cba <eshdn6+0xc>
20417cca:	00051223          	sh	zero,4(a0)
20417cce:	8082                	ret

20417cd0 <eaddm>:
20417cd0:	05e1                	addi	a1,a1,24
20417cd2:	01650713          	addi	a4,a0,22
20417cd6:	4681                	li	a3,0
20417cd8:	00275783          	lhu	a5,2(a4)
20417cdc:	0005d603          	lhu	a2,0(a1)
20417ce0:	1779                	addi	a4,a4,-2
20417ce2:	15f9                	addi	a1,a1,-2
20417ce4:	97b2                	add	a5,a5,a2
20417ce6:	97b6                	add	a5,a5,a3
20417ce8:	86be                	mv	a3,a5
20417cea:	00d59123          	sh	a3,2(a1)
20417cee:	83c1                	srli	a5,a5,0x10
20417cf0:	0017f693          	andi	a3,a5,1
20417cf4:	fee512e3          	bne	a0,a4,20417cd8 <eaddm+0x8>
20417cf8:	8082                	ret

20417cfa <esubm>:
20417cfa:	05e1                	addi	a1,a1,24
20417cfc:	01650713          	addi	a4,a0,22
20417d00:	4681                	li	a3,0
20417d02:	0005d783          	lhu	a5,0(a1)
20417d06:	00275603          	lhu	a2,2(a4)
20417d0a:	1779                	addi	a4,a4,-2
20417d0c:	15f9                	addi	a1,a1,-2
20417d0e:	8f91                	sub	a5,a5,a2
20417d10:	8f95                	sub	a5,a5,a3
20417d12:	86be                	mv	a3,a5
20417d14:	00d59123          	sh	a3,2(a1)
20417d18:	83c1                	srli	a5,a5,0x10
20417d1a:	0017f693          	andi	a3,a5,1
20417d1e:	fee512e3          	bne	a0,a4,20417d02 <esubm+0x8>
20417d22:	8082                	ret

20417d24 <m16m>:
20417d24:	1101                	addi	sp,sp,-32
20417d26:	6341                	lui	t1,0x10
20417d28:	01858893          	addi	a7,a1,24
20417d2c:	00012d23          	sw	zero,26(sp)
20417d30:	0591                	addi	a1,a1,4
20417d32:	0874                	addi	a3,sp,28
20417d34:	137d                	addi	t1,t1,-1
20417d36:	0008d703          	lhu	a4,0(a7)
20417d3a:	16f9                	addi	a3,a3,-2
20417d3c:	18f9                	addi	a7,a7,-2
20417d3e:	e70d                	bnez	a4,20417d68 <m16m+0x44>
20417d40:	fe069f23          	sh	zero,-2(a3)
20417d44:	ff1599e3          	bne	a1,a7,20417d36 <m16m+0x12>
20417d48:	4791                	li	a5,4
20417d4a:	4769                	li	a4,26
20417d4c:	0048                	addi	a0,sp,4
20417d4e:	00f505b3          	add	a1,a0,a5
20417d52:	0005d583          	lhu	a1,0(a1)
20417d56:	00f606b3          	add	a3,a2,a5
20417d5a:	0789                	addi	a5,a5,2
20417d5c:	00b69023          	sh	a1,0(a3)
20417d60:	fee796e3          	bne	a5,a4,20417d4c <m16m+0x28>
20417d64:	6105                	addi	sp,sp,32
20417d66:	8082                	ret
20417d68:	02a70733          	mul	a4,a4,a0
20417d6c:	0026d803          	lhu	a6,2(a3)
20417d70:	006777b3          	and	a5,a4,t1
20417d74:	97c2                	add	a5,a5,a6
20417d76:	883e                	mv	a6,a5
20417d78:	01069123          	sh	a6,2(a3)
20417d7c:	0107d813          	srli	a6,a5,0x10
20417d80:	01075793          	srli	a5,a4,0x10
20417d84:	0006d703          	lhu	a4,0(a3)
20417d88:	97ba                	add	a5,a5,a4
20417d8a:	97c2                	add	a5,a5,a6
20417d8c:	873e                	mv	a4,a5
20417d8e:	83c1                	srli	a5,a5,0x10
20417d90:	00e69023          	sh	a4,0(a3)
20417d94:	fef69f23          	sh	a5,-2(a3)
20417d98:	b775                	j	20417d44 <m16m+0x20>

20417d9a <eisnan>:
20417d9a:	01255783          	lhu	a5,18(a0)
20417d9e:	fff7c793          	not	a5,a5
20417da2:	01179713          	slli	a4,a5,0x11
20417da6:	eb09                	bnez	a4,20417db8 <eisnan+0x1e>
20417da8:	01250793          	addi	a5,a0,18
20417dac:	0509                	addi	a0,a0,2
20417dae:	ffe55703          	lhu	a4,-2(a0)
20417db2:	e709                	bnez	a4,20417dbc <eisnan+0x22>
20417db4:	fea79ce3          	bne	a5,a0,20417dac <eisnan+0x12>
20417db8:	4501                	li	a0,0
20417dba:	8082                	ret
20417dbc:	4505                	li	a0,1
20417dbe:	8082                	ret

20417dc0 <eisneg>:
20417dc0:	1141                	addi	sp,sp,-16
20417dc2:	c422                	sw	s0,8(sp)
20417dc4:	c606                	sw	ra,12(sp)
20417dc6:	842a                	mv	s0,a0
20417dc8:	3fc9                	jal	20417d9a <eisnan>
20417dca:	e901                	bnez	a0,20417dda <eisneg+0x1a>
20417dcc:	01241503          	lh	a0,18(s0)
20417dd0:	817d                	srli	a0,a0,0x1f
20417dd2:	40b2                	lw	ra,12(sp)
20417dd4:	4422                	lw	s0,8(sp)
20417dd6:	0141                	addi	sp,sp,16
20417dd8:	8082                	ret
20417dda:	4501                	li	a0,0
20417ddc:	bfdd                	j	20417dd2 <eisneg+0x12>

20417dde <emovi>:
20417dde:	01251783          	lh	a5,18(a0)
20417de2:	1141                	addi	sp,sp,-16
20417de4:	c606                	sw	ra,12(sp)
20417de6:	c422                	sw	s0,8(sp)
20417de8:	c226                	sw	s1,4(sp)
20417dea:	c04a                	sw	s2,0(sp)
20417dec:	0407d863          	bgez	a5,20417e3c <emovi+0x5e>
20417df0:	57fd                	li	a5,-1
20417df2:	00f59023          	sh	a5,0(a1)
20417df6:	01255703          	lhu	a4,18(a0)
20417dfa:	67a1                	lui	a5,0x8
20417dfc:	17fd                	addi	a5,a5,-1
20417dfe:	8f7d                	and	a4,a4,a5
20417e00:	00e59123          	sh	a4,2(a1)
20417e04:	01050913          	addi	s2,a0,16
20417e08:	04f71763          	bne	a4,a5,20417e56 <emovi+0x78>
20417e0c:	842e                	mv	s0,a1
20417e0e:	84aa                	mv	s1,a0
20417e10:	3769                	jal	20417d9a <eisnan>
20417e12:	c905                	beqz	a0,20417e42 <emovi+0x64>
20417e14:	00640793          	addi	a5,s0,6
20417e18:	00041223          	sh	zero,4(s0)
20417e1c:	ffc48513          	addi	a0,s1,-4
20417e20:	1979                	addi	s2,s2,-2
20417e22:	00295703          	lhu	a4,2(s2)
20417e26:	0789                	addi	a5,a5,2
20417e28:	fee79f23          	sh	a4,-2(a5) # 7ffe <__stack_size+0x77fe>
20417e2c:	fea91ae3          	bne	s2,a0,20417e20 <emovi+0x42>
20417e30:	40b2                	lw	ra,12(sp)
20417e32:	4422                	lw	s0,8(sp)
20417e34:	4492                	lw	s1,4(sp)
20417e36:	4902                	lw	s2,0(sp)
20417e38:	0141                	addi	sp,sp,16
20417e3a:	8082                	ret
20417e3c:	00059023          	sh	zero,0(a1)
20417e40:	bf5d                	j	20417df6 <emovi+0x18>
20417e42:	00440793          	addi	a5,s0,4
20417e46:	01a40593          	addi	a1,s0,26
20417e4a:	0789                	addi	a5,a5,2
20417e4c:	fe079f23          	sh	zero,-2(a5)
20417e50:	feb79de3          	bne	a5,a1,20417e4a <emovi+0x6c>
20417e54:	bff1                	j	20417e30 <emovi+0x52>
20417e56:	00658793          	addi	a5,a1,6
20417e5a:	00059223          	sh	zero,4(a1)
20417e5e:	1579                	addi	a0,a0,-2
20417e60:	1979                	addi	s2,s2,-2
20417e62:	00295703          	lhu	a4,2(s2)
20417e66:	0789                	addi	a5,a5,2
20417e68:	fee79f23          	sh	a4,-2(a5)
20417e6c:	fea91ae3          	bne	s2,a0,20417e60 <emovi+0x82>
20417e70:	00059c23          	sh	zero,24(a1)
20417e74:	bf75                	j	20417e30 <emovi+0x52>

20417e76 <ecmp>:
20417e76:	715d                	addi	sp,sp,-80
20417e78:	c2a6                	sw	s1,68(sp)
20417e7a:	c0ca                	sw	s2,64(sp)
20417e7c:	c686                	sw	ra,76(sp)
20417e7e:	c4a2                	sw	s0,72(sp)
20417e80:	892a                	mv	s2,a0
20417e82:	84ae                	mv	s1,a1
20417e84:	3f19                	jal	20417d9a <eisnan>
20417e86:	e941                	bnez	a0,20417f16 <ecmp+0xa0>
20417e88:	8526                	mv	a0,s1
20417e8a:	3f01                	jal	20417d9a <eisnan>
20417e8c:	842a                	mv	s0,a0
20417e8e:	e541                	bnez	a0,20417f16 <ecmp+0xa0>
20417e90:	002c                	addi	a1,sp,8
20417e92:	854a                	mv	a0,s2
20417e94:	37a9                	jal	20417dde <emovi>
20417e96:	104c                	addi	a1,sp,36
20417e98:	8526                	mv	a0,s1
20417e9a:	3791                	jal	20417dde <emovi>
20417e9c:	00815703          	lhu	a4,8(sp)
20417ea0:	02415783          	lhu	a5,36(sp)
20417ea4:	02e78e63          	beq	a5,a4,20417ee0 <ecmp+0x6a>
20417ea8:	4789                	li	a5,2
20417eaa:	46e1                	li	a3,24
20417eac:	0028                	addi	a0,sp,8
20417eae:	00f50633          	add	a2,a0,a5
20417eb2:	00065603          	lhu	a2,0(a2) # ffff8000 <pulp__FC+0xffff8001>
20417eb6:	e20d                	bnez	a2,20417ed8 <ecmp+0x62>
20417eb8:	104c                	addi	a1,sp,36
20417eba:	00f58633          	add	a2,a1,a5
20417ebe:	00065603          	lhu	a2,0(a2)
20417ec2:	ea19                	bnez	a2,20417ed8 <ecmp+0x62>
20417ec4:	0789                	addi	a5,a5,2
20417ec6:	fed793e3          	bne	a5,a3,20417eac <ecmp+0x36>
20417eca:	8522                	mv	a0,s0
20417ecc:	40b6                	lw	ra,76(sp)
20417ece:	4426                	lw	s0,72(sp)
20417ed0:	4496                	lw	s1,68(sp)
20417ed2:	4906                	lw	s2,64(sp)
20417ed4:	6161                	addi	sp,sp,80
20417ed6:	8082                	ret
20417ed8:	4405                	li	s0,1
20417eda:	db65                	beqz	a4,20417eca <ecmp+0x54>
20417edc:	547d                	li	s0,-1
20417ede:	b7f5                	j	20417eca <ecmp+0x54>
20417ee0:	4605                	li	a2,1
20417ee2:	c391                	beqz	a5,20417ee6 <ecmp+0x70>
20417ee4:	567d                	li	a2,-1
20417ee6:	4781                	li	a5,0
20417ee8:	45e1                	li	a1,24
20417eea:	0034                	addi	a3,sp,8
20417eec:	00f68733          	add	a4,a3,a5
20417ef0:	1048                	addi	a0,sp,36
20417ef2:	00075683          	lhu	a3,0(a4)
20417ef6:	00f50733          	add	a4,a0,a5
20417efa:	00075703          	lhu	a4,0(a4)
20417efe:	00e69663          	bne	a3,a4,20417f0a <ecmp+0x94>
20417f02:	0789                	addi	a5,a5,2
20417f04:	feb793e3          	bne	a5,a1,20417eea <ecmp+0x74>
20417f08:	b7c9                	j	20417eca <ecmp+0x54>
20417f0a:	8432                	mv	s0,a2
20417f0c:	fad76fe3          	bltu	a4,a3,20417eca <ecmp+0x54>
20417f10:	40c00433          	neg	s0,a2
20417f14:	bf5d                	j	20417eca <ecmp+0x54>
20417f16:	5479                	li	s0,-2
20417f18:	bf4d                	j	20417eca <ecmp+0x54>

20417f1a <eisinf>:
20417f1a:	01255783          	lhu	a5,18(a0)
20417f1e:	fff7c793          	not	a5,a5
20417f22:	01179713          	slli	a4,a5,0x11
20417f26:	eb09                	bnez	a4,20417f38 <eisinf+0x1e>
20417f28:	1141                	addi	sp,sp,-16
20417f2a:	c606                	sw	ra,12(sp)
20417f2c:	35bd                	jal	20417d9a <eisnan>
20417f2e:	40b2                	lw	ra,12(sp)
20417f30:	00153513          	seqz	a0,a0
20417f34:	0141                	addi	sp,sp,16
20417f36:	8082                	ret
20417f38:	4501                	li	a0,0
20417f3a:	8082                	ret

20417f3c <einfin.isra.2>:
20417f3c:	01250793          	addi	a5,a0,18
20417f40:	0509                	addi	a0,a0,2
20417f42:	fe051f23          	sh	zero,-2(a0)
20417f46:	fef51de3          	bne	a0,a5,20417f40 <einfin.isra.2+0x4>
20417f4a:	00055783          	lhu	a5,0(a0)
20417f4e:	6721                	lui	a4,0x8
20417f50:	177d                	addi	a4,a4,-1
20417f52:	8fd9                	or	a5,a5,a4
20417f54:	00f51023          	sh	a5,0(a0)
20417f58:	8082                	ret

20417f5a <eshift.part.3>:
20417f5a:	1101                	addi	sp,sp,-32
20417f5c:	ca26                	sw	s1,20(sp)
20417f5e:	c64e                	sw	s3,12(sp)
20417f60:	ce06                	sw	ra,28(sp)
20417f62:	cc22                	sw	s0,24(sp)
20417f64:	c84a                	sw	s2,16(sp)
20417f66:	c452                	sw	s4,8(sp)
20417f68:	c256                	sw	s5,4(sp)
20417f6a:	89aa                	mv	s3,a0
20417f6c:	84ae                	mv	s1,a1
20417f6e:	0a05d863          	bgez	a1,2041801e <eshift.part.3+0xc4>
20417f72:	40b00933          	neg	s2,a1
20417f76:	8a4a                	mv	s4,s2
20417f78:	4401                	li	s0,0
20417f7a:	4abd                	li	s5,15
20417f7c:	034acb63          	blt	s5,s4,20417fb2 <eshift.part.3+0x58>
20417f80:	00495913          	srli	s2,s2,0x4
20417f84:	55c1                	li	a1,-16
20417f86:	02b905b3          	mul	a1,s2,a1
20417f8a:	4a1d                	li	s4,7
20417f8c:	409584b3          	sub	s1,a1,s1
20417f90:	8926                	mv	s2,s1
20417f92:	032a4763          	blt	s4,s2,20417fc0 <eshift.part.3+0x66>
20417f96:	0034d593          	srli	a1,s1,0x3
20417f9a:	57e1                	li	a5,-8
20417f9c:	02f585b3          	mul	a1,a1,a5
20417fa0:	94ae                	add	s1,s1,a1
20417fa2:	e495                	bnez	s1,20417fce <eshift.part.3+0x74>
20417fa4:	00803533          	snez	a0,s0
20417fa8:	842a                	mv	s0,a0
20417faa:	01041513          	slli	a0,s0,0x10
20417fae:	8141                	srli	a0,a0,0x10
20417fb0:	a8b1                	j	2041800c <eshift.part.3+0xb2>
20417fb2:	0189d783          	lhu	a5,24(s3)
20417fb6:	854e                	mv	a0,s3
20417fb8:	1a41                	addi	s4,s4,-16
20417fba:	8c5d                	or	s0,s0,a5
20417fbc:	39cd                	jal	20417cae <eshdn6>
20417fbe:	bf7d                	j	20417f7c <eshift.part.3+0x22>
20417fc0:	0189c783          	lbu	a5,24(s3)
20417fc4:	854e                	mv	a0,s3
20417fc6:	1961                	addi	s2,s2,-8
20417fc8:	8c5d                	or	s0,s0,a5
20417fca:	3149                	jal	20417c4c <eshdn8>
20417fcc:	b7d9                	j	20417f92 <eshift.part.3+0x38>
20417fce:	0189d783          	lhu	a5,24(s3)
20417fd2:	854e                	mv	a0,s3
20417fd4:	14fd                	addi	s1,s1,-1
20417fd6:	8b85                	andi	a5,a5,1
20417fd8:	8c5d                	or	s0,s0,a5
20417fda:	3101                	jal	20417bda <eshdn1>
20417fdc:	b7d9                	j	20417fa2 <eshift.part.3+0x48>
20417fde:	854e                	mv	a0,s3
20417fe0:	394d                	jal	20417c92 <eshup6>
20417fe2:	1441                	addi	s0,s0,-16
20417fe4:	fe894de3          	blt	s2,s0,20417fde <eshift.part.3+0x84>
20417fe8:	0044d593          	srli	a1,s1,0x4
20417fec:	57c1                	li	a5,-16
20417fee:	02f585b3          	mul	a1,a1,a5
20417ff2:	491d                	li	s2,7
20417ff4:	94ae                	add	s1,s1,a1
20417ff6:	8426                	mv	s0,s1
20417ff8:	02894663          	blt	s2,s0,20418024 <eshift.part.3+0xca>
20417ffc:	0034d593          	srli	a1,s1,0x3
20418000:	57e1                	li	a5,-8
20418002:	02f585b3          	mul	a1,a1,a5
20418006:	94ae                	add	s1,s1,a1
20418008:	e095                	bnez	s1,2041802c <eshift.part.3+0xd2>
2041800a:	4501                	li	a0,0
2041800c:	40f2                	lw	ra,28(sp)
2041800e:	4462                	lw	s0,24(sp)
20418010:	44d2                	lw	s1,20(sp)
20418012:	4942                	lw	s2,16(sp)
20418014:	49b2                	lw	s3,12(sp)
20418016:	4a22                	lw	s4,8(sp)
20418018:	4a92                	lw	s5,4(sp)
2041801a:	6105                	addi	sp,sp,32
2041801c:	8082                	ret
2041801e:	842e                	mv	s0,a1
20418020:	493d                	li	s2,15
20418022:	b7c9                	j	20417fe4 <eshift.part.3+0x8a>
20418024:	854e                	mv	a0,s3
20418026:	31b1                	jal	20417c72 <eshup8>
20418028:	1461                	addi	s0,s0,-8
2041802a:	b7f9                	j	20417ff8 <eshift.part.3+0x9e>
2041802c:	854e                	mv	a0,s3
2041802e:	36cd                	jal	20417c10 <eshup1>
20418030:	14fd                	addi	s1,s1,-1
20418032:	bfd9                	j	20418008 <eshift.part.3+0xae>

20418034 <enormlz>:
20418034:	00455783          	lhu	a5,4(a0)
20418038:	1141                	addi	sp,sp,-16
2041803a:	c226                	sw	s1,4(sp)
2041803c:	c606                	sw	ra,12(sp)
2041803e:	c422                	sw	s0,8(sp)
20418040:	c04a                	sw	s2,0(sp)
20418042:	84aa                	mv	s1,a0
20418044:	efa1                	bnez	a5,2041809c <enormlz+0x68>
20418046:	00651783          	lh	a5,6(a0)
2041804a:	4401                	li	s0,0
2041804c:	0a000913          	li	s2,160
20418050:	0007de63          	bgez	a5,2041806c <enormlz+0x38>
20418054:	8522                	mv	a0,s0
20418056:	40b2                	lw	ra,12(sp)
20418058:	4422                	lw	s0,8(sp)
2041805a:	4492                	lw	s1,4(sp)
2041805c:	4902                	lw	s2,0(sp)
2041805e:	0141                	addi	sp,sp,16
20418060:	8082                	ret
20418062:	8526                	mv	a0,s1
20418064:	0441                	addi	s0,s0,16
20418066:	3135                	jal	20417c92 <eshup6>
20418068:	ff2406e3          	beq	s0,s2,20418054 <enormlz+0x20>
2041806c:	0064d783          	lhu	a5,6(s1)
20418070:	dbed                	beqz	a5,20418062 <enormlz+0x2e>
20418072:	0064d783          	lhu	a5,6(s1)
20418076:	f007f793          	andi	a5,a5,-256
2041807a:	cf89                	beqz	a5,20418094 <enormlz+0x60>
2041807c:	0a000913          	li	s2,160
20418080:	00649783          	lh	a5,6(s1)
20418084:	fc07c8e3          	bltz	a5,20418054 <enormlz+0x20>
20418088:	8526                	mv	a0,s1
2041808a:	0405                	addi	s0,s0,1
2041808c:	3651                	jal	20417c10 <eshup1>
2041808e:	fe8959e3          	ble	s0,s2,20418080 <enormlz+0x4c>
20418092:	b7c9                	j	20418054 <enormlz+0x20>
20418094:	8526                	mv	a0,s1
20418096:	3ef1                	jal	20417c72 <eshup8>
20418098:	0421                	addi	s0,s0,8
2041809a:	bfe1                	j	20418072 <enormlz+0x3e>
2041809c:	f007f793          	andi	a5,a5,-256
204180a0:	4401                	li	s0,0
204180a2:	c399                	beqz	a5,204180a8 <enormlz+0x74>
204180a4:	3665                	jal	20417c4c <eshdn8>
204180a6:	5461                	li	s0,-8
204180a8:	f7000913          	li	s2,-144
204180ac:	a031                	j	204180b8 <enormlz+0x84>
204180ae:	8526                	mv	a0,s1
204180b0:	147d                	addi	s0,s0,-1
204180b2:	3625                	jal	20417bda <eshdn1>
204180b4:	fb2440e3          	blt	s0,s2,20418054 <enormlz+0x20>
204180b8:	0044d783          	lhu	a5,4(s1)
204180bc:	fbed                	bnez	a5,204180ae <enormlz+0x7a>
204180be:	bf59                	j	20418054 <enormlz+0x20>

204180c0 <enan.constprop.12>:
204180c0:	01050793          	addi	a5,a0,16
204180c4:	0509                	addi	a0,a0,2
204180c6:	fe051f23          	sh	zero,-2(a0)
204180ca:	fef51de3          	bne	a0,a5,204180c4 <enan.constprop.12+0x4>
204180ce:	7fffc7b7          	lui	a5,0x7fffc
204180d2:	c11c                	sw	a5,0(a0)
204180d4:	8082                	ret

204180d6 <emovo.isra.6>:
204180d6:	872a                	mv	a4,a0
204180d8:	00075683          	lhu	a3,0(a4) # 8000 <__stack_size+0x7800>
204180dc:	852e                	mv	a0,a1
204180de:	00275783          	lhu	a5,2(a4)
204180e2:	c299                	beqz	a3,204180e8 <emovo.isra.6+0x12>
204180e4:	76e1                	lui	a3,0xffff8
204180e6:	8fd5                	or	a5,a5,a3
204180e8:	00f51923          	sh	a5,18(a0)
204180ec:	00275603          	lhu	a2,2(a4)
204180f0:	66a1                	lui	a3,0x8
204180f2:	16fd                	addi	a3,a3,-1
204180f4:	00670793          	addi	a5,a4,6
204180f8:	00d61a63          	bne	a2,a3,2041810c <emovo.isra.6+0x36>
204180fc:	0769                	addi	a4,a4,26
204180fe:	0007d683          	lhu	a3,0(a5) # 7fffc000 <__fini_array_end+0x5fbd9d14>
20418102:	e285                	bnez	a3,20418122 <emovo.isra.6+0x4c>
20418104:	0789                	addi	a5,a5,2
20418106:	fee79ce3          	bne	a5,a4,204180fe <emovo.isra.6+0x28>
2041810a:	bd0d                	j	20417f3c <einfin.isra.2>
2041810c:	0541                	addi	a0,a0,16
2041810e:	0761                	addi	a4,a4,24
20418110:	0789                	addi	a5,a5,2
20418112:	ffe7d683          	lhu	a3,-2(a5)
20418116:	1579                	addi	a0,a0,-2
20418118:	00d51123          	sh	a3,2(a0)
2041811c:	fee79ae3          	bne	a5,a4,20418110 <emovo.isra.6+0x3a>
20418120:	8082                	ret
20418122:	bf79                	j	204180c0 <enan.constprop.12>

20418124 <e113toe.isra.8>:
20418124:	7179                	addi	sp,sp,-48
20418126:	d226                	sw	s1,36(sp)
20418128:	84aa                	mv	s1,a0
2041812a:	0048                	addi	a0,sp,4
2041812c:	d422                	sw	s0,40(sp)
2041812e:	d606                	sw	ra,44(sp)
20418130:	842e                	mv	s0,a1
20418132:	3c89                	jal	20417b84 <ecleaz>
20418134:	00e4d703          	lhu	a4,14(s1)
20418138:	01071793          	slli	a5,a4,0x10
2041813c:	87c1                	srai	a5,a5,0x10
2041813e:	0207c663          	bltz	a5,2041816a <e113toe.isra.8+0x46>
20418142:	00011223          	sh	zero,4(sp)
20418146:	66a1                	lui	a3,0x8
20418148:	16fd                	addi	a3,a3,-1
2041814a:	8f75                	and	a4,a4,a3
2041814c:	00e48793          	addi	a5,s1,14
20418150:	04d71663          	bne	a4,a3,2041819c <e113toe.isra.8+0x78>
20418154:	8726                	mv	a4,s1
20418156:	00075683          	lhu	a3,0(a4)
2041815a:	ce81                	beqz	a3,20418172 <e113toe.isra.8+0x4e>
2041815c:	8522                	mv	a0,s0
2041815e:	378d                	jal	204180c0 <enan.constprop.12>
20418160:	50b2                	lw	ra,44(sp)
20418162:	5422                	lw	s0,40(sp)
20418164:	5492                	lw	s1,36(sp)
20418166:	6145                	addi	sp,sp,48
20418168:	8082                	ret
2041816a:	57fd                	li	a5,-1
2041816c:	00f11223          	sh	a5,4(sp)
20418170:	bfd9                	j	20418146 <e113toe.isra.8+0x22>
20418172:	0709                	addi	a4,a4,2
20418174:	fee791e3          	bne	a5,a4,20418156 <e113toe.isra.8+0x32>
20418178:	8522                	mv	a0,s0
2041817a:	32d5                	jal	20417b5e <eclear>
2041817c:	8522                	mv	a0,s0
2041817e:	3b7d                	jal	20417f3c <einfin.isra.2>
20418180:	00e49783          	lh	a5,14(s1)
20418184:	fc07dee3          	bgez	a5,20418160 <e113toe.isra.8+0x3c>
20418188:	8522                	mv	a0,s0
2041818a:	3901                	jal	20417d9a <eisnan>
2041818c:	f971                	bnez	a0,20418160 <e113toe.isra.8+0x3c>
2041818e:	01245783          	lhu	a5,18(s0)
20418192:	7761                	lui	a4,0xffff8
20418194:	8fb9                	xor	a5,a5,a4
20418196:	00f41923          	sh	a5,18(s0)
2041819a:	b7d9                	j	20418160 <e113toe.isra.8+0x3c>
2041819c:	00e11323          	sh	a4,6(sp)
204181a0:	0054                	addi	a3,sp,4
204181a2:	17f9                	addi	a5,a5,-2
204181a4:	0007d603          	lhu	a2,0(a5)
204181a8:	0689                	addi	a3,a3,2
204181aa:	00c69223          	sh	a2,4(a3) # 8004 <__stack_size+0x7804>
204181ae:	fef49ae3          	bne	s1,a5,204181a2 <e113toe.isra.8+0x7e>
204181b2:	e719                	bnez	a4,204181c0 <e113toe.isra.8+0x9c>
204181b4:	00011423          	sh	zero,8(sp)
204181b8:	85a2                	mv	a1,s0
204181ba:	0048                	addi	a0,sp,4
204181bc:	3f29                	jal	204180d6 <emovo.isra.6>
204181be:	b74d                	j	20418160 <e113toe.isra.8+0x3c>
204181c0:	4785                	li	a5,1
204181c2:	55fd                	li	a1,-1
204181c4:	0048                	addi	a0,sp,4
204181c6:	00f11423          	sh	a5,8(sp)
204181ca:	3b41                	jal	20417f5a <eshift.part.3>
204181cc:	b7f5                	j	204181b8 <e113toe.isra.8+0x94>

204181ce <emdnorm>:
204181ce:	1101                	addi	sp,sp,-32
204181d0:	cc22                	sw	s0,24(sp)
204181d2:	ca26                	sw	s1,20(sp)
204181d4:	c84a                	sw	s2,16(sp)
204181d6:	c64e                	sw	s3,12(sp)
204181d8:	c452                	sw	s4,8(sp)
204181da:	c256                	sw	s5,4(sp)
204181dc:	8936                	mv	s2,a3
204181de:	843e                	mv	s0,a5
204181e0:	ce06                	sw	ra,28(sp)
204181e2:	84aa                	mv	s1,a0
204181e4:	89ae                	mv	s3,a1
204181e6:	8a32                	mv	s4,a2
204181e8:	8aba                	mv	s5,a4
204181ea:	35a9                	jal	20418034 <enormlz>
204181ec:	09000793          	li	a5,144
204181f0:	40a90933          	sub	s2,s2,a0
204181f4:	02a7d763          	ble	a0,a5,20418222 <emdnorm+0x54>
204181f8:	67a1                	lui	a5,0x8
204181fa:	17f9                	addi	a5,a5,-2
204181fc:	2127c163          	blt	a5,s2,204183fe <emdnorm+0x230>
20418200:	00248793          	addi	a5,s1,2
20418204:	04e9                	addi	s1,s1,26
20418206:	0789                	addi	a5,a5,2
20418208:	fe079f23          	sh	zero,-2(a5) # 7ffe <__stack_size+0x77fe>
2041820c:	fe979de3          	bne	a5,s1,20418206 <emdnorm+0x38>
20418210:	40f2                	lw	ra,28(sp)
20418212:	4462                	lw	s0,24(sp)
20418214:	44d2                	lw	s1,20(sp)
20418216:	4942                	lw	s2,16(sp)
20418218:	49b2                	lw	s3,12(sp)
2041821a:	4a22                	lw	s4,8(sp)
2041821c:	4a92                	lw	s5,4(sp)
2041821e:	6105                	addi	sp,sp,32
20418220:	8082                	ret
20418222:	00095b63          	bgez	s2,20418238 <emdnorm+0x6a>
20418226:	f7000793          	li	a5,-144
2041822a:	0ef94363          	blt	s2,a5,20418310 <emdnorm+0x142>
2041822e:	85ca                	mv	a1,s2
20418230:	8526                	mv	a0,s1
20418232:	3325                	jal	20417f5a <eshift.part.3>
20418234:	0e051763          	bnez	a0,20418322 <emdnorm+0x154>
20418238:	180a8763          	beqz	s5,204183c6 <emdnorm+0x1f8>
2041823c:	4058                	lw	a4,4(s0)
2041823e:	401c                	lw	a5,0(s0)
20418240:	04f70763          	beq	a4,a5,2041828e <emdnorm+0xc0>
20418244:	01a40513          	addi	a0,s0,26
20418248:	3a35                	jal	20417b84 <ecleaz>
2041824a:	405c                	lw	a5,4(s0)
2041824c:	03800713          	li	a4,56
20418250:	10e78963          	beq	a5,a4,20418362 <emdnorm+0x194>
20418254:	0cf74963          	blt	a4,a5,20418326 <emdnorm+0x158>
20418258:	4761                	li	a4,24
2041825a:	12e78963          	beq	a5,a4,2041838c <emdnorm+0x1be>
2041825e:	03500713          	li	a4,53
20418262:	10e78a63          	beq	a5,a4,20418376 <emdnorm+0x1a8>
20418266:	4731                	li	a4,12
20418268:	c418                	sw	a4,8(s0)
2041826a:	80010737          	lui	a4,0x80010
2041826e:	177d                	addi	a4,a4,-1
20418270:	c858                	sw	a4,20(s0)
20418272:	4705                	li	a4,1
20418274:	00e41c23          	sh	a4,24(s0)
20418278:	472d                	li	a4,11
2041827a:	c458                	sw	a4,12(s0)
2041827c:	4458                	lw	a4,12(s0)
2041827e:	01845683          	lhu	a3,24(s0)
20418282:	0721                	addi	a4,a4,8
20418284:	0706                	slli	a4,a4,0x1
20418286:	9722                	add	a4,a4,s0
20418288:	00d71523          	sh	a3,10(a4) # 8001000a <pulp__FC+0x8001000b>
2041828c:	c01c                	sw	a5,0(s0)
2041828e:	01204e63          	bgtz	s2,204182aa <emdnorm+0xdc>
20418292:	4058                	lw	a4,4(s0)
20418294:	09000793          	li	a5,144
20418298:	00f70963          	beq	a4,a5,204182aa <emdnorm+0xdc>
2041829c:	0184d783          	lhu	a5,24(s1)
204182a0:	8526                	mv	a0,s1
204182a2:	8b85                	andi	a5,a5,1
204182a4:	00f9e9b3          	or	s3,s3,a5
204182a8:	3a0d                	jal	20417bda <eshdn1>
204182aa:	4414                	lw	a3,8(s0)
204182ac:	01445603          	lhu	a2,20(s0)
204182b0:	404c                	lw	a1,4(s0)
204182b2:	00169713          	slli	a4,a3,0x1
204182b6:	9726                	add	a4,a4,s1
204182b8:	00075783          	lhu	a5,0(a4)
204182bc:	8ff1                	and	a5,a5,a2
204182be:	08f00613          	li	a2,143
204182c2:	00b64763          	blt	a2,a1,204182d0 <emdnorm+0x102>
204182c6:	0685                	addi	a3,a3,1
204182c8:	863a                	mv	a2,a4
204182ca:	45b1                	li	a1,12
204182cc:	0cd5d263          	ble	a3,a1,20418390 <emdnorm+0x1c2>
204182d0:	01445683          	lhu	a3,20(s0)
204182d4:	00075603          	lhu	a2,0(a4)
204182d8:	fff6c693          	not	a3,a3
204182dc:	8ef1                	and	a3,a3,a2
204182de:	00d71023          	sh	a3,0(a4)
204182e2:	01645703          	lhu	a4,22(s0)
204182e6:	00f776b3          	and	a3,a4,a5
204182ea:	cedd                	beqz	a3,204183a8 <emdnorm+0x1da>
204182ec:	00f71d63          	bne	a4,a5,20418306 <emdnorm+0x138>
204182f0:	0a099a63          	bnez	s3,204183a4 <emdnorm+0x1d6>
204182f4:	445c                	lw	a5,12(s0)
204182f6:	01845703          	lhu	a4,24(s0)
204182fa:	0786                	slli	a5,a5,0x1
204182fc:	97a6                	add	a5,a5,s1
204182fe:	0007d783          	lhu	a5,0(a5)
20418302:	8ff9                	and	a5,a5,a4
20418304:	c3d5                	beqz	a5,204183a8 <emdnorm+0x1da>
20418306:	85a6                	mv	a1,s1
20418308:	01a40513          	addi	a0,s0,26
2041830c:	32d1                	jal	20417cd0 <eaddm>
2041830e:	a869                	j	204183a8 <emdnorm+0x1da>
20418310:	00248793          	addi	a5,s1,2
20418314:	04e9                	addi	s1,s1,26
20418316:	0789                	addi	a5,a5,2
20418318:	fe079f23          	sh	zero,-2(a5)
2041831c:	fe979de3          	bne	a5,s1,20418316 <emdnorm+0x148>
20418320:	bdc5                	j	20418210 <emdnorm+0x42>
20418322:	4985                	li	s3,1
20418324:	bf11                	j	20418238 <emdnorm+0x6a>
20418326:	04000713          	li	a4,64
2041832a:	02e78163          	beq	a5,a4,2041834c <emdnorm+0x17e>
2041832e:	07100713          	li	a4,113
20418332:	f2e79ae3          	bne	a5,a4,20418266 <emdnorm+0x98>
20418336:	40008737          	lui	a4,0x40008
2041833a:	177d                	addi	a4,a4,-1
2041833c:	46a9                	li	a3,10
2041833e:	c858                	sw	a4,20(s0)
20418340:	c414                	sw	a3,8(s0)
20418342:	7761                	lui	a4,0xffff8
20418344:	00e41c23          	sh	a4,24(s0)
20418348:	c454                	sw	a3,12(s0)
2041834a:	bf0d                	j	2041827c <emdnorm+0xae>
2041834c:	471d                	li	a4,7
2041834e:	c418                	sw	a4,8(s0)
20418350:	80010737          	lui	a4,0x80010
20418354:	177d                	addi	a4,a4,-1
20418356:	c858                	sw	a4,20(s0)
20418358:	4705                	li	a4,1
2041835a:	00e41c23          	sh	a4,24(s0)
2041835e:	4719                	li	a4,6
20418360:	bf29                	j	2041827a <emdnorm+0xac>
20418362:	4699                	li	a3,6
20418364:	00800737          	lui	a4,0x800
20418368:	0ff70713          	addi	a4,a4,255 # 8000ff <__stack_size+0x7ff8ff>
2041836c:	c858                	sw	a4,20(s0)
2041836e:	c414                	sw	a3,8(s0)
20418370:	10000713          	li	a4,256
20418374:	bfc1                	j	20418344 <emdnorm+0x176>
20418376:	04000737          	lui	a4,0x4000
2041837a:	7ff70713          	addi	a4,a4,2047 # 40007ff <__stack_size+0x3ffffff>
2041837e:	4699                	li	a3,6
20418380:	c858                	sw	a4,20(s0)
20418382:	6705                	lui	a4,0x1
20418384:	c414                	sw	a3,8(s0)
20418386:	80070713          	addi	a4,a4,-2048 # 800 <__stack_size>
2041838a:	bf6d                	j	20418344 <emdnorm+0x176>
2041838c:	4691                	li	a3,4
2041838e:	bfd9                	j	20418364 <emdnorm+0x196>
20418390:	00265503          	lhu	a0,2(a2)
20418394:	c119                	beqz	a0,2041839a <emdnorm+0x1cc>
20418396:	0017e793          	ori	a5,a5,1
2041839a:	00061123          	sh	zero,2(a2)
2041839e:	0685                	addi	a3,a3,1
204183a0:	0609                	addi	a2,a2,2
204183a2:	b72d                	j	204182cc <emdnorm+0xfe>
204183a4:	f60a01e3          	beqz	s4,20418306 <emdnorm+0x138>
204183a8:	01204963          	bgtz	s2,204183ba <emdnorm+0x1ec>
204183ac:	4058                	lw	a4,4(s0)
204183ae:	09000793          	li	a5,144
204183b2:	00f70463          	beq	a4,a5,204183ba <emdnorm+0x1ec>
204183b6:	8526                	mv	a0,s1
204183b8:	38a1                	jal	20417c10 <eshup1>
204183ba:	0044d783          	lhu	a5,4(s1)
204183be:	c781                	beqz	a5,204183c6 <emdnorm+0x1f8>
204183c0:	8526                	mv	a0,s1
204183c2:	3821                	jal	20417bda <eshdn1>
204183c4:	0905                	addi	s2,s2,1
204183c6:	67a1                	lui	a5,0x8
204183c8:	00049c23          	sh	zero,24(s1)
204183cc:	17f9                	addi	a5,a5,-2
204183ce:	0327d063          	ble	s2,a5,204183ee <emdnorm+0x220>
204183d2:	77e1                	lui	a5,0xffff8
204183d4:	fff7c793          	not	a5,a5
204183d8:	00f49123          	sh	a5,2(s1)
204183dc:	00448793          	addi	a5,s1,4
204183e0:	04e1                	addi	s1,s1,24
204183e2:	00079023          	sh	zero,0(a5) # ffff8000 <pulp__FC+0xffff8001>
204183e6:	0789                	addi	a5,a5,2
204183e8:	fef49de3          	bne	s1,a5,204183e2 <emdnorm+0x214>
204183ec:	b515                	j	20418210 <emdnorm+0x42>
204183ee:	00095563          	bgez	s2,204183f8 <emdnorm+0x22a>
204183f2:	00049123          	sh	zero,2(s1)
204183f6:	bd29                	j	20418210 <emdnorm+0x42>
204183f8:	01249123          	sh	s2,2(s1)
204183fc:	bd11                	j	20418210 <emdnorm+0x42>
204183fe:	e20a9fe3          	bnez	s5,2041823c <emdnorm+0x6e>
20418402:	00049c23          	sh	zero,24(s1)
20418406:	b7f1                	j	204183d2 <emdnorm+0x204>

20418408 <eiremain>:
20418408:	1101                	addi	sp,sp,-32
2041840a:	c452                	sw	s4,8(sp)
2041840c:	00255a03          	lhu	s4,2(a0)
20418410:	cc22                	sw	s0,24(sp)
20418412:	842e                	mv	s0,a1
20418414:	ce06                	sw	ra,28(sp)
20418416:	ca26                	sw	s1,20(sp)
20418418:	c84a                	sw	s2,16(sp)
2041841a:	c256                	sw	s5,4(sp)
2041841c:	c05a                	sw	s6,0(sp)
2041841e:	8932                	mv	s2,a2
20418420:	03460b13          	addi	s6,a2,52
20418424:	c64e                	sw	s3,12(sp)
20418426:	8aaa                	mv	s5,a0
20418428:	3131                	jal	20418034 <enormlz>
2041842a:	00245483          	lhu	s1,2(s0)
2041842e:	40aa0a33          	sub	s4,s4,a0
20418432:	8522                	mv	a0,s0
20418434:	3101                	jal	20418034 <enormlz>
20418436:	8c89                	sub	s1,s1,a0
20418438:	855a                	mv	a0,s6
2041843a:	f4aff0ef          	jal	ra,20417b84 <ecleaz>
2041843e:	0344d263          	ble	s4,s1,20418462 <eiremain+0x5a>
20418442:	8522                	mv	a0,s0
20418444:	4462                	lw	s0,24(sp)
20418446:	40f2                	lw	ra,28(sp)
20418448:	49b2                	lw	s3,12(sp)
2041844a:	4a22                	lw	s4,8(sp)
2041844c:	4a92                	lw	s5,4(sp)
2041844e:	4b02                	lw	s6,0(sp)
20418450:	87ca                	mv	a5,s2
20418452:	86a6                	mv	a3,s1
20418454:	4942                	lw	s2,16(sp)
20418456:	44d2                	lw	s1,20(sp)
20418458:	4701                	li	a4,0
2041845a:	4601                	li	a2,0
2041845c:	4581                	li	a1,0
2041845e:	6105                	addi	sp,sp,32
20418460:	b3bd                	j	204181ce <emdnorm>
20418462:	85a2                	mv	a1,s0
20418464:	8556                	mv	a0,s5
20418466:	f4aff0ef          	jal	ra,20417bb0 <ecmpm>
2041846a:	4981                	li	s3,0
2041846c:	00a04663          	bgtz	a0,20418478 <eiremain+0x70>
20418470:	85a2                	mv	a1,s0
20418472:	8556                	mv	a0,s5
20418474:	3059                	jal	20417cfa <esubm>
20418476:	4985                	li	s3,1
20418478:	855a                	mv	a0,s6
2041847a:	f96ff0ef          	jal	ra,20417c10 <eshup1>
2041847e:	04c95783          	lhu	a5,76(s2)
20418482:	8522                	mv	a0,s0
20418484:	14fd                	addi	s1,s1,-1
20418486:	00f9e9b3          	or	s3,s3,a5
2041848a:	05391623          	sh	s3,76(s2)
2041848e:	f82ff0ef          	jal	ra,20417c10 <eshup1>
20418492:	b775                	j	2041843e <eiremain+0x36>

20418494 <emul>:
20418494:	7175                	addi	sp,sp,-144
20418496:	c522                	sw	s0,136(sp)
20418498:	c326                	sw	s1,132(sp)
2041849a:	c14a                	sw	s2,128(sp)
2041849c:	dece                	sw	s3,124(sp)
2041849e:	c706                	sw	ra,140(sp)
204184a0:	dcd2                	sw	s4,120(sp)
204184a2:	dad6                	sw	s5,116(sp)
204184a4:	d8da                	sw	s6,112(sp)
204184a6:	d6de                	sw	s7,108(sp)
204184a8:	d4e2                	sw	s8,104(sp)
204184aa:	d2e6                	sw	s9,100(sp)
204184ac:	84aa                	mv	s1,a0
204184ae:	842e                	mv	s0,a1
204184b0:	8932                	mv	s2,a2
204184b2:	89b6                	mv	s3,a3
204184b4:	30dd                	jal	20417d9a <eisnan>
204184b6:	c115                	beqz	a0,204184da <emul+0x46>
204184b8:	85ca                	mv	a1,s2
204184ba:	8526                	mv	a0,s1
204184bc:	eb2ff0ef          	jal	ra,20417b6e <emov>
204184c0:	40ba                	lw	ra,140(sp)
204184c2:	442a                	lw	s0,136(sp)
204184c4:	449a                	lw	s1,132(sp)
204184c6:	490a                	lw	s2,128(sp)
204184c8:	59f6                	lw	s3,124(sp)
204184ca:	5a66                	lw	s4,120(sp)
204184cc:	5ad6                	lw	s5,116(sp)
204184ce:	5b46                	lw	s6,112(sp)
204184d0:	5bb6                	lw	s7,108(sp)
204184d2:	5c26                	lw	s8,104(sp)
204184d4:	5c96                	lw	s9,100(sp)
204184d6:	6149                	addi	sp,sp,144
204184d8:	8082                	ret
204184da:	8522                	mv	a0,s0
204184dc:	387d                	jal	20417d9a <eisnan>
204184de:	c501                	beqz	a0,204184e6 <emul+0x52>
204184e0:	85ca                	mv	a1,s2
204184e2:	8522                	mv	a0,s0
204184e4:	bfe1                	j	204184bc <emul+0x28>
204184e6:	8526                	mv	a0,s1
204184e8:	3c0d                	jal	20417f1a <eisinf>
204184ea:	ed15                	bnez	a0,20418526 <emul+0x92>
204184ec:	8522                	mv	a0,s0
204184ee:	3435                	jal	20417f1a <eisinf>
204184f0:	c901                	beqz	a0,20418500 <emul+0x6c>
204184f2:	204225b7          	lui	a1,0x20422
204184f6:	b8858593          	addi	a1,a1,-1144 # 20421b88 <ezero>
204184fa:	8526                	mv	a0,s1
204184fc:	3aad                	jal	20417e76 <ecmp>
204184fe:	c91d                	beqz	a0,20418534 <emul+0xa0>
20418500:	8526                	mv	a0,s1
20418502:	3c21                	jal	20417f1a <eisinf>
20418504:	e501                	bnez	a0,2041850c <emul+0x78>
20418506:	8522                	mv	a0,s0
20418508:	3c09                	jal	20417f1a <eisinf>
2041850a:	c91d                	beqz	a0,20418540 <emul+0xac>
2041850c:	8526                	mv	a0,s1
2041850e:	384d                	jal	20417dc0 <eisneg>
20418510:	84aa                	mv	s1,a0
20418512:	8522                	mv	a0,s0
20418514:	3075                	jal	20417dc0 <eisneg>
20418516:	02a48263          	beq	s1,a0,2041853a <emul+0xa6>
2041851a:	77e1                	lui	a5,0xffff8
2041851c:	00f91923          	sh	a5,18(s2)
20418520:	854a                	mv	a0,s2
20418522:	3c29                	jal	20417f3c <einfin.isra.2>
20418524:	bf71                	j	204184c0 <emul+0x2c>
20418526:	204225b7          	lui	a1,0x20422
2041852a:	b8858593          	addi	a1,a1,-1144 # 20421b88 <ezero>
2041852e:	8522                	mv	a0,s0
20418530:	3299                	jal	20417e76 <ecmp>
20418532:	fd4d                	bnez	a0,204184ec <emul+0x58>
20418534:	854a                	mv	a0,s2
20418536:	3669                	jal	204180c0 <enan.constprop.12>
20418538:	b761                	j	204184c0 <emul+0x2c>
2041853a:	00091923          	sh	zero,18(s2)
2041853e:	b7cd                	j	20418520 <emul+0x8c>
20418540:	8526                	mv	a0,s1
20418542:	006c                	addi	a1,sp,12
20418544:	3869                	jal	20417dde <emovi>
20418546:	8522                	mv	a0,s0
20418548:	102c                	addi	a1,sp,40
2041854a:	3851                	jal	20417dde <emovi>
2041854c:	00e15403          	lhu	s0,14(sp)
20418550:	02a15483          	lhu	s1,42(sp)
20418554:	ec09                	bnez	s0,2041856e <emul+0xda>
20418556:	4781                	li	a5,0
20418558:	4759                	li	a4,22
2041855a:	0070                	addi	a2,sp,12
2041855c:	00f606b3          	add	a3,a2,a5
20418560:	0026d683          	lhu	a3,2(a3)
20418564:	c2f9                	beqz	a3,2041862a <emul+0x196>
20418566:	8532                	mv	a0,a2
20418568:	34f1                	jal	20418034 <enormlz>
2041856a:	40a00433          	neg	s0,a0
2041856e:	02a15783          	lhu	a5,42(sp)
20418572:	8c26                	mv	s8,s1
20418574:	ef81                	bnez	a5,2041858c <emul+0xf8>
20418576:	4759                	li	a4,22
20418578:	1030                	addi	a2,sp,40
2041857a:	00f606b3          	add	a3,a2,a5
2041857e:	0026d683          	lhu	a3,2(a3)
20418582:	cadd                	beqz	a3,20418638 <emul+0x1a4>
20418584:	8532                	mv	a0,a2
20418586:	347d                	jal	20418034 <enormlz>
20418588:	40a48c33          	sub	s8,s1,a0
2041858c:	02815783          	lhu	a5,40(sp)
20418590:	03498b93          	addi	s7,s3,52
20418594:	03898493          	addi	s1,s3,56
20418598:	02f99a23          	sh	a5,52(s3)
2041859c:	02a15783          	lhu	a5,42(sp)
204185a0:	8a5e                	mv	s4,s7
204185a2:	02f99b23          	sh	a5,54(s3)
204185a6:	04e98793          	addi	a5,s3,78
204185aa:	00049023          	sh	zero,0(s1)
204185ae:	0489                	addi	s1,s1,2
204185b0:	fe979de3          	bne	a5,s1,204185aa <emul+0x116>
204185b4:	4a81                	li	s5,0
204185b6:	4b01                	li	s6,0
204185b8:	5cb1                	li	s9,-20
204185ba:	0078                	addi	a4,sp,12
204185bc:	015707b3          	add	a5,a4,s5
204185c0:	0187d503          	lhu	a0,24(a5) # ffff8018 <pulp__FC+0xffff8019>
204185c4:	c909                	beqz	a0,204185d6 <emul+0x142>
204185c6:	102c                	addi	a1,sp,40
204185c8:	00d0                	addi	a2,sp,68
204185ca:	f5aff0ef          	jal	ra,20417d24 <m16m>
204185ce:	85de                	mv	a1,s7
204185d0:	00c8                	addi	a0,sp,68
204185d2:	efeff0ef          	jal	ra,20417cd0 <eaddm>
204185d6:	04c9d783          	lhu	a5,76(s3)
204185da:	855e                	mv	a0,s7
204185dc:	1af9                	addi	s5,s5,-2
204185de:	00fb6b33          	or	s6,s6,a5
204185e2:	eccff0ef          	jal	ra,20417cae <eshdn6>
204185e6:	fd9a9ae3          	bne	s5,s9,204185ba <emul+0x126>
204185ea:	103c                	addi	a5,sp,40
204185ec:	000a5703          	lhu	a4,0(s4)
204185f0:	0a09                	addi	s4,s4,2
204185f2:	0789                	addi	a5,a5,2
204185f4:	fee79f23          	sh	a4,-2(a5)
204185f8:	fe9a1ae3          	bne	s4,s1,204185ec <emul+0x158>
204185fc:	76f1                	lui	a3,0xffffc
204185fe:	9462                	add	s0,s0,s8
20418600:	0689                	addi	a3,a3,2
20418602:	87ce                	mv	a5,s3
20418604:	04000713          	li	a4,64
20418608:	96a2                	add	a3,a3,s0
2041860a:	4601                	li	a2,0
2041860c:	85da                	mv	a1,s6
2041860e:	1028                	addi	a0,sp,40
20418610:	3e7d                	jal	204181ce <emdnorm>
20418612:	00c15703          	lhu	a4,12(sp)
20418616:	02815783          	lhu	a5,40(sp)
2041861a:	02f71363          	bne	a4,a5,20418640 <emul+0x1ac>
2041861e:	02011423          	sh	zero,40(sp)
20418622:	85ca                	mv	a1,s2
20418624:	1028                	addi	a0,sp,40
20418626:	3c45                	jal	204180d6 <emovo.isra.6>
20418628:	bd61                	j	204184c0 <emul+0x2c>
2041862a:	0789                	addi	a5,a5,2
2041862c:	f2e797e3          	bne	a5,a4,2041855a <emul+0xc6>
20418630:	854a                	mv	a0,s2
20418632:	d2cff0ef          	jal	ra,20417b5e <eclear>
20418636:	b569                	j	204184c0 <emul+0x2c>
20418638:	0789                	addi	a5,a5,2
2041863a:	f2e79fe3          	bne	a5,a4,20418578 <emul+0xe4>
2041863e:	bfcd                	j	20418630 <emul+0x19c>
20418640:	57fd                	li	a5,-1
20418642:	02f11423          	sh	a5,40(sp)
20418646:	bff1                	j	20418622 <emul+0x18e>

20418648 <ediv>:
20418648:	7175                	addi	sp,sp,-144
2041864a:	c522                	sw	s0,136(sp)
2041864c:	c326                	sw	s1,132(sp)
2041864e:	c14a                	sw	s2,128(sp)
20418650:	dad6                	sw	s5,116(sp)
20418652:	c706                	sw	ra,140(sp)
20418654:	dece                	sw	s3,124(sp)
20418656:	dcd2                	sw	s4,120(sp)
20418658:	d8da                	sw	s6,112(sp)
2041865a:	d6de                	sw	s7,108(sp)
2041865c:	d4e2                	sw	s8,104(sp)
2041865e:	d2e6                	sw	s9,100(sp)
20418660:	d0ea                	sw	s10,96(sp)
20418662:	84aa                	mv	s1,a0
20418664:	842e                	mv	s0,a1
20418666:	8932                	mv	s2,a2
20418668:	8ab6                	mv	s5,a3
2041866a:	f30ff0ef          	jal	ra,20417d9a <eisnan>
2041866e:	c11d                	beqz	a0,20418694 <ediv+0x4c>
20418670:	85ca                	mv	a1,s2
20418672:	8526                	mv	a0,s1
20418674:	cfaff0ef          	jal	ra,20417b6e <emov>
20418678:	40ba                	lw	ra,140(sp)
2041867a:	442a                	lw	s0,136(sp)
2041867c:	449a                	lw	s1,132(sp)
2041867e:	490a                	lw	s2,128(sp)
20418680:	59f6                	lw	s3,124(sp)
20418682:	5a66                	lw	s4,120(sp)
20418684:	5ad6                	lw	s5,116(sp)
20418686:	5b46                	lw	s6,112(sp)
20418688:	5bb6                	lw	s7,108(sp)
2041868a:	5c26                	lw	s8,104(sp)
2041868c:	5c96                	lw	s9,100(sp)
2041868e:	5d06                	lw	s10,96(sp)
20418690:	6149                	addi	sp,sp,144
20418692:	8082                	ret
20418694:	8522                	mv	a0,s0
20418696:	f04ff0ef          	jal	ra,20417d9a <eisnan>
2041869a:	c501                	beqz	a0,204186a2 <ediv+0x5a>
2041869c:	85ca                	mv	a1,s2
2041869e:	8522                	mv	a0,s0
204186a0:	bfd1                	j	20418674 <ediv+0x2c>
204186a2:	204229b7          	lui	s3,0x20422
204186a6:	b8898593          	addi	a1,s3,-1144 # 20421b88 <ezero>
204186aa:	8526                	mv	a0,s1
204186ac:	fcaff0ef          	jal	ra,20417e76 <ecmp>
204186b0:	16050563          	beqz	a0,2041881a <ediv+0x1d2>
204186b4:	8526                	mv	a0,s1
204186b6:	3095                	jal	20417f1a <eisinf>
204186b8:	89aa                	mv	s3,a0
204186ba:	8522                	mv	a0,s0
204186bc:	38b9                	jal	20417f1a <eisinf>
204186be:	16099863          	bnez	s3,2041882e <ediv+0x1e6>
204186c2:	16051b63          	bnez	a0,20418838 <ediv+0x1f0>
204186c6:	8526                	mv	a0,s1
204186c8:	006c                	addi	a1,sp,12
204186ca:	f14ff0ef          	jal	ra,20417dde <emovi>
204186ce:	8522                	mv	a0,s0
204186d0:	102c                	addi	a1,sp,40
204186d2:	f0cff0ef          	jal	ra,20417dde <emovi>
204186d6:	02a15483          	lhu	s1,42(sp)
204186da:	00e15403          	lhu	s0,14(sp)
204186de:	ec91                	bnez	s1,204186fa <ediv+0xb2>
204186e0:	4781                	li	a5,0
204186e2:	4759                	li	a4,22
204186e4:	1030                	addi	a2,sp,40
204186e6:	00f606b3          	add	a3,a2,a5
204186ea:	0026d683          	lhu	a3,2(a3) # ffffc002 <pulp__FC+0xffffc003>
204186ee:	16068563          	beqz	a3,20418858 <ediv+0x210>
204186f2:	8532                	mv	a0,a2
204186f4:	3281                	jal	20418034 <enormlz>
204186f6:	40a004b3          	neg	s1,a0
204186fa:	00e15783          	lhu	a5,14(sp)
204186fe:	8ba2                	mv	s7,s0
20418700:	ef89                	bnez	a5,2041871a <ediv+0xd2>
20418702:	4759                	li	a4,22
20418704:	0070                	addi	a2,sp,12
20418706:	00f606b3          	add	a3,a2,a5
2041870a:	0026d683          	lhu	a3,2(a3)
2041870e:	14068963          	beqz	a3,20418860 <ediv+0x218>
20418712:	8532                	mv	a0,a2
20418714:	3205                	jal	20418034 <enormlz>
20418716:	40a40bb3          	sub	s7,s0,a0
2041871a:	02815783          	lhu	a5,40(sp)
2041871e:	02a15703          	lhu	a4,42(sp)
20418722:	034a8993          	addi	s3,s5,52
20418726:	02fa9a23          	sh	a5,52(s5)
2041872a:	038a8793          	addi	a5,s5,56
2041872e:	02ea9b23          	sh	a4,54(s5)
20418732:	8a3e                	mv	s4,a5
20418734:	04ea8713          	addi	a4,s5,78
20418738:	0789                	addi	a5,a5,2
2041873a:	fe079f23          	sh	zero,-2(a5)
2041873e:	fee79de3          	bne	a5,a4,20418738 <ediv+0xf0>
20418742:	1028                	addi	a0,sp,40
20418744:	c96ff0ef          	jal	ra,20417bda <eshdn1>
20418748:	01215c03          	lhu	s8,18(sp)
2041874c:	6b41                	lui	s6,0x10
2041874e:	1b7d                	addi	s6,s6,-1
20418750:	036c0d33          	mul	s10,s8,s6
20418754:	01a98c93          	addi	s9,s3,26
20418758:	02c15783          	lhu	a5,44(sp)
2041875c:	02e15403          	lhu	s0,46(sp)
20418760:	07c2                	slli	a5,a5,0x10
20418762:	97a2                	add	a5,a5,s0
20418764:	845a                	mv	s0,s6
20418766:	00fd6663          	bltu	s10,a5,20418772 <ediv+0x12a>
2041876a:	0387d433          	divu	s0,a5,s8
2041876e:	0442                	slli	s0,s0,0x10
20418770:	8041                	srli	s0,s0,0x10
20418772:	006c                	addi	a1,sp,12
20418774:	8522                	mv	a0,s0
20418776:	00d0                	addi	a2,sp,68
20418778:	dacff0ef          	jal	ra,20417d24 <m16m>
2041877c:	102c                	addi	a1,sp,40
2041877e:	00c8                	addi	a0,sp,68
20418780:	c30ff0ef          	jal	ra,20417bb0 <ecmpm>
20418784:	00a05f63          	blez	a0,204187a2 <ediv+0x15a>
20418788:	00cc                	addi	a1,sp,68
2041878a:	0068                	addi	a0,sp,12
2041878c:	d6eff0ef          	jal	ra,20417cfa <esubm>
20418790:	102c                	addi	a1,sp,40
20418792:	00c8                	addi	a0,sp,68
20418794:	c1cff0ef          	jal	ra,20417bb0 <ecmpm>
20418798:	0ea04063          	bgtz	a0,20418878 <ediv+0x230>
2041879c:	147d                	addi	s0,s0,-1
2041879e:	0442                	slli	s0,s0,0x10
204187a0:	8041                	srli	s0,s0,0x10
204187a2:	102c                	addi	a1,sp,40
204187a4:	00c8                	addi	a0,sp,68
204187a6:	d54ff0ef          	jal	ra,20417cfa <esubm>
204187aa:	1028                	addi	a0,sp,40
204187ac:	008a1023          	sh	s0,0(s4)
204187b0:	0a09                	addi	s4,s4,2
204187b2:	ce0ff0ef          	jal	ra,20417c92 <eshup6>
204187b6:	fb9a11e3          	bne	s4,s9,20418758 <ediv+0x110>
204187ba:	4781                	li	a5,0
204187bc:	4581                	li	a1,0
204187be:	4759                	li	a4,22
204187c0:	1030                	addi	a2,sp,40
204187c2:	00f606b3          	add	a3,a2,a5
204187c6:	0046d683          	lhu	a3,4(a3)
204187ca:	0789                	addi	a5,a5,2
204187cc:	8dd5                	or	a1,a1,a3
204187ce:	fee799e3          	bne	a5,a4,204187c0 <ediv+0x178>
204187d2:	00b035b3          	snez	a1,a1
204187d6:	0ff5f593          	andi	a1,a1,255
204187da:	87b2                	mv	a5,a2
204187dc:	0009d703          	lhu	a4,0(s3)
204187e0:	0989                	addi	s3,s3,2
204187e2:	0789                	addi	a5,a5,2
204187e4:	fee79f23          	sh	a4,-2(a5)
204187e8:	ff3a1ae3          	bne	s4,s3,204187dc <ediv+0x194>
204187ec:	6691                	lui	a3,0x4
204187ee:	417484b3          	sub	s1,s1,s7
204187f2:	16fd                	addi	a3,a3,-1
204187f4:	87d6                	mv	a5,s5
204187f6:	04000713          	li	a4,64
204187fa:	96a6                	add	a3,a3,s1
204187fc:	4601                	li	a2,0
204187fe:	1028                	addi	a0,sp,40
20418800:	32f9                	jal	204181ce <emdnorm>
20418802:	00c15703          	lhu	a4,12(sp)
20418806:	02815783          	lhu	a5,40(sp)
2041880a:	06f71f63          	bne	a4,a5,20418888 <ediv+0x240>
2041880e:	02011423          	sh	zero,40(sp)
20418812:	85ca                	mv	a1,s2
20418814:	1028                	addi	a0,sp,40
20418816:	30c1                	jal	204180d6 <emovo.isra.6>
20418818:	b585                	j	20418678 <ediv+0x30>
2041881a:	b8898593          	addi	a1,s3,-1144
2041881e:	8522                	mv	a0,s0
20418820:	e56ff0ef          	jal	ra,20417e76 <ecmp>
20418824:	e80518e3          	bnez	a0,204186b4 <ediv+0x6c>
20418828:	854a                	mv	a0,s2
2041882a:	3859                	jal	204180c0 <enan.constprop.12>
2041882c:	b5b1                	j	20418678 <ediv+0x30>
2041882e:	fd6d                	bnez	a0,20418828 <ediv+0x1e0>
20418830:	854a                	mv	a0,s2
20418832:	b2cff0ef          	jal	ra,20417b5e <eclear>
20418836:	b589                	j	20418678 <ediv+0x30>
20418838:	8526                	mv	a0,s1
2041883a:	d86ff0ef          	jal	ra,20417dc0 <eisneg>
2041883e:	84aa                	mv	s1,a0
20418840:	8522                	mv	a0,s0
20418842:	d7eff0ef          	jal	ra,20417dc0 <eisneg>
20418846:	02a48663          	beq	s1,a0,20418872 <ediv+0x22a>
2041884a:	77e1                	lui	a5,0xffff8
2041884c:	00f91923          	sh	a5,18(s2)
20418850:	854a                	mv	a0,s2
20418852:	eeaff0ef          	jal	ra,20417f3c <einfin.isra.2>
20418856:	b50d                	j	20418678 <ediv+0x30>
20418858:	0789                	addi	a5,a5,2
2041885a:	e8e795e3          	bne	a5,a4,204186e4 <ediv+0x9c>
2041885e:	bfc9                	j	20418830 <ediv+0x1e8>
20418860:	0789                	addi	a5,a5,2
20418862:	eae791e3          	bne	a5,a4,20418704 <ediv+0xbc>
20418866:	00c15703          	lhu	a4,12(sp)
2041886a:	02815783          	lhu	a5,40(sp)
2041886e:	fcf71ee3          	bne	a4,a5,2041884a <ediv+0x202>
20418872:	00091923          	sh	zero,18(s2)
20418876:	bfe9                	j	20418850 <ediv+0x208>
20418878:	1479                	addi	s0,s0,-2
2041887a:	0442                	slli	s0,s0,0x10
2041887c:	00cc                	addi	a1,sp,68
2041887e:	0068                	addi	a0,sp,12
20418880:	8041                	srli	s0,s0,0x10
20418882:	c78ff0ef          	jal	ra,20417cfa <esubm>
20418886:	bf31                	j	204187a2 <ediv+0x15a>
20418888:	57fd                	li	a5,-1
2041888a:	02f11423          	sh	a5,40(sp)
2041888e:	b751                	j	20418812 <ediv+0x1ca>

20418890 <_ldtoa_r>:
20418890:	0005ae03          	lw	t3,0(a1)
20418894:	0045a303          	lw	t1,4(a1)
20418898:	0085a883          	lw	a7,8(a1)
2041889c:	45cc                	lw	a1,12(a1)
2041889e:	7105                	addi	sp,sp,-480
204188a0:	1c812c23          	sw	s0,472(sp)
204188a4:	d62e                	sw	a1,44(sp)
204188a6:	843e                	mv	s0,a5
204188a8:	412c                	lw	a1,64(a0)
204188aa:	57fd                	li	a5,-1
204188ac:	14f12823          	sw	a5,336(sp)
204188b0:	09000793          	li	a5,144
204188b4:	1d412423          	sw	s4,456(sp)
204188b8:	1d512223          	sw	s5,452(sp)
204188bc:	1b712e23          	sw	s7,444(sp)
204188c0:	1b912a23          	sw	s9,436(sp)
204188c4:	1c112e23          	sw	ra,476(sp)
204188c8:	1c912a23          	sw	s1,468(sp)
204188cc:	1d212823          	sw	s2,464(sp)
204188d0:	1d312623          	sw	s3,460(sp)
204188d4:	1d612023          	sw	s6,448(sp)
204188d8:	1b812c23          	sw	s8,440(sp)
204188dc:	1ba12823          	sw	s10,432(sp)
204188e0:	1bb12623          	sw	s11,428(sp)
204188e4:	cc42                	sw	a6,24(sp)
204188e6:	d072                	sw	t3,32(sp)
204188e8:	d21a                	sw	t1,36(sp)
204188ea:	d446                	sw	a7,40(sp)
204188ec:	14f12a23          	sw	a5,340(sp)
204188f0:	8a2a                	mv	s4,a0
204188f2:	8bb2                	mv	s7,a2
204188f4:	8ab6                	mv	s5,a3
204188f6:	8cba                	mv	s9,a4
204188f8:	c999                	beqz	a1,2041890e <_ldtoa_r+0x7e>
204188fa:	417c                	lw	a5,68(a0)
204188fc:	4705                	li	a4,1
204188fe:	00f71733          	sll	a4,a4,a5
20418902:	c1dc                	sw	a5,4(a1)
20418904:	c598                	sw	a4,8(a1)
20418906:	76d000ef          	jal	ra,20419872 <_Bfree>
2041890a:	040a2023          	sw	zero,64(s4)
2041890e:	1008                	addi	a0,sp,32
20418910:	088c                	addi	a1,sp,80
20418912:	3809                	jal	20418124 <e113toe.isra.8>
20418914:	0888                	addi	a0,sp,80
20418916:	caaff0ef          	jal	ra,20417dc0 <eisneg>
2041891a:	14050b63          	beqz	a0,20418a70 <_ldtoa_r+0x1e0>
2041891e:	4785                	li	a5,1
20418920:	c01c                	sw	a5,0(s0)
20418922:	478d                	li	a5,3
20418924:	14fb8963          	beq	s7,a5,20418a76 <_ldtoa_r+0x1e6>
20418928:	4951                	li	s2,20
2041892a:	000b8a63          	beqz	s7,2041893e <_ldtoa_r+0xae>
2041892e:	fffa8913          	addi	s2,s5,-1
20418932:	02a00793          	li	a5,42
20418936:	0127d463          	ble	s2,a5,2041893e <_ldtoa_r+0xae>
2041893a:	02a00913          	li	s2,42
2041893e:	15412603          	lw	a2,340(sp)
20418942:	0888                	addi	a0,sp,80
20418944:	ce32                	sw	a2,28(sp)
20418946:	c54ff0ef          	jal	ra,20417d9a <eisnan>
2041894a:	842a                	mv	s0,a0
2041894c:	12050763          	beqz	a0,20418a7a <_ldtoa_r+0x1ea>
20418950:	204225b7          	lui	a1,0x20422
20418954:	ddc58593          	addi	a1,a1,-548 # 20421ddc <emtens+0x104>
20418958:	0a48                	addi	a0,sp,276
2041895a:	6409                	lui	s0,0x2
2041895c:	611010ef          	jal	ra,2041a76c <sprintf>
20418960:	70f40413          	addi	s0,s0,1807 # 270f <__stack_size+0x1f0f>
20418964:	46f2                	lw	a3,28(sp)
20418966:	0888                	addi	a0,sp,80
20418968:	16812023          	sw	s0,352(sp)
2041896c:	14d12a23          	sw	a3,340(sp)
20418970:	daaff0ef          	jal	ra,20417f1a <eisinf>
20418974:	11410993          	addi	s3,sp,276
20418978:	e511                	bnez	a0,20418984 <_ldtoa_r+0xf4>
2041897a:	0888                	addi	a0,sp,80
2041897c:	c1eff0ef          	jal	ra,20417d9a <eisnan>
20418980:	78050363          	beqz	a0,20419106 <_ldtoa_r+0x876>
20418984:	6789                	lui	a5,0x2
20418986:	70f78793          	addi	a5,a5,1807 # 270f <__stack_size+0x1f0f>
2041898a:	00fca023          	sw	a5,0(s9)
2041898e:	87ce                	mv	a5,s3
20418990:	02000613          	li	a2,32
20418994:	02d00693          	li	a3,45
20418998:	0007c703          	lbu	a4,0(a5)
2041899c:	7ac70963          	beq	a4,a2,2041914e <_ldtoa_r+0x8be>
204189a0:	7ad70763          	beq	a4,a3,2041914e <_ldtoa_r+0x8be>
204189a4:	844e                	mv	s0,s3
204189a6:	0785                	addi	a5,a5,1
204189a8:	fff7c703          	lbu	a4,-1(a5)
204189ac:	00140693          	addi	a3,s0,1
204189b0:	fee68fa3          	sb	a4,-1(a3) # 3fff <__stack_size+0x37ff>
204189b4:	7a071063          	bnez	a4,20419154 <_ldtoa_r+0x8c4>
204189b8:	4709                	li	a4,2
204189ba:	4785                	li	a5,1
204189bc:	00eb8763          	beq	s7,a4,204189ca <_ldtoa_r+0x13a>
204189c0:	16012783          	lw	a5,352(sp)
204189c4:	0127d363          	ble	s2,a5,204189ca <_ldtoa_r+0x13a>
204189c8:	87ca                	mv	a5,s2
204189ca:	03000693          	li	a3,48
204189ce:	fff44703          	lbu	a4,-1(s0)
204189d2:	00d71663          	bne	a4,a3,204189de <_ldtoa_r+0x14e>
204189d6:	41340733          	sub	a4,s0,s3
204189da:	78e7c063          	blt	a5,a4,2041915a <_ldtoa_r+0x8ca>
204189de:	478d                	li	a5,3
204189e0:	009a8713          	addi	a4,s5,9
204189e4:	02fb9163          	bne	s7,a5,20418a06 <_ldtoa_r+0x176>
204189e8:	16012783          	lw	a5,352(sp)
204189ec:	993e                	add	s2,s2,a5
204189ee:	00095763          	bgez	s2,204189fc <_ldtoa_r+0x16c>
204189f2:	10010a23          	sb	zero,276(sp)
204189f6:	000ca023          	sw	zero,0(s9)
204189fa:	844e                	mv	s0,s3
204189fc:	000ca783          	lw	a5,0(s9)
20418a00:	9abe                	add	s5,s5,a5
20418a02:	003a8713          	addi	a4,s5,3
20418a06:	040a2223          	sw	zero,68(s4)
20418a0a:	4791                	li	a5,4
20418a0c:	01478693          	addi	a3,a5,20
20418a10:	044a2583          	lw	a1,68(s4)
20418a14:	74d77863          	bleu	a3,a4,20419164 <_ldtoa_r+0x8d4>
20418a18:	8552                	mv	a0,s4
20418a1a:	5f3000ef          	jal	ra,2041980c <_Balloc>
20418a1e:	04aa2023          	sw	a0,64(s4)
20418a22:	85ce                	mv	a1,s3
20418a24:	84aa                	mv	s1,a0
20418a26:	653010ef          	jal	ra,2041a878 <strcpy>
20418a2a:	4762                	lw	a4,24(sp)
20418a2c:	c709                	beqz	a4,20418a36 <_ldtoa_r+0x1a6>
20418a2e:	41340433          	sub	s0,s0,s3
20418a32:	9426                	add	s0,s0,s1
20418a34:	c300                	sw	s0,0(a4)
20418a36:	1dc12083          	lw	ra,476(sp)
20418a3a:	1d812403          	lw	s0,472(sp)
20418a3e:	8526                	mv	a0,s1
20418a40:	1d012903          	lw	s2,464(sp)
20418a44:	1d412483          	lw	s1,468(sp)
20418a48:	1cc12983          	lw	s3,460(sp)
20418a4c:	1c812a03          	lw	s4,456(sp)
20418a50:	1c412a83          	lw	s5,452(sp)
20418a54:	1c012b03          	lw	s6,448(sp)
20418a58:	1bc12b83          	lw	s7,444(sp)
20418a5c:	1b812c03          	lw	s8,440(sp)
20418a60:	1b412c83          	lw	s9,436(sp)
20418a64:	1b012d03          	lw	s10,432(sp)
20418a68:	1ac12d83          	lw	s11,428(sp)
20418a6c:	613d                	addi	sp,sp,480
20418a6e:	8082                	ret
20418a70:	00042023          	sw	zero,0(s0)
20418a74:	b57d                	j	20418922 <_ldtoa_r+0x92>
20418a76:	8956                	mv	s2,s5
20418a78:	bd6d                	j	20418932 <_ldtoa_r+0xa2>
20418a7a:	09000793          	li	a5,144
20418a7e:	10ec                	addi	a1,sp,108
20418a80:	0888                	addi	a0,sp,80
20418a82:	14f12a23          	sw	a5,340(sp)
20418a86:	8e8ff0ef          	jal	ra,20417b6e <emov>
20418a8a:	07e15783          	lhu	a5,126(sp)
20418a8e:	c802                	sw	zero,16(sp)
20418a90:	01079713          	slli	a4,a5,0x10
20418a94:	8741                	srai	a4,a4,0x10
20418a96:	00075a63          	bgez	a4,20418aaa <_ldtoa_r+0x21a>
20418a9a:	6721                	lui	a4,0x8
20418a9c:	177d                	addi	a4,a4,-1
20418a9e:	8ff9                	and	a5,a5,a4
20418aa0:	06f11f23          	sh	a5,126(sp)
20418aa4:	67c1                	lui	a5,0x10
20418aa6:	17fd                	addi	a5,a5,-1
20418aa8:	c83e                	sw	a5,16(sp)
20418aaa:	20422b37          	lui	s6,0x20422
20418aae:	b88b0513          	addi	a0,s6,-1144 # 20421b88 <ezero>
20418ab2:	012c                	addi	a1,sp,136
20418ab4:	0551                	addi	a0,a0,20
20418ab6:	8b8ff0ef          	jal	ra,20417b6e <emov>
20418aba:	07e15703          	lhu	a4,126(sp)
20418abe:	204224b7          	lui	s1,0x20422
20418ac2:	b88b0993          	addi	s3,s6,-1144
20418ac6:	b9c48493          	addi	s1,s1,-1124 # 20421b9c <eone>
20418aca:	6a071363          	bnez	a4,20419170 <_ldtoa_r+0x8e0>
20418ace:	10f8                	addi	a4,sp,108
20418ad0:	4781                	li	a5,0
20418ad2:	46a5                	li	a3,9
20418ad4:	00075603          	lhu	a2,0(a4) # 8000 <__stack_size+0x7800>
20418ad8:	e271                	bnez	a2,20418b9c <_ldtoa_r+0x30c>
20418ada:	0785                	addi	a5,a5,1
20418adc:	0709                	addi	a4,a4,2
20418ade:	fed79be3          	bne	a5,a3,20418ad4 <_ldtoa_r+0x244>
20418ae2:	018c                	addi	a1,sp,192
20418ae4:	0128                	addi	a0,sp,136
20418ae6:	af8ff0ef          	jal	ra,20417dde <emovi>
20418aea:	012c                	addi	a1,sp,136
20418aec:	0188                	addi	a0,sp,192
20418aee:	8a6ff0ef          	jal	ra,20417b94 <emovz>
20418af2:	018c                	addi	a1,sp,192
20418af4:	10e8                	addi	a0,sp,108
20418af6:	ae8ff0ef          	jal	ra,20417dde <emovi>
20418afa:	10ec                	addi	a1,sp,108
20418afc:	0188                	addi	a0,sp,192
20418afe:	896ff0ef          	jal	ra,20417b94 <emovz>
20418b02:	0a90                	addi	a2,sp,336
20418b04:	10ec                	addi	a1,sp,108
20418b06:	0128                	addi	a0,sp,136
20418b08:	3201                	jal	20418408 <eiremain>
20418b0a:	19c15483          	lhu	s1,412(sp)
20418b0e:	e881                	bnez	s1,20418b1e <_ldtoa_r+0x28e>
20418b10:	b88b0593          	addi	a1,s6,-1144
20418b14:	10e8                	addi	a0,sp,108
20418b16:	b60ff0ef          	jal	ra,20417e76 <ecmp>
20418b1a:	4a051d63          	bnez	a0,20418fd4 <_ldtoa_r+0x744>
20418b1e:	4642                	lw	a2,16(sp)
20418b20:	02d00793          	li	a5,45
20418b24:	e219                	bnez	a2,20418b2a <_ldtoa_r+0x29a>
20418b26:	02000793          	li	a5,32
20418b2a:	10f10a23          	sb	a5,276(sp)
20418b2e:	478d                	li	a5,3
20418b30:	89ca                	mv	s3,s2
20418b32:	00fb9863          	bne	s7,a5,20418b42 <_ldtoa_r+0x2b2>
20418b36:	008909b3          	add	s3,s2,s0
20418b3a:	02a00793          	li	a5,42
20418b3e:	6537c663          	blt	a5,s3,2041918a <_ldtoa_r+0x8fa>
20418b42:	47a9                	li	a5,10
20418b44:	4cf49263          	bne	s1,a5,20419008 <_ldtoa_r+0x778>
20418b48:	678d                	lui	a5,0x3
20418b4a:	e3178793          	addi	a5,a5,-463 # 2e31 <__stack_size+0x2631>
20418b4e:	10f11aa3          	sh	a5,277(sp)
20418b52:	11710c13          	addi	s8,sp,279
20418b56:	01305963          	blez	s3,20418b68 <_ldtoa_r+0x2d8>
20418b5a:	03000793          	li	a5,48
20418b5e:	10f10ba3          	sb	a5,279(sp)
20418b62:	19fd                	addi	s3,s3,-1
20418b64:	11810c13          	addi	s8,sp,280
20418b68:	0405                	addi	s0,s0,1
20418b6a:	4a09d963          	bgez	s3,2041901c <_ldtoa_r+0x78c>
20418b6e:	204225b7          	lui	a1,0x20422
20418b72:	8622                	mv	a2,s0
20418b74:	e0058593          	addi	a1,a1,-512 # 20421e00 <emtens+0x128>
20418b78:	8562                	mv	a0,s8
20418b7a:	3f3010ef          	jal	ra,2041a76c <sprintf>
20418b7e:	b3dd                	j	20418964 <_ldtoa_r+0xd4>
20418b80:	204225b7          	lui	a1,0x20422
20418b84:	df058593          	addi	a1,a1,-528 # 20421df0 <emtens+0x118>
20418b88:	bbc1                	j	20418958 <_ldtoa_r+0xc8>
20418b8a:	07c11783          	lh	a5,124(sp)
20418b8e:	0007c763          	bltz	a5,20418b9c <_ldtoa_r+0x30c>
20418b92:	204225b7          	lui	a1,0x20422
20418b96:	dfc58593          	addi	a1,a1,-516 # 20421dfc <emtens+0x124>
20418b9a:	bb7d                	j	20418958 <_ldtoa_r+0xc8>
20418b9c:	10ec                	addi	a1,sp,108
20418b9e:	8526                	mv	a0,s1
20418ba0:	ad6ff0ef          	jal	ra,20417e76 <ecmp>
20418ba4:	dd1d                	beqz	a0,20418ae2 <_ldtoa_r+0x252>
20418ba6:	30055b63          	bgez	a0,20418ebc <_ldtoa_r+0x62c>
20418baa:	114c                	addi	a1,sp,164
20418bac:	10e8                	addi	a0,sp,108
20418bae:	fc1fe0ef          	jal	ra,20417b6e <emov>
20418bb2:	6791                	lui	a5,0x4
20418bb4:	08e78793          	addi	a5,a5,142 # 408e <__stack_size+0x388e>
20418bb8:	4741                	li	a4,16
20418bba:	0af11b23          	sh	a5,182(sp)
20418bbe:	4d01                	li	s10,0
20418bc0:	ca3a                	sw	a4,20(sp)
20418bc2:	204227b7          	lui	a5,0x20422
20418bc6:	c5078793          	addi	a5,a5,-944 # 20421c50 <etens+0xa0>
20418bca:	0a94                	addi	a3,sp,336
20418bcc:	0130                	addi	a2,sp,136
20418bce:	01a78533          	add	a0,a5,s10
20418bd2:	114c                	addi	a1,sp,164
20418bd4:	3c95                	jal	20418648 <ediv>
20418bd6:	186c                	addi	a1,sp,60
20418bd8:	0128                	addi	a0,sp,136
20418bda:	f95fe0ef          	jal	ra,20417b6e <emov>
20418bde:	04e15c03          	lhu	s8,78(sp)
20418be2:	6621                	lui	a2,0x8
20418be4:	167d                	addi	a2,a2,-1
20418be6:	76f1                	lui	a3,0xffffc
20418be8:	00cc7733          	and	a4,s8,a2
20418bec:	0689                	addi	a3,a3,2
20418bee:	9736                	add	a4,a4,a3
20418bf0:	04e04063          	bgtz	a4,20418c30 <_ldtoa_r+0x3a0>
20418bf4:	0188                	addi	a0,sp,192
20418bf6:	f69fe0ef          	jal	ra,20417b5e <eclear>
20418bfa:	0c42                	slli	s8,s8,0x10
20418bfc:	410c5c13          	srai	s8,s8,0x10
20418c00:	0a0c5e63          	bgez	s8,20418cbc <_ldtoa_r+0x42c>
20418c04:	4781                	li	a5,0
20418c06:	1870                	addi	a2,sp,60
20418c08:	00f60733          	add	a4,a2,a5
20418c0c:	0190                	addi	a2,sp,192
20418c0e:	00075683          	lhu	a3,0(a4)
20418c12:	00f60733          	add	a4,a2,a5
20418c16:	00075703          	lhu	a4,0(a4)
20418c1a:	28e68c63          	beq	a3,a4,20418eb2 <_ldtoa_r+0x622>
20418c1e:	8526                	mv	a0,s1
20418c20:	97aff0ef          	jal	ra,20417d9a <eisnan>
20418c24:	cd31                	beqz	a0,20418c80 <_ldtoa_r+0x3f0>
20418c26:	018c                	addi	a1,sp,192
20418c28:	8526                	mv	a0,s1
20418c2a:	f45fe0ef          	jal	ra,20417b6e <emov>
20418c2e:	a079                	j	20418cbc <_ldtoa_r+0x42c>
20418c30:	09000793          	li	a5,144
20418c34:	40e78db3          	sub	s11,a5,a4
20418c38:	018c                	addi	a1,sp,192
20418c3a:	1868                	addi	a0,sp,60
20418c3c:	f33fe0ef          	jal	ra,20417b6e <emov>
20418c40:	07b05e63          	blez	s11,20418cbc <_ldtoa_r+0x42c>
20418c44:	0194                	addi	a3,sp,192
20418c46:	87ee                	mv	a5,s11
20418c48:	463d                	li	a2,15
20418c4a:	02f64663          	blt	a2,a5,20418c76 <_ldtoa_r+0x3e6>
20418c4e:	004dd793          	srli	a5,s11,0x4
20418c52:	5641                	li	a2,-16
20418c54:	00179693          	slli	a3,a5,0x1
20418c58:	02c787b3          	mul	a5,a5,a2
20418c5c:	0198                	addi	a4,sp,192
20418c5e:	96ba                	add	a3,a3,a4
20418c60:	0006d703          	lhu	a4,0(a3) # ffffc000 <pulp__FC+0xffffc001>
20418c64:	97ee                	add	a5,a5,s11
20418c66:	0786                	slli	a5,a5,0x1
20418c68:	97ce                	add	a5,a5,s3
20418c6a:	12c7d783          	lhu	a5,300(a5)
20418c6e:	8ff9                	and	a5,a5,a4
20418c70:	00f69023          	sh	a5,0(a3)
20418c74:	b759                	j	20418bfa <_ldtoa_r+0x36a>
20418c76:	00069023          	sh	zero,0(a3)
20418c7a:	17c1                	addi	a5,a5,-16
20418c7c:	0689                	addi	a3,a3,2
20418c7e:	b7f1                	j	20418c4a <_ldtoa_r+0x3ba>
20418c80:	0188                	addi	a0,sp,192
20418c82:	918ff0ef          	jal	ra,20417d9a <eisnan>
20418c86:	c501                	beqz	a0,20418c8e <_ldtoa_r+0x3fe>
20418c88:	018c                	addi	a1,sp,192
20418c8a:	852e                	mv	a0,a1
20418c8c:	bf79                	j	20418c2a <_ldtoa_r+0x39a>
20418c8e:	8526                	mv	a0,s1
20418c90:	a8aff0ef          	jal	ra,20417f1a <eisinf>
20418c94:	8daa                	mv	s11,a0
20418c96:	0188                	addi	a0,sp,192
20418c98:	a82ff0ef          	jal	ra,20417f1a <eisinf>
20418c9c:	8c2a                	mv	s8,a0
20418c9e:	0e0d8a63          	beqz	s11,20418d92 <_ldtoa_r+0x502>
20418ca2:	c969                	beqz	a0,20418d74 <_ldtoa_r+0x4e4>
20418ca4:	8526                	mv	a0,s1
20418ca6:	91aff0ef          	jal	ra,20417dc0 <eisneg>
20418caa:	8c2a                	mv	s8,a0
20418cac:	0188                	addi	a0,sp,192
20418cae:	912ff0ef          	jal	ra,20417dc0 <eisneg>
20418cb2:	0cac1163          	bne	s8,a0,20418d74 <_ldtoa_r+0x4e4>
20418cb6:	0188                	addi	a0,sp,192
20418cb8:	c08ff0ef          	jal	ra,204180c0 <enan.constprop.12>
20418cbc:	4781                	li	a5,0
20418cbe:	0130                	addi	a2,sp,136
20418cc0:	00f60733          	add	a4,a2,a5
20418cc4:	0190                	addi	a2,sp,192
20418cc6:	00075683          	lhu	a3,0(a4)
20418cca:	00f60733          	add	a4,a2,a5
20418cce:	00075703          	lhu	a4,0(a4)
20418cd2:	00e69c63          	bne	a3,a4,20418cea <_ldtoa_r+0x45a>
20418cd6:	0789                	addi	a5,a5,2
20418cd8:	46c9                	li	a3,18
20418cda:	fed792e3          	bne	a5,a3,20418cbe <_ldtoa_r+0x42e>
20418cde:	114c                	addi	a1,sp,164
20418ce0:	0128                	addi	a0,sp,136
20418ce2:	e8dfe0ef          	jal	ra,20417b6e <emov>
20418ce6:	4752                	lw	a4,20(sp)
20418ce8:	943a                	add	s0,s0,a4
20418cea:	47d2                	lw	a5,20(sp)
20418cec:	0d51                	addi	s10,s10,20
20418cee:	8385                	srli	a5,a5,0x1
20418cf0:	ca3e                	sw	a5,20(sp)
20418cf2:	06400793          	li	a5,100
20418cf6:	ecfd16e3          	bne	s10,a5,20418bc2 <_ldtoa_r+0x332>
20418cfa:	0b615783          	lhu	a5,182(sp)
20418cfe:	07e15703          	lhu	a4,126(sp)
20418d02:	10ec                	addi	a1,sp,108
20418d04:	1148                	addi	a0,sp,164
20418d06:	97ba                	add	a5,a5,a4
20418d08:	7771                	lui	a4,0xffffc
20418d0a:	f7270713          	addi	a4,a4,-142 # ffffbf72 <pulp__FC+0xffffbf73>
20418d0e:	97ba                	add	a5,a5,a4
20418d10:	0af11b23          	sh	a5,182(sp)
20418d14:	e5bfe0ef          	jal	ra,20417b6e <emov>
20418d18:	8526                	mv	a0,s1
20418d1a:	012c                	addi	a1,sp,136
20418d1c:	e53fe0ef          	jal	ra,20417b6e <emov>
20418d20:	4481                	li	s1,0
20418d22:	6d05                	lui	s10,0x1
20418d24:	11898993          	addi	s3,s3,280
20418d28:	10400d93          	li	s11,260
20418d2c:	20422637          	lui	a2,0x20422
20418d30:	bb060613          	addi	a2,a2,-1104 # 20421bb0 <etens>
20418d34:	114c                	addi	a1,sp,164
20418d36:	854e                	mv	a0,s3
20418d38:	00c48c33          	add	s8,s1,a2
20418d3c:	93aff0ef          	jal	ra,20417e76 <ecmp>
20418d40:	daa041e3          	bgtz	a0,20418ae2 <_ldtoa_r+0x252>
20418d44:	114c                	addi	a1,sp,164
20418d46:	8562                	mv	a0,s8
20418d48:	92eff0ef          	jal	ra,20417e76 <ecmp>
20418d4c:	00a04e63          	bgtz	a0,20418d68 <_ldtoa_r+0x4d8>
20418d50:	1150                	addi	a2,sp,164
20418d52:	85b2                	mv	a1,a2
20418d54:	0a94                	addi	a3,sp,336
20418d56:	8562                	mv	a0,s8
20418d58:	38c5                	jal	20418648 <ediv>
20418d5a:	0130                	addi	a2,sp,136
20418d5c:	0a94                	addi	a3,sp,336
20418d5e:	85b2                	mv	a1,a2
20418d60:	8562                	mv	a0,s8
20418d62:	f32ff0ef          	jal	ra,20418494 <emul>
20418d66:	946a                	add	s0,s0,s10
20418d68:	04d1                	addi	s1,s1,20
20418d6a:	001d5d13          	srli	s10,s10,0x1
20418d6e:	fbb49fe3          	bne	s1,s11,20418d2c <_ldtoa_r+0x49c>
20418d72:	bb85                	j	20418ae2 <_ldtoa_r+0x252>
20418d74:	8526                	mv	a0,s1
20418d76:	018c                	addi	a1,sp,192
20418d78:	df7fe0ef          	jal	ra,20417b6e <emov>
20418d7c:	0188                	addi	a0,sp,192
20418d7e:	81cff0ef          	jal	ra,20417d9a <eisnan>
20418d82:	fd0d                	bnez	a0,20418cbc <_ldtoa_r+0x42c>
20418d84:	0d215783          	lhu	a5,210(sp)
20418d88:	7761                	lui	a4,0xffff8
20418d8a:	8fb9                	xor	a5,a5,a4
20418d8c:	0cf11923          	sh	a5,210(sp)
20418d90:	b735                	j	20418cbc <_ldtoa_r+0x42c>
20418d92:	ee051be3          	bnez	a0,20418c88 <_ldtoa_r+0x3f8>
20418d96:	09ec                	addi	a1,sp,220
20418d98:	8526                	mv	a0,s1
20418d9a:	844ff0ef          	jal	ra,20417dde <emovi>
20418d9e:	19ac                	addi	a1,sp,248
20418da0:	0188                	addi	a0,sp,192
20418da2:	83cff0ef          	jal	ra,20417dde <emovi>
20418da6:	0dc15703          	lhu	a4,220(sp)
20418daa:	0fa15d83          	lhu	s11,250(sp)
20418dae:	0de15783          	lhu	a5,222(sp)
20418db2:	fff74713          	not	a4,a4
20418db6:	0742                	slli	a4,a4,0x10
20418db8:	8341                	srli	a4,a4,0x10
20418dba:	0ce11e23          	sh	a4,220(sp)
20418dbe:	41b787b3          	sub	a5,a5,s11
20418dc2:	06f05363          	blez	a5,20418e28 <_ldtoa_r+0x598>
20418dc6:	0a4c                	addi	a1,sp,276
20418dc8:	19a8                	addi	a0,sp,248
20418dca:	c63e                	sw	a5,12(sp)
20418dcc:	dc9fe0ef          	jal	ra,20417b94 <emovz>
20418dd0:	19ac                	addi	a1,sp,248
20418dd2:	09e8                	addi	a0,sp,220
20418dd4:	dc1fe0ef          	jal	ra,20417b94 <emovz>
20418dd8:	09ec                	addi	a1,sp,220
20418dda:	0a48                	addi	a0,sp,276
20418ddc:	db9fe0ef          	jal	ra,20417b94 <emovz>
20418de0:	47b2                	lw	a5,12(sp)
20418de2:	0fa15d83          	lhu	s11,250(sp)
20418de6:	40f007b3          	neg	a5,a5
20418dea:	f6f00713          	li	a4,-145
20418dee:	06e7c763          	blt	a5,a4,20418e5c <_ldtoa_r+0x5cc>
20418df2:	85be                	mv	a1,a5
20418df4:	09e8                	addi	a0,sp,220
20418df6:	964ff0ef          	jal	ra,20417f5a <eshift.part.3>
20418dfa:	882a                	mv	a6,a0
20418dfc:	0dc15703          	lhu	a4,220(sp)
20418e00:	0f815783          	lhu	a5,248(sp)
20418e04:	c642                	sw	a6,12(sp)
20418e06:	19ac                	addi	a1,sp,248
20418e08:	09e8                	addi	a0,sp,220
20418e0a:	0af71063          	bne	a4,a5,20418eaa <_ldtoa_r+0x61a>
20418e0e:	ec3fe0ef          	jal	ra,20417cd0 <eaddm>
20418e12:	4832                	lw	a6,12(sp)
20418e14:	0a9c                	addi	a5,sp,336
20418e16:	04000713          	li	a4,64
20418e1a:	86ee                	mv	a3,s11
20418e1c:	8662                	mv	a2,s8
20418e1e:	85c2                	mv	a1,a6
20418e20:	19a8                	addi	a0,sp,248
20418e22:	bacff0ef          	jal	ra,204181ce <emdnorm>
20418e26:	a81d                	j	20418e5c <_ldtoa_r+0x5cc>
20418e28:	f3e9                	bnez	a5,20418dea <_ldtoa_r+0x55a>
20418e2a:	19ac                	addi	a1,sp,248
20418e2c:	09e8                	addi	a0,sp,220
20418e2e:	c63a                	sw	a4,12(sp)
20418e30:	d81fe0ef          	jal	ra,20417bb0 <ecmpm>
20418e34:	4732                	lw	a4,12(sp)
20418e36:	e929                	bnez	a0,20418e88 <_ldtoa_r+0x5f8>
20418e38:	0f815783          	lhu	a5,248(sp)
20418e3c:	00e78663          	beq	a5,a4,20418e48 <_ldtoa_r+0x5b8>
20418e40:	0188                	addi	a0,sp,192
20418e42:	d1dfe0ef          	jal	ra,20417b5e <eclear>
20418e46:	bd9d                	j	20418cbc <_ldtoa_r+0x42c>
20418e48:	000d9f63          	bnez	s11,20418e66 <_ldtoa_r+0x5d6>
20418e4c:	0fe11703          	lh	a4,254(sp)
20418e50:	4781                	li	a5,0
20418e52:	00074b63          	bltz	a4,20418e68 <_ldtoa_r+0x5d8>
20418e56:	19a8                	addi	a0,sp,248
20418e58:	db9fe0ef          	jal	ra,20417c10 <eshup1>
20418e5c:	018c                	addi	a1,sp,192
20418e5e:	19a8                	addi	a0,sp,248
20418e60:	a76ff0ef          	jal	ra,204180d6 <emovo.isra.6>
20418e64:	bda1                	j	20418cbc <_ldtoa_r+0x42c>
20418e66:	4781                	li	a5,0
20418e68:	4759                	li	a4,22
20418e6a:	19b4                	addi	a3,sp,248
20418e6c:	00f68633          	add	a2,a3,a5
20418e70:	00265603          	lhu	a2,2(a2)
20418e74:	c611                	beqz	a2,20418e80 <_ldtoa_r+0x5f0>
20418e76:	0d85                	addi	s11,s11,1
20418e78:	86ee                	mv	a3,s11
20418e7a:	0ed11d23          	sh	a3,250(sp)
20418e7e:	bff9                	j	20418e5c <_ldtoa_r+0x5cc>
20418e80:	0789                	addi	a5,a5,2
20418e82:	fee794e3          	bne	a5,a4,20418e6a <_ldtoa_r+0x5da>
20418e86:	bfcd                	j	20418e78 <_ldtoa_r+0x5e8>
20418e88:	4801                	li	a6,0
20418e8a:	f6a059e3          	blez	a0,20418dfc <_ldtoa_r+0x56c>
20418e8e:	0a4c                	addi	a1,sp,276
20418e90:	19a8                	addi	a0,sp,248
20418e92:	d03fe0ef          	jal	ra,20417b94 <emovz>
20418e96:	19ac                	addi	a1,sp,248
20418e98:	09e8                	addi	a0,sp,220
20418e9a:	cfbfe0ef          	jal	ra,20417b94 <emovz>
20418e9e:	09ec                	addi	a1,sp,220
20418ea0:	0a48                	addi	a0,sp,276
20418ea2:	cf3fe0ef          	jal	ra,20417b94 <emovz>
20418ea6:	8862                	mv	a6,s8
20418ea8:	bf91                	j	20418dfc <_ldtoa_r+0x56c>
20418eaa:	e51fe0ef          	jal	ra,20417cfa <esubm>
20418eae:	4c05                	li	s8,1
20418eb0:	b78d                	j	20418e12 <_ldtoa_r+0x582>
20418eb2:	0789                	addi	a5,a5,2
20418eb4:	4749                	li	a4,18
20418eb6:	d4e798e3          	bne	a5,a4,20418c06 <_ldtoa_r+0x376>
20418eba:	b509                	j	20418cbc <_ldtoa_r+0x42c>
20418ebc:	07e15783          	lhu	a5,126(sp)
20418ec0:	11898c13          	addi	s8,s3,280
20418ec4:	cfad                	beqz	a5,20418f3e <_ldtoa_r+0x6ae>
20418ec6:	018c                	addi	a1,sp,192
20418ec8:	10e8                	addi	a0,sp,108
20418eca:	6c11                	lui	s8,0x4
20418ecc:	f13fe0ef          	jal	ra,20417dde <emovi>
20418ed0:	1c79                	addi	s8,s8,-2
20418ed2:	fd500d13          	li	s10,-43
20418ed6:	0d815783          	lhu	a5,216(sp)
20418eda:	8b9d                	andi	a5,a5,7
20418edc:	e7a9                	bnez	a5,20418f26 <_ldtoa_r+0x696>
20418ede:	114c                	addi	a1,sp,164
20418ee0:	0188                	addi	a0,sp,192
20418ee2:	cb3fe0ef          	jal	ra,20417b94 <emovz>
20418ee6:	1148                	addi	a0,sp,164
20418ee8:	cf3fe0ef          	jal	ra,20417bda <eshdn1>
20418eec:	1148                	addi	a0,sp,164
20418eee:	cedfe0ef          	jal	ra,20417bda <eshdn1>
20418ef2:	114c                	addi	a1,sp,164
20418ef4:	0188                	addi	a0,sp,192
20418ef6:	ddbfe0ef          	jal	ra,20417cd0 <eaddm>
20418efa:	0a615783          	lhu	a5,166(sp)
20418efe:	078d                	addi	a5,a5,3
20418f00:	0af11323          	sh	a5,166(sp)
20418f04:	0a815783          	lhu	a5,168(sp)
20418f08:	efdd                	bnez	a5,20418fc6 <_ldtoa_r+0x736>
20418f0a:	0bc15783          	lhu	a5,188(sp)
20418f0e:	ef81                	bnez	a5,20418f26 <_ldtoa_r+0x696>
20418f10:	0a615783          	lhu	a5,166(sp)
20418f14:	00fc6963          	bltu	s8,a5,20418f26 <_ldtoa_r+0x696>
20418f18:	018c                	addi	a1,sp,192
20418f1a:	1148                	addi	a0,sp,164
20418f1c:	147d                	addi	s0,s0,-1
20418f1e:	c77fe0ef          	jal	ra,20417b94 <emovz>
20418f22:	fba41ae3          	bne	s0,s10,20418ed6 <_ldtoa_r+0x646>
20418f26:	10ec                	addi	a1,sp,108
20418f28:	0188                	addi	a0,sp,192
20418f2a:	9acff0ef          	jal	ra,204180d6 <emovo.isra.6>
20418f2e:	a821                	j	20418f46 <_ldtoa_r+0x6b6>
20418f30:	10f0                	addi	a2,sp,108
20418f32:	0a94                	addi	a3,sp,336
20418f34:	85b2                	mv	a1,a2
20418f36:	8562                	mv	a0,s8
20418f38:	d5cff0ef          	jal	ra,20418494 <emul>
20418f3c:	147d                	addi	s0,s0,-1
20418f3e:	07c11783          	lh	a5,124(sp)
20418f42:	fe07d7e3          	bgez	a5,20418f30 <_ldtoa_r+0x6a0>
20418f46:	018c                	addi	a1,sp,192
20418f48:	10e8                	addi	a0,sp,108
20418f4a:	c25fe0ef          	jal	ra,20417b6e <emov>
20418f4e:	012c                	addi	a1,sp,136
20418f50:	8526                	mv	a0,s1
20418f52:	c1dfe0ef          	jal	ra,20417b6e <emov>
20418f56:	4d01                	li	s10,0
20418f58:	7c7d                	lui	s8,0xfffff
20418f5a:	4d89                	li	s11,2
20418f5c:	20422737          	lui	a4,0x20422
20418f60:	204227b7          	lui	a5,0x20422
20418f64:	bb070713          	addi	a4,a4,-1104 # 20421bb0 <etens>
20418f68:	cd878793          	addi	a5,a5,-808 # 20421cd8 <emtens>
20418f6c:	01a709b3          	add	s3,a4,s10
20418f70:	018c                	addi	a1,sp,192
20418f72:	01a78733          	add	a4,a5,s10
20418f76:	8526                	mv	a0,s1
20418f78:	c63a                	sw	a4,12(sp)
20418f7a:	efdfe0ef          	jal	ra,20417e76 <ecmp>
20418f7e:	4732                	lw	a4,12(sp)
20418f80:	02a05c63          	blez	a0,20418fb8 <_ldtoa_r+0x728>
20418f84:	018c                	addi	a1,sp,192
20418f86:	853a                	mv	a0,a4
20418f88:	eeffe0ef          	jal	ra,20417e76 <ecmp>
20418f8c:	00054f63          	bltz	a0,20418faa <_ldtoa_r+0x71a>
20418f90:	0190                	addi	a2,sp,192
20418f92:	85b2                	mv	a1,a2
20418f94:	0a94                	addi	a3,sp,336
20418f96:	854e                	mv	a0,s3
20418f98:	cfcff0ef          	jal	ra,20418494 <emul>
20418f9c:	0130                	addi	a2,sp,136
20418f9e:	0a94                	addi	a3,sp,336
20418fa0:	85b2                	mv	a1,a2
20418fa2:	854e                	mv	a0,s3
20418fa4:	cf0ff0ef          	jal	ra,20418494 <emul>
20418fa8:	9462                	add	s0,s0,s8
20418faa:	0d51                	addi	s10,s10,20
20418fac:	10400693          	li	a3,260
20418fb0:	03bc4c33          	div	s8,s8,s11
20418fb4:	fadd14e3          	bne	s10,a3,20418f5c <_ldtoa_r+0x6cc>
20418fb8:	0130                	addi	a2,sp,136
20418fba:	0a94                	addi	a3,sp,336
20418fbc:	85a6                	mv	a1,s1
20418fbe:	8532                	mv	a0,a2
20418fc0:	e88ff0ef          	jal	ra,20418648 <ediv>
20418fc4:	be39                	j	20418ae2 <_ldtoa_r+0x252>
20418fc6:	1148                	addi	a0,sp,164
20418fc8:	c13fe0ef          	jal	ra,20417bda <eshdn1>
20418fcc:	0a615783          	lhu	a5,166(sp)
20418fd0:	0785                	addi	a5,a5,1
20418fd2:	b73d                	j	20418f00 <_ldtoa_r+0x670>
20418fd4:	10e8                	addi	a0,sp,108
20418fd6:	c3bfe0ef          	jal	ra,20417c10 <eshup1>
20418fda:	114c                	addi	a1,sp,164
20418fdc:	10e8                	addi	a0,sp,108
20418fde:	bb7fe0ef          	jal	ra,20417b94 <emovz>
20418fe2:	1148                	addi	a0,sp,164
20418fe4:	c2dfe0ef          	jal	ra,20417c10 <eshup1>
20418fe8:	1148                	addi	a0,sp,164
20418fea:	c27fe0ef          	jal	ra,20417c10 <eshup1>
20418fee:	10ec                	addi	a1,sp,108
20418ff0:	1148                	addi	a0,sp,164
20418ff2:	cdffe0ef          	jal	ra,20417cd0 <eaddm>
20418ff6:	0a90                	addi	a2,sp,336
20418ff8:	10ec                	addi	a1,sp,108
20418ffa:	0128                	addi	a0,sp,136
20418ffc:	c0cff0ef          	jal	ra,20418408 <eiremain>
20419000:	147d                	addi	s0,s0,-1
20419002:	19c15483          	lhu	s1,412(sp)
20419006:	b621                	j	20418b0e <_ldtoa_r+0x27e>
20419008:	03048493          	addi	s1,s1,48
2041900c:	02e00793          	li	a5,46
20419010:	10910aa3          	sb	s1,277(sp)
20419014:	10f10b23          	sb	a5,278(sp)
20419018:	11710c13          	addi	s8,sp,279
2041901c:	84e2                	mv	s1,s8
2041901e:	418487b3          	sub	a5,s1,s8
20419022:	04f9d063          	ble	a5,s3,20419062 <_ldtoa_r+0x7d2>
20419026:	19c15783          	lhu	a5,412(sp)
2041902a:	4711                	li	a4,4
2041902c:	fff48c13          	addi	s8,s1,-1
20419030:	b2f75fe3          	ble	a5,a4,20418b6e <_ldtoa_r+0x2de>
20419034:	4715                	li	a4,5
20419036:	06e78463          	beq	a5,a4,2041909e <_ldtoa_r+0x80e>
2041903a:	87e2                	mv	a5,s8
2041903c:	02e00613          	li	a2,46
20419040:	03800593          	li	a1,56
20419044:	03000693          	li	a3,48
20419048:	17fd                	addi	a5,a5,-1
2041904a:	0007c703          	lbu	a4,0(a5)
2041904e:	07f77713          	andi	a4,a4,127
20419052:	0809d163          	bgez	s3,204190d4 <_ldtoa_r+0x844>
20419056:	03100713          	li	a4,49
2041905a:	00e78023          	sb	a4,0(a5)
2041905e:	0405                	addi	s0,s0,1
20419060:	b639                	j	20418b6e <_ldtoa_r+0x2de>
20419062:	10e8                	addi	a0,sp,108
20419064:	badfe0ef          	jal	ra,20417c10 <eshup1>
20419068:	114c                	addi	a1,sp,164
2041906a:	10e8                	addi	a0,sp,108
2041906c:	b29fe0ef          	jal	ra,20417b94 <emovz>
20419070:	1148                	addi	a0,sp,164
20419072:	b9ffe0ef          	jal	ra,20417c10 <eshup1>
20419076:	1148                	addi	a0,sp,164
20419078:	b99fe0ef          	jal	ra,20417c10 <eshup1>
2041907c:	10ec                	addi	a1,sp,108
2041907e:	1148                	addi	a0,sp,164
20419080:	c51fe0ef          	jal	ra,20417cd0 <eaddm>
20419084:	0a90                	addi	a2,sp,336
20419086:	10ec                	addi	a1,sp,108
20419088:	0128                	addi	a0,sp,136
2041908a:	b7eff0ef          	jal	ra,20418408 <eiremain>
2041908e:	19c14783          	lbu	a5,412(sp)
20419092:	0485                	addi	s1,s1,1
20419094:	03078793          	addi	a5,a5,48
20419098:	fef48fa3          	sb	a5,-1(s1)
2041909c:	b749                	j	2041901e <_ldtoa_r+0x78e>
2041909e:	012c                	addi	a1,sp,136
204190a0:	10e8                	addi	a0,sp,108
204190a2:	834ff0ef          	jal	ra,204180d6 <emovo.isra.6>
204190a6:	b88b0593          	addi	a1,s6,-1144
204190aa:	0128                	addi	a0,sp,136
204190ac:	dcbfe0ef          	jal	ra,20417e76 <ecmp>
204190b0:	f549                	bnez	a0,2041903a <_ldtoa_r+0x7aa>
204190b2:	aa09cee3          	bltz	s3,20418b6e <_ldtoa_r+0x2de>
204190b6:	ffe4c783          	lbu	a5,-2(s1)
204190ba:	fd278793          	addi	a5,a5,-46
204190be:	0017b793          	seqz	a5,a5
204190c2:	fff7c793          	not	a5,a5
204190c6:	97e2                	add	a5,a5,s8
204190c8:	0007c783          	lbu	a5,0(a5)
204190cc:	8b85                	andi	a5,a5,1
204190ce:	aa0780e3          	beqz	a5,20418b6e <_ldtoa_r+0x2de>
204190d2:	b7a5                	j	2041903a <_ldtoa_r+0x7aa>
204190d4:	02c71063          	bne	a4,a2,204190f4 <_ldtoa_r+0x864>
204190d8:	fff7c703          	lbu	a4,-1(a5)
204190dc:	03800693          	li	a3,56
204190e0:	00e6e663          	bltu	a3,a4,204190ec <_ldtoa_r+0x85c>
204190e4:	0705                	addi	a4,a4,1
204190e6:	fee78fa3          	sb	a4,-1(a5)
204190ea:	b451                	j	20418b6e <_ldtoa_r+0x2de>
204190ec:	0405                	addi	s0,s0,1
204190ee:	03100713          	li	a4,49
204190f2:	bfd5                	j	204190e6 <_ldtoa_r+0x856>
204190f4:	00e5e663          	bltu	a1,a4,20419100 <_ldtoa_r+0x870>
204190f8:	0705                	addi	a4,a4,1
204190fa:	00e78023          	sb	a4,0(a5)
204190fe:	bc85                	j	20418b6e <_ldtoa_r+0x2de>
20419100:	00d78023          	sb	a3,0(a5)
20419104:	b791                	j	20419048 <_ldtoa_r+0x7b8>
20419106:	0405                	addi	s0,s0,1
20419108:	008ca023          	sw	s0,0(s9)
2041910c:	87ce                	mv	a5,s3
2041910e:	02e00693          	li	a3,46
20419112:	0007c703          	lbu	a4,0(a5)
20419116:	ef09                	bnez	a4,20419130 <_ldtoa_r+0x8a0>
20419118:	04500713          	li	a4,69
2041911c:	0007c683          	lbu	a3,0(a5)
20419120:	00e68463          	beq	a3,a4,20419128 <_ldtoa_r+0x898>
20419124:	02f9e363          	bltu	s3,a5,2041914a <_ldtoa_r+0x8ba>
20419128:	00078023          	sb	zero,0(a5)
2041912c:	863ff06f          	j	2041898e <_ldtoa_r+0xfe>
20419130:	00d70963          	beq	a4,a3,20419142 <_ldtoa_r+0x8b2>
20419134:	0785                	addi	a5,a5,1
20419136:	bff1                	j	20419112 <_ldtoa_r+0x882>
20419138:	0017c703          	lbu	a4,1(a5)
2041913c:	0785                	addi	a5,a5,1
2041913e:	fee78fa3          	sb	a4,-1(a5)
20419142:	0007c703          	lbu	a4,0(a5)
20419146:	fb6d                	bnez	a4,20419138 <_ldtoa_r+0x8a8>
20419148:	bfc1                	j	20419118 <_ldtoa_r+0x888>
2041914a:	17fd                	addi	a5,a5,-1
2041914c:	bfc1                	j	2041911c <_ldtoa_r+0x88c>
2041914e:	0785                	addi	a5,a5,1
20419150:	849ff06f          	j	20418998 <_ldtoa_r+0x108>
20419154:	8436                	mv	s0,a3
20419156:	851ff06f          	j	204189a6 <_ldtoa_r+0x116>
2041915a:	147d                	addi	s0,s0,-1
2041915c:	00040023          	sb	zero,0(s0)
20419160:	86fff06f          	j	204189ce <_ldtoa_r+0x13e>
20419164:	0585                	addi	a1,a1,1
20419166:	04ba2223          	sw	a1,68(s4)
2041916a:	0786                	slli	a5,a5,0x1
2041916c:	8a1ff06f          	j	20418a0c <_ldtoa_r+0x17c>
20419170:	67a1                	lui	a5,0x8
20419172:	17fd                	addi	a5,a5,-1
20419174:	a0f71be3          	bne	a4,a5,20418b8a <_ldtoa_r+0x2fa>
20419178:	46c2                	lw	a3,16(sp)
2041917a:	a00683e3          	beqz	a3,20418b80 <_ldtoa_r+0x2f0>
2041917e:	204225b7          	lui	a1,0x20422
20419182:	de458593          	addi	a1,a1,-540 # 20421de4 <emtens+0x10c>
20419186:	fd2ff06f          	j	20418958 <_ldtoa_r+0xc8>
2041918a:	47a9                	li	a5,10
2041918c:	02a00993          	li	s3,42
20419190:	e6f49ce3          	bne	s1,a5,20419008 <_ldtoa_r+0x778>
20419194:	678d                	lui	a5,0x3
20419196:	e3178793          	addi	a5,a5,-463 # 2e31 <__stack_size+0x2631>
2041919a:	10f11aa3          	sh	a5,277(sp)
2041919e:	02a00993          	li	s3,42
204191a2:	ba65                	j	20418b5a <_ldtoa_r+0x2ca>

204191a4 <_ldcheck>:
204191a4:	411c                	lw	a5,0(a0)
204191a6:	7139                	addi	sp,sp,-64
204191a8:	084c                	addi	a1,sp,20
204191aa:	c03e                	sw	a5,0(sp)
204191ac:	415c                	lw	a5,4(a0)
204191ae:	de06                	sw	ra,60(sp)
204191b0:	c23e                	sw	a5,4(sp)
204191b2:	451c                	lw	a5,8(a0)
204191b4:	c43e                	sw	a5,8(sp)
204191b6:	455c                	lw	a5,12(a0)
204191b8:	850a                	mv	a0,sp
204191ba:	c63e                	sw	a5,12(sp)
204191bc:	f69fe0ef          	jal	ra,20418124 <e113toe.isra.8>
204191c0:	02615783          	lhu	a5,38(sp)
204191c4:	4501                	li	a0,0
204191c6:	fff7c793          	not	a5,a5
204191ca:	01179713          	slli	a4,a5,0x11
204191ce:	e719                	bnez	a4,204191dc <_ldcheck+0x38>
204191d0:	0848                	addi	a0,sp,20
204191d2:	bc9fe0ef          	jal	ra,20417d9a <eisnan>
204191d6:	00153513          	seqz	a0,a0
204191da:	0505                	addi	a0,a0,1
204191dc:	50f2                	lw	ra,60(sp)
204191de:	6121                	addi	sp,sp,64
204191e0:	8082                	ret

204191e2 <__localeconv_l>:
204191e2:	0f050513          	addi	a0,a0,240
204191e6:	8082                	ret

204191e8 <_localeconv_r>:
204191e8:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
204191ec:	5bc8                	lw	a0,52(a5)
204191ee:	e509                	bnez	a0,204191f8 <_localeconv_r+0x10>
204191f0:	80000537          	lui	a0,0x80000
204191f4:	42850513          	addi	a0,a0,1064 # 80000428 <pulp__FC+0x80000429>
204191f8:	0f050513          	addi	a0,a0,240
204191fc:	8082                	ret

204191fe <localeconv>:
204191fe:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20419202:	5bc8                	lw	a0,52(a5)
20419204:	e509                	bnez	a0,2041920e <localeconv+0x10>
20419206:	80000537          	lui	a0,0x80000
2041920a:	42850513          	addi	a0,a0,1064 # 80000428 <pulp__FC+0x80000429>
2041920e:	0f050513          	addi	a0,a0,240
20419212:	8082                	ret

20419214 <__swhatbuf_r>:
20419214:	711d                	addi	sp,sp,-96
20419216:	caa6                	sw	s1,84(sp)
20419218:	84ae                	mv	s1,a1
2041921a:	00e59583          	lh	a1,14(a1)
2041921e:	cca2                	sw	s0,88(sp)
20419220:	ce86                	sw	ra,92(sp)
20419222:	8432                	mv	s0,a2
20419224:	0005dc63          	bgez	a1,2041923c <__swhatbuf_r+0x28>
20419228:	00c4d783          	lhu	a5,12(s1)
2041922c:	0006a023          	sw	zero,0(a3)
20419230:	0807f793          	andi	a5,a5,128
20419234:	eb95                	bnez	a5,20419268 <__swhatbuf_r+0x54>
20419236:	40000793          	li	a5,1024
2041923a:	a80d                	j	2041926c <__swhatbuf_r+0x58>
2041923c:	0850                	addi	a2,sp,20
2041923e:	c636                	sw	a3,12(sp)
20419240:	2a4020ef          	jal	ra,2041b4e4 <_fstat_r>
20419244:	46b2                	lw	a3,12(sp)
20419246:	fe0541e3          	bltz	a0,20419228 <__swhatbuf_r+0x14>
2041924a:	4762                	lw	a4,24(sp)
2041924c:	67bd                	lui	a5,0xf
2041924e:	6505                	lui	a0,0x1
20419250:	8ff9                	and	a5,a5,a4
20419252:	7779                	lui	a4,0xffffe
20419254:	97ba                	add	a5,a5,a4
20419256:	0017b793          	seqz	a5,a5
2041925a:	c29c                	sw	a5,0(a3)
2041925c:	40000793          	li	a5,1024
20419260:	c01c                	sw	a5,0(s0)
20419262:	80050513          	addi	a0,a0,-2048 # 800 <__stack_size>
20419266:	a029                	j	20419270 <__swhatbuf_r+0x5c>
20419268:	04000793          	li	a5,64
2041926c:	c01c                	sw	a5,0(s0)
2041926e:	4501                	li	a0,0
20419270:	40f6                	lw	ra,92(sp)
20419272:	4466                	lw	s0,88(sp)
20419274:	44d6                	lw	s1,84(sp)
20419276:	6125                	addi	sp,sp,96
20419278:	8082                	ret

2041927a <__smakebuf_r>:
2041927a:	00c5d783          	lhu	a5,12(a1)
2041927e:	1101                	addi	sp,sp,-32
20419280:	cc22                	sw	s0,24(sp)
20419282:	ce06                	sw	ra,28(sp)
20419284:	ca26                	sw	s1,20(sp)
20419286:	c84a                	sw	s2,16(sp)
20419288:	8b89                	andi	a5,a5,2
2041928a:	842e                	mv	s0,a1
2041928c:	cf89                	beqz	a5,204192a6 <__smakebuf_r+0x2c>
2041928e:	04340793          	addi	a5,s0,67
20419292:	c01c                	sw	a5,0(s0)
20419294:	c81c                	sw	a5,16(s0)
20419296:	4785                	li	a5,1
20419298:	c85c                	sw	a5,20(s0)
2041929a:	40f2                	lw	ra,28(sp)
2041929c:	4462                	lw	s0,24(sp)
2041929e:	44d2                	lw	s1,20(sp)
204192a0:	4942                	lw	s2,16(sp)
204192a2:	6105                	addi	sp,sp,32
204192a4:	8082                	ret
204192a6:	0074                	addi	a3,sp,12
204192a8:	0030                	addi	a2,sp,8
204192aa:	84aa                	mv	s1,a0
204192ac:	37a5                	jal	20419214 <__swhatbuf_r>
204192ae:	45a2                	lw	a1,8(sp)
204192b0:	892a                	mv	s2,a0
204192b2:	8526                	mv	a0,s1
204192b4:	2095                	jal	20419318 <_malloc_r>
204192b6:	ed01                	bnez	a0,204192ce <__smakebuf_r+0x54>
204192b8:	00c41783          	lh	a5,12(s0)
204192bc:	2007f713          	andi	a4,a5,512
204192c0:	ff69                	bnez	a4,2041929a <__smakebuf_r+0x20>
204192c2:	9bf1                	andi	a5,a5,-4
204192c4:	0027e793          	ori	a5,a5,2
204192c8:	00f41623          	sh	a5,12(s0)
204192cc:	b7c9                	j	2041928e <__smakebuf_r+0x14>
204192ce:	204177b7          	lui	a5,0x20417
204192d2:	26c78793          	addi	a5,a5,620 # 2041726c <_cleanup_r>
204192d6:	dcdc                	sw	a5,60(s1)
204192d8:	00c45783          	lhu	a5,12(s0)
204192dc:	c008                	sw	a0,0(s0)
204192de:	c808                	sw	a0,16(s0)
204192e0:	0807e793          	ori	a5,a5,128
204192e4:	00f41623          	sh	a5,12(s0)
204192e8:	47a2                	lw	a5,8(sp)
204192ea:	c85c                	sw	a5,20(s0)
204192ec:	47b2                	lw	a5,12(sp)
204192ee:	cf91                	beqz	a5,2041930a <__smakebuf_r+0x90>
204192f0:	00e41583          	lh	a1,14(s0)
204192f4:	8526                	mv	a0,s1
204192f6:	21e020ef          	jal	ra,2041b514 <_isatty_r>
204192fa:	c901                	beqz	a0,2041930a <__smakebuf_r+0x90>
204192fc:	00c45783          	lhu	a5,12(s0)
20419300:	9bf1                	andi	a5,a5,-4
20419302:	0017e793          	ori	a5,a5,1
20419306:	00f41623          	sh	a5,12(s0)
2041930a:	00c45783          	lhu	a5,12(s0)
2041930e:	00f96933          	or	s2,s2,a5
20419312:	01241623          	sh	s2,12(s0)
20419316:	b751                	j	2041929a <__smakebuf_r+0x20>

20419318 <_malloc_r>:
20419318:	7179                	addi	sp,sp,-48
2041931a:	d606                	sw	ra,44(sp)
2041931c:	d422                	sw	s0,40(sp)
2041931e:	d226                	sw	s1,36(sp)
20419320:	d04a                	sw	s2,32(sp)
20419322:	ce4e                	sw	s3,28(sp)
20419324:	cc52                	sw	s4,24(sp)
20419326:	ca56                	sw	s5,20(sp)
20419328:	c85a                	sw	s6,16(sp)
2041932a:	c65e                	sw	s7,12(sp)
2041932c:	c462                	sw	s8,8(sp)
2041932e:	00b58793          	addi	a5,a1,11
20419332:	4759                	li	a4,22
20419334:	02f77563          	bleu	a5,a4,2041935e <_malloc_r+0x46>
20419338:	ff87f493          	andi	s1,a5,-8
2041933c:	0204d263          	bgez	s1,20419360 <_malloc_r+0x48>
20419340:	47b1                	li	a5,12
20419342:	c11c                	sw	a5,0(a0)
20419344:	4501                	li	a0,0
20419346:	50b2                	lw	ra,44(sp)
20419348:	5422                	lw	s0,40(sp)
2041934a:	5492                	lw	s1,36(sp)
2041934c:	5902                	lw	s2,32(sp)
2041934e:	49f2                	lw	s3,28(sp)
20419350:	4a62                	lw	s4,24(sp)
20419352:	4ad2                	lw	s5,20(sp)
20419354:	4b42                	lw	s6,16(sp)
20419356:	4bb2                	lw	s7,12(sp)
20419358:	4c22                	lw	s8,8(sp)
2041935a:	6145                	addi	sp,sp,48
2041935c:	8082                	ret
2041935e:	44c1                	li	s1,16
20419360:	feb4e0e3          	bltu	s1,a1,20419340 <_malloc_r+0x28>
20419364:	89aa                	mv	s3,a0
20419366:	214d                	jal	20419808 <__malloc_lock>
20419368:	80000937          	lui	s2,0x80000
2041936c:	1f700793          	li	a5,503
20419370:	59490913          	addi	s2,s2,1428 # 80000594 <pulp__FC+0x80000595>
20419374:	0297ec63          	bltu	a5,s1,204193ac <_malloc_r+0x94>
20419378:	00848713          	addi	a4,s1,8
2041937c:	974a                	add	a4,a4,s2
2041937e:	4340                	lw	s0,4(a4)
20419380:	ff870693          	addi	a3,a4,-8 # ffffdff8 <pulp__FC+0xffffdff9>
20419384:	0034d793          	srli	a5,s1,0x3
20419388:	00d41663          	bne	s0,a3,20419394 <_malloc_r+0x7c>
2041938c:	4740                	lw	s0,12(a4)
2041938e:	0789                	addi	a5,a5,2
20419390:	04870c63          	beq	a4,s0,204193e8 <_malloc_r+0xd0>
20419394:	405c                	lw	a5,4(s0)
20419396:	4458                	lw	a4,12(s0)
20419398:	4414                	lw	a3,8(s0)
2041939a:	9bf1                	andi	a5,a5,-4
2041939c:	97a2                	add	a5,a5,s0
2041939e:	c6d8                	sw	a4,12(a3)
204193a0:	c714                	sw	a3,8(a4)
204193a2:	43d8                	lw	a4,4(a5)
204193a4:	00176713          	ori	a4,a4,1
204193a8:	c3d8                	sw	a4,4(a5)
204193aa:	a041                	j	2041942a <_malloc_r+0x112>
204193ac:	0094d713          	srli	a4,s1,0x9
204193b0:	03f00793          	li	a5,63
204193b4:	cb01                	beqz	a4,204193c4 <_malloc_r+0xac>
204193b6:	4791                	li	a5,4
204193b8:	06e7ee63          	bltu	a5,a4,20419434 <_malloc_r+0x11c>
204193bc:	0064d793          	srli	a5,s1,0x6
204193c0:	03878793          	addi	a5,a5,56
204193c4:	00178713          	addi	a4,a5,1
204193c8:	070e                	slli	a4,a4,0x3
204193ca:	974a                	add	a4,a4,s2
204193cc:	4340                	lw	s0,4(a4)
204193ce:	ff870593          	addi	a1,a4,-8
204193d2:	453d                	li	a0,15
204193d4:	00b40963          	beq	s0,a1,204193e6 <_malloc_r+0xce>
204193d8:	4058                	lw	a4,4(s0)
204193da:	9b71                	andi	a4,a4,-4
204193dc:	40970633          	sub	a2,a4,s1
204193e0:	08c55d63          	ble	a2,a0,2041947a <_malloc_r+0x162>
204193e4:	17fd                	addi	a5,a5,-1
204193e6:	0785                	addi	a5,a5,1
204193e8:	01092403          	lw	s0,16(s2)
204193ec:	800005b7          	lui	a1,0x80000
204193f0:	00890693          	addi	a3,s2,8
204193f4:	59c58593          	addi	a1,a1,1436 # 8000059c <pulp__FC+0x8000059d>
204193f8:	0ed40263          	beq	s0,a3,204194dc <_malloc_r+0x1c4>
204193fc:	4058                	lw	a4,4(s0)
204193fe:	463d                	li	a2,15
20419400:	9b71                	andi	a4,a4,-4
20419402:	40970533          	sub	a0,a4,s1
20419406:	08a65563          	ble	a0,a2,20419490 <_malloc_r+0x178>
2041940a:	0014e793          	ori	a5,s1,1
2041940e:	c05c                	sw	a5,4(s0)
20419410:	00940633          	add	a2,s0,s1
20419414:	00c92a23          	sw	a2,20(s2)
20419418:	00c92823          	sw	a2,16(s2)
2041941c:	00156793          	ori	a5,a0,1
20419420:	c654                	sw	a3,12(a2)
20419422:	c614                	sw	a3,8(a2)
20419424:	c25c                	sw	a5,4(a2)
20419426:	9722                	add	a4,a4,s0
20419428:	c308                	sw	a0,0(a4)
2041942a:	854e                	mv	a0,s3
2041942c:	2ef9                	jal	2041980a <__malloc_unlock>
2041942e:	00840513          	addi	a0,s0,8
20419432:	bf11                	j	20419346 <_malloc_r+0x2e>
20419434:	47d1                	li	a5,20
20419436:	00e7e563          	bltu	a5,a4,20419440 <_malloc_r+0x128>
2041943a:	05b70793          	addi	a5,a4,91
2041943e:	b759                	j	204193c4 <_malloc_r+0xac>
20419440:	05400793          	li	a5,84
20419444:	00e7e763          	bltu	a5,a4,20419452 <_malloc_r+0x13a>
20419448:	00c4d793          	srli	a5,s1,0xc
2041944c:	06e78793          	addi	a5,a5,110
20419450:	bf95                	j	204193c4 <_malloc_r+0xac>
20419452:	15400793          	li	a5,340
20419456:	00e7e763          	bltu	a5,a4,20419464 <_malloc_r+0x14c>
2041945a:	00f4d793          	srli	a5,s1,0xf
2041945e:	07778793          	addi	a5,a5,119
20419462:	b78d                	j	204193c4 <_malloc_r+0xac>
20419464:	55400693          	li	a3,1364
20419468:	07e00793          	li	a5,126
2041946c:	f4e6ece3          	bltu	a3,a4,204193c4 <_malloc_r+0xac>
20419470:	0124d793          	srli	a5,s1,0x12
20419474:	07c78793          	addi	a5,a5,124
20419478:	b7b1                	j	204193c4 <_malloc_r+0xac>
2041947a:	4454                	lw	a3,12(s0)
2041947c:	00064863          	bltz	a2,2041948c <_malloc_r+0x174>
20419480:	441c                	lw	a5,8(s0)
20419482:	c7d4                	sw	a3,12(a5)
20419484:	c69c                	sw	a5,8(a3)
20419486:	00e407b3          	add	a5,s0,a4
2041948a:	bf21                	j	204193a2 <_malloc_r+0x8a>
2041948c:	8436                	mv	s0,a3
2041948e:	b799                	j	204193d4 <_malloc_r+0xbc>
20419490:	00d92a23          	sw	a3,20(s2)
20419494:	00d92823          	sw	a3,16(s2)
20419498:	00054863          	bltz	a0,204194a8 <_malloc_r+0x190>
2041949c:	9722                	add	a4,a4,s0
2041949e:	435c                	lw	a5,4(a4)
204194a0:	0017e793          	ori	a5,a5,1
204194a4:	c35c                	sw	a5,4(a4)
204194a6:	b751                	j	2041942a <_malloc_r+0x112>
204194a8:	1ff00693          	li	a3,511
204194ac:	00492803          	lw	a6,4(s2)
204194b0:	10e6ef63          	bltu	a3,a4,204195ce <_malloc_r+0x2b6>
204194b4:	830d                	srli	a4,a4,0x3
204194b6:	40275613          	srai	a2,a4,0x2
204194ba:	4685                	li	a3,1
204194bc:	0705                	addi	a4,a4,1
204194be:	00c696b3          	sll	a3,a3,a2
204194c2:	070e                	slli	a4,a4,0x3
204194c4:	974a                	add	a4,a4,s2
204194c6:	0106e6b3          	or	a3,a3,a6
204194ca:	00d92223          	sw	a3,4(s2)
204194ce:	4314                	lw	a3,0(a4)
204194d0:	ff870613          	addi	a2,a4,-8
204194d4:	c450                	sw	a2,12(s0)
204194d6:	c414                	sw	a3,8(s0)
204194d8:	c300                	sw	s0,0(a4)
204194da:	c6c0                	sw	s0,12(a3)
204194dc:	4027d713          	srai	a4,a5,0x2
204194e0:	4305                	li	t1,1
204194e2:	00e31333          	sll	t1,t1,a4
204194e6:	00492703          	lw	a4,4(s2)
204194ea:	04676c63          	bltu	a4,t1,20419542 <_malloc_r+0x22a>
204194ee:	006776b3          	and	a3,a4,t1
204194f2:	e699                	bnez	a3,20419500 <_malloc_r+0x1e8>
204194f4:	9bf1                	andi	a5,a5,-4
204194f6:	0306                	slli	t1,t1,0x1
204194f8:	006776b3          	and	a3,a4,t1
204194fc:	0791                	addi	a5,a5,4
204194fe:	dee5                	beqz	a3,204194f6 <_malloc_r+0x1de>
20419500:	4e3d                	li	t3,15
20419502:	00379693          	slli	a3,a5,0x3
20419506:	96ca                	add	a3,a3,s2
20419508:	8836                	mv	a6,a3
2041950a:	853e                	mv	a0,a5
2041950c:	00c82403          	lw	s0,12(a6)
20419510:	15041a63          	bne	s0,a6,20419664 <_malloc_r+0x34c>
20419514:	0505                	addi	a0,a0,1
20419516:	00357713          	andi	a4,a0,3
2041951a:	0821                	addi	a6,a6,8
2041951c:	fb65                	bnez	a4,2041950c <_malloc_r+0x1f4>
2041951e:	0037f713          	andi	a4,a5,3
20419522:	18071a63          	bnez	a4,204196b6 <_malloc_r+0x39e>
20419526:	00492703          	lw	a4,4(s2)
2041952a:	fff34793          	not	a5,t1
2041952e:	8ff9                	and	a5,a5,a4
20419530:	00f92223          	sw	a5,4(s2)
20419534:	00492703          	lw	a4,4(s2)
20419538:	0306                	slli	t1,t1,0x1
2041953a:	00676463          	bltu	a4,t1,20419542 <_malloc_r+0x22a>
2041953e:	18031963          	bnez	t1,204196d0 <_malloc_r+0x3b8>
20419542:	00892b83          	lw	s7,8(s2)
20419546:	004ba403          	lw	s0,4(s7) # 80000004 <pulp__FC+0x80000005>
2041954a:	ffc47a93          	andi	s5,s0,-4
2041954e:	009ae763          	bltu	s5,s1,2041955c <_malloc_r+0x244>
20419552:	409a8733          	sub	a4,s5,s1
20419556:	47bd                	li	a5,15
20419558:	24e7c263          	blt	a5,a4,2041979c <_malloc_r+0x484>
2041955c:	8cc1a403          	lw	s0,-1844(gp) # 80000a6c <__malloc_top_pad>
20419560:	89c1a703          	lw	a4,-1892(gp) # 80000a3c <__malloc_sbrk_base>
20419564:	57fd                	li	a5,-1
20419566:	9426                	add	s0,s0,s1
20419568:	16f71663          	bne	a4,a5,204196d4 <_malloc_r+0x3bc>
2041956c:	0441                	addi	s0,s0,16
2041956e:	85a2                	mv	a1,s0
20419570:	854e                	mv	a0,s3
20419572:	77b000ef          	jal	ra,2041a4ec <_sbrk_r>
20419576:	57fd                	li	a5,-1
20419578:	8b2a                	mv	s6,a0
2041957a:	1cf50763          	beq	a0,a5,20419748 <_malloc_r+0x430>
2041957e:	015b87b3          	add	a5,s7,s5
20419582:	00f57463          	bleu	a5,a0,2041958a <_malloc_r+0x272>
20419586:	1d2b9163          	bne	s7,s2,20419748 <_malloc_r+0x430>
2041958a:	d1c18693          	addi	a3,gp,-740 # 80000ebc <__malloc_current_mallinfo>
2041958e:	4298                	lw	a4,0(a3)
20419590:	d1c18c13          	addi	s8,gp,-740 # 80000ebc <__malloc_current_mallinfo>
20419594:	9722                	add	a4,a4,s0
20419596:	c298                	sw	a4,0(a3)
20419598:	15679463          	bne	a5,s6,204196e0 <_malloc_r+0x3c8>
2041959c:	01479693          	slli	a3,a5,0x14
204195a0:	14069063          	bnez	a3,204196e0 <_malloc_r+0x3c8>
204195a4:	00892783          	lw	a5,8(s2)
204195a8:	9456                	add	s0,s0,s5
204195aa:	00146413          	ori	s0,s0,1
204195ae:	c3c0                	sw	s0,4(a5)
204195b0:	000c2783          	lw	a5,0(s8) # fffff000 <pulp__FC+0xfffff001>
204195b4:	8c81a683          	lw	a3,-1848(gp) # 80000a68 <__malloc_max_sbrked_mem>
204195b8:	00f6f463          	bleu	a5,a3,204195c0 <_malloc_r+0x2a8>
204195bc:	8cf1a423          	sw	a5,-1848(gp) # 80000a68 <__malloc_max_sbrked_mem>
204195c0:	8c41a683          	lw	a3,-1852(gp) # 80000a64 <__malloc_max_total_mem>
204195c4:	18f6f263          	bleu	a5,a3,20419748 <_malloc_r+0x430>
204195c8:	8cf1a223          	sw	a5,-1852(gp) # 80000a64 <__malloc_max_total_mem>
204195cc:	aab5                	j	20419748 <_malloc_r+0x430>
204195ce:	00975613          	srli	a2,a4,0x9
204195d2:	4691                	li	a3,4
204195d4:	02c6ec63          	bltu	a3,a2,2041960c <_malloc_r+0x2f4>
204195d8:	00675693          	srli	a3,a4,0x6
204195dc:	03868693          	addi	a3,a3,56
204195e0:	00168613          	addi	a2,a3,1
204195e4:	060e                	slli	a2,a2,0x3
204195e6:	964a                	add	a2,a2,s2
204195e8:	ff860513          	addi	a0,a2,-8
204195ec:	4210                	lw	a2,0(a2)
204195ee:	06c51563          	bne	a0,a2,20419658 <_malloc_r+0x340>
204195f2:	8689                	srai	a3,a3,0x2
204195f4:	4705                	li	a4,1
204195f6:	00d716b3          	sll	a3,a4,a3
204195fa:	0106e6b3          	or	a3,a3,a6
204195fe:	00d92223          	sw	a3,4(s2)
20419602:	c448                	sw	a0,12(s0)
20419604:	c410                	sw	a2,8(s0)
20419606:	c500                	sw	s0,8(a0)
20419608:	c640                	sw	s0,12(a2)
2041960a:	bdc9                	j	204194dc <_malloc_r+0x1c4>
2041960c:	46d1                	li	a3,20
2041960e:	00c6e563          	bltu	a3,a2,20419618 <_malloc_r+0x300>
20419612:	05b60693          	addi	a3,a2,91
20419616:	b7e9                	j	204195e0 <_malloc_r+0x2c8>
20419618:	05400693          	li	a3,84
2041961c:	00c6e763          	bltu	a3,a2,2041962a <_malloc_r+0x312>
20419620:	00c75693          	srli	a3,a4,0xc
20419624:	06e68693          	addi	a3,a3,110
20419628:	bf65                	j	204195e0 <_malloc_r+0x2c8>
2041962a:	15400693          	li	a3,340
2041962e:	00c6e763          	bltu	a3,a2,2041963c <_malloc_r+0x324>
20419632:	00f75693          	srli	a3,a4,0xf
20419636:	07768693          	addi	a3,a3,119
2041963a:	b75d                	j	204195e0 <_malloc_r+0x2c8>
2041963c:	55400513          	li	a0,1364
20419640:	07e00693          	li	a3,126
20419644:	f8c56ee3          	bltu	a0,a2,204195e0 <_malloc_r+0x2c8>
20419648:	01275693          	srli	a3,a4,0x12
2041964c:	07c68693          	addi	a3,a3,124
20419650:	bf41                	j	204195e0 <_malloc_r+0x2c8>
20419652:	4610                	lw	a2,8(a2)
20419654:	00c50663          	beq	a0,a2,20419660 <_malloc_r+0x348>
20419658:	4254                	lw	a3,4(a2)
2041965a:	9af1                	andi	a3,a3,-4
2041965c:	fed76be3          	bltu	a4,a3,20419652 <_malloc_r+0x33a>
20419660:	4648                	lw	a0,12(a2)
20419662:	b745                	j	20419602 <_malloc_r+0x2ea>
20419664:	4058                	lw	a4,4(s0)
20419666:	4450                	lw	a2,12(s0)
20419668:	9b71                	andi	a4,a4,-4
2041966a:	409708b3          	sub	a7,a4,s1
2041966e:	031e5763          	ble	a7,t3,2041969c <_malloc_r+0x384>
20419672:	0014e793          	ori	a5,s1,1
20419676:	c05c                	sw	a5,4(s0)
20419678:	441c                	lw	a5,8(s0)
2041967a:	009406b3          	add	a3,s0,s1
2041967e:	9722                	add	a4,a4,s0
20419680:	c7d0                	sw	a2,12(a5)
20419682:	c61c                	sw	a5,8(a2)
20419684:	00d92a23          	sw	a3,20(s2)
20419688:	00d92823          	sw	a3,16(s2)
2041968c:	0018e793          	ori	a5,a7,1
20419690:	c6cc                	sw	a1,12(a3)
20419692:	c68c                	sw	a1,8(a3)
20419694:	c2dc                	sw	a5,4(a3)
20419696:	01172023          	sw	a7,0(a4)
2041969a:	bb41                	j	2041942a <_malloc_r+0x112>
2041969c:	0008cb63          	bltz	a7,204196b2 <_malloc_r+0x39a>
204196a0:	9722                	add	a4,a4,s0
204196a2:	435c                	lw	a5,4(a4)
204196a4:	0017e793          	ori	a5,a5,1
204196a8:	c35c                	sw	a5,4(a4)
204196aa:	441c                	lw	a5,8(s0)
204196ac:	c7d0                	sw	a2,12(a5)
204196ae:	c61c                	sw	a5,8(a2)
204196b0:	bbad                	j	2041942a <_malloc_r+0x112>
204196b2:	8432                	mv	s0,a2
204196b4:	bdb1                	j	20419510 <_malloc_r+0x1f8>
204196b6:	ff868713          	addi	a4,a3,-8
204196ba:	4294                	lw	a3,0(a3)
204196bc:	17fd                	addi	a5,a5,-1
204196be:	e6e680e3          	beq	a3,a4,2041951e <_malloc_r+0x206>
204196c2:	bd8d                	j	20419534 <_malloc_r+0x21c>
204196c4:	0791                	addi	a5,a5,4
204196c6:	0306                	slli	t1,t1,0x1
204196c8:	006776b3          	and	a3,a4,t1
204196cc:	dee5                	beqz	a3,204196c4 <_malloc_r+0x3ac>
204196ce:	bd15                	j	20419502 <_malloc_r+0x1ea>
204196d0:	87aa                	mv	a5,a0
204196d2:	bfdd                	j	204196c8 <_malloc_r+0x3b0>
204196d4:	6785                	lui	a5,0x1
204196d6:	07bd                	addi	a5,a5,15
204196d8:	943e                	add	s0,s0,a5
204196da:	77fd                	lui	a5,0xfffff
204196dc:	8c7d                	and	s0,s0,a5
204196de:	bd41                	j	2041956e <_malloc_r+0x256>
204196e0:	89c1a603          	lw	a2,-1892(gp) # 80000a3c <__malloc_sbrk_base>
204196e4:	56fd                	li	a3,-1
204196e6:	06d61f63          	bne	a2,a3,20419764 <_malloc_r+0x44c>
204196ea:	8961ae23          	sw	s6,-1892(gp) # 80000a3c <__malloc_sbrk_base>
204196ee:	007b7593          	andi	a1,s6,7
204196f2:	c589                	beqz	a1,204196fc <_malloc_r+0x3e4>
204196f4:	47a1                	li	a5,8
204196f6:	40b785b3          	sub	a1,a5,a1
204196fa:	9b2e                	add	s6,s6,a1
204196fc:	6785                	lui	a5,0x1
204196fe:	95be                	add	a1,a1,a5
20419700:	945a                	add	s0,s0,s6
20419702:	17fd                	addi	a5,a5,-1
20419704:	8c7d                	and	s0,s0,a5
20419706:	40858a33          	sub	s4,a1,s0
2041970a:	85d2                	mv	a1,s4
2041970c:	854e                	mv	a0,s3
2041970e:	5df000ef          	jal	ra,2041a4ec <_sbrk_r>
20419712:	57fd                	li	a5,-1
20419714:	00f51463          	bne	a0,a5,2041971c <_malloc_r+0x404>
20419718:	855a                	mv	a0,s6
2041971a:	4a01                	li	s4,0
2041971c:	000c2783          	lw	a5,0(s8)
20419720:	41650533          	sub	a0,a0,s6
20419724:	01692423          	sw	s6,8(s2)
20419728:	97d2                	add	a5,a5,s4
2041972a:	9a2a                	add	s4,s4,a0
2041972c:	001a6a13          	ori	s4,s4,1
20419730:	00fc2023          	sw	a5,0(s8)
20419734:	014b2223          	sw	s4,4(s6)
20419738:	e72b8ce3          	beq	s7,s2,204195b0 <_malloc_r+0x298>
2041973c:	473d                	li	a4,15
2041973e:	03576963          	bltu	a4,s5,20419770 <_malloc_r+0x458>
20419742:	4785                	li	a5,1
20419744:	00fb2223          	sw	a5,4(s6)
20419748:	00892783          	lw	a5,8(s2)
2041974c:	43dc                	lw	a5,4(a5)
2041974e:	9bf1                	andi	a5,a5,-4
20419750:	40978733          	sub	a4,a5,s1
20419754:	0097e563          	bltu	a5,s1,2041975e <_malloc_r+0x446>
20419758:	47bd                	li	a5,15
2041975a:	04e7c163          	blt	a5,a4,2041979c <_malloc_r+0x484>
2041975e:	854e                	mv	a0,s3
20419760:	206d                	jal	2041980a <__malloc_unlock>
20419762:	b6cd                	j	20419344 <_malloc_r+0x2c>
20419764:	40fb07b3          	sub	a5,s6,a5
20419768:	97ba                	add	a5,a5,a4
2041976a:	00fc2023          	sw	a5,0(s8)
2041976e:	b741                	j	204196ee <_malloc_r+0x3d6>
20419770:	004ba783          	lw	a5,4(s7)
20419774:	ff4a8413          	addi	s0,s5,-12
20419778:	9861                	andi	s0,s0,-8
2041977a:	8b85                	andi	a5,a5,1
2041977c:	8fc1                	or	a5,a5,s0
2041977e:	00fba223          	sw	a5,4(s7)
20419782:	4695                	li	a3,5
20419784:	008b87b3          	add	a5,s7,s0
20419788:	c3d4                	sw	a3,4(a5)
2041978a:	c794                	sw	a3,8(a5)
2041978c:	e28772e3          	bleu	s0,a4,204195b0 <_malloc_r+0x298>
20419790:	008b8593          	addi	a1,s7,8
20419794:	854e                	mv	a0,s3
20419796:	e6bfd0ef          	jal	ra,20417600 <_free_r>
2041979a:	bd19                	j	204195b0 <_malloc_r+0x298>
2041979c:	00892403          	lw	s0,8(s2)
204197a0:	0014e793          	ori	a5,s1,1
204197a4:	c05c                	sw	a5,4(s0)
204197a6:	009407b3          	add	a5,s0,s1
204197aa:	00f92423          	sw	a5,8(s2)
204197ae:	bedd                	j	204193a4 <_malloc_r+0x8c>

204197b0 <memchr>:
204197b0:	0ff5f593          	andi	a1,a1,255
204197b4:	962a                	add	a2,a2,a0
204197b6:	00c51463          	bne	a0,a2,204197be <memchr+0xe>
204197ba:	4501                	li	a0,0
204197bc:	8082                	ret
204197be:	00054783          	lbu	a5,0(a0)
204197c2:	feb78de3          	beq	a5,a1,204197bc <memchr+0xc>
204197c6:	0505                	addi	a0,a0,1
204197c8:	b7fd                	j	204197b6 <memchr+0x6>

204197ca <memmove>:
204197ca:	00c50733          	add	a4,a0,a2
204197ce:	00a5e663          	bltu	a1,a0,204197da <memmove+0x10>
204197d2:	87aa                	mv	a5,a0
204197d4:	02f71363          	bne	a4,a5,204197fa <memmove+0x30>
204197d8:	8082                	ret
204197da:	00c587b3          	add	a5,a1,a2
204197de:	8e1d                	sub	a2,a2,a5
204197e0:	fef579e3          	bleu	a5,a0,204197d2 <memmove+0x8>
204197e4:	00c786b3          	add	a3,a5,a2
204197e8:	e291                	bnez	a3,204197ec <memmove+0x22>
204197ea:	8082                	ret
204197ec:	17fd                	addi	a5,a5,-1
204197ee:	0007c683          	lbu	a3,0(a5) # 1000 <__stack_size+0x800>
204197f2:	177d                	addi	a4,a4,-1
204197f4:	00d70023          	sb	a3,0(a4)
204197f8:	b7f5                	j	204197e4 <memmove+0x1a>
204197fa:	0585                	addi	a1,a1,1
204197fc:	fff5c683          	lbu	a3,-1(a1)
20419800:	0785                	addi	a5,a5,1
20419802:	fed78fa3          	sb	a3,-1(a5)
20419806:	b7f9                	j	204197d4 <memmove+0xa>

20419808 <__malloc_lock>:
20419808:	8082                	ret

2041980a <__malloc_unlock>:
2041980a:	8082                	ret

2041980c <_Balloc>:
2041980c:	457c                	lw	a5,76(a0)
2041980e:	1141                	addi	sp,sp,-16
20419810:	c226                	sw	s1,4(sp)
20419812:	c04a                	sw	s2,0(sp)
20419814:	c606                	sw	ra,12(sp)
20419816:	c422                	sw	s0,8(sp)
20419818:	84aa                	mv	s1,a0
2041981a:	892e                	mv	s2,a1
2041981c:	c795                	beqz	a5,20419848 <_Balloc+0x3c>
2041981e:	44f8                	lw	a4,76(s1)
20419820:	00291793          	slli	a5,s2,0x2
20419824:	97ba                	add	a5,a5,a4
20419826:	4388                	lw	a0,0(a5)
20419828:	ed15                	bnez	a0,20419864 <_Balloc+0x58>
2041982a:	4405                	li	s0,1
2041982c:	01241433          	sll	s0,s0,s2
20419830:	00540613          	addi	a2,s0,5
20419834:	060a                	slli	a2,a2,0x2
20419836:	4585                	li	a1,1
20419838:	8526                	mv	a0,s1
2041983a:	36f010ef          	jal	ra,2041b3a8 <_calloc_r>
2041983e:	cd01                	beqz	a0,20419856 <_Balloc+0x4a>
20419840:	01252223          	sw	s2,4(a0)
20419844:	c500                	sw	s0,8(a0)
20419846:	a00d                	j	20419868 <_Balloc+0x5c>
20419848:	02100613          	li	a2,33
2041984c:	4591                	li	a1,4
2041984e:	35b010ef          	jal	ra,2041b3a8 <_calloc_r>
20419852:	c4e8                	sw	a0,76(s1)
20419854:	f569                	bnez	a0,2041981e <_Balloc+0x12>
20419856:	4501                	li	a0,0
20419858:	40b2                	lw	ra,12(sp)
2041985a:	4422                	lw	s0,8(sp)
2041985c:	4492                	lw	s1,4(sp)
2041985e:	4902                	lw	s2,0(sp)
20419860:	0141                	addi	sp,sp,16
20419862:	8082                	ret
20419864:	4118                	lw	a4,0(a0)
20419866:	c398                	sw	a4,0(a5)
20419868:	00052823          	sw	zero,16(a0)
2041986c:	00052623          	sw	zero,12(a0)
20419870:	b7e5                	j	20419858 <_Balloc+0x4c>

20419872 <_Bfree>:
20419872:	c989                	beqz	a1,20419884 <_Bfree+0x12>
20419874:	41dc                	lw	a5,4(a1)
20419876:	00279713          	slli	a4,a5,0x2
2041987a:	457c                	lw	a5,76(a0)
2041987c:	97ba                	add	a5,a5,a4
2041987e:	4398                	lw	a4,0(a5)
20419880:	c198                	sw	a4,0(a1)
20419882:	c38c                	sw	a1,0(a5)
20419884:	8082                	ret

20419886 <__multadd>:
20419886:	7179                	addi	sp,sp,-48
20419888:	ce4e                	sw	s3,28(sp)
2041988a:	89aa                	mv	s3,a0
2041988c:	6541                	lui	a0,0x10
2041988e:	d422                	sw	s0,40(sp)
20419890:	d226                	sw	s1,36(sp)
20419892:	842e                	mv	s0,a1
20419894:	4984                	lw	s1,16(a1)
20419896:	d606                	sw	ra,44(sp)
20419898:	d04a                	sw	s2,32(sp)
2041989a:	05d1                	addi	a1,a1,20
2041989c:	4801                	li	a6,0
2041989e:	157d                	addi	a0,a0,-1
204198a0:	419c                	lw	a5,0(a1)
204198a2:	0591                	addi	a1,a1,4
204198a4:	0805                	addi	a6,a6,1
204198a6:	00a7f733          	and	a4,a5,a0
204198aa:	02c70733          	mul	a4,a4,a2
204198ae:	83c1                	srli	a5,a5,0x10
204198b0:	02c787b3          	mul	a5,a5,a2
204198b4:	9736                	add	a4,a4,a3
204198b6:	01075693          	srli	a3,a4,0x10
204198ba:	8f69                	and	a4,a4,a0
204198bc:	97b6                	add	a5,a5,a3
204198be:	0107d693          	srli	a3,a5,0x10
204198c2:	07c2                	slli	a5,a5,0x10
204198c4:	97ba                	add	a5,a5,a4
204198c6:	fef5ae23          	sw	a5,-4(a1)
204198ca:	fc984be3          	blt	a6,s1,204198a0 <__multadd+0x1a>
204198ce:	ce95                	beqz	a3,2041990a <__multadd+0x84>
204198d0:	441c                	lw	a5,8(s0)
204198d2:	02f4c563          	blt	s1,a5,204198fc <__multadd+0x76>
204198d6:	404c                	lw	a1,4(s0)
204198d8:	854e                	mv	a0,s3
204198da:	c636                	sw	a3,12(sp)
204198dc:	0585                	addi	a1,a1,1
204198de:	373d                	jal	2041980c <_Balloc>
204198e0:	4810                	lw	a2,16(s0)
204198e2:	00c40593          	addi	a1,s0,12
204198e6:	892a                	mv	s2,a0
204198e8:	0609                	addi	a2,a2,2
204198ea:	060a                	slli	a2,a2,0x2
204198ec:	0531                	addi	a0,a0,12
204198ee:	f02f90ef          	jal	ra,20412ff0 <memcpy>
204198f2:	85a2                	mv	a1,s0
204198f4:	854e                	mv	a0,s3
204198f6:	3fb5                	jal	20419872 <_Bfree>
204198f8:	46b2                	lw	a3,12(sp)
204198fa:	844a                	mv	s0,s2
204198fc:	00448793          	addi	a5,s1,4
20419900:	078a                	slli	a5,a5,0x2
20419902:	97a2                	add	a5,a5,s0
20419904:	c3d4                	sw	a3,4(a5)
20419906:	0485                	addi	s1,s1,1
20419908:	c804                	sw	s1,16(s0)
2041990a:	8522                	mv	a0,s0
2041990c:	50b2                	lw	ra,44(sp)
2041990e:	5422                	lw	s0,40(sp)
20419910:	5492                	lw	s1,36(sp)
20419912:	5902                	lw	s2,32(sp)
20419914:	49f2                	lw	s3,28(sp)
20419916:	6145                	addi	sp,sp,48
20419918:	8082                	ret

2041991a <__s2b>:
2041991a:	7179                	addi	sp,sp,-48
2041991c:	00868793          	addi	a5,a3,8
20419920:	cc52                	sw	s4,24(sp)
20419922:	8a36                	mv	s4,a3
20419924:	46a5                	li	a3,9
20419926:	d422                	sw	s0,40(sp)
20419928:	d226                	sw	s1,36(sp)
2041992a:	ce4e                	sw	s3,28(sp)
2041992c:	842e                	mv	s0,a1
2041992e:	02d7c7b3          	div	a5,a5,a3
20419932:	d606                	sw	ra,44(sp)
20419934:	d04a                	sw	s2,32(sp)
20419936:	ca56                	sw	s5,20(sp)
20419938:	89aa                	mv	s3,a0
2041993a:	84b2                	mv	s1,a2
2041993c:	4685                	li	a3,1
2041993e:	4581                	li	a1,0
20419940:	04f6cc63          	blt	a3,a5,20419998 <__s2b+0x7e>
20419944:	854e                	mv	a0,s3
20419946:	c63a                	sw	a4,12(sp)
20419948:	35d1                	jal	2041980c <_Balloc>
2041994a:	4732                	lw	a4,12(sp)
2041994c:	4785                	li	a5,1
2041994e:	c91c                	sw	a5,16(a0)
20419950:	c958                	sw	a4,20(a0)
20419952:	47a5                	li	a5,9
20419954:	0497d563          	ble	s1,a5,2041999e <__s2b+0x84>
20419958:	00940a93          	addi	s5,s0,9
2041995c:	8956                	mv	s2,s5
2041995e:	9426                	add	s0,s0,s1
20419960:	0905                	addi	s2,s2,1
20419962:	fff94683          	lbu	a3,-1(s2)
20419966:	85aa                	mv	a1,a0
20419968:	4629                	li	a2,10
2041996a:	fd068693          	addi	a3,a3,-48
2041996e:	854e                	mv	a0,s3
20419970:	3f19                	jal	20419886 <__multadd>
20419972:	fe8917e3          	bne	s2,s0,20419960 <__s2b+0x46>
20419976:	ff848413          	addi	s0,s1,-8
2041997a:	9456                	add	s0,s0,s5
2041997c:	8c81                	sub	s1,s1,s0
2041997e:	009407b3          	add	a5,s0,s1
20419982:	0347c163          	blt	a5,s4,204199a4 <__s2b+0x8a>
20419986:	50b2                	lw	ra,44(sp)
20419988:	5422                	lw	s0,40(sp)
2041998a:	5492                	lw	s1,36(sp)
2041998c:	5902                	lw	s2,32(sp)
2041998e:	49f2                	lw	s3,28(sp)
20419990:	4a62                	lw	s4,24(sp)
20419992:	4ad2                	lw	s5,20(sp)
20419994:	6145                	addi	sp,sp,48
20419996:	8082                	ret
20419998:	0686                	slli	a3,a3,0x1
2041999a:	0585                	addi	a1,a1,1
2041999c:	b755                	j	20419940 <__s2b+0x26>
2041999e:	0429                	addi	s0,s0,10
204199a0:	44a5                	li	s1,9
204199a2:	bfe9                	j	2041997c <__s2b+0x62>
204199a4:	0405                	addi	s0,s0,1
204199a6:	fff44683          	lbu	a3,-1(s0)
204199aa:	85aa                	mv	a1,a0
204199ac:	4629                	li	a2,10
204199ae:	fd068693          	addi	a3,a3,-48
204199b2:	854e                	mv	a0,s3
204199b4:	3dc9                	jal	20419886 <__multadd>
204199b6:	b7e1                	j	2041997e <__s2b+0x64>

204199b8 <__hi0bits>:
204199b8:	7741                	lui	a4,0xffff0
204199ba:	8f69                	and	a4,a4,a0
204199bc:	87aa                	mv	a5,a0
204199be:	4501                	li	a0,0
204199c0:	e319                	bnez	a4,204199c6 <__hi0bits+0xe>
204199c2:	07c2                	slli	a5,a5,0x10
204199c4:	4541                	li	a0,16
204199c6:	ff000737          	lui	a4,0xff000
204199ca:	8f7d                	and	a4,a4,a5
204199cc:	e319                	bnez	a4,204199d2 <__hi0bits+0x1a>
204199ce:	0521                	addi	a0,a0,8
204199d0:	07a2                	slli	a5,a5,0x8
204199d2:	f0000737          	lui	a4,0xf0000
204199d6:	8f7d                	and	a4,a4,a5
204199d8:	e319                	bnez	a4,204199de <__hi0bits+0x26>
204199da:	0511                	addi	a0,a0,4
204199dc:	0792                	slli	a5,a5,0x4
204199de:	c0000737          	lui	a4,0xc0000
204199e2:	8f7d                	and	a4,a4,a5
204199e4:	e319                	bnez	a4,204199ea <__hi0bits+0x32>
204199e6:	0509                	addi	a0,a0,2
204199e8:	078a                	slli	a5,a5,0x2
204199ea:	0007ca63          	bltz	a5,204199fe <__hi0bits+0x46>
204199ee:	00179713          	slli	a4,a5,0x1
204199f2:	00075463          	bgez	a4,204199fa <__hi0bits+0x42>
204199f6:	0505                	addi	a0,a0,1
204199f8:	8082                	ret
204199fa:	02000513          	li	a0,32
204199fe:	8082                	ret

20419a00 <__lo0bits>:
20419a00:	411c                	lw	a5,0(a0)
20419a02:	0077f713          	andi	a4,a5,7
20419a06:	c30d                	beqz	a4,20419a28 <__lo0bits+0x28>
20419a08:	0017f693          	andi	a3,a5,1
20419a0c:	4701                	li	a4,0
20419a0e:	e699                	bnez	a3,20419a1c <__lo0bits+0x1c>
20419a10:	0027f713          	andi	a4,a5,2
20419a14:	c711                	beqz	a4,20419a20 <__lo0bits+0x20>
20419a16:	8385                	srli	a5,a5,0x1
20419a18:	c11c                	sw	a5,0(a0)
20419a1a:	4705                	li	a4,1
20419a1c:	853a                	mv	a0,a4
20419a1e:	8082                	ret
20419a20:	8389                	srli	a5,a5,0x2
20419a22:	c11c                	sw	a5,0(a0)
20419a24:	4709                	li	a4,2
20419a26:	bfdd                	j	20419a1c <__lo0bits+0x1c>
20419a28:	01079693          	slli	a3,a5,0x10
20419a2c:	82c1                	srli	a3,a3,0x10
20419a2e:	4701                	li	a4,0
20419a30:	e299                	bnez	a3,20419a36 <__lo0bits+0x36>
20419a32:	83c1                	srli	a5,a5,0x10
20419a34:	4741                	li	a4,16
20419a36:	0ff7f693          	andi	a3,a5,255
20419a3a:	e299                	bnez	a3,20419a40 <__lo0bits+0x40>
20419a3c:	0721                	addi	a4,a4,8
20419a3e:	83a1                	srli	a5,a5,0x8
20419a40:	00f7f693          	andi	a3,a5,15
20419a44:	e299                	bnez	a3,20419a4a <__lo0bits+0x4a>
20419a46:	0711                	addi	a4,a4,4
20419a48:	8391                	srli	a5,a5,0x4
20419a4a:	0037f693          	andi	a3,a5,3
20419a4e:	e299                	bnez	a3,20419a54 <__lo0bits+0x54>
20419a50:	0709                	addi	a4,a4,2
20419a52:	8389                	srli	a5,a5,0x2
20419a54:	0017f693          	andi	a3,a5,1
20419a58:	e681                	bnez	a3,20419a60 <__lo0bits+0x60>
20419a5a:	8385                	srli	a5,a5,0x1
20419a5c:	c781                	beqz	a5,20419a64 <__lo0bits+0x64>
20419a5e:	0705                	addi	a4,a4,1
20419a60:	c11c                	sw	a5,0(a0)
20419a62:	bf6d                	j	20419a1c <__lo0bits+0x1c>
20419a64:	02000713          	li	a4,32
20419a68:	bf55                	j	20419a1c <__lo0bits+0x1c>

20419a6a <__i2b>:
20419a6a:	1141                	addi	sp,sp,-16
20419a6c:	c422                	sw	s0,8(sp)
20419a6e:	842e                	mv	s0,a1
20419a70:	4585                	li	a1,1
20419a72:	c606                	sw	ra,12(sp)
20419a74:	3b61                	jal	2041980c <_Balloc>
20419a76:	c940                	sw	s0,20(a0)
20419a78:	40b2                	lw	ra,12(sp)
20419a7a:	4422                	lw	s0,8(sp)
20419a7c:	4705                	li	a4,1
20419a7e:	c918                	sw	a4,16(a0)
20419a80:	0141                	addi	sp,sp,16
20419a82:	8082                	ret

20419a84 <__multiply>:
20419a84:	4998                	lw	a4,16(a1)
20419a86:	4a1c                	lw	a5,16(a2)
20419a88:	7179                	addi	sp,sp,-48
20419a8a:	d226                	sw	s1,36(sp)
20419a8c:	d606                	sw	ra,44(sp)
20419a8e:	d422                	sw	s0,40(sp)
20419a90:	d04a                	sw	s2,32(sp)
20419a92:	ce4e                	sw	s3,28(sp)
20419a94:	84ae                	mv	s1,a1
20419a96:	00f75463          	ble	a5,a4,20419a9e <__multiply+0x1a>
20419a9a:	84b2                	mv	s1,a2
20419a9c:	862e                	mv	a2,a1
20419a9e:	0104a983          	lw	s3,16(s1)
20419aa2:	01062903          	lw	s2,16(a2)
20419aa6:	449c                	lw	a5,8(s1)
20419aa8:	40cc                	lw	a1,4(s1)
20419aaa:	01298433          	add	s0,s3,s2
20419aae:	0087d363          	ble	s0,a5,20419ab4 <__multiply+0x30>
20419ab2:	0585                	addi	a1,a1,1
20419ab4:	c632                	sw	a2,12(sp)
20419ab6:	3b99                	jal	2041980c <_Balloc>
20419ab8:	4632                	lw	a2,12(sp)
20419aba:	01450813          	addi	a6,a0,20 # 10014 <__stack_size+0xf814>
20419abe:	00241313          	slli	t1,s0,0x2
20419ac2:	9342                	add	t1,t1,a6
20419ac4:	87c2                	mv	a5,a6
20419ac6:	0267e963          	bltu	a5,t1,20419af8 <__multiply+0x74>
20419aca:	01448593          	addi	a1,s1,20
20419ace:	00299893          	slli	a7,s3,0x2
20419ad2:	0651                	addi	a2,a2,20
20419ad4:	00291e13          	slli	t3,s2,0x2
20419ad8:	66c1                	lui	a3,0x10
20419ada:	98ae                	add	a7,a7,a1
20419adc:	9e32                	add	t3,t3,a2
20419ade:	16fd                	addi	a3,a3,-1
20419ae0:	03c66063          	bltu	a2,t3,20419b00 <__multiply+0x7c>
20419ae4:	0c804b63          	bgtz	s0,20419bba <__multiply+0x136>
20419ae8:	c900                	sw	s0,16(a0)
20419aea:	50b2                	lw	ra,44(sp)
20419aec:	5422                	lw	s0,40(sp)
20419aee:	5492                	lw	s1,36(sp)
20419af0:	5902                	lw	s2,32(sp)
20419af2:	49f2                	lw	s3,28(sp)
20419af4:	6145                	addi	sp,sp,48
20419af6:	8082                	ret
20419af8:	0007a023          	sw	zero,0(a5)
20419afc:	0791                	addi	a5,a5,4
20419afe:	b7e1                	j	20419ac6 <__multiply+0x42>
20419b00:	00062f83          	lw	t6,0(a2)
20419b04:	00dfffb3          	and	t6,t6,a3
20419b08:	040f8a63          	beqz	t6,20419b5c <__multiply+0xd8>
20419b0c:	8f42                	mv	t5,a6
20419b0e:	82ae                	mv	t0,a1
20419b10:	4481                	li	s1,0
20419b12:	0002a703          	lw	a4,0(t0) # 2041313c <memset+0x8e>
20419b16:	000f2383          	lw	t2,0(t5)
20419b1a:	0f11                	addi	t5,t5,4
20419b1c:	00d77eb3          	and	t4,a4,a3
20419b20:	03fe8eb3          	mul	t4,t4,t6
20419b24:	00d3f7b3          	and	a5,t2,a3
20419b28:	0103d393          	srli	t2,t2,0x10
20419b2c:	0291                	addi	t0,t0,4
20419b2e:	9ebe                	add	t4,t4,a5
20419b30:	01075793          	srli	a5,a4,0x10
20419b34:	03f787b3          	mul	a5,a5,t6
20419b38:	9ea6                	add	t4,t4,s1
20419b3a:	010ed713          	srli	a4,t4,0x10
20419b3e:	00defeb3          	and	t4,t4,a3
20419b42:	979e                	add	a5,a5,t2
20419b44:	97ba                	add	a5,a5,a4
20419b46:	0107d493          	srli	s1,a5,0x10
20419b4a:	07c2                	slli	a5,a5,0x10
20419b4c:	01d7e7b3          	or	a5,a5,t4
20419b50:	feff2e23          	sw	a5,-4(t5)
20419b54:	fb12efe3          	bltu	t0,a7,20419b12 <__multiply+0x8e>
20419b58:	009f2023          	sw	s1,0(t5)
20419b5c:	00265283          	lhu	t0,2(a2)
20419b60:	04028a63          	beqz	t0,20419bb4 <__multiply+0x130>
20419b64:	00082783          	lw	a5,0(a6)
20419b68:	8ec2                	mv	t4,a6
20419b6a:	8f2e                	mv	t5,a1
20419b6c:	4f81                	li	t6,0
20419b6e:	000f2703          	lw	a4,0(t5)
20419b72:	002ed383          	lhu	t2,2(t4)
20419b76:	8ff5                	and	a5,a5,a3
20419b78:	8f75                	and	a4,a4,a3
20419b7a:	02570733          	mul	a4,a4,t0
20419b7e:	0e91                	addi	t4,t4,4
20419b80:	0f11                	addi	t5,t5,4
20419b82:	971e                	add	a4,a4,t2
20419b84:	977e                	add	a4,a4,t6
20419b86:	01071f93          	slli	t6,a4,0x10
20419b8a:	00ffe7b3          	or	a5,t6,a5
20419b8e:	fefeae23          	sw	a5,-4(t4)
20419b92:	ffef5783          	lhu	a5,-2(t5)
20419b96:	000eaf83          	lw	t6,0(t4)
20419b9a:	8341                	srli	a4,a4,0x10
20419b9c:	025787b3          	mul	a5,a5,t0
20419ba0:	00dfffb3          	and	t6,t6,a3
20419ba4:	97fe                	add	a5,a5,t6
20419ba6:	97ba                	add	a5,a5,a4
20419ba8:	0107df93          	srli	t6,a5,0x10
20419bac:	fd1f61e3          	bltu	t5,a7,20419b6e <__multiply+0xea>
20419bb0:	00fea023          	sw	a5,0(t4)
20419bb4:	0611                	addi	a2,a2,4
20419bb6:	0811                	addi	a6,a6,4
20419bb8:	b725                	j	20419ae0 <__multiply+0x5c>
20419bba:	1371                	addi	t1,t1,-4
20419bbc:	00032783          	lw	a5,0(t1) # 10000 <__stack_size+0xf800>
20419bc0:	f785                	bnez	a5,20419ae8 <__multiply+0x64>
20419bc2:	147d                	addi	s0,s0,-1
20419bc4:	b705                	j	20419ae4 <__multiply+0x60>

20419bc6 <__pow5mult>:
20419bc6:	1101                	addi	sp,sp,-32
20419bc8:	ca26                	sw	s1,20(sp)
20419bca:	c84a                	sw	s2,16(sp)
20419bcc:	c64e                	sw	s3,12(sp)
20419bce:	ce06                	sw	ra,28(sp)
20419bd0:	cc22                	sw	s0,24(sp)
20419bd2:	c452                	sw	s4,8(sp)
20419bd4:	00367793          	andi	a5,a2,3
20419bd8:	892a                	mv	s2,a0
20419bda:	84b2                	mv	s1,a2
20419bdc:	89ae                	mv	s3,a1
20419bde:	cf81                	beqz	a5,20419bf6 <__pow5mult+0x30>
20419be0:	17fd                	addi	a5,a5,-1
20419be2:	20422737          	lui	a4,0x20422
20419be6:	e0870713          	addi	a4,a4,-504 # 20421e08 <p05.3207>
20419bea:	078a                	slli	a5,a5,0x2
20419bec:	97ba                	add	a5,a5,a4
20419bee:	4390                	lw	a2,0(a5)
20419bf0:	4681                	li	a3,0
20419bf2:	3951                	jal	20419886 <__multadd>
20419bf4:	89aa                	mv	s3,a0
20419bf6:	8489                	srai	s1,s1,0x2
20419bf8:	c4b1                	beqz	s1,20419c44 <__pow5mult+0x7e>
20419bfa:	04892403          	lw	s0,72(s2)
20419bfe:	e811                	bnez	s0,20419c12 <__pow5mult+0x4c>
20419c00:	27100593          	li	a1,625
20419c04:	854a                	mv	a0,s2
20419c06:	3595                	jal	20419a6a <__i2b>
20419c08:	04a92423          	sw	a0,72(s2)
20419c0c:	842a                	mv	s0,a0
20419c0e:	00052023          	sw	zero,0(a0)
20419c12:	0014f793          	andi	a5,s1,1
20419c16:	cb91                	beqz	a5,20419c2a <__pow5mult+0x64>
20419c18:	85ce                	mv	a1,s3
20419c1a:	8622                	mv	a2,s0
20419c1c:	854a                	mv	a0,s2
20419c1e:	359d                	jal	20419a84 <__multiply>
20419c20:	8a2a                	mv	s4,a0
20419c22:	85ce                	mv	a1,s3
20419c24:	854a                	mv	a0,s2
20419c26:	31b1                	jal	20419872 <_Bfree>
20419c28:	89d2                	mv	s3,s4
20419c2a:	8485                	srai	s1,s1,0x1
20419c2c:	cc81                	beqz	s1,20419c44 <__pow5mult+0x7e>
20419c2e:	4008                	lw	a0,0(s0)
20419c30:	e901                	bnez	a0,20419c40 <__pow5mult+0x7a>
20419c32:	8622                	mv	a2,s0
20419c34:	85a2                	mv	a1,s0
20419c36:	854a                	mv	a0,s2
20419c38:	35b1                	jal	20419a84 <__multiply>
20419c3a:	c008                	sw	a0,0(s0)
20419c3c:	00052023          	sw	zero,0(a0)
20419c40:	842a                	mv	s0,a0
20419c42:	bfc1                	j	20419c12 <__pow5mult+0x4c>
20419c44:	40f2                	lw	ra,28(sp)
20419c46:	4462                	lw	s0,24(sp)
20419c48:	854e                	mv	a0,s3
20419c4a:	44d2                	lw	s1,20(sp)
20419c4c:	4942                	lw	s2,16(sp)
20419c4e:	49b2                	lw	s3,12(sp)
20419c50:	4a22                	lw	s4,8(sp)
20419c52:	6105                	addi	sp,sp,32
20419c54:	8082                	ret

20419c56 <__lshift>:
20419c56:	7179                	addi	sp,sp,-48
20419c58:	d226                	sw	s1,36(sp)
20419c5a:	84ae                	mv	s1,a1
20419c5c:	ce4e                	sw	s3,28(sp)
20419c5e:	0104a983          	lw	s3,16(s1)
20419c62:	d422                	sw	s0,40(sp)
20419c64:	41cc                	lw	a1,4(a1)
20419c66:	40565413          	srai	s0,a2,0x5
20419c6a:	449c                	lw	a5,8(s1)
20419c6c:	99a2                	add	s3,s3,s0
20419c6e:	d04a                	sw	s2,32(sp)
20419c70:	ca56                	sw	s5,20(sp)
20419c72:	d606                	sw	ra,44(sp)
20419c74:	cc52                	sw	s4,24(sp)
20419c76:	8aaa                	mv	s5,a0
20419c78:	00198913          	addi	s2,s3,1
20419c7c:	0927c263          	blt	a5,s2,20419d00 <__lshift+0xaa>
20419c80:	8556                	mv	a0,s5
20419c82:	c632                	sw	a2,12(sp)
20419c84:	3661                	jal	2041980c <_Balloc>
20419c86:	4632                	lw	a2,12(sp)
20419c88:	01450793          	addi	a5,a0,20
20419c8c:	8a2a                	mv	s4,a0
20419c8e:	86be                	mv	a3,a5
20419c90:	4701                	li	a4,0
20419c92:	0691                	addi	a3,a3,4
20419c94:	06874963          	blt	a4,s0,20419d06 <__lshift+0xb0>
20419c98:	00045363          	bgez	s0,20419c9e <__lshift+0x48>
20419c9c:	4401                	li	s0,0
20419c9e:	4894                	lw	a3,16(s1)
20419ca0:	040a                	slli	s0,s0,0x2
20419ca2:	00878733          	add	a4,a5,s0
20419ca6:	068a                	slli	a3,a3,0x2
20419ca8:	01448793          	addi	a5,s1,20
20419cac:	8a7d                	andi	a2,a2,31
20419cae:	96be                	add	a3,a3,a5
20419cb0:	ce39                	beqz	a2,20419d0e <__lshift+0xb8>
20419cb2:	02000813          	li	a6,32
20419cb6:	40c80833          	sub	a6,a6,a2
20419cba:	4581                	li	a1,0
20419cbc:	4388                	lw	a0,0(a5)
20419cbe:	0711                	addi	a4,a4,4
20419cc0:	0791                	addi	a5,a5,4
20419cc2:	00c51533          	sll	a0,a0,a2
20419cc6:	8dc9                	or	a1,a1,a0
20419cc8:	feb72e23          	sw	a1,-4(a4)
20419ccc:	ffc7a583          	lw	a1,-4(a5)
20419cd0:	0105d5b3          	srl	a1,a1,a6
20419cd4:	fed7e4e3          	bltu	a5,a3,20419cbc <__lshift+0x66>
20419cd8:	c30c                	sw	a1,0(a4)
20419cda:	c199                	beqz	a1,20419ce0 <__lshift+0x8a>
20419cdc:	00298913          	addi	s2,s3,2
20419ce0:	197d                	addi	s2,s2,-1
20419ce2:	012a2823          	sw	s2,16(s4)
20419ce6:	8556                	mv	a0,s5
20419ce8:	85a6                	mv	a1,s1
20419cea:	3661                	jal	20419872 <_Bfree>
20419cec:	50b2                	lw	ra,44(sp)
20419cee:	5422                	lw	s0,40(sp)
20419cf0:	8552                	mv	a0,s4
20419cf2:	5492                	lw	s1,36(sp)
20419cf4:	5902                	lw	s2,32(sp)
20419cf6:	49f2                	lw	s3,28(sp)
20419cf8:	4a62                	lw	s4,24(sp)
20419cfa:	4ad2                	lw	s5,20(sp)
20419cfc:	6145                	addi	sp,sp,48
20419cfe:	8082                	ret
20419d00:	0585                	addi	a1,a1,1
20419d02:	0786                	slli	a5,a5,0x1
20419d04:	bfa5                	j	20419c7c <__lshift+0x26>
20419d06:	fe06ae23          	sw	zero,-4(a3) # fffc <__stack_size+0xf7fc>
20419d0a:	0705                	addi	a4,a4,1
20419d0c:	b759                	j	20419c92 <__lshift+0x3c>
20419d0e:	0791                	addi	a5,a5,4
20419d10:	ffc7a603          	lw	a2,-4(a5)
20419d14:	0711                	addi	a4,a4,4
20419d16:	fec72e23          	sw	a2,-4(a4)
20419d1a:	fed7eae3          	bltu	a5,a3,20419d0e <__lshift+0xb8>
20419d1e:	b7c9                	j	20419ce0 <__lshift+0x8a>

20419d20 <__mcmp>:
20419d20:	491c                	lw	a5,16(a0)
20419d22:	4998                	lw	a4,16(a1)
20419d24:	8f99                	sub	a5,a5,a4
20419d26:	e38d                	bnez	a5,20419d48 <__mcmp+0x28>
20419d28:	070a                	slli	a4,a4,0x2
20419d2a:	0551                	addi	a0,a0,20
20419d2c:	05d1                	addi	a1,a1,20
20419d2e:	00e506b3          	add	a3,a0,a4
20419d32:	95ba                	add	a1,a1,a4
20419d34:	16f1                	addi	a3,a3,-4
20419d36:	15f1                	addi	a1,a1,-4
20419d38:	4290                	lw	a2,0(a3)
20419d3a:	4198                	lw	a4,0(a1)
20419d3c:	00e60863          	beq	a2,a4,20419d4c <__mcmp+0x2c>
20419d40:	57fd                	li	a5,-1
20419d42:	00e66363          	bltu	a2,a4,20419d48 <__mcmp+0x28>
20419d46:	4785                	li	a5,1
20419d48:	853e                	mv	a0,a5
20419d4a:	8082                	ret
20419d4c:	fed564e3          	bltu	a0,a3,20419d34 <__mcmp+0x14>
20419d50:	bfe5                	j	20419d48 <__mcmp+0x28>

20419d52 <__mdiff>:
20419d52:	1101                	addi	sp,sp,-32
20419d54:	ca26                	sw	s1,20(sp)
20419d56:	84ae                	mv	s1,a1
20419d58:	c64e                	sw	s3,12(sp)
20419d5a:	85b2                	mv	a1,a2
20419d5c:	89aa                	mv	s3,a0
20419d5e:	8526                	mv	a0,s1
20419d60:	cc22                	sw	s0,24(sp)
20419d62:	ce06                	sw	ra,28(sp)
20419d64:	c84a                	sw	s2,16(sp)
20419d66:	8432                	mv	s0,a2
20419d68:	3f65                	jal	20419d20 <__mcmp>
20419d6a:	ed19                	bnez	a0,20419d88 <__mdiff+0x36>
20419d6c:	4581                	li	a1,0
20419d6e:	854e                	mv	a0,s3
20419d70:	3c71                	jal	2041980c <_Balloc>
20419d72:	4785                	li	a5,1
20419d74:	c91c                	sw	a5,16(a0)
20419d76:	00052a23          	sw	zero,20(a0)
20419d7a:	40f2                	lw	ra,28(sp)
20419d7c:	4462                	lw	s0,24(sp)
20419d7e:	44d2                	lw	s1,20(sp)
20419d80:	4942                	lw	s2,16(sp)
20419d82:	49b2                	lw	s3,12(sp)
20419d84:	6105                	addi	sp,sp,32
20419d86:	8082                	ret
20419d88:	4905                	li	s2,1
20419d8a:	00054663          	bltz	a0,20419d96 <__mdiff+0x44>
20419d8e:	87a2                	mv	a5,s0
20419d90:	4901                	li	s2,0
20419d92:	8426                	mv	s0,s1
20419d94:	84be                	mv	s1,a5
20419d96:	404c                	lw	a1,4(s0)
20419d98:	854e                	mv	a0,s3
20419d9a:	3c8d                	jal	2041980c <_Balloc>
20419d9c:	01042303          	lw	t1,16(s0)
20419da0:	0104a883          	lw	a7,16(s1)
20419da4:	01440613          	addi	a2,s0,20
20419da8:	00231e13          	slli	t3,t1,0x2
20419dac:	01448813          	addi	a6,s1,20
20419db0:	088a                	slli	a7,a7,0x2
20419db2:	6ec1                	lui	t4,0x10
20419db4:	01252623          	sw	s2,12(a0)
20419db8:	9e32                	add	t3,t3,a2
20419dba:	98c2                	add	a7,a7,a6
20419dbc:	01450693          	addi	a3,a0,20
20419dc0:	4f01                	li	t5,0
20419dc2:	1efd                	addi	t4,t4,-1
20419dc4:	4218                	lw	a4,0(a2)
20419dc6:	00082f83          	lw	t6,0(a6)
20419dca:	0691                	addi	a3,a3,4
20419dcc:	01d775b3          	and	a1,a4,t4
20419dd0:	01dff7b3          	and	a5,t6,t4
20419dd4:	95fa                	add	a1,a1,t5
20419dd6:	8d9d                	sub	a1,a1,a5
20419dd8:	010fdf93          	srli	t6,t6,0x10
20419ddc:	01075793          	srli	a5,a4,0x10
20419de0:	41f787b3          	sub	a5,a5,t6
20419de4:	4105d713          	srai	a4,a1,0x10
20419de8:	97ba                	add	a5,a5,a4
20419dea:	4107df13          	srai	t5,a5,0x10
20419dee:	01d5f5b3          	and	a1,a1,t4
20419df2:	07c2                	slli	a5,a5,0x10
20419df4:	8fcd                	or	a5,a5,a1
20419df6:	0811                	addi	a6,a6,4
20419df8:	fef6ae23          	sw	a5,-4(a3)
20419dfc:	0611                	addi	a2,a2,4
20419dfe:	fd1863e3          	bltu	a6,a7,20419dc4 <__mdiff+0x72>
20419e02:	65c1                	lui	a1,0x10
20419e04:	15fd                	addi	a1,a1,-1
20419e06:	01c66863          	bltu	a2,t3,20419e16 <__mdiff+0xc4>
20419e0a:	16f1                	addi	a3,a3,-4
20419e0c:	429c                	lw	a5,0(a3)
20419e0e:	c795                	beqz	a5,20419e3a <__mdiff+0xe8>
20419e10:	00652823          	sw	t1,16(a0)
20419e14:	b79d                	j	20419d7a <__mdiff+0x28>
20419e16:	421c                	lw	a5,0(a2)
20419e18:	0691                	addi	a3,a3,4
20419e1a:	0611                	addi	a2,a2,4
20419e1c:	00b7f733          	and	a4,a5,a1
20419e20:	977a                	add	a4,a4,t5
20419e22:	41075813          	srai	a6,a4,0x10
20419e26:	83c1                	srli	a5,a5,0x10
20419e28:	97c2                	add	a5,a5,a6
20419e2a:	4107df13          	srai	t5,a5,0x10
20419e2e:	8f6d                	and	a4,a4,a1
20419e30:	07c2                	slli	a5,a5,0x10
20419e32:	8fd9                	or	a5,a5,a4
20419e34:	fef6ae23          	sw	a5,-4(a3)
20419e38:	b7f9                	j	20419e06 <__mdiff+0xb4>
20419e3a:	137d                	addi	t1,t1,-1
20419e3c:	b7f9                	j	20419e0a <__mdiff+0xb8>

20419e3e <__ulp>:
20419e3e:	7ff007b7          	lui	a5,0x7ff00
20419e42:	8dfd                	and	a1,a1,a5
20419e44:	fcc007b7          	lui	a5,0xfcc00
20419e48:	95be                	add	a1,a1,a5
20419e4a:	00b05563          	blez	a1,20419e54 <__ulp+0x16>
20419e4e:	4781                	li	a5,0
20419e50:	853e                	mv	a0,a5
20419e52:	8082                	ret
20419e54:	40b005b3          	neg	a1,a1
20419e58:	4145d793          	srai	a5,a1,0x14
20419e5c:	474d                	li	a4,19
20419e5e:	00f74763          	blt	a4,a5,20419e6c <__ulp+0x2e>
20419e62:	000805b7          	lui	a1,0x80
20419e66:	40f5d5b3          	sra	a1,a1,a5
20419e6a:	b7d5                	j	20419e4e <__ulp+0x10>
20419e6c:	17b1                	addi	a5,a5,-20
20419e6e:	46f9                	li	a3,30
20419e70:	4581                	li	a1,0
20419e72:	4705                	li	a4,1
20419e74:	00f6c663          	blt	a3,a5,20419e80 <__ulp+0x42>
20419e78:	fff7c793          	not	a5,a5
20419e7c:	00f71733          	sll	a4,a4,a5
20419e80:	87ba                	mv	a5,a4
20419e82:	b7f9                	j	20419e50 <__ulp+0x12>

20419e84 <__b2d>:
20419e84:	7179                	addi	sp,sp,-48
20419e86:	d226                	sw	s1,36(sp)
20419e88:	4904                	lw	s1,16(a0)
20419e8a:	ce4e                	sw	s3,28(sp)
20419e8c:	01450993          	addi	s3,a0,20
20419e90:	048a                	slli	s1,s1,0x2
20419e92:	94ce                	add	s1,s1,s3
20419e94:	d422                	sw	s0,40(sp)
20419e96:	ffc4a403          	lw	s0,-4(s1)
20419e9a:	d04a                	sw	s2,32(sp)
20419e9c:	c62e                	sw	a1,12(sp)
20419e9e:	8522                	mv	a0,s0
20419ea0:	d606                	sw	ra,44(sp)
20419ea2:	3e19                	jal	204199b8 <__hi0bits>
20419ea4:	45b2                	lw	a1,12(sp)
20419ea6:	02000793          	li	a5,32
20419eaa:	8f89                	sub	a5,a5,a0
20419eac:	c19c                	sw	a5,0(a1)
20419eae:	47a9                	li	a5,10
20419eb0:	ffc48913          	addi	s2,s1,-4
20419eb4:	02a7cd63          	blt	a5,a0,20419eee <__b2d+0x6a>
20419eb8:	47ad                	li	a5,11
20419eba:	8f89                	sub	a5,a5,a0
20419ebc:	3ff00737          	lui	a4,0x3ff00
20419ec0:	00f456b3          	srl	a3,s0,a5
20419ec4:	8ed9                	or	a3,a3,a4
20419ec6:	4701                	li	a4,0
20419ec8:	0129f463          	bleu	s2,s3,20419ed0 <__b2d+0x4c>
20419ecc:	ff84a703          	lw	a4,-8(s1)
20419ed0:	0555                	addi	a0,a0,21
20419ed2:	00a41533          	sll	a0,s0,a0
20419ed6:	00f757b3          	srl	a5,a4,a5
20419eda:	8fc9                	or	a5,a5,a0
20419edc:	50b2                	lw	ra,44(sp)
20419ede:	5422                	lw	s0,40(sp)
20419ee0:	5492                	lw	s1,36(sp)
20419ee2:	5902                	lw	s2,32(sp)
20419ee4:	49f2                	lw	s3,28(sp)
20419ee6:	853e                	mv	a0,a5
20419ee8:	85b6                	mv	a1,a3
20419eea:	6145                	addi	sp,sp,48
20419eec:	8082                	ret
20419eee:	4781                	li	a5,0
20419ef0:	0129f663          	bleu	s2,s3,20419efc <__b2d+0x78>
20419ef4:	ff84a783          	lw	a5,-8(s1)
20419ef8:	ff848913          	addi	s2,s1,-8
20419efc:	1555                	addi	a0,a0,-11
20419efe:	c905                	beqz	a0,20419f2e <__b2d+0xaa>
20419f00:	02000713          	li	a4,32
20419f04:	40a70633          	sub	a2,a4,a0
20419f08:	00a41433          	sll	s0,s0,a0
20419f0c:	3ff00737          	lui	a4,0x3ff00
20419f10:	8c59                	or	s0,s0,a4
20419f12:	00c7d6b3          	srl	a3,a5,a2
20419f16:	8ec1                	or	a3,a3,s0
20419f18:	4701                	li	a4,0
20419f1a:	0129f463          	bleu	s2,s3,20419f22 <__b2d+0x9e>
20419f1e:	ffc92703          	lw	a4,-4(s2)
20419f22:	00a797b3          	sll	a5,a5,a0
20419f26:	00c75733          	srl	a4,a4,a2
20419f2a:	8fd9                	or	a5,a5,a4
20419f2c:	bf45                	j	20419edc <__b2d+0x58>
20419f2e:	3ff006b7          	lui	a3,0x3ff00
20419f32:	8ec1                	or	a3,a3,s0
20419f34:	b765                	j	20419edc <__b2d+0x58>

20419f36 <__d2b>:
20419f36:	7179                	addi	sp,sp,-48
20419f38:	d422                	sw	s0,40(sp)
20419f3a:	842e                	mv	s0,a1
20419f3c:	4585                	li	a1,1
20419f3e:	d226                	sw	s1,36(sp)
20419f40:	d04a                	sw	s2,32(sp)
20419f42:	84b2                	mv	s1,a2
20419f44:	ce4e                	sw	s3,28(sp)
20419f46:	cc52                	sw	s4,24(sp)
20419f48:	893a                	mv	s2,a4
20419f4a:	d606                	sw	ra,44(sp)
20419f4c:	8a36                	mv	s4,a3
20419f4e:	387d                	jal	2041980c <_Balloc>
20419f50:	00100737          	lui	a4,0x100
20419f54:	fff70793          	addi	a5,a4,-1 # fffff <__stack_size+0xff7ff>
20419f58:	8fe5                	and	a5,a5,s1
20419f5a:	80d1                	srli	s1,s1,0x14
20419f5c:	7ff4f493          	andi	s1,s1,2047
20419f60:	89aa                	mv	s3,a0
20419f62:	e0ad                	bnez	s1,20419fc4 <__d2b+0x8e>
20419f64:	c63e                	sw	a5,12(sp)
20419f66:	c425                	beqz	s0,20419fce <__d2b+0x98>
20419f68:	0028                	addi	a0,sp,8
20419f6a:	c422                	sw	s0,8(sp)
20419f6c:	3c51                	jal	20419a00 <__lo0bits>
20419f6e:	46a2                	lw	a3,8(sp)
20419f70:	cd21                	beqz	a0,20419fc8 <__d2b+0x92>
20419f72:	4732                	lw	a4,12(sp)
20419f74:	02000793          	li	a5,32
20419f78:	8f89                	sub	a5,a5,a0
20419f7a:	00f717b3          	sll	a5,a4,a5
20419f7e:	8fd5                	or	a5,a5,a3
20419f80:	00a75733          	srl	a4,a4,a0
20419f84:	00f9aa23          	sw	a5,20(s3)
20419f88:	c63a                	sw	a4,12(sp)
20419f8a:	4432                	lw	s0,12(sp)
20419f8c:	0089ac23          	sw	s0,24(s3)
20419f90:	00803433          	snez	s0,s0
20419f94:	0405                	addi	s0,s0,1
20419f96:	0089a823          	sw	s0,16(s3)
20419f9a:	c4b1                	beqz	s1,20419fe6 <__d2b+0xb0>
20419f9c:	bcd48493          	addi	s1,s1,-1075
20419fa0:	94aa                	add	s1,s1,a0
20419fa2:	03500793          	li	a5,53
20419fa6:	009a2023          	sw	s1,0(s4)
20419faa:	40a78533          	sub	a0,a5,a0
20419fae:	00a92023          	sw	a0,0(s2)
20419fb2:	50b2                	lw	ra,44(sp)
20419fb4:	5422                	lw	s0,40(sp)
20419fb6:	854e                	mv	a0,s3
20419fb8:	5492                	lw	s1,36(sp)
20419fba:	5902                	lw	s2,32(sp)
20419fbc:	49f2                	lw	s3,28(sp)
20419fbe:	4a62                	lw	s4,24(sp)
20419fc0:	6145                	addi	sp,sp,48
20419fc2:	8082                	ret
20419fc4:	8fd9                	or	a5,a5,a4
20419fc6:	bf79                	j	20419f64 <__d2b+0x2e>
20419fc8:	00d9aa23          	sw	a3,20(s3)
20419fcc:	bf7d                	j	20419f8a <__d2b+0x54>
20419fce:	0068                	addi	a0,sp,12
20419fd0:	3c05                	jal	20419a00 <__lo0bits>
20419fd2:	47b2                	lw	a5,12(sp)
20419fd4:	02050513          	addi	a0,a0,32
20419fd8:	4405                	li	s0,1
20419fda:	00f9aa23          	sw	a5,20(s3)
20419fde:	4785                	li	a5,1
20419fe0:	00f9a823          	sw	a5,16(s3)
20419fe4:	bf5d                	j	20419f9a <__d2b+0x64>
20419fe6:	00241793          	slli	a5,s0,0x2
20419fea:	bce50513          	addi	a0,a0,-1074
20419fee:	97ce                	add	a5,a5,s3
20419ff0:	00aa2023          	sw	a0,0(s4)
20419ff4:	4b88                	lw	a0,16(a5)
20419ff6:	0416                	slli	s0,s0,0x5
20419ff8:	32c1                	jal	204199b8 <__hi0bits>
20419ffa:	8c09                	sub	s0,s0,a0
20419ffc:	00892023          	sw	s0,0(s2)
2041a000:	bf4d                	j	20419fb2 <__d2b+0x7c>

2041a002 <__ratio>:
2041a002:	7179                	addi	sp,sp,-48
2041a004:	d04a                	sw	s2,32(sp)
2041a006:	892e                	mv	s2,a1
2041a008:	002c                	addi	a1,sp,8
2041a00a:	d606                	sw	ra,44(sp)
2041a00c:	d422                	sw	s0,40(sp)
2041a00e:	d226                	sw	s1,36(sp)
2041a010:	ce4e                	sw	s3,28(sp)
2041a012:	cc52                	sw	s4,24(sp)
2041a014:	8a2a                	mv	s4,a0
2041a016:	35bd                	jal	20419e84 <__b2d>
2041a018:	89aa                	mv	s3,a0
2041a01a:	84ae                	mv	s1,a1
2041a01c:	842e                	mv	s0,a1
2041a01e:	854a                	mv	a0,s2
2041a020:	006c                	addi	a1,sp,12
2041a022:	358d                	jal	20419e84 <__b2d>
2041a024:	01092783          	lw	a5,16(s2)
2041a028:	010a2703          	lw	a4,16(s4)
2041a02c:	46a2                	lw	a3,8(sp)
2041a02e:	8f1d                	sub	a4,a4,a5
2041a030:	47b2                	lw	a5,12(sp)
2041a032:	0716                	slli	a4,a4,0x5
2041a034:	8e9d                	sub	a3,a3,a5
2041a036:	00d707b3          	add	a5,a4,a3
2041a03a:	02f05563          	blez	a5,2041a064 <__ratio+0x62>
2041a03e:	07d2                	slli	a5,a5,0x14
2041a040:	862e                	mv	a2,a1
2041a042:	00978433          	add	s0,a5,s1
2041a046:	8732                	mv	a4,a2
2041a048:	85a2                	mv	a1,s0
2041a04a:	862a                	mv	a2,a0
2041a04c:	86ba                	mv	a3,a4
2041a04e:	854e                	mv	a0,s3
2041a050:	16d020ef          	jal	ra,2041c9bc <__divdf3>
2041a054:	50b2                	lw	ra,44(sp)
2041a056:	5422                	lw	s0,40(sp)
2041a058:	5492                	lw	s1,36(sp)
2041a05a:	5902                	lw	s2,32(sp)
2041a05c:	49f2                	lw	s3,28(sp)
2041a05e:	4a62                	lw	s4,24(sp)
2041a060:	6145                	addi	sp,sp,48
2041a062:	8082                	ret
2041a064:	fff00737          	lui	a4,0xfff00
2041a068:	02e787b3          	mul	a5,a5,a4
2041a06c:	00b78633          	add	a2,a5,a1
2041a070:	bfd9                	j	2041a046 <__ratio+0x44>

2041a072 <_mprec_log10>:
2041a072:	1141                	addi	sp,sp,-16
2041a074:	c422                	sw	s0,8(sp)
2041a076:	c606                	sw	ra,12(sp)
2041a078:	c24a                	sw	s2,4(sp)
2041a07a:	c04e                	sw	s3,0(sp)
2041a07c:	47dd                	li	a5,23
2041a07e:	842a                	mv	s0,a0
2041a080:	02a7c163          	blt	a5,a0,2041a0a2 <_mprec_log10+0x30>
2041a084:	204227b7          	lui	a5,0x20422
2041a088:	00351413          	slli	s0,a0,0x3
2041a08c:	e0878793          	addi	a5,a5,-504 # 20421e08 <p05.3207>
2041a090:	943e                	add	s0,s0,a5
2041a092:	4808                	lw	a0,16(s0)
2041a094:	484c                	lw	a1,20(s0)
2041a096:	40b2                	lw	ra,12(sp)
2041a098:	4422                	lw	s0,8(sp)
2041a09a:	4912                	lw	s2,4(sp)
2041a09c:	4982                	lw	s3,0(sp)
2041a09e:	0141                	addi	sp,sp,16
2041a0a0:	8082                	ret
2041a0a2:	800017b7          	lui	a5,0x80001
2041a0a6:	a4878793          	addi	a5,a5,-1464 # 80000a48 <pulp__FC+0x80000a49>
2041a0aa:	4388                	lw	a0,0(a5)
2041a0ac:	43cc                	lw	a1,4(a5)
2041a0ae:	800017b7          	lui	a5,0x80001
2041a0b2:	a5078793          	addi	a5,a5,-1456 # 80000a50 <pulp__FC+0x80000a51>
2041a0b6:	0007a903          	lw	s2,0(a5)
2041a0ba:	0047a983          	lw	s3,4(a5)
2041a0be:	864a                	mv	a2,s2
2041a0c0:	86ce                	mv	a3,s3
2041a0c2:	147d                	addi	s0,s0,-1
2041a0c4:	6d9020ef          	jal	ra,2041cf9c <__muldf3>
2041a0c8:	f87d                	bnez	s0,2041a0be <_mprec_log10+0x4c>
2041a0ca:	b7f1                	j	2041a096 <_mprec_log10+0x24>

2041a0cc <__copybits>:
2041a0cc:	fff58793          	addi	a5,a1,-1 # 7ffff <__stack_size+0x7f7ff>
2041a0d0:	4a18                	lw	a4,16(a2)
2041a0d2:	8795                	srai	a5,a5,0x5
2041a0d4:	0785                	addi	a5,a5,1
2041a0d6:	078a                	slli	a5,a5,0x2
2041a0d8:	01460693          	addi	a3,a2,20
2041a0dc:	070a                	slli	a4,a4,0x2
2041a0de:	97aa                	add	a5,a5,a0
2041a0e0:	9736                	add	a4,a4,a3
2041a0e2:	00e6e563          	bltu	a3,a4,2041a0ec <__copybits+0x20>
2041a0e6:	00f56a63          	bltu	a0,a5,2041a0fa <__copybits+0x2e>
2041a0ea:	8082                	ret
2041a0ec:	0691                	addi	a3,a3,4
2041a0ee:	ffc6a603          	lw	a2,-4(a3) # 3feffffc <__fini_array_end+0x1faddd10>
2041a0f2:	0511                	addi	a0,a0,4
2041a0f4:	fec52e23          	sw	a2,-4(a0)
2041a0f8:	b7ed                	j	2041a0e2 <__copybits+0x16>
2041a0fa:	0511                	addi	a0,a0,4
2041a0fc:	fe052e23          	sw	zero,-4(a0)
2041a100:	b7dd                	j	2041a0e6 <__copybits+0x1a>

2041a102 <__any_on>:
2041a102:	4914                	lw	a3,16(a0)
2041a104:	4055d793          	srai	a5,a1,0x5
2041a108:	01450713          	addi	a4,a0,20
2041a10c:	02f6c763          	blt	a3,a5,2041a13a <__any_on+0x38>
2041a110:	00d7df63          	ble	a3,a5,2041a12e <__any_on+0x2c>
2041a114:	89fd                	andi	a1,a1,31
2041a116:	cd81                	beqz	a1,2041a12e <__any_on+0x2c>
2041a118:	00279693          	slli	a3,a5,0x2
2041a11c:	96ba                	add	a3,a3,a4
2041a11e:	4290                	lw	a2,0(a3)
2041a120:	4505                	li	a0,1
2041a122:	00b656b3          	srl	a3,a2,a1
2041a126:	00b695b3          	sll	a1,a3,a1
2041a12a:	00b61e63          	bne	a2,a1,2041a146 <__any_on+0x44>
2041a12e:	078a                	slli	a5,a5,0x2
2041a130:	97ba                	add	a5,a5,a4
2041a132:	00f76663          	bltu	a4,a5,2041a13e <__any_on+0x3c>
2041a136:	4501                	li	a0,0
2041a138:	8082                	ret
2041a13a:	87b6                	mv	a5,a3
2041a13c:	bfcd                	j	2041a12e <__any_on+0x2c>
2041a13e:	17f1                	addi	a5,a5,-4
2041a140:	4394                	lw	a3,0(a5)
2041a142:	dae5                	beqz	a3,2041a132 <__any_on+0x30>
2041a144:	4505                	li	a0,1
2041a146:	8082                	ret

2041a148 <_realloc_r>:
2041a148:	7139                	addi	sp,sp,-64
2041a14a:	dc22                	sw	s0,56(sp)
2041a14c:	de06                	sw	ra,60(sp)
2041a14e:	842e                	mv	s0,a1
2041a150:	da26                	sw	s1,52(sp)
2041a152:	d84a                	sw	s2,48(sp)
2041a154:	d64e                	sw	s3,44(sp)
2041a156:	d452                	sw	s4,40(sp)
2041a158:	d256                	sw	s5,36(sp)
2041a15a:	d05a                	sw	s6,32(sp)
2041a15c:	ce5e                	sw	s7,28(sp)
2041a15e:	cc62                	sw	s8,24(sp)
2041a160:	85b2                	mv	a1,a2
2041a162:	ec11                	bnez	s0,2041a17e <_realloc_r+0x36>
2041a164:	5462                	lw	s0,56(sp)
2041a166:	50f2                	lw	ra,60(sp)
2041a168:	54d2                	lw	s1,52(sp)
2041a16a:	5942                	lw	s2,48(sp)
2041a16c:	59b2                	lw	s3,44(sp)
2041a16e:	5a22                	lw	s4,40(sp)
2041a170:	5a92                	lw	s5,36(sp)
2041a172:	5b02                	lw	s6,32(sp)
2041a174:	4bf2                	lw	s7,28(sp)
2041a176:	4c62                	lw	s8,24(sp)
2041a178:	6121                	addi	sp,sp,64
2041a17a:	99eff06f          	j	20419318 <_malloc_r>
2041a17e:	8aaa                	mv	s5,a0
2041a180:	c632                	sw	a2,12(sp)
2041a182:	e86ff0ef          	jal	ra,20419808 <__malloc_lock>
2041a186:	45b2                	lw	a1,12(sp)
2041a188:	ffc42683          	lw	a3,-4(s0)
2041a18c:	47d9                	li	a5,22
2041a18e:	00b58993          	addi	s3,a1,11
2041a192:	ff840b93          	addi	s7,s0,-8
2041a196:	ffc6f913          	andi	s2,a3,-4
2041a19a:	0337f763          	bleu	s3,a5,2041a1c8 <_realloc_r+0x80>
2041a19e:	ff89fb13          	andi	s6,s3,-8
2041a1a2:	020b5463          	bgez	s6,2041a1ca <_realloc_r+0x82>
2041a1a6:	47b1                	li	a5,12
2041a1a8:	00faa023          	sw	a5,0(s5)
2041a1ac:	4a01                	li	s4,0
2041a1ae:	50f2                	lw	ra,60(sp)
2041a1b0:	5462                	lw	s0,56(sp)
2041a1b2:	8552                	mv	a0,s4
2041a1b4:	54d2                	lw	s1,52(sp)
2041a1b6:	5942                	lw	s2,48(sp)
2041a1b8:	59b2                	lw	s3,44(sp)
2041a1ba:	5a22                	lw	s4,40(sp)
2041a1bc:	5a92                	lw	s5,36(sp)
2041a1be:	5b02                	lw	s6,32(sp)
2041a1c0:	4bf2                	lw	s7,28(sp)
2041a1c2:	4c62                	lw	s8,24(sp)
2041a1c4:	6121                	addi	sp,sp,64
2041a1c6:	8082                	ret
2041a1c8:	4b41                	li	s6,16
2041a1ca:	fcbb6ee3          	bltu	s6,a1,2041a1a6 <_realloc_r+0x5e>
2041a1ce:	31695463          	ble	s6,s2,2041a4d6 <_realloc_r+0x38e>
2041a1d2:	80000c37          	lui	s8,0x80000
2041a1d6:	594c0713          	addi	a4,s8,1428 # 80000594 <pulp__FC+0x80000595>
2041a1da:	4710                	lw	a2,8(a4)
2041a1dc:	012b87b3          	add	a5,s7,s2
2041a1e0:	43d8                	lw	a4,4(a5)
2041a1e2:	594c0c13          	addi	s8,s8,1428
2041a1e6:	00f60863          	beq	a2,a5,2041a1f6 <_realloc_r+0xae>
2041a1ea:	ffe77513          	andi	a0,a4,-2
2041a1ee:	953e                	add	a0,a0,a5
2041a1f0:	4148                	lw	a0,4(a0)
2041a1f2:	8905                	andi	a0,a0,1
2041a1f4:	e559                	bnez	a0,2041a282 <_realloc_r+0x13a>
2041a1f6:	9b71                	andi	a4,a4,-4
2041a1f8:	00e909b3          	add	s3,s2,a4
2041a1fc:	02f61c63          	bne	a2,a5,2041a234 <_realloc_r+0xec>
2041a200:	010b0513          	addi	a0,s6,16
2041a204:	08a9c163          	blt	s3,a0,2041a286 <_realloc_r+0x13e>
2041a208:	9bda                	add	s7,s7,s6
2041a20a:	416989b3          	sub	s3,s3,s6
2041a20e:	017c2423          	sw	s7,8(s8)
2041a212:	0019e993          	ori	s3,s3,1
2041a216:	013ba223          	sw	s3,4(s7)
2041a21a:	ffc42983          	lw	s3,-4(s0)
2041a21e:	8556                	mv	a0,s5
2041a220:	8a22                	mv	s4,s0
2041a222:	0019f993          	andi	s3,s3,1
2041a226:	0169e9b3          	or	s3,s3,s6
2041a22a:	ff342e23          	sw	s3,-4(s0)
2041a22e:	ddcff0ef          	jal	ra,2041980a <__malloc_unlock>
2041a232:	bfb5                	j	2041a1ae <_realloc_r+0x66>
2041a234:	0569c963          	blt	s3,s6,2041a286 <_realloc_r+0x13e>
2041a238:	47d8                	lw	a4,12(a5)
2041a23a:	479c                	lw	a5,8(a5)
2041a23c:	c7d8                	sw	a4,12(a5)
2041a23e:	c71c                	sw	a5,8(a4)
2041a240:	004ba703          	lw	a4,4(s7)
2041a244:	416986b3          	sub	a3,s3,s6
2041a248:	463d                	li	a2,15
2041a24a:	8b05                	andi	a4,a4,1
2041a24c:	013b87b3          	add	a5,s7,s3
2041a250:	28d67563          	bleu	a3,a2,2041a4da <_realloc_r+0x392>
2041a254:	00eb69b3          	or	s3,s6,a4
2041a258:	013ba223          	sw	s3,4(s7)
2041a25c:	016b85b3          	add	a1,s7,s6
2041a260:	0016e693          	ori	a3,a3,1
2041a264:	c1d4                	sw	a3,4(a1)
2041a266:	43d8                	lw	a4,4(a5)
2041a268:	05a1                	addi	a1,a1,8
2041a26a:	8556                	mv	a0,s5
2041a26c:	00176713          	ori	a4,a4,1
2041a270:	c3d8                	sw	a4,4(a5)
2041a272:	b8efd0ef          	jal	ra,20417600 <_free_r>
2041a276:	8556                	mv	a0,s5
2041a278:	d92ff0ef          	jal	ra,2041980a <__malloc_unlock>
2041a27c:	008b8a13          	addi	s4,s7,8
2041a280:	b73d                	j	2041a1ae <_realloc_r+0x66>
2041a282:	4701                	li	a4,0
2041a284:	4781                	li	a5,0
2041a286:	8a85                	andi	a3,a3,1
2041a288:	1a069963          	bnez	a3,2041a43a <_realloc_r+0x2f2>
2041a28c:	ff842483          	lw	s1,-8(s0)
2041a290:	409b84b3          	sub	s1,s7,s1
2041a294:	0044aa03          	lw	s4,4(s1)
2041a298:	ffca7a13          	andi	s4,s4,-4
2041a29c:	9a4a                	add	s4,s4,s2
2041a29e:	12078463          	beqz	a5,2041a3c6 <_realloc_r+0x27e>
2041a2a2:	014709b3          	add	s3,a4,s4
2041a2a6:	0af61263          	bne	a2,a5,2041a34a <_realloc_r+0x202>
2041a2aa:	010b0793          	addi	a5,s6,16
2041a2ae:	10f9cc63          	blt	s3,a5,2041a3c6 <_realloc_r+0x27e>
2041a2b2:	4498                	lw	a4,8(s1)
2041a2b4:	44dc                	lw	a5,12(s1)
2041a2b6:	ffc90613          	addi	a2,s2,-4
2041a2ba:	00848a13          	addi	s4,s1,8
2041a2be:	c75c                	sw	a5,12(a4)
2041a2c0:	c798                	sw	a4,8(a5)
2041a2c2:	02400713          	li	a4,36
2041a2c6:	06c76d63          	bltu	a4,a2,2041a340 <_realloc_r+0x1f8>
2041a2ca:	46cd                	li	a3,19
2041a2cc:	87d2                	mv	a5,s4
2041a2ce:	00c6fc63          	bleu	a2,a3,2041a2e6 <_realloc_r+0x19e>
2041a2d2:	401c                	lw	a5,0(s0)
2041a2d4:	c49c                	sw	a5,8(s1)
2041a2d6:	405c                	lw	a5,4(s0)
2041a2d8:	c4dc                	sw	a5,12(s1)
2041a2da:	47ed                	li	a5,27
2041a2dc:	02c7ef63          	bltu	a5,a2,2041a31a <_realloc_r+0x1d2>
2041a2e0:	0421                	addi	s0,s0,8
2041a2e2:	01048793          	addi	a5,s1,16
2041a2e6:	4018                	lw	a4,0(s0)
2041a2e8:	c398                	sw	a4,0(a5)
2041a2ea:	4058                	lw	a4,4(s0)
2041a2ec:	c3d8                	sw	a4,4(a5)
2041a2ee:	4418                	lw	a4,8(s0)
2041a2f0:	c798                	sw	a4,8(a5)
2041a2f2:	016487b3          	add	a5,s1,s6
2041a2f6:	416989b3          	sub	s3,s3,s6
2041a2fa:	00fc2423          	sw	a5,8(s8)
2041a2fe:	0019e993          	ori	s3,s3,1
2041a302:	0137a223          	sw	s3,4(a5)
2041a306:	40dc                	lw	a5,4(s1)
2041a308:	8b85                	andi	a5,a5,1
2041a30a:	0167e9b3          	or	s3,a5,s6
2041a30e:	0134a223          	sw	s3,4(s1)
2041a312:	8556                	mv	a0,s5
2041a314:	cf6ff0ef          	jal	ra,2041980a <__malloc_unlock>
2041a318:	bd59                	j	2041a1ae <_realloc_r+0x66>
2041a31a:	441c                	lw	a5,8(s0)
2041a31c:	c89c                	sw	a5,16(s1)
2041a31e:	445c                	lw	a5,12(s0)
2041a320:	c8dc                	sw	a5,20(s1)
2041a322:	00e60663          	beq	a2,a4,2041a32e <_realloc_r+0x1e6>
2041a326:	0441                	addi	s0,s0,16
2041a328:	01848793          	addi	a5,s1,24
2041a32c:	bf6d                	j	2041a2e6 <_realloc_r+0x19e>
2041a32e:	481c                	lw	a5,16(s0)
2041a330:	0461                	addi	s0,s0,24
2041a332:	cc9c                	sw	a5,24(s1)
2041a334:	ffc42703          	lw	a4,-4(s0)
2041a338:	02048793          	addi	a5,s1,32
2041a33c:	ccd8                	sw	a4,28(s1)
2041a33e:	b765                	j	2041a2e6 <_realloc_r+0x19e>
2041a340:	85a2                	mv	a1,s0
2041a342:	8552                	mv	a0,s4
2041a344:	c86ff0ef          	jal	ra,204197ca <memmove>
2041a348:	b76d                	j	2041a2f2 <_realloc_r+0x1aa>
2041a34a:	0769ce63          	blt	s3,s6,2041a3c6 <_realloc_r+0x27e>
2041a34e:	47d8                	lw	a4,12(a5)
2041a350:	479c                	lw	a5,8(a5)
2041a352:	ffc90613          	addi	a2,s2,-4
2041a356:	00848513          	addi	a0,s1,8
2041a35a:	c7d8                	sw	a4,12(a5)
2041a35c:	c71c                	sw	a5,8(a4)
2041a35e:	4498                	lw	a4,8(s1)
2041a360:	44dc                	lw	a5,12(s1)
2041a362:	c75c                	sw	a5,12(a4)
2041a364:	c798                	sw	a4,8(a5)
2041a366:	02400793          	li	a5,36
2041a36a:	04c7ea63          	bltu	a5,a2,2041a3be <_realloc_r+0x276>
2041a36e:	474d                	li	a4,19
2041a370:	00c77c63          	bleu	a2,a4,2041a388 <_realloc_r+0x240>
2041a374:	4018                	lw	a4,0(s0)
2041a376:	c498                	sw	a4,8(s1)
2041a378:	4058                	lw	a4,4(s0)
2041a37a:	c4d8                	sw	a4,12(s1)
2041a37c:	476d                	li	a4,27
2041a37e:	00c76d63          	bltu	a4,a2,2041a398 <_realloc_r+0x250>
2041a382:	0421                	addi	s0,s0,8
2041a384:	01048513          	addi	a0,s1,16
2041a388:	401c                	lw	a5,0(s0)
2041a38a:	c11c                	sw	a5,0(a0)
2041a38c:	405c                	lw	a5,4(s0)
2041a38e:	c15c                	sw	a5,4(a0)
2041a390:	441c                	lw	a5,8(s0)
2041a392:	c51c                	sw	a5,8(a0)
2041a394:	8ba6                	mv	s7,s1
2041a396:	b56d                	j	2041a240 <_realloc_r+0xf8>
2041a398:	4418                	lw	a4,8(s0)
2041a39a:	c898                	sw	a4,16(s1)
2041a39c:	4458                	lw	a4,12(s0)
2041a39e:	c8d8                	sw	a4,20(s1)
2041a3a0:	00f60663          	beq	a2,a5,2041a3ac <_realloc_r+0x264>
2041a3a4:	0441                	addi	s0,s0,16
2041a3a6:	01848513          	addi	a0,s1,24
2041a3aa:	bff9                	j	2041a388 <_realloc_r+0x240>
2041a3ac:	481c                	lw	a5,16(s0)
2041a3ae:	02048513          	addi	a0,s1,32
2041a3b2:	0461                	addi	s0,s0,24
2041a3b4:	cc9c                	sw	a5,24(s1)
2041a3b6:	ffc42783          	lw	a5,-4(s0)
2041a3ba:	ccdc                	sw	a5,28(s1)
2041a3bc:	b7f1                	j	2041a388 <_realloc_r+0x240>
2041a3be:	85a2                	mv	a1,s0
2041a3c0:	c0aff0ef          	jal	ra,204197ca <memmove>
2041a3c4:	bfc1                	j	2041a394 <_realloc_r+0x24c>
2041a3c6:	076a4a63          	blt	s4,s6,2041a43a <_realloc_r+0x2f2>
2041a3ca:	44dc                	lw	a5,12(s1)
2041a3cc:	4498                	lw	a4,8(s1)
2041a3ce:	ffc90613          	addi	a2,s2,-4
2041a3d2:	00848513          	addi	a0,s1,8
2041a3d6:	c75c                	sw	a5,12(a4)
2041a3d8:	c798                	sw	a4,8(a5)
2041a3da:	02400793          	li	a5,36
2041a3de:	04c7ea63          	bltu	a5,a2,2041a432 <_realloc_r+0x2ea>
2041a3e2:	474d                	li	a4,19
2041a3e4:	00c77c63          	bleu	a2,a4,2041a3fc <_realloc_r+0x2b4>
2041a3e8:	4018                	lw	a4,0(s0)
2041a3ea:	c498                	sw	a4,8(s1)
2041a3ec:	4058                	lw	a4,4(s0)
2041a3ee:	c4d8                	sw	a4,12(s1)
2041a3f0:	476d                	li	a4,27
2041a3f2:	00c76d63          	bltu	a4,a2,2041a40c <_realloc_r+0x2c4>
2041a3f6:	0421                	addi	s0,s0,8
2041a3f8:	01048513          	addi	a0,s1,16
2041a3fc:	401c                	lw	a5,0(s0)
2041a3fe:	c11c                	sw	a5,0(a0)
2041a400:	405c                	lw	a5,4(s0)
2041a402:	c15c                	sw	a5,4(a0)
2041a404:	441c                	lw	a5,8(s0)
2041a406:	c51c                	sw	a5,8(a0)
2041a408:	89d2                	mv	s3,s4
2041a40a:	b769                	j	2041a394 <_realloc_r+0x24c>
2041a40c:	4418                	lw	a4,8(s0)
2041a40e:	c898                	sw	a4,16(s1)
2041a410:	4458                	lw	a4,12(s0)
2041a412:	c8d8                	sw	a4,20(s1)
2041a414:	00f60663          	beq	a2,a5,2041a420 <_realloc_r+0x2d8>
2041a418:	0441                	addi	s0,s0,16
2041a41a:	01848513          	addi	a0,s1,24
2041a41e:	bff9                	j	2041a3fc <_realloc_r+0x2b4>
2041a420:	481c                	lw	a5,16(s0)
2041a422:	02048513          	addi	a0,s1,32
2041a426:	0461                	addi	s0,s0,24
2041a428:	cc9c                	sw	a5,24(s1)
2041a42a:	ffc42783          	lw	a5,-4(s0)
2041a42e:	ccdc                	sw	a5,28(s1)
2041a430:	b7f1                	j	2041a3fc <_realloc_r+0x2b4>
2041a432:	85a2                	mv	a1,s0
2041a434:	b96ff0ef          	jal	ra,204197ca <memmove>
2041a438:	bfc1                	j	2041a408 <_realloc_r+0x2c0>
2041a43a:	8556                	mv	a0,s5
2041a43c:	eddfe0ef          	jal	ra,20419318 <_malloc_r>
2041a440:	8a2a                	mv	s4,a0
2041a442:	ec0508e3          	beqz	a0,2041a312 <_realloc_r+0x1ca>
2041a446:	ffc42783          	lw	a5,-4(s0)
2041a44a:	ff850713          	addi	a4,a0,-8
2041a44e:	9bf9                	andi	a5,a5,-2
2041a450:	97de                	add	a5,a5,s7
2041a452:	00e79863          	bne	a5,a4,2041a462 <_realloc_r+0x31a>
2041a456:	ffc52983          	lw	s3,-4(a0)
2041a45a:	ffc9f993          	andi	s3,s3,-4
2041a45e:	99ca                	add	s3,s3,s2
2041a460:	b3c5                	j	2041a240 <_realloc_r+0xf8>
2041a462:	ffc90613          	addi	a2,s2,-4
2041a466:	02400793          	li	a5,36
2041a46a:	06c7e263          	bltu	a5,a2,2041a4ce <_realloc_r+0x386>
2041a46e:	474d                	li	a4,19
2041a470:	04c77c63          	bleu	a2,a4,2041a4c8 <_realloc_r+0x380>
2041a474:	4018                	lw	a4,0(s0)
2041a476:	c118                	sw	a4,0(a0)
2041a478:	4058                	lw	a4,4(s0)
2041a47a:	c158                	sw	a4,4(a0)
2041a47c:	476d                	li	a4,27
2041a47e:	02c76163          	bltu	a4,a2,2041a4a0 <_realloc_r+0x358>
2041a482:	00840713          	addi	a4,s0,8
2041a486:	00850793          	addi	a5,a0,8
2041a48a:	4314                	lw	a3,0(a4)
2041a48c:	c394                	sw	a3,0(a5)
2041a48e:	4354                	lw	a3,4(a4)
2041a490:	c3d4                	sw	a3,4(a5)
2041a492:	4718                	lw	a4,8(a4)
2041a494:	c798                	sw	a4,8(a5)
2041a496:	85a2                	mv	a1,s0
2041a498:	8556                	mv	a0,s5
2041a49a:	966fd0ef          	jal	ra,20417600 <_free_r>
2041a49e:	bd95                	j	2041a312 <_realloc_r+0x1ca>
2041a4a0:	4418                	lw	a4,8(s0)
2041a4a2:	c518                	sw	a4,8(a0)
2041a4a4:	4458                	lw	a4,12(s0)
2041a4a6:	c558                	sw	a4,12(a0)
2041a4a8:	00f60763          	beq	a2,a5,2041a4b6 <_realloc_r+0x36e>
2041a4ac:	01040713          	addi	a4,s0,16
2041a4b0:	01050793          	addi	a5,a0,16
2041a4b4:	bfd9                	j	2041a48a <_realloc_r+0x342>
2041a4b6:	481c                	lw	a5,16(s0)
2041a4b8:	01840713          	addi	a4,s0,24
2041a4bc:	c91c                	sw	a5,16(a0)
2041a4be:	4854                	lw	a3,20(s0)
2041a4c0:	01850793          	addi	a5,a0,24
2041a4c4:	c954                	sw	a3,20(a0)
2041a4c6:	b7d1                	j	2041a48a <_realloc_r+0x342>
2041a4c8:	87aa                	mv	a5,a0
2041a4ca:	8722                	mv	a4,s0
2041a4cc:	bf7d                	j	2041a48a <_realloc_r+0x342>
2041a4ce:	85a2                	mv	a1,s0
2041a4d0:	afaff0ef          	jal	ra,204197ca <memmove>
2041a4d4:	b7c9                	j	2041a496 <_realloc_r+0x34e>
2041a4d6:	89ca                	mv	s3,s2
2041a4d8:	b3a5                	j	2041a240 <_realloc_r+0xf8>
2041a4da:	00e9e9b3          	or	s3,s3,a4
2041a4de:	013ba223          	sw	s3,4(s7)
2041a4e2:	43d8                	lw	a4,4(a5)
2041a4e4:	00176713          	ori	a4,a4,1
2041a4e8:	c3d8                	sw	a4,4(a5)
2041a4ea:	b371                	j	2041a276 <_realloc_r+0x12e>

2041a4ec <_sbrk_r>:
2041a4ec:	1141                	addi	sp,sp,-16
2041a4ee:	c422                	sw	s0,8(sp)
2041a4f0:	c226                	sw	s1,4(sp)
2041a4f2:	80003437          	lui	s0,0x80003
2041a4f6:	84aa                	mv	s1,a0
2041a4f8:	852e                	mv	a0,a1
2041a4fa:	c606                	sw	ra,12(sp)
2041a4fc:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041a500:	de9f70ef          	jal	ra,204122e8 <__wrap_sbrk>
2041a504:	57fd                	li	a5,-1
2041a506:	00f51663          	bne	a0,a5,2041a512 <_sbrk_r+0x26>
2041a50a:	eec42783          	lw	a5,-276(s0)
2041a50e:	c391                	beqz	a5,2041a512 <_sbrk_r+0x26>
2041a510:	c09c                	sw	a5,0(s1)
2041a512:	40b2                	lw	ra,12(sp)
2041a514:	4422                	lw	s0,8(sp)
2041a516:	4492                	lw	s1,4(sp)
2041a518:	0141                	addi	sp,sp,16
2041a51a:	8082                	ret

2041a51c <frexp>:
2041a51c:	1141                	addi	sp,sp,-16
2041a51e:	c226                	sw	s1,4(sp)
2041a520:	800004b7          	lui	s1,0x80000
2041a524:	c422                	sw	s0,8(sp)
2041a526:	c606                	sw	ra,12(sp)
2041a528:	fff4c493          	not	s1,s1
2041a52c:	00b4f733          	and	a4,s1,a1
2041a530:	00062023          	sw	zero,0(a2)
2041a534:	7ff00837          	lui	a6,0x7ff00
2041a538:	86aa                	mv	a3,a0
2041a53a:	87ae                	mv	a5,a1
2041a53c:	8432                	mv	s0,a2
2041a53e:	05075763          	ble	a6,a4,2041a58c <frexp+0x70>
2041a542:	00a76833          	or	a6,a4,a0
2041a546:	04080363          	beqz	a6,2041a58c <frexp+0x70>
2041a54a:	001007b7          	lui	a5,0x100
2041a54e:	862e                	mv	a2,a1
2041a550:	02f75163          	ble	a5,a4,2041a572 <frexp+0x56>
2041a554:	800017b7          	lui	a5,0x80001
2041a558:	a5878793          	addi	a5,a5,-1448 # 80000a58 <pulp__FC+0x80000a59>
2041a55c:	4390                	lw	a2,0(a5)
2041a55e:	43d4                	lw	a3,4(a5)
2041a560:	23d020ef          	jal	ra,2041cf9c <__muldf3>
2041a564:	fca00793          	li	a5,-54
2041a568:	86aa                	mv	a3,a0
2041a56a:	862e                	mv	a2,a1
2041a56c:	00b4f733          	and	a4,s1,a1
2041a570:	c01c                	sw	a5,0(s0)
2041a572:	401c                	lw	a5,0(s0)
2041a574:	8751                	srai	a4,a4,0x14
2041a576:	c0270713          	addi	a4,a4,-1022 # ffeffc02 <pulp__FC+0xffeffc03>
2041a57a:	973e                	add	a4,a4,a5
2041a57c:	801007b7          	lui	a5,0x80100
2041a580:	17fd                	addi	a5,a5,-1
2041a582:	8e7d                	and	a2,a2,a5
2041a584:	3fe007b7          	lui	a5,0x3fe00
2041a588:	c018                	sw	a4,0(s0)
2041a58a:	8fd1                	or	a5,a5,a2
2041a58c:	40b2                	lw	ra,12(sp)
2041a58e:	4422                	lw	s0,8(sp)
2041a590:	4492                	lw	s1,4(sp)
2041a592:	8536                	mv	a0,a3
2041a594:	85be                	mv	a1,a5
2041a596:	0141                	addi	sp,sp,16
2041a598:	8082                	ret

2041a59a <_init_signal_r>:
2041a59a:	2dc52703          	lw	a4,732(a0)
2041a59e:	eb15                	bnez	a4,2041a5d2 <_init_signal_r+0x38>
2041a5a0:	1141                	addi	sp,sp,-16
2041a5a2:	08000593          	li	a1,128
2041a5a6:	c422                	sw	s0,8(sp)
2041a5a8:	c606                	sw	ra,12(sp)
2041a5aa:	842a                	mv	s0,a0
2041a5ac:	d6dfe0ef          	jal	ra,20419318 <_malloc_r>
2041a5b0:	2ca42e23          	sw	a0,732(s0)
2041a5b4:	57fd                	li	a5,-1
2041a5b6:	c909                	beqz	a0,2041a5c8 <_init_signal_r+0x2e>
2041a5b8:	08050793          	addi	a5,a0,128
2041a5bc:	00052023          	sw	zero,0(a0)
2041a5c0:	0511                	addi	a0,a0,4
2041a5c2:	fef51de3          	bne	a0,a5,2041a5bc <_init_signal_r+0x22>
2041a5c6:	4781                	li	a5,0
2041a5c8:	40b2                	lw	ra,12(sp)
2041a5ca:	4422                	lw	s0,8(sp)
2041a5cc:	853e                	mv	a0,a5
2041a5ce:	0141                	addi	sp,sp,16
2041a5d0:	8082                	ret
2041a5d2:	4781                	li	a5,0
2041a5d4:	853e                	mv	a0,a5
2041a5d6:	8082                	ret

2041a5d8 <_signal_r>:
2041a5d8:	1141                	addi	sp,sp,-16
2041a5da:	c226                	sw	s1,4(sp)
2041a5dc:	c606                	sw	ra,12(sp)
2041a5de:	c422                	sw	s0,8(sp)
2041a5e0:	c04a                	sw	s2,0(sp)
2041a5e2:	477d                	li	a4,31
2041a5e4:	84aa                	mv	s1,a0
2041a5e6:	00b77663          	bleu	a1,a4,2041a5f2 <_signal_r+0x1a>
2041a5ea:	4759                	li	a4,22
2041a5ec:	c118                	sw	a4,0(a0)
2041a5ee:	557d                	li	a0,-1
2041a5f0:	a831                	j	2041a60c <_signal_r+0x34>
2041a5f2:	2dc52783          	lw	a5,732(a0)
2041a5f6:	8932                	mv	s2,a2
2041a5f8:	842e                	mv	s0,a1
2041a5fa:	cf99                	beqz	a5,2041a618 <_signal_r+0x40>
2041a5fc:	00241593          	slli	a1,s0,0x2
2041a600:	2dc4a403          	lw	s0,732(s1) # 800002dc <pulp__FC+0x800002dd>
2041a604:	95a2                	add	a1,a1,s0
2041a606:	4188                	lw	a0,0(a1)
2041a608:	0125a023          	sw	s2,0(a1)
2041a60c:	40b2                	lw	ra,12(sp)
2041a60e:	4422                	lw	s0,8(sp)
2041a610:	4492                	lw	s1,4(sp)
2041a612:	4902                	lw	s2,0(sp)
2041a614:	0141                	addi	sp,sp,16
2041a616:	8082                	ret
2041a618:	3749                	jal	2041a59a <_init_signal_r>
2041a61a:	d16d                	beqz	a0,2041a5fc <_signal_r+0x24>
2041a61c:	bfc9                	j	2041a5ee <_signal_r+0x16>

2041a61e <_raise_r>:
2041a61e:	47fd                	li	a5,31
2041a620:	00b7f663          	bleu	a1,a5,2041a62c <_raise_r+0xe>
2041a624:	47d9                	li	a5,22
2041a626:	c11c                	sw	a5,0(a0)
2041a628:	557d                	li	a0,-1
2041a62a:	8082                	ret
2041a62c:	2dc52783          	lw	a5,732(a0)
2041a630:	1101                	addi	sp,sp,-32
2041a632:	cc22                	sw	s0,24(sp)
2041a634:	ce06                	sw	ra,28(sp)
2041a636:	862e                	mv	a2,a1
2041a638:	842a                	mv	s0,a0
2041a63a:	c791                	beqz	a5,2041a646 <_raise_r+0x28>
2041a63c:	00259713          	slli	a4,a1,0x2
2041a640:	97ba                	add	a5,a5,a4
2041a642:	4398                	lw	a4,0(a5)
2041a644:	eb19                	bnez	a4,2041a65a <_raise_r+0x3c>
2041a646:	8522                	mv	a0,s0
2041a648:	c632                	sw	a2,12(sp)
2041a64a:	20cd                	jal	2041a72c <_getpid_r>
2041a64c:	85aa                	mv	a1,a0
2041a64e:	8522                	mv	a0,s0
2041a650:	4462                	lw	s0,24(sp)
2041a652:	4632                	lw	a2,12(sp)
2041a654:	40f2                	lw	ra,28(sp)
2041a656:	6105                	addi	sp,sp,32
2041a658:	a04d                	j	2041a6fa <_kill_r>
2041a65a:	4685                	li	a3,1
2041a65c:	4501                	li	a0,0
2041a65e:	00d70863          	beq	a4,a3,2041a66e <_raise_r+0x50>
2041a662:	56fd                	li	a3,-1
2041a664:	00d71963          	bne	a4,a3,2041a676 <_raise_r+0x58>
2041a668:	47d9                	li	a5,22
2041a66a:	c01c                	sw	a5,0(s0)
2041a66c:	4505                	li	a0,1
2041a66e:	40f2                	lw	ra,28(sp)
2041a670:	4462                	lw	s0,24(sp)
2041a672:	6105                	addi	sp,sp,32
2041a674:	8082                	ret
2041a676:	852e                	mv	a0,a1
2041a678:	0007a023          	sw	zero,0(a5) # 3fe00000 <__fini_array_end+0x1f9ddd14>
2041a67c:	9702                	jalr	a4
2041a67e:	4501                	li	a0,0
2041a680:	b7fd                	j	2041a66e <_raise_r+0x50>

2041a682 <__sigtramp_r>:
2041a682:	47fd                	li	a5,31
2041a684:	00b7f463          	bleu	a1,a5,2041a68c <__sigtramp_r+0xa>
2041a688:	557d                	li	a0,-1
2041a68a:	8082                	ret
2041a68c:	2dc52783          	lw	a5,732(a0)
2041a690:	1141                	addi	sp,sp,-16
2041a692:	c422                	sw	s0,8(sp)
2041a694:	c226                	sw	s1,4(sp)
2041a696:	c606                	sw	ra,12(sp)
2041a698:	84aa                	mv	s1,a0
2041a69a:	842e                	mv	s0,a1
2041a69c:	c79d                	beqz	a5,2041a6ca <__sigtramp_r+0x48>
2041a69e:	2dc4a783          	lw	a5,732(s1)
2041a6a2:	00241713          	slli	a4,s0,0x2
2041a6a6:	4505                	li	a0,1
2041a6a8:	973e                	add	a4,a4,a5
2041a6aa:	431c                	lw	a5,0(a4)
2041a6ac:	c395                	beqz	a5,2041a6d0 <__sigtramp_r+0x4e>
2041a6ae:	56fd                	li	a3,-1
2041a6b0:	4509                	li	a0,2
2041a6b2:	00d78f63          	beq	a5,a3,2041a6d0 <__sigtramp_r+0x4e>
2041a6b6:	4685                	li	a3,1
2041a6b8:	450d                	li	a0,3
2041a6ba:	00d78b63          	beq	a5,a3,2041a6d0 <__sigtramp_r+0x4e>
2041a6be:	8522                	mv	a0,s0
2041a6c0:	00072023          	sw	zero,0(a4)
2041a6c4:	9782                	jalr	a5
2041a6c6:	4501                	li	a0,0
2041a6c8:	a021                	j	2041a6d0 <__sigtramp_r+0x4e>
2041a6ca:	3dc1                	jal	2041a59a <_init_signal_r>
2041a6cc:	d969                	beqz	a0,2041a69e <__sigtramp_r+0x1c>
2041a6ce:	557d                	li	a0,-1
2041a6d0:	40b2                	lw	ra,12(sp)
2041a6d2:	4422                	lw	s0,8(sp)
2041a6d4:	4492                	lw	s1,4(sp)
2041a6d6:	0141                	addi	sp,sp,16
2041a6d8:	8082                	ret

2041a6da <raise>:
2041a6da:	85aa                	mv	a1,a0
2041a6dc:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041a6e0:	bf3d                	j	2041a61e <_raise_r>

2041a6e2 <signal>:
2041a6e2:	862e                	mv	a2,a1
2041a6e4:	85aa                	mv	a1,a0
2041a6e6:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041a6ea:	b5fd                	j	2041a5d8 <_signal_r>

2041a6ec <_init_signal>:
2041a6ec:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041a6f0:	b56d                	j	2041a59a <_init_signal_r>

2041a6f2 <__sigtramp>:
2041a6f2:	85aa                	mv	a1,a0
2041a6f4:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041a6f8:	b769                	j	2041a682 <__sigtramp_r>

2041a6fa <_kill_r>:
2041a6fa:	1141                	addi	sp,sp,-16
2041a6fc:	c422                	sw	s0,8(sp)
2041a6fe:	c226                	sw	s1,4(sp)
2041a700:	80003437          	lui	s0,0x80003
2041a704:	84aa                	mv	s1,a0
2041a706:	852e                	mv	a0,a1
2041a708:	85b2                	mv	a1,a2
2041a70a:	c606                	sw	ra,12(sp)
2041a70c:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041a710:	1ec010ef          	jal	ra,2041b8fc <__wrap_kill>
2041a714:	57fd                	li	a5,-1
2041a716:	00f51663          	bne	a0,a5,2041a722 <_kill_r+0x28>
2041a71a:	eec42783          	lw	a5,-276(s0)
2041a71e:	c391                	beqz	a5,2041a722 <_kill_r+0x28>
2041a720:	c09c                	sw	a5,0(s1)
2041a722:	40b2                	lw	ra,12(sp)
2041a724:	4422                	lw	s0,8(sp)
2041a726:	4492                	lw	s1,4(sp)
2041a728:	0141                	addi	sp,sp,16
2041a72a:	8082                	ret

2041a72c <_getpid_r>:
2041a72c:	18c0106f          	j	2041b8b8 <__wrap_getpid>

2041a730 <_sprintf_r>:
2041a730:	7135                	addi	sp,sp,-160
2041a732:	cb3e                	sw	a5,148(sp)
2041a734:	800007b7          	lui	a5,0x80000
2041a738:	fff7c793          	not	a5,a5
2041a73c:	ce3e                	sw	a5,28(sp)
2041a73e:	c83e                	sw	a5,16(sp)
2041a740:	77c1                	lui	a5,0xffff0
2041a742:	c736                	sw	a3,140(sp)
2041a744:	c42e                	sw	a1,8(sp)
2041a746:	cc2e                	sw	a1,24(sp)
2041a748:	20878793          	addi	a5,a5,520 # ffff0208 <pulp__FC+0xffff0209>
2041a74c:	0174                	addi	a3,sp,140
2041a74e:	002c                	addi	a1,sp,8
2041a750:	de86                	sw	ra,124(sp)
2041a752:	ca3e                	sw	a5,20(sp)
2041a754:	c93a                	sw	a4,144(sp)
2041a756:	cd42                	sw	a6,152(sp)
2041a758:	cf46                	sw	a7,156(sp)
2041a75a:	c236                	sw	a3,4(sp)
2041a75c:	f63f80ef          	jal	ra,204136be <_svfprintf_r>
2041a760:	47a2                	lw	a5,8(sp)
2041a762:	00078023          	sb	zero,0(a5)
2041a766:	50f6                	lw	ra,124(sp)
2041a768:	610d                	addi	sp,sp,160
2041a76a:	8082                	ret

2041a76c <sprintf>:
2041a76c:	7135                	addi	sp,sp,-160
2041a76e:	cb3e                	sw	a5,148(sp)
2041a770:	800007b7          	lui	a5,0x80000
2041a774:	fff7c793          	not	a5,a5
2041a778:	ce3e                	sw	a5,28(sp)
2041a77a:	c83e                	sw	a5,16(sp)
2041a77c:	77c1                	lui	a5,0xffff0
2041a77e:	20878793          	addi	a5,a5,520 # ffff0208 <pulp__FC+0xffff0209>
2041a782:	ca3e                	sw	a5,20(sp)
2041a784:	c42a                	sw	a0,8(sp)
2041a786:	cc2a                	sw	a0,24(sp)
2041a788:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041a78c:	c532                	sw	a2,136(sp)
2041a78e:	c736                	sw	a3,140(sp)
2041a790:	862e                	mv	a2,a1
2041a792:	0134                	addi	a3,sp,136
2041a794:	002c                	addi	a1,sp,8
2041a796:	de86                	sw	ra,124(sp)
2041a798:	c93a                	sw	a4,144(sp)
2041a79a:	cd42                	sw	a6,152(sp)
2041a79c:	cf46                	sw	a7,156(sp)
2041a79e:	c236                	sw	a3,4(sp)
2041a7a0:	f1ff80ef          	jal	ra,204136be <_svfprintf_r>
2041a7a4:	47a2                	lw	a5,8(sp)
2041a7a6:	00078023          	sb	zero,0(a5)
2041a7aa:	50f6                	lw	ra,124(sp)
2041a7ac:	610d                	addi	sp,sp,160
2041a7ae:	8082                	ret

2041a7b0 <__sread>:
2041a7b0:	1141                	addi	sp,sp,-16
2041a7b2:	c422                	sw	s0,8(sp)
2041a7b4:	842e                	mv	s0,a1
2041a7b6:	00e59583          	lh	a1,14(a1)
2041a7ba:	c606                	sw	ra,12(sp)
2041a7bc:	5bb000ef          	jal	ra,2041b576 <_read_r>
2041a7c0:	00054963          	bltz	a0,2041a7d2 <__sread+0x22>
2041a7c4:	483c                	lw	a5,80(s0)
2041a7c6:	97aa                	add	a5,a5,a0
2041a7c8:	c83c                	sw	a5,80(s0)
2041a7ca:	40b2                	lw	ra,12(sp)
2041a7cc:	4422                	lw	s0,8(sp)
2041a7ce:	0141                	addi	sp,sp,16
2041a7d0:	8082                	ret
2041a7d2:	00c45783          	lhu	a5,12(s0)
2041a7d6:	777d                	lui	a4,0xfffff
2041a7d8:	177d                	addi	a4,a4,-1
2041a7da:	8ff9                	and	a5,a5,a4
2041a7dc:	00f41623          	sh	a5,12(s0)
2041a7e0:	b7ed                	j	2041a7ca <__sread+0x1a>

2041a7e2 <__seofread>:
2041a7e2:	4501                	li	a0,0
2041a7e4:	8082                	ret

2041a7e6 <__swrite>:
2041a7e6:	00c5d783          	lhu	a5,12(a1)
2041a7ea:	1101                	addi	sp,sp,-32
2041a7ec:	cc22                	sw	s0,24(sp)
2041a7ee:	ca26                	sw	s1,20(sp)
2041a7f0:	c84a                	sw	s2,16(sp)
2041a7f2:	c64e                	sw	s3,12(sp)
2041a7f4:	ce06                	sw	ra,28(sp)
2041a7f6:	1007f793          	andi	a5,a5,256
2041a7fa:	84aa                	mv	s1,a0
2041a7fc:	842e                	mv	s0,a1
2041a7fe:	8932                	mv	s2,a2
2041a800:	89b6                	mv	s3,a3
2041a802:	c799                	beqz	a5,2041a810 <__swrite+0x2a>
2041a804:	00e59583          	lh	a1,14(a1)
2041a808:	4689                	li	a3,2
2041a80a:	4601                	li	a2,0
2041a80c:	539000ef          	jal	ra,2041b544 <_lseek_r>
2041a810:	00c45783          	lhu	a5,12(s0)
2041a814:	777d                	lui	a4,0xfffff
2041a816:	177d                	addi	a4,a4,-1
2041a818:	8ff9                	and	a5,a5,a4
2041a81a:	00f41623          	sh	a5,12(s0)
2041a81e:	00e41583          	lh	a1,14(s0)
2041a822:	4462                	lw	s0,24(sp)
2041a824:	40f2                	lw	ra,28(sp)
2041a826:	86ce                	mv	a3,s3
2041a828:	864a                	mv	a2,s2
2041a82a:	49b2                	lw	s3,12(sp)
2041a82c:	4942                	lw	s2,16(sp)
2041a82e:	8526                	mv	a0,s1
2041a830:	44d2                	lw	s1,20(sp)
2041a832:	6105                	addi	sp,sp,32
2041a834:	3410006f          	j	2041b374 <_write_r>

2041a838 <__sseek>:
2041a838:	1141                	addi	sp,sp,-16
2041a83a:	c422                	sw	s0,8(sp)
2041a83c:	842e                	mv	s0,a1
2041a83e:	00e59583          	lh	a1,14(a1)
2041a842:	c606                	sw	ra,12(sp)
2041a844:	501000ef          	jal	ra,2041b544 <_lseek_r>
2041a848:	57fd                	li	a5,-1
2041a84a:	00c45703          	lhu	a4,12(s0)
2041a84e:	00f51b63          	bne	a0,a5,2041a864 <__sseek+0x2c>
2041a852:	77fd                	lui	a5,0xfffff
2041a854:	17fd                	addi	a5,a5,-1
2041a856:	8ff9                	and	a5,a5,a4
2041a858:	00f41623          	sh	a5,12(s0)
2041a85c:	40b2                	lw	ra,12(sp)
2041a85e:	4422                	lw	s0,8(sp)
2041a860:	0141                	addi	sp,sp,16
2041a862:	8082                	ret
2041a864:	6785                	lui	a5,0x1
2041a866:	8fd9                	or	a5,a5,a4
2041a868:	00f41623          	sh	a5,12(s0)
2041a86c:	c828                	sw	a0,80(s0)
2041a86e:	b7fd                	j	2041a85c <__sseek+0x24>

2041a870 <__sclose>:
2041a870:	00e59583          	lh	a1,14(a1)
2041a874:	3ad0006f          	j	2041b420 <_close_r>

2041a878 <strcpy>:
2041a878:	87aa                	mv	a5,a0
2041a87a:	0005c703          	lbu	a4,0(a1)
2041a87e:	0785                	addi	a5,a5,1
2041a880:	0585                	addi	a1,a1,1
2041a882:	fee78fa3          	sb	a4,-1(a5) # fff <__stack_size+0x7ff>
2041a886:	fb75                	bnez	a4,2041a87a <strcpy+0x2>
2041a888:	8082                	ret

2041a88a <__ssprint_r>:
2041a88a:	461c                	lw	a5,8(a2)
2041a88c:	7179                	addi	sp,sp,-48
2041a88e:	ce4e                	sw	s3,28(sp)
2041a890:	d606                	sw	ra,44(sp)
2041a892:	d422                	sw	s0,40(sp)
2041a894:	d226                	sw	s1,36(sp)
2041a896:	d04a                	sw	s2,32(sp)
2041a898:	cc52                	sw	s4,24(sp)
2041a89a:	ca56                	sw	s5,20(sp)
2041a89c:	c85a                	sw	s6,16(sp)
2041a89e:	c65e                	sw	s7,12(sp)
2041a8a0:	c462                	sw	s8,8(sp)
2041a8a2:	c266                	sw	s9,4(sp)
2041a8a4:	c06a                	sw	s10,0(sp)
2041a8a6:	89b2                	mv	s3,a2
2041a8a8:	cff9                	beqz	a5,2041a986 <__ssprint_r+0xfc>
2041a8aa:	00062a83          	lw	s5,0(a2)
2041a8ae:	8a2a                	mv	s4,a0
2041a8b0:	842e                	mv	s0,a1
2041a8b2:	4b01                	li	s6,0
2041a8b4:	4901                	li	s2,0
2041a8b6:	4b8d                	li	s7,3
2041a8b8:	4c09                	li	s8,2
2041a8ba:	06090263          	beqz	s2,2041a91e <__ssprint_r+0x94>
2041a8be:	00842d03          	lw	s10,8(s0)
2041a8c2:	09a96a63          	bltu	s2,s10,2041a956 <__ssprint_r+0xcc>
2041a8c6:	00c45783          	lhu	a5,12(s0)
2041a8ca:	4807f713          	andi	a4,a5,1152
2041a8ce:	c741                	beqz	a4,2041a956 <__ssprint_r+0xcc>
2041a8d0:	4004                	lw	s1,0(s0)
2041a8d2:	480c                	lw	a1,16(s0)
2041a8d4:	40b48cb3          	sub	s9,s1,a1
2041a8d8:	4844                	lw	s1,20(s0)
2041a8da:	001c8713          	addi	a4,s9,1
2041a8de:	974a                	add	a4,a4,s2
2041a8e0:	029b84b3          	mul	s1,s7,s1
2041a8e4:	0384c4b3          	div	s1,s1,s8
2041a8e8:	00e4f363          	bleu	a4,s1,2041a8ee <__ssprint_r+0x64>
2041a8ec:	84ba                	mv	s1,a4
2041a8ee:	4007f793          	andi	a5,a5,1024
2041a8f2:	cbdd                	beqz	a5,2041a9a8 <__ssprint_r+0x11e>
2041a8f4:	85a6                	mv	a1,s1
2041a8f6:	8552                	mv	a0,s4
2041a8f8:	a21fe0ef          	jal	ra,20419318 <_malloc_r>
2041a8fc:	8d2a                	mv	s10,a0
2041a8fe:	e515                	bnez	a0,2041a92a <__ssprint_r+0xa0>
2041a900:	47b1                	li	a5,12
2041a902:	00fa2023          	sw	a5,0(s4)
2041a906:	00c45783          	lhu	a5,12(s0)
2041a90a:	557d                	li	a0,-1
2041a90c:	0407e793          	ori	a5,a5,64
2041a910:	00f41623          	sh	a5,12(s0)
2041a914:	0009a423          	sw	zero,8(s3)
2041a918:	0009a223          	sw	zero,4(s3)
2041a91c:	a885                	j	2041a98c <__ssprint_r+0x102>
2041a91e:	000aab03          	lw	s6,0(s5)
2041a922:	004aa903          	lw	s2,4(s5)
2041a926:	0aa1                	addi	s5,s5,8
2041a928:	bf49                	j	2041a8ba <__ssprint_r+0x30>
2041a92a:	480c                	lw	a1,16(s0)
2041a92c:	8666                	mv	a2,s9
2041a92e:	ec2f80ef          	jal	ra,20412ff0 <memcpy>
2041a932:	00c45783          	lhu	a5,12(s0)
2041a936:	b7f7f793          	andi	a5,a5,-1153
2041a93a:	0807e793          	ori	a5,a5,128
2041a93e:	00f41623          	sh	a5,12(s0)
2041a942:	01a42823          	sw	s10,16(s0)
2041a946:	c844                	sw	s1,20(s0)
2041a948:	9d66                	add	s10,s10,s9
2041a94a:	419484b3          	sub	s1,s1,s9
2041a94e:	01a42023          	sw	s10,0(s0)
2041a952:	c404                	sw	s1,8(s0)
2041a954:	8d4a                	mv	s10,s2
2041a956:	01a97363          	bleu	s10,s2,2041a95c <__ssprint_r+0xd2>
2041a95a:	8d4a                	mv	s10,s2
2041a95c:	4008                	lw	a0,0(s0)
2041a95e:	866a                	mv	a2,s10
2041a960:	85da                	mv	a1,s6
2041a962:	e69fe0ef          	jal	ra,204197ca <memmove>
2041a966:	441c                	lw	a5,8(s0)
2041a968:	41a787b3          	sub	a5,a5,s10
2041a96c:	c41c                	sw	a5,8(s0)
2041a96e:	401c                	lw	a5,0(s0)
2041a970:	9d3e                	add	s10,s10,a5
2041a972:	0089a783          	lw	a5,8(s3)
2041a976:	01a42023          	sw	s10,0(s0)
2041a97a:	41278933          	sub	s2,a5,s2
2041a97e:	0129a423          	sw	s2,8(s3)
2041a982:	f8091ee3          	bnez	s2,2041a91e <__ssprint_r+0x94>
2041a986:	0009a223          	sw	zero,4(s3)
2041a98a:	4501                	li	a0,0
2041a98c:	50b2                	lw	ra,44(sp)
2041a98e:	5422                	lw	s0,40(sp)
2041a990:	5492                	lw	s1,36(sp)
2041a992:	5902                	lw	s2,32(sp)
2041a994:	49f2                	lw	s3,28(sp)
2041a996:	4a62                	lw	s4,24(sp)
2041a998:	4ad2                	lw	s5,20(sp)
2041a99a:	4b42                	lw	s6,16(sp)
2041a99c:	4bb2                	lw	s7,12(sp)
2041a99e:	4c22                	lw	s8,8(sp)
2041a9a0:	4c92                	lw	s9,4(sp)
2041a9a2:	4d02                	lw	s10,0(sp)
2041a9a4:	6145                	addi	sp,sp,48
2041a9a6:	8082                	ret
2041a9a8:	8626                	mv	a2,s1
2041a9aa:	8552                	mv	a0,s4
2041a9ac:	f9cff0ef          	jal	ra,2041a148 <_realloc_r>
2041a9b0:	8d2a                	mv	s10,a0
2041a9b2:	f941                	bnez	a0,2041a942 <__ssprint_r+0xb8>
2041a9b4:	480c                	lw	a1,16(s0)
2041a9b6:	8552                	mv	a0,s4
2041a9b8:	c49fc0ef          	jal	ra,20417600 <_free_r>
2041a9bc:	b791                	j	2041a900 <__ssprint_r+0x76>

2041a9be <_svfiprintf_r>:
2041a9be:	00c5d783          	lhu	a5,12(a1)
2041a9c2:	7169                	addi	sp,sp,-304
2041a9c4:	12912223          	sw	s1,292(sp)
2041a9c8:	13212023          	sw	s2,288(sp)
2041a9cc:	11312e23          	sw	s3,284(sp)
2041a9d0:	11512a23          	sw	s5,276(sp)
2041a9d4:	12112623          	sw	ra,300(sp)
2041a9d8:	12812423          	sw	s0,296(sp)
2041a9dc:	11412c23          	sw	s4,280(sp)
2041a9e0:	11612823          	sw	s6,272(sp)
2041a9e4:	11712623          	sw	s7,268(sp)
2041a9e8:	11812423          	sw	s8,264(sp)
2041a9ec:	11912223          	sw	s9,260(sp)
2041a9f0:	11a12023          	sw	s10,256(sp)
2041a9f4:	dfee                	sw	s11,252(sp)
2041a9f6:	0807f793          	andi	a5,a5,128
2041a9fa:	8aaa                	mv	s5,a0
2041a9fc:	892e                	mv	s2,a1
2041a9fe:	89b2                	mv	s3,a2
2041aa00:	84b6                	mv	s1,a3
2041aa02:	c795                	beqz	a5,2041aa2e <_svfiprintf_r+0x70>
2041aa04:	499c                	lw	a5,16(a1)
2041aa06:	e785                	bnez	a5,2041aa2e <_svfiprintf_r+0x70>
2041aa08:	04000593          	li	a1,64
2041aa0c:	90dfe0ef          	jal	ra,20419318 <_malloc_r>
2041aa10:	00a92023          	sw	a0,0(s2)
2041aa14:	00a92823          	sw	a0,16(s2)
2041aa18:	e519                	bnez	a0,2041aa26 <_svfiprintf_r+0x68>
2041aa1a:	47b1                	li	a5,12
2041aa1c:	00faa023          	sw	a5,0(s5)
2041aa20:	5bfd                	li	s7,-1
2041aa22:	7c00006f          	j	2041b1e2 <_svfiprintf_r+0x824>
2041aa26:	04000793          	li	a5,64
2041aa2a:	00f92a23          	sw	a5,20(s2)
2041aa2e:	04c10b13          	addi	s6,sp,76
2041aa32:	c0da                	sw	s6,64(sp)
2041aa34:	c482                	sw	zero,72(sp)
2041aa36:	c282                	sw	zero,68(sp)
2041aa38:	875a                	mv	a4,s6
2041aa3a:	d202                	sw	zero,36(sp)
2041aa3c:	ce02                	sw	zero,28(sp)
2041aa3e:	d002                	sw	zero,32(sp)
2041aa40:	d402                	sw	zero,40(sp)
2041aa42:	4b81                	li	s7,0
2041aa44:	844e                	mv	s0,s3
2041aa46:	02500693          	li	a3,37
2041aa4a:	00044783          	lbu	a5,0(s0)
2041aa4e:	c399                	beqz	a5,2041aa54 <_svfiprintf_r+0x96>
2041aa50:	06d79c63          	bne	a5,a3,2041aac8 <_svfiprintf_r+0x10a>
2041aa54:	41340a33          	sub	s4,s0,s3
2041aa58:	020a0863          	beqz	s4,2041aa88 <_svfiprintf_r+0xca>
2041aa5c:	47a6                	lw	a5,72(sp)
2041aa5e:	01372023          	sw	s3,0(a4) # fffff000 <pulp__FC+0xfffff001>
2041aa62:	01472223          	sw	s4,4(a4)
2041aa66:	97d2                	add	a5,a5,s4
2041aa68:	c4be                	sw	a5,72(sp)
2041aa6a:	4796                	lw	a5,68(sp)
2041aa6c:	469d                	li	a3,7
2041aa6e:	0721                	addi	a4,a4,8
2041aa70:	0785                	addi	a5,a5,1
2041aa72:	c2be                	sw	a5,68(sp)
2041aa74:	00f6d963          	ble	a5,a3,2041aa86 <_svfiprintf_r+0xc8>
2041aa78:	0090                	addi	a2,sp,64
2041aa7a:	85ca                	mv	a1,s2
2041aa7c:	8556                	mv	a0,s5
2041aa7e:	3531                	jal	2041a88a <__ssprint_r>
2041aa80:	74051b63          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041aa84:	875a                	mv	a4,s6
2041aa86:	9bd2                	add	s7,s7,s4
2041aa88:	00044783          	lbu	a5,0(s0)
2041aa8c:	7a078863          	beqz	a5,2041b23c <_svfiprintf_r+0x87e>
2041aa90:	00140993          	addi	s3,s0,1
2041aa94:	02010da3          	sb	zero,59(sp)
2041aa98:	547d                	li	s0,-1
2041aa9a:	4a01                	li	s4,0
2041aa9c:	4d01                	li	s10,0
2041aa9e:	4c29                	li	s8,10
2041aaa0:	02a00c93          	li	s9,42
2041aaa4:	05a00813          	li	a6,90
2041aaa8:	45a5                	li	a1,9
2041aaaa:	0009c603          	lbu	a2,0(s3)
2041aaae:	0985                	addi	s3,s3,1
2041aab0:	fe060693          	addi	a3,a2,-32
2041aab4:	64d86963          	bltu	a6,a3,2041b106 <_svfiprintf_r+0x748>
2041aab8:	204227b7          	lui	a5,0x20422
2041aabc:	068a                	slli	a3,a3,0x2
2041aabe:	f3078793          	addi	a5,a5,-208 # 20421f30 <__mprec_bigtens+0x28>
2041aac2:	96be                	add	a3,a3,a5
2041aac4:	4294                	lw	a3,0(a3)
2041aac6:	8682                	jr	a3
2041aac8:	0405                	addi	s0,s0,1
2041aaca:	b741                	j	2041aa4a <_svfiprintf_r+0x8c>
2041aacc:	204216b7          	lui	a3,0x20421
2041aad0:	75468693          	addi	a3,a3,1876 # 20421754 <zeroes.4369+0x68>
2041aad4:	d236                	sw	a3,36(sp)
2041aad6:	020d7693          	andi	a3,s10,32
2041aada:	4c068a63          	beqz	a3,2041afae <_svfiprintf_r+0x5f0>
2041aade:	049d                	addi	s1,s1,7
2041aae0:	98e1                	andi	s1,s1,-8
2041aae2:	0004a883          	lw	a7,0(s1)
2041aae6:	0044ac83          	lw	s9,4(s1)
2041aaea:	00848c13          	addi	s8,s1,8
2041aaee:	001d7693          	andi	a3,s10,1
2041aaf2:	ce81                	beqz	a3,2041ab0a <_svfiprintf_r+0x14c>
2041aaf4:	0198e6b3          	or	a3,a7,s9
2041aaf8:	ca89                	beqz	a3,2041ab0a <_svfiprintf_r+0x14c>
2041aafa:	03000693          	li	a3,48
2041aafe:	02d10e23          	sb	a3,60(sp)
2041ab02:	02c10ea3          	sb	a2,61(sp)
2041ab06:	002d6d13          	ori	s10,s10,2
2041ab0a:	bffd7d13          	andi	s10,s10,-1025
2041ab0e:	a485                	j	2041ad6e <_svfiprintf_r+0x3b0>
2041ab10:	8556                	mv	a0,s5
2041ab12:	c83a                	sw	a4,16(sp)
2041ab14:	ed4fe0ef          	jal	ra,204191e8 <_localeconv_r>
2041ab18:	4148                	lw	a0,4(a0)
2041ab1a:	d42a                	sw	a0,40(sp)
2041ab1c:	82df80ef          	jal	ra,20413348 <strlen>
2041ab20:	d02a                	sw	a0,32(sp)
2041ab22:	8556                	mv	a0,s5
2041ab24:	ec4fe0ef          	jal	ra,204191e8 <_localeconv_r>
2041ab28:	4508                	lw	a0,8(a0)
2041ab2a:	5782                	lw	a5,32(sp)
2041ab2c:	4742                	lw	a4,16(sp)
2041ab2e:	ce2a                	sw	a0,28(sp)
2041ab30:	dbb5                	beqz	a5,2041aaa4 <_svfiprintf_r+0xe6>
2041ab32:	d92d                	beqz	a0,2041aaa4 <_svfiprintf_r+0xe6>
2041ab34:	00054683          	lbu	a3,0(a0)
2041ab38:	d6b5                	beqz	a3,2041aaa4 <_svfiprintf_r+0xe6>
2041ab3a:	400d6d13          	ori	s10,s10,1024
2041ab3e:	b79d                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041ab40:	03b14683          	lbu	a3,59(sp)
2041ab44:	f2a5                	bnez	a3,2041aaa4 <_svfiprintf_r+0xe6>
2041ab46:	02000693          	li	a3,32
2041ab4a:	02d10da3          	sb	a3,59(sp)
2041ab4e:	bf99                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041ab50:	001d6d13          	ori	s10,s10,1
2041ab54:	bf81                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041ab56:	0004aa03          	lw	s4,0(s1)
2041ab5a:	0491                	addi	s1,s1,4
2041ab5c:	f40a54e3          	bgez	s4,2041aaa4 <_svfiprintf_r+0xe6>
2041ab60:	41400a33          	neg	s4,s4
2041ab64:	004d6d13          	ori	s10,s10,4
2041ab68:	bf35                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041ab6a:	02b00693          	li	a3,43
2041ab6e:	bff1                	j	2041ab4a <_svfiprintf_r+0x18c>
2041ab70:	0009c603          	lbu	a2,0(s3)
2041ab74:	00198693          	addi	a3,s3,1
2041ab78:	03961763          	bne	a2,s9,2041aba6 <_svfiprintf_r+0x1e8>
2041ab7c:	4080                	lw	s0,0(s1)
2041ab7e:	00448613          	addi	a2,s1,4
2041ab82:	00045363          	bgez	s0,2041ab88 <_svfiprintf_r+0x1ca>
2041ab86:	547d                	li	s0,-1
2041ab88:	84b2                	mv	s1,a2
2041ab8a:	89b6                	mv	s3,a3
2041ab8c:	bf21                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041ab8e:	03840433          	mul	s0,s0,s8
2041ab92:	0685                	addi	a3,a3,1
2041ab94:	fff6c603          	lbu	a2,-1(a3)
2041ab98:	942a                	add	s0,s0,a0
2041ab9a:	fd060513          	addi	a0,a2,-48
2041ab9e:	fea5f8e3          	bleu	a0,a1,2041ab8e <_svfiprintf_r+0x1d0>
2041aba2:	89b6                	mv	s3,a3
2041aba4:	b731                	j	2041aab0 <_svfiprintf_r+0xf2>
2041aba6:	4401                	li	s0,0
2041aba8:	bfcd                	j	2041ab9a <_svfiprintf_r+0x1dc>
2041abaa:	080d6d13          	ori	s10,s10,128
2041abae:	bddd                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041abb0:	86ce                	mv	a3,s3
2041abb2:	4a01                	li	s4,0
2041abb4:	038a0a33          	mul	s4,s4,s8
2041abb8:	fd060613          	addi	a2,a2,-48
2041abbc:	0685                	addi	a3,a3,1
2041abbe:	9a32                	add	s4,s4,a2
2041abc0:	fff6c603          	lbu	a2,-1(a3)
2041abc4:	fd060513          	addi	a0,a2,-48
2041abc8:	fea5f6e3          	bleu	a0,a1,2041abb4 <_svfiprintf_r+0x1f6>
2041abcc:	bfd9                	j	2041aba2 <_svfiprintf_r+0x1e4>
2041abce:	0009c603          	lbu	a2,0(s3)
2041abd2:	06800693          	li	a3,104
2041abd6:	00d61663          	bne	a2,a3,2041abe2 <_svfiprintf_r+0x224>
2041abda:	0985                	addi	s3,s3,1
2041abdc:	200d6d13          	ori	s10,s10,512
2041abe0:	b5d1                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041abe2:	040d6d13          	ori	s10,s10,64
2041abe6:	bd7d                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041abe8:	0009c603          	lbu	a2,0(s3)
2041abec:	06c00693          	li	a3,108
2041abf0:	00d61663          	bne	a2,a3,2041abfc <_svfiprintf_r+0x23e>
2041abf4:	0985                	addi	s3,s3,1
2041abf6:	020d6d13          	ori	s10,s10,32
2041abfa:	b56d                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041abfc:	010d6d13          	ori	s10,s10,16
2041ac00:	b555                	j	2041aaa4 <_svfiprintf_r+0xe6>
2041ac02:	4094                	lw	a3,0(s1)
2041ac04:	00448c13          	addi	s8,s1,4
2041ac08:	02010da3          	sb	zero,59(sp)
2041ac0c:	08d10623          	sb	a3,140(sp)
2041ac10:	4405                	li	s0,1
2041ac12:	4c81                	li	s9,0
2041ac14:	0164                	addi	s1,sp,140
2041ac16:	a249                	j	2041ad98 <_svfiprintf_r+0x3da>
2041ac18:	010d6d13          	ori	s10,s10,16
2041ac1c:	020d7693          	andi	a3,s10,32
2041ac20:	c6b1                	beqz	a3,2041ac6c <_svfiprintf_r+0x2ae>
2041ac22:	049d                	addi	s1,s1,7
2041ac24:	98e1                	andi	s1,s1,-8
2041ac26:	0004a883          	lw	a7,0(s1)
2041ac2a:	0044ac83          	lw	s9,4(s1)
2041ac2e:	00848c13          	addi	s8,s1,8
2041ac32:	000cde63          	bgez	s9,2041ac4e <_svfiprintf_r+0x290>
2041ac36:	411008b3          	neg	a7,a7
2041ac3a:	011036b3          	snez	a3,a7
2041ac3e:	41900333          	neg	t1,s9
2041ac42:	40d30cb3          	sub	s9,t1,a3
2041ac46:	02d00693          	li	a3,45
2041ac4a:	02d10da3          	sb	a3,59(sp)
2041ac4e:	56fd                	li	a3,-1
2041ac50:	38d41463          	bne	s0,a3,2041afd8 <_svfiprintf_r+0x61a>
2041ac54:	3e0c9163          	bnez	s9,2041b036 <_svfiprintf_r+0x678>
2041ac58:	46a5                	li	a3,9
2041ac5a:	3d16ee63          	bltu	a3,a7,2041b036 <_svfiprintf_r+0x678>
2041ac5e:	03088893          	addi	a7,a7,48
2041ac62:	0f1107a3          	sb	a7,239(sp)
2041ac66:	0ef10493          	addi	s1,sp,239
2041ac6a:	ae7d                	j	2041b028 <_svfiprintf_r+0x66a>
2041ac6c:	010d7693          	andi	a3,s10,16
2041ac70:	00448c13          	addi	s8,s1,4
2041ac74:	c691                	beqz	a3,2041ac80 <_svfiprintf_r+0x2c2>
2041ac76:	0004a883          	lw	a7,0(s1)
2041ac7a:	41f8dc93          	srai	s9,a7,0x1f
2041ac7e:	bf55                	j	2041ac32 <_svfiprintf_r+0x274>
2041ac80:	040d7693          	andi	a3,s10,64
2041ac84:	0004a883          	lw	a7,0(s1)
2041ac88:	c689                	beqz	a3,2041ac92 <_svfiprintf_r+0x2d4>
2041ac8a:	08c2                	slli	a7,a7,0x10
2041ac8c:	4108d893          	srai	a7,a7,0x10
2041ac90:	b7ed                	j	2041ac7a <_svfiprintf_r+0x2bc>
2041ac92:	200d7693          	andi	a3,s10,512
2041ac96:	d2f5                	beqz	a3,2041ac7a <_svfiprintf_r+0x2bc>
2041ac98:	08e2                	slli	a7,a7,0x18
2041ac9a:	4188d893          	srai	a7,a7,0x18
2041ac9e:	bff1                	j	2041ac7a <_svfiprintf_r+0x2bc>
2041aca0:	020d7613          	andi	a2,s10,32
2041aca4:	4094                	lw	a3,0(s1)
2041aca6:	0491                	addi	s1,s1,4
2041aca8:	c619                	beqz	a2,2041acb6 <_svfiprintf_r+0x2f8>
2041acaa:	41fbd793          	srai	a5,s7,0x1f
2041acae:	0176a023          	sw	s7,0(a3)
2041acb2:	c2dc                	sw	a5,4(a3)
2041acb4:	bb41                	j	2041aa44 <_svfiprintf_r+0x86>
2041acb6:	010d7613          	andi	a2,s10,16
2041acba:	c601                	beqz	a2,2041acc2 <_svfiprintf_r+0x304>
2041acbc:	0176a023          	sw	s7,0(a3)
2041acc0:	b351                	j	2041aa44 <_svfiprintf_r+0x86>
2041acc2:	040d7613          	andi	a2,s10,64
2041acc6:	c609                	beqz	a2,2041acd0 <_svfiprintf_r+0x312>
2041acc8:	87de                	mv	a5,s7
2041acca:	00f69023          	sh	a5,0(a3)
2041acce:	bb9d                	j	2041aa44 <_svfiprintf_r+0x86>
2041acd0:	200d7793          	andi	a5,s10,512
2041acd4:	d7e5                	beqz	a5,2041acbc <_svfiprintf_r+0x2fe>
2041acd6:	87de                	mv	a5,s7
2041acd8:	00f68023          	sb	a5,0(a3)
2041acdc:	b3a5                	j	2041aa44 <_svfiprintf_r+0x86>
2041acde:	010d6d13          	ori	s10,s10,16
2041ace2:	020d7693          	andi	a3,s10,32
2041ace6:	ce95                	beqz	a3,2041ad22 <_svfiprintf_r+0x364>
2041ace8:	049d                	addi	s1,s1,7
2041acea:	98e1                	andi	s1,s1,-8
2041acec:	0004a883          	lw	a7,0(s1)
2041acf0:	0044ac83          	lw	s9,4(s1)
2041acf4:	00848c13          	addi	s8,s1,8
2041acf8:	bffd7d13          	andi	s10,s10,-1025
2041acfc:	4681                	li	a3,0
2041acfe:	02010da3          	sb	zero,59(sp)
2041ad02:	567d                	li	a2,-1
2041ad04:	2cc40d63          	beq	s0,a2,2041afde <_svfiprintf_r+0x620>
2041ad08:	866a                	mv	a2,s10
2041ad0a:	0198e5b3          	or	a1,a7,s9
2041ad0e:	f7fd7d13          	andi	s10,s10,-129
2041ad12:	2c059663          	bnez	a1,2041afde <_svfiprintf_r+0x620>
2041ad16:	3c040f63          	beqz	s0,2041b0f4 <_svfiprintf_r+0x736>
2041ad1a:	4605                	li	a2,1
2041ad1c:	2cc69463          	bne	a3,a2,2041afe4 <_svfiprintf_r+0x626>
2041ad20:	bf3d                	j	2041ac5e <_svfiprintf_r+0x2a0>
2041ad22:	010d7693          	andi	a3,s10,16
2041ad26:	00448c13          	addi	s8,s1,4
2041ad2a:	c681                	beqz	a3,2041ad32 <_svfiprintf_r+0x374>
2041ad2c:	0004a883          	lw	a7,0(s1)
2041ad30:	a031                	j	2041ad3c <_svfiprintf_r+0x37e>
2041ad32:	040d7693          	andi	a3,s10,64
2041ad36:	c689                	beqz	a3,2041ad40 <_svfiprintf_r+0x382>
2041ad38:	0004d883          	lhu	a7,0(s1)
2041ad3c:	4c81                	li	s9,0
2041ad3e:	bf6d                	j	2041acf8 <_svfiprintf_r+0x33a>
2041ad40:	200d7693          	andi	a3,s10,512
2041ad44:	d6e5                	beqz	a3,2041ad2c <_svfiprintf_r+0x36e>
2041ad46:	0004c883          	lbu	a7,0(s1)
2041ad4a:	bfcd                	j	2041ad3c <_svfiprintf_r+0x37e>
2041ad4c:	76e1                	lui	a3,0xffff8
2041ad4e:	8306c693          	xori	a3,a3,-2000
2041ad52:	02d11e23          	sh	a3,60(sp)
2041ad56:	0004a883          	lw	a7,0(s1)
2041ad5a:	204216b7          	lui	a3,0x20421
2041ad5e:	74068693          	addi	a3,a3,1856 # 20421740 <zeroes.4369+0x54>
2041ad62:	00448c13          	addi	s8,s1,4
2041ad66:	4c81                	li	s9,0
2041ad68:	002d6d13          	ori	s10,s10,2
2041ad6c:	d236                	sw	a3,36(sp)
2041ad6e:	4689                	li	a3,2
2041ad70:	b779                	j	2041acfe <_svfiprintf_r+0x340>
2041ad72:	02010da3          	sb	zero,59(sp)
2041ad76:	56fd                	li	a3,-1
2041ad78:	00448c13          	addi	s8,s1,4
2041ad7c:	4084                	lw	s1,0(s1)
2041ad7e:	1cd40763          	beq	s0,a3,2041af4c <_svfiprintf_r+0x58e>
2041ad82:	8622                	mv	a2,s0
2041ad84:	4581                	li	a1,0
2041ad86:	8526                	mv	a0,s1
2041ad88:	c83a                	sw	a4,16(sp)
2041ad8a:	a27fe0ef          	jal	ra,204197b0 <memchr>
2041ad8e:	4c81                	li	s9,0
2041ad90:	4742                	lw	a4,16(sp)
2041ad92:	c119                	beqz	a0,2041ad98 <_svfiprintf_r+0x3da>
2041ad94:	40950433          	sub	s0,a0,s1
2041ad98:	cc66                	sw	s9,24(sp)
2041ad9a:	008cd363          	ble	s0,s9,2041ada0 <_svfiprintf_r+0x3e2>
2041ad9e:	cc22                	sw	s0,24(sp)
2041ada0:	03b14683          	lbu	a3,59(sp)
2041ada4:	c681                	beqz	a3,2041adac <_svfiprintf_r+0x3ee>
2041ada6:	47e2                	lw	a5,24(sp)
2041ada8:	0785                	addi	a5,a5,1
2041adaa:	cc3e                	sw	a5,24(sp)
2041adac:	002d7d93          	andi	s11,s10,2
2041adb0:	000d8563          	beqz	s11,2041adba <_svfiprintf_r+0x3fc>
2041adb4:	47e2                	lw	a5,24(sp)
2041adb6:	0789                	addi	a5,a5,2
2041adb8:	cc3e                	sw	a5,24(sp)
2041adba:	084d7793          	andi	a5,s10,132
2041adbe:	d63e                	sw	a5,44(sp)
2041adc0:	e7a1                	bnez	a5,2041ae08 <_svfiprintf_r+0x44a>
2041adc2:	47e2                	lw	a5,24(sp)
2041adc4:	40fa06b3          	sub	a3,s4,a5
2041adc8:	04d05063          	blez	a3,2041ae08 <_svfiprintf_r+0x44a>
2041adcc:	204227b7          	lui	a5,0x20422
2041add0:	48c1                	li	a7,16
2041add2:	09c78813          	addi	a6,a5,156 # 2042209c <blanks.4345>
2041add6:	431d                	li	t1,7
2041add8:	4616                	lw	a2,68(sp)
2041adda:	01072023          	sw	a6,0(a4)
2041adde:	45a6                	lw	a1,72(sp)
2041ade0:	0605                	addi	a2,a2,1
2041ade2:	00870513          	addi	a0,a4,8
2041ade6:	32d8c863          	blt	a7,a3,2041b116 <_svfiprintf_r+0x758>
2041adea:	c354                	sw	a3,4(a4)
2041adec:	96ae                	add	a3,a3,a1
2041adee:	c4b6                	sw	a3,72(sp)
2041adf0:	c2b2                	sw	a2,68(sp)
2041adf2:	469d                	li	a3,7
2041adf4:	872a                	mv	a4,a0
2041adf6:	00c6d963          	ble	a2,a3,2041ae08 <_svfiprintf_r+0x44a>
2041adfa:	0090                	addi	a2,sp,64
2041adfc:	85ca                	mv	a1,s2
2041adfe:	8556                	mv	a0,s5
2041ae00:	3469                	jal	2041a88a <__ssprint_r>
2041ae02:	3c051a63          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041ae06:	875a                	mv	a4,s6
2041ae08:	03b14683          	lbu	a3,59(sp)
2041ae0c:	c69d                	beqz	a3,2041ae3a <_svfiprintf_r+0x47c>
2041ae0e:	03b10613          	addi	a2,sp,59
2041ae12:	c310                	sw	a2,0(a4)
2041ae14:	4605                	li	a2,1
2041ae16:	4696                	lw	a3,68(sp)
2041ae18:	c350                	sw	a2,4(a4)
2041ae1a:	4626                	lw	a2,72(sp)
2041ae1c:	0685                	addi	a3,a3,1
2041ae1e:	c2b6                	sw	a3,68(sp)
2041ae20:	0605                	addi	a2,a2,1
2041ae22:	c4b2                	sw	a2,72(sp)
2041ae24:	461d                	li	a2,7
2041ae26:	0721                	addi	a4,a4,8
2041ae28:	00d65963          	ble	a3,a2,2041ae3a <_svfiprintf_r+0x47c>
2041ae2c:	0090                	addi	a2,sp,64
2041ae2e:	85ca                	mv	a1,s2
2041ae30:	8556                	mv	a0,s5
2041ae32:	3ca1                	jal	2041a88a <__ssprint_r>
2041ae34:	3a051163          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041ae38:	875a                	mv	a4,s6
2041ae3a:	020d8763          	beqz	s11,2041ae68 <_svfiprintf_r+0x4aa>
2041ae3e:	1870                	addi	a2,sp,60
2041ae40:	c310                	sw	a2,0(a4)
2041ae42:	4609                	li	a2,2
2041ae44:	4696                	lw	a3,68(sp)
2041ae46:	c350                	sw	a2,4(a4)
2041ae48:	4626                	lw	a2,72(sp)
2041ae4a:	0685                	addi	a3,a3,1
2041ae4c:	c2b6                	sw	a3,68(sp)
2041ae4e:	0609                	addi	a2,a2,2
2041ae50:	c4b2                	sw	a2,72(sp)
2041ae52:	461d                	li	a2,7
2041ae54:	0721                	addi	a4,a4,8
2041ae56:	00d65963          	ble	a3,a2,2041ae68 <_svfiprintf_r+0x4aa>
2041ae5a:	0090                	addi	a2,sp,64
2041ae5c:	85ca                	mv	a1,s2
2041ae5e:	8556                	mv	a0,s5
2041ae60:	342d                	jal	2041a88a <__ssprint_r>
2041ae62:	36051a63          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041ae66:	875a                	mv	a4,s6
2041ae68:	57b2                	lw	a5,44(sp)
2041ae6a:	08000693          	li	a3,128
2041ae6e:	04d79563          	bne	a5,a3,2041aeb8 <_svfiprintf_r+0x4fa>
2041ae72:	47e2                	lw	a5,24(sp)
2041ae74:	40fa0db3          	sub	s11,s4,a5
2041ae78:	05b05063          	blez	s11,2041aeb8 <_svfiprintf_r+0x4fa>
2041ae7c:	4841                	li	a6,16
2041ae7e:	489d                	li	a7,7
2041ae80:	4696                	lw	a3,68(sp)
2041ae82:	204227b7          	lui	a5,0x20422
2041ae86:	0ac78793          	addi	a5,a5,172 # 204220ac <zeroes.4346>
2041ae8a:	c31c                	sw	a5,0(a4)
2041ae8c:	4626                	lw	a2,72(sp)
2041ae8e:	0685                	addi	a3,a3,1
2041ae90:	00870593          	addi	a1,a4,8
2041ae94:	2bb84a63          	blt	a6,s11,2041b148 <_svfiprintf_r+0x78a>
2041ae98:	966e                	add	a2,a2,s11
2041ae9a:	01b72223          	sw	s11,4(a4)
2041ae9e:	c4b2                	sw	a2,72(sp)
2041aea0:	c2b6                	sw	a3,68(sp)
2041aea2:	461d                	li	a2,7
2041aea4:	872e                	mv	a4,a1
2041aea6:	00d65963          	ble	a3,a2,2041aeb8 <_svfiprintf_r+0x4fa>
2041aeaa:	0090                	addi	a2,sp,64
2041aeac:	85ca                	mv	a1,s2
2041aeae:	8556                	mv	a0,s5
2041aeb0:	3ae9                	jal	2041a88a <__ssprint_r>
2041aeb2:	32051263          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041aeb6:	875a                	mv	a4,s6
2041aeb8:	408c8cb3          	sub	s9,s9,s0
2041aebc:	05905063          	blez	s9,2041aefc <_svfiprintf_r+0x53e>
2041aec0:	4dc1                	li	s11,16
2041aec2:	481d                	li	a6,7
2041aec4:	4696                	lw	a3,68(sp)
2041aec6:	204227b7          	lui	a5,0x20422
2041aeca:	0ac78793          	addi	a5,a5,172 # 204220ac <zeroes.4346>
2041aece:	c31c                	sw	a5,0(a4)
2041aed0:	4626                	lw	a2,72(sp)
2041aed2:	0685                	addi	a3,a3,1
2041aed4:	00870593          	addi	a1,a4,8
2041aed8:	299dcd63          	blt	s11,s9,2041b172 <_svfiprintf_r+0x7b4>
2041aedc:	01972223          	sw	s9,4(a4)
2041aee0:	9cb2                	add	s9,s9,a2
2041aee2:	c4e6                	sw	s9,72(sp)
2041aee4:	c2b6                	sw	a3,68(sp)
2041aee6:	461d                	li	a2,7
2041aee8:	872e                	mv	a4,a1
2041aeea:	00d65963          	ble	a3,a2,2041aefc <_svfiprintf_r+0x53e>
2041aeee:	0090                	addi	a2,sp,64
2041aef0:	85ca                	mv	a1,s2
2041aef2:	8556                	mv	a0,s5
2041aef4:	3a59                	jal	2041a88a <__ssprint_r>
2041aef6:	2e051063          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041aefa:	875a                	mv	a4,s6
2041aefc:	46a6                	lw	a3,72(sp)
2041aefe:	c340                	sw	s0,4(a4)
2041af00:	c304                	sw	s1,0(a4)
2041af02:	9436                	add	s0,s0,a3
2041af04:	4696                	lw	a3,68(sp)
2041af06:	c4a2                	sw	s0,72(sp)
2041af08:	461d                	li	a2,7
2041af0a:	0685                	addi	a3,a3,1
2041af0c:	c2b6                	sw	a3,68(sp)
2041af0e:	0721                	addi	a4,a4,8
2041af10:	00d65963          	ble	a3,a2,2041af22 <_svfiprintf_r+0x564>
2041af14:	0090                	addi	a2,sp,64
2041af16:	85ca                	mv	a1,s2
2041af18:	8556                	mv	a0,s5
2041af1a:	3a85                	jal	2041a88a <__ssprint_r>
2041af1c:	2a051d63          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041af20:	875a                	mv	a4,s6
2041af22:	004d7793          	andi	a5,s10,4
2041af26:	26079963          	bnez	a5,2041b198 <_svfiprintf_r+0x7da>
2041af2a:	47e2                	lw	a5,24(sp)
2041af2c:	00fa5363          	ble	a5,s4,2041af32 <_svfiprintf_r+0x574>
2041af30:	8a3e                	mv	s4,a5
2041af32:	47a6                	lw	a5,72(sp)
2041af34:	9bd2                	add	s7,s7,s4
2041af36:	c799                	beqz	a5,2041af44 <_svfiprintf_r+0x586>
2041af38:	0090                	addi	a2,sp,64
2041af3a:	85ca                	mv	a1,s2
2041af3c:	8556                	mv	a0,s5
2041af3e:	32b1                	jal	2041a88a <__ssprint_r>
2041af40:	28051b63          	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041af44:	c282                	sw	zero,68(sp)
2041af46:	84e2                	mv	s1,s8
2041af48:	875a                	mv	a4,s6
2041af4a:	bced                	j	2041aa44 <_svfiprintf_r+0x86>
2041af4c:	8526                	mv	a0,s1
2041af4e:	c83a                	sw	a4,16(sp)
2041af50:	bf8f80ef          	jal	ra,20413348 <strlen>
2041af54:	842a                	mv	s0,a0
2041af56:	4c81                	li	s9,0
2041af58:	4742                	lw	a4,16(sp)
2041af5a:	bd3d                	j	2041ad98 <_svfiprintf_r+0x3da>
2041af5c:	010d6d13          	ori	s10,s10,16
2041af60:	020d7693          	andi	a3,s10,32
2041af64:	ca99                	beqz	a3,2041af7a <_svfiprintf_r+0x5bc>
2041af66:	049d                	addi	s1,s1,7
2041af68:	98e1                	andi	s1,s1,-8
2041af6a:	0004a883          	lw	a7,0(s1)
2041af6e:	0044ac83          	lw	s9,4(s1)
2041af72:	00848c13          	addi	s8,s1,8
2041af76:	4685                	li	a3,1
2041af78:	b359                	j	2041acfe <_svfiprintf_r+0x340>
2041af7a:	010d7693          	andi	a3,s10,16
2041af7e:	00448c13          	addi	s8,s1,4
2041af82:	c681                	beqz	a3,2041af8a <_svfiprintf_r+0x5cc>
2041af84:	0004a883          	lw	a7,0(s1)
2041af88:	a031                	j	2041af94 <_svfiprintf_r+0x5d6>
2041af8a:	040d7693          	andi	a3,s10,64
2041af8e:	c689                	beqz	a3,2041af98 <_svfiprintf_r+0x5da>
2041af90:	0004d883          	lhu	a7,0(s1)
2041af94:	4c81                	li	s9,0
2041af96:	b7c5                	j	2041af76 <_svfiprintf_r+0x5b8>
2041af98:	200d7693          	andi	a3,s10,512
2041af9c:	d6e5                	beqz	a3,2041af84 <_svfiprintf_r+0x5c6>
2041af9e:	0004c883          	lbu	a7,0(s1)
2041afa2:	bfcd                	j	2041af94 <_svfiprintf_r+0x5d6>
2041afa4:	204216b7          	lui	a3,0x20421
2041afa8:	74068693          	addi	a3,a3,1856 # 20421740 <zeroes.4369+0x54>
2041afac:	b625                	j	2041aad4 <_svfiprintf_r+0x116>
2041afae:	010d7693          	andi	a3,s10,16
2041afb2:	00448c13          	addi	s8,s1,4
2041afb6:	c681                	beqz	a3,2041afbe <_svfiprintf_r+0x600>
2041afb8:	0004a883          	lw	a7,0(s1)
2041afbc:	a031                	j	2041afc8 <_svfiprintf_r+0x60a>
2041afbe:	040d7693          	andi	a3,s10,64
2041afc2:	c689                	beqz	a3,2041afcc <_svfiprintf_r+0x60e>
2041afc4:	0004d883          	lhu	a7,0(s1)
2041afc8:	4c81                	li	s9,0
2041afca:	b615                	j	2041aaee <_svfiprintf_r+0x130>
2041afcc:	200d7693          	andi	a3,s10,512
2041afd0:	d6e5                	beqz	a3,2041afb8 <_svfiprintf_r+0x5fa>
2041afd2:	0004c883          	lbu	a7,0(s1)
2041afd6:	bfcd                	j	2041afc8 <_svfiprintf_r+0x60a>
2041afd8:	866a                	mv	a2,s10
2041afda:	4685                	li	a3,1
2041afdc:	b33d                	j	2041ad0a <_svfiprintf_r+0x34c>
2041afde:	4605                	li	a2,1
2041afe0:	c6c68ae3          	beq	a3,a2,2041ac54 <_svfiprintf_r+0x296>
2041afe4:	4609                	li	a2,2
2041afe6:	0ec68163          	beq	a3,a2,2041b0c8 <_svfiprintf_r+0x70a>
2041afea:	1994                	addi	a3,sp,240
2041afec:	01dc9593          	slli	a1,s9,0x1d
2041aff0:	0078f613          	andi	a2,a7,7
2041aff4:	0038d893          	srli	a7,a7,0x3
2041aff8:	03060613          	addi	a2,a2,48
2041affc:	0115e8b3          	or	a7,a1,a7
2041b000:	003cdc93          	srli	s9,s9,0x3
2041b004:	fec68fa3          	sb	a2,-1(a3)
2041b008:	0198e5b3          	or	a1,a7,s9
2041b00c:	fff68493          	addi	s1,a3,-1
2041b010:	e18d                	bnez	a1,2041b032 <_svfiprintf_r+0x674>
2041b012:	001d7593          	andi	a1,s10,1
2041b016:	c989                	beqz	a1,2041b028 <_svfiprintf_r+0x66a>
2041b018:	03000593          	li	a1,48
2041b01c:	00b60663          	beq	a2,a1,2041b028 <_svfiprintf_r+0x66a>
2041b020:	feb48fa3          	sb	a1,-1(s1)
2041b024:	ffe68493          	addi	s1,a3,-2
2041b028:	199c                	addi	a5,sp,240
2041b02a:	8ca2                	mv	s9,s0
2041b02c:	40978433          	sub	s0,a5,s1
2041b030:	b3a5                	j	2041ad98 <_svfiprintf_r+0x3da>
2041b032:	86a6                	mv	a3,s1
2041b034:	bf65                	j	2041afec <_svfiprintf_r+0x62e>
2041b036:	400d7793          	andi	a5,s10,1024
2041b03a:	4d81                	li	s11,0
2041b03c:	0f010e13          	addi	t3,sp,240
2041b040:	cc3e                	sw	a5,24(sp)
2041b042:	8546                	mv	a0,a7
2041b044:	4629                	li	a2,10
2041b046:	4681                	li	a3,0
2041b048:	85e6                	mv	a1,s9
2041b04a:	fffe0493          	addi	s1,t3,-1
2041b04e:	c83a                	sw	a4,16(sp)
2041b050:	c446                	sw	a7,8(sp)
2041b052:	ca72                	sw	t3,20(sp)
2041b054:	7db000ef          	jal	ra,2041c02e <__umoddi3>
2041b058:	4e52                	lw	t3,20(sp)
2041b05a:	47e2                	lw	a5,24(sp)
2041b05c:	03050513          	addi	a0,a0,48
2041b060:	feae0fa3          	sb	a0,-1(t3)
2041b064:	0d85                	addi	s11,s11,1
2041b066:	4742                	lw	a4,16(sp)
2041b068:	48a2                	lw	a7,8(sp)
2041b06a:	c3a9                	beqz	a5,2041b0ac <_svfiprintf_r+0x6ee>
2041b06c:	47f2                	lw	a5,28(sp)
2041b06e:	0007c683          	lbu	a3,0(a5)
2041b072:	03b69d63          	bne	a3,s11,2041b0ac <_svfiprintf_r+0x6ee>
2041b076:	0ff00793          	li	a5,255
2041b07a:	02fd8963          	beq	s11,a5,2041b0ac <_svfiprintf_r+0x6ee>
2041b07e:	000c9563          	bnez	s9,2041b088 <_svfiprintf_r+0x6ca>
2041b082:	47a5                	li	a5,9
2041b084:	0317f463          	bleu	a7,a5,2041b0ac <_svfiprintf_r+0x6ee>
2041b088:	5782                	lw	a5,32(sp)
2041b08a:	55a2                	lw	a1,40(sp)
2041b08c:	c83a                	sw	a4,16(sp)
2041b08e:	8c9d                	sub	s1,s1,a5
2041b090:	863e                	mv	a2,a5
2041b092:	8526                	mv	a0,s1
2041b094:	c446                	sw	a7,8(sp)
2041b096:	aeef80ef          	jal	ra,20413384 <strncpy>
2041b09a:	47f2                	lw	a5,28(sp)
2041b09c:	4d81                	li	s11,0
2041b09e:	4742                	lw	a4,16(sp)
2041b0a0:	0017c683          	lbu	a3,1(a5)
2041b0a4:	48a2                	lw	a7,8(sp)
2041b0a6:	c299                	beqz	a3,2041b0ac <_svfiprintf_r+0x6ee>
2041b0a8:	0785                	addi	a5,a5,1
2041b0aa:	ce3e                	sw	a5,28(sp)
2041b0ac:	8546                	mv	a0,a7
2041b0ae:	85e6                	mv	a1,s9
2041b0b0:	4629                	li	a2,10
2041b0b2:	4681                	li	a3,0
2041b0b4:	c83a                	sw	a4,16(sp)
2041b0b6:	41b000ef          	jal	ra,2041bcd0 <__udivdi3>
2041b0ba:	8cae                	mv	s9,a1
2041b0bc:	8dc9                	or	a1,a1,a0
2041b0be:	88aa                	mv	a7,a0
2041b0c0:	4742                	lw	a4,16(sp)
2041b0c2:	d1bd                	beqz	a1,2041b028 <_svfiprintf_r+0x66a>
2041b0c4:	8e26                	mv	t3,s1
2041b0c6:	bfb5                	j	2041b042 <_svfiprintf_r+0x684>
2041b0c8:	1984                	addi	s1,sp,240
2041b0ca:	5792                	lw	a5,36(sp)
2041b0cc:	00f8f693          	andi	a3,a7,15
2041b0d0:	14fd                	addi	s1,s1,-1
2041b0d2:	96be                	add	a3,a3,a5
2041b0d4:	0006c683          	lbu	a3,0(a3)
2041b0d8:	0048d893          	srli	a7,a7,0x4
2041b0dc:	00d48023          	sb	a3,0(s1)
2041b0e0:	01cc9693          	slli	a3,s9,0x1c
2041b0e4:	0116e8b3          	or	a7,a3,a7
2041b0e8:	004cdc93          	srli	s9,s9,0x4
2041b0ec:	0198e6b3          	or	a3,a7,s9
2041b0f0:	fee9                	bnez	a3,2041b0ca <_svfiprintf_r+0x70c>
2041b0f2:	bf1d                	j	2041b028 <_svfiprintf_r+0x66a>
2041b0f4:	1984                	addi	s1,sp,240
2041b0f6:	fa8d                	bnez	a3,2041b028 <_svfiprintf_r+0x66a>
2041b0f8:	8a05                	andi	a2,a2,1
2041b0fa:	d61d                	beqz	a2,2041b028 <_svfiprintf_r+0x66a>
2041b0fc:	03000693          	li	a3,48
2041b100:	0ed107a3          	sb	a3,239(sp)
2041b104:	b68d                	j	2041ac66 <_svfiprintf_r+0x2a8>
2041b106:	12060b63          	beqz	a2,2041b23c <_svfiprintf_r+0x87e>
2041b10a:	08c10623          	sb	a2,140(sp)
2041b10e:	02010da3          	sb	zero,59(sp)
2041b112:	8c26                	mv	s8,s1
2041b114:	bcf5                	j	2041ac10 <_svfiprintf_r+0x252>
2041b116:	05c1                	addi	a1,a1,16
2041b118:	01172223          	sw	a7,4(a4)
2041b11c:	c4ae                	sw	a1,72(sp)
2041b11e:	c2b2                	sw	a2,68(sp)
2041b120:	02c35163          	ble	a2,t1,2041b142 <_svfiprintf_r+0x784>
2041b124:	0090                	addi	a2,sp,64
2041b126:	85ca                	mv	a1,s2
2041b128:	8556                	mv	a0,s5
2041b12a:	c81a                	sw	t1,16(sp)
2041b12c:	ca36                	sw	a3,20(sp)
2041b12e:	c642                	sw	a6,12(sp)
2041b130:	c446                	sw	a7,8(sp)
2041b132:	f58ff0ef          	jal	ra,2041a88a <__ssprint_r>
2041b136:	4342                	lw	t1,16(sp)
2041b138:	46d2                	lw	a3,20(sp)
2041b13a:	4832                	lw	a6,12(sp)
2041b13c:	48a2                	lw	a7,8(sp)
2041b13e:	ed41                	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041b140:	855a                	mv	a0,s6
2041b142:	16c1                	addi	a3,a3,-16
2041b144:	872a                	mv	a4,a0
2041b146:	b949                	j	2041add8 <_svfiprintf_r+0x41a>
2041b148:	0641                	addi	a2,a2,16
2041b14a:	01072223          	sw	a6,4(a4)
2041b14e:	c4b2                	sw	a2,72(sp)
2041b150:	c2b6                	sw	a3,68(sp)
2041b152:	00d8dd63          	ble	a3,a7,2041b16c <_svfiprintf_r+0x7ae>
2041b156:	0090                	addi	a2,sp,64
2041b158:	85ca                	mv	a1,s2
2041b15a:	8556                	mv	a0,s5
2041b15c:	c642                	sw	a6,12(sp)
2041b15e:	c446                	sw	a7,8(sp)
2041b160:	f2aff0ef          	jal	ra,2041a88a <__ssprint_r>
2041b164:	4832                	lw	a6,12(sp)
2041b166:	48a2                	lw	a7,8(sp)
2041b168:	e53d                	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041b16a:	85da                	mv	a1,s6
2041b16c:	1dc1                	addi	s11,s11,-16
2041b16e:	872e                	mv	a4,a1
2041b170:	bb01                	j	2041ae80 <_svfiprintf_r+0x4c2>
2041b172:	0641                	addi	a2,a2,16
2041b174:	01b72223          	sw	s11,4(a4)
2041b178:	c4b2                	sw	a2,72(sp)
2041b17a:	c2b6                	sw	a3,68(sp)
2041b17c:	00d85b63          	ble	a3,a6,2041b192 <_svfiprintf_r+0x7d4>
2041b180:	0090                	addi	a2,sp,64
2041b182:	85ca                	mv	a1,s2
2041b184:	8556                	mv	a0,s5
2041b186:	c642                	sw	a6,12(sp)
2041b188:	f02ff0ef          	jal	ra,2041a88a <__ssprint_r>
2041b18c:	4832                	lw	a6,12(sp)
2041b18e:	e521                	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041b190:	85da                	mv	a1,s6
2041b192:	1cc1                	addi	s9,s9,-16
2041b194:	872e                	mv	a4,a1
2041b196:	b33d                	j	2041aec4 <_svfiprintf_r+0x506>
2041b198:	47e2                	lw	a5,24(sp)
2041b19a:	40fa0433          	sub	s0,s4,a5
2041b19e:	d88056e3          	blez	s0,2041af2a <_svfiprintf_r+0x56c>
2041b1a2:	204227b7          	lui	a5,0x20422
2041b1a6:	4cc1                	li	s9,16
2041b1a8:	09c78493          	addi	s1,a5,156 # 2042209c <blanks.4345>
2041b1ac:	4d9d                	li	s11,7
2041b1ae:	4796                	lw	a5,68(sp)
2041b1b0:	c304                	sw	s1,0(a4)
2041b1b2:	46a6                	lw	a3,72(sp)
2041b1b4:	0785                	addi	a5,a5,1
2041b1b6:	068cc263          	blt	s9,s0,2041b21a <_svfiprintf_r+0x85c>
2041b1ba:	c340                	sw	s0,4(a4)
2041b1bc:	9436                	add	s0,s0,a3
2041b1be:	c4a2                	sw	s0,72(sp)
2041b1c0:	c2be                	sw	a5,68(sp)
2041b1c2:	471d                	li	a4,7
2041b1c4:	d6f753e3          	ble	a5,a4,2041af2a <_svfiprintf_r+0x56c>
2041b1c8:	0090                	addi	a2,sp,64
2041b1ca:	85ca                	mv	a1,s2
2041b1cc:	8556                	mv	a0,s5
2041b1ce:	ebcff0ef          	jal	ra,2041a88a <__ssprint_r>
2041b1d2:	d4050ce3          	beqz	a0,2041af2a <_svfiprintf_r+0x56c>
2041b1d6:	00c95783          	lhu	a5,12(s2)
2041b1da:	0407f793          	andi	a5,a5,64
2041b1de:	840791e3          	bnez	a5,2041aa20 <_svfiprintf_r+0x62>
2041b1e2:	12c12083          	lw	ra,300(sp)
2041b1e6:	12812403          	lw	s0,296(sp)
2041b1ea:	855e                	mv	a0,s7
2041b1ec:	12412483          	lw	s1,292(sp)
2041b1f0:	12012903          	lw	s2,288(sp)
2041b1f4:	11c12983          	lw	s3,284(sp)
2041b1f8:	11812a03          	lw	s4,280(sp)
2041b1fc:	11412a83          	lw	s5,276(sp)
2041b200:	11012b03          	lw	s6,272(sp)
2041b204:	10c12b83          	lw	s7,268(sp)
2041b208:	10812c03          	lw	s8,264(sp)
2041b20c:	10412c83          	lw	s9,260(sp)
2041b210:	10012d03          	lw	s10,256(sp)
2041b214:	5dfe                	lw	s11,252(sp)
2041b216:	6155                	addi	sp,sp,304
2041b218:	8082                	ret
2041b21a:	06c1                	addi	a3,a3,16
2041b21c:	01972223          	sw	s9,4(a4)
2041b220:	c4b6                	sw	a3,72(sp)
2041b222:	c2be                	sw	a5,68(sp)
2041b224:	0721                	addi	a4,a4,8
2041b226:	00fdd963          	ble	a5,s11,2041b238 <_svfiprintf_r+0x87a>
2041b22a:	0090                	addi	a2,sp,64
2041b22c:	85ca                	mv	a1,s2
2041b22e:	8556                	mv	a0,s5
2041b230:	e5aff0ef          	jal	ra,2041a88a <__ssprint_r>
2041b234:	f14d                	bnez	a0,2041b1d6 <_svfiprintf_r+0x818>
2041b236:	875a                	mv	a4,s6
2041b238:	1441                	addi	s0,s0,-16
2041b23a:	bf95                	j	2041b1ae <_svfiprintf_r+0x7f0>
2041b23c:	47a6                	lw	a5,72(sp)
2041b23e:	dfc1                	beqz	a5,2041b1d6 <_svfiprintf_r+0x818>
2041b240:	0090                	addi	a2,sp,64
2041b242:	85ca                	mv	a1,s2
2041b244:	8556                	mv	a0,s5
2041b246:	e44ff0ef          	jal	ra,2041a88a <__ssprint_r>
2041b24a:	b771                	j	2041b1d6 <_svfiprintf_r+0x818>

2041b24c <__swbuf_r>:
2041b24c:	1101                	addi	sp,sp,-32
2041b24e:	cc22                	sw	s0,24(sp)
2041b250:	ca26                	sw	s1,20(sp)
2041b252:	c84a                	sw	s2,16(sp)
2041b254:	ce06                	sw	ra,28(sp)
2041b256:	c64e                	sw	s3,12(sp)
2041b258:	892a                	mv	s2,a0
2041b25a:	84ae                	mv	s1,a1
2041b25c:	8432                	mv	s0,a2
2041b25e:	c509                	beqz	a0,2041b268 <__swbuf_r+0x1c>
2041b260:	5d1c                	lw	a5,56(a0)
2041b262:	e399                	bnez	a5,2041b268 <__swbuf_r+0x1c>
2041b264:	8d0fc0ef          	jal	ra,20417334 <__sinit>
2041b268:	4c1c                	lw	a5,24(s0)
2041b26a:	c41c                	sw	a5,8(s0)
2041b26c:	00c45783          	lhu	a5,12(s0)
2041b270:	8ba1                	andi	a5,a5,8
2041b272:	c3b5                	beqz	a5,2041b2d6 <__swbuf_r+0x8a>
2041b274:	481c                	lw	a5,16(s0)
2041b276:	c3a5                	beqz	a5,2041b2d6 <__swbuf_r+0x8a>
2041b278:	00c41783          	lh	a5,12(s0)
2041b27c:	0ff4f993          	andi	s3,s1,255
2041b280:	0ff4f493          	andi	s1,s1,255
2041b284:	01279713          	slli	a4,a5,0x12
2041b288:	06075563          	bgez	a4,2041b2f2 <__swbuf_r+0xa6>
2041b28c:	481c                	lw	a5,16(s0)
2041b28e:	4008                	lw	a0,0(s0)
2041b290:	8d1d                	sub	a0,a0,a5
2041b292:	485c                	lw	a5,20(s0)
2041b294:	00f54763          	blt	a0,a5,2041b2a2 <__swbuf_r+0x56>
2041b298:	85a2                	mv	a1,s0
2041b29a:	854a                	mv	a0,s2
2041b29c:	f85fb0ef          	jal	ra,20417220 <_fflush_r>
2041b2a0:	e121                	bnez	a0,2041b2e0 <__swbuf_r+0x94>
2041b2a2:	441c                	lw	a5,8(s0)
2041b2a4:	0505                	addi	a0,a0,1
2041b2a6:	17fd                	addi	a5,a5,-1
2041b2a8:	c41c                	sw	a5,8(s0)
2041b2aa:	401c                	lw	a5,0(s0)
2041b2ac:	00178713          	addi	a4,a5,1
2041b2b0:	c018                	sw	a4,0(s0)
2041b2b2:	01378023          	sb	s3,0(a5)
2041b2b6:	485c                	lw	a5,20(s0)
2041b2b8:	00a78963          	beq	a5,a0,2041b2ca <__swbuf_r+0x7e>
2041b2bc:	00c45783          	lhu	a5,12(s0)
2041b2c0:	8b85                	andi	a5,a5,1
2041b2c2:	c385                	beqz	a5,2041b2e2 <__swbuf_r+0x96>
2041b2c4:	47a9                	li	a5,10
2041b2c6:	00f49e63          	bne	s1,a5,2041b2e2 <__swbuf_r+0x96>
2041b2ca:	85a2                	mv	a1,s0
2041b2cc:	854a                	mv	a0,s2
2041b2ce:	f53fb0ef          	jal	ra,20417220 <_fflush_r>
2041b2d2:	c901                	beqz	a0,2041b2e2 <__swbuf_r+0x96>
2041b2d4:	a031                	j	2041b2e0 <__swbuf_r+0x94>
2041b2d6:	85a2                	mv	a1,s0
2041b2d8:	854a                	mv	a0,s2
2041b2da:	bfdfb0ef          	jal	ra,20416ed6 <__swsetup_r>
2041b2de:	dd49                	beqz	a0,2041b278 <__swbuf_r+0x2c>
2041b2e0:	54fd                	li	s1,-1
2041b2e2:	40f2                	lw	ra,28(sp)
2041b2e4:	4462                	lw	s0,24(sp)
2041b2e6:	8526                	mv	a0,s1
2041b2e8:	4942                	lw	s2,16(sp)
2041b2ea:	44d2                	lw	s1,20(sp)
2041b2ec:	49b2                	lw	s3,12(sp)
2041b2ee:	6105                	addi	sp,sp,32
2041b2f0:	8082                	ret
2041b2f2:	6709                	lui	a4,0x2
2041b2f4:	8fd9                	or	a5,a5,a4
2041b2f6:	00f41623          	sh	a5,12(s0)
2041b2fa:	507c                	lw	a5,100(s0)
2041b2fc:	7779                	lui	a4,0xffffe
2041b2fe:	177d                	addi	a4,a4,-1
2041b300:	8ff9                	and	a5,a5,a4
2041b302:	d07c                	sw	a5,100(s0)
2041b304:	b761                	j	2041b28c <__swbuf_r+0x40>

2041b306 <__swbuf>:
2041b306:	862e                	mv	a2,a1
2041b308:	85aa                	mv	a1,a0
2041b30a:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041b30e:	bf3d                	j	2041b24c <__swbuf_r>

2041b310 <_wcrtomb_r>:
2041b310:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
2041b314:	1101                	addi	sp,sp,-32
2041b316:	cc22                	sw	s0,24(sp)
2041b318:	ca26                	sw	s1,20(sp)
2041b31a:	ce06                	sw	ra,28(sp)
2041b31c:	842a                	mv	s0,a0
2041b31e:	84b6                	mv	s1,a3
2041b320:	5bdc                	lw	a5,52(a5)
2041b322:	e995                	bnez	a1,2041b356 <_wcrtomb_r+0x46>
2041b324:	e789                	bnez	a5,2041b32e <_wcrtomb_r+0x1e>
2041b326:	800007b7          	lui	a5,0x80000
2041b32a:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
2041b32e:	0e07a783          	lw	a5,224(a5)
2041b332:	86a6                	mv	a3,s1
2041b334:	4601                	li	a2,0
2041b336:	004c                	addi	a1,sp,4
2041b338:	8522                	mv	a0,s0
2041b33a:	9782                	jalr	a5
2041b33c:	57fd                	li	a5,-1
2041b33e:	00f51763          	bne	a0,a5,2041b34c <_wcrtomb_r+0x3c>
2041b342:	0004a023          	sw	zero,0(s1)
2041b346:	08a00793          	li	a5,138
2041b34a:	c01c                	sw	a5,0(s0)
2041b34c:	40f2                	lw	ra,28(sp)
2041b34e:	4462                	lw	s0,24(sp)
2041b350:	44d2                	lw	s1,20(sp)
2041b352:	6105                	addi	sp,sp,32
2041b354:	8082                	ret
2041b356:	e789                	bnez	a5,2041b360 <_wcrtomb_r+0x50>
2041b358:	800007b7          	lui	a5,0x80000
2041b35c:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
2041b360:	0e07a783          	lw	a5,224(a5)
2041b364:	86a6                	mv	a3,s1
2041b366:	bfc9                	j	2041b338 <_wcrtomb_r+0x28>

2041b368 <wcrtomb>:
2041b368:	86b2                	mv	a3,a2
2041b36a:	862e                	mv	a2,a1
2041b36c:	85aa                	mv	a1,a0
2041b36e:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041b372:	bf79                	j	2041b310 <_wcrtomb_r>

2041b374 <_write_r>:
2041b374:	1141                	addi	sp,sp,-16
2041b376:	c422                	sw	s0,8(sp)
2041b378:	c226                	sw	s1,4(sp)
2041b37a:	80003437          	lui	s0,0x80003
2041b37e:	84aa                	mv	s1,a0
2041b380:	852e                	mv	a0,a1
2041b382:	85b2                	mv	a1,a2
2041b384:	8636                	mv	a2,a3
2041b386:	c606                	sw	ra,12(sp)
2041b388:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041b38c:	e41f60ef          	jal	ra,204121cc <__wrap_write>
2041b390:	57fd                	li	a5,-1
2041b392:	00f51663          	bne	a0,a5,2041b39e <_write_r+0x2a>
2041b396:	eec42783          	lw	a5,-276(s0)
2041b39a:	c391                	beqz	a5,2041b39e <_write_r+0x2a>
2041b39c:	c09c                	sw	a5,0(s1)
2041b39e:	40b2                	lw	ra,12(sp)
2041b3a0:	4422                	lw	s0,8(sp)
2041b3a2:	4492                	lw	s1,4(sp)
2041b3a4:	0141                	addi	sp,sp,16
2041b3a6:	8082                	ret

2041b3a8 <_calloc_r>:
2041b3a8:	02c585b3          	mul	a1,a1,a2
2041b3ac:	1141                	addi	sp,sp,-16
2041b3ae:	c422                	sw	s0,8(sp)
2041b3b0:	c606                	sw	ra,12(sp)
2041b3b2:	f67fd0ef          	jal	ra,20419318 <_malloc_r>
2041b3b6:	842a                	mv	s0,a0
2041b3b8:	cd05                	beqz	a0,2041b3f0 <_calloc_r+0x48>
2041b3ba:	ffc52603          	lw	a2,-4(a0)
2041b3be:	02400713          	li	a4,36
2041b3c2:	9a71                	andi	a2,a2,-4
2041b3c4:	1671                	addi	a2,a2,-4
2041b3c6:	04c76963          	bltu	a4,a2,2041b418 <_calloc_r+0x70>
2041b3ca:	46cd                	li	a3,19
2041b3cc:	87aa                	mv	a5,a0
2041b3ce:	00c6fb63          	bleu	a2,a3,2041b3e4 <_calloc_r+0x3c>
2041b3d2:	00052023          	sw	zero,0(a0)
2041b3d6:	00052223          	sw	zero,4(a0)
2041b3da:	47ed                	li	a5,27
2041b3dc:	00c7ef63          	bltu	a5,a2,2041b3fa <_calloc_r+0x52>
2041b3e0:	00850793          	addi	a5,a0,8
2041b3e4:	0007a023          	sw	zero,0(a5)
2041b3e8:	0007a223          	sw	zero,4(a5)
2041b3ec:	0007a423          	sw	zero,8(a5)
2041b3f0:	8522                	mv	a0,s0
2041b3f2:	40b2                	lw	ra,12(sp)
2041b3f4:	4422                	lw	s0,8(sp)
2041b3f6:	0141                	addi	sp,sp,16
2041b3f8:	8082                	ret
2041b3fa:	00052423          	sw	zero,8(a0)
2041b3fe:	00052623          	sw	zero,12(a0)
2041b402:	01050793          	addi	a5,a0,16
2041b406:	fce61fe3          	bne	a2,a4,2041b3e4 <_calloc_r+0x3c>
2041b40a:	00052823          	sw	zero,16(a0)
2041b40e:	01850793          	addi	a5,a0,24
2041b412:	00052a23          	sw	zero,20(a0)
2041b416:	b7f9                	j	2041b3e4 <_calloc_r+0x3c>
2041b418:	4581                	li	a1,0
2041b41a:	c95f70ef          	jal	ra,204130ae <memset>
2041b41e:	bfc9                	j	2041b3f0 <_calloc_r+0x48>

2041b420 <_close_r>:
2041b420:	1141                	addi	sp,sp,-16
2041b422:	c422                	sw	s0,8(sp)
2041b424:	c226                	sw	s1,4(sp)
2041b426:	80003437          	lui	s0,0x80003
2041b42a:	84aa                	mv	s1,a0
2041b42c:	852e                	mv	a0,a1
2041b42e:	c606                	sw	ra,12(sp)
2041b430:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041b434:	2981                	jal	2041b884 <__wrap_close>
2041b436:	57fd                	li	a5,-1
2041b438:	00f51663          	bne	a0,a5,2041b444 <_close_r+0x24>
2041b43c:	eec42783          	lw	a5,-276(s0)
2041b440:	c391                	beqz	a5,2041b444 <_close_r+0x24>
2041b442:	c09c                	sw	a5,0(s1)
2041b444:	40b2                	lw	ra,12(sp)
2041b446:	4422                	lw	s0,8(sp)
2041b448:	4492                	lw	s1,4(sp)
2041b44a:	0141                	addi	sp,sp,16
2041b44c:	8082                	ret

2041b44e <_fclose_r>:
2041b44e:	1141                	addi	sp,sp,-16
2041b450:	c606                	sw	ra,12(sp)
2041b452:	c422                	sw	s0,8(sp)
2041b454:	c226                	sw	s1,4(sp)
2041b456:	c04a                	sw	s2,0(sp)
2041b458:	e989                	bnez	a1,2041b46a <_fclose_r+0x1c>
2041b45a:	4901                	li	s2,0
2041b45c:	40b2                	lw	ra,12(sp)
2041b45e:	4422                	lw	s0,8(sp)
2041b460:	854a                	mv	a0,s2
2041b462:	4492                	lw	s1,4(sp)
2041b464:	4902                	lw	s2,0(sp)
2041b466:	0141                	addi	sp,sp,16
2041b468:	8082                	ret
2041b46a:	84aa                	mv	s1,a0
2041b46c:	842e                	mv	s0,a1
2041b46e:	c509                	beqz	a0,2041b478 <_fclose_r+0x2a>
2041b470:	5d1c                	lw	a5,56(a0)
2041b472:	e399                	bnez	a5,2041b478 <_fclose_r+0x2a>
2041b474:	ec1fb0ef          	jal	ra,20417334 <__sinit>
2041b478:	00c41783          	lh	a5,12(s0)
2041b47c:	dff9                	beqz	a5,2041b45a <_fclose_r+0xc>
2041b47e:	85a2                	mv	a1,s0
2041b480:	8526                	mv	a0,s1
2041b482:	c45fb0ef          	jal	ra,204170c6 <__sflush_r>
2041b486:	545c                	lw	a5,44(s0)
2041b488:	892a                	mv	s2,a0
2041b48a:	c799                	beqz	a5,2041b498 <_fclose_r+0x4a>
2041b48c:	4c4c                	lw	a1,28(s0)
2041b48e:	8526                	mv	a0,s1
2041b490:	9782                	jalr	a5
2041b492:	00055363          	bgez	a0,2041b498 <_fclose_r+0x4a>
2041b496:	597d                	li	s2,-1
2041b498:	00c45783          	lhu	a5,12(s0)
2041b49c:	0807f793          	andi	a5,a5,128
2041b4a0:	c789                	beqz	a5,2041b4aa <_fclose_r+0x5c>
2041b4a2:	480c                	lw	a1,16(s0)
2041b4a4:	8526                	mv	a0,s1
2041b4a6:	95afc0ef          	jal	ra,20417600 <_free_r>
2041b4aa:	580c                	lw	a1,48(s0)
2041b4ac:	c991                	beqz	a1,2041b4c0 <_fclose_r+0x72>
2041b4ae:	04040793          	addi	a5,s0,64
2041b4b2:	00f58563          	beq	a1,a5,2041b4bc <_fclose_r+0x6e>
2041b4b6:	8526                	mv	a0,s1
2041b4b8:	948fc0ef          	jal	ra,20417600 <_free_r>
2041b4bc:	02042823          	sw	zero,48(s0)
2041b4c0:	406c                	lw	a1,68(s0)
2041b4c2:	c591                	beqz	a1,2041b4ce <_fclose_r+0x80>
2041b4c4:	8526                	mv	a0,s1
2041b4c6:	93afc0ef          	jal	ra,20417600 <_free_r>
2041b4ca:	04042223          	sw	zero,68(s0)
2041b4ce:	f4ffb0ef          	jal	ra,2041741c <__sfp_lock_acquire>
2041b4d2:	00041623          	sh	zero,12(s0)
2041b4d6:	f49fb0ef          	jal	ra,2041741e <__sfp_lock_release>
2041b4da:	b749                	j	2041b45c <_fclose_r+0xe>

2041b4dc <fclose>:
2041b4dc:	85aa                	mv	a1,a0
2041b4de:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041b4e2:	b7b5                	j	2041b44e <_fclose_r>

2041b4e4 <_fstat_r>:
2041b4e4:	1141                	addi	sp,sp,-16
2041b4e6:	c422                	sw	s0,8(sp)
2041b4e8:	c226                	sw	s1,4(sp)
2041b4ea:	80003437          	lui	s0,0x80003
2041b4ee:	84aa                	mv	s1,a0
2041b4f0:	852e                	mv	a0,a1
2041b4f2:	85b2                	mv	a1,a2
2041b4f4:	c606                	sw	ra,12(sp)
2041b4f6:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041b4fa:	2629                	jal	2041b804 <__wrap_fstat>
2041b4fc:	57fd                	li	a5,-1
2041b4fe:	00f51663          	bne	a0,a5,2041b50a <_fstat_r+0x26>
2041b502:	eec42783          	lw	a5,-276(s0)
2041b506:	c391                	beqz	a5,2041b50a <_fstat_r+0x26>
2041b508:	c09c                	sw	a5,0(s1)
2041b50a:	40b2                	lw	ra,12(sp)
2041b50c:	4422                	lw	s0,8(sp)
2041b50e:	4492                	lw	s1,4(sp)
2041b510:	0141                	addi	sp,sp,16
2041b512:	8082                	ret

2041b514 <_isatty_r>:
2041b514:	1141                	addi	sp,sp,-16
2041b516:	c422                	sw	s0,8(sp)
2041b518:	c226                	sw	s1,4(sp)
2041b51a:	80003437          	lui	s0,0x80003
2041b51e:	84aa                	mv	s1,a0
2041b520:	852e                	mv	a0,a1
2041b522:	c606                	sw	ra,12(sp)
2041b524:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041b528:	d7df60ef          	jal	ra,204122a4 <__wrap_isatty>
2041b52c:	57fd                	li	a5,-1
2041b52e:	00f51663          	bne	a0,a5,2041b53a <_isatty_r+0x26>
2041b532:	eec42783          	lw	a5,-276(s0)
2041b536:	c391                	beqz	a5,2041b53a <_isatty_r+0x26>
2041b538:	c09c                	sw	a5,0(s1)
2041b53a:	40b2                	lw	ra,12(sp)
2041b53c:	4422                	lw	s0,8(sp)
2041b53e:	4492                	lw	s1,4(sp)
2041b540:	0141                	addi	sp,sp,16
2041b542:	8082                	ret

2041b544 <_lseek_r>:
2041b544:	1141                	addi	sp,sp,-16
2041b546:	c422                	sw	s0,8(sp)
2041b548:	c226                	sw	s1,4(sp)
2041b54a:	80003437          	lui	s0,0x80003
2041b54e:	84aa                	mv	s1,a0
2041b550:	852e                	mv	a0,a1
2041b552:	85b2                	mv	a1,a2
2041b554:	8636                	mv	a2,a3
2041b556:	c606                	sw	ra,12(sp)
2041b558:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041b55c:	2a25                	jal	2041b694 <__wrap_lseek>
2041b55e:	57fd                	li	a5,-1
2041b560:	00f51663          	bne	a0,a5,2041b56c <_lseek_r+0x28>
2041b564:	eec42783          	lw	a5,-276(s0)
2041b568:	c391                	beqz	a5,2041b56c <_lseek_r+0x28>
2041b56a:	c09c                	sw	a5,0(s1)
2041b56c:	40b2                	lw	ra,12(sp)
2041b56e:	4422                	lw	s0,8(sp)
2041b570:	4492                	lw	s1,4(sp)
2041b572:	0141                	addi	sp,sp,16
2041b574:	8082                	ret

2041b576 <_read_r>:
2041b576:	1141                	addi	sp,sp,-16
2041b578:	c422                	sw	s0,8(sp)
2041b57a:	c226                	sw	s1,4(sp)
2041b57c:	80003437          	lui	s0,0x80003
2041b580:	84aa                	mv	s1,a0
2041b582:	852e                	mv	a0,a1
2041b584:	85b2                	mv	a1,a2
2041b586:	8636                	mv	a2,a3
2041b588:	c606                	sw	ra,12(sp)
2041b58a:	ee042623          	sw	zero,-276(s0) # 80002eec <pulp__FC+0x80002eed>
2041b58e:	2abd                	jal	2041b70c <__wrap_read>
2041b590:	57fd                	li	a5,-1
2041b592:	00f51663          	bne	a0,a5,2041b59e <_read_r+0x28>
2041b596:	eec42783          	lw	a5,-276(s0)
2041b59a:	c391                	beqz	a5,2041b59e <_read_r+0x28>
2041b59c:	c09c                	sw	a5,0(s1)
2041b59e:	40b2                	lw	ra,12(sp)
2041b5a0:	4422                	lw	s0,8(sp)
2041b5a2:	4492                	lw	s1,4(sp)
2041b5a4:	0141                	addi	sp,sp,16
2041b5a6:	8082                	ret

2041b5a8 <cleanup_glue>:
2041b5a8:	1141                	addi	sp,sp,-16
2041b5aa:	c422                	sw	s0,8(sp)
2041b5ac:	842e                	mv	s0,a1
2041b5ae:	418c                	lw	a1,0(a1)
2041b5b0:	c226                	sw	s1,4(sp)
2041b5b2:	c606                	sw	ra,12(sp)
2041b5b4:	84aa                	mv	s1,a0
2041b5b6:	c191                	beqz	a1,2041b5ba <cleanup_glue+0x12>
2041b5b8:	3fc5                	jal	2041b5a8 <cleanup_glue>
2041b5ba:	85a2                	mv	a1,s0
2041b5bc:	4422                	lw	s0,8(sp)
2041b5be:	40b2                	lw	ra,12(sp)
2041b5c0:	8526                	mv	a0,s1
2041b5c2:	4492                	lw	s1,4(sp)
2041b5c4:	0141                	addi	sp,sp,16
2041b5c6:	83afc06f          	j	20417600 <_free_r>

2041b5ca <_reclaim_reent>:
2041b5ca:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
2041b5ce:	08a78f63          	beq	a5,a0,2041b66c <_reclaim_reent+0xa2>
2041b5d2:	457c                	lw	a5,76(a0)
2041b5d4:	1101                	addi	sp,sp,-32
2041b5d6:	cc22                	sw	s0,24(sp)
2041b5d8:	ca26                	sw	s1,20(sp)
2041b5da:	c84a                	sw	s2,16(sp)
2041b5dc:	ce06                	sw	ra,28(sp)
2041b5de:	c64e                	sw	s3,12(sp)
2041b5e0:	842a                	mv	s0,a0
2041b5e2:	4481                	li	s1,0
2041b5e4:	08000913          	li	s2,128
2041b5e8:	eb85                	bnez	a5,2041b618 <_reclaim_reent+0x4e>
2041b5ea:	402c                	lw	a1,64(s0)
2041b5ec:	c581                	beqz	a1,2041b5f4 <_reclaim_reent+0x2a>
2041b5ee:	8522                	mv	a0,s0
2041b5f0:	810fc0ef          	jal	ra,20417600 <_free_r>
2041b5f4:	14842583          	lw	a1,328(s0)
2041b5f8:	cd95                	beqz	a1,2041b634 <_reclaim_reent+0x6a>
2041b5fa:	14c40493          	addi	s1,s0,332
2041b5fe:	02958b63          	beq	a1,s1,2041b634 <_reclaim_reent+0x6a>
2041b602:	0005a903          	lw	s2,0(a1)
2041b606:	8522                	mv	a0,s0
2041b608:	ff9fb0ef          	jal	ra,20417600 <_free_r>
2041b60c:	85ca                	mv	a1,s2
2041b60e:	bfc5                	j	2041b5fe <_reclaim_reent+0x34>
2041b610:	95a6                	add	a1,a1,s1
2041b612:	418c                	lw	a1,0(a1)
2041b614:	e989                	bnez	a1,2041b626 <_reclaim_reent+0x5c>
2041b616:	0491                	addi	s1,s1,4
2041b618:	446c                	lw	a1,76(s0)
2041b61a:	ff249be3          	bne	s1,s2,2041b610 <_reclaim_reent+0x46>
2041b61e:	8522                	mv	a0,s0
2041b620:	fe1fb0ef          	jal	ra,20417600 <_free_r>
2041b624:	b7d9                	j	2041b5ea <_reclaim_reent+0x20>
2041b626:	0005a983          	lw	s3,0(a1)
2041b62a:	8522                	mv	a0,s0
2041b62c:	fd5fb0ef          	jal	ra,20417600 <_free_r>
2041b630:	85ce                	mv	a1,s3
2041b632:	b7cd                	j	2041b614 <_reclaim_reent+0x4a>
2041b634:	486c                	lw	a1,84(s0)
2041b636:	c581                	beqz	a1,2041b63e <_reclaim_reent+0x74>
2041b638:	8522                	mv	a0,s0
2041b63a:	fc7fb0ef          	jal	ra,20417600 <_free_r>
2041b63e:	5c1c                	lw	a5,56(s0)
2041b640:	cf99                	beqz	a5,2041b65e <_reclaim_reent+0x94>
2041b642:	5c5c                	lw	a5,60(s0)
2041b644:	8522                	mv	a0,s0
2041b646:	9782                	jalr	a5
2041b648:	2e042583          	lw	a1,736(s0)
2041b64c:	c989                	beqz	a1,2041b65e <_reclaim_reent+0x94>
2041b64e:	8522                	mv	a0,s0
2041b650:	4462                	lw	s0,24(sp)
2041b652:	40f2                	lw	ra,28(sp)
2041b654:	44d2                	lw	s1,20(sp)
2041b656:	4942                	lw	s2,16(sp)
2041b658:	49b2                	lw	s3,12(sp)
2041b65a:	6105                	addi	sp,sp,32
2041b65c:	b7b1                	j	2041b5a8 <cleanup_glue>
2041b65e:	40f2                	lw	ra,28(sp)
2041b660:	4462                	lw	s0,24(sp)
2041b662:	44d2                	lw	s1,20(sp)
2041b664:	4942                	lw	s2,16(sp)
2041b666:	49b2                	lw	s3,12(sp)
2041b668:	6105                	addi	sp,sp,32
2041b66a:	8082                	ret
2041b66c:	8082                	ret
	...

2041b670 <_stub>:
{
2041b670:	fe010113          	addi	sp,sp,-32
2041b674:	00812e23          	sw	s0,28(sp)
2041b678:	02010413          	addi	s0,sp,32
2041b67c:	fea42623          	sw	a0,-20(s0)
  return -1;
2041b680:	fff00793          	li	a5,-1
}
2041b684:	00078513          	mv	a0,a5
2041b688:	01c12403          	lw	s0,28(sp)
2041b68c:	02010113          	addi	sp,sp,32
2041b690:	00008067          	ret

2041b694 <__wrap_lseek>:
#include <sys/types.h>
#include "stub.h"
#include "weak_under_alias.h"

off_t __wrap_lseek(int fd, off_t ptr, int dir)
{
2041b694:	fe010113          	addi	sp,sp,-32
2041b698:	00112e23          	sw	ra,28(sp)
2041b69c:	00812c23          	sw	s0,24(sp)
2041b6a0:	02010413          	addi	s0,sp,32
2041b6a4:	fea42623          	sw	a0,-20(s0)
2041b6a8:	feb42423          	sw	a1,-24(s0)
2041b6ac:	fec42223          	sw	a2,-28(s0)
  if (isatty(fd))
2041b6b0:	fec42503          	lw	a0,-20(s0)
2041b6b4:	bf1f60ef          	jal	ra,204122a4 <__wrap_isatty>
2041b6b8:	00050793          	mv	a5,a0
2041b6bc:	00078663          	beqz	a5,2041b6c8 <__wrap_lseek+0x34>
    return 0;
2041b6c0:	00000793          	li	a5,0
2041b6c4:	0100006f          	j	2041b6d4 <__wrap_lseek+0x40>

  return _stub(EBADF);
2041b6c8:	00900513          	li	a0,9
2041b6cc:	fa5ff0ef          	jal	ra,2041b670 <_stub>
2041b6d0:	00050793          	mv	a5,a0
}
2041b6d4:	00078513          	mv	a0,a5
2041b6d8:	01c12083          	lw	ra,28(sp)
2041b6dc:	01812403          	lw	s0,24(sp)
2041b6e0:	02010113          	addi	sp,sp,32
2041b6e4:	00008067          	ret

2041b6e8 <_stub>:
{
2041b6e8:	fe010113          	addi	sp,sp,-32
2041b6ec:	00812e23          	sw	s0,28(sp)
2041b6f0:	02010413          	addi	s0,sp,32
2041b6f4:	fea42623          	sw	a0,-20(s0)
  return -1;
2041b6f8:	fff00793          	li	a5,-1
}
2041b6fc:	00078513          	mv	a0,a5
2041b700:	01c12403          	lw	s0,28(sp)
2041b704:	02010113          	addi	sp,sp,32
2041b708:	00008067          	ret

2041b70c <__wrap_read>:
#include "platform.h"
#include "stub.h"
#include "weak_under_alias.h"

ssize_t __wrap_read(int fd, void* ptr, size_t len)
{
2041b70c:	fd010113          	addi	sp,sp,-48
2041b710:	02112623          	sw	ra,44(sp)
2041b714:	02812423          	sw	s0,40(sp)
2041b718:	03010413          	addi	s0,sp,48
2041b71c:	fca42e23          	sw	a0,-36(s0)
2041b720:	fcb42c23          	sw	a1,-40(s0)
2041b724:	fcc42a23          	sw	a2,-44(s0)
  uint8_t * current = (uint8_t *)ptr;
2041b728:	fd842783          	lw	a5,-40(s0)
2041b72c:	fef42623          	sw	a5,-20(s0)
  volatile uint32_t * uart_rx = (uint32_t *)(UART0_CTRL_ADDR + UART_REG_RXFIFO);
2041b730:	100137b7          	lui	a5,0x10013
2041b734:	00478793          	addi	a5,a5,4 # 10013004 <__stack_size+0x10012804>
2041b738:	fef42223          	sw	a5,-28(s0)
  volatile uint8_t * uart_rx_cnt = (uint8_t *)(UART0_CTRL_ADDR + UART_REG_RXCTRL + 2);
2041b73c:	100137b7          	lui	a5,0x10013
2041b740:	00e78793          	addi	a5,a5,14 # 1001300e <__stack_size+0x1001280e>
2041b744:	fef42023          	sw	a5,-32(s0)

  ssize_t result = 0;
2041b748:	fe042423          	sw	zero,-24(s0)

  if (isatty(fd)) {
2041b74c:	fdc42503          	lw	a0,-36(s0)
2041b750:	b55f60ef          	jal	ra,204122a4 <__wrap_isatty>
2041b754:	00050793          	mv	a5,a0
2041b758:	06078463          	beqz	a5,2041b7c0 <__wrap_read+0xb4>
    for (current = (uint8_t *)ptr;
2041b75c:	fd842783          	lw	a5,-40(s0)
2041b760:	fef42623          	sw	a5,-20(s0)
2041b764:	0300006f          	j	2041b794 <__wrap_read+0x88>
        (current < ((uint8_t *)ptr) + len) && (*uart_rx_cnt > 0);
        current ++) {
      *current = *uart_rx;
2041b768:	fe442783          	lw	a5,-28(s0)
2041b76c:	0007a783          	lw	a5,0(a5)
2041b770:	0ff7f713          	andi	a4,a5,255
2041b774:	fec42783          	lw	a5,-20(s0)
2041b778:	00e78023          	sb	a4,0(a5)
      result++;
2041b77c:	fe842783          	lw	a5,-24(s0)
2041b780:	00178793          	addi	a5,a5,1
2041b784:	fef42423          	sw	a5,-24(s0)
        current ++) {
2041b788:	fec42783          	lw	a5,-20(s0)
2041b78c:	00178793          	addi	a5,a5,1
2041b790:	fef42623          	sw	a5,-20(s0)
        (current < ((uint8_t *)ptr) + len) && (*uart_rx_cnt > 0);
2041b794:	fd842703          	lw	a4,-40(s0)
2041b798:	fd442783          	lw	a5,-44(s0)
2041b79c:	00f707b3          	add	a5,a4,a5
    for (current = (uint8_t *)ptr;
2041b7a0:	fec42703          	lw	a4,-20(s0)
2041b7a4:	00f77a63          	bleu	a5,a4,2041b7b8 <__wrap_read+0xac>
        (current < ((uint8_t *)ptr) + len) && (*uart_rx_cnt > 0);
2041b7a8:	fe042783          	lw	a5,-32(s0)
2041b7ac:	0007c783          	lbu	a5,0(a5)
2041b7b0:	0ff7f793          	andi	a5,a5,255
2041b7b4:	fa079ae3          	bnez	a5,2041b768 <__wrap_read+0x5c>
    }
    return result;
2041b7b8:	fe842783          	lw	a5,-24(s0)
2041b7bc:	0100006f          	j	2041b7cc <__wrap_read+0xc0>
  }

  return _stub(EBADF);
2041b7c0:	00900513          	li	a0,9
2041b7c4:	f25ff0ef          	jal	ra,2041b6e8 <_stub>
2041b7c8:	00050793          	mv	a5,a0
}
2041b7cc:	00078513          	mv	a0,a5
2041b7d0:	02c12083          	lw	ra,44(sp)
2041b7d4:	02812403          	lw	s0,40(sp)
2041b7d8:	03010113          	addi	sp,sp,48
2041b7dc:	00008067          	ret

2041b7e0 <_stub>:
{
2041b7e0:	fe010113          	addi	sp,sp,-32
2041b7e4:	00812e23          	sw	s0,28(sp)
2041b7e8:	02010413          	addi	s0,sp,32
2041b7ec:	fea42623          	sw	a0,-20(s0)
  return -1;
2041b7f0:	fff00793          	li	a5,-1
}
2041b7f4:	00078513          	mv	a0,a5
2041b7f8:	01c12403          	lw	s0,28(sp)
2041b7fc:	02010113          	addi	sp,sp,32
2041b800:	00008067          	ret

2041b804 <__wrap_fstat>:
#include <sys/stat.h>
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_fstat(int fd, struct stat* st)
{
2041b804:	fe010113          	addi	sp,sp,-32
2041b808:	00112e23          	sw	ra,28(sp)
2041b80c:	00812c23          	sw	s0,24(sp)
2041b810:	02010413          	addi	s0,sp,32
2041b814:	fea42623          	sw	a0,-20(s0)
2041b818:	feb42423          	sw	a1,-24(s0)
  if (isatty(fd)) {
2041b81c:	fec42503          	lw	a0,-20(s0)
2041b820:	a85f60ef          	jal	ra,204122a4 <__wrap_isatty>
2041b824:	00050793          	mv	a5,a0
2041b828:	00078c63          	beqz	a5,2041b840 <__wrap_fstat+0x3c>
    st->st_mode = S_IFCHR;
2041b82c:	fe842783          	lw	a5,-24(s0)
2041b830:	00002737          	lui	a4,0x2
2041b834:	00e7a223          	sw	a4,4(a5)
    return 0;
2041b838:	00000793          	li	a5,0
2041b83c:	0100006f          	j	2041b84c <__wrap_fstat+0x48>
  }

  return _stub(EBADF);
2041b840:	00900513          	li	a0,9
2041b844:	f9dff0ef          	jal	ra,2041b7e0 <_stub>
2041b848:	00050793          	mv	a5,a0
}
2041b84c:	00078513          	mv	a0,a5
2041b850:	01c12083          	lw	ra,28(sp)
2041b854:	01812403          	lw	s0,24(sp)
2041b858:	02010113          	addi	sp,sp,32
2041b85c:	00008067          	ret

2041b860 <_stub>:
{
2041b860:	fe010113          	addi	sp,sp,-32
2041b864:	00812e23          	sw	s0,28(sp)
2041b868:	02010413          	addi	s0,sp,32
2041b86c:	fea42623          	sw	a0,-20(s0)
  return -1;
2041b870:	fff00793          	li	a5,-1
}
2041b874:	00078513          	mv	a0,a5
2041b878:	01c12403          	lw	s0,28(sp)
2041b87c:	02010113          	addi	sp,sp,32
2041b880:	00008067          	ret

2041b884 <__wrap_close>:
#include <errno.h>
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_close(int fd)
{
2041b884:	fe010113          	addi	sp,sp,-32
2041b888:	00112e23          	sw	ra,28(sp)
2041b88c:	00812c23          	sw	s0,24(sp)
2041b890:	02010413          	addi	s0,sp,32
2041b894:	fea42623          	sw	a0,-20(s0)
  return _stub(EBADF);
2041b898:	00900513          	li	a0,9
2041b89c:	fc5ff0ef          	jal	ra,2041b860 <_stub>
2041b8a0:	00050793          	mv	a5,a0
}
2041b8a4:	00078513          	mv	a0,a5
2041b8a8:	01c12083          	lw	ra,28(sp)
2041b8ac:	01812403          	lw	s0,24(sp)
2041b8b0:	02010113          	addi	sp,sp,32
2041b8b4:	00008067          	ret

2041b8b8 <__wrap_getpid>:
/* See LICENSE of license details. */
#include "weak_under_alias.h"

int __wrap_getpid(void)
{
2041b8b8:	ff010113          	addi	sp,sp,-16
2041b8bc:	00812623          	sw	s0,12(sp)
2041b8c0:	01010413          	addi	s0,sp,16
  return 1;
2041b8c4:	00100793          	li	a5,1
}
2041b8c8:	00078513          	mv	a0,a5
2041b8cc:	00c12403          	lw	s0,12(sp)
2041b8d0:	01010113          	addi	sp,sp,16
2041b8d4:	00008067          	ret

2041b8d8 <_stub>:
{
2041b8d8:	fe010113          	addi	sp,sp,-32
2041b8dc:	00812e23          	sw	s0,28(sp)
2041b8e0:	02010413          	addi	s0,sp,32
2041b8e4:	fea42623          	sw	a0,-20(s0)
  return -1;
2041b8e8:	fff00793          	li	a5,-1
}
2041b8ec:	00078513          	mv	a0,a5
2041b8f0:	01c12403          	lw	s0,28(sp)
2041b8f4:	02010113          	addi	sp,sp,32
2041b8f8:	00008067          	ret

2041b8fc <__wrap_kill>:
#include <errno.h>
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_kill(int pid, int sig)
{
2041b8fc:	fe010113          	addi	sp,sp,-32
2041b900:	00112e23          	sw	ra,28(sp)
2041b904:	00812c23          	sw	s0,24(sp)
2041b908:	02010413          	addi	s0,sp,32
2041b90c:	fea42623          	sw	a0,-20(s0)
2041b910:	feb42423          	sw	a1,-24(s0)
  return _stub(EINVAL);
2041b914:	01600513          	li	a0,22
2041b918:	fc1ff0ef          	jal	ra,2041b8d8 <_stub>
2041b91c:	00050793          	mv	a5,a0
}
2041b920:	00078513          	mv	a0,a5
2041b924:	01c12083          	lw	ra,28(sp)
2041b928:	01812403          	lw	s0,24(sp)
2041b92c:	02010113          	addi	sp,sp,32
2041b930:	00008067          	ret

2041b934 <__divdi3>:
2041b934:	4301                	li	t1,0
2041b936:	0005db63          	bgez	a1,2041b94c <__divdi3+0x18>
2041b93a:	40a00533          	neg	a0,a0
2041b93e:	00a03833          	snez	a6,a0
2041b942:	40b00733          	neg	a4,a1
2041b946:	410705b3          	sub	a1,a4,a6
2041b94a:	537d                	li	t1,-1
2041b94c:	0006db63          	bgez	a3,2041b962 <__divdi3+0x2e>
2041b950:	40c00633          	neg	a2,a2
2041b954:	00c037b3          	snez	a5,a2
2041b958:	40d006b3          	neg	a3,a3
2041b95c:	fff34313          	not	t1,t1
2041b960:	8e9d                	sub	a3,a3,a5
2041b962:	8832                	mv	a6,a2
2041b964:	8736                	mv	a4,a3
2041b966:	88aa                	mv	a7,a0
2041b968:	8e2e                	mv	t3,a1
2041b96a:	20069f63          	bnez	a3,2041bb88 <__divdi3+0x254>
2041b96e:	204226b7          	lui	a3,0x20422
2041b972:	17068693          	addi	a3,a3,368 # 20422170 <__clz_tab>
2041b976:	0ac5ff63          	bleu	a2,a1,2041ba34 <__divdi3+0x100>
2041b97a:	67c1                	lui	a5,0x10
2041b97c:	0af67563          	bleu	a5,a2,2041ba26 <__divdi3+0xf2>
2041b980:	0ff00e93          	li	t4,255
2041b984:	00cebeb3          	sltu	t4,t4,a2
2041b988:	0e8e                	slli	t4,t4,0x3
2041b98a:	01d657b3          	srl	a5,a2,t4
2041b98e:	96be                	add	a3,a3,a5
2041b990:	0006c703          	lbu	a4,0(a3)
2041b994:	02000793          	li	a5,32
2041b998:	9eba                	add	t4,t4,a4
2041b99a:	41d787b3          	sub	a5,a5,t4
2041b99e:	cb99                	beqz	a5,2041b9b4 <__divdi3+0x80>
2041b9a0:	00f59733          	sll	a4,a1,a5
2041b9a4:	01d55eb3          	srl	t4,a0,t4
2041b9a8:	00f61833          	sll	a6,a2,a5
2041b9ac:	00eeee33          	or	t3,t4,a4
2041b9b0:	00f518b3          	sll	a7,a0,a5
2041b9b4:	01085613          	srli	a2,a6,0x10
2041b9b8:	02ce5733          	divu	a4,t3,a2
2041b9bc:	01081593          	slli	a1,a6,0x10
2041b9c0:	81c1                	srli	a1,a1,0x10
2041b9c2:	0108d693          	srli	a3,a7,0x10
2041b9c6:	02ce77b3          	remu	a5,t3,a2
2041b9ca:	02e58533          	mul	a0,a1,a4
2041b9ce:	07c2                	slli	a5,a5,0x10
2041b9d0:	8edd                	or	a3,a3,a5
2041b9d2:	87ba                	mv	a5,a4
2041b9d4:	00a6fc63          	bleu	a0,a3,2041b9ec <__divdi3+0xb8>
2041b9d8:	96c2                	add	a3,a3,a6
2041b9da:	fff70793          	addi	a5,a4,-1 # 1fff <__stack_size+0x17ff>
2041b9de:	0106e763          	bltu	a3,a6,2041b9ec <__divdi3+0xb8>
2041b9e2:	00a6f563          	bleu	a0,a3,2041b9ec <__divdi3+0xb8>
2041b9e6:	ffe70793          	addi	a5,a4,-2
2041b9ea:	96c2                	add	a3,a3,a6
2041b9ec:	8e89                	sub	a3,a3,a0
2041b9ee:	02c6f733          	remu	a4,a3,a2
2041b9f2:	08c2                	slli	a7,a7,0x10
2041b9f4:	0108d893          	srli	a7,a7,0x10
2041b9f8:	02c6d6b3          	divu	a3,a3,a2
2041b9fc:	0742                	slli	a4,a4,0x10
2041b9fe:	011768b3          	or	a7,a4,a7
2041ba02:	02d585b3          	mul	a1,a1,a3
2041ba06:	8536                	mv	a0,a3
2041ba08:	00b8fb63          	bleu	a1,a7,2041ba1e <__divdi3+0xea>
2041ba0c:	98c2                	add	a7,a7,a6
2041ba0e:	fff68513          	addi	a0,a3,-1
2041ba12:	0108e663          	bltu	a7,a6,2041ba1e <__divdi3+0xea>
2041ba16:	00b8f463          	bleu	a1,a7,2041ba1e <__divdi3+0xea>
2041ba1a:	ffe68513          	addi	a0,a3,-2
2041ba1e:	07c2                	slli	a5,a5,0x10
2041ba20:	8fc9                	or	a5,a5,a0
2041ba22:	4e01                	li	t3,0
2041ba24:	a845                	j	2041bad4 <__divdi3+0x1a0>
2041ba26:	010007b7          	lui	a5,0x1000
2041ba2a:	4ec1                	li	t4,16
2041ba2c:	f4f66fe3          	bltu	a2,a5,2041b98a <__divdi3+0x56>
2041ba30:	4ee1                	li	t4,24
2041ba32:	bfa1                	j	2041b98a <__divdi3+0x56>
2041ba34:	e601                	bnez	a2,2041ba3c <__divdi3+0x108>
2041ba36:	4805                	li	a6,1
2041ba38:	02e85833          	divu	a6,a6,a4
2041ba3c:	67c1                	lui	a5,0x10
2041ba3e:	0af87763          	bleu	a5,a6,2041baec <__divdi3+0x1b8>
2041ba42:	0ff00793          	li	a5,255
2041ba46:	0107f363          	bleu	a6,a5,2041ba4c <__divdi3+0x118>
2041ba4a:	4721                	li	a4,8
2041ba4c:	00e857b3          	srl	a5,a6,a4
2041ba50:	96be                	add	a3,a3,a5
2041ba52:	0006c783          	lbu	a5,0(a3)
2041ba56:	02000693          	li	a3,32
2041ba5a:	97ba                	add	a5,a5,a4
2041ba5c:	8e9d                	sub	a3,a3,a5
2041ba5e:	eed1                	bnez	a3,2041bafa <__divdi3+0x1c6>
2041ba60:	41058733          	sub	a4,a1,a6
2041ba64:	4e05                	li	t3,1
2041ba66:	01085613          	srli	a2,a6,0x10
2041ba6a:	01081593          	slli	a1,a6,0x10
2041ba6e:	81c1                	srli	a1,a1,0x10
2041ba70:	0108d693          	srli	a3,a7,0x10
2041ba74:	02c777b3          	remu	a5,a4,a2
2041ba78:	02c75733          	divu	a4,a4,a2
2041ba7c:	07c2                	slli	a5,a5,0x10
2041ba7e:	8edd                	or	a3,a3,a5
2041ba80:	02e58533          	mul	a0,a1,a4
2041ba84:	87ba                	mv	a5,a4
2041ba86:	00a6fc63          	bleu	a0,a3,2041ba9e <__divdi3+0x16a>
2041ba8a:	96c2                	add	a3,a3,a6
2041ba8c:	fff70793          	addi	a5,a4,-1
2041ba90:	0106e763          	bltu	a3,a6,2041ba9e <__divdi3+0x16a>
2041ba94:	00a6f563          	bleu	a0,a3,2041ba9e <__divdi3+0x16a>
2041ba98:	ffe70793          	addi	a5,a4,-2
2041ba9c:	96c2                	add	a3,a3,a6
2041ba9e:	8e89                	sub	a3,a3,a0
2041baa0:	02c6f733          	remu	a4,a3,a2
2041baa4:	08c2                	slli	a7,a7,0x10
2041baa6:	0108d893          	srli	a7,a7,0x10
2041baaa:	02c6d6b3          	divu	a3,a3,a2
2041baae:	0742                	slli	a4,a4,0x10
2041bab0:	011768b3          	or	a7,a4,a7
2041bab4:	02d585b3          	mul	a1,a1,a3
2041bab8:	8536                	mv	a0,a3
2041baba:	00b8fb63          	bleu	a1,a7,2041bad0 <__divdi3+0x19c>
2041babe:	98c2                	add	a7,a7,a6
2041bac0:	fff68513          	addi	a0,a3,-1
2041bac4:	0108e663          	bltu	a7,a6,2041bad0 <__divdi3+0x19c>
2041bac8:	00b8f463          	bleu	a1,a7,2041bad0 <__divdi3+0x19c>
2041bacc:	ffe68513          	addi	a0,a3,-2
2041bad0:	07c2                	slli	a5,a5,0x10
2041bad2:	8fc9                	or	a5,a5,a0
2041bad4:	853e                	mv	a0,a5
2041bad6:	85f2                	mv	a1,t3
2041bad8:	00030963          	beqz	t1,2041baea <__divdi3+0x1b6>
2041badc:	40f00533          	neg	a0,a5
2041bae0:	00a037b3          	snez	a5,a0
2041bae4:	41c005b3          	neg	a1,t3
2041bae8:	8d9d                	sub	a1,a1,a5
2041baea:	8082                	ret
2041baec:	010007b7          	lui	a5,0x1000
2041baf0:	4741                	li	a4,16
2041baf2:	f4f86de3          	bltu	a6,a5,2041ba4c <__divdi3+0x118>
2041baf6:	4761                	li	a4,24
2041baf8:	bf91                	j	2041ba4c <__divdi3+0x118>
2041bafa:	00d81833          	sll	a6,a6,a3
2041bafe:	00f5deb3          	srl	t4,a1,a5
2041bb02:	00d518b3          	sll	a7,a0,a3
2041bb06:	00f557b3          	srl	a5,a0,a5
2041bb0a:	01085513          	srli	a0,a6,0x10
2041bb0e:	00d59733          	sll	a4,a1,a3
2041bb12:	02aed5b3          	divu	a1,t4,a0
2041bb16:	00e7e633          	or	a2,a5,a4
2041bb1a:	01081713          	slli	a4,a6,0x10
2041bb1e:	8341                	srli	a4,a4,0x10
2041bb20:	01065793          	srli	a5,a2,0x10
2041bb24:	02aef6b3          	remu	a3,t4,a0
2041bb28:	8e2e                	mv	t3,a1
2041bb2a:	02b70eb3          	mul	t4,a4,a1
2041bb2e:	06c2                	slli	a3,a3,0x10
2041bb30:	8fd5                	or	a5,a5,a3
2041bb32:	01d7fc63          	bleu	t4,a5,2041bb4a <__divdi3+0x216>
2041bb36:	97c2                	add	a5,a5,a6
2041bb38:	fff58e13          	addi	t3,a1,-1
2041bb3c:	0107e763          	bltu	a5,a6,2041bb4a <__divdi3+0x216>
2041bb40:	01d7f563          	bleu	t4,a5,2041bb4a <__divdi3+0x216>
2041bb44:	ffe58e13          	addi	t3,a1,-2
2041bb48:	97c2                	add	a5,a5,a6
2041bb4a:	41d787b3          	sub	a5,a5,t4
2041bb4e:	02a7f5b3          	remu	a1,a5,a0
2041bb52:	0642                	slli	a2,a2,0x10
2041bb54:	8241                	srli	a2,a2,0x10
2041bb56:	02a7d7b3          	divu	a5,a5,a0
2041bb5a:	05c2                	slli	a1,a1,0x10
2041bb5c:	8dd1                	or	a1,a1,a2
2041bb5e:	02f70733          	mul	a4,a4,a5
2041bb62:	86be                	mv	a3,a5
2041bb64:	00e5fc63          	bleu	a4,a1,2041bb7c <__divdi3+0x248>
2041bb68:	95c2                	add	a1,a1,a6
2041bb6a:	fff78693          	addi	a3,a5,-1 # ffffff <__stack_size+0xfff7ff>
2041bb6e:	0105e763          	bltu	a1,a6,2041bb7c <__divdi3+0x248>
2041bb72:	00e5f563          	bleu	a4,a1,2041bb7c <__divdi3+0x248>
2041bb76:	ffe78693          	addi	a3,a5,-2
2041bb7a:	95c2                	add	a1,a1,a6
2041bb7c:	0e42                	slli	t3,t3,0x10
2041bb7e:	40e58733          	sub	a4,a1,a4
2041bb82:	00de6e33          	or	t3,t3,a3
2041bb86:	b5c5                	j	2041ba66 <__divdi3+0x132>
2041bb88:	14d5e163          	bltu	a1,a3,2041bcca <__divdi3+0x396>
2041bb8c:	67c1                	lui	a5,0x10
2041bb8e:	02f6ff63          	bleu	a5,a3,2041bbcc <__divdi3+0x298>
2041bb92:	0ff00813          	li	a6,255
2041bb96:	00d838b3          	sltu	a7,a6,a3
2041bb9a:	088e                	slli	a7,a7,0x3
2041bb9c:	20422737          	lui	a4,0x20422
2041bba0:	0116d7b3          	srl	a5,a3,a7
2041bba4:	17070713          	addi	a4,a4,368 # 20422170 <__clz_tab>
2041bba8:	97ba                	add	a5,a5,a4
2041bbaa:	0007c803          	lbu	a6,0(a5) # 10000 <__stack_size+0xf800>
2041bbae:	02000e13          	li	t3,32
2041bbb2:	9846                	add	a6,a6,a7
2041bbb4:	410e0e33          	sub	t3,t3,a6
2041bbb8:	020e1163          	bnez	t3,2041bbda <__divdi3+0x2a6>
2041bbbc:	4785                	li	a5,1
2041bbbe:	f0b6ebe3          	bltu	a3,a1,2041bad4 <__divdi3+0x1a0>
2041bbc2:	00c53633          	sltu	a2,a0,a2
2041bbc6:	00164793          	xori	a5,a2,1
2041bbca:	b729                	j	2041bad4 <__divdi3+0x1a0>
2041bbcc:	010007b7          	lui	a5,0x1000
2041bbd0:	48c1                	li	a7,16
2041bbd2:	fcf6e5e3          	bltu	a3,a5,2041bb9c <__divdi3+0x268>
2041bbd6:	48e1                	li	a7,24
2041bbd8:	b7d1                	j	2041bb9c <__divdi3+0x268>
2041bbda:	010657b3          	srl	a5,a2,a6
2041bbde:	01c696b3          	sll	a3,a3,t3
2041bbe2:	8edd                	or	a3,a3,a5
2041bbe4:	0106df13          	srli	t5,a3,0x10
2041bbe8:	0105d7b3          	srl	a5,a1,a6
2041bbec:	03e7f8b3          	remu	a7,a5,t5
2041bbf0:	01069e93          	slli	t4,a3,0x10
2041bbf4:	010ede93          	srli	t4,t4,0x10
2041bbf8:	01c59733          	sll	a4,a1,t3
2041bbfc:	01055833          	srl	a6,a0,a6
2041bc00:	00e86733          	or	a4,a6,a4
2041bc04:	01075813          	srli	a6,a4,0x10
2041bc08:	01c61633          	sll	a2,a2,t3
2041bc0c:	03e7d7b3          	divu	a5,a5,t5
2041bc10:	08c2                	slli	a7,a7,0x10
2041bc12:	0108e833          	or	a6,a7,a6
2041bc16:	02fe8fb3          	mul	t6,t4,a5
2041bc1a:	85be                	mv	a1,a5
2041bc1c:	01f87c63          	bleu	t6,a6,2041bc34 <__divdi3+0x300>
2041bc20:	9836                	add	a6,a6,a3
2041bc22:	fff78593          	addi	a1,a5,-1 # ffffff <__stack_size+0xfff7ff>
2041bc26:	00d86763          	bltu	a6,a3,2041bc34 <__divdi3+0x300>
2041bc2a:	01f87563          	bleu	t6,a6,2041bc34 <__divdi3+0x300>
2041bc2e:	ffe78593          	addi	a1,a5,-2
2041bc32:	9836                	add	a6,a6,a3
2041bc34:	41f80833          	sub	a6,a6,t6
2041bc38:	03e878b3          	remu	a7,a6,t5
2041bc3c:	0742                	slli	a4,a4,0x10
2041bc3e:	8341                	srli	a4,a4,0x10
2041bc40:	03e85833          	divu	a6,a6,t5
2041bc44:	08c2                	slli	a7,a7,0x10
2041bc46:	00e8e733          	or	a4,a7,a4
2041bc4a:	030e8eb3          	mul	t4,t4,a6
2041bc4e:	87c2                	mv	a5,a6
2041bc50:	01d77c63          	bleu	t4,a4,2041bc68 <__divdi3+0x334>
2041bc54:	9736                	add	a4,a4,a3
2041bc56:	fff80793          	addi	a5,a6,-1 # 7fefffff <__fini_array_end+0x5faddd13>
2041bc5a:	00d76763          	bltu	a4,a3,2041bc68 <__divdi3+0x334>
2041bc5e:	01d77563          	bleu	t4,a4,2041bc68 <__divdi3+0x334>
2041bc62:	ffe80793          	addi	a5,a6,-2
2041bc66:	9736                	add	a4,a4,a3
2041bc68:	05c2                	slli	a1,a1,0x10
2041bc6a:	6f41                	lui	t5,0x10
2041bc6c:	8fcd                	or	a5,a5,a1
2041bc6e:	ffff0593          	addi	a1,t5,-1 # ffff <__stack_size+0xf7ff>
2041bc72:	00b7f8b3          	and	a7,a5,a1
2041bc76:	0107d813          	srli	a6,a5,0x10
2041bc7a:	8df1                	and	a1,a1,a2
2041bc7c:	8241                	srli	a2,a2,0x10
2041bc7e:	41d70733          	sub	a4,a4,t4
2041bc82:	02b88eb3          	mul	t4,a7,a1
2041bc86:	02b805b3          	mul	a1,a6,a1
2041bc8a:	010ed693          	srli	a3,t4,0x10
2041bc8e:	02c888b3          	mul	a7,a7,a2
2041bc92:	98ae                	add	a7,a7,a1
2041bc94:	96c6                	add	a3,a3,a7
2041bc96:	02c80833          	mul	a6,a6,a2
2041bc9a:	00b6f363          	bleu	a1,a3,2041bca0 <__divdi3+0x36c>
2041bc9e:	987a                	add	a6,a6,t5
2041bca0:	0106d613          	srli	a2,a3,0x10
2041bca4:	9832                	add	a6,a6,a2
2041bca6:	03076063          	bltu	a4,a6,2041bcc6 <__divdi3+0x392>
2041bcaa:	d7071ce3          	bne	a4,a6,2041ba22 <__divdi3+0xee>
2041bcae:	6741                	lui	a4,0x10
2041bcb0:	177d                	addi	a4,a4,-1
2041bcb2:	8ef9                	and	a3,a3,a4
2041bcb4:	06c2                	slli	a3,a3,0x10
2041bcb6:	00eefeb3          	and	t4,t4,a4
2041bcba:	01c51533          	sll	a0,a0,t3
2041bcbe:	96f6                	add	a3,a3,t4
2041bcc0:	4e01                	li	t3,0
2041bcc2:	e0d579e3          	bleu	a3,a0,2041bad4 <__divdi3+0x1a0>
2041bcc6:	17fd                	addi	a5,a5,-1
2041bcc8:	bba9                	j	2041ba22 <__divdi3+0xee>
2041bcca:	4e01                	li	t3,0
2041bccc:	4781                	li	a5,0
2041bcce:	b519                	j	2041bad4 <__divdi3+0x1a0>

2041bcd0 <__udivdi3>:
2041bcd0:	87ae                	mv	a5,a1
2041bcd2:	8832                	mv	a6,a2
2041bcd4:	88b6                	mv	a7,a3
2041bcd6:	832a                	mv	t1,a0
2041bcd8:	20069663          	bnez	a3,2041bee4 <__udivdi3+0x214>
2041bcdc:	20422737          	lui	a4,0x20422
2041bce0:	17070713          	addi	a4,a4,368 # 20422170 <__clz_tab>
2041bce4:	0ac5fe63          	bleu	a2,a1,2041bda0 <__udivdi3+0xd0>
2041bce8:	66c1                	lui	a3,0x10
2041bcea:	0ad67463          	bleu	a3,a2,2041bd92 <__udivdi3+0xc2>
2041bcee:	0ff00693          	li	a3,255
2041bcf2:	00c6b6b3          	sltu	a3,a3,a2
2041bcf6:	068e                	slli	a3,a3,0x3
2041bcf8:	00d658b3          	srl	a7,a2,a3
2041bcfc:	9746                	add	a4,a4,a7
2041bcfe:	00074703          	lbu	a4,0(a4)
2041bd02:	96ba                	add	a3,a3,a4
2041bd04:	02000713          	li	a4,32
2041bd08:	8f15                	sub	a4,a4,a3
2041bd0a:	cb19                	beqz	a4,2041bd20 <__udivdi3+0x50>
2041bd0c:	00e797b3          	sll	a5,a5,a4
2041bd10:	00d556b3          	srl	a3,a0,a3
2041bd14:	00e61833          	sll	a6,a2,a4
2041bd18:	00f6e5b3          	or	a1,a3,a5
2041bd1c:	00e51333          	sll	t1,a0,a4
2041bd20:	01085513          	srli	a0,a6,0x10
2041bd24:	02a5d7b3          	divu	a5,a1,a0
2041bd28:	01081613          	slli	a2,a6,0x10
2041bd2c:	8241                	srli	a2,a2,0x10
2041bd2e:	01035693          	srli	a3,t1,0x10
2041bd32:	02a5f733          	remu	a4,a1,a0
2041bd36:	02f605b3          	mul	a1,a2,a5
2041bd3a:	0742                	slli	a4,a4,0x10
2041bd3c:	8ed9                	or	a3,a3,a4
2041bd3e:	873e                	mv	a4,a5
2041bd40:	00b6fc63          	bleu	a1,a3,2041bd58 <__udivdi3+0x88>
2041bd44:	96c2                	add	a3,a3,a6
2041bd46:	fff78713          	addi	a4,a5,-1
2041bd4a:	0106e763          	bltu	a3,a6,2041bd58 <__udivdi3+0x88>
2041bd4e:	00b6f563          	bleu	a1,a3,2041bd58 <__udivdi3+0x88>
2041bd52:	ffe78713          	addi	a4,a5,-2
2041bd56:	96c2                	add	a3,a3,a6
2041bd58:	8e8d                	sub	a3,a3,a1
2041bd5a:	02a6f7b3          	remu	a5,a3,a0
2041bd5e:	0342                	slli	t1,t1,0x10
2041bd60:	01035313          	srli	t1,t1,0x10
2041bd64:	02a6d6b3          	divu	a3,a3,a0
2041bd68:	07c2                	slli	a5,a5,0x10
2041bd6a:	0067e333          	or	t1,a5,t1
2041bd6e:	02d605b3          	mul	a1,a2,a3
2041bd72:	8536                	mv	a0,a3
2041bd74:	00b37b63          	bleu	a1,t1,2041bd8a <__udivdi3+0xba>
2041bd78:	9342                	add	t1,t1,a6
2041bd7a:	fff68513          	addi	a0,a3,-1 # ffff <__stack_size+0xf7ff>
2041bd7e:	01036663          	bltu	t1,a6,2041bd8a <__udivdi3+0xba>
2041bd82:	00b37463          	bleu	a1,t1,2041bd8a <__udivdi3+0xba>
2041bd86:	ffe68513          	addi	a0,a3,-2
2041bd8a:	0742                	slli	a4,a4,0x10
2041bd8c:	8f49                	or	a4,a4,a0
2041bd8e:	4581                	li	a1,0
2041bd90:	a84d                	j	2041be42 <__udivdi3+0x172>
2041bd92:	010008b7          	lui	a7,0x1000
2041bd96:	46c1                	li	a3,16
2041bd98:	f71660e3          	bltu	a2,a7,2041bcf8 <__udivdi3+0x28>
2041bd9c:	46e1                	li	a3,24
2041bd9e:	bfa9                	j	2041bcf8 <__udivdi3+0x28>
2041bda0:	e601                	bnez	a2,2041bda8 <__udivdi3+0xd8>
2041bda2:	4685                	li	a3,1
2041bda4:	02c6d833          	divu	a6,a3,a2
2041bda8:	66c1                	lui	a3,0x10
2041bdaa:	08d87e63          	bleu	a3,a6,2041be46 <__udivdi3+0x176>
2041bdae:	0ff00693          	li	a3,255
2041bdb2:	0106f363          	bleu	a6,a3,2041bdb8 <__udivdi3+0xe8>
2041bdb6:	48a1                	li	a7,8
2041bdb8:	011856b3          	srl	a3,a6,a7
2041bdbc:	9736                	add	a4,a4,a3
2041bdbe:	00074683          	lbu	a3,0(a4)
2041bdc2:	02000713          	li	a4,32
2041bdc6:	96c6                	add	a3,a3,a7
2041bdc8:	8f15                	sub	a4,a4,a3
2041bdca:	e749                	bnez	a4,2041be54 <__udivdi3+0x184>
2041bdcc:	410787b3          	sub	a5,a5,a6
2041bdd0:	4585                	li	a1,1
2041bdd2:	01085613          	srli	a2,a6,0x10
2041bdd6:	01081893          	slli	a7,a6,0x10
2041bdda:	0108d893          	srli	a7,a7,0x10
2041bdde:	01035693          	srli	a3,t1,0x10
2041bde2:	02c7f733          	remu	a4,a5,a2
2041bde6:	02c7d7b3          	divu	a5,a5,a2
2041bdea:	0742                	slli	a4,a4,0x10
2041bdec:	8ed9                	or	a3,a3,a4
2041bdee:	02f88533          	mul	a0,a7,a5
2041bdf2:	873e                	mv	a4,a5
2041bdf4:	00a6fc63          	bleu	a0,a3,2041be0c <__udivdi3+0x13c>
2041bdf8:	96c2                	add	a3,a3,a6
2041bdfa:	fff78713          	addi	a4,a5,-1
2041bdfe:	0106e763          	bltu	a3,a6,2041be0c <__udivdi3+0x13c>
2041be02:	00a6f563          	bleu	a0,a3,2041be0c <__udivdi3+0x13c>
2041be06:	ffe78713          	addi	a4,a5,-2
2041be0a:	96c2                	add	a3,a3,a6
2041be0c:	8e89                	sub	a3,a3,a0
2041be0e:	02c6f7b3          	remu	a5,a3,a2
2041be12:	0342                	slli	t1,t1,0x10
2041be14:	01035313          	srli	t1,t1,0x10
2041be18:	02c6d6b3          	divu	a3,a3,a2
2041be1c:	07c2                	slli	a5,a5,0x10
2041be1e:	0067e333          	or	t1,a5,t1
2041be22:	02d888b3          	mul	a7,a7,a3
2041be26:	8536                	mv	a0,a3
2041be28:	01137b63          	bleu	a7,t1,2041be3e <__udivdi3+0x16e>
2041be2c:	9342                	add	t1,t1,a6
2041be2e:	fff68513          	addi	a0,a3,-1 # ffff <__stack_size+0xf7ff>
2041be32:	01036663          	bltu	t1,a6,2041be3e <__udivdi3+0x16e>
2041be36:	01137463          	bleu	a7,t1,2041be3e <__udivdi3+0x16e>
2041be3a:	ffe68513          	addi	a0,a3,-2
2041be3e:	0742                	slli	a4,a4,0x10
2041be40:	8f49                	or	a4,a4,a0
2041be42:	853a                	mv	a0,a4
2041be44:	8082                	ret
2041be46:	010006b7          	lui	a3,0x1000
2041be4a:	48c1                	li	a7,16
2041be4c:	f6d866e3          	bltu	a6,a3,2041bdb8 <__udivdi3+0xe8>
2041be50:	48e1                	li	a7,24
2041be52:	b79d                	j	2041bdb8 <__udivdi3+0xe8>
2041be54:	00e81833          	sll	a6,a6,a4
2041be58:	00d7d5b3          	srl	a1,a5,a3
2041be5c:	00e51333          	sll	t1,a0,a4
2041be60:	00d556b3          	srl	a3,a0,a3
2041be64:	01085513          	srli	a0,a6,0x10
2041be68:	00e797b3          	sll	a5,a5,a4
2041be6c:	02a5f733          	remu	a4,a1,a0
2041be70:	00f6e8b3          	or	a7,a3,a5
2041be74:	01081793          	slli	a5,a6,0x10
2041be78:	83c1                	srli	a5,a5,0x10
2041be7a:	0108d613          	srli	a2,a7,0x10
2041be7e:	02a5d5b3          	divu	a1,a1,a0
2041be82:	0742                	slli	a4,a4,0x10
2041be84:	8f51                	or	a4,a4,a2
2041be86:	02b786b3          	mul	a3,a5,a1
2041be8a:	862e                	mv	a2,a1
2041be8c:	00d77c63          	bleu	a3,a4,2041bea4 <__udivdi3+0x1d4>
2041be90:	9742                	add	a4,a4,a6
2041be92:	fff58613          	addi	a2,a1,-1
2041be96:	01076763          	bltu	a4,a6,2041bea4 <__udivdi3+0x1d4>
2041be9a:	00d77563          	bleu	a3,a4,2041bea4 <__udivdi3+0x1d4>
2041be9e:	ffe58613          	addi	a2,a1,-2
2041bea2:	9742                	add	a4,a4,a6
2041bea4:	40d706b3          	sub	a3,a4,a3
2041bea8:	02a6f733          	remu	a4,a3,a0
2041beac:	08c2                	slli	a7,a7,0x10
2041beae:	0108d893          	srli	a7,a7,0x10
2041beb2:	02a6d6b3          	divu	a3,a3,a0
2041beb6:	0742                	slli	a4,a4,0x10
2041beb8:	02d785b3          	mul	a1,a5,a3
2041bebc:	011767b3          	or	a5,a4,a7
2041bec0:	8736                	mv	a4,a3
2041bec2:	00b7fc63          	bleu	a1,a5,2041beda <__udivdi3+0x20a>
2041bec6:	97c2                	add	a5,a5,a6
2041bec8:	fff68713          	addi	a4,a3,-1 # ffffff <__stack_size+0xfff7ff>
2041becc:	0107e763          	bltu	a5,a6,2041beda <__udivdi3+0x20a>
2041bed0:	00b7f563          	bleu	a1,a5,2041beda <__udivdi3+0x20a>
2041bed4:	ffe68713          	addi	a4,a3,-2
2041bed8:	97c2                	add	a5,a5,a6
2041beda:	8f8d                	sub	a5,a5,a1
2041bedc:	01061593          	slli	a1,a2,0x10
2041bee0:	8dd9                	or	a1,a1,a4
2041bee2:	bdc5                	j	2041bdd2 <__udivdi3+0x102>
2041bee4:	14d5e263          	bltu	a1,a3,2041c028 <__udivdi3+0x358>
2041bee8:	6741                	lui	a4,0x10
2041beea:	02e6fe63          	bleu	a4,a3,2041bf26 <__udivdi3+0x256>
2041beee:	0ff00813          	li	a6,255
2041bef2:	00d83733          	sltu	a4,a6,a3
2041bef6:	070e                	slli	a4,a4,0x3
2041bef8:	20422837          	lui	a6,0x20422
2041befc:	17080813          	addi	a6,a6,368 # 20422170 <__clz_tab>
2041bf00:	00e6d5b3          	srl	a1,a3,a4
2041bf04:	95c2                	add	a1,a1,a6
2041bf06:	0005c803          	lbu	a6,0(a1)
2041bf0a:	02000593          	li	a1,32
2041bf0e:	983a                	add	a6,a6,a4
2041bf10:	410585b3          	sub	a1,a1,a6
2041bf14:	e185                	bnez	a1,2041bf34 <__udivdi3+0x264>
2041bf16:	4705                	li	a4,1
2041bf18:	f2f6e5e3          	bltu	a3,a5,2041be42 <__udivdi3+0x172>
2041bf1c:	00c53533          	sltu	a0,a0,a2
2041bf20:	00154713          	xori	a4,a0,1
2041bf24:	bf39                	j	2041be42 <__udivdi3+0x172>
2041bf26:	010005b7          	lui	a1,0x1000
2041bf2a:	4741                	li	a4,16
2041bf2c:	fcb6e6e3          	bltu	a3,a1,2041bef8 <__udivdi3+0x228>
2041bf30:	4761                	li	a4,24
2041bf32:	b7d9                	j	2041bef8 <__udivdi3+0x228>
2041bf34:	01065733          	srl	a4,a2,a6
2041bf38:	00b696b3          	sll	a3,a3,a1
2041bf3c:	8ed9                	or	a3,a3,a4
2041bf3e:	0106de93          	srli	t4,a3,0x10
2041bf42:	0107d733          	srl	a4,a5,a6
2041bf46:	03d778b3          	remu	a7,a4,t4
2041bf4a:	00b797b3          	sll	a5,a5,a1
2041bf4e:	01055833          	srl	a6,a0,a6
2041bf52:	00f86333          	or	t1,a6,a5
2041bf56:	01069793          	slli	a5,a3,0x10
2041bf5a:	83c1                	srli	a5,a5,0x10
2041bf5c:	01035813          	srli	a6,t1,0x10
2041bf60:	00b61633          	sll	a2,a2,a1
2041bf64:	03d75733          	divu	a4,a4,t4
2041bf68:	08c2                	slli	a7,a7,0x10
2041bf6a:	0108e833          	or	a6,a7,a6
2041bf6e:	02e78f33          	mul	t5,a5,a4
2041bf72:	8e3a                	mv	t3,a4
2041bf74:	01e87c63          	bleu	t5,a6,2041bf8c <__udivdi3+0x2bc>
2041bf78:	9836                	add	a6,a6,a3
2041bf7a:	fff70e13          	addi	t3,a4,-1 # ffff <__stack_size+0xf7ff>
2041bf7e:	00d86763          	bltu	a6,a3,2041bf8c <__udivdi3+0x2bc>
2041bf82:	01e87563          	bleu	t5,a6,2041bf8c <__udivdi3+0x2bc>
2041bf86:	ffe70e13          	addi	t3,a4,-2
2041bf8a:	9836                	add	a6,a6,a3
2041bf8c:	41e80833          	sub	a6,a6,t5
2041bf90:	03d878b3          	remu	a7,a6,t4
2041bf94:	03d85833          	divu	a6,a6,t4
2041bf98:	08c2                	slli	a7,a7,0x10
2041bf9a:	03078eb3          	mul	t4,a5,a6
2041bf9e:	01031793          	slli	a5,t1,0x10
2041bfa2:	83c1                	srli	a5,a5,0x10
2041bfa4:	00f8e7b3          	or	a5,a7,a5
2041bfa8:	8742                	mv	a4,a6
2041bfaa:	01d7fc63          	bleu	t4,a5,2041bfc2 <__udivdi3+0x2f2>
2041bfae:	97b6                	add	a5,a5,a3
2041bfb0:	fff80713          	addi	a4,a6,-1
2041bfb4:	00d7e763          	bltu	a5,a3,2041bfc2 <__udivdi3+0x2f2>
2041bfb8:	01d7f563          	bleu	t4,a5,2041bfc2 <__udivdi3+0x2f2>
2041bfbc:	ffe80713          	addi	a4,a6,-2
2041bfc0:	97b6                	add	a5,a5,a3
2041bfc2:	0e42                	slli	t3,t3,0x10
2041bfc4:	41d787b3          	sub	a5,a5,t4
2041bfc8:	6ec1                	lui	t4,0x10
2041bfca:	00ee6733          	or	a4,t3,a4
2041bfce:	fffe8813          	addi	a6,t4,-1 # ffff <__stack_size+0xf7ff>
2041bfd2:	01077333          	and	t1,a4,a6
2041bfd6:	01075893          	srli	a7,a4,0x10
2041bfda:	01067833          	and	a6,a2,a6
2041bfde:	8241                	srli	a2,a2,0x10
2041bfe0:	03030e33          	mul	t3,t1,a6
2041bfe4:	03088833          	mul	a6,a7,a6
2041bfe8:	010e5693          	srli	a3,t3,0x10
2041bfec:	02c30333          	mul	t1,t1,a2
2041bff0:	9342                	add	t1,t1,a6
2041bff2:	969a                	add	a3,a3,t1
2041bff4:	02c888b3          	mul	a7,a7,a2
2041bff8:	0106f363          	bleu	a6,a3,2041bffe <__udivdi3+0x32e>
2041bffc:	98f6                	add	a7,a7,t4
2041bffe:	0106d613          	srli	a2,a3,0x10
2041c002:	98b2                	add	a7,a7,a2
2041c004:	0317e063          	bltu	a5,a7,2041c024 <__udivdi3+0x354>
2041c008:	d91793e3          	bne	a5,a7,2041bd8e <__udivdi3+0xbe>
2041c00c:	67c1                	lui	a5,0x10
2041c00e:	17fd                	addi	a5,a5,-1
2041c010:	8efd                	and	a3,a3,a5
2041c012:	06c2                	slli	a3,a3,0x10
2041c014:	00fe7e33          	and	t3,t3,a5
2041c018:	00b51533          	sll	a0,a0,a1
2041c01c:	96f2                	add	a3,a3,t3
2041c01e:	4581                	li	a1,0
2041c020:	e2d571e3          	bleu	a3,a0,2041be42 <__udivdi3+0x172>
2041c024:	177d                	addi	a4,a4,-1
2041c026:	b3a5                	j	2041bd8e <__udivdi3+0xbe>
2041c028:	4581                	li	a1,0
2041c02a:	4701                	li	a4,0
2041c02c:	bd19                	j	2041be42 <__udivdi3+0x172>

2041c02e <__umoddi3>:
2041c02e:	88b2                	mv	a7,a2
2041c030:	8736                	mv	a4,a3
2041c032:	87aa                	mv	a5,a0
2041c034:	882e                	mv	a6,a1
2041c036:	1c069863          	bnez	a3,2041c206 <__umoddi3+0x1d8>
2041c03a:	204226b7          	lui	a3,0x20422
2041c03e:	17068693          	addi	a3,a3,368 # 20422170 <__clz_tab>
2041c042:	0ac5f863          	bleu	a2,a1,2041c0f2 <__umoddi3+0xc4>
2041c046:	6341                	lui	t1,0x10
2041c048:	08667e63          	bleu	t1,a2,2041c0e4 <__umoddi3+0xb6>
2041c04c:	0ff00313          	li	t1,255
2041c050:	00c37363          	bleu	a2,t1,2041c056 <__umoddi3+0x28>
2041c054:	4721                	li	a4,8
2041c056:	00e65333          	srl	t1,a2,a4
2041c05a:	969a                	add	a3,a3,t1
2041c05c:	0006ce03          	lbu	t3,0(a3)
2041c060:	02000313          	li	t1,32
2041c064:	9e3a                	add	t3,t3,a4
2041c066:	41c30333          	sub	t1,t1,t3
2041c06a:	00030c63          	beqz	t1,2041c082 <__umoddi3+0x54>
2041c06e:	006595b3          	sll	a1,a1,t1
2041c072:	01c55e33          	srl	t3,a0,t3
2041c076:	006618b3          	sll	a7,a2,t1
2041c07a:	00be6833          	or	a6,t3,a1
2041c07e:	006517b3          	sll	a5,a0,t1
2041c082:	0108d613          	srli	a2,a7,0x10
2041c086:	02c87733          	remu	a4,a6,a2
2041c08a:	01089513          	slli	a0,a7,0x10
2041c08e:	8141                	srli	a0,a0,0x10
2041c090:	0107d693          	srli	a3,a5,0x10
2041c094:	02c85833          	divu	a6,a6,a2
2041c098:	0742                	slli	a4,a4,0x10
2041c09a:	8ed9                	or	a3,a3,a4
2041c09c:	03050833          	mul	a6,a0,a6
2041c0a0:	0106f863          	bleu	a6,a3,2041c0b0 <__umoddi3+0x82>
2041c0a4:	96c6                	add	a3,a3,a7
2041c0a6:	0116e563          	bltu	a3,a7,2041c0b0 <__umoddi3+0x82>
2041c0aa:	0106f363          	bleu	a6,a3,2041c0b0 <__umoddi3+0x82>
2041c0ae:	96c6                	add	a3,a3,a7
2041c0b0:	410686b3          	sub	a3,a3,a6
2041c0b4:	02c6f733          	remu	a4,a3,a2
2041c0b8:	07c2                	slli	a5,a5,0x10
2041c0ba:	83c1                	srli	a5,a5,0x10
2041c0bc:	02c6d6b3          	divu	a3,a3,a2
2041c0c0:	02d506b3          	mul	a3,a0,a3
2041c0c4:	01071513          	slli	a0,a4,0x10
2041c0c8:	8fc9                	or	a5,a5,a0
2041c0ca:	00d7f863          	bleu	a3,a5,2041c0da <__umoddi3+0xac>
2041c0ce:	97c6                	add	a5,a5,a7
2041c0d0:	0117e563          	bltu	a5,a7,2041c0da <__umoddi3+0xac>
2041c0d4:	00d7f363          	bleu	a3,a5,2041c0da <__umoddi3+0xac>
2041c0d8:	97c6                	add	a5,a5,a7
2041c0da:	8f95                	sub	a5,a5,a3
2041c0dc:	0067d533          	srl	a0,a5,t1
2041c0e0:	4581                	li	a1,0
2041c0e2:	8082                	ret
2041c0e4:	01000337          	lui	t1,0x1000
2041c0e8:	4741                	li	a4,16
2041c0ea:	f66666e3          	bltu	a2,t1,2041c056 <__umoddi3+0x28>
2041c0ee:	4761                	li	a4,24
2041c0f0:	b79d                	j	2041c056 <__umoddi3+0x28>
2041c0f2:	e601                	bnez	a2,2041c0fa <__umoddi3+0xcc>
2041c0f4:	4605                	li	a2,1
2041c0f6:	031658b3          	divu	a7,a2,a7
2041c0fa:	6641                	lui	a2,0x10
2041c0fc:	08c8f363          	bleu	a2,a7,2041c182 <__umoddi3+0x154>
2041c100:	0ff00613          	li	a2,255
2041c104:	01167363          	bleu	a7,a2,2041c10a <__umoddi3+0xdc>
2041c108:	4721                	li	a4,8
2041c10a:	00e8d633          	srl	a2,a7,a4
2041c10e:	96b2                	add	a3,a3,a2
2041c110:	0006ce03          	lbu	t3,0(a3)
2041c114:	02000313          	li	t1,32
2041c118:	9e3a                	add	t3,t3,a4
2041c11a:	41c30333          	sub	t1,t1,t3
2041c11e:	06031963          	bnez	t1,2041c190 <__umoddi3+0x162>
2041c122:	411585b3          	sub	a1,a1,a7
2041c126:	0108d713          	srli	a4,a7,0x10
2041c12a:	01089513          	slli	a0,a7,0x10
2041c12e:	8141                	srli	a0,a0,0x10
2041c130:	0107d613          	srli	a2,a5,0x10
2041c134:	02e5f6b3          	remu	a3,a1,a4
2041c138:	02e5d5b3          	divu	a1,a1,a4
2041c13c:	06c2                	slli	a3,a3,0x10
2041c13e:	8ed1                	or	a3,a3,a2
2041c140:	02b505b3          	mul	a1,a0,a1
2041c144:	00b6f863          	bleu	a1,a3,2041c154 <__umoddi3+0x126>
2041c148:	96c6                	add	a3,a3,a7
2041c14a:	0116e563          	bltu	a3,a7,2041c154 <__umoddi3+0x126>
2041c14e:	00b6f363          	bleu	a1,a3,2041c154 <__umoddi3+0x126>
2041c152:	96c6                	add	a3,a3,a7
2041c154:	40b685b3          	sub	a1,a3,a1
2041c158:	02e5f6b3          	remu	a3,a1,a4
2041c15c:	07c2                	slli	a5,a5,0x10
2041c15e:	83c1                	srli	a5,a5,0x10
2041c160:	02e5d5b3          	divu	a1,a1,a4
2041c164:	02b505b3          	mul	a1,a0,a1
2041c168:	01069513          	slli	a0,a3,0x10
2041c16c:	8fc9                	or	a5,a5,a0
2041c16e:	00b7f863          	bleu	a1,a5,2041c17e <__umoddi3+0x150>
2041c172:	97c6                	add	a5,a5,a7
2041c174:	0117e563          	bltu	a5,a7,2041c17e <__umoddi3+0x150>
2041c178:	00b7f363          	bleu	a1,a5,2041c17e <__umoddi3+0x150>
2041c17c:	97c6                	add	a5,a5,a7
2041c17e:	8f8d                	sub	a5,a5,a1
2041c180:	bfb1                	j	2041c0dc <__umoddi3+0xae>
2041c182:	01000637          	lui	a2,0x1000
2041c186:	4741                	li	a4,16
2041c188:	f8c8e1e3          	bltu	a7,a2,2041c10a <__umoddi3+0xdc>
2041c18c:	4761                	li	a4,24
2041c18e:	bfb5                	j	2041c10a <__umoddi3+0xdc>
2041c190:	006898b3          	sll	a7,a7,t1
2041c194:	01c5d733          	srl	a4,a1,t3
2041c198:	006517b3          	sll	a5,a0,t1
2041c19c:	01c55e33          	srl	t3,a0,t3
2041c1a0:	0108d513          	srli	a0,a7,0x10
2041c1a4:	02a776b3          	remu	a3,a4,a0
2041c1a8:	006595b3          	sll	a1,a1,t1
2041c1ac:	00be6e33          	or	t3,t3,a1
2041c1b0:	01089593          	slli	a1,a7,0x10
2041c1b4:	81c1                	srli	a1,a1,0x10
2041c1b6:	010e5613          	srli	a2,t3,0x10
2041c1ba:	02a75733          	divu	a4,a4,a0
2041c1be:	06c2                	slli	a3,a3,0x10
2041c1c0:	8ed1                	or	a3,a3,a2
2041c1c2:	02e58733          	mul	a4,a1,a4
2041c1c6:	00e6f863          	bleu	a4,a3,2041c1d6 <__umoddi3+0x1a8>
2041c1ca:	96c6                	add	a3,a3,a7
2041c1cc:	0116e563          	bltu	a3,a7,2041c1d6 <__umoddi3+0x1a8>
2041c1d0:	00e6f363          	bleu	a4,a3,2041c1d6 <__umoddi3+0x1a8>
2041c1d4:	96c6                	add	a3,a3,a7
2041c1d6:	40e68633          	sub	a2,a3,a4
2041c1da:	02a676b3          	remu	a3,a2,a0
2041c1de:	0e42                	slli	t3,t3,0x10
2041c1e0:	010e5e13          	srli	t3,t3,0x10
2041c1e4:	02a65633          	divu	a2,a2,a0
2041c1e8:	06c2                	slli	a3,a3,0x10
2041c1ea:	02c58633          	mul	a2,a1,a2
2041c1ee:	01c6e5b3          	or	a1,a3,t3
2041c1f2:	00c5f863          	bleu	a2,a1,2041c202 <__umoddi3+0x1d4>
2041c1f6:	95c6                	add	a1,a1,a7
2041c1f8:	0115e563          	bltu	a1,a7,2041c202 <__umoddi3+0x1d4>
2041c1fc:	00c5f363          	bleu	a2,a1,2041c202 <__umoddi3+0x1d4>
2041c200:	95c6                	add	a1,a1,a7
2041c202:	8d91                	sub	a1,a1,a2
2041c204:	b70d                	j	2041c126 <__umoddi3+0xf8>
2041c206:	ecd5eee3          	bltu	a1,a3,2041c0e2 <__umoddi3+0xb4>
2041c20a:	6741                	lui	a4,0x10
2041c20c:	04e6f563          	bleu	a4,a3,2041c256 <__umoddi3+0x228>
2041c210:	0ff00e93          	li	t4,255
2041c214:	00deb733          	sltu	a4,t4,a3
2041c218:	070e                	slli	a4,a4,0x3
2041c21a:	20422337          	lui	t1,0x20422
2041c21e:	00e6d8b3          	srl	a7,a3,a4
2041c222:	17030313          	addi	t1,t1,368 # 20422170 <__clz_tab>
2041c226:	989a                	add	a7,a7,t1
2041c228:	0008ce83          	lbu	t4,0(a7) # 1000000 <__stack_size+0xfff800>
2041c22c:	02000e13          	li	t3,32
2041c230:	9eba                	add	t4,t4,a4
2041c232:	41de0e33          	sub	t3,t3,t4
2041c236:	020e1763          	bnez	t3,2041c264 <__umoddi3+0x236>
2041c23a:	00b6e463          	bltu	a3,a1,2041c242 <__umoddi3+0x214>
2041c23e:	00c56963          	bltu	a0,a2,2041c250 <__umoddi3+0x222>
2041c242:	40c507b3          	sub	a5,a0,a2
2041c246:	8d95                	sub	a1,a1,a3
2041c248:	00f53533          	sltu	a0,a0,a5
2041c24c:	40a58833          	sub	a6,a1,a0
2041c250:	853e                	mv	a0,a5
2041c252:	85c2                	mv	a1,a6
2041c254:	b579                	j	2041c0e2 <__umoddi3+0xb4>
2041c256:	010008b7          	lui	a7,0x1000
2041c25a:	4741                	li	a4,16
2041c25c:	fb16efe3          	bltu	a3,a7,2041c21a <__umoddi3+0x1ec>
2041c260:	4761                	li	a4,24
2041c262:	bf65                	j	2041c21a <__umoddi3+0x1ec>
2041c264:	01d65733          	srl	a4,a2,t4
2041c268:	01c696b3          	sll	a3,a3,t3
2041c26c:	8ed9                	or	a3,a3,a4
2041c26e:	01d557b3          	srl	a5,a0,t4
2041c272:	01d5d733          	srl	a4,a1,t4
2041c276:	01c595b3          	sll	a1,a1,t3
2041c27a:	8fcd                	or	a5,a5,a1
2041c27c:	0106d593          	srli	a1,a3,0x10
2041c280:	02b77333          	remu	t1,a4,a1
2041c284:	01069f13          	slli	t5,a3,0x10
2041c288:	010f5f13          	srli	t5,t5,0x10
2041c28c:	0107d893          	srli	a7,a5,0x10
2041c290:	01c61633          	sll	a2,a2,t3
2041c294:	01c51533          	sll	a0,a0,t3
2041c298:	02b75733          	divu	a4,a4,a1
2041c29c:	0342                	slli	t1,t1,0x10
2041c29e:	011368b3          	or	a7,t1,a7
2041c2a2:	02ef0833          	mul	a6,t5,a4
2041c2a6:	833a                	mv	t1,a4
2041c2a8:	0108fc63          	bleu	a6,a7,2041c2c0 <__umoddi3+0x292>
2041c2ac:	98b6                	add	a7,a7,a3
2041c2ae:	fff70313          	addi	t1,a4,-1 # ffff <__stack_size+0xf7ff>
2041c2b2:	00d8e763          	bltu	a7,a3,2041c2c0 <__umoddi3+0x292>
2041c2b6:	0108f563          	bleu	a6,a7,2041c2c0 <__umoddi3+0x292>
2041c2ba:	ffe70313          	addi	t1,a4,-2
2041c2be:	98b6                	add	a7,a7,a3
2041c2c0:	410888b3          	sub	a7,a7,a6
2041c2c4:	02b8ffb3          	remu	t6,a7,a1
2041c2c8:	02b8d8b3          	divu	a7,a7,a1
2041c2cc:	0fc2                	slli	t6,t6,0x10
2041c2ce:	031f05b3          	mul	a1,t5,a7
2041c2d2:	01079f13          	slli	t5,a5,0x10
2041c2d6:	010f5f13          	srli	t5,t5,0x10
2041c2da:	01efef33          	or	t5,t6,t5
2041c2de:	8746                	mv	a4,a7
2041c2e0:	00bf7c63          	bleu	a1,t5,2041c2f8 <__umoddi3+0x2ca>
2041c2e4:	9f36                	add	t5,t5,a3
2041c2e6:	fff88713          	addi	a4,a7,-1 # ffffff <__stack_size+0xfff7ff>
2041c2ea:	00df6763          	bltu	t5,a3,2041c2f8 <__umoddi3+0x2ca>
2041c2ee:	00bf7563          	bleu	a1,t5,2041c2f8 <__umoddi3+0x2ca>
2041c2f2:	ffe88713          	addi	a4,a7,-2
2041c2f6:	9f36                	add	t5,t5,a3
2041c2f8:	0342                	slli	t1,t1,0x10
2041c2fa:	68c1                	lui	a7,0x10
2041c2fc:	00e36333          	or	t1,t1,a4
2041c300:	fff88793          	addi	a5,a7,-1 # ffff <__stack_size+0xf7ff>
2041c304:	01065813          	srli	a6,a2,0x10
2041c308:	40bf0f33          	sub	t5,t5,a1
2041c30c:	00f375b3          	and	a1,t1,a5
2041c310:	01035313          	srli	t1,t1,0x10
2041c314:	8ff1                	and	a5,a5,a2
2041c316:	02f58733          	mul	a4,a1,a5
2041c31a:	02f307b3          	mul	a5,t1,a5
2041c31e:	030585b3          	mul	a1,a1,a6
2041c322:	03030333          	mul	t1,t1,a6
2041c326:	95be                	add	a1,a1,a5
2041c328:	01075813          	srli	a6,a4,0x10
2041c32c:	982e                	add	a6,a6,a1
2041c32e:	00f87363          	bleu	a5,a6,2041c334 <__umoddi3+0x306>
2041c332:	9346                	add	t1,t1,a7
2041c334:	67c1                	lui	a5,0x10
2041c336:	17fd                	addi	a5,a5,-1
2041c338:	01085593          	srli	a1,a6,0x10
2041c33c:	00f87833          	and	a6,a6,a5
2041c340:	0842                	slli	a6,a6,0x10
2041c342:	8f7d                	and	a4,a4,a5
2041c344:	959a                	add	a1,a1,t1
2041c346:	9742                	add	a4,a4,a6
2041c348:	00bf6663          	bltu	t5,a1,2041c354 <__umoddi3+0x326>
2041c34c:	00bf1b63          	bne	t5,a1,2041c362 <__umoddi3+0x334>
2041c350:	00e57963          	bleu	a4,a0,2041c362 <__umoddi3+0x334>
2041c354:	40c70633          	sub	a2,a4,a2
2041c358:	00c73733          	sltu	a4,a4,a2
2041c35c:	8d95                	sub	a1,a1,a3
2041c35e:	8d99                	sub	a1,a1,a4
2041c360:	8732                	mv	a4,a2
2041c362:	40e50733          	sub	a4,a0,a4
2041c366:	00e53533          	sltu	a0,a0,a4
2041c36a:	40bf05b3          	sub	a1,t5,a1
2041c36e:	8d89                	sub	a1,a1,a0
2041c370:	01d597b3          	sll	a5,a1,t4
2041c374:	01c75733          	srl	a4,a4,t3
2041c378:	00e7e533          	or	a0,a5,a4
2041c37c:	01c5d5b3          	srl	a1,a1,t3
2041c380:	b38d                	j	2041c0e2 <__umoddi3+0xb4>

2041c382 <__adddf3>:
2041c382:	00100837          	lui	a6,0x100
2041c386:	187d                	addi	a6,a6,-1
2041c388:	1101                	addi	sp,sp,-32
2041c38a:	00b878b3          	and	a7,a6,a1
2041c38e:	0145d713          	srli	a4,a1,0x14
2041c392:	01d55793          	srli	a5,a0,0x1d
2041c396:	c84a                	sw	s2,16(sp)
2041c398:	7ff77913          	andi	s2,a4,2047
2041c39c:	00389713          	slli	a4,a7,0x3
2041c3a0:	00d87833          	and	a6,a6,a3
2041c3a4:	8fd9                	or	a5,a5,a4
2041c3a6:	0146d713          	srli	a4,a3,0x14
2041c3aa:	080e                	slli	a6,a6,0x3
2041c3ac:	ca26                	sw	s1,20(sp)
2041c3ae:	7ff77713          	andi	a4,a4,2047
2041c3b2:	01f6d893          	srli	a7,a3,0x1f
2041c3b6:	ce06                	sw	ra,28(sp)
2041c3b8:	01d65693          	srli	a3,a2,0x1d
2041c3bc:	cc22                	sw	s0,24(sp)
2041c3be:	c64e                	sw	s3,12(sp)
2041c3c0:	01f5d493          	srli	s1,a1,0x1f
2041c3c4:	0106e333          	or	t1,a3,a6
2041c3c8:	050e                	slli	a0,a0,0x3
2041c3ca:	060e                	slli	a2,a2,0x3
2041c3cc:	40e90833          	sub	a6,s2,a4
2041c3d0:	2d149a63          	bne	s1,a7,2041c6a4 <__adddf3+0x322>
2041c3d4:	17005963          	blez	a6,2041c546 <__adddf3+0x1c4>
2041c3d8:	e76d                	bnez	a4,2041c4c2 <__adddf3+0x140>
2041c3da:	00c36733          	or	a4,t1,a2
2041c3de:	e751                	bnez	a4,2041c46a <__adddf3+0xe8>
2041c3e0:	7ff00693          	li	a3,2047
2041c3e4:	8742                	mv	a4,a6
2041c3e6:	26d81163          	bne	a6,a3,2041c648 <__adddf3+0x2c6>
2041c3ea:	00a7e6b3          	or	a3,a5,a0
2041c3ee:	24069d63          	bnez	a3,2041c648 <__adddf3+0x2c6>
2041c3f2:	4781                	li	a5,0
2041c3f4:	4501                	li	a0,0
2041c3f6:	00879693          	slli	a3,a5,0x8
2041c3fa:	0006db63          	bgez	a3,2041c410 <__adddf3+0x8e>
2041c3fe:	0705                	addi	a4,a4,1
2041c400:	7ff00693          	li	a3,2047
2041c404:	5ad70963          	beq	a4,a3,2041c9b6 <__adddf3+0x634>
2041c408:	ff8006b7          	lui	a3,0xff800
2041c40c:	16fd                	addi	a3,a3,-1
2041c40e:	8ff5                	and	a5,a5,a3
2041c410:	01d79693          	slli	a3,a5,0x1d
2041c414:	810d                	srli	a0,a0,0x3
2041c416:	8d55                	or	a0,a0,a3
2041c418:	7ff00693          	li	a3,2047
2041c41c:	838d                	srli	a5,a5,0x3
2041c41e:	00d71963          	bne	a4,a3,2041c430 <__adddf3+0xae>
2041c422:	8d5d                	or	a0,a0,a5
2041c424:	4781                	li	a5,0
2041c426:	c509                	beqz	a0,2041c430 <__adddf3+0xae>
2041c428:	000807b7          	lui	a5,0x80
2041c42c:	4501                	li	a0,0
2041c42e:	4481                	li	s1,0
2041c430:	001006b7          	lui	a3,0x100
2041c434:	16fd                	addi	a3,a3,-1
2041c436:	8ff5                	and	a5,a5,a3
2041c438:	801006b7          	lui	a3,0x80100
2041c43c:	7ff77713          	andi	a4,a4,2047
2041c440:	16fd                	addi	a3,a3,-1
2041c442:	0752                	slli	a4,a4,0x14
2041c444:	8ff5                	and	a5,a5,a3
2041c446:	8fd9                	or	a5,a5,a4
2041c448:	80000737          	lui	a4,0x80000
2041c44c:	fff74713          	not	a4,a4
2041c450:	40f2                	lw	ra,28(sp)
2041c452:	4462                	lw	s0,24(sp)
2041c454:	01f49593          	slli	a1,s1,0x1f
2041c458:	8ff9                	and	a5,a5,a4
2041c45a:	00b7e733          	or	a4,a5,a1
2041c45e:	44d2                	lw	s1,20(sp)
2041c460:	4942                	lw	s2,16(sp)
2041c462:	49b2                	lw	s3,12(sp)
2041c464:	85ba                	mv	a1,a4
2041c466:	6105                	addi	sp,sp,32
2041c468:	8082                	ret
2041c46a:	fff80593          	addi	a1,a6,-1 # fffff <__stack_size+0xff7ff>
2041c46e:	ed9d                	bnez	a1,2041c4ac <__adddf3+0x12a>
2041c470:	962a                	add	a2,a2,a0
2041c472:	00a63533          	sltu	a0,a2,a0
2041c476:	979a                	add	a5,a5,t1
2041c478:	97aa                	add	a5,a5,a0
2041c47a:	4705                	li	a4,1
2041c47c:	8532                	mv	a0,a2
2041c47e:	00879693          	slli	a3,a5,0x8
2041c482:	1c06d363          	bgez	a3,2041c648 <__adddf3+0x2c6>
2041c486:	0705                	addi	a4,a4,1
2041c488:	7ff00693          	li	a3,2047
2041c48c:	f6d703e3          	beq	a4,a3,2041c3f2 <__adddf3+0x70>
2041c490:	ff8006b7          	lui	a3,0xff800
2041c494:	16fd                	addi	a3,a3,-1
2041c496:	8efd                	and	a3,a3,a5
2041c498:	00155593          	srli	a1,a0,0x1
2041c49c:	8905                	andi	a0,a0,1
2041c49e:	01f69793          	slli	a5,a3,0x1f
2041c4a2:	8d4d                	or	a0,a0,a1
2041c4a4:	8d5d                	or	a0,a0,a5
2041c4a6:	0016d793          	srli	a5,a3,0x1
2041c4aa:	aa79                	j	2041c648 <__adddf3+0x2c6>
2041c4ac:	7ff00713          	li	a4,2047
2041c4b0:	02e81263          	bne	a6,a4,2041c4d4 <__adddf3+0x152>
2041c4b4:	00a7e733          	or	a4,a5,a0
2041c4b8:	4c070f63          	beqz	a4,2041c996 <__adddf3+0x614>
2041c4bc:	7ff00713          	li	a4,2047
2041c4c0:	a261                	j	2041c648 <__adddf3+0x2c6>
2041c4c2:	7ff00713          	li	a4,2047
2041c4c6:	fee907e3          	beq	s2,a4,2041c4b4 <__adddf3+0x132>
2041c4ca:	00800737          	lui	a4,0x800
2041c4ce:	00e36333          	or	t1,t1,a4
2041c4d2:	85c2                	mv	a1,a6
2041c4d4:	03800713          	li	a4,56
2041c4d8:	06b74263          	blt	a4,a1,2041c53c <__adddf3+0x1ba>
2041c4dc:	477d                	li	a4,31
2041c4de:	02b74b63          	blt	a4,a1,2041c514 <__adddf3+0x192>
2041c4e2:	02000713          	li	a4,32
2041c4e6:	8f0d                	sub	a4,a4,a1
2041c4e8:	00b656b3          	srl	a3,a2,a1
2041c4ec:	00e31833          	sll	a6,t1,a4
2041c4f0:	00e61633          	sll	a2,a2,a4
2041c4f4:	00d86833          	or	a6,a6,a3
2041c4f8:	00c03633          	snez	a2,a2
2041c4fc:	00c86833          	or	a6,a6,a2
2041c500:	00b355b3          	srl	a1,t1,a1
2041c504:	982a                	add	a6,a6,a0
2041c506:	95be                	add	a1,a1,a5
2041c508:	00a837b3          	sltu	a5,a6,a0
2041c50c:	97ae                	add	a5,a5,a1
2041c50e:	8542                	mv	a0,a6
2041c510:	874a                	mv	a4,s2
2041c512:	b7b5                	j	2041c47e <__adddf3+0xfc>
2041c514:	02000713          	li	a4,32
2041c518:	00b35833          	srl	a6,t1,a1
2041c51c:	4681                	li	a3,0
2041c51e:	00e58863          	beq	a1,a4,2041c52e <__adddf3+0x1ac>
2041c522:	04000693          	li	a3,64
2041c526:	40b685b3          	sub	a1,a3,a1
2041c52a:	00b316b3          	sll	a3,t1,a1
2041c52e:	8e55                	or	a2,a2,a3
2041c530:	00c03633          	snez	a2,a2
2041c534:	00c86833          	or	a6,a6,a2
2041c538:	4581                	li	a1,0
2041c53a:	b7e9                	j	2041c504 <__adddf3+0x182>
2041c53c:	00c36833          	or	a6,t1,a2
2041c540:	01003833          	snez	a6,a6
2041c544:	bfd5                	j	2041c538 <__adddf3+0x1b6>
2041c546:	0c080163          	beqz	a6,2041c608 <__adddf3+0x286>
2041c54a:	06091e63          	bnez	s2,2041c5c6 <__adddf3+0x244>
2041c54e:	00a7e6b3          	or	a3,a5,a0
2041c552:	ee89                	bnez	a3,2041c56c <__adddf3+0x1ea>
2041c554:	7ff00793          	li	a5,2047
2041c558:	00f71763          	bne	a4,a5,2041c566 <__adddf3+0x1e4>
2041c55c:	00c36533          	or	a0,t1,a2
2041c560:	4781                	li	a5,0
2041c562:	e8050ae3          	beqz	a0,2041c3f6 <__adddf3+0x74>
2041c566:	879a                	mv	a5,t1
2041c568:	8532                	mv	a0,a2
2041c56a:	a8f9                	j	2041c648 <__adddf3+0x2c6>
2041c56c:	56fd                	li	a3,-1
2041c56e:	00d81863          	bne	a6,a3,2041c57e <__adddf3+0x1fc>
2041c572:	9532                	add	a0,a0,a2
2041c574:	979a                	add	a5,a5,t1
2041c576:	00c53633          	sltu	a2,a0,a2
2041c57a:	97b2                	add	a5,a5,a2
2041c57c:	b709                	j	2041c47e <__adddf3+0xfc>
2041c57e:	7ff00693          	li	a3,2047
2041c582:	fff84813          	not	a6,a6
2041c586:	fcd70be3          	beq	a4,a3,2041c55c <__adddf3+0x1da>
2041c58a:	03800693          	li	a3,56
2041c58e:	0706c963          	blt	a3,a6,2041c600 <__adddf3+0x27e>
2041c592:	46fd                	li	a3,31
2041c594:	0506c363          	blt	a3,a6,2041c5da <__adddf3+0x258>
2041c598:	02000593          	li	a1,32
2041c59c:	410585b3          	sub	a1,a1,a6
2041c5a0:	010558b3          	srl	a7,a0,a6
2041c5a4:	00b796b3          	sll	a3,a5,a1
2041c5a8:	00b51533          	sll	a0,a0,a1
2041c5ac:	0116e6b3          	or	a3,a3,a7
2041c5b0:	00a03533          	snez	a0,a0
2041c5b4:	8d55                	or	a0,a0,a3
2041c5b6:	0107d833          	srl	a6,a5,a6
2041c5ba:	9532                	add	a0,a0,a2
2041c5bc:	981a                	add	a6,a6,t1
2041c5be:	00c537b3          	sltu	a5,a0,a2
2041c5c2:	97c2                	add	a5,a5,a6
2041c5c4:	bd6d                	j	2041c47e <__adddf3+0xfc>
2041c5c6:	7ff00693          	li	a3,2047
2041c5ca:	f8d709e3          	beq	a4,a3,2041c55c <__adddf3+0x1da>
2041c5ce:	008006b7          	lui	a3,0x800
2041c5d2:	41000833          	neg	a6,a6
2041c5d6:	8fd5                	or	a5,a5,a3
2041c5d8:	bf4d                	j	2041c58a <__adddf3+0x208>
2041c5da:	02000893          	li	a7,32
2041c5de:	0107d6b3          	srl	a3,a5,a6
2041c5e2:	4581                	li	a1,0
2041c5e4:	01180863          	beq	a6,a7,2041c5f4 <__adddf3+0x272>
2041c5e8:	04000593          	li	a1,64
2041c5ec:	41058833          	sub	a6,a1,a6
2041c5f0:	010795b3          	sll	a1,a5,a6
2041c5f4:	8d4d                	or	a0,a0,a1
2041c5f6:	00a03533          	snez	a0,a0
2041c5fa:	8d55                	or	a0,a0,a3
2041c5fc:	4801                	li	a6,0
2041c5fe:	bf75                	j	2041c5ba <__adddf3+0x238>
2041c600:	8d5d                	or	a0,a0,a5
2041c602:	00a03533          	snez	a0,a0
2041c606:	bfdd                	j	2041c5fc <__adddf3+0x27a>
2041c608:	00190713          	addi	a4,s2,1
2041c60c:	7ff77593          	andi	a1,a4,2047
2041c610:	4685                	li	a3,1
2041c612:	06b6c863          	blt	a3,a1,2041c682 <__adddf3+0x300>
2041c616:	00a7e733          	or	a4,a5,a0
2041c61a:	04091763          	bnez	s2,2041c668 <__adddf3+0x2e6>
2041c61e:	36070663          	beqz	a4,2041c98a <__adddf3+0x608>
2041c622:	00c366b3          	or	a3,t1,a2
2041c626:	4701                	li	a4,0
2041c628:	c285                	beqz	a3,2041c648 <__adddf3+0x2c6>
2041c62a:	962a                	add	a2,a2,a0
2041c62c:	00a63533          	sltu	a0,a2,a0
2041c630:	979a                	add	a5,a5,t1
2041c632:	97aa                	add	a5,a5,a0
2041c634:	00879593          	slli	a1,a5,0x8
2041c638:	8532                	mv	a0,a2
2041c63a:	0005d763          	bgez	a1,2041c648 <__adddf3+0x2c6>
2041c63e:	ff800737          	lui	a4,0xff800
2041c642:	177d                	addi	a4,a4,-1
2041c644:	8ff9                	and	a5,a5,a4
2041c646:	4705                	li	a4,1
2041c648:	00757693          	andi	a3,a0,7
2041c64c:	da0685e3          	beqz	a3,2041c3f6 <__adddf3+0x74>
2041c650:	00f57693          	andi	a3,a0,15
2041c654:	4611                	li	a2,4
2041c656:	dac680e3          	beq	a3,a2,2041c3f6 <__adddf3+0x74>
2041c65a:	00450693          	addi	a3,a0,4
2041c65e:	00a6b533          	sltu	a0,a3,a0
2041c662:	97aa                	add	a5,a5,a0
2041c664:	8536                	mv	a0,a3
2041c666:	bb41                	j	2041c3f6 <__adddf3+0x74>
2041c668:	32070463          	beqz	a4,2041c990 <__adddf3+0x60e>
2041c66c:	00c36833          	or	a6,t1,a2
2041c670:	e40806e3          	beqz	a6,2041c4bc <__adddf3+0x13a>
2041c674:	004007b7          	lui	a5,0x400
2041c678:	4501                	li	a0,0
2041c67a:	7ff00713          	li	a4,2047
2041c67e:	4481                	li	s1,0
2041c680:	bb9d                	j	2041c3f6 <__adddf3+0x74>
2041c682:	7ff00693          	li	a3,2047
2041c686:	d6d706e3          	beq	a4,a3,2041c3f2 <__adddf3+0x70>
2041c68a:	962a                	add	a2,a2,a0
2041c68c:	00678833          	add	a6,a5,t1
2041c690:	00a637b3          	sltu	a5,a2,a0
2041c694:	983e                	add	a6,a6,a5
2041c696:	01f81513          	slli	a0,a6,0x1f
2041c69a:	8205                	srli	a2,a2,0x1
2041c69c:	8d51                	or	a0,a0,a2
2041c69e:	00185793          	srli	a5,a6,0x1
2041c6a2:	b75d                	j	2041c648 <__adddf3+0x2c6>
2041c6a4:	0d005863          	blez	a6,2041c774 <__adddf3+0x3f2>
2041c6a8:	e359                	bnez	a4,2041c72e <__adddf3+0x3ac>
2041c6aa:	00c36733          	or	a4,t1,a2
2041c6ae:	d20709e3          	beqz	a4,2041c3e0 <__adddf3+0x5e>
2041c6b2:	fff80693          	addi	a3,a6,-1
2041c6b6:	e68d                	bnez	a3,2041c6e0 <__adddf3+0x35e>
2041c6b8:	40c50633          	sub	a2,a0,a2
2041c6bc:	00c53533          	sltu	a0,a0,a2
2041c6c0:	406787b3          	sub	a5,a5,t1
2041c6c4:	8f89                	sub	a5,a5,a0
2041c6c6:	4705                	li	a4,1
2041c6c8:	8532                	mv	a0,a2
2041c6ca:	00879593          	slli	a1,a5,0x8
2041c6ce:	f605dde3          	bgez	a1,2041c648 <__adddf3+0x2c6>
2041c6d2:	00800437          	lui	s0,0x800
2041c6d6:	147d                	addi	s0,s0,-1
2041c6d8:	8c7d                	and	s0,s0,a5
2041c6da:	89aa                	mv	s3,a0
2041c6dc:	893a                	mv	s2,a4
2041c6de:	aafd                	j	2041c8dc <__adddf3+0x55a>
2041c6e0:	7ff00713          	li	a4,2047
2041c6e4:	dce808e3          	beq	a6,a4,2041c4b4 <__adddf3+0x132>
2041c6e8:	03800713          	li	a4,56
2041c6ec:	06d74f63          	blt	a4,a3,2041c76a <__adddf3+0x3e8>
2041c6f0:	477d                	li	a4,31
2041c6f2:	04d74863          	blt	a4,a3,2041c742 <__adddf3+0x3c0>
2041c6f6:	02000713          	li	a4,32
2041c6fa:	8f15                	sub	a4,a4,a3
2041c6fc:	00d655b3          	srl	a1,a2,a3
2041c700:	00e31833          	sll	a6,t1,a4
2041c704:	00e61633          	sll	a2,a2,a4
2041c708:	00b86833          	or	a6,a6,a1
2041c70c:	00c03633          	snez	a2,a2
2041c710:	00c86833          	or	a6,a6,a2
2041c714:	00d356b3          	srl	a3,t1,a3
2041c718:	41050833          	sub	a6,a0,a6
2041c71c:	40d786b3          	sub	a3,a5,a3
2041c720:	010537b3          	sltu	a5,a0,a6
2041c724:	40f687b3          	sub	a5,a3,a5
2041c728:	8542                	mv	a0,a6
2041c72a:	874a                	mv	a4,s2
2041c72c:	bf79                	j	2041c6ca <__adddf3+0x348>
2041c72e:	7ff00713          	li	a4,2047
2041c732:	d8e901e3          	beq	s2,a4,2041c4b4 <__adddf3+0x132>
2041c736:	00800737          	lui	a4,0x800
2041c73a:	00e36333          	or	t1,t1,a4
2041c73e:	86c2                	mv	a3,a6
2041c740:	b765                	j	2041c6e8 <__adddf3+0x366>
2041c742:	02000713          	li	a4,32
2041c746:	00d35833          	srl	a6,t1,a3
2041c74a:	4401                	li	s0,0
2041c74c:	00e68863          	beq	a3,a4,2041c75c <__adddf3+0x3da>
2041c750:	04000413          	li	s0,64
2041c754:	40d406b3          	sub	a3,s0,a3
2041c758:	00d31433          	sll	s0,t1,a3
2041c75c:	8e41                	or	a2,a2,s0
2041c75e:	00c03633          	snez	a2,a2
2041c762:	00c86833          	or	a6,a6,a2
2041c766:	4681                	li	a3,0
2041c768:	bf45                	j	2041c718 <__adddf3+0x396>
2041c76a:	00c36833          	or	a6,t1,a2
2041c76e:	01003833          	snez	a6,a6
2041c772:	bfd5                	j	2041c766 <__adddf3+0x3e4>
2041c774:	0c080663          	beqz	a6,2041c840 <__adddf3+0x4be>
2041c778:	08091363          	bnez	s2,2041c7fe <__adddf3+0x47c>
2041c77c:	00a7e6b3          	or	a3,a5,a0
2041c780:	ee81                	bnez	a3,2041c798 <__adddf3+0x416>
2041c782:	7ff00793          	li	a5,2047
2041c786:	00f71663          	bne	a4,a5,2041c792 <__adddf3+0x410>
2041c78a:	00c36533          	or	a0,t1,a2
2041c78e:	20050963          	beqz	a0,2041c9a0 <__adddf3+0x61e>
2041c792:	879a                	mv	a5,t1
2041c794:	8532                	mv	a0,a2
2041c796:	a8c1                	j	2041c866 <__adddf3+0x4e4>
2041c798:	56fd                	li	a3,-1
2041c79a:	00d81b63          	bne	a6,a3,2041c7b0 <__adddf3+0x42e>
2041c79e:	40a60533          	sub	a0,a2,a0
2041c7a2:	40f307b3          	sub	a5,t1,a5
2041c7a6:	00a63633          	sltu	a2,a2,a0
2041c7aa:	8f91                	sub	a5,a5,a2
2041c7ac:	84c6                	mv	s1,a7
2041c7ae:	bf31                	j	2041c6ca <__adddf3+0x348>
2041c7b0:	7ff00693          	li	a3,2047
2041c7b4:	fff84813          	not	a6,a6
2041c7b8:	fcd709e3          	beq	a4,a3,2041c78a <__adddf3+0x408>
2041c7bc:	03800693          	li	a3,56
2041c7c0:	0706cc63          	blt	a3,a6,2041c838 <__adddf3+0x4b6>
2041c7c4:	46fd                	li	a3,31
2041c7c6:	0506c663          	blt	a3,a6,2041c812 <__adddf3+0x490>
2041c7ca:	02000593          	li	a1,32
2041c7ce:	410585b3          	sub	a1,a1,a6
2041c7d2:	01055e33          	srl	t3,a0,a6
2041c7d6:	00b796b3          	sll	a3,a5,a1
2041c7da:	00b51533          	sll	a0,a0,a1
2041c7de:	01c6e6b3          	or	a3,a3,t3
2041c7e2:	00a03533          	snez	a0,a0
2041c7e6:	8d55                	or	a0,a0,a3
2041c7e8:	0107d833          	srl	a6,a5,a6
2041c7ec:	40a60533          	sub	a0,a2,a0
2041c7f0:	41030833          	sub	a6,t1,a6
2041c7f4:	00a637b3          	sltu	a5,a2,a0
2041c7f8:	40f807b3          	sub	a5,a6,a5
2041c7fc:	bf45                	j	2041c7ac <__adddf3+0x42a>
2041c7fe:	7ff00693          	li	a3,2047
2041c802:	f8d704e3          	beq	a4,a3,2041c78a <__adddf3+0x408>
2041c806:	008006b7          	lui	a3,0x800
2041c80a:	41000833          	neg	a6,a6
2041c80e:	8fd5                	or	a5,a5,a3
2041c810:	b775                	j	2041c7bc <__adddf3+0x43a>
2041c812:	02000e13          	li	t3,32
2041c816:	0107d6b3          	srl	a3,a5,a6
2041c81a:	4581                	li	a1,0
2041c81c:	01c80863          	beq	a6,t3,2041c82c <__adddf3+0x4aa>
2041c820:	04000593          	li	a1,64
2041c824:	41058833          	sub	a6,a1,a6
2041c828:	010795b3          	sll	a1,a5,a6
2041c82c:	8d4d                	or	a0,a0,a1
2041c82e:	00a03533          	snez	a0,a0
2041c832:	8d55                	or	a0,a0,a3
2041c834:	4801                	li	a6,0
2041c836:	bf5d                	j	2041c7ec <__adddf3+0x46a>
2041c838:	8d5d                	or	a0,a0,a5
2041c83a:	00a03533          	snez	a0,a0
2041c83e:	bfdd                	j	2041c834 <__adddf3+0x4b2>
2041c840:	00190713          	addi	a4,s2,1
2041c844:	7ff77713          	andi	a4,a4,2047
2041c848:	4685                	li	a3,1
2041c84a:	06e6c563          	blt	a3,a4,2041c8b4 <__adddf3+0x532>
2041c84e:	00a7e6b3          	or	a3,a5,a0
2041c852:	00c36733          	or	a4,t1,a2
2041c856:	04091563          	bnez	s2,2041c8a0 <__adddf3+0x51e>
2041c85a:	ea81                	bnez	a3,2041c86a <__adddf3+0x4e8>
2041c85c:	14070563          	beqz	a4,2041c9a6 <__adddf3+0x624>
2041c860:	879a                	mv	a5,t1
2041c862:	8532                	mv	a0,a2
2041c864:	4701                	li	a4,0
2041c866:	84c6                	mv	s1,a7
2041c868:	b3c5                	j	2041c648 <__adddf3+0x2c6>
2041c86a:	cb0d                	beqz	a4,2041c89c <__adddf3+0x51a>
2041c86c:	40c506b3          	sub	a3,a0,a2
2041c870:	00d535b3          	sltu	a1,a0,a3
2041c874:	40678733          	sub	a4,a5,t1
2041c878:	8f0d                	sub	a4,a4,a1
2041c87a:	00871593          	slli	a1,a4,0x8
2041c87e:	0005da63          	bgez	a1,2041c892 <__adddf3+0x510>
2041c882:	40a60533          	sub	a0,a2,a0
2041c886:	40f307b3          	sub	a5,t1,a5
2041c88a:	00a63633          	sltu	a2,a2,a0
2041c88e:	8f91                	sub	a5,a5,a2
2041c890:	bfd1                	j	2041c864 <__adddf3+0x4e2>
2041c892:	00e6e533          	or	a0,a3,a4
2041c896:	c155                	beqz	a0,2041c93a <__adddf3+0x5b8>
2041c898:	87ba                	mv	a5,a4
2041c89a:	8536                	mv	a0,a3
2041c89c:	4701                	li	a4,0
2041c89e:	b36d                	j	2041c648 <__adddf3+0x2c6>
2041c8a0:	e699                	bnez	a3,2041c8ae <__adddf3+0x52c>
2041c8a2:	10070663          	beqz	a4,2041c9ae <__adddf3+0x62c>
2041c8a6:	879a                	mv	a5,t1
2041c8a8:	8532                	mv	a0,a2
2041c8aa:	84c6                	mv	s1,a7
2041c8ac:	b901                	j	2041c4bc <__adddf3+0x13a>
2041c8ae:	c00707e3          	beqz	a4,2041c4bc <__adddf3+0x13a>
2041c8b2:	b3c9                	j	2041c674 <__adddf3+0x2f2>
2041c8b4:	40c509b3          	sub	s3,a0,a2
2041c8b8:	40678433          	sub	s0,a5,t1
2041c8bc:	01353833          	sltu	a6,a0,s3
2041c8c0:	41040433          	sub	s0,s0,a6
2041c8c4:	00841693          	slli	a3,s0,0x8
2041c8c8:	0606d663          	bgez	a3,2041c934 <__adddf3+0x5b2>
2041c8cc:	40a609b3          	sub	s3,a2,a0
2041c8d0:	40f30433          	sub	s0,t1,a5
2041c8d4:	013637b3          	sltu	a5,a2,s3
2041c8d8:	8c1d                	sub	s0,s0,a5
2041c8da:	84c6                	mv	s1,a7
2041c8dc:	c02d                	beqz	s0,2041c93e <__adddf3+0x5bc>
2041c8de:	8522                	mv	a0,s0
2041c8e0:	77f020ef          	jal	ra,2041f85e <__clzsi2>
2041c8e4:	ff850713          	addi	a4,a0,-8
2041c8e8:	47fd                	li	a5,31
2041c8ea:	06e7c063          	blt	a5,a4,2041c94a <__adddf3+0x5c8>
2041c8ee:	02000793          	li	a5,32
2041c8f2:	8f99                	sub	a5,a5,a4
2041c8f4:	00e41433          	sll	s0,s0,a4
2041c8f8:	00f9d7b3          	srl	a5,s3,a5
2041c8fc:	8c5d                	or	s0,s0,a5
2041c8fe:	00e99533          	sll	a0,s3,a4
2041c902:	07274d63          	blt	a4,s2,2041c97c <__adddf3+0x5fa>
2041c906:	41270733          	sub	a4,a4,s2
2041c90a:	00170793          	addi	a5,a4,1 # 800001 <__stack_size+0x7ff801>
2041c90e:	46fd                	li	a3,31
2041c910:	04f6c363          	blt	a3,a5,2041c956 <__adddf3+0x5d4>
2041c914:	02000713          	li	a4,32
2041c918:	8f1d                	sub	a4,a4,a5
2041c91a:	00f55633          	srl	a2,a0,a5
2041c91e:	00e416b3          	sll	a3,s0,a4
2041c922:	00e51533          	sll	a0,a0,a4
2041c926:	8ed1                	or	a3,a3,a2
2041c928:	00a03533          	snez	a0,a0
2041c92c:	8d55                	or	a0,a0,a3
2041c92e:	00f457b3          	srl	a5,s0,a5
2041c932:	b7ad                	j	2041c89c <__adddf3+0x51a>
2041c934:	0089e533          	or	a0,s3,s0
2041c938:	f155                	bnez	a0,2041c8dc <__adddf3+0x55a>
2041c93a:	4781                	li	a5,0
2041c93c:	a0bd                	j	2041c9aa <__adddf3+0x628>
2041c93e:	854e                	mv	a0,s3
2041c940:	71f020ef          	jal	ra,2041f85e <__clzsi2>
2041c944:	02050513          	addi	a0,a0,32
2041c948:	bf71                	j	2041c8e4 <__adddf3+0x562>
2041c94a:	fd850413          	addi	s0,a0,-40
2041c94e:	00899433          	sll	s0,s3,s0
2041c952:	4501                	li	a0,0
2041c954:	b77d                	j	2041c902 <__adddf3+0x580>
2041c956:	1705                	addi	a4,a4,-31
2041c958:	02000613          	li	a2,32
2041c95c:	00e45733          	srl	a4,s0,a4
2041c960:	4681                	li	a3,0
2041c962:	00c78763          	beq	a5,a2,2041c970 <__adddf3+0x5ee>
2041c966:	04000693          	li	a3,64
2041c96a:	8e9d                	sub	a3,a3,a5
2041c96c:	00d416b3          	sll	a3,s0,a3
2041c970:	8d55                	or	a0,a0,a3
2041c972:	00a03533          	snez	a0,a0
2041c976:	8d59                	or	a0,a0,a4
2041c978:	4781                	li	a5,0
2041c97a:	b70d                	j	2041c89c <__adddf3+0x51a>
2041c97c:	ff8007b7          	lui	a5,0xff800
2041c980:	17fd                	addi	a5,a5,-1
2041c982:	40e90733          	sub	a4,s2,a4
2041c986:	8fe1                	and	a5,a5,s0
2041c988:	b1c1                	j	2041c648 <__adddf3+0x2c6>
2041c98a:	879a                	mv	a5,t1
2041c98c:	8532                	mv	a0,a2
2041c98e:	b739                	j	2041c89c <__adddf3+0x51a>
2041c990:	879a                	mv	a5,t1
2041c992:	8532                	mv	a0,a2
2041c994:	b625                	j	2041c4bc <__adddf3+0x13a>
2041c996:	4781                	li	a5,0
2041c998:	4501                	li	a0,0
2041c99a:	7ff00713          	li	a4,2047
2041c99e:	bca1                	j	2041c3f6 <__adddf3+0x74>
2041c9a0:	4781                	li	a5,0
2041c9a2:	84c6                	mv	s1,a7
2041c9a4:	bc89                	j	2041c3f6 <__adddf3+0x74>
2041c9a6:	4781                	li	a5,0
2041c9a8:	4501                	li	a0,0
2041c9aa:	4701                	li	a4,0
2041c9ac:	b9c9                	j	2041c67e <__adddf3+0x2fc>
2041c9ae:	4501                	li	a0,0
2041c9b0:	004007b7          	lui	a5,0x400
2041c9b4:	b1d9                	j	2041c67a <__adddf3+0x2f8>
2041c9b6:	4781                	li	a5,0
2041c9b8:	4501                	li	a0,0
2041c9ba:	bc99                	j	2041c410 <__adddf3+0x8e>

2041c9bc <__divdf3>:
2041c9bc:	7179                	addi	sp,sp,-48
2041c9be:	d422                	sw	s0,40(sp)
2041c9c0:	d226                	sw	s1,36(sp)
2041c9c2:	c85a                	sw	s6,16(sp)
2041c9c4:	842a                	mv	s0,a0
2041c9c6:	8b2a                	mv	s6,a0
2041c9c8:	001004b7          	lui	s1,0x100
2041c9cc:	0145d513          	srli	a0,a1,0x14
2041c9d0:	d04a                	sw	s2,32(sp)
2041c9d2:	ce4e                	sw	s3,28(sp)
2041c9d4:	c65e                	sw	s7,12(sp)
2041c9d6:	14fd                	addi	s1,s1,-1
2041c9d8:	d606                	sw	ra,44(sp)
2041c9da:	cc52                	sw	s4,24(sp)
2041c9dc:	ca56                	sw	s5,20(sp)
2041c9de:	7ff57513          	andi	a0,a0,2047
2041c9e2:	8bb2                	mv	s7,a2
2041c9e4:	89b6                	mv	s3,a3
2041c9e6:	8ced                	and	s1,s1,a1
2041c9e8:	01f5d913          	srli	s2,a1,0x1f
2041c9ec:	c151                	beqz	a0,2041ca70 <__divdf3+0xb4>
2041c9ee:	7ff00793          	li	a5,2047
2041c9f2:	0cf50a63          	beq	a0,a5,2041cac6 <__divdf3+0x10a>
2041c9f6:	048e                	slli	s1,s1,0x3
2041c9f8:	008006b7          	lui	a3,0x800
2041c9fc:	8cd5                	or	s1,s1,a3
2041c9fe:	01db5a93          	srli	s5,s6,0x1d
2041ca02:	009aeab3          	or	s5,s5,s1
2041ca06:	003b1413          	slli	s0,s6,0x3
2041ca0a:	c0150a13          	addi	s4,a0,-1023
2041ca0e:	4b01                	li	s6,0
2041ca10:	0149d513          	srli	a0,s3,0x14
2041ca14:	001004b7          	lui	s1,0x100
2041ca18:	14fd                	addi	s1,s1,-1
2041ca1a:	7ff57513          	andi	a0,a0,2047
2041ca1e:	0134f4b3          	and	s1,s1,s3
2041ca22:	8fde                	mv	t6,s7
2041ca24:	01f9d993          	srli	s3,s3,0x1f
2041ca28:	c169                	beqz	a0,2041caea <__divdf3+0x12e>
2041ca2a:	7ff00793          	li	a5,2047
2041ca2e:	10f50663          	beq	a0,a5,2041cb3a <__divdf3+0x17e>
2041ca32:	008007b7          	lui	a5,0x800
2041ca36:	048e                	slli	s1,s1,0x3
2041ca38:	8cdd                	or	s1,s1,a5
2041ca3a:	01dbd793          	srli	a5,s7,0x1d
2041ca3e:	8fc5                	or	a5,a5,s1
2041ca40:	003b9f93          	slli	t6,s7,0x3
2041ca44:	c0150513          	addi	a0,a0,-1023
2041ca48:	4701                	li	a4,0
2041ca4a:	002b1693          	slli	a3,s6,0x2
2041ca4e:	8ed9                	or	a3,a3,a4
2041ca50:	16fd                	addi	a3,a3,-1
2041ca52:	45b9                	li	a1,14
2041ca54:	01394633          	xor	a2,s2,s3
2041ca58:	40aa0533          	sub	a0,s4,a0
2041ca5c:	10d5e063          	bltu	a1,a3,2041cb5c <__divdf3+0x1a0>
2041ca60:	204225b7          	lui	a1,0x20422
2041ca64:	068a                	slli	a3,a3,0x2
2041ca66:	0bc58593          	addi	a1,a1,188 # 204220bc <zeroes.4346+0x10>
2041ca6a:	96ae                	add	a3,a3,a1
2041ca6c:	4294                	lw	a3,0(a3)
2041ca6e:	8682                	jr	a3
2041ca70:	0164eab3          	or	s5,s1,s6
2041ca74:	060a8263          	beqz	s5,2041cad8 <__divdf3+0x11c>
2041ca78:	c89d                	beqz	s1,2041caae <__divdf3+0xf2>
2041ca7a:	8526                	mv	a0,s1
2041ca7c:	5e3020ef          	jal	ra,2041f85e <__clzsi2>
2041ca80:	ff550793          	addi	a5,a0,-11
2041ca84:	4771                	li	a4,28
2041ca86:	02f74a63          	blt	a4,a5,2041caba <__divdf3+0xfe>
2041ca8a:	4af5                	li	s5,29
2041ca8c:	ff850413          	addi	s0,a0,-8
2041ca90:	40fa8ab3          	sub	s5,s5,a5
2041ca94:	008494b3          	sll	s1,s1,s0
2041ca98:	015b5ab3          	srl	s5,s6,s5
2041ca9c:	009aeab3          	or	s5,s5,s1
2041caa0:	008b1433          	sll	s0,s6,s0
2041caa4:	c0d00a13          	li	s4,-1011
2041caa8:	40aa0a33          	sub	s4,s4,a0
2041caac:	b78d                	j	2041ca0e <__divdf3+0x52>
2041caae:	855a                	mv	a0,s6
2041cab0:	5af020ef          	jal	ra,2041f85e <__clzsi2>
2041cab4:	02050513          	addi	a0,a0,32
2041cab8:	b7e1                	j	2041ca80 <__divdf3+0xc4>
2041caba:	fd850493          	addi	s1,a0,-40
2041cabe:	009b1ab3          	sll	s5,s6,s1
2041cac2:	4401                	li	s0,0
2041cac4:	b7c5                	j	2041caa4 <__divdf3+0xe8>
2041cac6:	0164eab3          	or	s5,s1,s6
2041caca:	000a8b63          	beqz	s5,2041cae0 <__divdf3+0x124>
2041cace:	8aa6                	mv	s5,s1
2041cad0:	7ff00a13          	li	s4,2047
2041cad4:	4b0d                	li	s6,3
2041cad6:	bf2d                	j	2041ca10 <__divdf3+0x54>
2041cad8:	4401                	li	s0,0
2041cada:	4a01                	li	s4,0
2041cadc:	4b05                	li	s6,1
2041cade:	bf0d                	j	2041ca10 <__divdf3+0x54>
2041cae0:	4401                	li	s0,0
2041cae2:	7ff00a13          	li	s4,2047
2041cae6:	4b09                	li	s6,2
2041cae8:	b725                	j	2041ca10 <__divdf3+0x54>
2041caea:	0174e7b3          	or	a5,s1,s7
2041caee:	cfb1                	beqz	a5,2041cb4a <__divdf3+0x18e>
2041caf0:	c88d                	beqz	s1,2041cb22 <__divdf3+0x166>
2041caf2:	8526                	mv	a0,s1
2041caf4:	56b020ef          	jal	ra,2041f85e <__clzsi2>
2041caf8:	ff550713          	addi	a4,a0,-11
2041cafc:	47f1                	li	a5,28
2041cafe:	02e7c863          	blt	a5,a4,2041cb2e <__divdf3+0x172>
2041cb02:	47f5                	li	a5,29
2041cb04:	ff850f93          	addi	t6,a0,-8
2041cb08:	8f99                	sub	a5,a5,a4
2041cb0a:	01f494b3          	sll	s1,s1,t6
2041cb0e:	00fbd7b3          	srl	a5,s7,a5
2041cb12:	8fc5                	or	a5,a5,s1
2041cb14:	01fb9fb3          	sll	t6,s7,t6
2041cb18:	c0d00613          	li	a2,-1011
2041cb1c:	40a60533          	sub	a0,a2,a0
2041cb20:	b725                	j	2041ca48 <__divdf3+0x8c>
2041cb22:	855e                	mv	a0,s7
2041cb24:	53b020ef          	jal	ra,2041f85e <__clzsi2>
2041cb28:	02050513          	addi	a0,a0,32
2041cb2c:	b7f1                	j	2041caf8 <__divdf3+0x13c>
2041cb2e:	fd850793          	addi	a5,a0,-40
2041cb32:	00fb97b3          	sll	a5,s7,a5
2041cb36:	4f81                	li	t6,0
2041cb38:	b7c5                	j	2041cb18 <__divdf3+0x15c>
2041cb3a:	0174e7b3          	or	a5,s1,s7
2041cb3e:	cb91                	beqz	a5,2041cb52 <__divdf3+0x196>
2041cb40:	87a6                	mv	a5,s1
2041cb42:	7ff00513          	li	a0,2047
2041cb46:	470d                	li	a4,3
2041cb48:	b709                	j	2041ca4a <__divdf3+0x8e>
2041cb4a:	4f81                	li	t6,0
2041cb4c:	4501                	li	a0,0
2041cb4e:	4705                	li	a4,1
2041cb50:	bded                	j	2041ca4a <__divdf3+0x8e>
2041cb52:	4f81                	li	t6,0
2041cb54:	7ff00513          	li	a0,2047
2041cb58:	4709                	li	a4,2
2041cb5a:	bdc5                	j	2041ca4a <__divdf3+0x8e>
2041cb5c:	0157e663          	bltu	a5,s5,2041cb68 <__divdf3+0x1ac>
2041cb60:	2afa9663          	bne	s5,a5,2041ce0c <__divdf3+0x450>
2041cb64:	2bf46463          	bltu	s0,t6,2041ce0c <__divdf3+0x450>
2041cb68:	01fa9593          	slli	a1,s5,0x1f
2041cb6c:	00145693          	srli	a3,s0,0x1
2041cb70:	01f41713          	slli	a4,s0,0x1f
2041cb74:	001ada93          	srli	s5,s5,0x1
2041cb78:	00d5e433          	or	s0,a1,a3
2041cb7c:	07a2                	slli	a5,a5,0x8
2041cb7e:	018fd813          	srli	a6,t6,0x18
2041cb82:	00f86833          	or	a6,a6,a5
2041cb86:	01085e93          	srli	t4,a6,0x10
2041cb8a:	03dad5b3          	divu	a1,s5,t4
2041cb8e:	01081e13          	slli	t3,a6,0x10
2041cb92:	010e5e13          	srli	t3,t3,0x10
2041cb96:	01045693          	srli	a3,s0,0x10
2041cb9a:	008f9893          	slli	a7,t6,0x8
2041cb9e:	03daf4b3          	remu	s1,s5,t4
2041cba2:	8fae                	mv	t6,a1
2041cba4:	02be07b3          	mul	a5,t3,a1
2041cba8:	04c2                	slli	s1,s1,0x10
2041cbaa:	8ec5                	or	a3,a3,s1
2041cbac:	00f6fc63          	bleu	a5,a3,2041cbc4 <__divdf3+0x208>
2041cbb0:	96c2                	add	a3,a3,a6
2041cbb2:	fff58f93          	addi	t6,a1,-1
2041cbb6:	0106e763          	bltu	a3,a6,2041cbc4 <__divdf3+0x208>
2041cbba:	00f6f563          	bleu	a5,a3,2041cbc4 <__divdf3+0x208>
2041cbbe:	ffe58f93          	addi	t6,a1,-2
2041cbc2:	96c2                	add	a3,a3,a6
2041cbc4:	8e9d                	sub	a3,a3,a5
2041cbc6:	03d6d333          	divu	t1,a3,t4
2041cbca:	0442                	slli	s0,s0,0x10
2041cbcc:	8041                	srli	s0,s0,0x10
2041cbce:	03d6f6b3          	remu	a3,a3,t4
2041cbd2:	879a                	mv	a5,t1
2041cbd4:	026e05b3          	mul	a1,t3,t1
2041cbd8:	06c2                	slli	a3,a3,0x10
2041cbda:	8ec1                	or	a3,a3,s0
2041cbdc:	00b6fc63          	bleu	a1,a3,2041cbf4 <__divdf3+0x238>
2041cbe0:	96c2                	add	a3,a3,a6
2041cbe2:	fff30793          	addi	a5,t1,-1
2041cbe6:	0106e763          	bltu	a3,a6,2041cbf4 <__divdf3+0x238>
2041cbea:	00b6f563          	bleu	a1,a3,2041cbf4 <__divdf3+0x238>
2041cbee:	ffe30793          	addi	a5,t1,-2
2041cbf2:	96c2                	add	a3,a3,a6
2041cbf4:	40b68433          	sub	s0,a3,a1
2041cbf8:	0fc2                	slli	t6,t6,0x10
2041cbfa:	65c1                	lui	a1,0x10
2041cbfc:	00ffefb3          	or	t6,t6,a5
2041cc00:	fff58313          	addi	t1,a1,-1 # ffff <__stack_size+0xf7ff>
2041cc04:	010fd693          	srli	a3,t6,0x10
2041cc08:	006ff7b3          	and	a5,t6,t1
2041cc0c:	0108df13          	srli	t5,a7,0x10
2041cc10:	0068f333          	and	t1,a7,t1
2041cc14:	026783b3          	mul	t2,a5,t1
2041cc18:	026684b3          	mul	s1,a3,t1
2041cc1c:	02ff07b3          	mul	a5,t5,a5
2041cc20:	03e682b3          	mul	t0,a3,t5
2041cc24:	009786b3          	add	a3,a5,s1
2041cc28:	0103d793          	srli	a5,t2,0x10
2041cc2c:	97b6                	add	a5,a5,a3
2041cc2e:	0097f363          	bleu	s1,a5,2041cc34 <__divdf3+0x278>
2041cc32:	92ae                	add	t0,t0,a1
2041cc34:	0107d693          	srli	a3,a5,0x10
2041cc38:	9696                	add	a3,a3,t0
2041cc3a:	62c1                	lui	t0,0x10
2041cc3c:	12fd                	addi	t0,t0,-1
2041cc3e:	0057f5b3          	and	a1,a5,t0
2041cc42:	05c2                	slli	a1,a1,0x10
2041cc44:	0053f3b3          	and	t2,t2,t0
2041cc48:	959e                	add	a1,a1,t2
2041cc4a:	00d46763          	bltu	s0,a3,2041cc58 <__divdf3+0x29c>
2041cc4e:	87fe                	mv	a5,t6
2041cc50:	02d41e63          	bne	s0,a3,2041cc8c <__divdf3+0x2d0>
2041cc54:	02b77c63          	bleu	a1,a4,2041cc8c <__divdf3+0x2d0>
2041cc58:	9746                	add	a4,a4,a7
2041cc5a:	011732b3          	sltu	t0,a4,a7
2041cc5e:	92c2                	add	t0,t0,a6
2041cc60:	9416                	add	s0,s0,t0
2041cc62:	ffff8793          	addi	a5,t6,-1
2041cc66:	00886663          	bltu	a6,s0,2041cc72 <__divdf3+0x2b6>
2041cc6a:	02881163          	bne	a6,s0,2041cc8c <__divdf3+0x2d0>
2041cc6e:	01176f63          	bltu	a4,a7,2041cc8c <__divdf3+0x2d0>
2041cc72:	00d46663          	bltu	s0,a3,2041cc7e <__divdf3+0x2c2>
2041cc76:	00869b63          	bne	a3,s0,2041cc8c <__divdf3+0x2d0>
2041cc7a:	00b77963          	bleu	a1,a4,2041cc8c <__divdf3+0x2d0>
2041cc7e:	9746                	add	a4,a4,a7
2041cc80:	ffef8793          	addi	a5,t6,-2
2041cc84:	01173fb3          	sltu	t6,a4,a7
2041cc88:	9fc2                	add	t6,t6,a6
2041cc8a:	947e                	add	s0,s0,t6
2041cc8c:	40b705b3          	sub	a1,a4,a1
2041cc90:	8c15                	sub	s0,s0,a3
2041cc92:	00b73733          	sltu	a4,a4,a1
2041cc96:	8c19                	sub	s0,s0,a4
2041cc98:	5ffd                	li	t6,-1
2041cc9a:	0e880663          	beq	a6,s0,2041cd86 <__divdf3+0x3ca>
2041cc9e:	03d452b3          	divu	t0,s0,t4
2041cca2:	0105d693          	srli	a3,a1,0x10
2041cca6:	03d47433          	remu	s0,s0,t4
2041ccaa:	8716                	mv	a4,t0
2041ccac:	025e0fb3          	mul	t6,t3,t0
2041ccb0:	0442                	slli	s0,s0,0x10
2041ccb2:	8c55                	or	s0,s0,a3
2041ccb4:	01f47c63          	bleu	t6,s0,2041cccc <__divdf3+0x310>
2041ccb8:	9442                	add	s0,s0,a6
2041ccba:	fff28713          	addi	a4,t0,-1 # ffff <__stack_size+0xf7ff>
2041ccbe:	01046763          	bltu	s0,a6,2041cccc <__divdf3+0x310>
2041ccc2:	01f47563          	bleu	t6,s0,2041cccc <__divdf3+0x310>
2041ccc6:	ffe28713          	addi	a4,t0,-2
2041ccca:	9442                	add	s0,s0,a6
2041cccc:	41f40433          	sub	s0,s0,t6
2041ccd0:	03d456b3          	divu	a3,s0,t4
2041ccd4:	05c2                	slli	a1,a1,0x10
2041ccd6:	81c1                	srli	a1,a1,0x10
2041ccd8:	03d47433          	remu	s0,s0,t4
2041ccdc:	02de0e33          	mul	t3,t3,a3
2041cce0:	0442                	slli	s0,s0,0x10
2041cce2:	8c4d                	or	s0,s0,a1
2041cce4:	85b6                	mv	a1,a3
2041cce6:	01c47c63          	bleu	t3,s0,2041ccfe <__divdf3+0x342>
2041ccea:	9442                	add	s0,s0,a6
2041ccec:	fff68593          	addi	a1,a3,-1 # 7fffff <__stack_size+0x7ff7ff>
2041ccf0:	01046763          	bltu	s0,a6,2041ccfe <__divdf3+0x342>
2041ccf4:	01c47563          	bleu	t3,s0,2041ccfe <__divdf3+0x342>
2041ccf8:	ffe68593          	addi	a1,a3,-2
2041ccfc:	9442                	add	s0,s0,a6
2041ccfe:	0742                	slli	a4,a4,0x10
2041cd00:	8dd9                	or	a1,a1,a4
2041cd02:	01059713          	slli	a4,a1,0x10
2041cd06:	8341                	srli	a4,a4,0x10
2041cd08:	41c40433          	sub	s0,s0,t3
2041cd0c:	0105de13          	srli	t3,a1,0x10
2041cd10:	02670eb3          	mul	t4,a4,t1
2041cd14:	026e0333          	mul	t1,t3,t1
2041cd18:	03cf0e33          	mul	t3,t5,t3
2041cd1c:	02ef0f33          	mul	t5,t5,a4
2041cd20:	010ed713          	srli	a4,t4,0x10
2041cd24:	9f1a                	add	t5,t5,t1
2041cd26:	977a                	add	a4,a4,t5
2041cd28:	00677463          	bleu	t1,a4,2041cd30 <__divdf3+0x374>
2041cd2c:	66c1                	lui	a3,0x10
2041cd2e:	9e36                	add	t3,t3,a3
2041cd30:	01075313          	srli	t1,a4,0x10
2041cd34:	9372                	add	t1,t1,t3
2041cd36:	6e41                	lui	t3,0x10
2041cd38:	1e7d                	addi	t3,t3,-1
2041cd3a:	01c776b3          	and	a3,a4,t3
2041cd3e:	06c2                	slli	a3,a3,0x10
2041cd40:	01cefeb3          	and	t4,t4,t3
2041cd44:	96f6                	add	a3,a3,t4
2041cd46:	00646663          	bltu	s0,t1,2041cd52 <__divdf3+0x396>
2041cd4a:	8fae                	mv	t6,a1
2041cd4c:	02641b63          	bne	s0,t1,2041cd82 <__divdf3+0x3c6>
2041cd50:	ca9d                	beqz	a3,2041cd86 <__divdf3+0x3ca>
2041cd52:	9442                	add	s0,s0,a6
2041cd54:	fff58f93          	addi	t6,a1,-1
2041cd58:	03046163          	bltu	s0,a6,2041cd7a <__divdf3+0x3be>
2041cd5c:	00646663          	bltu	s0,t1,2041cd68 <__divdf3+0x3ac>
2041cd60:	02641163          	bne	s0,t1,2041cd82 <__divdf3+0x3c6>
2041cd64:	00d8fd63          	bleu	a3,a7,2041cd7e <__divdf3+0x3c2>
2041cd68:	00189713          	slli	a4,a7,0x1
2041cd6c:	011738b3          	sltu	a7,a4,a7
2041cd70:	9846                	add	a6,a6,a7
2041cd72:	ffe58f93          	addi	t6,a1,-2
2041cd76:	9442                	add	s0,s0,a6
2041cd78:	88ba                	mv	a7,a4
2041cd7a:	00641463          	bne	s0,t1,2041cd82 <__divdf3+0x3c6>
2041cd7e:	01168463          	beq	a3,a7,2041cd86 <__divdf3+0x3ca>
2041cd82:	001fef93          	ori	t6,t6,1
2041cd86:	3ff50693          	addi	a3,a0,1023
2041cd8a:	0ad05c63          	blez	a3,2041ce42 <__divdf3+0x486>
2041cd8e:	007ff713          	andi	a4,t6,7
2041cd92:	cf01                	beqz	a4,2041cdaa <__divdf3+0x3ee>
2041cd94:	00fff713          	andi	a4,t6,15
2041cd98:	4591                	li	a1,4
2041cd9a:	00b70863          	beq	a4,a1,2041cdaa <__divdf3+0x3ee>
2041cd9e:	004f8593          	addi	a1,t6,4
2041cda2:	01f5bfb3          	sltu	t6,a1,t6
2041cda6:	97fe                	add	a5,a5,t6
2041cda8:	8fae                	mv	t6,a1
2041cdaa:	00779713          	slli	a4,a5,0x7
2041cdae:	00075863          	bgez	a4,2041cdbe <__divdf3+0x402>
2041cdb2:	ff000737          	lui	a4,0xff000
2041cdb6:	177d                	addi	a4,a4,-1
2041cdb8:	8ff9                	and	a5,a5,a4
2041cdba:	40050693          	addi	a3,a0,1024
2041cdbe:	7fe00713          	li	a4,2046
2041cdc2:	10d74b63          	blt	a4,a3,2041ced8 <__divdf3+0x51c>
2041cdc6:	01d79713          	slli	a4,a5,0x1d
2041cdca:	003fdf93          	srli	t6,t6,0x3
2041cdce:	01f76733          	or	a4,a4,t6
2041cdd2:	838d                	srli	a5,a5,0x3
2041cdd4:	001005b7          	lui	a1,0x100
2041cdd8:	15fd                	addi	a1,a1,-1
2041cdda:	8fed                	and	a5,a5,a1
2041cddc:	801005b7          	lui	a1,0x80100
2041cde0:	15fd                	addi	a1,a1,-1
2041cde2:	7ff6f693          	andi	a3,a3,2047
2041cde6:	06d2                	slli	a3,a3,0x14
2041cde8:	8fed                	and	a5,a5,a1
2041cdea:	50b2                	lw	ra,44(sp)
2041cdec:	5422                	lw	s0,40(sp)
2041cdee:	067e                	slli	a2,a2,0x1f
2041cdf0:	8fd5                	or	a5,a5,a3
2041cdf2:	00c7e6b3          	or	a3,a5,a2
2041cdf6:	5492                	lw	s1,36(sp)
2041cdf8:	5902                	lw	s2,32(sp)
2041cdfa:	49f2                	lw	s3,28(sp)
2041cdfc:	4a62                	lw	s4,24(sp)
2041cdfe:	4ad2                	lw	s5,20(sp)
2041ce00:	4b42                	lw	s6,16(sp)
2041ce02:	4bb2                	lw	s7,12(sp)
2041ce04:	853a                	mv	a0,a4
2041ce06:	85b6                	mv	a1,a3
2041ce08:	6145                	addi	sp,sp,48
2041ce0a:	8082                	ret
2041ce0c:	157d                	addi	a0,a0,-1
2041ce0e:	4701                	li	a4,0
2041ce10:	b3b5                	j	2041cb7c <__divdf3+0x1c0>
2041ce12:	864a                	mv	a2,s2
2041ce14:	87d6                	mv	a5,s5
2041ce16:	8fa2                	mv	t6,s0
2041ce18:	875a                	mv	a4,s6
2041ce1a:	4689                	li	a3,2
2041ce1c:	0ad70e63          	beq	a4,a3,2041ced8 <__divdf3+0x51c>
2041ce20:	468d                	li	a3,3
2041ce22:	0ad70463          	beq	a4,a3,2041ceca <__divdf3+0x50e>
2041ce26:	4685                	li	a3,1
2041ce28:	f4d71fe3          	bne	a4,a3,2041cd86 <__divdf3+0x3ca>
2041ce2c:	4781                	li	a5,0
2041ce2e:	4701                	li	a4,0
2041ce30:	a0bd                	j	2041ce9e <__divdf3+0x4e2>
2041ce32:	864e                	mv	a2,s3
2041ce34:	b7dd                	j	2041ce1a <__divdf3+0x45e>
2041ce36:	000807b7          	lui	a5,0x80
2041ce3a:	4f81                	li	t6,0
2041ce3c:	4601                	li	a2,0
2041ce3e:	470d                	li	a4,3
2041ce40:	bfe9                	j	2041ce1a <__divdf3+0x45e>
2041ce42:	4585                	li	a1,1
2041ce44:	8d95                	sub	a1,a1,a3
2041ce46:	03800713          	li	a4,56
2041ce4a:	feb741e3          	blt	a4,a1,2041ce2c <__divdf3+0x470>
2041ce4e:	477d                	li	a4,31
2041ce50:	04b74963          	blt	a4,a1,2041cea2 <__divdf3+0x4e6>
2041ce54:	41e50513          	addi	a0,a0,1054
2041ce58:	00a79733          	sll	a4,a5,a0
2041ce5c:	00bfd6b3          	srl	a3,t6,a1
2041ce60:	00af9533          	sll	a0,t6,a0
2041ce64:	8f55                	or	a4,a4,a3
2041ce66:	00a03533          	snez	a0,a0
2041ce6a:	8f49                	or	a4,a4,a0
2041ce6c:	00b7d7b3          	srl	a5,a5,a1
2041ce70:	00777693          	andi	a3,a4,7
2041ce74:	ce81                	beqz	a3,2041ce8c <__divdf3+0x4d0>
2041ce76:	00f77693          	andi	a3,a4,15
2041ce7a:	4591                	li	a1,4
2041ce7c:	00b68863          	beq	a3,a1,2041ce8c <__divdf3+0x4d0>
2041ce80:	00470693          	addi	a3,a4,4 # ff000004 <pulp__FC+0xff000005>
2041ce84:	00e6b733          	sltu	a4,a3,a4
2041ce88:	97ba                	add	a5,a5,a4
2041ce8a:	8736                	mv	a4,a3
2041ce8c:	00879693          	slli	a3,a5,0x8
2041ce90:	0406c963          	bltz	a3,2041cee2 <__divdf3+0x526>
2041ce94:	01d79693          	slli	a3,a5,0x1d
2041ce98:	830d                	srli	a4,a4,0x3
2041ce9a:	8f55                	or	a4,a4,a3
2041ce9c:	838d                	srli	a5,a5,0x3
2041ce9e:	4681                	li	a3,0
2041cea0:	bf15                	j	2041cdd4 <__divdf3+0x418>
2041cea2:	5705                	li	a4,-31
2041cea4:	8f15                	sub	a4,a4,a3
2041cea6:	02000813          	li	a6,32
2041ceaa:	00e7d733          	srl	a4,a5,a4
2041ceae:	4681                	li	a3,0
2041ceb0:	01058663          	beq	a1,a6,2041cebc <__divdf3+0x500>
2041ceb4:	43e50513          	addi	a0,a0,1086
2041ceb8:	00a796b3          	sll	a3,a5,a0
2041cebc:	01f6e533          	or	a0,a3,t6
2041cec0:	00a03533          	snez	a0,a0
2041cec4:	8f49                	or	a4,a4,a0
2041cec6:	4781                	li	a5,0
2041cec8:	b765                	j	2041ce70 <__divdf3+0x4b4>
2041ceca:	000807b7          	lui	a5,0x80
2041cece:	4701                	li	a4,0
2041ced0:	7ff00693          	li	a3,2047
2041ced4:	4601                	li	a2,0
2041ced6:	bdfd                	j	2041cdd4 <__divdf3+0x418>
2041ced8:	4781                	li	a5,0
2041ceda:	4701                	li	a4,0
2041cedc:	7ff00693          	li	a3,2047
2041cee0:	bdd5                	j	2041cdd4 <__divdf3+0x418>
2041cee2:	4781                	li	a5,0
2041cee4:	4701                	li	a4,0
2041cee6:	4685                	li	a3,1
2041cee8:	b5f5                	j	2041cdd4 <__divdf3+0x418>

2041ceea <__ledf2>:
2041ceea:	0145d713          	srli	a4,a1,0x14
2041ceee:	001007b7          	lui	a5,0x100
2041cef2:	17fd                	addi	a5,a5,-1
2041cef4:	0146d813          	srli	a6,a3,0x14
2041cef8:	88aa                	mv	a7,a0
2041cefa:	8eaa                	mv	t4,a0
2041cefc:	7ff77713          	andi	a4,a4,2047
2041cf00:	7ff00513          	li	a0,2047
2041cf04:	00b7f333          	and	t1,a5,a1
2041cf08:	8f32                	mv	t5,a2
2041cf0a:	8ff5                	and	a5,a5,a3
2041cf0c:	81fd                	srli	a1,a1,0x1f
2041cf0e:	7ff87813          	andi	a6,a6,2047
2041cf12:	82fd                	srli	a3,a3,0x1f
2041cf14:	00a71863          	bne	a4,a0,2041cf24 <__ledf2+0x3a>
2041cf18:	01136e33          	or	t3,t1,a7
2041cf1c:	4509                	li	a0,2
2041cf1e:	060e0363          	beqz	t3,2041cf84 <__ledf2+0x9a>
2041cf22:	8082                	ret
2041cf24:	00a81663          	bne	a6,a0,2041cf30 <__ledf2+0x46>
2041cf28:	8e5d                	or	a2,a2,a5
2041cf2a:	4509                	li	a0,2
2041cf2c:	c235                	beqz	a2,2041cf90 <__ledf2+0xa6>
2041cf2e:	8082                	ret
2041cf30:	ef21                	bnez	a4,2041cf88 <__ledf2+0x9e>
2041cf32:	01136533          	or	a0,t1,a7
2041cf36:	00153513          	seqz	a0,a0
2041cf3a:	00081463          	bnez	a6,2041cf42 <__ledf2+0x58>
2041cf3e:	8e5d                	or	a2,a2,a5
2041cf40:	c221                	beqz	a2,2041cf80 <__ledf2+0x96>
2041cf42:	e511                	bnez	a0,2041cf4e <__ledf2+0x64>
2041cf44:	00d58863          	beq	a1,a3,2041cf54 <__ledf2+0x6a>
2041cf48:	4505                	li	a0,1
2041cf4a:	e199                	bnez	a1,2041cf50 <__ledf2+0x66>
2041cf4c:	8082                	ret
2041cf4e:	fefd                	bnez	a3,2041cf4c <__ledf2+0x62>
2041cf50:	557d                	li	a0,-1
2041cf52:	8082                	ret
2041cf54:	fee84ae3          	blt	a6,a4,2041cf48 <__ledf2+0x5e>
2041cf58:	01075663          	ble	a6,a4,2041cf64 <__ledf2+0x7a>
2041cf5c:	557d                	li	a0,-1
2041cf5e:	d5fd                	beqz	a1,2041cf4c <__ledf2+0x62>
2041cf60:	4505                	li	a0,1
2041cf62:	8082                	ret
2041cf64:	fe67e2e3          	bltu	a5,t1,2041cf48 <__ledf2+0x5e>
2041cf68:	00f31863          	bne	t1,a5,2041cf78 <__ledf2+0x8e>
2041cf6c:	fddf6ee3          	bltu	t5,t4,2041cf48 <__ledf2+0x5e>
2041cf70:	4501                	li	a0,0
2041cf72:	ffeee5e3          	bltu	t4,t5,2041cf5c <__ledf2+0x72>
2041cf76:	bfd9                	j	2041cf4c <__ledf2+0x62>
2041cf78:	fef362e3          	bltu	t1,a5,2041cf5c <__ledf2+0x72>
2041cf7c:	4501                	li	a0,0
2041cf7e:	8082                	ret
2041cf80:	fd75                	bnez	a0,2041cf7c <__ledf2+0x92>
2041cf82:	b7d9                	j	2041cf48 <__ledf2+0x5e>
2041cf84:	fae802e3          	beq	a6,a4,2041cf28 <__ledf2+0x3e>
2041cf88:	4501                	li	a0,0
2041cf8a:	fa080ae3          	beqz	a6,2041cf3e <__ledf2+0x54>
2041cf8e:	bf5d                	j	2041cf44 <__ledf2+0x5a>
2041cf90:	fb55                	bnez	a4,2041cf44 <__ledf2+0x5a>
2041cf92:	01136533          	or	a0,t1,a7
2041cf96:	00153513          	seqz	a0,a0
2041cf9a:	b765                	j	2041cf42 <__ledf2+0x58>

2041cf9c <__muldf3>:
2041cf9c:	7179                	addi	sp,sp,-48
2041cf9e:	d04a                	sw	s2,32(sp)
2041cfa0:	ca56                	sw	s5,20(sp)
2041cfa2:	00100937          	lui	s2,0x100
2041cfa6:	0145da93          	srli	s5,a1,0x14
2041cfaa:	ce4e                	sw	s3,28(sp)
2041cfac:	cc52                	sw	s4,24(sp)
2041cfae:	c85a                	sw	s6,16(sp)
2041cfb0:	c65e                	sw	s7,12(sp)
2041cfb2:	197d                	addi	s2,s2,-1
2041cfb4:	d606                	sw	ra,44(sp)
2041cfb6:	d422                	sw	s0,40(sp)
2041cfb8:	d226                	sw	s1,36(sp)
2041cfba:	7ffafa93          	andi	s5,s5,2047
2041cfbe:	8b2a                	mv	s6,a0
2041cfc0:	8bb2                	mv	s7,a2
2041cfc2:	8a36                	mv	s4,a3
2041cfc4:	00b97933          	and	s2,s2,a1
2041cfc8:	01f5d993          	srli	s3,a1,0x1f
2041cfcc:	080a8763          	beqz	s5,2041d05a <__muldf3+0xbe>
2041cfd0:	7ff00793          	li	a5,2047
2041cfd4:	0cfa8c63          	beq	s5,a5,2041d0ac <__muldf3+0x110>
2041cfd8:	008004b7          	lui	s1,0x800
2041cfdc:	090e                	slli	s2,s2,0x3
2041cfde:	00996933          	or	s2,s2,s1
2041cfe2:	01d55493          	srli	s1,a0,0x1d
2041cfe6:	0124e4b3          	or	s1,s1,s2
2041cfea:	00351413          	slli	s0,a0,0x3
2041cfee:	c01a8a93          	addi	s5,s5,-1023
2041cff2:	4b01                	li	s6,0
2041cff4:	014a5513          	srli	a0,s4,0x14
2041cff8:	00100937          	lui	s2,0x100
2041cffc:	197d                	addi	s2,s2,-1
2041cffe:	7ff57513          	andi	a0,a0,2047
2041d002:	01497933          	and	s2,s2,s4
2041d006:	875e                	mv	a4,s7
2041d008:	01fa5a13          	srli	s4,s4,0x1f
2041d00c:	c171                	beqz	a0,2041d0d0 <__muldf3+0x134>
2041d00e:	7ff00793          	li	a5,2047
2041d012:	10f50963          	beq	a0,a5,2041d124 <__muldf3+0x188>
2041d016:	008007b7          	lui	a5,0x800
2041d01a:	090e                	slli	s2,s2,0x3
2041d01c:	00f96933          	or	s2,s2,a5
2041d020:	01dbd793          	srli	a5,s7,0x1d
2041d024:	0127e7b3          	or	a5,a5,s2
2041d028:	003b9713          	slli	a4,s7,0x3
2041d02c:	c0150513          	addi	a0,a0,-1023
2041d030:	4681                	li	a3,0
2041d032:	002b1613          	slli	a2,s6,0x2
2041d036:	8e55                	or	a2,a2,a3
2041d038:	9556                	add	a0,a0,s5
2041d03a:	167d                	addi	a2,a2,-1
2041d03c:	45b9                	li	a1,14
2041d03e:	0149c833          	xor	a6,s3,s4
2041d042:	00150893          	addi	a7,a0,1
2041d046:	10c5e063          	bltu	a1,a2,2041d146 <__muldf3+0x1aa>
2041d04a:	204225b7          	lui	a1,0x20422
2041d04e:	060a                	slli	a2,a2,0x2
2041d050:	0f858593          	addi	a1,a1,248 # 204220f8 <zeroes.4346+0x4c>
2041d054:	962e                	add	a2,a2,a1
2041d056:	4210                	lw	a2,0(a2)
2041d058:	8602                	jr	a2
2041d05a:	00a964b3          	or	s1,s2,a0
2041d05e:	c0a5                	beqz	s1,2041d0be <__muldf3+0x122>
2041d060:	02090b63          	beqz	s2,2041d096 <__muldf3+0xfa>
2041d064:	854a                	mv	a0,s2
2041d066:	7f8020ef          	jal	ra,2041f85e <__clzsi2>
2041d06a:	ff550793          	addi	a5,a0,-11
2041d06e:	4771                	li	a4,28
2041d070:	02f74863          	blt	a4,a5,2041d0a0 <__muldf3+0x104>
2041d074:	44f5                	li	s1,29
2041d076:	ff850413          	addi	s0,a0,-8
2041d07a:	8c9d                	sub	s1,s1,a5
2041d07c:	00891933          	sll	s2,s2,s0
2041d080:	009b54b3          	srl	s1,s6,s1
2041d084:	0124e4b3          	or	s1,s1,s2
2041d088:	008b1433          	sll	s0,s6,s0
2041d08c:	c0d00a93          	li	s5,-1011
2041d090:	40aa8ab3          	sub	s5,s5,a0
2041d094:	bfb9                	j	2041cff2 <__muldf3+0x56>
2041d096:	7c8020ef          	jal	ra,2041f85e <__clzsi2>
2041d09a:	02050513          	addi	a0,a0,32
2041d09e:	b7f1                	j	2041d06a <__muldf3+0xce>
2041d0a0:	fd850493          	addi	s1,a0,-40
2041d0a4:	009b14b3          	sll	s1,s6,s1
2041d0a8:	4401                	li	s0,0
2041d0aa:	b7cd                	j	2041d08c <__muldf3+0xf0>
2041d0ac:	00a964b3          	or	s1,s2,a0
2041d0b0:	c899                	beqz	s1,2041d0c6 <__muldf3+0x12a>
2041d0b2:	842a                	mv	s0,a0
2041d0b4:	84ca                	mv	s1,s2
2041d0b6:	7ff00a93          	li	s5,2047
2041d0ba:	4b0d                	li	s6,3
2041d0bc:	bf25                	j	2041cff4 <__muldf3+0x58>
2041d0be:	4401                	li	s0,0
2041d0c0:	4a81                	li	s5,0
2041d0c2:	4b05                	li	s6,1
2041d0c4:	bf05                	j	2041cff4 <__muldf3+0x58>
2041d0c6:	4401                	li	s0,0
2041d0c8:	7ff00a93          	li	s5,2047
2041d0cc:	4b09                	li	s6,2
2041d0ce:	b71d                	j	2041cff4 <__muldf3+0x58>
2041d0d0:	017967b3          	or	a5,s2,s7
2041d0d4:	c3a5                	beqz	a5,2041d134 <__muldf3+0x198>
2041d0d6:	02090b63          	beqz	s2,2041d10c <__muldf3+0x170>
2041d0da:	854a                	mv	a0,s2
2041d0dc:	782020ef          	jal	ra,2041f85e <__clzsi2>
2041d0e0:	ff550693          	addi	a3,a0,-11
2041d0e4:	47f1                	li	a5,28
2041d0e6:	02d7c963          	blt	a5,a3,2041d118 <__muldf3+0x17c>
2041d0ea:	47f5                	li	a5,29
2041d0ec:	ff850713          	addi	a4,a0,-8
2041d0f0:	8f95                	sub	a5,a5,a3
2041d0f2:	00e91933          	sll	s2,s2,a4
2041d0f6:	00fbd7b3          	srl	a5,s7,a5
2041d0fa:	0127e7b3          	or	a5,a5,s2
2041d0fe:	00eb9733          	sll	a4,s7,a4
2041d102:	c0d00693          	li	a3,-1011
2041d106:	40a68533          	sub	a0,a3,a0
2041d10a:	b71d                	j	2041d030 <__muldf3+0x94>
2041d10c:	855e                	mv	a0,s7
2041d10e:	750020ef          	jal	ra,2041f85e <__clzsi2>
2041d112:	02050513          	addi	a0,a0,32
2041d116:	b7e9                	j	2041d0e0 <__muldf3+0x144>
2041d118:	fd850793          	addi	a5,a0,-40
2041d11c:	00fb97b3          	sll	a5,s7,a5
2041d120:	4701                	li	a4,0
2041d122:	b7c5                	j	2041d102 <__muldf3+0x166>
2041d124:	017967b3          	or	a5,s2,s7
2041d128:	cb91                	beqz	a5,2041d13c <__muldf3+0x1a0>
2041d12a:	87ca                	mv	a5,s2
2041d12c:	7ff00513          	li	a0,2047
2041d130:	468d                	li	a3,3
2041d132:	b701                	j	2041d032 <__muldf3+0x96>
2041d134:	4701                	li	a4,0
2041d136:	4501                	li	a0,0
2041d138:	4685                	li	a3,1
2041d13a:	bde5                	j	2041d032 <__muldf3+0x96>
2041d13c:	4701                	li	a4,0
2041d13e:	7ff00513          	li	a0,2047
2041d142:	4689                	li	a3,2
2041d144:	b5fd                	j	2041d032 <__muldf3+0x96>
2041d146:	66c1                	lui	a3,0x10
2041d148:	fff68313          	addi	t1,a3,-1 # ffff <__stack_size+0xf7ff>
2041d14c:	01045613          	srli	a2,s0,0x10
2041d150:	01075293          	srli	t0,a4,0x10
2041d154:	00647433          	and	s0,s0,t1
2041d158:	006773b3          	and	t2,a4,t1
2041d15c:	028285b3          	mul	a1,t0,s0
2041d160:	02740733          	mul	a4,s0,t2
2041d164:	02760e33          	mul	t3,a2,t2
2041d168:	01c58eb3          	add	t4,a1,t3
2041d16c:	01075593          	srli	a1,a4,0x10
2041d170:	95f6                	add	a1,a1,t4
2041d172:	02560f33          	mul	t5,a2,t0
2041d176:	01c5f363          	bleu	t3,a1,2041d17c <__muldf3+0x1e0>
2041d17a:	9f36                	add	t5,t5,a3
2041d17c:	0065feb3          	and	t4,a1,t1
2041d180:	00677733          	and	a4,a4,t1
2041d184:	0ec2                	slli	t4,t4,0x10
2041d186:	0107d913          	srli	s2,a5,0x10
2041d18a:	9eba                	add	t4,t4,a4
2041d18c:	0067f733          	and	a4,a5,t1
2041d190:	0105de13          	srli	t3,a1,0x10
2041d194:	028707b3          	mul	a5,a4,s0
2041d198:	02e606b3          	mul	a3,a2,a4
2041d19c:	02890433          	mul	s0,s2,s0
2041d1a0:	00d405b3          	add	a1,s0,a3
2041d1a4:	0107d413          	srli	s0,a5,0x10
2041d1a8:	942e                	add	s0,s0,a1
2041d1aa:	03260633          	mul	a2,a2,s2
2041d1ae:	00d47463          	bleu	a3,s0,2041d1b6 <__muldf3+0x21a>
2041d1b2:	66c1                	lui	a3,0x10
2041d1b4:	9636                	add	a2,a2,a3
2041d1b6:	01045693          	srli	a3,s0,0x10
2041d1ba:	6341                	lui	t1,0x10
2041d1bc:	9636                	add	a2,a2,a3
2041d1be:	fff30693          	addi	a3,t1,-1 # ffff <__stack_size+0xf7ff>
2041d1c2:	8c75                	and	s0,s0,a3
2041d1c4:	8ff5                	and	a5,a5,a3
2041d1c6:	0442                	slli	s0,s0,0x10
2041d1c8:	0104df93          	srli	t6,s1,0x10
2041d1cc:	943e                	add	s0,s0,a5
2041d1ce:	8cf5                	and	s1,s1,a3
2041d1d0:	027486b3          	mul	a3,s1,t2
2041d1d4:	008e09b3          	add	s3,t3,s0
2041d1d8:	027f83b3          	mul	t2,t6,t2
2041d1dc:	02928e33          	mul	t3,t0,s1
2041d1e0:	03f287b3          	mul	a5,t0,t6
2041d1e4:	007e02b3          	add	t0,t3,t2
2041d1e8:	0106de13          	srli	t3,a3,0x10
2041d1ec:	9e16                	add	t3,t3,t0
2041d1ee:	007e7363          	bleu	t2,t3,2041d1f4 <__muldf3+0x258>
2041d1f2:	979a                	add	a5,a5,t1
2041d1f4:	010e5293          	srli	t0,t3,0x10
2041d1f8:	65c1                	lui	a1,0x10
2041d1fa:	92be                	add	t0,t0,a5
2041d1fc:	fff58793          	addi	a5,a1,-1 # ffff <__stack_size+0xf7ff>
2041d200:	02e483b3          	mul	t2,s1,a4
2041d204:	00fe7333          	and	t1,t3,a5
2041d208:	8efd                	and	a3,a3,a5
2041d20a:	0342                	slli	t1,t1,0x10
2041d20c:	9336                	add	t1,t1,a3
2041d20e:	02ef8733          	mul	a4,t6,a4
2041d212:	0103d693          	srli	a3,t2,0x10
2041d216:	029904b3          	mul	s1,s2,s1
2041d21a:	94ba                	add	s1,s1,a4
2041d21c:	94b6                	add	s1,s1,a3
2041d21e:	03f90fb3          	mul	t6,s2,t6
2041d222:	00e4f363          	bleu	a4,s1,2041d228 <__muldf3+0x28c>
2041d226:	9fae                	add	t6,t6,a1
2041d228:	66c1                	lui	a3,0x10
2041d22a:	16fd                	addi	a3,a3,-1
2041d22c:	00d4f5b3          	and	a1,s1,a3
2041d230:	05c2                	slli	a1,a1,0x10
2041d232:	00d3f6b3          	and	a3,t2,a3
2041d236:	013f0e33          	add	t3,t5,s3
2041d23a:	95b6                	add	a1,a1,a3
2041d23c:	00c586b3          	add	a3,a1,a2
2041d240:	008e3433          	sltu	s0,t3,s0
2041d244:	008687b3          	add	a5,a3,s0
2041d248:	9e1a                	add	t3,t3,t1
2041d24a:	006e3333          	sltu	t1,t3,t1
2041d24e:	005785b3          	add	a1,a5,t0
2041d252:	00c6b6b3          	sltu	a3,a3,a2
2041d256:	00658f33          	add	t5,a1,t1
2041d25a:	8636                	mv	a2,a3
2041d25c:	0087b6b3          	sltu	a3,a5,s0
2041d260:	0055b7b3          	sltu	a5,a1,t0
2041d264:	85be                	mv	a1,a5
2041d266:	006f37b3          	sltu	a5,t5,t1
2041d26a:	8ed1                	or	a3,a3,a2
2041d26c:	0ff6f693          	andi	a3,a3,255
2041d270:	80c1                	srli	s1,s1,0x10
2041d272:	8fcd                	or	a5,a5,a1
2041d274:	96a6                	add	a3,a3,s1
2041d276:	0ff7f793          	andi	a5,a5,255
2041d27a:	97b6                	add	a5,a5,a3
2041d27c:	97fe                	add	a5,a5,t6
2041d27e:	017f5713          	srli	a4,t5,0x17
2041d282:	07a6                	slli	a5,a5,0x9
2041d284:	8fd9                	or	a5,a5,a4
2041d286:	009e1713          	slli	a4,t3,0x9
2041d28a:	01d76733          	or	a4,a4,t4
2041d28e:	00e03733          	snez	a4,a4
2041d292:	017e5e13          	srli	t3,t3,0x17
2041d296:	01c76733          	or	a4,a4,t3
2041d29a:	0f26                	slli	t5,t5,0x9
2041d29c:	00779693          	slli	a3,a5,0x7
2041d2a0:	01e76733          	or	a4,a4,t5
2041d2a4:	0a06de63          	bgez	a3,2041d360 <__muldf3+0x3c4>
2041d2a8:	00175693          	srli	a3,a4,0x1
2041d2ac:	8b05                	andi	a4,a4,1
2041d2ae:	8f55                	or	a4,a4,a3
2041d2b0:	01f79693          	slli	a3,a5,0x1f
2041d2b4:	8f55                	or	a4,a4,a3
2041d2b6:	8385                	srli	a5,a5,0x1
2041d2b8:	3ff88613          	addi	a2,a7,1023
2041d2bc:	0ac05463          	blez	a2,2041d364 <__muldf3+0x3c8>
2041d2c0:	00777693          	andi	a3,a4,7
2041d2c4:	ce81                	beqz	a3,2041d2dc <__muldf3+0x340>
2041d2c6:	00f77693          	andi	a3,a4,15
2041d2ca:	4591                	li	a1,4
2041d2cc:	00b68863          	beq	a3,a1,2041d2dc <__muldf3+0x340>
2041d2d0:	00470693          	addi	a3,a4,4
2041d2d4:	00e6b733          	sltu	a4,a3,a4
2041d2d8:	97ba                	add	a5,a5,a4
2041d2da:	8736                	mv	a4,a3
2041d2dc:	00779693          	slli	a3,a5,0x7
2041d2e0:	0006d863          	bgez	a3,2041d2f0 <__muldf3+0x354>
2041d2e4:	ff0006b7          	lui	a3,0xff000
2041d2e8:	16fd                	addi	a3,a3,-1
2041d2ea:	8ff5                	and	a5,a5,a3
2041d2ec:	40088613          	addi	a2,a7,1024
2041d2f0:	7fe00693          	li	a3,2046
2041d2f4:	10c6c263          	blt	a3,a2,2041d3f8 <__muldf3+0x45c>
2041d2f8:	00375693          	srli	a3,a4,0x3
2041d2fc:	01d79713          	slli	a4,a5,0x1d
2041d300:	8f55                	or	a4,a4,a3
2041d302:	838d                	srli	a5,a5,0x3
2041d304:	001006b7          	lui	a3,0x100
2041d308:	16fd                	addi	a3,a3,-1
2041d30a:	8ff5                	and	a5,a5,a3
2041d30c:	7ff67693          	andi	a3,a2,2047
2041d310:	80100637          	lui	a2,0x80100
2041d314:	167d                	addi	a2,a2,-1
2041d316:	06d2                	slli	a3,a3,0x14
2041d318:	50b2                	lw	ra,44(sp)
2041d31a:	5422                	lw	s0,40(sp)
2041d31c:	8ff1                	and	a5,a5,a2
2041d31e:	087e                	slli	a6,a6,0x1f
2041d320:	8fd5                	or	a5,a5,a3
2041d322:	0107e6b3          	or	a3,a5,a6
2041d326:	5492                	lw	s1,36(sp)
2041d328:	5902                	lw	s2,32(sp)
2041d32a:	49f2                	lw	s3,28(sp)
2041d32c:	4a62                	lw	s4,24(sp)
2041d32e:	4ad2                	lw	s5,20(sp)
2041d330:	4b42                	lw	s6,16(sp)
2041d332:	4bb2                	lw	s7,12(sp)
2041d334:	853a                	mv	a0,a4
2041d336:	85b6                	mv	a1,a3
2041d338:	6145                	addi	sp,sp,48
2041d33a:	8082                	ret
2041d33c:	884e                	mv	a6,s3
2041d33e:	87a6                	mv	a5,s1
2041d340:	8722                	mv	a4,s0
2041d342:	86da                	mv	a3,s6
2041d344:	4609                	li	a2,2
2041d346:	0ac68963          	beq	a3,a2,2041d3f8 <__muldf3+0x45c>
2041d34a:	460d                	li	a2,3
2041d34c:	08c68f63          	beq	a3,a2,2041d3ea <__muldf3+0x44e>
2041d350:	4605                	li	a2,1
2041d352:	f6c693e3          	bne	a3,a2,2041d2b8 <__muldf3+0x31c>
2041d356:	4781                	li	a5,0
2041d358:	4701                	li	a4,0
2041d35a:	a09d                	j	2041d3c0 <__muldf3+0x424>
2041d35c:	8852                	mv	a6,s4
2041d35e:	b7dd                	j	2041d344 <__muldf3+0x3a8>
2041d360:	88aa                	mv	a7,a0
2041d362:	bf99                	j	2041d2b8 <__muldf3+0x31c>
2041d364:	4585                	li	a1,1
2041d366:	8d91                	sub	a1,a1,a2
2041d368:	03800693          	li	a3,56
2041d36c:	feb6c5e3          	blt	a3,a1,2041d356 <__muldf3+0x3ba>
2041d370:	46fd                	li	a3,31
2041d372:	04b6c963          	blt	a3,a1,2041d3c4 <__muldf3+0x428>
2041d376:	41e88893          	addi	a7,a7,1054
2041d37a:	011796b3          	sll	a3,a5,a7
2041d37e:	00b75633          	srl	a2,a4,a1
2041d382:	01171733          	sll	a4,a4,a7
2041d386:	8ed1                	or	a3,a3,a2
2041d388:	00e03733          	snez	a4,a4
2041d38c:	8f55                	or	a4,a4,a3
2041d38e:	00b7d7b3          	srl	a5,a5,a1
2041d392:	00777693          	andi	a3,a4,7
2041d396:	ce81                	beqz	a3,2041d3ae <__muldf3+0x412>
2041d398:	00f77693          	andi	a3,a4,15
2041d39c:	4611                	li	a2,4
2041d39e:	00c68863          	beq	a3,a2,2041d3ae <__muldf3+0x412>
2041d3a2:	00470693          	addi	a3,a4,4
2041d3a6:	00e6b733          	sltu	a4,a3,a4
2041d3aa:	97ba                	add	a5,a5,a4
2041d3ac:	8736                	mv	a4,a3
2041d3ae:	00879693          	slli	a3,a5,0x8
2041d3b2:	0406c863          	bltz	a3,2041d402 <__muldf3+0x466>
2041d3b6:	01d79693          	slli	a3,a5,0x1d
2041d3ba:	830d                	srli	a4,a4,0x3
2041d3bc:	8f55                	or	a4,a4,a3
2041d3be:	838d                	srli	a5,a5,0x3
2041d3c0:	4601                	li	a2,0
2041d3c2:	b789                	j	2041d304 <__muldf3+0x368>
2041d3c4:	5685                	li	a3,-31
2041d3c6:	8e91                	sub	a3,a3,a2
2041d3c8:	02000513          	li	a0,32
2041d3cc:	00d7d6b3          	srl	a3,a5,a3
2041d3d0:	4601                	li	a2,0
2041d3d2:	00a58663          	beq	a1,a0,2041d3de <__muldf3+0x442>
2041d3d6:	43e88893          	addi	a7,a7,1086
2041d3da:	01179633          	sll	a2,a5,a7
2041d3de:	8f51                	or	a4,a4,a2
2041d3e0:	00e03733          	snez	a4,a4
2041d3e4:	8f55                	or	a4,a4,a3
2041d3e6:	4781                	li	a5,0
2041d3e8:	b76d                	j	2041d392 <__muldf3+0x3f6>
2041d3ea:	000807b7          	lui	a5,0x80
2041d3ee:	4701                	li	a4,0
2041d3f0:	7ff00613          	li	a2,2047
2041d3f4:	4801                	li	a6,0
2041d3f6:	b739                	j	2041d304 <__muldf3+0x368>
2041d3f8:	4781                	li	a5,0
2041d3fa:	4701                	li	a4,0
2041d3fc:	7ff00613          	li	a2,2047
2041d400:	b711                	j	2041d304 <__muldf3+0x368>
2041d402:	4781                	li	a5,0
2041d404:	4701                	li	a4,0
2041d406:	4605                	li	a2,1
2041d408:	bdf5                	j	2041d304 <__muldf3+0x368>

2041d40a <__floatsidf>:
2041d40a:	1141                	addi	sp,sp,-16
2041d40c:	c606                	sw	ra,12(sp)
2041d40e:	c422                	sw	s0,8(sp)
2041d410:	c226                	sw	s1,4(sp)
2041d412:	c925                	beqz	a0,2041d482 <__floatsidf+0x78>
2041d414:	842a                	mv	s0,a0
2041d416:	01f55493          	srli	s1,a0,0x1f
2041d41a:	00055463          	bgez	a0,2041d422 <__floatsidf+0x18>
2041d41e:	40a00433          	neg	s0,a0
2041d422:	8522                	mv	a0,s0
2041d424:	43a020ef          	jal	ra,2041f85e <__clzsi2>
2041d428:	41e00713          	li	a4,1054
2041d42c:	47a9                	li	a5,10
2041d42e:	8f09                	sub	a4,a4,a0
2041d430:	04a7c463          	blt	a5,a0,2041d478 <__floatsidf+0x6e>
2041d434:	47ad                	li	a5,11
2041d436:	8f89                	sub	a5,a5,a0
2041d438:	0555                	addi	a0,a0,21
2041d43a:	00f457b3          	srl	a5,s0,a5
2041d43e:	00a41433          	sll	s0,s0,a0
2041d442:	00100537          	lui	a0,0x100
2041d446:	157d                	addi	a0,a0,-1
2041d448:	801006b7          	lui	a3,0x80100
2041d44c:	8fe9                	and	a5,a5,a0
2041d44e:	7ff77713          	andi	a4,a4,2047
2041d452:	16fd                	addi	a3,a3,-1
2041d454:	0752                	slli	a4,a4,0x14
2041d456:	8ff5                	and	a5,a5,a3
2041d458:	8fd9                	or	a5,a5,a4
2041d45a:	80000737          	lui	a4,0x80000
2041d45e:	fff74713          	not	a4,a4
2041d462:	8522                	mv	a0,s0
2041d464:	40b2                	lw	ra,12(sp)
2041d466:	4422                	lw	s0,8(sp)
2041d468:	04fe                	slli	s1,s1,0x1f
2041d46a:	8ff9                	and	a5,a5,a4
2041d46c:	0097e733          	or	a4,a5,s1
2041d470:	85ba                	mv	a1,a4
2041d472:	4492                	lw	s1,4(sp)
2041d474:	0141                	addi	sp,sp,16
2041d476:	8082                	ret
2041d478:	1555                	addi	a0,a0,-11
2041d47a:	00a417b3          	sll	a5,s0,a0
2041d47e:	4401                	li	s0,0
2041d480:	b7c9                	j	2041d442 <__floatsidf+0x38>
2041d482:	4781                	li	a5,0
2041d484:	4401                	li	s0,0
2041d486:	4701                	li	a4,0
2041d488:	4481                	li	s1,0
2041d48a:	bf65                	j	2041d442 <__floatsidf+0x38>

2041d48c <__eqtf2>:
2041d48c:	455c                	lw	a5,12(a0)
2041d48e:	0005af03          	lw	t5,0(a1)
2041d492:	0045af83          	lw	t6,4(a1)
2041d496:	0085a283          	lw	t0,8(a1)
2041d49a:	45cc                	lw	a1,12(a1)
2041d49c:	6721                	lui	a4,0x8
2041d49e:	0107d693          	srli	a3,a5,0x10
2041d4a2:	177d                	addi	a4,a4,-1
2041d4a4:	01079813          	slli	a6,a5,0x10
2041d4a8:	01059e93          	slli	t4,a1,0x10
2041d4ac:	01f7d613          	srli	a2,a5,0x1f
2041d4b0:	8ef9                	and	a3,a3,a4
2041d4b2:	0105d793          	srli	a5,a1,0x10
2041d4b6:	1141                	addi	sp,sp,-16
2041d4b8:	00052883          	lw	a7,0(a0) # 100000 <__stack_size+0xff800>
2041d4bc:	00452303          	lw	t1,4(a0)
2041d4c0:	00852e03          	lw	t3,8(a0)
2041d4c4:	01085813          	srli	a6,a6,0x10
2041d4c8:	010ede93          	srli	t4,t4,0x10
2041d4cc:	8ff9                	and	a5,a5,a4
2041d4ce:	81fd                	srli	a1,a1,0x1f
2041d4d0:	00e69d63          	bne	a3,a4,2041d4ea <__eqtf2+0x5e>
2041d4d4:	0068e733          	or	a4,a7,t1
2041d4d8:	01c76733          	or	a4,a4,t3
2041d4dc:	01076733          	or	a4,a4,a6
2041d4e0:	4505                	li	a0,1
2041d4e2:	e721                	bnez	a4,2041d52a <__eqtf2+0x9e>
2041d4e4:	04d79363          	bne	a5,a3,2041d52a <__eqtf2+0x9e>
2041d4e8:	a019                	j	2041d4ee <__eqtf2+0x62>
2041d4ea:	00e79a63          	bne	a5,a4,2041d4fe <__eqtf2+0x72>
2041d4ee:	01ff6733          	or	a4,t5,t6
2041d4f2:	00576733          	or	a4,a4,t0
2041d4f6:	01d76733          	or	a4,a4,t4
2041d4fa:	4505                	li	a0,1
2041d4fc:	e71d                	bnez	a4,2041d52a <__eqtf2+0x9e>
2041d4fe:	4505                	li	a0,1
2041d500:	02d79563          	bne	a5,a3,2041d52a <__eqtf2+0x9e>
2041d504:	03e89363          	bne	a7,t5,2041d52a <__eqtf2+0x9e>
2041d508:	03f31163          	bne	t1,t6,2041d52a <__eqtf2+0x9e>
2041d50c:	005e1f63          	bne	t3,t0,2041d52a <__eqtf2+0x9e>
2041d510:	01d81d63          	bne	a6,t4,2041d52a <__eqtf2+0x9e>
2041d514:	00b60d63          	beq	a2,a1,2041d52e <__eqtf2+0xa2>
2041d518:	eb89                	bnez	a5,2041d52a <__eqtf2+0x9e>
2041d51a:	0068e533          	or	a0,a7,t1
2041d51e:	01c56533          	or	a0,a0,t3
2041d522:	01056533          	or	a0,a0,a6
2041d526:	00a03533          	snez	a0,a0
2041d52a:	0141                	addi	sp,sp,16
2041d52c:	8082                	ret
2041d52e:	4501                	li	a0,0
2041d530:	bfed                	j	2041d52a <__eqtf2+0x9e>

2041d532 <__getf2>:
2041d532:	455c                	lw	a5,12(a0)
2041d534:	00c5a883          	lw	a7,12(a1)
2041d538:	00052f03          	lw	t5,0(a0)
2041d53c:	4150                	lw	a2,4(a0)
2041d53e:	00852803          	lw	a6,8(a0)
2041d542:	6521                	lui	a0,0x8
2041d544:	0107d713          	srli	a4,a5,0x10
2041d548:	157d                	addi	a0,a0,-1
2041d54a:	01089e93          	slli	t4,a7,0x10
2041d54e:	0108d693          	srli	a3,a7,0x10
2041d552:	0005a283          	lw	t0,0(a1)
2041d556:	0045a303          	lw	t1,4(a1)
2041d55a:	0085ae03          	lw	t3,8(a1)
2041d55e:	8f69                	and	a4,a4,a0
2041d560:	01079593          	slli	a1,a5,0x10
2041d564:	1141                	addi	sp,sp,-16
2041d566:	81c1                	srli	a1,a1,0x10
2041d568:	83fd                	srli	a5,a5,0x1f
2041d56a:	010ede93          	srli	t4,t4,0x10
2041d56e:	8ee9                	and	a3,a3,a0
2041d570:	01f8d893          	srli	a7,a7,0x1f
2041d574:	00a71d63          	bne	a4,a0,2041d58e <__getf2+0x5c>
2041d578:	00cf6fb3          	or	t6,t5,a2
2041d57c:	010fefb3          	or	t6,t6,a6
2041d580:	00bfefb3          	or	t6,t6,a1
2041d584:	5579                	li	a0,-2
2041d586:	0a0f8763          	beqz	t6,2041d634 <__getf2+0x102>
2041d58a:	0141                	addi	sp,sp,16
2041d58c:	8082                	ret
2041d58e:	02a69463          	bne	a3,a0,2041d5b6 <__getf2+0x84>
2041d592:	0062efb3          	or	t6,t0,t1
2041d596:	01cfefb3          	or	t6,t6,t3
2041d59a:	01dfefb3          	or	t6,t6,t4
2041d59e:	5579                	li	a0,-2
2041d5a0:	fe0f95e3          	bnez	t6,2041d58a <__getf2+0x58>
2041d5a4:	eb1d                	bnez	a4,2041d5da <__getf2+0xa8>
2041d5a6:	00cf6533          	or	a0,t5,a2
2041d5aa:	01056533          	or	a0,a0,a6
2041d5ae:	8d4d                	or	a0,a0,a1
2041d5b0:	00153513          	seqz	a0,a0
2041d5b4:	a015                	j	2041d5d8 <__getf2+0xa6>
2041d5b6:	e349                	bnez	a4,2041d638 <__getf2+0x106>
2041d5b8:	00cf6533          	or	a0,t5,a2
2041d5bc:	01056533          	or	a0,a0,a6
2041d5c0:	8d4d                	or	a0,a0,a1
2041d5c2:	00153513          	seqz	a0,a0
2041d5c6:	ea89                	bnez	a3,2041d5d8 <__getf2+0xa6>
2041d5c8:	0062efb3          	or	t6,t0,t1
2041d5cc:	01cfefb3          	or	t6,t6,t3
2041d5d0:	01dfefb3          	or	t6,t6,t4
2041d5d4:	040f8e63          	beqz	t6,2041d630 <__getf2+0xfe>
2041d5d8:	e511                	bnez	a0,2041d5e4 <__getf2+0xb2>
2041d5da:	01178963          	beq	a5,a7,2041d5ec <__getf2+0xba>
2041d5de:	4505                	li	a0,1
2041d5e0:	d7cd                	beqz	a5,2041d58a <__getf2+0x58>
2041d5e2:	a019                	j	2041d5e8 <__getf2+0xb6>
2041d5e4:	fa0893e3          	bnez	a7,2041d58a <__getf2+0x58>
2041d5e8:	557d                	li	a0,-1
2041d5ea:	b745                	j	2041d58a <__getf2+0x58>
2041d5ec:	fee6c9e3          	blt	a3,a4,2041d5de <__getf2+0xac>
2041d5f0:	00d75663          	ble	a3,a4,2041d5fc <__getf2+0xca>
2041d5f4:	557d                	li	a0,-1
2041d5f6:	dbd1                	beqz	a5,2041d58a <__getf2+0x58>
2041d5f8:	4505                	li	a0,1
2041d5fa:	bf41                	j	2041d58a <__getf2+0x58>
2041d5fc:	febee1e3          	bltu	t4,a1,2041d5de <__getf2+0xac>
2041d600:	03d59463          	bne	a1,t4,2041d628 <__getf2+0xf6>
2041d604:	fd0e6de3          	bltu	t3,a6,2041d5de <__getf2+0xac>
2041d608:	03c81b63          	bne	a6,t3,2041d63e <__getf2+0x10c>
2041d60c:	fcc369e3          	bltu	t1,a2,2041d5de <__getf2+0xac>
2041d610:	00661463          	bne	a2,t1,2041d618 <__getf2+0xe6>
2041d614:	fde2e5e3          	bltu	t0,t5,2041d5de <__getf2+0xac>
2041d618:	fc666ee3          	bltu	a2,t1,2041d5f4 <__getf2+0xc2>
2041d61c:	4501                	li	a0,0
2041d61e:	f66616e3          	bne	a2,t1,2041d58a <__getf2+0x58>
2041d622:	fc5f69e3          	bltu	t5,t0,2041d5f4 <__getf2+0xc2>
2041d626:	b795                	j	2041d58a <__getf2+0x58>
2041d628:	fdd5e6e3          	bltu	a1,t4,2041d5f4 <__getf2+0xc2>
2041d62c:	4501                	li	a0,0
2041d62e:	bfb1                	j	2041d58a <__getf2+0x58>
2041d630:	fd75                	bnez	a0,2041d62c <__getf2+0xfa>
2041d632:	b775                	j	2041d5de <__getf2+0xac>
2041d634:	f4e68fe3          	beq	a3,a4,2041d592 <__getf2+0x60>
2041d638:	4501                	li	a0,0
2041d63a:	d6d9                	beqz	a3,2041d5c8 <__getf2+0x96>
2041d63c:	bf79                	j	2041d5da <__getf2+0xa8>
2041d63e:	fbc86be3          	bltu	a6,t3,2041d5f4 <__getf2+0xc2>
2041d642:	b7ed                	j	2041d62c <__getf2+0xfa>

2041d644 <__letf2>:
2041d644:	455c                	lw	a5,12(a0)
2041d646:	00c5a883          	lw	a7,12(a1)
2041d64a:	00052f03          	lw	t5,0(a0) # 8000 <__stack_size+0x7800>
2041d64e:	4150                	lw	a2,4(a0)
2041d650:	00852803          	lw	a6,8(a0)
2041d654:	6521                	lui	a0,0x8
2041d656:	0107d713          	srli	a4,a5,0x10
2041d65a:	157d                	addi	a0,a0,-1
2041d65c:	01089e93          	slli	t4,a7,0x10
2041d660:	0108d693          	srli	a3,a7,0x10
2041d664:	0005a283          	lw	t0,0(a1)
2041d668:	0045a303          	lw	t1,4(a1)
2041d66c:	0085ae03          	lw	t3,8(a1)
2041d670:	8f69                	and	a4,a4,a0
2041d672:	01079593          	slli	a1,a5,0x10
2041d676:	1141                	addi	sp,sp,-16
2041d678:	81c1                	srli	a1,a1,0x10
2041d67a:	83fd                	srli	a5,a5,0x1f
2041d67c:	010ede93          	srli	t4,t4,0x10
2041d680:	8ee9                	and	a3,a3,a0
2041d682:	01f8d893          	srli	a7,a7,0x1f
2041d686:	00a71d63          	bne	a4,a0,2041d6a0 <__letf2+0x5c>
2041d68a:	00cf6fb3          	or	t6,t5,a2
2041d68e:	010fefb3          	or	t6,t6,a6
2041d692:	00bfefb3          	or	t6,t6,a1
2041d696:	4509                	li	a0,2
2041d698:	0a0f8763          	beqz	t6,2041d746 <__letf2+0x102>
2041d69c:	0141                	addi	sp,sp,16
2041d69e:	8082                	ret
2041d6a0:	02a69463          	bne	a3,a0,2041d6c8 <__letf2+0x84>
2041d6a4:	0062efb3          	or	t6,t0,t1
2041d6a8:	01cfefb3          	or	t6,t6,t3
2041d6ac:	01dfefb3          	or	t6,t6,t4
2041d6b0:	4509                	li	a0,2
2041d6b2:	fe0f95e3          	bnez	t6,2041d69c <__letf2+0x58>
2041d6b6:	eb1d                	bnez	a4,2041d6ec <__letf2+0xa8>
2041d6b8:	00cf6533          	or	a0,t5,a2
2041d6bc:	01056533          	or	a0,a0,a6
2041d6c0:	8d4d                	or	a0,a0,a1
2041d6c2:	00153513          	seqz	a0,a0
2041d6c6:	a015                	j	2041d6ea <__letf2+0xa6>
2041d6c8:	e349                	bnez	a4,2041d74a <__letf2+0x106>
2041d6ca:	00cf6533          	or	a0,t5,a2
2041d6ce:	01056533          	or	a0,a0,a6
2041d6d2:	8d4d                	or	a0,a0,a1
2041d6d4:	00153513          	seqz	a0,a0
2041d6d8:	ea89                	bnez	a3,2041d6ea <__letf2+0xa6>
2041d6da:	0062efb3          	or	t6,t0,t1
2041d6de:	01cfefb3          	or	t6,t6,t3
2041d6e2:	01dfefb3          	or	t6,t6,t4
2041d6e6:	040f8e63          	beqz	t6,2041d742 <__letf2+0xfe>
2041d6ea:	e511                	bnez	a0,2041d6f6 <__letf2+0xb2>
2041d6ec:	01178963          	beq	a5,a7,2041d6fe <__letf2+0xba>
2041d6f0:	4505                	li	a0,1
2041d6f2:	d7cd                	beqz	a5,2041d69c <__letf2+0x58>
2041d6f4:	a019                	j	2041d6fa <__letf2+0xb6>
2041d6f6:	fa0893e3          	bnez	a7,2041d69c <__letf2+0x58>
2041d6fa:	557d                	li	a0,-1
2041d6fc:	b745                	j	2041d69c <__letf2+0x58>
2041d6fe:	fee6c9e3          	blt	a3,a4,2041d6f0 <__letf2+0xac>
2041d702:	00d75663          	ble	a3,a4,2041d70e <__letf2+0xca>
2041d706:	557d                	li	a0,-1
2041d708:	dbd1                	beqz	a5,2041d69c <__letf2+0x58>
2041d70a:	4505                	li	a0,1
2041d70c:	bf41                	j	2041d69c <__letf2+0x58>
2041d70e:	febee1e3          	bltu	t4,a1,2041d6f0 <__letf2+0xac>
2041d712:	03d59463          	bne	a1,t4,2041d73a <__letf2+0xf6>
2041d716:	fd0e6de3          	bltu	t3,a6,2041d6f0 <__letf2+0xac>
2041d71a:	03c81b63          	bne	a6,t3,2041d750 <__letf2+0x10c>
2041d71e:	fcc369e3          	bltu	t1,a2,2041d6f0 <__letf2+0xac>
2041d722:	00661463          	bne	a2,t1,2041d72a <__letf2+0xe6>
2041d726:	fde2e5e3          	bltu	t0,t5,2041d6f0 <__letf2+0xac>
2041d72a:	fc666ee3          	bltu	a2,t1,2041d706 <__letf2+0xc2>
2041d72e:	4501                	li	a0,0
2041d730:	f66616e3          	bne	a2,t1,2041d69c <__letf2+0x58>
2041d734:	fc5f69e3          	bltu	t5,t0,2041d706 <__letf2+0xc2>
2041d738:	b795                	j	2041d69c <__letf2+0x58>
2041d73a:	fdd5e6e3          	bltu	a1,t4,2041d706 <__letf2+0xc2>
2041d73e:	4501                	li	a0,0
2041d740:	bfb1                	j	2041d69c <__letf2+0x58>
2041d742:	fd75                	bnez	a0,2041d73e <__letf2+0xfa>
2041d744:	b775                	j	2041d6f0 <__letf2+0xac>
2041d746:	f4e68fe3          	beq	a3,a4,2041d6a4 <__letf2+0x60>
2041d74a:	4501                	li	a0,0
2041d74c:	d6d9                	beqz	a3,2041d6da <__letf2+0x96>
2041d74e:	bf79                	j	2041d6ec <__letf2+0xa8>
2041d750:	fbc86be3          	bltu	a6,t3,2041d706 <__letf2+0xc2>
2041d754:	b7ed                	j	2041d73e <__letf2+0xfa>

2041d756 <__multf3>:
2041d756:	7131                	addi	sp,sp,-192
2041d758:	d74e                	sw	s3,172(sp)
2041d75a:	00c5a983          	lw	s3,12(a1)
2041d75e:	4194                	lw	a3,0(a1)
2041d760:	41dc                	lw	a5,4(a1)
2041d762:	c42a                	sw	a0,8(sp)
2041d764:	4588                	lw	a0,8(a1)
2041d766:	01099713          	slli	a4,s3,0x10
2041d76a:	d94a                	sw	s2,176(sp)
2041d76c:	d552                	sw	s4,168(sp)
2041d76e:	d356                	sw	s5,164(sp)
2041d770:	d15a                	sw	s6,160(sp)
2041d772:	00062a03          	lw	s4,0(a2) # 80100000 <pulp__FC+0x80100001>
2041d776:	00462b03          	lw	s6,4(a2)
2041d77a:	00862a83          	lw	s5,8(a2)
2041d77e:	00c62903          	lw	s2,12(a2)
2041d782:	6621                	lui	a2,0x8
2041d784:	db26                	sw	s1,180(sp)
2041d786:	8341                	srli	a4,a4,0x10
2041d788:	0109d493          	srli	s1,s3,0x10
2041d78c:	167d                	addi	a2,a2,-1
2041d78e:	d6ce                	sw	s3,108(sp)
2041d790:	df06                	sw	ra,188(sp)
2041d792:	dd22                	sw	s0,184(sp)
2041d794:	cf5e                	sw	s7,156(sp)
2041d796:	cd62                	sw	s8,152(sp)
2041d798:	cb66                	sw	s9,148(sp)
2041d79a:	c96a                	sw	s10,144(sp)
2041d79c:	c76e                	sw	s11,140(sp)
2041d79e:	d0b6                	sw	a3,96(sp)
2041d7a0:	d2be                	sw	a5,100(sp)
2041d7a2:	d4aa                	sw	a0,104(sp)
2041d7a4:	d836                	sw	a3,48(sp)
2041d7a6:	da3e                	sw	a5,52(sp)
2041d7a8:	dc2a                	sw	a0,56(sp)
2041d7aa:	de3a                	sw	a4,60(sp)
2041d7ac:	8cf1                	and	s1,s1,a2
2041d7ae:	01f9d993          	srli	s3,s3,0x1f
2041d7b2:	cccd                	beqz	s1,2041d86c <__multf3+0x116>
2041d7b4:	18c48563          	beq	s1,a2,2041d93e <__multf3+0x1e8>
2041d7b8:	67c1                	lui	a5,0x10
2041d7ba:	8fd9                	or	a5,a5,a4
2041d7bc:	de3e                	sw	a5,60(sp)
2041d7be:	1810                	addi	a2,sp,48
2041d7c0:	187c                	addi	a5,sp,60
2041d7c2:	4398                	lw	a4,0(a5)
2041d7c4:	ffc7a683          	lw	a3,-4(a5) # fffc <__stack_size+0xf7fc>
2041d7c8:	17f1                	addi	a5,a5,-4
2041d7ca:	070e                	slli	a4,a4,0x3
2041d7cc:	82f5                	srli	a3,a3,0x1d
2041d7ce:	8f55                	or	a4,a4,a3
2041d7d0:	c3d8                	sw	a4,4(a5)
2041d7d2:	fef618e3          	bne	a2,a5,2041d7c2 <__multf3+0x6c>
2041d7d6:	57c2                	lw	a5,48(sp)
2041d7d8:	7571                	lui	a0,0xffffc
2041d7da:	0505                	addi	a0,a0,1
2041d7dc:	078e                	slli	a5,a5,0x3
2041d7de:	d83e                	sw	a5,48(sp)
2041d7e0:	94aa                	add	s1,s1,a0
2041d7e2:	4b81                	li	s7,0
2041d7e4:	01091793          	slli	a5,s2,0x10
2041d7e8:	6721                	lui	a4,0x8
2041d7ea:	01095513          	srli	a0,s2,0x10
2041d7ee:	83c1                	srli	a5,a5,0x10
2041d7f0:	177d                	addi	a4,a4,-1
2041d7f2:	d6ca                	sw	s2,108(sp)
2041d7f4:	d0d2                	sw	s4,96(sp)
2041d7f6:	d2da                	sw	s6,100(sp)
2041d7f8:	d4d6                	sw	s5,104(sp)
2041d7fa:	c0d2                	sw	s4,64(sp)
2041d7fc:	c2da                	sw	s6,68(sp)
2041d7fe:	c4d6                	sw	s5,72(sp)
2041d800:	c6be                	sw	a5,76(sp)
2041d802:	8d79                	and	a0,a0,a4
2041d804:	01f95913          	srli	s2,s2,0x1f
2041d808:	14050663          	beqz	a0,2041d954 <__multf3+0x1fe>
2041d80c:	22e50763          	beq	a0,a4,2041da3a <__multf3+0x2e4>
2041d810:	6ac1                	lui	s5,0x10
2041d812:	0157eab3          	or	s5,a5,s5
2041d816:	c6d6                	sw	s5,76(sp)
2041d818:	0090                	addi	a2,sp,64
2041d81a:	00fc                	addi	a5,sp,76
2041d81c:	4398                	lw	a4,0(a5)
2041d81e:	ffc7a683          	lw	a3,-4(a5)
2041d822:	17f1                	addi	a5,a5,-4
2041d824:	070e                	slli	a4,a4,0x3
2041d826:	82f5                	srli	a3,a3,0x1d
2041d828:	8f55                	or	a4,a4,a3
2041d82a:	c3d8                	sw	a4,4(a5)
2041d82c:	fef618e3          	bne	a2,a5,2041d81c <__multf3+0xc6>
2041d830:	4786                	lw	a5,64(sp)
2041d832:	078e                	slli	a5,a5,0x3
2041d834:	c0be                	sw	a5,64(sp)
2041d836:	77f1                	lui	a5,0xffffc
2041d838:	0785                	addi	a5,a5,1
2041d83a:	953e                	add	a0,a0,a5
2041d83c:	4701                	li	a4,0
2041d83e:	94aa                	add	s1,s1,a0
2041d840:	002b9793          	slli	a5,s7,0x2
2041d844:	0129c5b3          	xor	a1,s3,s2
2041d848:	00148613          	addi	a2,s1,1 # 800001 <__stack_size+0x7ff801>
2041d84c:	8fd9                	or	a5,a5,a4
2041d84e:	ca2e                	sw	a1,20(sp)
2041d850:	d226                	sw	s1,36(sp)
2041d852:	d032                	sw	a2,32(sp)
2041d854:	17fd                	addi	a5,a5,-1
2041d856:	46b9                	li	a3,14
2041d858:	1ef6ef63          	bltu	a3,a5,2041da56 <__multf3+0x300>
2041d85c:	204226b7          	lui	a3,0x20422
2041d860:	078a                	slli	a5,a5,0x2
2041d862:	13468693          	addi	a3,a3,308 # 20422134 <zeroes.4346+0x88>
2041d866:	97b6                	add	a5,a5,a3
2041d868:	439c                	lw	a5,0(a5)
2041d86a:	8782                	jr	a5
2041d86c:	00d7e633          	or	a2,a5,a3
2041d870:	8e49                	or	a2,a2,a0
2041d872:	8e59                	or	a2,a2,a4
2041d874:	ce69                	beqz	a2,2041d94e <__multf3+0x1f8>
2041d876:	c321                	beqz	a4,2041d8b6 <__multf3+0x160>
2041d878:	853a                	mv	a0,a4
2041d87a:	7e5010ef          	jal	ra,2041f85e <__clzsi2>
2041d87e:	ff450713          	addi	a4,a0,-12 # ffffbff4 <pulp__FC+0xffffbff5>
2041d882:	40575793          	srai	a5,a4,0x5
2041d886:	8b7d                	andi	a4,a4,31
2041d888:	cb31                	beqz	a4,2041d8dc <__multf3+0x186>
2041d88a:	56f1                	li	a3,-4
2041d88c:	02d786b3          	mul	a3,a5,a3
2041d890:	02000813          	li	a6,32
2041d894:	00279593          	slli	a1,a5,0x2
2041d898:	5e41                	li	t3,-16
2041d89a:	40e80833          	sub	a6,a6,a4
2041d89e:	16f1                	addi	a3,a3,-4
2041d8a0:	07c69363          	bne	a3,t3,2041d906 <__multf3+0x1b0>
2041d8a4:	0114                	addi	a3,sp,128
2041d8a6:	95b6                	add	a1,a1,a3
2041d8a8:	56c2                	lw	a3,48(sp)
2041d8aa:	17fd                	addi	a5,a5,-1
2041d8ac:	00e69733          	sll	a4,a3,a4
2041d8b0:	fae5a823          	sw	a4,-80(a1)
2041d8b4:	a091                	j	2041d8f8 <__multf3+0x1a2>
2041d8b6:	c511                	beqz	a0,2041d8c2 <__multf3+0x16c>
2041d8b8:	7a7010ef          	jal	ra,2041f85e <__clzsi2>
2041d8bc:	02050513          	addi	a0,a0,32
2041d8c0:	bf7d                	j	2041d87e <__multf3+0x128>
2041d8c2:	c799                	beqz	a5,2041d8d0 <__multf3+0x17a>
2041d8c4:	853e                	mv	a0,a5
2041d8c6:	799010ef          	jal	ra,2041f85e <__clzsi2>
2041d8ca:	04050513          	addi	a0,a0,64
2041d8ce:	bf45                	j	2041d87e <__multf3+0x128>
2041d8d0:	8536                	mv	a0,a3
2041d8d2:	78d010ef          	jal	ra,2041f85e <__clzsi2>
2041d8d6:	06050513          	addi	a0,a0,96
2041d8da:	b755                	j	2041d87e <__multf3+0x128>
2041d8dc:	5671                	li	a2,-4
2041d8de:	02c78633          	mul	a2,a5,a2
2041d8e2:	1818                	addi	a4,sp,48
2041d8e4:	468d                	li	a3,3
2041d8e6:	00c705b3          	add	a1,a4,a2
2041d8ea:	45cc                	lw	a1,12(a1)
2041d8ec:	16fd                	addi	a3,a3,-1
2041d8ee:	1771                	addi	a4,a4,-4
2041d8f0:	cb0c                	sw	a1,16(a4)
2041d8f2:	fef6dae3          	ble	a5,a3,2041d8e6 <__multf3+0x190>
2041d8f6:	17fd                	addi	a5,a5,-1
2041d8f8:	56fd                	li	a3,-1
2041d8fa:	02d79963          	bne	a5,a3,2041d92c <__multf3+0x1d6>
2041d8fe:	74f1                	lui	s1,0xffffc
2041d900:	04c5                	addi	s1,s1,17
2041d902:	8c89                	sub	s1,s1,a0
2041d904:	bdf9                	j	2041d7e2 <__multf3+0x8c>
2041d906:	1810                	addi	a2,sp,48
2041d908:	00d60333          	add	t1,a2,a3
2041d90c:	00d588b3          	add	a7,a1,a3
2041d910:	98b2                	add	a7,a7,a2
2041d912:	00c32603          	lw	a2,12(t1)
2041d916:	01032303          	lw	t1,16(t1)
2041d91a:	01065633          	srl	a2,a2,a6
2041d91e:	00e31333          	sll	t1,t1,a4
2041d922:	00666633          	or	a2,a2,t1
2041d926:	00c8a823          	sw	a2,16(a7)
2041d92a:	bf95                	j	2041d89e <__multf3+0x148>
2041d92c:	00279713          	slli	a4,a5,0x2
2041d930:	03010813          	addi	a6,sp,48
2041d934:	9742                	add	a4,a4,a6
2041d936:	00072023          	sw	zero,0(a4) # 8000 <__stack_size+0x7800>
2041d93a:	17fd                	addi	a5,a5,-1
2041d93c:	bf7d                	j	2041d8fa <__multf3+0x1a4>
2041d93e:	8fd5                	or	a5,a5,a3
2041d940:	8fc9                	or	a5,a5,a0
2041d942:	8fd9                	or	a5,a5,a4
2041d944:	4b89                	li	s7,2
2041d946:	e8078fe3          	beqz	a5,2041d7e4 <__multf3+0x8e>
2041d94a:	4b8d                	li	s7,3
2041d94c:	bd61                	j	2041d7e4 <__multf3+0x8e>
2041d94e:	4481                	li	s1,0
2041d950:	4b85                	li	s7,1
2041d952:	bd49                	j	2041d7e4 <__multf3+0x8e>
2041d954:	016a6733          	or	a4,s4,s6
2041d958:	01576733          	or	a4,a4,s5
2041d95c:	8f5d                	or	a4,a4,a5
2041d95e:	0e070963          	beqz	a4,2041da50 <__multf3+0x2fa>
2041d962:	c3a9                	beqz	a5,2041d9a4 <__multf3+0x24e>
2041d964:	853e                	mv	a0,a5
2041d966:	6f9010ef          	jal	ra,2041f85e <__clzsi2>
2041d96a:	ff450713          	addi	a4,a0,-12
2041d96e:	40575793          	srai	a5,a4,0x5
2041d972:	8b7d                	andi	a4,a4,31
2041d974:	cf31                	beqz	a4,2041d9d0 <__multf3+0x27a>
2041d976:	56f1                	li	a3,-4
2041d978:	02d786b3          	mul	a3,a5,a3
2041d97c:	02000813          	li	a6,32
2041d980:	00279593          	slli	a1,a5,0x2
2041d984:	5e41                	li	t3,-16
2041d986:	40e80833          	sub	a6,a6,a4
2041d98a:	16f1                	addi	a3,a3,-4
2041d98c:	07c69863          	bne	a3,t3,2041d9fc <__multf3+0x2a6>
2041d990:	4686                	lw	a3,64(sp)
2041d992:	08010e13          	addi	t3,sp,128
2041d996:	95f2                	add	a1,a1,t3
2041d998:	00e69733          	sll	a4,a3,a4
2041d99c:	17fd                	addi	a5,a5,-1
2041d99e:	fce5a023          	sw	a4,-64(a1)
2041d9a2:	a0a9                	j	2041d9ec <__multf3+0x296>
2041d9a4:	000a8863          	beqz	s5,2041d9b4 <__multf3+0x25e>
2041d9a8:	8556                	mv	a0,s5
2041d9aa:	6b5010ef          	jal	ra,2041f85e <__clzsi2>
2041d9ae:	02050513          	addi	a0,a0,32
2041d9b2:	bf65                	j	2041d96a <__multf3+0x214>
2041d9b4:	000b0863          	beqz	s6,2041d9c4 <__multf3+0x26e>
2041d9b8:	855a                	mv	a0,s6
2041d9ba:	6a5010ef          	jal	ra,2041f85e <__clzsi2>
2041d9be:	04050513          	addi	a0,a0,64
2041d9c2:	b765                	j	2041d96a <__multf3+0x214>
2041d9c4:	8552                	mv	a0,s4
2041d9c6:	699010ef          	jal	ra,2041f85e <__clzsi2>
2041d9ca:	06050513          	addi	a0,a0,96
2041d9ce:	bf71                	j	2041d96a <__multf3+0x214>
2041d9d0:	5671                	li	a2,-4
2041d9d2:	02c78633          	mul	a2,a5,a2
2041d9d6:	0098                	addi	a4,sp,64
2041d9d8:	468d                	li	a3,3
2041d9da:	00c705b3          	add	a1,a4,a2
2041d9de:	45cc                	lw	a1,12(a1)
2041d9e0:	16fd                	addi	a3,a3,-1
2041d9e2:	1771                	addi	a4,a4,-4
2041d9e4:	cb0c                	sw	a1,16(a4)
2041d9e6:	fef6dae3          	ble	a5,a3,2041d9da <__multf3+0x284>
2041d9ea:	17fd                	addi	a5,a5,-1
2041d9ec:	56fd                	li	a3,-1
2041d9ee:	02d79d63          	bne	a5,a3,2041da28 <__multf3+0x2d2>
2041d9f2:	77f1                	lui	a5,0xffffc
2041d9f4:	07c5                	addi	a5,a5,17
2041d9f6:	40a78533          	sub	a0,a5,a0
2041d9fa:	b589                	j	2041d83c <__multf3+0xe6>
2041d9fc:	04010893          	addi	a7,sp,64
2041da00:	00d88333          	add	t1,a7,a3
2041da04:	00c32603          	lw	a2,12(t1)
2041da08:	01032303          	lw	t1,16(t1)
2041da0c:	00d588b3          	add	a7,a1,a3
2041da10:	04010d13          	addi	s10,sp,64
2041da14:	01065633          	srl	a2,a2,a6
2041da18:	00e31333          	sll	t1,t1,a4
2041da1c:	98ea                	add	a7,a7,s10
2041da1e:	00666633          	or	a2,a2,t1
2041da22:	00c8a823          	sw	a2,16(a7)
2041da26:	b795                	j	2041d98a <__multf3+0x234>
2041da28:	00279713          	slli	a4,a5,0x2
2041da2c:	04010f93          	addi	t6,sp,64
2041da30:	977e                	add	a4,a4,t6
2041da32:	00072023          	sw	zero,0(a4)
2041da36:	17fd                	addi	a5,a5,-1
2041da38:	bf5d                	j	2041d9ee <__multf3+0x298>
2041da3a:	016a6a33          	or	s4,s4,s6
2041da3e:	015a6ab3          	or	s5,s4,s5
2041da42:	00faeab3          	or	s5,s5,a5
2041da46:	4709                	li	a4,2
2041da48:	de0a8be3          	beqz	s5,2041d83e <__multf3+0xe8>
2041da4c:	470d                	li	a4,3
2041da4e:	bbc5                	j	2041d83e <__multf3+0xe8>
2041da50:	4501                	li	a0,0
2041da52:	4705                	li	a4,1
2041da54:	b3ed                	j	2041d83e <__multf3+0xe8>
2041da56:	5742                	lw	a4,48(sp)
2041da58:	4e06                	lw	t3,64(sp)
2041da5a:	6541                	lui	a0,0x10
2041da5c:	fff50693          	addi	a3,a0,-1 # ffff <__stack_size+0xf7ff>
2041da60:	01075293          	srli	t0,a4,0x10
2041da64:	010e5a93          	srli	s5,t3,0x10
2041da68:	8f75                	and	a4,a4,a3
2041da6a:	00de7e33          	and	t3,t3,a3
2041da6e:	02ea87b3          	mul	a5,s5,a4
2041da72:	03c70633          	mul	a2,a4,t3
2041da76:	03c28833          	mul	a6,t0,t3
2041da7a:	010785b3          	add	a1,a5,a6
2041da7e:	01065793          	srli	a5,a2,0x10
2041da82:	97ae                	add	a5,a5,a1
2041da84:	03528fb3          	mul	t6,t0,s5
2041da88:	0107f363          	bleu	a6,a5,2041da8e <__multf3+0x338>
2041da8c:	9faa                	add	t6,t6,a0
2041da8e:	4f16                	lw	t5,68(sp)
2041da90:	0107db93          	srli	s7,a5,0x10
2041da94:	8ff5                	and	a5,a5,a3
2041da96:	07c2                	slli	a5,a5,0x10
2041da98:	8e75                	and	a2,a2,a3
2041da9a:	963e                	add	a2,a2,a5
2041da9c:	010f5913          	srli	s2,t5,0x10
2041daa0:	00df7f33          	and	t5,t5,a3
2041daa4:	02e907b3          	mul	a5,s2,a4
2041daa8:	d432                	sw	a2,40(sp)
2041daaa:	d0b2                	sw	a2,96(sp)
2041daac:	03e706b3          	mul	a3,a4,t5
2041dab0:	03e28633          	mul	a2,t0,t5
2041dab4:	00c78833          	add	a6,a5,a2
2041dab8:	0106d793          	srli	a5,a3,0x10
2041dabc:	97c2                	add	a5,a5,a6
2041dabe:	03228b33          	mul	s6,t0,s2
2041dac2:	00c7f463          	bleu	a2,a5,2041daca <__multf3+0x374>
2041dac6:	6641                	lui	a2,0x10
2041dac8:	9b32                	add	s6,s6,a2
2041daca:	6641                	lui	a2,0x10
2041dacc:	fff60593          	addi	a1,a2,-1 # ffff <__stack_size+0xf7ff>
2041dad0:	00b7f833          	and	a6,a5,a1
2041dad4:	0107dd93          	srli	s11,a5,0x10
2041dad8:	57d2                	lw	a5,52(sp)
2041dada:	8eed                	and	a3,a3,a1
2041dadc:	0842                	slli	a6,a6,0x10
2041dade:	0107d993          	srli	s3,a5,0x10
2041dae2:	8dfd                	and	a1,a1,a5
2041dae4:	9836                	add	a6,a6,a3
2041dae6:	02ba87b3          	mul	a5,s5,a1
2041daea:	9bc2                	add	s7,s7,a6
2041daec:	02be06b3          	mul	a3,t3,a1
2041daf0:	03c98333          	mul	t1,s3,t3
2041daf4:	006788b3          	add	a7,a5,t1
2041daf8:	0106d793          	srli	a5,a3,0x10
2041dafc:	97c6                	add	a5,a5,a7
2041dafe:	033a8533          	mul	a0,s5,s3
2041db02:	0067f363          	bleu	t1,a5,2041db08 <__multf3+0x3b2>
2041db06:	9532                	add	a0,a0,a2
2041db08:	0107d393          	srli	t2,a5,0x10
2041db0c:	6641                	lui	a2,0x10
2041db0e:	93aa                	add	t2,t2,a0
2041db10:	fff60513          	addi	a0,a2,-1 # ffff <__stack_size+0xf7ff>
2041db14:	00a7f8b3          	and	a7,a5,a0
2041db18:	8ee9                	and	a3,a3,a0
2041db1a:	08c2                	slli	a7,a7,0x10
2041db1c:	98b6                	add	a7,a7,a3
2041db1e:	03e987b3          	mul	a5,s3,t5
2041db22:	02bf06b3          	mul	a3,t5,a1
2041db26:	02b90533          	mul	a0,s2,a1
2041db2a:	0106de93          	srli	t4,a3,0x10
2041db2e:	953e                	add	a0,a0,a5
2041db30:	9576                	add	a0,a0,t4
2041db32:	03390333          	mul	t1,s2,s3
2041db36:	00f57363          	bleu	a5,a0,2041db3c <__multf3+0x3e6>
2041db3a:	9332                	add	t1,t1,a2
2041db3c:	01055793          	srli	a5,a0,0x10
2041db40:	4ea6                	lw	t4,72(sp)
2041db42:	979a                	add	a5,a5,t1
2041db44:	64c1                	lui	s1,0x10
2041db46:	c63e                	sw	a5,12(sp)
2041db48:	fff48793          	addi	a5,s1,-1 # ffff <__stack_size+0xf7ff>
2041db4c:	010ed413          	srli	s0,t4,0x10
2041db50:	00fefeb3          	and	t4,t4,a5
2041db54:	8efd                	and	a3,a3,a5
2041db56:	8d7d                	and	a0,a0,a5
2041db58:	03d70333          	mul	t1,a4,t4
2041db5c:	0542                	slli	a0,a0,0x10
2041db5e:	9536                	add	a0,a0,a3
2041db60:	03d28a33          	mul	s4,t0,t4
2041db64:	01035693          	srli	a3,t1,0x10
2041db68:	02e407b3          	mul	a5,s0,a4
2041db6c:	97d2                	add	a5,a5,s4
2041db6e:	97b6                	add	a5,a5,a3
2041db70:	02828633          	mul	a2,t0,s0
2041db74:	0147f363          	bleu	s4,a5,2041db7a <__multf3+0x424>
2041db78:	9626                	add	a2,a2,s1
2041db7a:	0107d693          	srli	a3,a5,0x10
2041db7e:	6c41                	lui	s8,0x10
2041db80:	96b2                	add	a3,a3,a2
2041db82:	fffc0613          	addi	a2,s8,-1 # ffff <__stack_size+0xf7ff>
2041db86:	c836                	sw	a3,16(sp)
2041db88:	00c7f6b3          	and	a3,a5,a2
2041db8c:	57e2                	lw	a5,56(sp)
2041db8e:	00c37333          	and	t1,t1,a2
2041db92:	06c2                	slli	a3,a3,0x10
2041db94:	0107d493          	srli	s1,a5,0x10
2041db98:	8e7d                	and	a2,a2,a5
2041db9a:	02ce0a33          	mul	s4,t3,a2
2041db9e:	969a                	add	a3,a3,t1
2041dba0:	03c48cb3          	mul	s9,s1,t3
2041dba4:	010a5d13          	srli	s10,s4,0x10
2041dba8:	02ca87b3          	mul	a5,s5,a2
2041dbac:	97e6                	add	a5,a5,s9
2041dbae:	97ea                	add	a5,a5,s10
2041dbb0:	029a8333          	mul	t1,s5,s1
2041dbb4:	0197f363          	bleu	s9,a5,2041dbba <__multf3+0x464>
2041dbb8:	9362                	add	t1,t1,s8
2041dbba:	0107dc13          	srli	s8,a5,0x10
2041dbbe:	9fde                	add	t6,t6,s7
2041dbc0:	9362                	add	t1,t1,s8
2041dbc2:	010fb833          	sltu	a6,t6,a6
2041dbc6:	6c41                	lui	s8,0x10
2041dbc8:	fffc0c93          	addi	s9,s8,-1 # ffff <__stack_size+0xf7ff>
2041dbcc:	9dc2                	add	s11,s11,a6
2041dbce:	9fc6                	add	t6,t6,a7
2041dbd0:	9b6e                	add	s6,s6,s11
2041dbd2:	0197f7b3          	and	a5,a5,s9
2041dbd6:	011fb8b3          	sltu	a7,t6,a7
2041dbda:	07c2                	slli	a5,a5,0x10
2041dbdc:	019a7a33          	and	s4,s4,s9
2041dbe0:	cc7e                	sw	t6,24(sp)
2041dbe2:	d2fe                	sw	t6,100(sp)
2041dbe4:	007b0fb3          	add	t6,s6,t2
2041dbe8:	9a3e                	add	s4,s4,a5
2041dbea:	011f87b3          	add	a5,t6,a7
2041dbee:	007fb3b3          	sltu	t2,t6,t2
2041dbf2:	0117b8b3          	sltu	a7,a5,a7
2041dbf6:	00a78bb3          	add	s7,a5,a0
2041dbfa:	0113e3b3          	or	t2,t2,a7
2041dbfe:	47b2                	lw	a5,12(sp)
2041dc00:	0ff3f393          	andi	t2,t2,255
2041dc04:	010b3b33          	sltu	s6,s6,a6
2041dc08:	9b1e                	add	s6,s6,t2
2041dc0a:	4842                	lw	a6,16(sp)
2041dc0c:	00abb533          	sltu	a0,s7,a0
2041dc10:	9b3e                	add	s6,s6,a5
2041dc12:	00ab0db3          	add	s11,s6,a0
2041dc16:	9bb6                	add	s7,s7,a3
2041dc18:	00dbb6b3          	sltu	a3,s7,a3
2041dc1c:	010d88b3          	add	a7,s11,a6
2041dc20:	4fc2                	lw	t6,16(sp)
2041dc22:	9bd2                	add	s7,s7,s4
2041dc24:	00d88d33          	add	s10,a7,a3
2041dc28:	014bba33          	sltu	s4,s7,s4
2041dc2c:	006d03b3          	add	t2,s10,t1
2041dc30:	014387b3          	add	a5,t2,s4
2041dc34:	01f8b8b3          	sltu	a7,a7,t6
2041dc38:	0063bfb3          	sltu	t6,t2,t1
2041dc3c:	837e                	mv	t1,t6
2041dc3e:	0147bfb3          	sltu	t6,a5,s4
2041dc42:	8a7e                	mv	s4,t6
2041dc44:	4832                	lw	a6,12(sp)
2041dc46:	01436fb3          	or	t6,t1,s4
2041dc4a:	4336                	lw	t1,76(sp)
2041dc4c:	010b3b33          	sltu	s6,s6,a6
2041dc50:	00adb533          	sltu	a0,s11,a0
2041dc54:	00dd36b3          	sltu	a3,s10,a3
2041dc58:	01035393          	srli	t2,t1,0x10
2041dc5c:	01937333          	and	t1,t1,s9
2041dc60:	00d8e8b3          	or	a7,a7,a3
2041dc64:	00ab6b33          	or	s6,s6,a0
2041dc68:	026286b3          	mul	a3,t0,t1
2041dc6c:	ce5e                	sw	s7,28(sp)
2041dc6e:	d4de                	sw	s7,104(sp)
2041dc70:	0ffb7b13          	andi	s6,s6,255
2041dc74:	0ff8fb93          	andi	s7,a7,255
2041dc78:	0fffff93          	andi	t6,t6,255
2041dc7c:	9b5e                	add	s6,s6,s7
2041dc7e:	01fb0bb3          	add	s7,s6,t6
2041dc82:	02670533          	mul	a0,a4,t1
2041dc86:	02e38733          	mul	a4,t2,a4
2041dc8a:	01055893          	srli	a7,a0,0x10
2041dc8e:	9736                	add	a4,a4,a3
2041dc90:	98ba                	add	a7,a7,a4
2041dc92:	02728fb3          	mul	t6,t0,t2
2041dc96:	00d8f363          	bleu	a3,a7,2041dc9c <__multf3+0x546>
2041dc9a:	9fe2                	add	t6,t6,s8
2041dc9c:	5a72                	lw	s4,60(sp)
2041dc9e:	0108d293          	srli	t0,a7,0x10
2041dca2:	66c1                	lui	a3,0x10
2041dca4:	fff68813          	addi	a6,a3,-1 # ffff <__stack_size+0xf7ff>
2041dca8:	92fe                	add	t0,t0,t6
2041dcaa:	c616                	sw	t0,12(sp)
2041dcac:	010a5293          	srli	t0,s4,0x10
2041dcb0:	010a7a33          	and	s4,s4,a6
2041dcb4:	034e0733          	mul	a4,t3,s4
2041dcb8:	0108f8b3          	and	a7,a7,a6
2041dcbc:	01057533          	and	a0,a0,a6
2041dcc0:	08c2                	slli	a7,a7,0x10
2041dcc2:	98aa                	add	a7,a7,a0
2041dcc4:	03c28e33          	mul	t3,t0,t3
2041dcc8:	01075813          	srli	a6,a4,0x10
2041dccc:	025a8b33          	mul	s6,s5,t0
2041dcd0:	034a8ab3          	mul	s5,s5,s4
2041dcd4:	9af2                	add	s5,s5,t3
2041dcd6:	9ac2                	add	s5,s5,a6
2041dcd8:	01caf363          	bleu	t3,s5,2041dcde <__multf3+0x588>
2041dcdc:	9b36                	add	s6,s6,a3
2041dcde:	010ad693          	srli	a3,s5,0x10
2041dce2:	96da                	add	a3,a3,s6
2041dce4:	6b41                	lui	s6,0x10
2041dce6:	c836                	sw	a3,16(sp)
2041dce8:	fffb0693          	addi	a3,s6,-1 # ffff <__stack_size+0xf7ff>
2041dcec:	8f75                	and	a4,a4,a3
2041dcee:	00daf833          	and	a6,s5,a3
2041dcf2:	03d58e33          	mul	t3,a1,t4
2041dcf6:	0842                	slli	a6,a6,0x10
2041dcf8:	983a                	add	a6,a6,a4
2041dcfa:	03d98fb3          	mul	t6,s3,t4
2041dcfe:	010e5513          	srli	a0,t3,0x10
2041dd02:	02b406b3          	mul	a3,s0,a1
2041dd06:	96fe                	add	a3,a3,t6
2041dd08:	96aa                	add	a3,a3,a0
2041dd0a:	02898733          	mul	a4,s3,s0
2041dd0e:	01f6f363          	bleu	t6,a3,2041dd14 <__multf3+0x5be>
2041dd12:	975a                	add	a4,a4,s6
2041dd14:	0106d513          	srli	a0,a3,0x10
2041dd18:	6b41                	lui	s6,0x10
2041dd1a:	953a                	add	a0,a0,a4
2041dd1c:	fffb0713          	addi	a4,s6,-1 # ffff <__stack_size+0xf7ff>
2041dd20:	d62a                	sw	a0,44(sp)
2041dd22:	00e6f533          	and	a0,a3,a4
2041dd26:	00ee7e33          	and	t3,t3,a4
2041dd2a:	0542                	slli	a0,a0,0x10
2041dd2c:	9572                	add	a0,a0,t3
2041dd2e:	03e48fb3          	mul	t6,s1,t5
2041dd32:	02cf0e33          	mul	t3,t5,a2
2041dd36:	02c90733          	mul	a4,s2,a2
2041dd3a:	010e5693          	srli	a3,t3,0x10
2041dd3e:	977e                	add	a4,a4,t6
2041dd40:	9736                	add	a4,a4,a3
2041dd42:	02990ab3          	mul	s5,s2,s1
2041dd46:	01f77363          	bleu	t6,a4,2041dd4c <__multf3+0x5f6>
2041dd4a:	9ada                	add	s5,s5,s6
2041dd4c:	6dc1                	lui	s11,0x10
2041dd4e:	fffd8f93          	addi	t6,s11,-1 # ffff <__stack_size+0xf7ff>
2041dd52:	01f776b3          	and	a3,a4,t6
2041dd56:	01075d13          	srli	s10,a4,0x10
2041dd5a:	4732                	lw	a4,12(sp)
2041dd5c:	9d56                	add	s10,s10,s5
2041dd5e:	c06a                	sw	s10,0(sp)
2041dd60:	97c6                	add	a5,a5,a7
2041dd62:	4d42                	lw	s10,16(sp)
2041dd64:	9bba                	add	s7,s7,a4
2041dd66:	01fe7e33          	and	t3,t3,t6
2041dd6a:	0117b8b3          	sltu	a7,a5,a7
2041dd6e:	06c2                	slli	a3,a3,0x10
2041dd70:	96f2                	add	a3,a3,t3
2041dd72:	011b8cb3          	add	s9,s7,a7
2041dd76:	97c2                	add	a5,a5,a6
2041dd78:	5e32                	lw	t3,44(sp)
2041dd7a:	0107b833          	sltu	a6,a5,a6
2041dd7e:	01ac8b33          	add	s6,s9,s10
2041dd82:	010b0c33          	add	s8,s6,a6
2041dd86:	97aa                	add	a5,a5,a0
2041dd88:	4f82                	lw	t6,0(sp)
2041dd8a:	00a7b533          	sltu	a0,a5,a0
2041dd8e:	01cc0733          	add	a4,s8,t3
2041dd92:	c25e                	sw	s7,4(sp)
2041dd94:	00a70bb3          	add	s7,a4,a0
2041dd98:	01fb8ab3          	add	s5,s7,t6
2041dd9c:	4d12                	lw	s10,4(sp)
2041dd9e:	4fb2                	lw	t6,12(sp)
2041dda0:	011cb8b3          	sltu	a7,s9,a7
2041dda4:	01fd3d33          	sltu	s10,s10,t6
2041dda8:	8fea                	mv	t6,s10
2041ddaa:	011fefb3          	or	t6,t6,a7
2041ddae:	48c2                	lw	a7,16(sp)
2041ddb0:	5d32                	lw	s10,44(sp)
2041ddb2:	010c3833          	sltu	a6,s8,a6
2041ddb6:	011b3b33          	sltu	s6,s6,a7
2041ddba:	010b6b33          	or	s6,s6,a6
2041ddbe:	01a73733          	sltu	a4,a4,s10
2041ddc2:	00abb533          	sltu	a0,s7,a0
2041ddc6:	0ffb7b13          	andi	s6,s6,255
2041ddca:	0fffff93          	andi	t6,t6,255
2041ddce:	9fda                	add	t6,t6,s6
2041ddd0:	00a76b33          	or	s6,a4,a0
2041ddd4:	4502                	lw	a0,0(sp)
2041ddd6:	97b6                	add	a5,a5,a3
2041ddd8:	00d7b6b3          	sltu	a3,a5,a3
2041dddc:	0ffb7b13          	andi	s6,s6,255
2041dde0:	00da8e33          	add	t3,s5,a3
2041dde4:	9b7e                	add	s6,s6,t6
2041dde6:	00aabfb3          	sltu	t6,s5,a0
2041ddea:	8d7e                	mv	s10,t6
2041ddec:	00de3fb3          	sltu	t6,t3,a3
2041ddf0:	86fe                	mv	a3,t6
2041ddf2:	00dd6fb3          	or	t6,s10,a3
2041ddf6:	03d48833          	mul	a6,s1,t4
2041ddfa:	0ffffa93          	andi	s5,t6,255
2041ddfe:	d6be                	sw	a5,108(sp)
2041de00:	015b0fb3          	add	t6,s6,s5
2041de04:	02ce86b3          	mul	a3,t4,a2
2041de08:	02c40733          	mul	a4,s0,a2
2041de0c:	0106d513          	srli	a0,a3,0x10
2041de10:	9742                	add	a4,a4,a6
2041de12:	972a                	add	a4,a4,a0
2041de14:	029408b3          	mul	a7,s0,s1
2041de18:	01077363          	bleu	a6,a4,2041de1e <__multf3+0x6c8>
2041de1c:	98ee                	add	a7,a7,s11
2041de1e:	01075a93          	srli	s5,a4,0x10
2041de22:	6841                	lui	a6,0x10
2041de24:	9ac6                	add	s5,s5,a7
2041de26:	fff80893          	addi	a7,a6,-1 # ffff <__stack_size+0xf7ff>
2041de2a:	0116f6b3          	and	a3,a3,a7
2041de2e:	01177533          	and	a0,a4,a7
2041de32:	0542                	slli	a0,a0,0x10
2041de34:	026588b3          	mul	a7,a1,t1
2041de38:	9536                	add	a0,a0,a3
2041de3a:	02698b33          	mul	s6,s3,t1
2041de3e:	0108d693          	srli	a3,a7,0x10
2041de42:	02b385b3          	mul	a1,t2,a1
2041de46:	95da                	add	a1,a1,s6
2041de48:	96ae                	add	a3,a3,a1
2041de4a:	027989b3          	mul	s3,s3,t2
2041de4e:	0166f363          	bleu	s6,a3,2041de54 <__multf3+0x6fe>
2041de52:	99c2                	add	s3,s3,a6
2041de54:	0106d713          	srli	a4,a3,0x10
2041de58:	6841                	lui	a6,0x10
2041de5a:	99ba                	add	s3,s3,a4
2041de5c:	fff80713          	addi	a4,a6,-1 # ffff <__stack_size+0xf7ff>
2041de60:	00e6f5b3          	and	a1,a3,a4
2041de64:	00e8f8b3          	and	a7,a7,a4
2041de68:	05c2                	slli	a1,a1,0x10
2041de6a:	034f0733          	mul	a4,t5,s4
2041de6e:	95c6                	add	a1,a1,a7
2041de70:	03e28f33          	mul	t5,t0,t5
2041de74:	01075893          	srli	a7,a4,0x10
2041de78:	025906b3          	mul	a3,s2,t0
2041de7c:	03490933          	mul	s2,s2,s4
2041de80:	997a                	add	s2,s2,t5
2041de82:	9946                	add	s2,s2,a7
2041de84:	01e97363          	bleu	t5,s2,2041de8a <__multf3+0x734>
2041de88:	96c2                	add	a3,a3,a6
2041de8a:	01095b13          	srli	s6,s2,0x10
2041de8e:	6841                	lui	a6,0x10
2041de90:	9b36                	add	s6,s6,a3
2041de92:	fff80693          	addi	a3,a6,-1 # ffff <__stack_size+0xf7ff>
2041de96:	00d97f33          	and	t5,s2,a3
2041de9a:	8f75                	and	a4,a4,a3
2041de9c:	0f42                	slli	t5,t5,0x10
2041de9e:	026488b3          	mul	a7,s1,t1
2041dea2:	9f3a                	add	t5,t5,a4
2041dea4:	02660733          	mul	a4,a2,t1
2041dea8:	02c38633          	mul	a2,t2,a2
2041deac:	01075693          	srli	a3,a4,0x10
2041deb0:	9646                	add	a2,a2,a7
2041deb2:	9636                	add	a2,a2,a3
2041deb4:	027484b3          	mul	s1,s1,t2
2041deb8:	01167363          	bleu	a7,a2,2041debe <__multf3+0x768>
2041debc:	94c2                	add	s1,s1,a6
2041debe:	68c1                	lui	a7,0x10
2041dec0:	01065693          	srli	a3,a2,0x10
2041dec4:	fff88813          	addi	a6,a7,-1 # ffff <__stack_size+0xf7ff>
2041dec8:	94b6                	add	s1,s1,a3
2041deca:	010676b3          	and	a3,a2,a6
2041dece:	01077733          	and	a4,a4,a6
2041ded2:	06c2                	slli	a3,a3,0x10
2041ded4:	96ba                	add	a3,a3,a4
2041ded6:	03440833          	mul	a6,s0,s4
2041deda:	034e8733          	mul	a4,t4,s4
2041dede:	03d28eb3          	mul	t4,t0,t4
2041dee2:	01075913          	srli	s2,a4,0x10
2041dee6:	9876                	add	a6,a6,t4
2041dee8:	984a                	add	a6,a6,s2
2041deea:	02540633          	mul	a2,s0,t0
2041deee:	01d87363          	bleu	t4,a6,2041def4 <__multf3+0x79e>
2041def2:	9646                	add	a2,a2,a7
2041def4:	6bc1                	lui	s7,0x10
2041def6:	fffb8e93          	addi	t4,s7,-1 # ffff <__stack_size+0xf7ff>
2041defa:	9e2a                	add	t3,t3,a0
2041defc:	00ae3533          	sltu	a0,t3,a0
2041df00:	01085913          	srli	s2,a6,0x10
2041df04:	9fd6                	add	t6,t6,s5
2041df06:	01d87833          	and	a6,a6,t4
2041df0a:	01d77733          	and	a4,a4,t4
2041df0e:	00af8cb3          	add	s9,t6,a0
2041df12:	9e2e                	add	t3,t3,a1
2041df14:	0842                	slli	a6,a6,0x10
2041df16:	983a                	add	a6,a6,a4
2041df18:	00be35b3          	sltu	a1,t3,a1
2041df1c:	013c8733          	add	a4,s9,s3
2041df20:	00b70c33          	add	s8,a4,a1
2041df24:	9e7a                	add	t3,t3,t5
2041df26:	016c08b3          	add	a7,s8,s6
2041df2a:	d8f2                	sw	t3,112(sp)
2041df2c:	01373733          	sltu	a4,a4,s3
2041df30:	01ee3e33          	sltu	t3,t3,t5
2041df34:	00bc35b3          	sltu	a1,s8,a1
2041df38:	01c88f33          	add	t5,a7,t3
2041df3c:	0168b8b3          	sltu	a7,a7,s6
2041df40:	015fbab3          	sltu	s5,t6,s5
2041df44:	00acb533          	sltu	a0,s9,a0
2041df48:	8f4d                	or	a4,a4,a1
2041df4a:	8b46                	mv	s6,a7
2041df4c:	034305b3          	mul	a1,t1,s4
2041df50:	01cf38b3          	sltu	a7,t5,t3
2041df54:	00aaeab3          	or	s5,s5,a0
2041df58:	0ff77713          	andi	a4,a4,255
2041df5c:	0ffafa93          	andi	s5,s5,255
2041df60:	011b68b3          	or	a7,s6,a7
2041df64:	02628333          	mul	t1,t0,t1
2041df68:	9aba                	add	s5,s5,a4
2041df6a:	0ff8f893          	andi	a7,a7,255
2041df6e:	9932                	add	s2,s2,a2
2041df70:	9ac6                	add	s5,s5,a7
2041df72:	00df0633          	add	a2,t5,a3
2041df76:	00d636b3          	sltu	a3,a2,a3
2041df7a:	9aa6                	add	s5,s5,s1
2041df7c:	9642                	add	a2,a2,a6
2041df7e:	00da8733          	add	a4,s5,a3
2041df82:	025382b3          	mul	t0,t2,t0
2041df86:	00d736b3          	sltu	a3,a4,a3
2041df8a:	01063833          	sltu	a6,a2,a6
2041df8e:	974a                	add	a4,a4,s2
2041df90:	dab2                	sw	a2,116(sp)
2041df92:	01070633          	add	a2,a4,a6
2041df96:	009ab4b3          	sltu	s1,s5,s1
2041df9a:	01273733          	sltu	a4,a4,s2
2041df9e:	01063833          	sltu	a6,a2,a6
2041dfa2:	034383b3          	mul	t2,t2,s4
2041dfa6:	8ec5                	or	a3,a3,s1
2041dfa8:	01076833          	or	a6,a4,a6
2041dfac:	0ff6f693          	andi	a3,a3,255
2041dfb0:	0ff87813          	andi	a6,a6,255
2041dfb4:	00638a33          	add	s4,t2,t1
2041dfb8:	0105d393          	srli	t2,a1,0x10
2041dfbc:	93d2                	add	t2,t2,s4
2041dfbe:	0063f363          	bleu	t1,t2,2041dfc4 <__multf3+0x86e>
2041dfc2:	92de                	add	t0,t0,s7
2041dfc4:	01d3f733          	and	a4,t2,t4
2041dfc8:	0742                	slli	a4,a4,0x10
2041dfca:	01d5feb3          	and	t4,a1,t4
2041dfce:	9776                	add	a4,a4,t4
2041dfd0:	963a                	add	a2,a2,a4
2041dfd2:	00e63733          	sltu	a4,a2,a4
2041dfd6:	0103d393          	srli	t2,t2,0x10
2041dfda:	dcb2                	sw	a2,120(sp)
2041dfdc:	55a2                	lw	a1,40(sp)
2041dfde:	4662                	lw	a2,24(sp)
2041dfe0:	00d38eb3          	add	t4,t2,a3
2041dfe4:	46f2                	lw	a3,28(sp)
2041dfe6:	9ec2                	add	t4,t4,a6
2041dfe8:	9eba                	add	t4,t4,a4
2041dfea:	00c5efb3          	or	t6,a1,a2
2041dfee:	92f6                	add	t0,t0,t4
2041dff0:	01f6ebb3          	or	s7,a3,t6
2041dff4:	07b6                	slli	a5,a5,0xd
2041dff6:	de96                	sw	t0,124(sp)
2041dff8:	0177e7b3          	or	a5,a5,s7
2041dffc:	1098                	addi	a4,sp,96
2041dffe:	4601                	li	a2,0
2041e000:	4511                	li	a0,4
2041e002:	4754                	lw	a3,12(a4)
2041e004:	4b0c                	lw	a1,16(a4)
2041e006:	0605                	addi	a2,a2,1
2041e008:	82cd                	srli	a3,a3,0x13
2041e00a:	05b6                	slli	a1,a1,0xd
2041e00c:	8ecd                	or	a3,a3,a1
2041e00e:	c314                	sw	a3,0(a4)
2041e010:	0711                	addi	a4,a4,4
2041e012:	fea618e3          	bne	a2,a0,2041e002 <__multf3+0x8ac>
2041e016:	5706                	lw	a4,96(sp)
2041e018:	56a6                	lw	a3,104(sp)
2041e01a:	00f037b3          	snez	a5,a5
2041e01e:	8fd9                	or	a5,a5,a4
2041e020:	ccb6                	sw	a3,88(sp)
2041e022:	5736                	lw	a4,108(sp)
2041e024:	5696                	lw	a3,100(sp)
2041e026:	c8be                	sw	a5,80(sp)
2041e028:	ceba                	sw	a4,92(sp)
2041e02a:	cab6                	sw	a3,84(sp)
2041e02c:	00b71813          	slli	a6,a4,0xb
2041e030:	16085163          	bgez	a6,2041e192 <__multf3+0xa3c>
2041e034:	07fe                	slli	a5,a5,0x1f
2041e036:	0898                	addi	a4,sp,80
2041e038:	4601                	li	a2,0
2041e03a:	450d                	li	a0,3
2041e03c:	4314                	lw	a3,0(a4)
2041e03e:	434c                	lw	a1,4(a4)
2041e040:	0605                	addi	a2,a2,1
2041e042:	8285                	srli	a3,a3,0x1
2041e044:	05fe                	slli	a1,a1,0x1f
2041e046:	8ecd                	or	a3,a3,a1
2041e048:	c314                	sw	a3,0(a4)
2041e04a:	0711                	addi	a4,a4,4
2041e04c:	fea618e3          	bne	a2,a0,2041e03c <__multf3+0x8e6>
2041e050:	4776                	lw	a4,92(sp)
2041e052:	00f037b3          	snez	a5,a5
2041e056:	8305                	srli	a4,a4,0x1
2041e058:	ceba                	sw	a4,92(sp)
2041e05a:	4746                	lw	a4,80(sp)
2041e05c:	8fd9                	or	a5,a5,a4
2041e05e:	c8be                	sw	a5,80(sp)
2041e060:	5d02                	lw	s10,32(sp)
2041e062:	6791                	lui	a5,0x4
2041e064:	17fd                	addi	a5,a5,-1
2041e066:	97ea                	add	a5,a5,s10
2041e068:	12f05f63          	blez	a5,2041e1a6 <__multf3+0xa50>
2041e06c:	4746                	lw	a4,80(sp)
2041e06e:	00777693          	andi	a3,a4,7
2041e072:	ce85                	beqz	a3,2041e0aa <__multf3+0x954>
2041e074:	00f77693          	andi	a3,a4,15
2041e078:	4611                	li	a2,4
2041e07a:	02c68863          	beq	a3,a2,2041e0aa <__multf3+0x954>
2041e07e:	0711                	addi	a4,a4,4
2041e080:	00473613          	sltiu	a2,a4,4
2041e084:	c8ba                	sw	a4,80(sp)
2041e086:	4756                	lw	a4,84(sp)
2041e088:	46e6                	lw	a3,88(sp)
2041e08a:	9732                	add	a4,a4,a2
2041e08c:	caba                	sw	a4,84(sp)
2041e08e:	00c73733          	sltu	a4,a4,a2
2041e092:	0ff77613          	andi	a2,a4,255
2041e096:	00d60733          	add	a4,a2,a3
2041e09a:	ccba                	sw	a4,88(sp)
2041e09c:	46f6                	lw	a3,92(sp)
2041e09e:	00c73733          	sltu	a4,a4,a2
2041e0a2:	0ff77713          	andi	a4,a4,255
2041e0a6:	9736                	add	a4,a4,a3
2041e0a8:	ceba                	sw	a4,92(sp)
2041e0aa:	4776                	lw	a4,92(sp)
2041e0ac:	00b71e13          	slli	t3,a4,0xb
2041e0b0:	000e5a63          	bgez	t3,2041e0c4 <__multf3+0x96e>
2041e0b4:	fff007b7          	lui	a5,0xfff00
2041e0b8:	5f82                	lw	t6,32(sp)
2041e0ba:	17fd                	addi	a5,a5,-1
2041e0bc:	8f7d                	and	a4,a4,a5
2041e0be:	6791                	lui	a5,0x4
2041e0c0:	ceba                	sw	a4,92(sp)
2041e0c2:	97fe                	add	a5,a5,t6
2041e0c4:	0898                	addi	a4,sp,80
2041e0c6:	4601                	li	a2,0
2041e0c8:	450d                	li	a0,3
2041e0ca:	4314                	lw	a3,0(a4)
2041e0cc:	434c                	lw	a1,4(a4)
2041e0ce:	0605                	addi	a2,a2,1
2041e0d0:	828d                	srli	a3,a3,0x3
2041e0d2:	05f6                	slli	a1,a1,0x1d
2041e0d4:	8ecd                	or	a3,a3,a1
2041e0d6:	c314                	sw	a3,0(a4)
2041e0d8:	0711                	addi	a4,a4,4
2041e0da:	fea618e3          	bne	a2,a0,2041e0ca <__multf3+0x974>
2041e0de:	6721                	lui	a4,0x8
2041e0e0:	ffe70693          	addi	a3,a4,-2 # 7ffe <__stack_size+0x77fe>
2041e0e4:	0af6ca63          	blt	a3,a5,2041e198 <__multf3+0xa42>
2041e0e8:	4776                	lw	a4,92(sp)
2041e0ea:	830d                	srli	a4,a4,0x3
2041e0ec:	ceba                	sw	a4,92(sp)
2041e0ee:	4776                	lw	a4,92(sp)
2041e0f0:	76e1                	lui	a3,0xffff8
2041e0f2:	4552                	lw	a0,20(sp)
2041e0f4:	06e11623          	sh	a4,108(sp)
2041e0f8:	6721                	lui	a4,0x8
2041e0fa:	177d                	addi	a4,a4,-1
2041e0fc:	8ff9                	and	a5,a5,a4
2041e0fe:	06e15703          	lhu	a4,110(sp)
2041e102:	50fa                	lw	ra,188(sp)
2041e104:	546a                	lw	s0,184(sp)
2041e106:	8f75                	and	a4,a4,a3
2041e108:	8fd9                	or	a5,a5,a4
2041e10a:	0087d713          	srli	a4,a5,0x8
2041e10e:	06f11723          	sh	a5,110(sp)
2041e112:	07f77713          	andi	a4,a4,127
2041e116:	00751793          	slli	a5,a0,0x7
2041e11a:	8fd9                	or	a5,a5,a4
2041e11c:	46a2                	lw	a3,8(sp)
2041e11e:	06f107a3          	sb	a5,111(sp)
2041e122:	47c6                	lw	a5,80(sp)
2041e124:	54da                	lw	s1,180(sp)
2041e126:	594a                	lw	s2,176(sp)
2041e128:	c29c                	sw	a5,0(a3)
2041e12a:	47d6                	lw	a5,84(sp)
2041e12c:	59ba                	lw	s3,172(sp)
2041e12e:	5a2a                	lw	s4,168(sp)
2041e130:	c2dc                	sw	a5,4(a3)
2041e132:	47e6                	lw	a5,88(sp)
2041e134:	5a9a                	lw	s5,164(sp)
2041e136:	5b0a                	lw	s6,160(sp)
2041e138:	c69c                	sw	a5,8(a3)
2041e13a:	57b6                	lw	a5,108(sp)
2041e13c:	4bfa                	lw	s7,156(sp)
2041e13e:	4c6a                	lw	s8,152(sp)
2041e140:	c6dc                	sw	a5,12(a3)
2041e142:	4cda                	lw	s9,148(sp)
2041e144:	4d4a                	lw	s10,144(sp)
2041e146:	4dba                	lw	s11,140(sp)
2041e148:	8536                	mv	a0,a3
2041e14a:	6129                	addi	sp,sp,192
2041e14c:	8082                	ret
2041e14e:	ca4e                	sw	s3,20(sp)
2041e150:	57c2                	lw	a5,48(sp)
2041e152:	c8be                	sw	a5,80(sp)
2041e154:	57d2                	lw	a5,52(sp)
2041e156:	cabe                	sw	a5,84(sp)
2041e158:	57e2                	lw	a5,56(sp)
2041e15a:	ccbe                	sw	a5,88(sp)
2041e15c:	57f2                	lw	a5,60(sp)
2041e15e:	cebe                	sw	a5,92(sp)
2041e160:	4789                	li	a5,2
2041e162:	1afb8663          	beq	s7,a5,2041e30e <__multf3+0xbb8>
2041e166:	478d                	li	a5,3
2041e168:	1afb8a63          	beq	s7,a5,2041e31c <__multf3+0xbc6>
2041e16c:	4785                	li	a5,1
2041e16e:	eefb99e3          	bne	s7,a5,2041e060 <__multf3+0x90a>
2041e172:	ce82                	sw	zero,92(sp)
2041e174:	cc82                	sw	zero,88(sp)
2041e176:	ca82                	sw	zero,84(sp)
2041e178:	c882                	sw	zero,80(sp)
2041e17a:	aa8d                	j	2041e2ec <__multf3+0xb96>
2041e17c:	ca4a                	sw	s2,20(sp)
2041e17e:	4786                	lw	a5,64(sp)
2041e180:	8bba                	mv	s7,a4
2041e182:	c8be                	sw	a5,80(sp)
2041e184:	4796                	lw	a5,68(sp)
2041e186:	cabe                	sw	a5,84(sp)
2041e188:	47a6                	lw	a5,72(sp)
2041e18a:	ccbe                	sw	a5,88(sp)
2041e18c:	47b6                	lw	a5,76(sp)
2041e18e:	cebe                	sw	a5,92(sp)
2041e190:	bfc1                	j	2041e160 <__multf3+0xa0a>
2041e192:	5892                	lw	a7,36(sp)
2041e194:	d046                	sw	a7,32(sp)
2041e196:	b5e9                	j	2041e060 <__multf3+0x90a>
2041e198:	ce82                	sw	zero,92(sp)
2041e19a:	cc82                	sw	zero,88(sp)
2041e19c:	ca82                	sw	zero,84(sp)
2041e19e:	c882                	sw	zero,80(sp)
2041e1a0:	fff70793          	addi	a5,a4,-1 # 7fff <__stack_size+0x77ff>
2041e1a4:	b7a9                	j	2041e0ee <__multf3+0x998>
2041e1a6:	4705                	li	a4,1
2041e1a8:	40f707b3          	sub	a5,a4,a5
2041e1ac:	07400713          	li	a4,116
2041e1b0:	14f74063          	blt	a4,a5,2041e2f0 <__multf3+0xb9a>
2041e1b4:	4057d613          	srai	a2,a5,0x5
2041e1b8:	4701                	li	a4,0
2041e1ba:	8bfd                	andi	a5,a5,31
2041e1bc:	4681                	li	a3,0
2041e1be:	00269593          	slli	a1,a3,0x2
2041e1c2:	06c69b63          	bne	a3,a2,2041e238 <__multf3+0xae2>
2041e1c6:	ebc1                	bnez	a5,2041e256 <__multf3+0xb00>
2041e1c8:	450d                	li	a0,3
2041e1ca:	0890                	addi	a2,sp,80
2041e1cc:	8d15                	sub	a0,a0,a3
2041e1ce:	06f55b63          	ble	a5,a0,2041e244 <__multf3+0xaee>
2041e1d2:	4791                	li	a5,4
2041e1d4:	40d786b3          	sub	a3,a5,a3
2041e1d8:	4611                	li	a2,4
2041e1da:	0ec69063          	bne	a3,a2,2041e2ba <__multf3+0xb64>
2041e1de:	47c6                	lw	a5,80(sp)
2041e1e0:	00e03733          	snez	a4,a4
2041e1e4:	8f5d                	or	a4,a4,a5
2041e1e6:	c8ba                	sw	a4,80(sp)
2041e1e8:	00777793          	andi	a5,a4,7
2041e1ec:	cb9d                	beqz	a5,2041e222 <__multf3+0xacc>
2041e1ee:	00f77793          	andi	a5,a4,15
2041e1f2:	02d78863          	beq	a5,a3,2041e222 <__multf3+0xacc>
2041e1f6:	47d6                	lw	a5,84(sp)
2041e1f8:	0711                	addi	a4,a4,4
2041e1fa:	c8ba                	sw	a4,80(sp)
2041e1fc:	00473713          	sltiu	a4,a4,4
2041e200:	97ba                	add	a5,a5,a4
2041e202:	46e6                	lw	a3,88(sp)
2041e204:	cabe                	sw	a5,84(sp)
2041e206:	00e7b7b3          	sltu	a5,a5,a4
2041e20a:	0ff7f713          	andi	a4,a5,255
2041e20e:	00d707b3          	add	a5,a4,a3
2041e212:	ccbe                	sw	a5,88(sp)
2041e214:	00e7b7b3          	sltu	a5,a5,a4
2041e218:	4776                	lw	a4,92(sp)
2041e21a:	0ff7f793          	andi	a5,a5,255
2041e21e:	97ba                	add	a5,a5,a4
2041e220:	cebe                	sw	a5,92(sp)
2041e222:	47f6                	lw	a5,92(sp)
2041e224:	00c79f93          	slli	t6,a5,0xc
2041e228:	0a0fd263          	bgez	t6,2041e2cc <__multf3+0xb76>
2041e22c:	ce82                	sw	zero,92(sp)
2041e22e:	cc82                	sw	zero,88(sp)
2041e230:	ca82                	sw	zero,84(sp)
2041e232:	c882                	sw	zero,80(sp)
2041e234:	4785                	li	a5,1
2041e236:	bd65                	j	2041e0ee <__multf3+0x998>
2041e238:	0888                	addi	a0,sp,80
2041e23a:	95aa                	add	a1,a1,a0
2041e23c:	418c                	lw	a1,0(a1)
2041e23e:	0685                	addi	a3,a3,1
2041e240:	8f4d                	or	a4,a4,a1
2041e242:	bfb5                	j	2041e1be <__multf3+0xa68>
2041e244:	00b60833          	add	a6,a2,a1
2041e248:	00082803          	lw	a6,0(a6)
2041e24c:	0785                	addi	a5,a5,1
2041e24e:	0611                	addi	a2,a2,4
2041e250:	ff062e23          	sw	a6,-4(a2)
2041e254:	bfad                	j	2041e1ce <__multf3+0xa78>
2041e256:	08010893          	addi	a7,sp,128
2041e25a:	00b88633          	add	a2,a7,a1
2041e25e:	fd062603          	lw	a2,-48(a2)
2041e262:	02000813          	li	a6,32
2041e266:	40f80833          	sub	a6,a6,a5
2041e26a:	01061633          	sll	a2,a2,a6
2041e26e:	8f51                	or	a4,a4,a2
2041e270:	460d                	li	a2,3
2041e272:	05010893          	addi	a7,sp,80
2041e276:	4301                	li	t1,0
2041e278:	8e15                	sub	a2,a2,a3
2041e27a:	00c34f63          	blt	t1,a2,2041e298 <__multf3+0xb42>
2041e27e:	4591                	li	a1,4
2041e280:	40d586b3          	sub	a3,a1,a3
2041e284:	45f6                	lw	a1,92(sp)
2041e286:	060a                	slli	a2,a2,0x2
2041e288:	08010d13          	addi	s10,sp,128
2041e28c:	966a                	add	a2,a2,s10
2041e28e:	00f5d7b3          	srl	a5,a1,a5
2041e292:	fcf62823          	sw	a5,-48(a2)
2041e296:	b789                	j	2041e1d8 <__multf3+0xa82>
2041e298:	00b88e33          	add	t3,a7,a1
2041e29c:	000e2503          	lw	a0,0(t3) # 10000 <__stack_size+0xf800>
2041e2a0:	004e2e03          	lw	t3,4(t3)
2041e2a4:	0305                	addi	t1,t1,1
2041e2a6:	00f55533          	srl	a0,a0,a5
2041e2aa:	010e1e33          	sll	t3,t3,a6
2041e2ae:	01c56533          	or	a0,a0,t3
2041e2b2:	00a8a023          	sw	a0,0(a7)
2041e2b6:	0891                	addi	a7,a7,4
2041e2b8:	b7c9                	j	2041e27a <__multf3+0xb24>
2041e2ba:	00269793          	slli	a5,a3,0x2
2041e2be:	05010e13          	addi	t3,sp,80
2041e2c2:	97f2                	add	a5,a5,t3
2041e2c4:	0007a023          	sw	zero,0(a5) # 4000 <__stack_size+0x3800>
2041e2c8:	0685                	addi	a3,a3,1
2041e2ca:	bf01                	j	2041e1da <__multf3+0xa84>
2041e2cc:	089c                	addi	a5,sp,80
2041e2ce:	4681                	li	a3,0
2041e2d0:	458d                	li	a1,3
2041e2d2:	4398                	lw	a4,0(a5)
2041e2d4:	43d0                	lw	a2,4(a5)
2041e2d6:	0685                	addi	a3,a3,1
2041e2d8:	830d                	srli	a4,a4,0x3
2041e2da:	0676                	slli	a2,a2,0x1d
2041e2dc:	8f51                	or	a4,a4,a2
2041e2de:	c398                	sw	a4,0(a5)
2041e2e0:	0791                	addi	a5,a5,4
2041e2e2:	feb698e3          	bne	a3,a1,2041e2d2 <__multf3+0xb7c>
2041e2e6:	47f6                	lw	a5,92(sp)
2041e2e8:	838d                	srli	a5,a5,0x3
2041e2ea:	cebe                	sw	a5,92(sp)
2041e2ec:	4781                	li	a5,0
2041e2ee:	b501                	j	2041e0ee <__multf3+0x998>
2041e2f0:	47d6                	lw	a5,84(sp)
2041e2f2:	4746                	lw	a4,80(sp)
2041e2f4:	8f5d                	or	a4,a4,a5
2041e2f6:	47e6                	lw	a5,88(sp)
2041e2f8:	8f5d                	or	a4,a4,a5
2041e2fa:	47f6                	lw	a5,92(sp)
2041e2fc:	8f5d                	or	a4,a4,a5
2041e2fe:	4781                	li	a5,0
2041e300:	de0707e3          	beqz	a4,2041e0ee <__multf3+0x998>
2041e304:	ce82                	sw	zero,92(sp)
2041e306:	cc82                	sw	zero,88(sp)
2041e308:	ca82                	sw	zero,84(sp)
2041e30a:	c882                	sw	zero,80(sp)
2041e30c:	b3cd                	j	2041e0ee <__multf3+0x998>
2041e30e:	67a1                	lui	a5,0x8
2041e310:	ce82                	sw	zero,92(sp)
2041e312:	cc82                	sw	zero,88(sp)
2041e314:	ca82                	sw	zero,84(sp)
2041e316:	c882                	sw	zero,80(sp)
2041e318:	17fd                	addi	a5,a5,-1
2041e31a:	bbd1                	j	2041e0ee <__multf3+0x998>
2041e31c:	67a1                	lui	a5,0x8
2041e31e:	cebe                	sw	a5,92(sp)
2041e320:	cc82                	sw	zero,88(sp)
2041e322:	ca82                	sw	zero,84(sp)
2041e324:	c882                	sw	zero,80(sp)
2041e326:	17fd                	addi	a5,a5,-1
2041e328:	ca02                	sw	zero,20(sp)
2041e32a:	b3d1                	j	2041e0ee <__multf3+0x998>

2041e32c <__subtf3>:
2041e32c:	711d                	addi	sp,sp,-96
2041e32e:	459c                	lw	a5,8(a1)
2041e330:	c8ca                	sw	s2,80(sp)
2041e332:	00c5a903          	lw	s2,12(a1)
2041e336:	4194                	lw	a3,0(a1)
2041e338:	41d8                	lw	a4,4(a1)
2041e33a:	caa6                	sw	s1,84(sp)
2041e33c:	dc3e                	sw	a5,56(sp)
2041e33e:	84aa                	mv	s1,a0
2041e340:	cc3e                	sw	a5,24(sp)
2041e342:	00062e83          	lw	t4,0(a2)
2041e346:	01091793          	slli	a5,s2,0x10
2041e34a:	00462e03          	lw	t3,4(a2)
2041e34e:	460c                	lw	a1,8(a2)
2041e350:	4648                	lw	a0,12(a2)
2041e352:	cca2                	sw	s0,88(sp)
2041e354:	83c1                	srli	a5,a5,0x10
2041e356:	00191413          	slli	s0,s2,0x1
2041e35a:	de4a                	sw	s2,60(sp)
2041e35c:	ce86                	sw	ra,92(sp)
2041e35e:	c6ce                	sw	s3,76(sp)
2041e360:	c4d2                	sw	s4,72(sp)
2041e362:	c2d6                	sw	s5,68(sp)
2041e364:	d836                	sw	a3,48(sp)
2041e366:	da3a                	sw	a4,52(sp)
2041e368:	c836                	sw	a3,16(sp)
2041e36a:	ca3a                	sw	a4,20(sp)
2041e36c:	ce3e                	sw	a5,28(sp)
2041e36e:	8045                	srli	s0,s0,0x11
2041e370:	01f95913          	srli	s2,s2,0x1f
2041e374:	01010313          	addi	t1,sp,16
2041e378:	01c10813          	addi	a6,sp,28
2041e37c:	00082783          	lw	a5,0(a6)
2041e380:	ffc82703          	lw	a4,-4(a6)
2041e384:	1871                	addi	a6,a6,-4
2041e386:	078e                	slli	a5,a5,0x3
2041e388:	8375                	srli	a4,a4,0x1d
2041e38a:	8fd9                	or	a5,a5,a4
2041e38c:	00f82223          	sw	a5,4(a6)
2041e390:	ff0316e3          	bne	t1,a6,2041e37c <__subtf3+0x50>
2041e394:	46c2                	lw	a3,16(sp)
2041e396:	01051793          	slli	a5,a0,0x10
2041e39a:	00151613          	slli	a2,a0,0x1
2041e39e:	00369893          	slli	a7,a3,0x3
2041e3a2:	83c1                	srli	a5,a5,0x10
2041e3a4:	da72                	sw	t3,52(sp)
2041e3a6:	dc2e                	sw	a1,56(sp)
2041e3a8:	de2a                	sw	a0,60(sp)
2041e3aa:	d272                	sw	t3,36(sp)
2041e3ac:	d42e                	sw	a1,40(sp)
2041e3ae:	c846                	sw	a7,16(sp)
2041e3b0:	d876                	sw	t4,48(sp)
2041e3b2:	d076                	sw	t4,32(sp)
2041e3b4:	d63e                	sw	a5,44(sp)
2041e3b6:	8245                	srli	a2,a2,0x11
2041e3b8:	817d                	srli	a0,a0,0x1f
2041e3ba:	100c                	addi	a1,sp,32
2041e3bc:	02c10e13          	addi	t3,sp,44
2041e3c0:	000e2783          	lw	a5,0(t3)
2041e3c4:	ffce2703          	lw	a4,-4(t3)
2041e3c8:	1e71                	addi	t3,t3,-4
2041e3ca:	078e                	slli	a5,a5,0x3
2041e3cc:	8375                	srli	a4,a4,0x1d
2041e3ce:	8fd9                	or	a5,a5,a4
2041e3d0:	00fe2223          	sw	a5,4(t3)
2041e3d4:	ffc596e3          	bne	a1,t3,2041e3c0 <__subtf3+0x94>
2041e3d8:	5782                	lw	a5,32(sp)
2041e3da:	6721                	lui	a4,0x8
2041e3dc:	177d                	addi	a4,a4,-1
2041e3de:	078e                	slli	a5,a5,0x3
2041e3e0:	d03e                	sw	a5,32(sp)
2041e3e2:	00e61963          	bne	a2,a4,2041e3f4 <__subtf3+0xc8>
2041e3e6:	56a2                	lw	a3,40(sp)
2041e3e8:	5712                	lw	a4,36(sp)
2041e3ea:	8f55                	or	a4,a4,a3
2041e3ec:	56b2                	lw	a3,44(sp)
2041e3ee:	8f55                	or	a4,a4,a3
2041e3f0:	8f5d                	or	a4,a4,a5
2041e3f2:	e319                	bnez	a4,2041e3f8 <__subtf3+0xcc>
2041e3f4:	00154513          	xori	a0,a0,1
2041e3f8:	40c40733          	sub	a4,s0,a2
2041e3fc:	63251c63          	bne	a0,s2,2041ea34 <__subtf3+0x708>
2041e400:	20e05b63          	blez	a4,2041e616 <__subtf3+0x2ea>
2041e404:	ee71                	bnez	a2,2041e4e0 <__subtf3+0x1b4>
2041e406:	5312                	lw	t1,36(sp)
2041e408:	5822                	lw	a6,40(sp)
2041e40a:	5532                	lw	a0,44(sp)
2041e40c:	010366b3          	or	a3,t1,a6
2041e410:	8ec9                	or	a3,a3,a0
2041e412:	8edd                	or	a3,a3,a5
2041e414:	ea91                	bnez	a3,2041e428 <__subtf3+0xfc>
2041e416:	47d2                	lw	a5,20(sp)
2041e418:	d846                	sw	a7,48(sp)
2041e41a:	843a                	mv	s0,a4
2041e41c:	da3e                	sw	a5,52(sp)
2041e41e:	47e2                	lw	a5,24(sp)
2041e420:	dc3e                	sw	a5,56(sp)
2041e422:	47f2                	lw	a5,28(sp)
2041e424:	de3e                	sw	a5,60(sp)
2041e426:	ac39                	j	2041e644 <__subtf3+0x318>
2041e428:	fff70613          	addi	a2,a4,-1 # 7fff <__stack_size+0x77ff>
2041e42c:	ee41                	bnez	a2,2041e4c4 <__subtf3+0x198>
2041e42e:	4652                	lw	a2,20(sp)
2041e430:	00f886b3          	add	a3,a7,a5
2041e434:	0116b8b3          	sltu	a7,a3,a7
2041e438:	d836                	sw	a3,48(sp)
2041e43a:	00c306b3          	add	a3,t1,a2
2041e43e:	011685b3          	add	a1,a3,a7
2041e442:	00c6b6b3          	sltu	a3,a3,a2
2041e446:	8636                	mv	a2,a3
2041e448:	47e2                	lw	a5,24(sp)
2041e44a:	0115b6b3          	sltu	a3,a1,a7
2041e44e:	8ed1                	or	a3,a3,a2
2041e450:	00f80733          	add	a4,a6,a5
2041e454:	0ff6f693          	andi	a3,a3,255
2041e458:	00d70633          	add	a2,a4,a3
2041e45c:	00f737b3          	sltu	a5,a4,a5
2041e460:	873e                	mv	a4,a5
2041e462:	00d637b3          	sltu	a5,a2,a3
2041e466:	8fd9                	or	a5,a5,a4
2041e468:	4772                	lw	a4,28(sp)
2041e46a:	0ff7f793          	andi	a5,a5,255
2041e46e:	da2e                	sw	a1,52(sp)
2041e470:	953a                	add	a0,a0,a4
2041e472:	97aa                	add	a5,a5,a0
2041e474:	dc32                	sw	a2,56(sp)
2041e476:	de3e                	sw	a5,60(sp)
2041e478:	4405                	li	s0,1
2041e47a:	57f2                	lw	a5,60(sp)
2041e47c:	00c79693          	slli	a3,a5,0xc
2041e480:	1c06d263          	bgez	a3,2041e644 <__subtf3+0x318>
2041e484:	fff80737          	lui	a4,0xfff80
2041e488:	177d                	addi	a4,a4,-1
2041e48a:	8ff9                	and	a5,a5,a4
2041e48c:	de3e                	sw	a5,60(sp)
2041e48e:	57c2                	lw	a5,48(sp)
2041e490:	0405                	addi	s0,s0,1
2041e492:	1818                	addi	a4,sp,48
2041e494:	07fe                	slli	a5,a5,0x1f
2041e496:	4601                	li	a2,0
2041e498:	450d                	li	a0,3
2041e49a:	4314                	lw	a3,0(a4)
2041e49c:	434c                	lw	a1,4(a4)
2041e49e:	0605                	addi	a2,a2,1
2041e4a0:	8285                	srli	a3,a3,0x1
2041e4a2:	05fe                	slli	a1,a1,0x1f
2041e4a4:	8ecd                	or	a3,a3,a1
2041e4a6:	c314                	sw	a3,0(a4)
2041e4a8:	0711                	addi	a4,a4,4
2041e4aa:	fea618e3          	bne	a2,a0,2041e49a <__subtf3+0x16e>
2041e4ae:	5772                	lw	a4,60(sp)
2041e4b0:	00f037b3          	snez	a5,a5
2041e4b4:	8305                	srli	a4,a4,0x1
2041e4b6:	de3a                	sw	a4,60(sp)
2041e4b8:	5742                	lw	a4,48(sp)
2041e4ba:	8fd9                	or	a5,a5,a4
2041e4bc:	d83e                	sw	a5,48(sp)
2041e4be:	67a1                	lui	a5,0x8
2041e4c0:	17fd                	addi	a5,a5,-1
2041e4c2:	a395                	j	2041ea26 <__subtf3+0x6fa>
2041e4c4:	67a1                	lui	a5,0x8
2041e4c6:	17fd                	addi	a5,a5,-1
2041e4c8:	f4f707e3          	beq	a4,a5,2041e416 <__subtf3+0xea>
2041e4cc:	07400793          	li	a5,116
2041e4d0:	02c7dd63          	ble	a2,a5,2041e50a <__subtf3+0x1de>
2041e4d4:	4785                	li	a5,1
2041e4d6:	d602                	sw	zero,44(sp)
2041e4d8:	d402                	sw	zero,40(sp)
2041e4da:	d202                	sw	zero,36(sp)
2041e4dc:	d03e                	sw	a5,32(sp)
2041e4de:	a085                	j	2041e53e <__subtf3+0x212>
2041e4e0:	67a1                	lui	a5,0x8
2041e4e2:	17fd                	addi	a5,a5,-1
2041e4e4:	00f41963          	bne	s0,a5,2041e4f6 <__subtf3+0x1ca>
2041e4e8:	47d2                	lw	a5,20(sp)
2041e4ea:	d846                	sw	a7,48(sp)
2041e4ec:	da3e                	sw	a5,52(sp)
2041e4ee:	47e2                	lw	a5,24(sp)
2041e4f0:	dc3e                	sw	a5,56(sp)
2041e4f2:	47f2                	lw	a5,28(sp)
2041e4f4:	a985                	j	2041e964 <__subtf3+0x638>
2041e4f6:	57b2                	lw	a5,44(sp)
2041e4f8:	000806b7          	lui	a3,0x80
2041e4fc:	8fd5                	or	a5,a5,a3
2041e4fe:	d63e                	sw	a5,44(sp)
2041e500:	07400793          	li	a5,116
2041e504:	fce7c8e3          	blt	a5,a4,2041e4d4 <__subtf3+0x1a8>
2041e508:	863a                	mv	a2,a4
2041e50a:	40565693          	srai	a3,a2,0x5
2041e50e:	01f67713          	andi	a4,a2,31
2041e512:	4781                	li	a5,0
2041e514:	4601                	li	a2,0
2041e516:	00279513          	slli	a0,a5,0x2
2041e51a:	06d79963          	bne	a5,a3,2041e58c <__subtf3+0x260>
2041e51e:	e749                	bnez	a4,2041e5a8 <__subtf3+0x27c>
2041e520:	468d                	li	a3,3
2041e522:	8e9d                	sub	a3,a3,a5
2041e524:	06e6d963          	ble	a4,a3,2041e596 <__subtf3+0x26a>
2041e528:	4711                	li	a4,4
2041e52a:	40f707b3          	sub	a5,a4,a5
2041e52e:	4691                	li	a3,4
2041e530:	0cd79c63          	bne	a5,a3,2041e608 <__subtf3+0x2dc>
2041e534:	5782                	lw	a5,32(sp)
2041e536:	00c03633          	snez	a2,a2
2041e53a:	8e5d                	or	a2,a2,a5
2041e53c:	d032                	sw	a2,32(sp)
2041e53e:	47c2                	lw	a5,16(sp)
2041e540:	5602                	lw	a2,32(sp)
2041e542:	4752                	lw	a4,20(sp)
2041e544:	55a2                	lw	a1,40(sp)
2041e546:	963e                	add	a2,a2,a5
2041e548:	d832                	sw	a2,48(sp)
2041e54a:	00f63633          	sltu	a2,a2,a5
2041e54e:	5792                	lw	a5,36(sp)
2041e550:	5532                	lw	a0,44(sp)
2041e552:	97ba                	add	a5,a5,a4
2041e554:	00c786b3          	add	a3,a5,a2
2041e558:	00e7b7b3          	sltu	a5,a5,a4
2041e55c:	873e                	mv	a4,a5
2041e55e:	00c6b7b3          	sltu	a5,a3,a2
2041e562:	8fd9                	or	a5,a5,a4
2041e564:	4762                	lw	a4,24(sp)
2041e566:	0ff7f793          	andi	a5,a5,255
2041e56a:	da36                	sw	a3,52(sp)
2041e56c:	95ba                	add	a1,a1,a4
2041e56e:	00f586b3          	add	a3,a1,a5
2041e572:	4672                	lw	a2,28(sp)
2041e574:	00e5b733          	sltu	a4,a1,a4
2041e578:	00f6b7b3          	sltu	a5,a3,a5
2041e57c:	8fd9                	or	a5,a5,a4
2041e57e:	962a                	add	a2,a2,a0
2041e580:	0ff7f793          	andi	a5,a5,255
2041e584:	97b2                	add	a5,a5,a2
2041e586:	dc36                	sw	a3,56(sp)
2041e588:	de3e                	sw	a5,60(sp)
2041e58a:	bdc5                	j	2041e47a <__subtf3+0x14e>
2041e58c:	952e                	add	a0,a0,a1
2041e58e:	4108                	lw	a0,0(a0)
2041e590:	0785                	addi	a5,a5,1
2041e592:	8e49                	or	a2,a2,a0
2041e594:	b749                	j	2041e516 <__subtf3+0x1ea>
2041e596:	00ae0833          	add	a6,t3,a0
2041e59a:	00082803          	lw	a6,0(a6)
2041e59e:	0705                	addi	a4,a4,1
2041e5a0:	0e11                	addi	t3,t3,4
2041e5a2:	ff0e2e23          	sw	a6,-4(t3)
2041e5a6:	bfbd                	j	2041e524 <__subtf3+0x1f8>
2041e5a8:	04010813          	addi	a6,sp,64
2041e5ac:	00a806b3          	add	a3,a6,a0
2041e5b0:	fe06a683          	lw	a3,-32(a3) # 7ffe0 <__stack_size+0x7f7e0>
2041e5b4:	02000893          	li	a7,32
2041e5b8:	40e888b3          	sub	a7,a7,a4
2041e5bc:	011696b3          	sll	a3,a3,a7
2041e5c0:	8e55                	or	a2,a2,a3
2041e5c2:	468d                	li	a3,3
2041e5c4:	4301                	li	t1,0
2041e5c6:	8e9d                	sub	a3,a3,a5
2041e5c8:	00d34f63          	blt	t1,a3,2041e5e6 <__subtf3+0x2ba>
2041e5cc:	4511                	li	a0,4
2041e5ce:	40f507b3          	sub	a5,a0,a5
2041e5d2:	5532                	lw	a0,44(sp)
2041e5d4:	068a                	slli	a3,a3,0x2
2041e5d6:	04010893          	addi	a7,sp,64
2041e5da:	96c6                	add	a3,a3,a7
2041e5dc:	00e55733          	srl	a4,a0,a4
2041e5e0:	fee6a023          	sw	a4,-32(a3)
2041e5e4:	b7a9                	j	2041e52e <__subtf3+0x202>
2041e5e6:	00ae0eb3          	add	t4,t3,a0
2041e5ea:	000ea803          	lw	a6,0(t4)
2041e5ee:	004eae83          	lw	t4,4(t4)
2041e5f2:	0305                	addi	t1,t1,1
2041e5f4:	00e85833          	srl	a6,a6,a4
2041e5f8:	011e9eb3          	sll	t4,t4,a7
2041e5fc:	01d86833          	or	a6,a6,t4
2041e600:	010e2023          	sw	a6,0(t3)
2041e604:	0e11                	addi	t3,t3,4
2041e606:	b7c9                	j	2041e5c8 <__subtf3+0x29c>
2041e608:	00279713          	slli	a4,a5,0x2
2041e60c:	972e                	add	a4,a4,a1
2041e60e:	00072023          	sw	zero,0(a4) # fff80000 <pulp__FC+0xfff80001>
2041e612:	0785                	addi	a5,a5,1
2041e614:	bf31                	j	2041e530 <__subtf3+0x204>
2041e616:	2a070c63          	beqz	a4,2041e8ce <__subtf3+0x5a2>
2041e61a:	18041863          	bnez	s0,2041e7aa <__subtf3+0x47e>
2041e61e:	4552                	lw	a0,20(sp)
2041e620:	4e62                	lw	t3,24(sp)
2041e622:	4ef2                	lw	t4,28(sp)
2041e624:	01c566b3          	or	a3,a0,t3
2041e628:	01d6e6b3          	or	a3,a3,t4
2041e62c:	0116e6b3          	or	a3,a3,a7
2041e630:	10069363          	bnez	a3,2041e736 <__subtf3+0x40a>
2041e634:	d83e                	sw	a5,48(sp)
2041e636:	5792                	lw	a5,36(sp)
2041e638:	8432                	mv	s0,a2
2041e63a:	da3e                	sw	a5,52(sp)
2041e63c:	57a2                	lw	a5,40(sp)
2041e63e:	dc3e                	sw	a5,56(sp)
2041e640:	57b2                	lw	a5,44(sp)
2041e642:	de3e                	sw	a5,60(sp)
2041e644:	57c2                	lw	a5,48(sp)
2041e646:	0077f713          	andi	a4,a5,7
2041e64a:	cf05                	beqz	a4,2041e682 <__subtf3+0x356>
2041e64c:	00f7f713          	andi	a4,a5,15
2041e650:	4691                	li	a3,4
2041e652:	02d70863          	beq	a4,a3,2041e682 <__subtf3+0x356>
2041e656:	0791                	addi	a5,a5,4
2041e658:	0047b693          	sltiu	a3,a5,4
2041e65c:	d83e                	sw	a5,48(sp)
2041e65e:	57d2                	lw	a5,52(sp)
2041e660:	5762                	lw	a4,56(sp)
2041e662:	97b6                	add	a5,a5,a3
2041e664:	da3e                	sw	a5,52(sp)
2041e666:	00d7b7b3          	sltu	a5,a5,a3
2041e66a:	0ff7f693          	andi	a3,a5,255
2041e66e:	00e687b3          	add	a5,a3,a4
2041e672:	dc3e                	sw	a5,56(sp)
2041e674:	5772                	lw	a4,60(sp)
2041e676:	00d7b7b3          	sltu	a5,a5,a3
2041e67a:	0ff7f793          	andi	a5,a5,255
2041e67e:	97ba                	add	a5,a5,a4
2041e680:	de3e                	sw	a5,60(sp)
2041e682:	57f2                	lw	a5,60(sp)
2041e684:	00c79693          	slli	a3,a5,0xc
2041e688:	0006dc63          	bgez	a3,2041e6a0 <__subtf3+0x374>
2041e68c:	6721                	lui	a4,0x8
2041e68e:	0405                	addi	s0,s0,1
2041e690:	177d                	addi	a4,a4,-1
2041e692:	32e408e3          	beq	s0,a4,2041f1c2 <__subtf3+0xe96>
2041e696:	fff80737          	lui	a4,0xfff80
2041e69a:	177d                	addi	a4,a4,-1
2041e69c:	8ff9                	and	a5,a5,a4
2041e69e:	de3e                	sw	a5,60(sp)
2041e6a0:	181c                	addi	a5,sp,48
2041e6a2:	4681                	li	a3,0
2041e6a4:	458d                	li	a1,3
2041e6a6:	4398                	lw	a4,0(a5)
2041e6a8:	43d0                	lw	a2,4(a5)
2041e6aa:	0685                	addi	a3,a3,1
2041e6ac:	830d                	srli	a4,a4,0x3
2041e6ae:	0676                	slli	a2,a2,0x1d
2041e6b0:	8f51                	or	a4,a4,a2
2041e6b2:	c398                	sw	a4,0(a5)
2041e6b4:	0791                	addi	a5,a5,4
2041e6b6:	feb698e3          	bne	a3,a1,2041e6a6 <__subtf3+0x37a>
2041e6ba:	57f2                	lw	a5,60(sp)
2041e6bc:	66a1                	lui	a3,0x8
2041e6be:	0037d713          	srli	a4,a5,0x3
2041e6c2:	de3a                	sw	a4,60(sp)
2041e6c4:	fff68793          	addi	a5,a3,-1 # 7fff <__stack_size+0x77ff>
2041e6c8:	00f41e63          	bne	s0,a5,2041e6e4 <__subtf3+0x3b8>
2041e6cc:	5652                	lw	a2,52(sp)
2041e6ce:	57c2                	lw	a5,48(sp)
2041e6d0:	8fd1                	or	a5,a5,a2
2041e6d2:	5662                	lw	a2,56(sp)
2041e6d4:	8fd1                	or	a5,a5,a2
2041e6d6:	8fd9                	or	a5,a5,a4
2041e6d8:	c791                	beqz	a5,2041e6e4 <__subtf3+0x3b8>
2041e6da:	de36                	sw	a3,60(sp)
2041e6dc:	dc02                	sw	zero,56(sp)
2041e6de:	da02                	sw	zero,52(sp)
2041e6e0:	d802                	sw	zero,48(sp)
2041e6e2:	4901                	li	s2,0
2041e6e4:	57f2                	lw	a5,60(sp)
2041e6e6:	6521                	lui	a0,0x8
2041e6e8:	157d                	addi	a0,a0,-1
2041e6ea:	8d61                	and	a0,a0,s0
2041e6ec:	00e15403          	lhu	s0,14(sp)
2041e6f0:	00f11623          	sh	a5,12(sp)
2041e6f4:	77e1                	lui	a5,0xffff8
2041e6f6:	8c7d                	and	s0,s0,a5
2041e6f8:	8c49                	or	s0,s0,a0
2041e6fa:	00845793          	srli	a5,s0,0x8
2041e6fe:	00791713          	slli	a4,s2,0x7
2041e702:	07f7f913          	andi	s2,a5,127
2041e706:	57c2                	lw	a5,48(sp)
2041e708:	00811723          	sh	s0,14(sp)
2041e70c:	00e96933          	or	s2,s2,a4
2041e710:	c09c                	sw	a5,0(s1)
2041e712:	57d2                	lw	a5,52(sp)
2041e714:	012107a3          	sb	s2,15(sp)
2041e718:	40f6                	lw	ra,92(sp)
2041e71a:	c0dc                	sw	a5,4(s1)
2041e71c:	57e2                	lw	a5,56(sp)
2041e71e:	4466                	lw	s0,88(sp)
2041e720:	8526                	mv	a0,s1
2041e722:	c49c                	sw	a5,8(s1)
2041e724:	47b2                	lw	a5,12(sp)
2041e726:	4946                	lw	s2,80(sp)
2041e728:	49b6                	lw	s3,76(sp)
2041e72a:	c4dc                	sw	a5,12(s1)
2041e72c:	4a26                	lw	s4,72(sp)
2041e72e:	44d6                	lw	s1,84(sp)
2041e730:	4a96                	lw	s5,68(sp)
2041e732:	6125                	addi	sp,sp,96
2041e734:	8082                	ret
2041e736:	56fd                	li	a3,-1
2041e738:	04d71963          	bne	a4,a3,2041e78a <__subtf3+0x45e>
2041e73c:	5592                	lw	a1,36(sp)
2041e73e:	00f886b3          	add	a3,a7,a5
2041e742:	00f6b7b3          	sltu	a5,a3,a5
2041e746:	d836                	sw	a3,48(sp)
2041e748:	00b506b3          	add	a3,a0,a1
2041e74c:	00f68533          	add	a0,a3,a5
2041e750:	00b6b6b3          	sltu	a3,a3,a1
2041e754:	85b6                	mv	a1,a3
2041e756:	00f536b3          	sltu	a3,a0,a5
2041e75a:	57a2                	lw	a5,40(sp)
2041e75c:	8ecd                	or	a3,a3,a1
2041e75e:	00fe0733          	add	a4,t3,a5
2041e762:	0ff6f693          	andi	a3,a3,255
2041e766:	00d705b3          	add	a1,a4,a3
2041e76a:	00f737b3          	sltu	a5,a4,a5
2041e76e:	873e                	mv	a4,a5
2041e770:	00d5b7b3          	sltu	a5,a1,a3
2041e774:	8fd9                	or	a5,a5,a4
2041e776:	5732                	lw	a4,44(sp)
2041e778:	0ff7f793          	andi	a5,a5,255
2041e77c:	da2a                	sw	a0,52(sp)
2041e77e:	9eba                	add	t4,t4,a4
2041e780:	dc2e                	sw	a1,56(sp)
2041e782:	97f6                	add	a5,a5,t4
2041e784:	de3e                	sw	a5,60(sp)
2041e786:	8432                	mv	s0,a2
2041e788:	b9cd                	j	2041e47a <__subtf3+0x14e>
2041e78a:	66a1                	lui	a3,0x8
2041e78c:	16fd                	addi	a3,a3,-1
2041e78e:	ead603e3          	beq	a2,a3,2041e634 <__subtf3+0x308>
2041e792:	fff74713          	not	a4,a4
2041e796:	07400793          	li	a5,116
2041e79a:	02e7d763          	ble	a4,a5,2041e7c8 <__subtf3+0x49c>
2041e79e:	4785                	li	a5,1
2041e7a0:	ce02                	sw	zero,28(sp)
2041e7a2:	cc02                	sw	zero,24(sp)
2041e7a4:	ca02                	sw	zero,20(sp)
2041e7a6:	c83e                	sw	a5,16(sp)
2041e7a8:	a889                	j	2041e7fa <__subtf3+0x4ce>
2041e7aa:	66a1                	lui	a3,0x8
2041e7ac:	16fd                	addi	a3,a3,-1
2041e7ae:	e8d603e3          	beq	a2,a3,2041e634 <__subtf3+0x308>
2041e7b2:	47f2                	lw	a5,28(sp)
2041e7b4:	000806b7          	lui	a3,0x80
2041e7b8:	8fd5                	or	a5,a5,a3
2041e7ba:	ce3e                	sw	a5,28(sp)
2041e7bc:	f8c00793          	li	a5,-116
2041e7c0:	fcf74fe3          	blt	a4,a5,2041e79e <__subtf3+0x472>
2041e7c4:	40e00733          	neg	a4,a4
2041e7c8:	40575693          	srai	a3,a4,0x5
2041e7cc:	4581                	li	a1,0
2041e7ce:	8b7d                	andi	a4,a4,31
2041e7d0:	4781                	li	a5,0
2041e7d2:	00279513          	slli	a0,a5,0x2
2041e7d6:	06d79863          	bne	a5,a3,2041e846 <__subtf3+0x51a>
2041e7da:	e741                	bnez	a4,2041e862 <__subtf3+0x536>
2041e7dc:	468d                	li	a3,3
2041e7de:	8e9d                	sub	a3,a3,a5
2041e7e0:	06e6d863          	ble	a4,a3,2041e850 <__subtf3+0x524>
2041e7e4:	4711                	li	a4,4
2041e7e6:	40f707b3          	sub	a5,a4,a5
2041e7ea:	4691                	li	a3,4
2041e7ec:	0cd79a63          	bne	a5,a3,2041e8c0 <__subtf3+0x594>
2041e7f0:	47c2                	lw	a5,16(sp)
2041e7f2:	00b035b3          	snez	a1,a1
2041e7f6:	8ddd                	or	a1,a1,a5
2041e7f8:	c82e                	sw	a1,16(sp)
2041e7fa:	5782                	lw	a5,32(sp)
2041e7fc:	45c2                	lw	a1,16(sp)
2041e7fe:	5712                	lw	a4,36(sp)
2041e800:	4562                	lw	a0,24(sp)
2041e802:	95be                	add	a1,a1,a5
2041e804:	d82e                	sw	a1,48(sp)
2041e806:	00f5b5b3          	sltu	a1,a1,a5
2041e80a:	47d2                	lw	a5,20(sp)
2041e80c:	4872                	lw	a6,28(sp)
2041e80e:	97ba                	add	a5,a5,a4
2041e810:	00b786b3          	add	a3,a5,a1
2041e814:	00e7b7b3          	sltu	a5,a5,a4
2041e818:	873e                	mv	a4,a5
2041e81a:	00b6b7b3          	sltu	a5,a3,a1
2041e81e:	8fd9                	or	a5,a5,a4
2041e820:	5722                	lw	a4,40(sp)
2041e822:	0ff7f793          	andi	a5,a5,255
2041e826:	da36                	sw	a3,52(sp)
2041e828:	953a                	add	a0,a0,a4
2041e82a:	00f506b3          	add	a3,a0,a5
2041e82e:	55b2                	lw	a1,44(sp)
2041e830:	00e53733          	sltu	a4,a0,a4
2041e834:	00f6b7b3          	sltu	a5,a3,a5
2041e838:	8fd9                	or	a5,a5,a4
2041e83a:	95c2                	add	a1,a1,a6
2041e83c:	0ff7f793          	andi	a5,a5,255
2041e840:	dc36                	sw	a3,56(sp)
2041e842:	97ae                	add	a5,a5,a1
2041e844:	b781                	j	2041e784 <__subtf3+0x458>
2041e846:	951a                	add	a0,a0,t1
2041e848:	4108                	lw	a0,0(a0)
2041e84a:	0785                	addi	a5,a5,1
2041e84c:	8dc9                	or	a1,a1,a0
2041e84e:	b751                	j	2041e7d2 <__subtf3+0x4a6>
2041e850:	00a808b3          	add	a7,a6,a0
2041e854:	0008a883          	lw	a7,0(a7)
2041e858:	0705                	addi	a4,a4,1
2041e85a:	0811                	addi	a6,a6,4
2041e85c:	ff182e23          	sw	a7,-4(a6)
2041e860:	b741                	j	2041e7e0 <__subtf3+0x4b4>
2041e862:	04010f93          	addi	t6,sp,64
2041e866:	00af86b3          	add	a3,t6,a0
2041e86a:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <__stack_size+0x7f7d0>
2041e86e:	02000e13          	li	t3,32
2041e872:	40ee0e33          	sub	t3,t3,a4
2041e876:	01c696b3          	sll	a3,a3,t3
2041e87a:	8dd5                	or	a1,a1,a3
2041e87c:	468d                	li	a3,3
2041e87e:	4e81                	li	t4,0
2041e880:	8e9d                	sub	a3,a3,a5
2041e882:	00dece63          	blt	t4,a3,2041e89e <__subtf3+0x572>
2041e886:	4511                	li	a0,4
2041e888:	40f507b3          	sub	a5,a0,a5
2041e88c:	068a                	slli	a3,a3,0x2
2041e88e:	0088                	addi	a0,sp,64
2041e890:	96aa                	add	a3,a3,a0
2041e892:	4572                	lw	a0,28(sp)
2041e894:	00e55733          	srl	a4,a0,a4
2041e898:	fce6a823          	sw	a4,-48(a3)
2041e89c:	b7b9                	j	2041e7ea <__subtf3+0x4be>
2041e89e:	00a80f33          	add	t5,a6,a0
2041e8a2:	000f2883          	lw	a7,0(t5)
2041e8a6:	004f2f03          	lw	t5,4(t5)
2041e8aa:	0e85                	addi	t4,t4,1
2041e8ac:	00e8d8b3          	srl	a7,a7,a4
2041e8b0:	01cf1f33          	sll	t5,t5,t3
2041e8b4:	01e8e8b3          	or	a7,a7,t5
2041e8b8:	01182023          	sw	a7,0(a6)
2041e8bc:	0811                	addi	a6,a6,4
2041e8be:	b7d1                	j	2041e882 <__subtf3+0x556>
2041e8c0:	00279713          	slli	a4,a5,0x2
2041e8c4:	971a                	add	a4,a4,t1
2041e8c6:	00072023          	sw	zero,0(a4) # fff80000 <pulp__FC+0xfff80001>
2041e8ca:	0785                	addi	a5,a5,1
2041e8cc:	b705                	j	2041e7ec <__subtf3+0x4c0>
2041e8ce:	6f21                	lui	t5,0x8
2041e8d0:	00140593          	addi	a1,s0,1 # 800001 <__stack_size+0x7ff801>
2041e8d4:	ffff0e93          	addi	t4,t5,-1 # 7fff <__stack_size+0x77ff>
2041e8d8:	01d5f2b3          	and	t0,a1,t4
2041e8dc:	4f85                	li	t6,1
2041e8de:	5612                	lw	a2,36(sp)
2041e8e0:	5722                	lw	a4,40(sp)
2041e8e2:	5832                	lw	a6,44(sp)
2041e8e4:	46d2                	lw	a3,20(sp)
2041e8e6:	4e62                	lw	t3,24(sp)
2041e8e8:	4572                	lw	a0,28(sp)
2041e8ea:	03010313          	addi	t1,sp,48
2041e8ee:	0c5fcb63          	blt	t6,t0,2041e9c4 <__subtf3+0x698>
2041e8f2:	01c6e5b3          	or	a1,a3,t3
2041e8f6:	8dc9                	or	a1,a1,a0
2041e8f8:	0115e5b3          	or	a1,a1,a7
2041e8fc:	ec2d                	bnez	s0,2041e976 <__subtf3+0x64a>
2041e8fe:	e591                	bnez	a1,2041e90a <__subtf3+0x5de>
2041e900:	d83e                	sw	a5,48(sp)
2041e902:	da32                	sw	a2,52(sp)
2041e904:	dc3a                	sw	a4,56(sp)
2041e906:	de42                	sw	a6,60(sp)
2041e908:	bb35                	j	2041e644 <__subtf3+0x318>
2041e90a:	00e665b3          	or	a1,a2,a4
2041e90e:	0105e5b3          	or	a1,a1,a6
2041e912:	8ddd                	or	a1,a1,a5
2041e914:	e591                	bnez	a1,2041e920 <__subtf3+0x5f4>
2041e916:	d846                	sw	a7,48(sp)
2041e918:	da36                	sw	a3,52(sp)
2041e91a:	dc72                	sw	t3,56(sp)
2041e91c:	de2a                	sw	a0,60(sp)
2041e91e:	b31d                	j	2041e644 <__subtf3+0x318>
2041e920:	97c6                	add	a5,a5,a7
2041e922:	0117b8b3          	sltu	a7,a5,a7
2041e926:	9636                	add	a2,a2,a3
2041e928:	011605b3          	add	a1,a2,a7
2041e92c:	00d63633          	sltu	a2,a2,a3
2041e930:	0115b6b3          	sltu	a3,a1,a7
2041e934:	8ed1                	or	a3,a3,a2
2041e936:	0ff6f693          	andi	a3,a3,255
2041e93a:	da2e                	sw	a1,52(sp)
2041e93c:	01c705b3          	add	a1,a4,t3
2041e940:	d83e                	sw	a5,48(sp)
2041e942:	00d587b3          	add	a5,a1,a3
2041e946:	00d7b6b3          	sltu	a3,a5,a3
2041e94a:	01c5b733          	sltu	a4,a1,t3
2041e94e:	8ed9                	or	a3,a3,a4
2041e950:	dc3e                	sw	a5,56(sp)
2041e952:	0ff6f693          	andi	a3,a3,255
2041e956:	00a807b3          	add	a5,a6,a0
2041e95a:	97b6                	add	a5,a5,a3
2041e95c:	00c79613          	slli	a2,a5,0xc
2041e960:	00064463          	bltz	a2,2041e968 <__subtf3+0x63c>
2041e964:	de3e                	sw	a5,60(sp)
2041e966:	b9f9                	j	2041e644 <__subtf3+0x318>
2041e968:	fff80737          	lui	a4,0xfff80
2041e96c:	177d                	addi	a4,a4,-1
2041e96e:	8ff9                	and	a5,a5,a4
2041e970:	de3e                	sw	a5,60(sp)
2041e972:	4405                	li	s0,1
2041e974:	b9c1                	j	2041e644 <__subtf3+0x318>
2041e976:	e599                	bnez	a1,2041e984 <__subtf3+0x658>
2041e978:	d83e                	sw	a5,48(sp)
2041e97a:	da32                	sw	a2,52(sp)
2041e97c:	dc3a                	sw	a4,56(sp)
2041e97e:	de42                	sw	a6,60(sp)
2041e980:	8476                	mv	s0,t4
2041e982:	b1c9                	j	2041e644 <__subtf3+0x318>
2041e984:	8f51                	or	a4,a4,a2
2041e986:	01076733          	or	a4,a4,a6
2041e98a:	8fd9                	or	a5,a5,a4
2041e98c:	e791                	bnez	a5,2041e998 <__subtf3+0x66c>
2041e98e:	d846                	sw	a7,48(sp)
2041e990:	da36                	sw	a3,52(sp)
2041e992:	dc72                	sw	t3,56(sp)
2041e994:	de2a                	sw	a0,60(sp)
2041e996:	b7ed                	j	2041e980 <__subtf3+0x654>
2041e998:	de7a                	sw	t5,60(sp)
2041e99a:	dc02                	sw	zero,56(sp)
2041e99c:	da02                	sw	zero,52(sp)
2041e99e:	d802                	sw	zero,48(sp)
2041e9a0:	187c                	addi	a5,sp,60
2041e9a2:	4398                	lw	a4,0(a5)
2041e9a4:	ffc7a683          	lw	a3,-4(a5) # ffff7ffc <pulp__FC+0xffff7ffd>
2041e9a8:	17f1                	addi	a5,a5,-4
2041e9aa:	070e                	slli	a4,a4,0x3
2041e9ac:	82f5                	srli	a3,a3,0x1d
2041e9ae:	8f55                	or	a4,a4,a3
2041e9b0:	c3d8                	sw	a4,4(a5)
2041e9b2:	fef318e3          	bne	t1,a5,2041e9a2 <__subtf3+0x676>
2041e9b6:	57c2                	lw	a5,48(sp)
2041e9b8:	6421                	lui	s0,0x8
2041e9ba:	147d                	addi	s0,s0,-1
2041e9bc:	078e                	slli	a5,a5,0x3
2041e9be:	d83e                	sw	a5,48(sp)
2041e9c0:	4901                	li	s2,0
2041e9c2:	b149                	j	2041e644 <__subtf3+0x318>
2041e9c4:	97c6                	add	a5,a5,a7
2041e9c6:	0117b8b3          	sltu	a7,a5,a7
2041e9ca:	9636                	add	a2,a2,a3
2041e9cc:	01160eb3          	add	t4,a2,a7
2041e9d0:	00d63633          	sltu	a2,a2,a3
2041e9d4:	011eb6b3          	sltu	a3,t4,a7
2041e9d8:	8ed1                	or	a3,a3,a2
2041e9da:	0ff6f693          	andi	a3,a3,255
2041e9de:	9772                	add	a4,a4,t3
2041e9e0:	d83e                	sw	a5,48(sp)
2041e9e2:	00d707b3          	add	a5,a4,a3
2041e9e6:	00d7b6b3          	sltu	a3,a5,a3
2041e9ea:	01c73733          	sltu	a4,a4,t3
2041e9ee:	8ed9                	or	a3,a3,a4
2041e9f0:	0ff6f693          	andi	a3,a3,255
2041e9f4:	9542                	add	a0,a0,a6
2041e9f6:	dc3e                	sw	a5,56(sp)
2041e9f8:	00a687b3          	add	a5,a3,a0
2041e9fc:	de3e                	sw	a5,60(sp)
2041e9fe:	da76                	sw	t4,52(sp)
2041ea00:	879a                	mv	a5,t1
2041ea02:	4681                	li	a3,0
2041ea04:	450d                	li	a0,3
2041ea06:	4398                	lw	a4,0(a5)
2041ea08:	43d0                	lw	a2,4(a5)
2041ea0a:	0685                	addi	a3,a3,1
2041ea0c:	8305                	srli	a4,a4,0x1
2041ea0e:	067e                	slli	a2,a2,0x1f
2041ea10:	8f51                	or	a4,a4,a2
2041ea12:	c398                	sw	a4,0(a5)
2041ea14:	0791                	addi	a5,a5,4
2041ea16:	fea698e3          	bne	a3,a0,2041ea06 <__subtf3+0x6da>
2041ea1a:	57f2                	lw	a5,60(sp)
2041ea1c:	842e                	mv	s0,a1
2041ea1e:	8385                	srli	a5,a5,0x1
2041ea20:	de3e                	sw	a5,60(sp)
2041ea22:	67a1                	lui	a5,0x8
2041ea24:	17fd                	addi	a5,a5,-1
2041ea26:	c0f41fe3          	bne	s0,a5,2041e644 <__subtf3+0x318>
2041ea2a:	de02                	sw	zero,60(sp)
2041ea2c:	dc02                	sw	zero,56(sp)
2041ea2e:	da02                	sw	zero,52(sp)
2041ea30:	d802                	sw	zero,48(sp)
2041ea32:	b909                	j	2041e644 <__subtf3+0x318>
2041ea34:	1ce05963          	blez	a4,2041ec06 <__subtf3+0x8da>
2041ea38:	e24d                	bnez	a2,2041eada <__subtf3+0x7ae>
2041ea3a:	5512                	lw	a0,36(sp)
2041ea3c:	5622                	lw	a2,40(sp)
2041ea3e:	5332                	lw	t1,44(sp)
2041ea40:	00c56833          	or	a6,a0,a2
2041ea44:	00686833          	or	a6,a6,t1
2041ea48:	00f86833          	or	a6,a6,a5
2041ea4c:	9c0805e3          	beqz	a6,2041e416 <__subtf3+0xea>
2041ea50:	fff70693          	addi	a3,a4,-1 # fff7ffff <pulp__FC+0xfff80000>
2041ea54:	e6ad                	bnez	a3,2041eabe <__subtf3+0x792>
2041ea56:	4852                	lw	a6,20(sp)
2041ea58:	40f887b3          	sub	a5,a7,a5
2041ea5c:	00f8b733          	sltu	a4,a7,a5
2041ea60:	40a805b3          	sub	a1,a6,a0
2041ea64:	00b83e33          	sltu	t3,a6,a1
2041ea68:	8d99                	sub	a1,a1,a4
2041ea6a:	d83e                	sw	a5,48(sp)
2041ea6c:	da2e                	sw	a1,52(sp)
2041ea6e:	4701                	li	a4,0
2041ea70:	00f8f663          	bleu	a5,a7,2041ea7c <__subtf3+0x750>
2041ea74:	41050733          	sub	a4,a0,a6
2041ea78:	00173713          	seqz	a4,a4
2041ea7c:	4862                	lw	a6,24(sp)
2041ea7e:	01c76733          	or	a4,a4,t3
2041ea82:	40c805b3          	sub	a1,a6,a2
2041ea86:	00b83533          	sltu	a0,a6,a1
2041ea8a:	8d99                	sub	a1,a1,a4
2041ea8c:	dc2e                	sw	a1,56(sp)
2041ea8e:	c709                	beqz	a4,2041ea98 <__subtf3+0x76c>
2041ea90:	41060633          	sub	a2,a2,a6
2041ea94:	00163693          	seqz	a3,a2
2041ea98:	47f2                	lw	a5,28(sp)
2041ea9a:	8ec9                	or	a3,a3,a0
2041ea9c:	4405                	li	s0,1
2041ea9e:	406787b3          	sub	a5,a5,t1
2041eaa2:	40d786b3          	sub	a3,a5,a3
2041eaa6:	de36                	sw	a3,60(sp)
2041eaa8:	57f2                	lw	a5,60(sp)
2041eaaa:	00c79513          	slli	a0,a5,0xc
2041eaae:	b8055be3          	bgez	a0,2041e644 <__subtf3+0x318>
2041eab2:	00080737          	lui	a4,0x80
2041eab6:	177d                	addi	a4,a4,-1
2041eab8:	8ff9                	and	a5,a5,a4
2041eaba:	de3e                	sw	a5,60(sp)
2041eabc:	ab3d                	j	2041effa <__subtf3+0xcce>
2041eabe:	67a1                	lui	a5,0x8
2041eac0:	17fd                	addi	a5,a5,-1
2041eac2:	94f70ae3          	beq	a4,a5,2041e416 <__subtf3+0xea>
2041eac6:	07400793          	li	a5,116
2041eaca:	02d7d663          	ble	a3,a5,2041eaf6 <__subtf3+0x7ca>
2041eace:	4785                	li	a5,1
2041ead0:	d602                	sw	zero,44(sp)
2041ead2:	d402                	sw	zero,40(sp)
2041ead4:	d202                	sw	zero,36(sp)
2041ead6:	d03e                	sw	a5,32(sp)
2041ead8:	a881                	j	2041eb28 <__subtf3+0x7fc>
2041eada:	67a1                	lui	a5,0x8
2041eadc:	17fd                	addi	a5,a5,-1
2041eade:	a0f405e3          	beq	s0,a5,2041e4e8 <__subtf3+0x1bc>
2041eae2:	57b2                	lw	a5,44(sp)
2041eae4:	000806b7          	lui	a3,0x80
2041eae8:	8fd5                	or	a5,a5,a3
2041eaea:	d63e                	sw	a5,44(sp)
2041eaec:	07400793          	li	a5,116
2041eaf0:	fce7cfe3          	blt	a5,a4,2041eace <__subtf3+0x7a2>
2041eaf4:	86ba                	mv	a3,a4
2041eaf6:	4056d713          	srai	a4,a3,0x5
2041eafa:	4601                	li	a2,0
2041eafc:	8afd                	andi	a3,a3,31
2041eafe:	4781                	li	a5,0
2041eb00:	00279513          	slli	a0,a5,0x2
2041eb04:	06e79c63          	bne	a5,a4,2041eb7c <__subtf3+0x850>
2041eb08:	eac1                	bnez	a3,2041eb98 <__subtf3+0x86c>
2041eb0a:	470d                	li	a4,3
2041eb0c:	8f1d                	sub	a4,a4,a5
2041eb0e:	06d75c63          	ble	a3,a4,2041eb86 <__subtf3+0x85a>
2041eb12:	4711                	li	a4,4
2041eb14:	40f707b3          	sub	a5,a4,a5
2041eb18:	4691                	li	a3,4
2041eb1a:	0cd79f63          	bne	a5,a3,2041ebf8 <__subtf3+0x8cc>
2041eb1e:	5782                	lw	a5,32(sp)
2041eb20:	00c03633          	snez	a2,a2
2041eb24:	8e5d                	or	a2,a2,a5
2041eb26:	d032                	sw	a2,32(sp)
2041eb28:	46d2                	lw	a3,20(sp)
2041eb2a:	45c2                	lw	a1,16(sp)
2041eb2c:	5702                	lw	a4,32(sp)
2041eb2e:	5792                	lw	a5,36(sp)
2041eb30:	40e58733          	sub	a4,a1,a4
2041eb34:	40f687b3          	sub	a5,a3,a5
2041eb38:	00f6b633          	sltu	a2,a3,a5
2041eb3c:	00e5b6b3          	sltu	a3,a1,a4
2041eb40:	40d786b3          	sub	a3,a5,a3
2041eb44:	da36                	sw	a3,52(sp)
2041eb46:	d83a                	sw	a4,48(sp)
2041eb48:	4681                	li	a3,0
2041eb4a:	00e5f463          	bleu	a4,a1,2041eb52 <__subtf3+0x826>
2041eb4e:	0017b693          	seqz	a3,a5
2041eb52:	8ed1                	or	a3,a3,a2
2041eb54:	5722                	lw	a4,40(sp)
2041eb56:	4662                	lw	a2,24(sp)
2041eb58:	40e60733          	sub	a4,a2,a4
2041eb5c:	40d707b3          	sub	a5,a4,a3
2041eb60:	dc3e                	sw	a5,56(sp)
2041eb62:	00e635b3          	sltu	a1,a2,a4
2041eb66:	4601                	li	a2,0
2041eb68:	c299                	beqz	a3,2041eb6e <__subtf3+0x842>
2041eb6a:	00173613          	seqz	a2,a4
2041eb6e:	47f2                	lw	a5,28(sp)
2041eb70:	5732                	lw	a4,44(sp)
2041eb72:	8e4d                	or	a2,a2,a1
2041eb74:	8f99                	sub	a5,a5,a4
2041eb76:	8f91                	sub	a5,a5,a2
2041eb78:	de3e                	sw	a5,60(sp)
2041eb7a:	b73d                	j	2041eaa8 <__subtf3+0x77c>
2041eb7c:	952e                	add	a0,a0,a1
2041eb7e:	4108                	lw	a0,0(a0)
2041eb80:	0785                	addi	a5,a5,1
2041eb82:	8e49                	or	a2,a2,a0
2041eb84:	bfb5                	j	2041eb00 <__subtf3+0x7d4>
2041eb86:	00ae0833          	add	a6,t3,a0
2041eb8a:	00082803          	lw	a6,0(a6)
2041eb8e:	0685                	addi	a3,a3,1
2041eb90:	0e11                	addi	t3,t3,4
2041eb92:	ff0e2e23          	sw	a6,-4(t3)
2041eb96:	bfa5                	j	2041eb0e <__subtf3+0x7e2>
2041eb98:	04010813          	addi	a6,sp,64
2041eb9c:	00a80733          	add	a4,a6,a0
2041eba0:	fe072703          	lw	a4,-32(a4) # 7ffe0 <__stack_size+0x7f7e0>
2041eba4:	02000893          	li	a7,32
2041eba8:	40d888b3          	sub	a7,a7,a3
2041ebac:	01171733          	sll	a4,a4,a7
2041ebb0:	8e59                	or	a2,a2,a4
2041ebb2:	470d                	li	a4,3
2041ebb4:	4301                	li	t1,0
2041ebb6:	8f1d                	sub	a4,a4,a5
2041ebb8:	00e34f63          	blt	t1,a4,2041ebd6 <__subtf3+0x8aa>
2041ebbc:	4511                	li	a0,4
2041ebbe:	40f507b3          	sub	a5,a0,a5
2041ebc2:	5532                	lw	a0,44(sp)
2041ebc4:	070a                	slli	a4,a4,0x2
2041ebc6:	04010893          	addi	a7,sp,64
2041ebca:	9746                	add	a4,a4,a7
2041ebcc:	00d556b3          	srl	a3,a0,a3
2041ebd0:	fed72023          	sw	a3,-32(a4)
2041ebd4:	b791                	j	2041eb18 <__subtf3+0x7ec>
2041ebd6:	00ae0eb3          	add	t4,t3,a0
2041ebda:	000ea803          	lw	a6,0(t4)
2041ebde:	004eae83          	lw	t4,4(t4)
2041ebe2:	0305                	addi	t1,t1,1
2041ebe4:	00d85833          	srl	a6,a6,a3
2041ebe8:	011e9eb3          	sll	t4,t4,a7
2041ebec:	01d86833          	or	a6,a6,t4
2041ebf0:	010e2023          	sw	a6,0(t3)
2041ebf4:	0e11                	addi	t3,t3,4
2041ebf6:	b7c9                	j	2041ebb8 <__subtf3+0x88c>
2041ebf8:	00279713          	slli	a4,a5,0x2
2041ebfc:	972e                	add	a4,a4,a1
2041ebfe:	00072023          	sw	zero,0(a4)
2041ec02:	0785                	addi	a5,a5,1
2041ec04:	bf19                	j	2041eb1a <__subtf3+0x7ee>
2041ec06:	1e070063          	beqz	a4,2041ede6 <__subtf3+0xaba>
2041ec0a:	e455                	bnez	s0,2041ecb6 <__subtf3+0x98a>
2041ec0c:	4e52                	lw	t3,20(sp)
2041ec0e:	45e2                	lw	a1,24(sp)
2041ec10:	4ef2                	lw	t4,28(sp)
2041ec12:	00be66b3          	or	a3,t3,a1
2041ec16:	01d6e6b3          	or	a3,a3,t4
2041ec1a:	0116e6b3          	or	a3,a3,a7
2041ec1e:	ea99                	bnez	a3,2041ec34 <__subtf3+0x908>
2041ec20:	d83e                	sw	a5,48(sp)
2041ec22:	5792                	lw	a5,36(sp)
2041ec24:	8432                	mv	s0,a2
2041ec26:	da3e                	sw	a5,52(sp)
2041ec28:	57a2                	lw	a5,40(sp)
2041ec2a:	dc3e                	sw	a5,56(sp)
2041ec2c:	57b2                	lw	a5,44(sp)
2041ec2e:	de3e                	sw	a5,60(sp)
2041ec30:	892a                	mv	s2,a0
2041ec32:	bc09                	j	2041e644 <__subtf3+0x318>
2041ec34:	56fd                	li	a3,-1
2041ec36:	06d71063          	bne	a4,a3,2041ec96 <__subtf3+0x96a>
2041ec3a:	5312                	lw	t1,36(sp)
2041ec3c:	411786b3          	sub	a3,a5,a7
2041ec40:	00d7b733          	sltu	a4,a5,a3
2041ec44:	41c30833          	sub	a6,t1,t3
2041ec48:	010338b3          	sltu	a7,t1,a6
2041ec4c:	40e80833          	sub	a6,a6,a4
2041ec50:	d836                	sw	a3,48(sp)
2041ec52:	da42                	sw	a6,52(sp)
2041ec54:	4701                	li	a4,0
2041ec56:	00d7f663          	bleu	a3,a5,2041ec62 <__subtf3+0x936>
2041ec5a:	406e0733          	sub	a4,t3,t1
2041ec5e:	00173713          	seqz	a4,a4
2041ec62:	01176733          	or	a4,a4,a7
2041ec66:	58a2                	lw	a7,40(sp)
2041ec68:	4681                	li	a3,0
2041ec6a:	40b88833          	sub	a6,a7,a1
2041ec6e:	0108b333          	sltu	t1,a7,a6
2041ec72:	40e80833          	sub	a6,a6,a4
2041ec76:	dc42                	sw	a6,56(sp)
2041ec78:	c709                	beqz	a4,2041ec82 <__subtf3+0x956>
2041ec7a:	411585b3          	sub	a1,a1,a7
2041ec7e:	0015b693          	seqz	a3,a1
2041ec82:	57b2                	lw	a5,44(sp)
2041ec84:	0066e5b3          	or	a1,a3,t1
2041ec88:	41d787b3          	sub	a5,a5,t4
2041ec8c:	8f8d                	sub	a5,a5,a1
2041ec8e:	de3e                	sw	a5,60(sp)
2041ec90:	8432                	mv	s0,a2
2041ec92:	892a                	mv	s2,a0
2041ec94:	bd11                	j	2041eaa8 <__subtf3+0x77c>
2041ec96:	66a1                	lui	a3,0x8
2041ec98:	16fd                	addi	a3,a3,-1
2041ec9a:	f8d603e3          	beq	a2,a3,2041ec20 <__subtf3+0x8f4>
2041ec9e:	fff74713          	not	a4,a4
2041eca2:	07400793          	li	a5,116
2041eca6:	02e7d763          	ble	a4,a5,2041ecd4 <__subtf3+0x9a8>
2041ecaa:	4785                	li	a5,1
2041ecac:	ce02                	sw	zero,28(sp)
2041ecae:	cc02                	sw	zero,24(sp)
2041ecb0:	ca02                	sw	zero,20(sp)
2041ecb2:	c83e                	sw	a5,16(sp)
2041ecb4:	a889                	j	2041ed06 <__subtf3+0x9da>
2041ecb6:	66a1                	lui	a3,0x8
2041ecb8:	16fd                	addi	a3,a3,-1
2041ecba:	f6d603e3          	beq	a2,a3,2041ec20 <__subtf3+0x8f4>
2041ecbe:	47f2                	lw	a5,28(sp)
2041ecc0:	000806b7          	lui	a3,0x80
2041ecc4:	8fd5                	or	a5,a5,a3
2041ecc6:	ce3e                	sw	a5,28(sp)
2041ecc8:	f8c00793          	li	a5,-116
2041eccc:	fcf74fe3          	blt	a4,a5,2041ecaa <__subtf3+0x97e>
2041ecd0:	40e00733          	neg	a4,a4
2041ecd4:	40575693          	srai	a3,a4,0x5
2041ecd8:	4581                	li	a1,0
2041ecda:	8b7d                	andi	a4,a4,31
2041ecdc:	4781                	li	a5,0
2041ecde:	00279893          	slli	a7,a5,0x2
2041ece2:	06d79b63          	bne	a5,a3,2041ed58 <__subtf3+0xa2c>
2041ece6:	eb49                	bnez	a4,2041ed78 <__subtf3+0xa4c>
2041ece8:	468d                	li	a3,3
2041ecea:	8e9d                	sub	a3,a3,a5
2041ecec:	06e6dd63          	ble	a4,a3,2041ed66 <__subtf3+0xa3a>
2041ecf0:	4711                	li	a4,4
2041ecf2:	40f707b3          	sub	a5,a4,a5
2041ecf6:	4691                	li	a3,4
2041ecf8:	0ed79063          	bne	a5,a3,2041edd8 <__subtf3+0xaac>
2041ecfc:	47c2                	lw	a5,16(sp)
2041ecfe:	00b035b3          	snez	a1,a1
2041ed02:	8ddd                	or	a1,a1,a5
2041ed04:	c82e                	sw	a1,16(sp)
2041ed06:	5692                	lw	a3,36(sp)
2041ed08:	5802                	lw	a6,32(sp)
2041ed0a:	4742                	lw	a4,16(sp)
2041ed0c:	47d2                	lw	a5,20(sp)
2041ed0e:	40e80733          	sub	a4,a6,a4
2041ed12:	40f687b3          	sub	a5,a3,a5
2041ed16:	00f6b5b3          	sltu	a1,a3,a5
2041ed1a:	00e836b3          	sltu	a3,a6,a4
2041ed1e:	40d786b3          	sub	a3,a5,a3
2041ed22:	da36                	sw	a3,52(sp)
2041ed24:	d83a                	sw	a4,48(sp)
2041ed26:	4681                	li	a3,0
2041ed28:	00e87463          	bleu	a4,a6,2041ed30 <__subtf3+0xa04>
2041ed2c:	0017b693          	seqz	a3,a5
2041ed30:	8ecd                	or	a3,a3,a1
2041ed32:	4762                	lw	a4,24(sp)
2041ed34:	55a2                	lw	a1,40(sp)
2041ed36:	40e58733          	sub	a4,a1,a4
2041ed3a:	40d707b3          	sub	a5,a4,a3
2041ed3e:	dc3e                	sw	a5,56(sp)
2041ed40:	00e5b833          	sltu	a6,a1,a4
2041ed44:	4581                	li	a1,0
2041ed46:	c299                	beqz	a3,2041ed4c <__subtf3+0xa20>
2041ed48:	00173593          	seqz	a1,a4
2041ed4c:	57b2                	lw	a5,44(sp)
2041ed4e:	4772                	lw	a4,28(sp)
2041ed50:	0105e5b3          	or	a1,a1,a6
2041ed54:	8f99                	sub	a5,a5,a4
2041ed56:	bf1d                	j	2041ec8c <__subtf3+0x960>
2041ed58:	989a                	add	a7,a7,t1
2041ed5a:	0008a883          	lw	a7,0(a7)
2041ed5e:	0785                	addi	a5,a5,1
2041ed60:	0115e5b3          	or	a1,a1,a7
2041ed64:	bfad                	j	2041ecde <__subtf3+0x9b2>
2041ed66:	01180e33          	add	t3,a6,a7
2041ed6a:	000e2e03          	lw	t3,0(t3)
2041ed6e:	0705                	addi	a4,a4,1
2041ed70:	0811                	addi	a6,a6,4
2041ed72:	ffc82e23          	sw	t3,-4(a6)
2041ed76:	bf9d                	j	2041ecec <__subtf3+0x9c0>
2041ed78:	04010e13          	addi	t3,sp,64
2041ed7c:	011e06b3          	add	a3,t3,a7
2041ed80:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <__stack_size+0x7f7d0>
2041ed84:	02000e93          	li	t4,32
2041ed88:	40ee8eb3          	sub	t4,t4,a4
2041ed8c:	01d696b3          	sll	a3,a3,t4
2041ed90:	8dd5                	or	a1,a1,a3
2041ed92:	468d                	li	a3,3
2041ed94:	4f01                	li	t5,0
2041ed96:	8e9d                	sub	a3,a3,a5
2041ed98:	00df4f63          	blt	t5,a3,2041edb6 <__subtf3+0xa8a>
2041ed9c:	4811                	li	a6,4
2041ed9e:	40f807b3          	sub	a5,a6,a5
2041eda2:	4872                	lw	a6,28(sp)
2041eda4:	068a                	slli	a3,a3,0x2
2041eda6:	04010f93          	addi	t6,sp,64
2041edaa:	96fe                	add	a3,a3,t6
2041edac:	00e85733          	srl	a4,a6,a4
2041edb0:	fce6a823          	sw	a4,-48(a3)
2041edb4:	b789                	j	2041ecf6 <__subtf3+0x9ca>
2041edb6:	01180fb3          	add	t6,a6,a7
2041edba:	000fae03          	lw	t3,0(t6)
2041edbe:	004faf83          	lw	t6,4(t6)
2041edc2:	0f05                	addi	t5,t5,1
2041edc4:	00ee5e33          	srl	t3,t3,a4
2041edc8:	01df9fb3          	sll	t6,t6,t4
2041edcc:	01fe6e33          	or	t3,t3,t6
2041edd0:	01c82023          	sw	t3,0(a6)
2041edd4:	0811                	addi	a6,a6,4
2041edd6:	b7c9                	j	2041ed98 <__subtf3+0xa6c>
2041edd8:	00279713          	slli	a4,a5,0x2
2041eddc:	971a                	add	a4,a4,t1
2041edde:	00072023          	sw	zero,0(a4)
2041ede2:	0785                	addi	a5,a5,1
2041ede4:	bf11                	j	2041ecf8 <__subtf3+0x9cc>
2041ede6:	6fa1                	lui	t6,0x8
2041ede8:	00140693          	addi	a3,s0,1 # 8001 <__stack_size+0x7801>
2041edec:	ffff8293          	addi	t0,t6,-1 # 7fff <__stack_size+0x77ff>
2041edf0:	0056f6b3          	and	a3,a3,t0
2041edf4:	4805                	li	a6,1
2041edf6:	5592                	lw	a1,36(sp)
2041edf8:	4652                	lw	a2,20(sp)
2041edfa:	4362                	lw	t1,24(sp)
2041edfc:	4f72                	lw	t5,28(sp)
2041edfe:	5e22                	lw	t3,40(sp)
2041ee00:	5eb2                	lw	t4,44(sp)
2041ee02:	14d84d63          	blt	a6,a3,2041ef5c <__subtf3+0xc30>
2041ee06:	01c5e833          	or	a6,a1,t3
2041ee0a:	006666b3          	or	a3,a2,t1
2041ee0e:	01d86833          	or	a6,a6,t4
2041ee12:	01e6e6b3          	or	a3,a3,t5
2041ee16:	00f86833          	or	a6,a6,a5
2041ee1a:	0116e6b3          	or	a3,a3,a7
2041ee1e:	e879                	bnez	s0,2041eef4 <__subtf3+0xbc8>
2041ee20:	ea91                	bnez	a3,2041ee34 <__subtf3+0xb08>
2041ee22:	d83e                	sw	a5,48(sp)
2041ee24:	da2e                	sw	a1,52(sp)
2041ee26:	dc72                	sw	t3,56(sp)
2041ee28:	de76                	sw	t4,60(sp)
2041ee2a:	e00813e3          	bnez	a6,2041ec30 <__subtf3+0x904>
2041ee2e:	4401                	li	s0,0
2041ee30:	4901                	li	s2,0
2041ee32:	b881                	j	2041e682 <__subtf3+0x356>
2041ee34:	00081763          	bnez	a6,2041ee42 <__subtf3+0xb16>
2041ee38:	d846                	sw	a7,48(sp)
2041ee3a:	da32                	sw	a2,52(sp)
2041ee3c:	dc1a                	sw	t1,56(sp)
2041ee3e:	de7a                	sw	t5,60(sp)
2041ee40:	b011                	j	2041e644 <__subtf3+0x318>
2041ee42:	40f88833          	sub	a6,a7,a5
2041ee46:	40b602b3          	sub	t0,a2,a1
2041ee4a:	0108bfb3          	sltu	t6,a7,a6
2041ee4e:	005636b3          	sltu	a3,a2,t0
2041ee52:	41f282b3          	sub	t0,t0,t6
2041ee56:	d842                	sw	a6,48(sp)
2041ee58:	da16                	sw	t0,52(sp)
2041ee5a:	4f81                	li	t6,0
2041ee5c:	0108f663          	bleu	a6,a7,2041ee68 <__subtf3+0xb3c>
2041ee60:	40c58fb3          	sub	t6,a1,a2
2041ee64:	001fbf93          	seqz	t6,t6
2041ee68:	41c303b3          	sub	t2,t1,t3
2041ee6c:	00dfefb3          	or	t6,t6,a3
2041ee70:	41f38a33          	sub	s4,t2,t6
2041ee74:	dc52                	sw	s4,56(sp)
2041ee76:	00733ab3          	sltu	s5,t1,t2
2041ee7a:	4981                	li	s3,0
2041ee7c:	000f8463          	beqz	t6,2041ee84 <__subtf3+0xb58>
2041ee80:	0013b993          	seqz	s3,t2
2041ee84:	41df06b3          	sub	a3,t5,t4
2041ee88:	0159e9b3          	or	s3,s3,s5
2041ee8c:	413686b3          	sub	a3,a3,s3
2041ee90:	de36                	sw	a3,60(sp)
2041ee92:	00c69f93          	slli	t6,a3,0xc
2041ee96:	040fd563          	bgez	t6,2041eee0 <__subtf3+0xbb4>
2041ee9a:	411786b3          	sub	a3,a5,a7
2041ee9e:	40c58633          	sub	a2,a1,a2
2041eea2:	00d7b833          	sltu	a6,a5,a3
2041eea6:	41060833          	sub	a6,a2,a6
2041eeaa:	da42                	sw	a6,52(sp)
2041eeac:	d836                	sw	a3,48(sp)
2041eeae:	00c5b5b3          	sltu	a1,a1,a2
2041eeb2:	4801                	li	a6,0
2041eeb4:	00d7f463          	bleu	a3,a5,2041eebc <__subtf3+0xb90>
2041eeb8:	00163813          	seqz	a6,a2
2041eebc:	406e07b3          	sub	a5,t3,t1
2041eec0:	00b865b3          	or	a1,a6,a1
2041eec4:	00fe36b3          	sltu	a3,t3,a5
2041eec8:	8f8d                	sub	a5,a5,a1
2041eeca:	dc3e                	sw	a5,56(sp)
2041eecc:	c199                	beqz	a1,2041eed2 <__subtf3+0xba6>
2041eece:	0013b713          	seqz	a4,t2
2041eed2:	41ee87b3          	sub	a5,t4,t5
2041eed6:	8f55                	or	a4,a4,a3
2041eed8:	40e78733          	sub	a4,a5,a4
2041eedc:	de3a                	sw	a4,60(sp)
2041eede:	bb89                	j	2041ec30 <__subtf3+0x904>
2041eee0:	00586833          	or	a6,a6,t0
2041eee4:	01486833          	or	a6,a6,s4
2041eee8:	00d86833          	or	a6,a6,a3
2041eeec:	f40801e3          	beqz	a6,2041ee2e <__subtf3+0xb02>
2041eef0:	f54ff06f          	j	2041e644 <__subtf3+0x318>
2041eef4:	03010393          	addi	t2,sp,48
2041eef8:	ea9d                	bnez	a3,2041ef2e <__subtf3+0xc02>
2041eefa:	02081263          	bnez	a6,2041ef1e <__subtf3+0xbf2>
2041eefe:	de7e                	sw	t6,60(sp)
2041ef00:	dc02                	sw	zero,56(sp)
2041ef02:	da02                	sw	zero,52(sp)
2041ef04:	d802                	sw	zero,48(sp)
2041ef06:	187c                	addi	a5,sp,60
2041ef08:	4398                	lw	a4,0(a5)
2041ef0a:	ffc7a683          	lw	a3,-4(a5) # 7ffc <__stack_size+0x77fc>
2041ef0e:	17f1                	addi	a5,a5,-4
2041ef10:	070e                	slli	a4,a4,0x3
2041ef12:	82f5                	srli	a3,a3,0x1d
2041ef14:	8f55                	or	a4,a4,a3
2041ef16:	c3d8                	sw	a4,4(a5)
2041ef18:	fef398e3          	bne	t2,a5,2041ef08 <__subtf3+0xbdc>
2041ef1c:	bc69                	j	2041e9b6 <__subtf3+0x68a>
2041ef1e:	d83e                	sw	a5,48(sp)
2041ef20:	da2e                	sw	a1,52(sp)
2041ef22:	dc72                	sw	t3,56(sp)
2041ef24:	de76                	sw	t4,60(sp)
2041ef26:	892a                	mv	s2,a0
2041ef28:	8416                	mv	s0,t0
2041ef2a:	f1aff06f          	j	2041e644 <__subtf3+0x318>
2041ef2e:	00081763          	bnez	a6,2041ef3c <__subtf3+0xc10>
2041ef32:	d846                	sw	a7,48(sp)
2041ef34:	da32                	sw	a2,52(sp)
2041ef36:	dc1a                	sw	t1,56(sp)
2041ef38:	de7a                	sw	t5,60(sp)
2041ef3a:	b7fd                	j	2041ef28 <__subtf3+0xbfc>
2041ef3c:	de7e                	sw	t6,60(sp)
2041ef3e:	dc02                	sw	zero,56(sp)
2041ef40:	da02                	sw	zero,52(sp)
2041ef42:	d802                	sw	zero,48(sp)
2041ef44:	187c                	addi	a5,sp,60
2041ef46:	4398                	lw	a4,0(a5)
2041ef48:	ffc7a683          	lw	a3,-4(a5)
2041ef4c:	17f1                	addi	a5,a5,-4
2041ef4e:	070e                	slli	a4,a4,0x3
2041ef50:	82f5                	srli	a3,a3,0x1d
2041ef52:	8f55                	or	a4,a4,a3
2041ef54:	c3d8                	sw	a4,4(a5)
2041ef56:	fef398e3          	bne	t2,a5,2041ef46 <__subtf3+0xc1a>
2041ef5a:	bcb1                	j	2041e9b6 <__subtf3+0x68a>
2041ef5c:	40f88833          	sub	a6,a7,a5
2041ef60:	40b602b3          	sub	t0,a2,a1
2041ef64:	0108bfb3          	sltu	t6,a7,a6
2041ef68:	005636b3          	sltu	a3,a2,t0
2041ef6c:	41f282b3          	sub	t0,t0,t6
2041ef70:	d842                	sw	a6,48(sp)
2041ef72:	da16                	sw	t0,52(sp)
2041ef74:	4f81                	li	t6,0
2041ef76:	0108f663          	bleu	a6,a7,2041ef82 <__subtf3+0xc56>
2041ef7a:	40c58fb3          	sub	t6,a1,a2
2041ef7e:	001fbf93          	seqz	t6,t6
2041ef82:	41c303b3          	sub	t2,t1,t3
2041ef86:	00dfefb3          	or	t6,t6,a3
2041ef8a:	41f38a33          	sub	s4,t2,t6
2041ef8e:	dc52                	sw	s4,56(sp)
2041ef90:	00733ab3          	sltu	s5,t1,t2
2041ef94:	4981                	li	s3,0
2041ef96:	000f8463          	beqz	t6,2041ef9e <__subtf3+0xc72>
2041ef9a:	0013b993          	seqz	s3,t2
2041ef9e:	41df06b3          	sub	a3,t5,t4
2041efa2:	0159e9b3          	or	s3,s3,s5
2041efa6:	413686b3          	sub	a3,a3,s3
2041efaa:	de36                	sw	a3,60(sp)
2041efac:	00c69f93          	slli	t6,a3,0xc
2041efb0:	080fd663          	bgez	t6,2041f03c <__subtf3+0xd10>
2041efb4:	411786b3          	sub	a3,a5,a7
2041efb8:	40c58633          	sub	a2,a1,a2
2041efbc:	00d7b833          	sltu	a6,a5,a3
2041efc0:	41060833          	sub	a6,a2,a6
2041efc4:	da42                	sw	a6,52(sp)
2041efc6:	d836                	sw	a3,48(sp)
2041efc8:	00c5b5b3          	sltu	a1,a1,a2
2041efcc:	4801                	li	a6,0
2041efce:	00d7f463          	bleu	a3,a5,2041efd6 <__subtf3+0xcaa>
2041efd2:	00163813          	seqz	a6,a2
2041efd6:	406e07b3          	sub	a5,t3,t1
2041efda:	00b865b3          	or	a1,a6,a1
2041efde:	00fe36b3          	sltu	a3,t3,a5
2041efe2:	8f8d                	sub	a5,a5,a1
2041efe4:	dc3e                	sw	a5,56(sp)
2041efe6:	c199                	beqz	a1,2041efec <__subtf3+0xcc0>
2041efe8:	0013b713          	seqz	a4,t2
2041efec:	41ee87b3          	sub	a5,t4,t5
2041eff0:	8f55                	or	a4,a4,a3
2041eff2:	40e78733          	sub	a4,a5,a4
2041eff6:	de3a                	sw	a4,60(sp)
2041eff8:	892a                	mv	s2,a0
2041effa:	5572                	lw	a0,60(sp)
2041effc:	c929                	beqz	a0,2041f04e <__subtf3+0xd22>
2041effe:	061000ef          	jal	ra,2041f85e <__clzsi2>
2041f002:	1551                	addi	a0,a0,-12
2041f004:	02000693          	li	a3,32
2041f008:	02d56833          	rem	a6,a0,a3
2041f00c:	02d547b3          	div	a5,a0,a3
2041f010:	06080363          	beqz	a6,2041f076 <__subtf3+0xd4a>
2041f014:	5771                	li	a4,-4
2041f016:	00279593          	slli	a1,a5,0x2
2041f01a:	5e41                	li	t3,-16
2041f01c:	410686b3          	sub	a3,a3,a6
2041f020:	02e78733          	mul	a4,a5,a4
2041f024:	1771                	addi	a4,a4,-4
2041f026:	0dc71263          	bne	a4,t3,2041f0ea <__subtf3+0xdbe>
2041f02a:	5742                	lw	a4,48(sp)
2041f02c:	0094                	addi	a3,sp,64
2041f02e:	95b6                	add	a1,a1,a3
2041f030:	01071833          	sll	a6,a4,a6
2041f034:	17fd                	addi	a5,a5,-1
2041f036:	ff05a823          	sw	a6,-16(a1)
2041f03a:	a8a1                	j	2041f092 <__subtf3+0xd66>
2041f03c:	00586833          	or	a6,a6,t0
2041f040:	01486833          	or	a6,a6,s4
2041f044:	00d86833          	or	a6,a6,a3
2041f048:	de0803e3          	beqz	a6,2041ee2e <__subtf3+0xb02>
2041f04c:	b77d                	j	2041effa <__subtf3+0xcce>
2041f04e:	5562                	lw	a0,56(sp)
2041f050:	c511                	beqz	a0,2041f05c <__subtf3+0xd30>
2041f052:	00d000ef          	jal	ra,2041f85e <__clzsi2>
2041f056:	02050513          	addi	a0,a0,32 # 8020 <__stack_size+0x7820>
2041f05a:	b765                	j	2041f002 <__subtf3+0xcd6>
2041f05c:	5552                	lw	a0,52(sp)
2041f05e:	c511                	beqz	a0,2041f06a <__subtf3+0xd3e>
2041f060:	7fe000ef          	jal	ra,2041f85e <__clzsi2>
2041f064:	04050513          	addi	a0,a0,64
2041f068:	bf69                	j	2041f002 <__subtf3+0xcd6>
2041f06a:	5542                	lw	a0,48(sp)
2041f06c:	7f2000ef          	jal	ra,2041f85e <__clzsi2>
2041f070:	06050513          	addi	a0,a0,96
2041f074:	b779                	j	2041f002 <__subtf3+0xcd6>
2041f076:	5671                	li	a2,-4
2041f078:	02c78633          	mul	a2,a5,a2
2041f07c:	1818                	addi	a4,sp,48
2041f07e:	468d                	li	a3,3
2041f080:	00c705b3          	add	a1,a4,a2
2041f084:	45cc                	lw	a1,12(a1)
2041f086:	16fd                	addi	a3,a3,-1
2041f088:	1771                	addi	a4,a4,-4
2041f08a:	cb0c                	sw	a1,16(a4)
2041f08c:	fef6dae3          	ble	a5,a3,2041f080 <__subtf3+0xd54>
2041f090:	17fd                	addi	a5,a5,-1
2041f092:	56fd                	li	a3,-1
2041f094:	06d79e63          	bne	a5,a3,2041f110 <__subtf3+0xde4>
2041f098:	10854d63          	blt	a0,s0,2041f1b2 <__subtf3+0xe86>
2041f09c:	40850433          	sub	s0,a0,s0
2041f0a0:	02000713          	li	a4,32
2041f0a4:	0405                	addi	s0,s0,1
2041f0a6:	02e447b3          	div	a5,s0,a4
2041f0aa:	4501                	li	a0,0
2041f0ac:	02e46433          	rem	s0,s0,a4
2041f0b0:	4701                	li	a4,0
2041f0b2:	06f74863          	blt	a4,a5,2041f122 <__subtf3+0xdf6>
2041f0b6:	873e                	mv	a4,a5
2041f0b8:	0007d363          	bgez	a5,2041f0be <__subtf3+0xd92>
2041f0bc:	4701                	li	a4,0
2041f0be:	00279313          	slli	t1,a5,0x2
2041f0c2:	e049                	bnez	s0,2041f144 <__subtf3+0xe18>
2041f0c4:	468d                	li	a3,3
2041f0c6:	1818                	addi	a4,sp,48
2041f0c8:	8e9d                	sub	a3,a3,a5
2041f0ca:	0686d563          	ble	s0,a3,2041f134 <__subtf3+0xe08>
2041f0ce:	4711                	li	a4,4
2041f0d0:	40f707b3          	sub	a5,a4,a5
2041f0d4:	468d                	li	a3,3
2041f0d6:	0cf6d663          	ble	a5,a3,2041f1a2 <__subtf3+0xe76>
2041f0da:	5742                	lw	a4,48(sp)
2041f0dc:	00a037b3          	snez	a5,a0
2041f0e0:	4401                	li	s0,0
2041f0e2:	8fd9                	or	a5,a5,a4
2041f0e4:	d83e                	sw	a5,48(sp)
2041f0e6:	d5eff06f          	j	2041e644 <__subtf3+0x318>
2041f0ea:	1810                	addi	a2,sp,48
2041f0ec:	00e60333          	add	t1,a2,a4
2041f0f0:	00e588b3          	add	a7,a1,a4
2041f0f4:	98b2                	add	a7,a7,a2
2041f0f6:	00c32603          	lw	a2,12(t1)
2041f0fa:	01032303          	lw	t1,16(t1)
2041f0fe:	00d65633          	srl	a2,a2,a3
2041f102:	01031333          	sll	t1,t1,a6
2041f106:	00666633          	or	a2,a2,t1
2041f10a:	00c8a823          	sw	a2,16(a7)
2041f10e:	bf19                	j	2041f024 <__subtf3+0xcf8>
2041f110:	00279713          	slli	a4,a5,0x2
2041f114:	03010813          	addi	a6,sp,48
2041f118:	9742                	add	a4,a4,a6
2041f11a:	00072023          	sw	zero,0(a4)
2041f11e:	17fd                	addi	a5,a5,-1
2041f120:	bf95                	j	2041f094 <__subtf3+0xd68>
2041f122:	00271693          	slli	a3,a4,0x2
2041f126:	03010893          	addi	a7,sp,48
2041f12a:	96c6                	add	a3,a3,a7
2041f12c:	4294                	lw	a3,0(a3)
2041f12e:	0705                	addi	a4,a4,1
2041f130:	8d55                	or	a0,a0,a3
2041f132:	b741                	j	2041f0b2 <__subtf3+0xd86>
2041f134:	00670633          	add	a2,a4,t1
2041f138:	4210                	lw	a2,0(a2)
2041f13a:	0405                	addi	s0,s0,1
2041f13c:	0711                	addi	a4,a4,4
2041f13e:	fec72e23          	sw	a2,-4(a4)
2041f142:	b761                	j	2041f0ca <__subtf3+0xd9e>
2041f144:	070a                	slli	a4,a4,0x2
2041f146:	04010e13          	addi	t3,sp,64
2041f14a:	9772                	add	a4,a4,t3
2041f14c:	ff072703          	lw	a4,-16(a4)
2041f150:	02000613          	li	a2,32
2041f154:	8e01                	sub	a2,a2,s0
2041f156:	00c71733          	sll	a4,a4,a2
2041f15a:	8d59                	or	a0,a0,a4
2041f15c:	470d                	li	a4,3
2041f15e:	180c                	addi	a1,sp,48
2041f160:	4801                	li	a6,0
2041f162:	8f1d                	sub	a4,a4,a5
2041f164:	00e84f63          	blt	a6,a4,2041f182 <__subtf3+0xe56>
2041f168:	4691                	li	a3,4
2041f16a:	40f687b3          	sub	a5,a3,a5
2041f16e:	56f2                	lw	a3,60(sp)
2041f170:	070a                	slli	a4,a4,0x2
2041f172:	04010f93          	addi	t6,sp,64
2041f176:	977e                	add	a4,a4,t6
2041f178:	0086d433          	srl	s0,a3,s0
2041f17c:	fe872823          	sw	s0,-16(a4)
2041f180:	bf91                	j	2041f0d4 <__subtf3+0xda8>
2041f182:	006588b3          	add	a7,a1,t1
2041f186:	0008a683          	lw	a3,0(a7)
2041f18a:	0048a883          	lw	a7,4(a7)
2041f18e:	0805                	addi	a6,a6,1
2041f190:	0086d6b3          	srl	a3,a3,s0
2041f194:	00c898b3          	sll	a7,a7,a2
2041f198:	0116e6b3          	or	a3,a3,a7
2041f19c:	c194                	sw	a3,0(a1)
2041f19e:	0591                	addi	a1,a1,4
2041f1a0:	b7d1                	j	2041f164 <__subtf3+0xe38>
2041f1a2:	00279713          	slli	a4,a5,0x2
2041f1a6:	1810                	addi	a2,sp,48
2041f1a8:	9732                	add	a4,a4,a2
2041f1aa:	00072023          	sw	zero,0(a4)
2041f1ae:	0785                	addi	a5,a5,1
2041f1b0:	b71d                	j	2041f0d6 <__subtf3+0xdaa>
2041f1b2:	57f2                	lw	a5,60(sp)
2041f1b4:	fff80737          	lui	a4,0xfff80
2041f1b8:	177d                	addi	a4,a4,-1
2041f1ba:	8c09                	sub	s0,s0,a0
2041f1bc:	8ff9                	and	a5,a5,a4
2041f1be:	fa6ff06f          	j	2041e964 <__subtf3+0x638>
2041f1c2:	de02                	sw	zero,60(sp)
2041f1c4:	dc02                	sw	zero,56(sp)
2041f1c6:	da02                	sw	zero,52(sp)
2041f1c8:	d802                	sw	zero,48(sp)
2041f1ca:	cd6ff06f          	j	2041e6a0 <__subtf3+0x374>

2041f1ce <__fixtfsi>:
2041f1ce:	4158                	lw	a4,4(a0)
2041f1d0:	451c                	lw	a5,8(a0)
2041f1d2:	4550                	lw	a2,12(a0)
2041f1d4:	4114                	lw	a3,0(a0)
2041f1d6:	1101                	addi	sp,sp,-32
2041f1d8:	c23a                	sw	a4,4(sp)
2041f1da:	c43e                	sw	a5,8(sp)
2041f1dc:	ca3a                	sw	a4,20(sp)
2041f1de:	cc3e                	sw	a5,24(sp)
2041f1e0:	6711                	lui	a4,0x4
2041f1e2:	00161793          	slli	a5,a2,0x1
2041f1e6:	c036                	sw	a3,0(sp)
2041f1e8:	c836                	sw	a3,16(sp)
2041f1ea:	c632                	sw	a2,12(sp)
2041f1ec:	0117d693          	srli	a3,a5,0x11
2041f1f0:	ffe70793          	addi	a5,a4,-2 # 3ffe <__stack_size+0x37fe>
2041f1f4:	4501                	li	a0,0
2041f1f6:	00d7de63          	ble	a3,a5,2041f212 <__fixtfsi+0x44>
2041f1fa:	01d70793          	addi	a5,a4,29
2041f1fe:	01061593          	slli	a1,a2,0x10
2041f202:	827d                	srli	a2,a2,0x1f
2041f204:	00d7d963          	ble	a3,a5,2041f216 <__fixtfsi+0x48>
2041f208:	80000537          	lui	a0,0x80000
2041f20c:	fff54513          	not	a0,a0
2041f210:	9532                	add	a0,a0,a2
2041f212:	6105                	addi	sp,sp,32
2041f214:	8082                	ret
2041f216:	67c1                	lui	a5,0x10
2041f218:	81c1                	srli	a1,a1,0x10
2041f21a:	8ddd                	or	a1,a1,a5
2041f21c:	06f70793          	addi	a5,a4,111
2041f220:	8f95                	sub	a5,a5,a3
2041f222:	4057d713          	srai	a4,a5,0x5
2041f226:	ce2e                	sw	a1,28(sp)
2041f228:	8bfd                	andi	a5,a5,31
2041f22a:	efa5                	bnez	a5,2041f2a2 <__fixtfsi+0xd4>
2041f22c:	458d                	li	a1,3
2041f22e:	0814                	addi	a3,sp,16
2041f230:	00271513          	slli	a0,a4,0x2
2041f234:	8d99                	sub	a1,a1,a4
2041f236:	02f5d563          	ble	a5,a1,2041f260 <__fixtfsi+0x92>
2041f23a:	4791                	li	a5,4
2041f23c:	40e78733          	sub	a4,a5,a4
2041f240:	0814                	addi	a3,sp,16
2041f242:	00271793          	slli	a5,a4,0x2
2041f246:	97b6                	add	a5,a5,a3
2041f248:	4691                	li	a3,4
2041f24a:	0007a023          	sw	zero,0(a5) # 10000 <__stack_size+0xf800>
2041f24e:	0705                	addi	a4,a4,1
2041f250:	0791                	addi	a5,a5,4
2041f252:	fed71ce3          	bne	a4,a3,2041f24a <__fixtfsi+0x7c>
2041f256:	4542                	lw	a0,16(sp)
2041f258:	de4d                	beqz	a2,2041f212 <__fixtfsi+0x44>
2041f25a:	40a00533          	neg	a0,a0
2041f25e:	bf55                	j	2041f212 <__fixtfsi+0x44>
2041f260:	00a68833          	add	a6,a3,a0
2041f264:	00082803          	lw	a6,0(a6)
2041f268:	0785                	addi	a5,a5,1
2041f26a:	0691                	addi	a3,a3,4
2041f26c:	ff06ae23          	sw	a6,-4(a3)
2041f270:	b7d9                	j	2041f236 <__fixtfsi+0x68>
2041f272:	ff052683          	lw	a3,-16(a0) # 7ffffff0 <pulp__FC+0x7ffffff1>
2041f276:	ff072303          	lw	t1,-16(a4)
2041f27a:	011696b3          	sll	a3,a3,a7
2041f27e:	00f35333          	srl	t1,t1,a5
2041f282:	0066e6b3          	or	a3,a3,t1
2041f286:	c836                	sw	a3,16(sp)
2041f288:	4685                	li	a3,1
2041f28a:	ff06c4e3          	blt	a3,a6,2041f272 <__fixtfsi+0xa4>
2041f28e:	00168713          	addi	a4,a3,1
2041f292:	1008                	addi	a0,sp,32
2041f294:	068a                	slli	a3,a3,0x2
2041f296:	96aa                	add	a3,a3,a0
2041f298:	00f5d7b3          	srl	a5,a1,a5
2041f29c:	fef6a823          	sw	a5,-16(a3)
2041f2a0:	b745                	j	2041f240 <__fixtfsi+0x72>
2041f2a2:	00170513          	addi	a0,a4,1
2041f2a6:	480d                	li	a6,3
2041f2a8:	02010313          	addi	t1,sp,32
2041f2ac:	40e80833          	sub	a6,a6,a4
2041f2b0:	050a                	slli	a0,a0,0x2
2041f2b2:	02000893          	li	a7,32
2041f2b6:	070a                	slli	a4,a4,0x2
2041f2b8:	4681                	li	a3,0
2041f2ba:	951a                	add	a0,a0,t1
2041f2bc:	40f888b3          	sub	a7,a7,a5
2041f2c0:	971a                	add	a4,a4,t1
2041f2c2:	b7e1                	j	2041f28a <__fixtfsi+0xbc>

2041f2c4 <__floatsitf>:
2041f2c4:	7179                	addi	sp,sp,-48
2041f2c6:	d226                	sw	s1,36(sp)
2041f2c8:	d606                	sw	ra,44(sp)
2041f2ca:	d422                	sw	s0,40(sp)
2041f2cc:	d04a                	sw	s2,32(sp)
2041f2ce:	84aa                	mv	s1,a0
2041f2d0:	c9f1                	beqz	a1,2041f3a4 <__floatsitf+0xe0>
2041f2d2:	842e                	mv	s0,a1
2041f2d4:	01f5d913          	srli	s2,a1,0x1f
2041f2d8:	0005d463          	bgez	a1,2041f2e0 <__floatsitf+0x1c>
2041f2dc:	40b00433          	neg	s0,a1
2041f2e0:	8522                	mv	a0,s0
2041f2e2:	2bb5                	jal	2041f85e <__clzsi2>
2041f2e4:	05150593          	addi	a1,a0,81
2041f2e8:	6711                	lui	a4,0x4
2041f2ea:	0779                	addi	a4,a4,30
2041f2ec:	4055d793          	srai	a5,a1,0x5
2041f2f0:	c822                	sw	s0,16(sp)
2041f2f2:	ca02                	sw	zero,20(sp)
2041f2f4:	cc02                	sw	zero,24(sp)
2041f2f6:	ce02                	sw	zero,28(sp)
2041f2f8:	89fd                	andi	a1,a1,31
2041f2fa:	8f09                	sub	a4,a4,a0
2041f2fc:	c585                	beqz	a1,2041f324 <__floatsitf+0x60>
2041f2fe:	4689                	li	a3,2
2041f300:	0ad79063          	bne	a5,a3,2041f3a0 <__floatsitf+0xdc>
2041f304:	02000693          	li	a3,32
2041f308:	8e8d                	sub	a3,a3,a1
2041f30a:	00d456b3          	srl	a3,s0,a3
2041f30e:	ce36                	sw	a3,28(sp)
2041f310:	fff78693          	addi	a3,a5,-1
2041f314:	1010                	addi	a2,sp,32
2041f316:	078a                	slli	a5,a5,0x2
2041f318:	97b2                	add	a5,a5,a2
2041f31a:	00b41433          	sll	s0,s0,a1
2041f31e:	fe87a823          	sw	s0,-16(a5)
2041f322:	a839                	j	2041f340 <__floatsitf+0x7c>
2041f324:	468d                	li	a3,3
2041f326:	8e9d                	sub	a3,a3,a5
2041f328:	1010                	addi	a2,sp,32
2041f32a:	068a                	slli	a3,a3,0x2
2041f32c:	96b2                	add	a3,a3,a2
2041f32e:	ff06a683          	lw	a3,-16(a3)
2041f332:	4609                	li	a2,2
2041f334:	ce36                	sw	a3,28(sp)
2041f336:	4689                	li	a3,2
2041f338:	00c79463          	bne	a5,a2,2041f340 <__floatsitf+0x7c>
2041f33c:	cc22                	sw	s0,24(sp)
2041f33e:	4685                	li	a3,1
2041f340:	081c                	addi	a5,sp,16
2041f342:	00269613          	slli	a2,a3,0x2
2041f346:	963e                	add	a2,a2,a5
2041f348:	57fd                	li	a5,-1
2041f34a:	00062023          	sw	zero,0(a2)
2041f34e:	16fd                	addi	a3,a3,-1
2041f350:	1671                	addi	a2,a2,-4
2041f352:	fef69ce3          	bne	a3,a5,2041f34a <__floatsitf+0x86>
2041f356:	47f2                	lw	a5,28(sp)
2041f358:	66a1                	lui	a3,0x8
2041f35a:	16fd                	addi	a3,a3,-1
2041f35c:	8ef9                	and	a3,a3,a4
2041f35e:	00e15703          	lhu	a4,14(sp)
2041f362:	00f11623          	sh	a5,12(sp)
2041f366:	77e1                	lui	a5,0xffff8
2041f368:	8f7d                	and	a4,a4,a5
2041f36a:	8f55                	or	a4,a4,a3
2041f36c:	00875793          	srli	a5,a4,0x8
2041f370:	00e11723          	sh	a4,14(sp)
2041f374:	07f7f793          	andi	a5,a5,127
2041f378:	00791713          	slli	a4,s2,0x7
2041f37c:	8fd9                	or	a5,a5,a4
2041f37e:	00f107a3          	sb	a5,15(sp)
2041f382:	47c2                	lw	a5,16(sp)
2041f384:	50b2                	lw	ra,44(sp)
2041f386:	5422                	lw	s0,40(sp)
2041f388:	c09c                	sw	a5,0(s1)
2041f38a:	47d2                	lw	a5,20(sp)
2041f38c:	8526                	mv	a0,s1
2041f38e:	5902                	lw	s2,32(sp)
2041f390:	c0dc                	sw	a5,4(s1)
2041f392:	47e2                	lw	a5,24(sp)
2041f394:	c49c                	sw	a5,8(s1)
2041f396:	47b2                	lw	a5,12(sp)
2041f398:	c4dc                	sw	a5,12(s1)
2041f39a:	5492                	lw	s1,36(sp)
2041f39c:	6145                	addi	sp,sp,48
2041f39e:	8082                	ret
2041f3a0:	478d                	li	a5,3
2041f3a2:	b7bd                	j	2041f310 <__floatsitf+0x4c>
2041f3a4:	ce02                	sw	zero,28(sp)
2041f3a6:	cc02                	sw	zero,24(sp)
2041f3a8:	ca02                	sw	zero,20(sp)
2041f3aa:	c802                	sw	zero,16(sp)
2041f3ac:	4701                	li	a4,0
2041f3ae:	4901                	li	s2,0
2041f3b0:	b75d                	j	2041f356 <__floatsitf+0x92>

2041f3b2 <__extenddftf2>:
2041f3b2:	01465793          	srli	a5,a2,0x14
2041f3b6:	00100737          	lui	a4,0x100
2041f3ba:	177d                	addi	a4,a4,-1
2041f3bc:	7ff7f793          	andi	a5,a5,2047
2041f3c0:	7179                	addi	sp,sp,-48
2041f3c2:	8f71                	and	a4,a4,a2
2041f3c4:	00178693          	addi	a3,a5,1 # ffff8001 <pulp__FC+0xffff8002>
2041f3c8:	d422                	sw	s0,40(sp)
2041f3ca:	d226                	sw	s1,36(sp)
2041f3cc:	01f65413          	srli	s0,a2,0x1f
2041f3d0:	d606                	sw	ra,44(sp)
2041f3d2:	c82e                	sw	a1,16(sp)
2041f3d4:	ca3a                	sw	a4,20(sp)
2041f3d6:	ce02                	sw	zero,28(sp)
2041f3d8:	cc02                	sw	zero,24(sp)
2041f3da:	7ff6f693          	andi	a3,a3,2047
2041f3de:	4605                	li	a2,1
2041f3e0:	84aa                	mv	s1,a0
2041f3e2:	06d65563          	ble	a3,a2,2041f44c <__extenddftf2+0x9a>
2041f3e6:	6691                	lui	a3,0x4
2041f3e8:	c0068693          	addi	a3,a3,-1024 # 3c00 <__stack_size+0x3400>
2041f3ec:	0045d513          	srli	a0,a1,0x4
2041f3f0:	97b6                	add	a5,a5,a3
2041f3f2:	00475693          	srli	a3,a4,0x4
2041f3f6:	0772                	slli	a4,a4,0x1c
2041f3f8:	8f49                	or	a4,a4,a0
2041f3fa:	05f2                	slli	a1,a1,0x1c
2041f3fc:	ce36                	sw	a3,28(sp)
2041f3fe:	cc3a                	sw	a4,24(sp)
2041f400:	ca2e                	sw	a1,20(sp)
2041f402:	c802                	sw	zero,16(sp)
2041f404:	4772                	lw	a4,28(sp)
2041f406:	6521                	lui	a0,0x8
2041f408:	157d                	addi	a0,a0,-1
2041f40a:	8fe9                	and	a5,a5,a0
2041f40c:	00e15503          	lhu	a0,14(sp)
2041f410:	00e11623          	sh	a4,12(sp)
2041f414:	7761                	lui	a4,0xffff8
2041f416:	8d79                	and	a0,a0,a4
2041f418:	8fc9                	or	a5,a5,a0
2041f41a:	00f11723          	sh	a5,14(sp)
2041f41e:	0087d713          	srli	a4,a5,0x8
2041f422:	47c2                	lw	a5,16(sp)
2041f424:	00741613          	slli	a2,s0,0x7
2041f428:	07f77413          	andi	s0,a4,127
2041f42c:	c09c                	sw	a5,0(s1)
2041f42e:	47d2                	lw	a5,20(sp)
2041f430:	8c51                	or	s0,s0,a2
2041f432:	008107a3          	sb	s0,15(sp)
2041f436:	c0dc                	sw	a5,4(s1)
2041f438:	47e2                	lw	a5,24(sp)
2041f43a:	50b2                	lw	ra,44(sp)
2041f43c:	5422                	lw	s0,40(sp)
2041f43e:	c49c                	sw	a5,8(s1)
2041f440:	47b2                	lw	a5,12(sp)
2041f442:	8526                	mv	a0,s1
2041f444:	c4dc                	sw	a5,12(s1)
2041f446:	5492                	lw	s1,36(sp)
2041f448:	6145                	addi	sp,sp,48
2041f44a:	8082                	ret
2041f44c:	00b76533          	or	a0,a4,a1
2041f450:	e7cd                	bnez	a5,2041f4fa <__extenddftf2+0x148>
2041f452:	d94d                	beqz	a0,2041f404 <__extenddftf2+0x52>
2041f454:	c329                	beqz	a4,2041f496 <__extenddftf2+0xe4>
2041f456:	853a                	mv	a0,a4
2041f458:	2119                	jal	2041f85e <__clzsi2>
2041f45a:	03150693          	addi	a3,a0,49 # 8031 <__stack_size+0x7831>
2041f45e:	4056d713          	srai	a4,a3,0x5
2041f462:	8afd                	andi	a3,a3,31
2041f464:	ce8d                	beqz	a3,2041f49e <__extenddftf2+0xec>
2041f466:	5671                	li	a2,-4
2041f468:	02c70633          	mul	a2,a4,a2
2041f46c:	02000813          	li	a6,32
2041f470:	081c                	addi	a5,sp,16
2041f472:	5341                	li	t1,-16
2041f474:	40d80833          	sub	a6,a6,a3
2041f478:	1671                	addi	a2,a2,-4
2041f47a:	17f1                	addi	a5,a5,-4
2041f47c:	06661063          	bne	a2,t1,2041f4dc <__extenddftf2+0x12a>
2041f480:	101c                	addi	a5,sp,32
2041f482:	fff70613          	addi	a2,a4,-1 # ffff7fff <pulp__FC+0xffff8000>
2041f486:	070a                	slli	a4,a4,0x2
2041f488:	973e                	add	a4,a4,a5
2041f48a:	47c2                	lw	a5,16(sp)
2041f48c:	00d796b3          	sll	a3,a5,a3
2041f490:	fed72823          	sw	a3,-16(a4)
2041f494:	a025                	j	2041f4bc <__extenddftf2+0x10a>
2041f496:	26e1                	jal	2041f85e <__clzsi2>
2041f498:	02050513          	addi	a0,a0,32
2041f49c:	bf7d                	j	2041f45a <__extenddftf2+0xa8>
2041f49e:	5671                	li	a2,-4
2041f4a0:	02c70633          	mul	a2,a4,a2
2041f4a4:	0814                	addi	a3,sp,16
2041f4a6:	478d                	li	a5,3
2041f4a8:	00c685b3          	add	a1,a3,a2
2041f4ac:	45cc                	lw	a1,12(a1)
2041f4ae:	17fd                	addi	a5,a5,-1
2041f4b0:	16f1                	addi	a3,a3,-4
2041f4b2:	ca8c                	sw	a1,16(a3)
2041f4b4:	fee7dae3          	ble	a4,a5,2041f4a8 <__extenddftf2+0xf6>
2041f4b8:	fff70613          	addi	a2,a4,-1
2041f4bc:	00261713          	slli	a4,a2,0x2
2041f4c0:	080c                	addi	a1,sp,16
2041f4c2:	972e                	add	a4,a4,a1
2041f4c4:	57fd                	li	a5,-1
2041f4c6:	00072023          	sw	zero,0(a4)
2041f4ca:	167d                	addi	a2,a2,-1
2041f4cc:	1771                	addi	a4,a4,-4
2041f4ce:	fef61ce3          	bne	a2,a5,2041f4c6 <__extenddftf2+0x114>
2041f4d2:	6791                	lui	a5,0x4
2041f4d4:	c0c78793          	addi	a5,a5,-1012 # 3c0c <__stack_size+0x340c>
2041f4d8:	8f89                	sub	a5,a5,a0
2041f4da:	b72d                	j	2041f404 <__extenddftf2+0x52>
2041f4dc:	080c                	addi	a1,sp,16
2041f4de:	00c588b3          	add	a7,a1,a2
2041f4e2:	00c8a583          	lw	a1,12(a7)
2041f4e6:	0108a883          	lw	a7,16(a7)
2041f4ea:	0105d5b3          	srl	a1,a1,a6
2041f4ee:	00d898b3          	sll	a7,a7,a3
2041f4f2:	0115e5b3          	or	a1,a1,a7
2041f4f6:	cb8c                	sw	a1,16(a5)
2041f4f8:	b741                	j	2041f478 <__extenddftf2+0xc6>
2041f4fa:	67a1                	lui	a5,0x8
2041f4fc:	cd11                	beqz	a0,2041f518 <__extenddftf2+0x166>
2041f4fe:	01c71793          	slli	a5,a4,0x1c
2041f502:	0045d693          	srli	a3,a1,0x4
2041f506:	8fd5                	or	a5,a5,a3
2041f508:	cc3e                	sw	a5,24(sp)
2041f50a:	8311                	srli	a4,a4,0x4
2041f50c:	67a1                	lui	a5,0x8
2041f50e:	05f2                	slli	a1,a1,0x1c
2041f510:	8f5d                	or	a4,a4,a5
2041f512:	ca2e                	sw	a1,20(sp)
2041f514:	c802                	sw	zero,16(sp)
2041f516:	ce3a                	sw	a4,28(sp)
2041f518:	17fd                	addi	a5,a5,-1
2041f51a:	b5ed                	j	2041f404 <__extenddftf2+0x52>

2041f51c <__trunctfdf2>:
2041f51c:	454c                	lw	a1,12(a0)
2041f51e:	451c                	lw	a5,8(a0)
2041f520:	4158                	lw	a4,4(a0)
2041f522:	1101                	addi	sp,sp,-32
2041f524:	4114                	lw	a3,0(a0)
2041f526:	c43e                	sw	a5,8(sp)
2041f528:	cc3e                	sw	a5,24(sp)
2041f52a:	01059793          	slli	a5,a1,0x10
2041f52e:	c23a                	sw	a4,4(sp)
2041f530:	ca3a                	sw	a4,20(sp)
2041f532:	83c1                	srli	a5,a5,0x10
2041f534:	00159713          	slli	a4,a1,0x1
2041f538:	c62e                	sw	a1,12(sp)
2041f53a:	c036                	sw	a3,0(sp)
2041f53c:	c836                	sw	a3,16(sp)
2041f53e:	ce3e                	sw	a5,28(sp)
2041f540:	8345                	srli	a4,a4,0x11
2041f542:	81fd                	srli	a1,a1,0x1f
2041f544:	01010313          	addi	t1,sp,16
2041f548:	0870                	addi	a2,sp,28
2041f54a:	421c                	lw	a5,0(a2)
2041f54c:	ffc62683          	lw	a3,-4(a2)
2041f550:	1671                	addi	a2,a2,-4
2041f552:	078e                	slli	a5,a5,0x3
2041f554:	82f5                	srli	a3,a3,0x1d
2041f556:	8fd5                	or	a5,a5,a3
2041f558:	c25c                	sw	a5,4(a2)
2041f55a:	fec318e3          	bne	t1,a2,2041f54a <__trunctfdf2+0x2e>
2041f55e:	46c2                	lw	a3,16(sp)
2041f560:	00170793          	addi	a5,a4,1
2041f564:	00369513          	slli	a0,a3,0x3
2041f568:	66a1                	lui	a3,0x8
2041f56a:	16fd                	addi	a3,a3,-1
2041f56c:	8ff5                	and	a5,a5,a3
2041f56e:	c82a                	sw	a0,16(sp)
2041f570:	4685                	li	a3,1
2041f572:	14f6d063          	ble	a5,a3,2041f6b2 <__trunctfdf2+0x196>
2041f576:	77f1                	lui	a5,0xffffc
2041f578:	40078793          	addi	a5,a5,1024 # ffffc400 <pulp__FC+0xffffc401>
2041f57c:	973e                	add	a4,a4,a5
2041f57e:	7fe00793          	li	a5,2046
2041f582:	16e7c663          	blt	a5,a4,2041f6ee <__trunctfdf2+0x1d2>
2041f586:	04e05863          	blez	a4,2041f5d6 <__trunctfdf2+0xba>
2041f58a:	47e2                	lw	a5,24(sp)
2041f58c:	4672                	lw	a2,28(sp)
2041f58e:	4852                	lw	a6,20(sp)
2041f590:	01c7d693          	srli	a3,a5,0x1c
2041f594:	0612                	slli	a2,a2,0x4
2041f596:	8e55                	or	a2,a2,a3
2041f598:	00481693          	slli	a3,a6,0x4
2041f59c:	8ec9                	or	a3,a3,a0
2041f59e:	0792                	slli	a5,a5,0x4
2041f5a0:	01c85813          	srli	a6,a6,0x1c
2041f5a4:	00d036b3          	snez	a3,a3
2041f5a8:	0107e7b3          	or	a5,a5,a6
2041f5ac:	8edd                	or	a3,a3,a5
2041f5ae:	ca32                	sw	a2,20(sp)
2041f5b0:	c836                	sw	a3,16(sp)
2041f5b2:	46c2                	lw	a3,16(sp)
2041f5b4:	47d2                	lw	a5,20(sp)
2041f5b6:	0076f613          	andi	a2,a3,7
2041f5ba:	12060e63          	beqz	a2,2041f6f6 <__trunctfdf2+0x1da>
2041f5be:	00f6f613          	andi	a2,a3,15
2041f5c2:	4511                	li	a0,4
2041f5c4:	12a60963          	beq	a2,a0,2041f6f6 <__trunctfdf2+0x1da>
2041f5c8:	00468613          	addi	a2,a3,4 # 8004 <__stack_size+0x7804>
2041f5cc:	00d636b3          	sltu	a3,a2,a3
2041f5d0:	97b6                	add	a5,a5,a3
2041f5d2:	86b2                	mv	a3,a2
2041f5d4:	a20d                	j	2041f6f6 <__trunctfdf2+0x1da>
2041f5d6:	fcc00793          	li	a5,-52
2041f5da:	00f75663          	ble	a5,a4,2041f5e6 <__trunctfdf2+0xca>
2041f5de:	ca02                	sw	zero,20(sp)
2041f5e0:	c836                	sw	a3,16(sp)
2041f5e2:	4701                	li	a4,0
2041f5e4:	b7f9                	j	2041f5b2 <__trunctfdf2+0x96>
2041f5e6:	47f2                	lw	a5,28(sp)
2041f5e8:	000806b7          	lui	a3,0x80
2041f5ec:	4881                	li	a7,0
2041f5ee:	8fd5                	or	a5,a5,a3
2041f5f0:	ce3e                	sw	a5,28(sp)
2041f5f2:	03d00793          	li	a5,61
2041f5f6:	40e78733          	sub	a4,a5,a4
2041f5fa:	40575513          	srai	a0,a4,0x5
2041f5fe:	879a                	mv	a5,t1
2041f600:	8b7d                	andi	a4,a4,31
2041f602:	4681                	li	a3,0
2041f604:	0007a803          	lw	a6,0(a5)
2041f608:	0685                	addi	a3,a3,1
2041f60a:	0791                	addi	a5,a5,4
2041f60c:	0108e8b3          	or	a7,a7,a6
2041f610:	fed51ae3          	bne	a0,a3,2041f604 <__trunctfdf2+0xe8>
2041f614:	00269e93          	slli	t4,a3,0x2
2041f618:	ef1d                	bnez	a4,2041f656 <__trunctfdf2+0x13a>
2041f61a:	478d                	li	a5,3
2041f61c:	8f95                	sub	a5,a5,a3
2041f61e:	02e7d463          	ble	a4,a5,2041f646 <__trunctfdf2+0x12a>
2041f622:	4791                	li	a5,4
2041f624:	40d786b3          	sub	a3,a5,a3
2041f628:	4711                	li	a4,4
2041f62a:	00269793          	slli	a5,a3,0x2
2041f62e:	979a                	add	a5,a5,t1
2041f630:	0007a023          	sw	zero,0(a5)
2041f634:	0685                	addi	a3,a3,1
2041f636:	fee69ae3          	bne	a3,a4,2041f62a <__trunctfdf2+0x10e>
2041f63a:	4742                	lw	a4,16(sp)
2041f63c:	011037b3          	snez	a5,a7
2041f640:	8fd9                	or	a5,a5,a4
2041f642:	c83e                	sw	a5,16(sp)
2041f644:	bf79                	j	2041f5e2 <__trunctfdf2+0xc6>
2041f646:	01d60533          	add	a0,a2,t4
2041f64a:	4108                	lw	a0,0(a0)
2041f64c:	0705                	addi	a4,a4,1
2041f64e:	0611                	addi	a2,a2,4
2041f650:	fea62e23          	sw	a0,-4(a2)
2041f654:	b7e9                	j	2041f61e <__trunctfdf2+0x102>
2041f656:	1008                	addi	a0,sp,32
2041f658:	01d507b3          	add	a5,a0,t4
2041f65c:	ff07a783          	lw	a5,-16(a5)
2041f660:	02000813          	li	a6,32
2041f664:	40e80833          	sub	a6,a6,a4
2041f668:	010797b3          	sll	a5,a5,a6
2041f66c:	00f8e8b3          	or	a7,a7,a5
2041f670:	478d                	li	a5,3
2041f672:	4e01                	li	t3,0
2041f674:	8f95                	sub	a5,a5,a3
2041f676:	00fe4e63          	blt	t3,a5,2041f692 <__trunctfdf2+0x176>
2041f67a:	4611                	li	a2,4
2041f67c:	40d606b3          	sub	a3,a2,a3
2041f680:	078a                	slli	a5,a5,0x2
2041f682:	1010                	addi	a2,sp,32
2041f684:	97b2                	add	a5,a5,a2
2041f686:	4672                	lw	a2,28(sp)
2041f688:	00e65733          	srl	a4,a2,a4
2041f68c:	fee7a823          	sw	a4,-16(a5)
2041f690:	bf61                	j	2041f628 <__trunctfdf2+0x10c>
2041f692:	01d60f33          	add	t5,a2,t4
2041f696:	000f2503          	lw	a0,0(t5)
2041f69a:	004f2f03          	lw	t5,4(t5)
2041f69e:	0e05                	addi	t3,t3,1
2041f6a0:	00e55533          	srl	a0,a0,a4
2041f6a4:	010f1f33          	sll	t5,t5,a6
2041f6a8:	01e56533          	or	a0,a0,t5
2041f6ac:	c208                	sw	a0,0(a2)
2041f6ae:	0611                	addi	a2,a2,4
2041f6b0:	b7d9                	j	2041f676 <__trunctfdf2+0x15a>
2041f6b2:	4652                	lw	a2,20(sp)
2041f6b4:	47e2                	lw	a5,24(sp)
2041f6b6:	4872                	lw	a6,28(sp)
2041f6b8:	00f666b3          	or	a3,a2,a5
2041f6bc:	0106e6b3          	or	a3,a3,a6
2041f6c0:	8ec9                	or	a3,a3,a0
2041f6c2:	e709                	bnez	a4,2041f6cc <__trunctfdf2+0x1b0>
2041f6c4:	00d036b3          	snez	a3,a3
2041f6c8:	4781                	li	a5,0
2041f6ca:	b5f5                	j	2041f5b6 <__trunctfdf2+0x9a>
2041f6cc:	cad1                	beqz	a3,2041f760 <__trunctfdf2+0x244>
2041f6ce:	01c65693          	srli	a3,a2,0x1c
2041f6d2:	0812                	slli	a6,a6,0x4
2041f6d4:	00479613          	slli	a2,a5,0x4
2041f6d8:	83f1                	srli	a5,a5,0x1c
2041f6da:	00400737          	lui	a4,0x400
2041f6de:	8ed1                	or	a3,a3,a2
2041f6e0:	0107e7b3          	or	a5,a5,a6
2041f6e4:	8fd9                	or	a5,a5,a4
2041f6e6:	9ae1                	andi	a3,a3,-8
2041f6e8:	7ff00713          	li	a4,2047
2041f6ec:	b5e9                	j	2041f5b6 <__trunctfdf2+0x9a>
2041f6ee:	4781                	li	a5,0
2041f6f0:	4681                	li	a3,0
2041f6f2:	7ff00713          	li	a4,2047
2041f6f6:	00879513          	slli	a0,a5,0x8
2041f6fa:	00055b63          	bgez	a0,2041f710 <__trunctfdf2+0x1f4>
2041f6fe:	0705                	addi	a4,a4,1
2041f700:	7ff00613          	li	a2,2047
2041f704:	06c70063          	beq	a4,a2,2041f764 <__trunctfdf2+0x248>
2041f708:	ff800637          	lui	a2,0xff800
2041f70c:	167d                	addi	a2,a2,-1
2041f70e:	8ff1                	and	a5,a5,a2
2041f710:	01d79613          	slli	a2,a5,0x1d
2041f714:	828d                	srli	a3,a3,0x3
2041f716:	8ed1                	or	a3,a3,a2
2041f718:	7ff00613          	li	a2,2047
2041f71c:	838d                	srli	a5,a5,0x3
2041f71e:	00c71963          	bne	a4,a2,2041f730 <__trunctfdf2+0x214>
2041f722:	8edd                	or	a3,a3,a5
2041f724:	4781                	li	a5,0
2041f726:	c689                	beqz	a3,2041f730 <__trunctfdf2+0x214>
2041f728:	000807b7          	lui	a5,0x80
2041f72c:	4681                	li	a3,0
2041f72e:	4581                	li	a1,0
2041f730:	00100637          	lui	a2,0x100
2041f734:	167d                	addi	a2,a2,-1
2041f736:	8ff1                	and	a5,a5,a2
2041f738:	80100637          	lui	a2,0x80100
2041f73c:	7ff77713          	andi	a4,a4,2047
2041f740:	167d                	addi	a2,a2,-1
2041f742:	0752                	slli	a4,a4,0x14
2041f744:	8ff1                	and	a5,a5,a2
2041f746:	8fd9                	or	a5,a5,a4
2041f748:	80000737          	lui	a4,0x80000
2041f74c:	fff74713          	not	a4,a4
2041f750:	05fe                	slli	a1,a1,0x1f
2041f752:	8ff9                	and	a5,a5,a4
2041f754:	00b7e733          	or	a4,a5,a1
2041f758:	8536                	mv	a0,a3
2041f75a:	85ba                	mv	a1,a4
2041f75c:	6105                	addi	sp,sp,32
2041f75e:	8082                	ret
2041f760:	4781                	li	a5,0
2041f762:	bf41                	j	2041f6f2 <__trunctfdf2+0x1d6>
2041f764:	4781                	li	a5,0
2041f766:	4681                	li	a3,0
2041f768:	b765                	j	2041f710 <__trunctfdf2+0x1f4>
	...

2041f76c <__mulsi3>:
2041f76c:	862a                	mv	a2,a0
2041f76e:	4501                	li	a0,0
2041f770:	0015f693          	andi	a3,a1,1
2041f774:	c291                	beqz	a3,2041f778 <__mulsi3+0xc>
2041f776:	9532                	add	a0,a0,a2
2041f778:	8185                	srli	a1,a1,0x1
2041f77a:	0606                	slli	a2,a2,0x1
2041f77c:	f9f5                	bnez	a1,2041f770 <__mulsi3+0x4>
2041f77e:	8082                	ret
2041f780:	0000                	unimp
	...

2041f784 <__muldi3>:
2041f784:	8286                	mv	t0,ra
2041f786:	8f2a                	mv	t5,a0
2041f788:	852e                	mv	a0,a1
2041f78a:	8fb6                	mv	t6,a3
2041f78c:	85fa                	mv	a1,t5
2041f78e:	8732                	mv	a4,a2
2041f790:	4781                	li	a5,0
2041f792:	4381                	li	t2,0
2041f794:	4e81                	li	t4,0
2041f796:	00b38833          	add	a6,t2,a1
2041f79a:	00177e13          	andi	t3,a4,1
2041f79e:	00179893          	slli	a7,a5,0x1
2041f7a2:	0005a313          	slti	t1,a1,0
2041f7a6:	8305                	srli	a4,a4,0x1
2041f7a8:	97f6                	add	a5,a5,t4
2041f7aa:	000e0763          	beqz	t3,2041f7b8 <__muldi3+0x34>
2041f7ae:	00783e33          	sltu	t3,a6,t2
2041f7b2:	83c2                	mv	t2,a6
2041f7b4:	00fe0eb3          	add	t4,t3,a5
2041f7b8:	0586                	slli	a1,a1,0x1
2041f7ba:	011367b3          	or	a5,t1,a7
2041f7be:	ff61                	bnez	a4,2041f796 <__muldi3+0x12>
2041f7c0:	c509                	beqz	a0,2041f7ca <__muldi3+0x46>
2041f7c2:	85b2                	mv	a1,a2
2041f7c4:	fa9ff0ef          	jal	ra,2041f76c <__mulsi3>
2041f7c8:	9eaa                	add	t4,t4,a0
2041f7ca:	000f8763          	beqz	t6,2041f7d8 <__muldi3+0x54>
2041f7ce:	85fe                	mv	a1,t6
2041f7d0:	857a                	mv	a0,t5
2041f7d2:	f9bff0ef          	jal	ra,2041f76c <__mulsi3>
2041f7d6:	9eaa                	add	t4,t4,a0
2041f7d8:	851e                	mv	a0,t2
2041f7da:	85f6                	mv	a1,t4
2041f7dc:	8282                	jr	t0
	...

2041f7e0 <__divsi3>:
2041f7e0:	02054e63          	bltz	a0,2041f81c <__umodsi3+0x8>
2041f7e4:	0405c363          	bltz	a1,2041f82a <__umodsi3+0x16>

2041f7e8 <__udivsi3>:
2041f7e8:	862e                	mv	a2,a1
2041f7ea:	85aa                	mv	a1,a0
2041f7ec:	557d                	li	a0,-1
2041f7ee:	c215                	beqz	a2,2041f812 <__udivsi3+0x2a>
2041f7f0:	4685                	li	a3,1
2041f7f2:	00b67863          	bleu	a1,a2,2041f802 <__udivsi3+0x1a>
2041f7f6:	00c05663          	blez	a2,2041f802 <__udivsi3+0x1a>
2041f7fa:	0606                	slli	a2,a2,0x1
2041f7fc:	0686                	slli	a3,a3,0x1
2041f7fe:	feb66ce3          	bltu	a2,a1,2041f7f6 <__udivsi3+0xe>
2041f802:	4501                	li	a0,0
2041f804:	00c5e463          	bltu	a1,a2,2041f80c <__udivsi3+0x24>
2041f808:	8d91                	sub	a1,a1,a2
2041f80a:	8d55                	or	a0,a0,a3
2041f80c:	8285                	srli	a3,a3,0x1
2041f80e:	8205                	srli	a2,a2,0x1
2041f810:	faf5                	bnez	a3,2041f804 <__udivsi3+0x1c>
2041f812:	8082                	ret

2041f814 <__umodsi3>:
2041f814:	8286                	mv	t0,ra
2041f816:	3fc9                	jal	2041f7e8 <__udivsi3>
2041f818:	852e                	mv	a0,a1
2041f81a:	8282                	jr	t0
2041f81c:	40a00533          	neg	a0,a0
2041f820:	0005d763          	bgez	a1,2041f82e <__umodsi3+0x1a>
2041f824:	40b005b3          	neg	a1,a1
2041f828:	b7c1                	j	2041f7e8 <__udivsi3>
2041f82a:	40b005b3          	neg	a1,a1
2041f82e:	8286                	mv	t0,ra
2041f830:	3f65                	jal	2041f7e8 <__udivsi3>
2041f832:	40a00533          	neg	a0,a0
2041f836:	8282                	jr	t0

2041f838 <__modsi3>:
2041f838:	8286                	mv	t0,ra
2041f83a:	0005c763          	bltz	a1,2041f848 <__modsi3+0x10>
2041f83e:	00054963          	bltz	a0,2041f850 <__modsi3+0x18>
2041f842:	375d                	jal	2041f7e8 <__udivsi3>
2041f844:	852e                	mv	a0,a1
2041f846:	8282                	jr	t0
2041f848:	40b005b3          	neg	a1,a1
2041f84c:	fe055be3          	bgez	a0,2041f842 <__modsi3+0xa>
2041f850:	40a00533          	neg	a0,a0
2041f854:	3f51                	jal	2041f7e8 <__udivsi3>
2041f856:	40b00533          	neg	a0,a1
2041f85a:	8282                	jr	t0
	...

2041f85e <__clzsi2>:
2041f85e:	67c1                	lui	a5,0x10
2041f860:	02f57663          	bleu	a5,a0,2041f88c <__clzsi2+0x2e>
2041f864:	0ff00793          	li	a5,255
2041f868:	00a7b7b3          	sltu	a5,a5,a0
2041f86c:	078e                	slli	a5,a5,0x3
2041f86e:	02000713          	li	a4,32
2041f872:	8f1d                	sub	a4,a4,a5
2041f874:	00f557b3          	srl	a5,a0,a5
2041f878:	20422537          	lui	a0,0x20422
2041f87c:	17050513          	addi	a0,a0,368 # 20422170 <__clz_tab>
2041f880:	97aa                	add	a5,a5,a0
2041f882:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xf800>
2041f886:	40a70533          	sub	a0,a4,a0
2041f88a:	8082                	ret
2041f88c:	01000737          	lui	a4,0x1000
2041f890:	47c1                	li	a5,16
2041f892:	fce56ee3          	bltu	a0,a4,2041f86e <__clzsi2+0x10>
2041f896:	47e1                	li	a5,24
2041f898:	bfd9                	j	2041f86e <__clzsi2+0x10>
