
rpc_server:     file format elf32-littleriscv


Disassembly of section .init:

20400000 <_start>:
_start:
	.cfi_startproc
	.cfi_undefined ra
.option push
.option norelax
	la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	1a018193          	addi	gp,gp,416 # 800011a0 <__global_pointer$>
.option pop
	la sp, _sp
20400008:	60c00117          	auipc	sp,0x60c00
2040000c:	ff810113          	addi	sp,sp,-8 # 81000000 <_sp>
 	la	a5, trap_entry
20400010:	00000797          	auipc	a5,0x0
20400014:	08c78793          	addi	a5,a5,140 # 2040009c <trap_entry>
 	csrw mtvec,a5
20400018:	30579073          	csrw	mtvec,a5
	/* Load data section */
	la a0, _data_lma
2040001c:	00023517          	auipc	a0,0x23
20400020:	8a050513          	addi	a0,a0,-1888 # 204228bc <__fini_array_end>
	la a1, _data
20400024:	5fc00597          	auipc	a1,0x5fc00
20400028:	fdc58593          	addi	a1,a1,-36 # 80000000 <_data>
	la a2, _edata
2040002c:	5fc01617          	auipc	a2,0x5fc01
20400030:	a3460613          	addi	a2,a2,-1484 # 80000a60 <_PathLocale>
	bgeu a1, a2, 2f
20400034:	00c5fc63          	bleu	a2,a1,2040004c <_start+0x4c>
1:
	lw t0, (a0)
20400038:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
2040003c:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
20400040:	00450513          	addi	a0,a0,4
	addi a1, a1, 4
20400044:	00458593          	addi	a1,a1,4
	bltu a1, a2, 1b
20400048:	fec5e8e3          	bltu	a1,a2,20400038 <_start+0x38>
2:

	/* Clear bss section */
	la a0, __bss_start
2040004c:	5fc01517          	auipc	a0,0x5fc01
20400050:	a1450513          	addi	a0,a0,-1516 # 80000a60 <_PathLocale>
	la a1, _end
20400054:	5fc01597          	auipc	a1,0x5fc01
20400058:	eac58593          	addi	a1,a1,-340 # 80000f00 <_end>
	bgeu a0, a1, 2f
2040005c:	00b57863          	bleu	a1,a0,2040006c <_start+0x6c>
1:
	sw zero, (a0)
20400060:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
20400064:	00450513          	addi	a0,a0,4
	bltu a0, a1, 1b
20400068:	feb56ce3          	bltu	a0,a1,20400060 <_start+0x60>
2:

	/* Call global constructors */
	la a0, __libc_fini_array
2040006c:	00013517          	auipc	a0,0x13
20400070:	1d850513          	addi	a0,a0,472 # 20413244 <__libc_fini_array>
	call atexit
20400074:	1a6130ef          	jal	ra,2041321a <atexit>
	call __libc_init_array
20400078:	31e130ef          	jal	ra,20413396 <__libc_init_array>

	auipc ra, 0
2040007c:	00000097          	auipc	ra,0x0
	addi sp, sp, -16
20400080:	ff010113          	addi	sp,sp,-16
#if __riscv_xlen == 32
	sw ra, 8(sp)
20400084:	00112423          	sw	ra,8(sp)
#else
	sd ra, 8(sp)
#endif

	/* argc = argv = 0 */
	li a0, 0
20400088:	00000513          	li	a0,0
	li a1, 0
2040008c:	00000593          	li	a1,0
	call main
20400090:	5b9000ef          	jal	ra,20400e48 <main>
	tail exit
20400094:	1921306f          	j	20413226 <exit>
1:
	j 1b
20400098:	0000006f          	j	20400098 <_start+0x98>

Disassembly of section .text:

2040009c <trap_entry>:

  .section      .text.entry
  .align 2
  .weak trap_entry
trap_entry:
  addi sp, sp, -32*REGBYTES
2040009c:	f8010113          	addi	sp,sp,-128

  STORE x1, 1*REGBYTES(sp)
204000a0:	00112223          	sw	ra,4(sp)
  STORE x2, 2*REGBYTES(sp)
204000a4:	00212423          	sw	sp,8(sp)
  STORE x3, 3*REGBYTES(sp)
204000a8:	00312623          	sw	gp,12(sp)
  STORE x4, 4*REGBYTES(sp)
204000ac:	00412823          	sw	tp,16(sp)
  STORE x5, 5*REGBYTES(sp)
204000b0:	00512a23          	sw	t0,20(sp)
  STORE x6, 6*REGBYTES(sp)
204000b4:	00612c23          	sw	t1,24(sp)
  STORE x7, 7*REGBYTES(sp)
204000b8:	00712e23          	sw	t2,28(sp)
  STORE x8, 8*REGBYTES(sp)
204000bc:	02812023          	sw	s0,32(sp)
  STORE x9, 9*REGBYTES(sp)
204000c0:	02912223          	sw	s1,36(sp)
  STORE x10, 10*REGBYTES(sp)
204000c4:	02a12423          	sw	a0,40(sp)
  STORE x11, 11*REGBYTES(sp)
204000c8:	02b12623          	sw	a1,44(sp)
  STORE x12, 12*REGBYTES(sp)
204000cc:	02c12823          	sw	a2,48(sp)
  STORE x13, 13*REGBYTES(sp)
204000d0:	02d12a23          	sw	a3,52(sp)
  STORE x14, 14*REGBYTES(sp)
204000d4:	02e12c23          	sw	a4,56(sp)
  STORE x15, 15*REGBYTES(sp)
204000d8:	02f12e23          	sw	a5,60(sp)
  STORE x16, 16*REGBYTES(sp)
204000dc:	05012023          	sw	a6,64(sp)
  STORE x17, 17*REGBYTES(sp)
204000e0:	05112223          	sw	a7,68(sp)
  STORE x18, 18*REGBYTES(sp)
204000e4:	05212423          	sw	s2,72(sp)
  STORE x19, 19*REGBYTES(sp)
204000e8:	05312623          	sw	s3,76(sp)
  STORE x20, 20*REGBYTES(sp)
204000ec:	05412823          	sw	s4,80(sp)
  STORE x21, 21*REGBYTES(sp)
204000f0:	05512a23          	sw	s5,84(sp)
  STORE x22, 22*REGBYTES(sp)
204000f4:	05612c23          	sw	s6,88(sp)
  STORE x23, 23*REGBYTES(sp)
204000f8:	05712e23          	sw	s7,92(sp)
  STORE x24, 24*REGBYTES(sp)
204000fc:	07812023          	sw	s8,96(sp)
  STORE x25, 25*REGBYTES(sp)
20400100:	07912223          	sw	s9,100(sp)
  STORE x26, 26*REGBYTES(sp)
20400104:	07a12423          	sw	s10,104(sp)
  STORE x27, 27*REGBYTES(sp)
20400108:	07b12623          	sw	s11,108(sp)
  STORE x28, 28*REGBYTES(sp)
2040010c:	07c12823          	sw	t3,112(sp)
  STORE x29, 29*REGBYTES(sp)
20400110:	07d12a23          	sw	t4,116(sp)
  STORE x30, 30*REGBYTES(sp)
20400114:	07e12c23          	sw	t5,120(sp)
  STORE x31, 31*REGBYTES(sp)
20400118:	07f12e23          	sw	t6,124(sp)

  csrr a0, mcause
2040011c:	34202573          	csrr	a0,mcause
  csrr a1, mepc
20400120:	341025f3          	csrr	a1,mepc
  mv a2, sp
20400124:	00010613          	mv	a2,sp
  call handle_trap
20400128:	2390b0ef          	jal	ra,2040bb60 <handle_trap>
  csrw mepc, a0
2040012c:	34151073          	csrw	mepc,a0

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
20400130:	000022b7          	lui	t0,0x2
20400134:	80028293          	addi	t0,t0,-2048 # 1800 <__stack_size-0x2800>
  csrs mstatus, t0
20400138:	3002a073          	csrs	mstatus,t0

  LOAD x1, 1*REGBYTES(sp)
2040013c:	00412083          	lw	ra,4(sp)
  LOAD x2, 2*REGBYTES(sp)
20400140:	00812103          	lw	sp,8(sp)
  LOAD x3, 3*REGBYTES(sp)
20400144:	00c12183          	lw	gp,12(sp)
  LOAD x4, 4*REGBYTES(sp)
20400148:	01012203          	lw	tp,16(sp)
  LOAD x5, 5*REGBYTES(sp)
2040014c:	01412283          	lw	t0,20(sp)
  LOAD x6, 6*REGBYTES(sp)
20400150:	01812303          	lw	t1,24(sp)
  LOAD x7, 7*REGBYTES(sp)
20400154:	01c12383          	lw	t2,28(sp)
  LOAD x8, 8*REGBYTES(sp)
20400158:	02012403          	lw	s0,32(sp)
  LOAD x9, 9*REGBYTES(sp)
2040015c:	02412483          	lw	s1,36(sp)
  LOAD x10, 10*REGBYTES(sp)
20400160:	02812503          	lw	a0,40(sp)
  LOAD x11, 11*REGBYTES(sp)
20400164:	02c12583          	lw	a1,44(sp)
  LOAD x12, 12*REGBYTES(sp)
20400168:	03012603          	lw	a2,48(sp)
  LOAD x13, 13*REGBYTES(sp)
2040016c:	03412683          	lw	a3,52(sp)
  LOAD x14, 14*REGBYTES(sp)
20400170:	03812703          	lw	a4,56(sp)
  LOAD x15, 15*REGBYTES(sp)
20400174:	03c12783          	lw	a5,60(sp)
  LOAD x16, 16*REGBYTES(sp)
20400178:	04012803          	lw	a6,64(sp)
  LOAD x17, 17*REGBYTES(sp)
2040017c:	04412883          	lw	a7,68(sp)
  LOAD x18, 18*REGBYTES(sp)
20400180:	04812903          	lw	s2,72(sp)
  LOAD x19, 19*REGBYTES(sp)
20400184:	04c12983          	lw	s3,76(sp)
  LOAD x20, 20*REGBYTES(sp)
20400188:	05012a03          	lw	s4,80(sp)
  LOAD x21, 21*REGBYTES(sp)
2040018c:	05412a83          	lw	s5,84(sp)
  LOAD x22, 22*REGBYTES(sp)
20400190:	05812b03          	lw	s6,88(sp)
  LOAD x23, 23*REGBYTES(sp)
20400194:	05c12b83          	lw	s7,92(sp)
  LOAD x24, 24*REGBYTES(sp)
20400198:	06012c03          	lw	s8,96(sp)
  LOAD x25, 25*REGBYTES(sp)
2040019c:	06412c83          	lw	s9,100(sp)
  LOAD x26, 26*REGBYTES(sp)
204001a0:	06812d03          	lw	s10,104(sp)
  LOAD x27, 27*REGBYTES(sp)
204001a4:	06c12d83          	lw	s11,108(sp)
  LOAD x28, 28*REGBYTES(sp)
204001a8:	07012e03          	lw	t3,112(sp)
  LOAD x29, 29*REGBYTES(sp)
204001ac:	07412e83          	lw	t4,116(sp)
  LOAD x30, 30*REGBYTES(sp)
204001b0:	07812f03          	lw	t5,120(sp)
  LOAD x31, 31*REGBYTES(sp)
204001b4:	07c12f83          	lw	t6,124(sp)

  addi sp, sp, 32*REGBYTES
204001b8:	08010113          	addi	sp,sp,128
  mret
204001bc:	30200073          	mret

.weak handle_trap
handle_trap:
1:
  j 1b
204001c0:	0000006f          	j	204001c0 <trap_entry+0x124>

204001c4 <advance_headtail_value>:
};

#pragma mark - Private Functions -

static inline size_t advance_headtail_value(size_t value, size_t max)
{
204001c4:	fe010113          	addi	sp,sp,-32
204001c8:	00112e23          	sw	ra,28(sp)
204001cc:	00812c23          	sw	s0,24(sp)
204001d0:	02010413          	addi	s0,sp,32
204001d4:	fea42623          	sw	a0,-20(s0)
204001d8:	feb42423          	sw	a1,-24(s0)
	return (value + 1) % max;
204001dc:	fec42783          	lw	a5,-20(s0)
204001e0:	00178793          	addi	a5,a5,1
204001e4:	fe842583          	lw	a1,-24(s0)
204001e8:	00078513          	mv	a0,a5
204001ec:	2ed1f0ef          	jal	ra,2041fcd8 <__umodsi3>
204001f0:	00050793          	mv	a5,a0
}
204001f4:	00078513          	mv	a0,a5
204001f8:	01c12083          	lw	ra,28(sp)
204001fc:	01812403          	lw	s0,24(sp)
20400200:	02010113          	addi	sp,sp,32
20400204:	00008067          	ret

20400208 <advance_head_pointer>:

static void advance_head_pointer(cbuf_handle_t me)
{
20400208:	fe010113          	addi	sp,sp,-32
2040020c:	00112e23          	sw	ra,28(sp)
20400210:	00812c23          	sw	s0,24(sp)
20400214:	02010413          	addi	s0,sp,32
20400218:	fea42623          	sw	a0,-20(s0)
	assert(me);
2040021c:	fec42783          	lw	a5,-20(s0)
20400220:	02079263          	bnez	a5,20400244 <advance_head_pointer+0x3c>
20400224:	00020697          	auipc	a3,0x20
20400228:	b3c68693          	addi	a3,a3,-1220 # 2041fd60 <__clzsi2+0x3e>
2040022c:	00020617          	auipc	a2,0x20
20400230:	bb060613          	addi	a2,a2,-1104 # 2041fddc <__func__.2072>
20400234:	01b00593          	li	a1,27
20400238:	00020517          	auipc	a0,0x20
2040023c:	b2c50513          	addi	a0,a0,-1236 # 2041fd64 <__clzsi2+0x42>
20400240:	795120ef          	jal	ra,204131d4 <__assert_func>

	if(circular_buf_full(me))
20400244:	fec42503          	lw	a0,-20(s0)
20400248:	608000ef          	jal	ra,20400850 <circular_buf_full>
2040024c:	00050793          	mv	a5,a0
20400250:	02078663          	beqz	a5,2040027c <advance_head_pointer+0x74>
	{
		me->tail = advance_headtail_value(me->tail, me->max);
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	0087a703          	lw	a4,8(a5)
2040025c:	fec42783          	lw	a5,-20(s0)
20400260:	00c7a783          	lw	a5,12(a5)
20400264:	00078593          	mv	a1,a5
20400268:	00070513          	mv	a0,a4
2040026c:	f59ff0ef          	jal	ra,204001c4 <advance_headtail_value>
20400270:	00050713          	mv	a4,a0
20400274:	fec42783          	lw	a5,-20(s0)
20400278:	00e7a423          	sw	a4,8(a5)
	}

	me->head = advance_headtail_value(me->head, me->max);
2040027c:	fec42783          	lw	a5,-20(s0)
20400280:	0047a703          	lw	a4,4(a5)
20400284:	fec42783          	lw	a5,-20(s0)
20400288:	00c7a783          	lw	a5,12(a5)
2040028c:	00078593          	mv	a1,a5
20400290:	00070513          	mv	a0,a4
20400294:	f31ff0ef          	jal	ra,204001c4 <advance_headtail_value>
20400298:	00050713          	mv	a4,a0
2040029c:	fec42783          	lw	a5,-20(s0)
204002a0:	00e7a223          	sw	a4,4(a5)
	me->full = (me->head == me->tail);
204002a4:	fec42783          	lw	a5,-20(s0)
204002a8:	0047a703          	lw	a4,4(a5)
204002ac:	fec42783          	lw	a5,-20(s0)
204002b0:	0087a783          	lw	a5,8(a5)
204002b4:	40f707b3          	sub	a5,a4,a5
204002b8:	0017b793          	seqz	a5,a5
204002bc:	0ff7f713          	andi	a4,a5,255
204002c0:	fec42783          	lw	a5,-20(s0)
204002c4:	00e78823          	sb	a4,16(a5)
}
204002c8:	00000013          	nop
204002cc:	01c12083          	lw	ra,28(sp)
204002d0:	01812403          	lw	s0,24(sp)
204002d4:	02010113          	addi	sp,sp,32
204002d8:	00008067          	ret

204002dc <circular_buf_init>:

#pragma mark - APIs -

cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
{
204002dc:	fd010113          	addi	sp,sp,-48
204002e0:	02112623          	sw	ra,44(sp)
204002e4:	02812423          	sw	s0,40(sp)
204002e8:	03010413          	addi	s0,sp,48
204002ec:	fca42e23          	sw	a0,-36(s0)
204002f0:	fcb42c23          	sw	a1,-40(s0)
	assert(buffer && size);
204002f4:	fdc42783          	lw	a5,-36(s0)
204002f8:	00078663          	beqz	a5,20400304 <circular_buf_init+0x28>
204002fc:	fd842783          	lw	a5,-40(s0)
20400300:	02079263          	bnez	a5,20400324 <circular_buf_init+0x48>
20400304:	00020697          	auipc	a3,0x20
20400308:	a7468693          	addi	a3,a3,-1420 # 2041fd78 <__clzsi2+0x56>
2040030c:	00020617          	auipc	a2,0x20
20400310:	ae860613          	addi	a2,a2,-1304 # 2041fdf4 <__func__.2077>
20400314:	02a00593          	li	a1,42
20400318:	00020517          	auipc	a0,0x20
2040031c:	a4c50513          	addi	a0,a0,-1460 # 2041fd64 <__clzsi2+0x42>
20400320:	6b5120ef          	jal	ra,204131d4 <__assert_func>

	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
20400324:	01400513          	li	a0,20
20400328:	2f4120ef          	jal	ra,2041261c <__wrap_malloc>
2040032c:	00050793          	mv	a5,a0
20400330:	fef42623          	sw	a5,-20(s0)
	assert(cbuf);
20400334:	fec42783          	lw	a5,-20(s0)
20400338:	02079263          	bnez	a5,2040035c <circular_buf_init+0x80>
2040033c:	00020697          	auipc	a3,0x20
20400340:	a4c68693          	addi	a3,a3,-1460 # 2041fd88 <__clzsi2+0x66>
20400344:	00020617          	auipc	a2,0x20
20400348:	ab060613          	addi	a2,a2,-1360 # 2041fdf4 <__func__.2077>
2040034c:	02d00593          	li	a1,45
20400350:	00020517          	auipc	a0,0x20
20400354:	a1450513          	addi	a0,a0,-1516 # 2041fd64 <__clzsi2+0x42>
20400358:	67d120ef          	jal	ra,204131d4 <__assert_func>

	cbuf->buffer = buffer;
2040035c:	fec42783          	lw	a5,-20(s0)
20400360:	fdc42703          	lw	a4,-36(s0)
20400364:	00e7a023          	sw	a4,0(a5)
	cbuf->max = size;
20400368:	fec42783          	lw	a5,-20(s0)
2040036c:	fd842703          	lw	a4,-40(s0)
20400370:	00e7a623          	sw	a4,12(a5)
	circular_buf_reset(cbuf);
20400374:	fec42503          	lw	a0,-20(s0)
20400378:	0a4000ef          	jal	ra,2040041c <circular_buf_reset>

	assert(circular_buf_empty(cbuf));
2040037c:	fec42503          	lw	a0,-20(s0)
20400380:	440000ef          	jal	ra,204007c0 <circular_buf_empty>
20400384:	00050793          	mv	a5,a0
20400388:	02079263          	bnez	a5,204003ac <circular_buf_init+0xd0>
2040038c:	00020697          	auipc	a3,0x20
20400390:	a0468693          	addi	a3,a3,-1532 # 2041fd90 <__clzsi2+0x6e>
20400394:	00020617          	auipc	a2,0x20
20400398:	a6060613          	addi	a2,a2,-1440 # 2041fdf4 <__func__.2077>
2040039c:	03300593          	li	a1,51
204003a0:	00020517          	auipc	a0,0x20
204003a4:	9c450513          	addi	a0,a0,-1596 # 2041fd64 <__clzsi2+0x42>
204003a8:	62d120ef          	jal	ra,204131d4 <__assert_func>

	return cbuf;
204003ac:	fec42783          	lw	a5,-20(s0)
}
204003b0:	00078513          	mv	a0,a5
204003b4:	02c12083          	lw	ra,44(sp)
204003b8:	02812403          	lw	s0,40(sp)
204003bc:	03010113          	addi	sp,sp,48
204003c0:	00008067          	ret

204003c4 <circular_buf_free>:

void circular_buf_free(cbuf_handle_t me)
{
204003c4:	fe010113          	addi	sp,sp,-32
204003c8:	00112e23          	sw	ra,28(sp)
204003cc:	00812c23          	sw	s0,24(sp)
204003d0:	02010413          	addi	s0,sp,32
204003d4:	fea42623          	sw	a0,-20(s0)
	assert(me);
204003d8:	fec42783          	lw	a5,-20(s0)
204003dc:	02079263          	bnez	a5,20400400 <circular_buf_free+0x3c>
204003e0:	00020697          	auipc	a3,0x20
204003e4:	98068693          	addi	a3,a3,-1664 # 2041fd60 <__clzsi2+0x3e>
204003e8:	00020617          	auipc	a2,0x20
204003ec:	a2060613          	addi	a2,a2,-1504 # 2041fe08 <__func__.2082>
204003f0:	03a00593          	li	a1,58
204003f4:	00020517          	auipc	a0,0x20
204003f8:	97050513          	addi	a0,a0,-1680 # 2041fd64 <__clzsi2+0x42>
204003fc:	5d9120ef          	jal	ra,204131d4 <__assert_func>
	free(me);
20400400:	fec42503          	lw	a0,-20(s0)
20400404:	268120ef          	jal	ra,2041266c <__wrap_free>
}
20400408:	00000013          	nop
2040040c:	01c12083          	lw	ra,28(sp)
20400410:	01812403          	lw	s0,24(sp)
20400414:	02010113          	addi	sp,sp,32
20400418:	00008067          	ret

2040041c <circular_buf_reset>:

void circular_buf_reset(cbuf_handle_t me)
{
2040041c:	fe010113          	addi	sp,sp,-32
20400420:	00112e23          	sw	ra,28(sp)
20400424:	00812c23          	sw	s0,24(sp)
20400428:	02010413          	addi	s0,sp,32
2040042c:	fea42623          	sw	a0,-20(s0)
	assert(me);
20400430:	fec42783          	lw	a5,-20(s0)
20400434:	02079263          	bnez	a5,20400458 <circular_buf_reset+0x3c>
20400438:	00020697          	auipc	a3,0x20
2040043c:	92868693          	addi	a3,a3,-1752 # 2041fd60 <__clzsi2+0x3e>
20400440:	00020617          	auipc	a2,0x20
20400444:	9dc60613          	addi	a2,a2,-1572 # 2041fe1c <__func__.2086>
20400448:	04000593          	li	a1,64
2040044c:	00020517          	auipc	a0,0x20
20400450:	91850513          	addi	a0,a0,-1768 # 2041fd64 <__clzsi2+0x42>
20400454:	581120ef          	jal	ra,204131d4 <__assert_func>

	me->head = 0;
20400458:	fec42783          	lw	a5,-20(s0)
2040045c:	0007a223          	sw	zero,4(a5)
	me->tail = 0;
20400460:	fec42783          	lw	a5,-20(s0)
20400464:	0007a423          	sw	zero,8(a5)
	me->full = false;
20400468:	fec42783          	lw	a5,-20(s0)
2040046c:	00078823          	sb	zero,16(a5)
}
20400470:	00000013          	nop
20400474:	01c12083          	lw	ra,28(sp)
20400478:	01812403          	lw	s0,24(sp)
2040047c:	02010113          	addi	sp,sp,32
20400480:	00008067          	ret

20400484 <circular_buf_size>:

size_t circular_buf_size(cbuf_handle_t me)
{
20400484:	fd010113          	addi	sp,sp,-48
20400488:	02112623          	sw	ra,44(sp)
2040048c:	02812423          	sw	s0,40(sp)
20400490:	03010413          	addi	s0,sp,48
20400494:	fca42e23          	sw	a0,-36(s0)
	assert(me);
20400498:	fdc42783          	lw	a5,-36(s0)
2040049c:	02079263          	bnez	a5,204004c0 <circular_buf_size+0x3c>
204004a0:	00020697          	auipc	a3,0x20
204004a4:	8c068693          	addi	a3,a3,-1856 # 2041fd60 <__clzsi2+0x3e>
204004a8:	00020617          	auipc	a2,0x20
204004ac:	98860613          	addi	a2,a2,-1656 # 2041fe30 <__func__.2090>
204004b0:	04900593          	li	a1,73
204004b4:	00020517          	auipc	a0,0x20
204004b8:	8b050513          	addi	a0,a0,-1872 # 2041fd64 <__clzsi2+0x42>
204004bc:	519120ef          	jal	ra,204131d4 <__assert_func>

	size_t size = me->max;
204004c0:	fdc42783          	lw	a5,-36(s0)
204004c4:	00c7a783          	lw	a5,12(a5)
204004c8:	fef42623          	sw	a5,-20(s0)

	if(!circular_buf_full(me))
204004cc:	fdc42503          	lw	a0,-36(s0)
204004d0:	380000ef          	jal	ra,20400850 <circular_buf_full>
204004d4:	00050793          	mv	a5,a0
204004d8:	0017c793          	xori	a5,a5,1
204004dc:	0ff7f793          	andi	a5,a5,255
204004e0:	04078c63          	beqz	a5,20400538 <circular_buf_size+0xb4>
	{
		if(me->head >= me->tail)
204004e4:	fdc42783          	lw	a5,-36(s0)
204004e8:	0047a703          	lw	a4,4(a5)
204004ec:	fdc42783          	lw	a5,-36(s0)
204004f0:	0087a783          	lw	a5,8(a5)
204004f4:	02f76063          	bltu	a4,a5,20400514 <circular_buf_size+0x90>
		{
			size = (me->head - me->tail);
204004f8:	fdc42783          	lw	a5,-36(s0)
204004fc:	0047a703          	lw	a4,4(a5)
20400500:	fdc42783          	lw	a5,-36(s0)
20400504:	0087a783          	lw	a5,8(a5)
20400508:	40f707b3          	sub	a5,a4,a5
2040050c:	fef42623          	sw	a5,-20(s0)
20400510:	0280006f          	j	20400538 <circular_buf_size+0xb4>
		}
		else
		{
			size = (me->max + me->head - me->tail);
20400514:	fdc42783          	lw	a5,-36(s0)
20400518:	00c7a703          	lw	a4,12(a5)
2040051c:	fdc42783          	lw	a5,-36(s0)
20400520:	0047a783          	lw	a5,4(a5)
20400524:	00f70733          	add	a4,a4,a5
20400528:	fdc42783          	lw	a5,-36(s0)
2040052c:	0087a783          	lw	a5,8(a5)
20400530:	40f707b3          	sub	a5,a4,a5
20400534:	fef42623          	sw	a5,-20(s0)
		}
	}

	return size;
20400538:	fec42783          	lw	a5,-20(s0)
}
2040053c:	00078513          	mv	a0,a5
20400540:	02c12083          	lw	ra,44(sp)
20400544:	02812403          	lw	s0,40(sp)
20400548:	03010113          	addi	sp,sp,48
2040054c:	00008067          	ret

20400550 <circular_buf_capacity>:

size_t circular_buf_capacity(cbuf_handle_t me)
{
20400550:	fe010113          	addi	sp,sp,-32
20400554:	00112e23          	sw	ra,28(sp)
20400558:	00812c23          	sw	s0,24(sp)
2040055c:	02010413          	addi	s0,sp,32
20400560:	fea42623          	sw	a0,-20(s0)
	assert(me);
20400564:	fec42783          	lw	a5,-20(s0)
20400568:	02079263          	bnez	a5,2040058c <circular_buf_capacity+0x3c>
2040056c:	0001f697          	auipc	a3,0x1f
20400570:	7f468693          	addi	a3,a3,2036 # 2041fd60 <__clzsi2+0x3e>
20400574:	00020617          	auipc	a2,0x20
20400578:	8d060613          	addi	a2,a2,-1840 # 2041fe44 <__func__.2095>
2040057c:	05e00593          	li	a1,94
20400580:	0001f517          	auipc	a0,0x1f
20400584:	7e450513          	addi	a0,a0,2020 # 2041fd64 <__clzsi2+0x42>
20400588:	44d120ef          	jal	ra,204131d4 <__assert_func>

	return me->max;
2040058c:	fec42783          	lw	a5,-20(s0)
20400590:	00c7a783          	lw	a5,12(a5)
}
20400594:	00078513          	mv	a0,a5
20400598:	01c12083          	lw	ra,28(sp)
2040059c:	01812403          	lw	s0,24(sp)
204005a0:	02010113          	addi	sp,sp,32
204005a4:	00008067          	ret

204005a8 <circular_buf_put>:

void circular_buf_put(cbuf_handle_t me, uint8_t data)
{
204005a8:	fe010113          	addi	sp,sp,-32
204005ac:	00112e23          	sw	ra,28(sp)
204005b0:	00812c23          	sw	s0,24(sp)
204005b4:	02010413          	addi	s0,sp,32
204005b8:	fea42623          	sw	a0,-20(s0)
204005bc:	00058793          	mv	a5,a1
204005c0:	fef405a3          	sb	a5,-21(s0)
	assert(me && me->buffer);
204005c4:	fec42783          	lw	a5,-20(s0)
204005c8:	00078863          	beqz	a5,204005d8 <circular_buf_put+0x30>
204005cc:	fec42783          	lw	a5,-20(s0)
204005d0:	0007a783          	lw	a5,0(a5)
204005d4:	02079263          	bnez	a5,204005f8 <circular_buf_put+0x50>
204005d8:	0001f697          	auipc	a3,0x1f
204005dc:	7d468693          	addi	a3,a3,2004 # 2041fdac <__clzsi2+0x8a>
204005e0:	00020617          	auipc	a2,0x20
204005e4:	87c60613          	addi	a2,a2,-1924 # 2041fe5c <__func__.2100>
204005e8:	06500593          	li	a1,101
204005ec:	0001f517          	auipc	a0,0x1f
204005f0:	77850513          	addi	a0,a0,1912 # 2041fd64 <__clzsi2+0x42>
204005f4:	3e1120ef          	jal	ra,204131d4 <__assert_func>

	me->buffer[me->head] = data;
204005f8:	fec42783          	lw	a5,-20(s0)
204005fc:	0007a703          	lw	a4,0(a5)
20400600:	fec42783          	lw	a5,-20(s0)
20400604:	0047a783          	lw	a5,4(a5)
20400608:	00f707b3          	add	a5,a4,a5
2040060c:	feb44703          	lbu	a4,-21(s0)
20400610:	00e78023          	sb	a4,0(a5)

	advance_head_pointer(me);
20400614:	fec42503          	lw	a0,-20(s0)
20400618:	bf1ff0ef          	jal	ra,20400208 <advance_head_pointer>
}
2040061c:	00000013          	nop
20400620:	01c12083          	lw	ra,28(sp)
20400624:	01812403          	lw	s0,24(sp)
20400628:	02010113          	addi	sp,sp,32
2040062c:	00008067          	ret

20400630 <circular_buf_try_put>:

int circular_buf_try_put(cbuf_handle_t me, uint8_t data)
{
20400630:	fd010113          	addi	sp,sp,-48
20400634:	02112623          	sw	ra,44(sp)
20400638:	02812423          	sw	s0,40(sp)
2040063c:	03010413          	addi	s0,sp,48
20400640:	fca42e23          	sw	a0,-36(s0)
20400644:	00058793          	mv	a5,a1
20400648:	fcf40da3          	sb	a5,-37(s0)
	int r = -1;
2040064c:	fff00793          	li	a5,-1
20400650:	fef42623          	sw	a5,-20(s0)

	assert(me && me->buffer);
20400654:	fdc42783          	lw	a5,-36(s0)
20400658:	00078863          	beqz	a5,20400668 <circular_buf_try_put+0x38>
2040065c:	fdc42783          	lw	a5,-36(s0)
20400660:	0007a783          	lw	a5,0(a5)
20400664:	02079263          	bnez	a5,20400688 <circular_buf_try_put+0x58>
20400668:	0001f697          	auipc	a3,0x1f
2040066c:	74468693          	addi	a3,a3,1860 # 2041fdac <__clzsi2+0x8a>
20400670:	00020617          	auipc	a2,0x20
20400674:	80060613          	addi	a2,a2,-2048 # 2041fe70 <__func__.2106>
20400678:	07000593          	li	a1,112
2040067c:	0001f517          	auipc	a0,0x1f
20400680:	6e850513          	addi	a0,a0,1768 # 2041fd64 <__clzsi2+0x42>
20400684:	351120ef          	jal	ra,204131d4 <__assert_func>

	if(!circular_buf_full(me))
20400688:	fdc42503          	lw	a0,-36(s0)
2040068c:	1c4000ef          	jal	ra,20400850 <circular_buf_full>
20400690:	00050793          	mv	a5,a0
20400694:	0017c793          	xori	a5,a5,1
20400698:	0ff7f793          	andi	a5,a5,255
2040069c:	02078663          	beqz	a5,204006c8 <circular_buf_try_put+0x98>
	{
		me->buffer[me->head] = data;
204006a0:	fdc42783          	lw	a5,-36(s0)
204006a4:	0007a703          	lw	a4,0(a5)
204006a8:	fdc42783          	lw	a5,-36(s0)
204006ac:	0047a783          	lw	a5,4(a5)
204006b0:	00f707b3          	add	a5,a4,a5
204006b4:	fdb44703          	lbu	a4,-37(s0)
204006b8:	00e78023          	sb	a4,0(a5)
		advance_head_pointer(me);
204006bc:	fdc42503          	lw	a0,-36(s0)
204006c0:	b49ff0ef          	jal	ra,20400208 <advance_head_pointer>
		r = 0;
204006c4:	fe042623          	sw	zero,-20(s0)
	}

	return r;
204006c8:	fec42783          	lw	a5,-20(s0)
}
204006cc:	00078513          	mv	a0,a5
204006d0:	02c12083          	lw	ra,44(sp)
204006d4:	02812403          	lw	s0,40(sp)
204006d8:	03010113          	addi	sp,sp,48
204006dc:	00008067          	ret

204006e0 <circular_buf_get>:

int circular_buf_get(cbuf_handle_t me, uint8_t* data)
{
204006e0:	fd010113          	addi	sp,sp,-48
204006e4:	02112623          	sw	ra,44(sp)
204006e8:	02812423          	sw	s0,40(sp)
204006ec:	03010413          	addi	s0,sp,48
204006f0:	fca42e23          	sw	a0,-36(s0)
204006f4:	fcb42c23          	sw	a1,-40(s0)
	assert(me && data && me->buffer);
204006f8:	fdc42783          	lw	a5,-36(s0)
204006fc:	00078c63          	beqz	a5,20400714 <circular_buf_get+0x34>
20400700:	fd842783          	lw	a5,-40(s0)
20400704:	00078863          	beqz	a5,20400714 <circular_buf_get+0x34>
20400708:	fdc42783          	lw	a5,-36(s0)
2040070c:	0007a783          	lw	a5,0(a5)
20400710:	02079263          	bnez	a5,20400734 <circular_buf_get+0x54>
20400714:	0001f697          	auipc	a3,0x1f
20400718:	6ac68693          	addi	a3,a3,1708 # 2041fdc0 <__clzsi2+0x9e>
2040071c:	0001f617          	auipc	a2,0x1f
20400720:	76c60613          	addi	a2,a2,1900 # 2041fe88 <__func__.2111>
20400724:	07e00593          	li	a1,126
20400728:	0001f517          	auipc	a0,0x1f
2040072c:	63c50513          	addi	a0,a0,1596 # 2041fd64 <__clzsi2+0x42>
20400730:	2a5120ef          	jal	ra,204131d4 <__assert_func>

	int r = -1;
20400734:	fff00793          	li	a5,-1
20400738:	fef42623          	sw	a5,-20(s0)

	if(!circular_buf_empty(me))
2040073c:	fdc42503          	lw	a0,-36(s0)
20400740:	080000ef          	jal	ra,204007c0 <circular_buf_empty>
20400744:	00050793          	mv	a5,a0
20400748:	0017c793          	xori	a5,a5,1
2040074c:	0ff7f793          	andi	a5,a5,255
20400750:	04078c63          	beqz	a5,204007a8 <circular_buf_get+0xc8>
	{
		*data = me->buffer[me->tail];
20400754:	fdc42783          	lw	a5,-36(s0)
20400758:	0007a703          	lw	a4,0(a5)
2040075c:	fdc42783          	lw	a5,-36(s0)
20400760:	0087a783          	lw	a5,8(a5)
20400764:	00f707b3          	add	a5,a4,a5
20400768:	0007c703          	lbu	a4,0(a5)
2040076c:	fd842783          	lw	a5,-40(s0)
20400770:	00e78023          	sb	a4,0(a5)
		me->tail = advance_headtail_value(me->tail, me->max);
20400774:	fdc42783          	lw	a5,-36(s0)
20400778:	0087a703          	lw	a4,8(a5)
2040077c:	fdc42783          	lw	a5,-36(s0)
20400780:	00c7a783          	lw	a5,12(a5)
20400784:	00078593          	mv	a1,a5
20400788:	00070513          	mv	a0,a4
2040078c:	a39ff0ef          	jal	ra,204001c4 <advance_headtail_value>
20400790:	00050713          	mv	a4,a0
20400794:	fdc42783          	lw	a5,-36(s0)
20400798:	00e7a423          	sw	a4,8(a5)
		me->full = false;
2040079c:	fdc42783          	lw	a5,-36(s0)
204007a0:	00078823          	sb	zero,16(a5)
		r = 0;
204007a4:	fe042623          	sw	zero,-20(s0)
	}

	return r;
204007a8:	fec42783          	lw	a5,-20(s0)
}
204007ac:	00078513          	mv	a0,a5
204007b0:	02c12083          	lw	ra,44(sp)
204007b4:	02812403          	lw	s0,40(sp)
204007b8:	03010113          	addi	sp,sp,48
204007bc:	00008067          	ret

204007c0 <circular_buf_empty>:

bool circular_buf_empty(cbuf_handle_t me)
{
204007c0:	fe010113          	addi	sp,sp,-32
204007c4:	00112e23          	sw	ra,28(sp)
204007c8:	00812c23          	sw	s0,24(sp)
204007cc:	02010413          	addi	s0,sp,32
204007d0:	fea42623          	sw	a0,-20(s0)
	assert(me);
204007d4:	fec42783          	lw	a5,-20(s0)
204007d8:	02079263          	bnez	a5,204007fc <circular_buf_empty+0x3c>
204007dc:	0001f697          	auipc	a3,0x1f
204007e0:	58468693          	addi	a3,a3,1412 # 2041fd60 <__clzsi2+0x3e>
204007e4:	0001f617          	auipc	a2,0x1f
204007e8:	6b860613          	addi	a2,a2,1720 # 2041fe9c <__func__.2116>
204007ec:	08f00593          	li	a1,143
204007f0:	0001f517          	auipc	a0,0x1f
204007f4:	57450513          	addi	a0,a0,1396 # 2041fd64 <__clzsi2+0x42>
204007f8:	1dd120ef          	jal	ra,204131d4 <__assert_func>

	return (!circular_buf_full(me) && (me->head == me->tail));
204007fc:	fec42503          	lw	a0,-20(s0)
20400800:	050000ef          	jal	ra,20400850 <circular_buf_full>
20400804:	00050793          	mv	a5,a0
20400808:	0017c793          	xori	a5,a5,1
2040080c:	0ff7f793          	andi	a5,a5,255
20400810:	02078063          	beqz	a5,20400830 <circular_buf_empty+0x70>
20400814:	fec42783          	lw	a5,-20(s0)
20400818:	0047a703          	lw	a4,4(a5)
2040081c:	fec42783          	lw	a5,-20(s0)
20400820:	0087a783          	lw	a5,8(a5)
20400824:	00f71663          	bne	a4,a5,20400830 <circular_buf_empty+0x70>
20400828:	00100793          	li	a5,1
2040082c:	0080006f          	j	20400834 <circular_buf_empty+0x74>
20400830:	00000793          	li	a5,0
20400834:	0017f793          	andi	a5,a5,1
20400838:	0ff7f793          	andi	a5,a5,255
}
2040083c:	00078513          	mv	a0,a5
20400840:	01c12083          	lw	ra,28(sp)
20400844:	01812403          	lw	s0,24(sp)
20400848:	02010113          	addi	sp,sp,32
2040084c:	00008067          	ret

20400850 <circular_buf_full>:

bool circular_buf_full(cbuf_handle_t me)
{
20400850:	fe010113          	addi	sp,sp,-32
20400854:	00112e23          	sw	ra,28(sp)
20400858:	00812c23          	sw	s0,24(sp)
2040085c:	02010413          	addi	s0,sp,32
20400860:	fea42623          	sw	a0,-20(s0)
	assert(me);
20400864:	fec42783          	lw	a5,-20(s0)
20400868:	02079263          	bnez	a5,2040088c <circular_buf_full+0x3c>
2040086c:	0001f697          	auipc	a3,0x1f
20400870:	4f468693          	addi	a3,a3,1268 # 2041fd60 <__clzsi2+0x3e>
20400874:	0001f617          	auipc	a2,0x1f
20400878:	63c60613          	addi	a2,a2,1596 # 2041feb0 <__func__.2120>
2040087c:	09600593          	li	a1,150
20400880:	0001f517          	auipc	a0,0x1f
20400884:	4e450513          	addi	a0,a0,1252 # 2041fd64 <__clzsi2+0x42>
20400888:	14d120ef          	jal	ra,204131d4 <__assert_func>

	return me->full;
2040088c:	fec42783          	lw	a5,-20(s0)
20400890:	0107c783          	lbu	a5,16(a5)
}
20400894:	00078513          	mv	a0,a5
20400898:	01c12083          	lw	ra,28(sp)
2040089c:	01812403          	lw	s0,24(sp)
204008a0:	02010113          	addi	sp,sp,32
204008a4:	00008067          	ret

204008a8 <circular_buf_peek>:

int circular_buf_peek(cbuf_handle_t me, uint8_t* data, unsigned int look_ahead_counter)
{
204008a8:	fd010113          	addi	sp,sp,-48
204008ac:	02112623          	sw	ra,44(sp)
204008b0:	02812423          	sw	s0,40(sp)
204008b4:	03010413          	addi	s0,sp,48
204008b8:	fca42e23          	sw	a0,-36(s0)
204008bc:	fcb42c23          	sw	a1,-40(s0)
204008c0:	fcc42a23          	sw	a2,-44(s0)
	int r = -1;
204008c4:	fff00793          	li	a5,-1
204008c8:	fef42223          	sw	a5,-28(s0)
	size_t pos;

	assert(me && data && me->buffer);
204008cc:	fdc42783          	lw	a5,-36(s0)
204008d0:	00078c63          	beqz	a5,204008e8 <circular_buf_peek+0x40>
204008d4:	fd842783          	lw	a5,-40(s0)
204008d8:	00078863          	beqz	a5,204008e8 <circular_buf_peek+0x40>
204008dc:	fdc42783          	lw	a5,-36(s0)
204008e0:	0007a783          	lw	a5,0(a5)
204008e4:	02079263          	bnez	a5,20400908 <circular_buf_peek+0x60>
204008e8:	0001f697          	auipc	a3,0x1f
204008ec:	4d868693          	addi	a3,a3,1240 # 2041fdc0 <__clzsi2+0x9e>
204008f0:	0001f617          	auipc	a2,0x1f
204008f4:	5d460613          	addi	a2,a2,1492 # 2041fec4 <__func__.2128>
204008f8:	0a000593          	li	a1,160
204008fc:	0001f517          	auipc	a0,0x1f
20400900:	46850513          	addi	a0,a0,1128 # 2041fd64 <__clzsi2+0x42>
20400904:	0d1120ef          	jal	ra,204131d4 <__assert_func>

	// We can't look beyond the current buffer size
	if(circular_buf_empty(me) || look_ahead_counter > circular_buf_size(me))
20400908:	fdc42503          	lw	a0,-36(s0)
2040090c:	eb5ff0ef          	jal	ra,204007c0 <circular_buf_empty>
20400910:	00050793          	mv	a5,a0
20400914:	00079c63          	bnez	a5,2040092c <circular_buf_peek+0x84>
20400918:	fdc42503          	lw	a0,-36(s0)
2040091c:	b69ff0ef          	jal	ra,20400484 <circular_buf_size>
20400920:	00050713          	mv	a4,a0
20400924:	fd442783          	lw	a5,-44(s0)
20400928:	00f77663          	bleu	a5,a4,20400934 <circular_buf_peek+0x8c>
	{
		return r;
2040092c:	fe442783          	lw	a5,-28(s0)
20400930:	0700006f          	j	204009a0 <circular_buf_peek+0xf8>
	}

	pos = me->tail;
20400934:	fdc42783          	lw	a5,-36(s0)
20400938:	0087a783          	lw	a5,8(a5)
2040093c:	fef42623          	sw	a5,-20(s0)
	for(unsigned int i = 0; i < look_ahead_counter; i++)
20400940:	fe042423          	sw	zero,-24(s0)
20400944:	04c0006f          	j	20400990 <circular_buf_peek+0xe8>
	{
		data[i] = me->buffer[pos];
20400948:	fdc42783          	lw	a5,-36(s0)
2040094c:	0007a703          	lw	a4,0(a5)
20400950:	fec42783          	lw	a5,-20(s0)
20400954:	00f70733          	add	a4,a4,a5
20400958:	fd842683          	lw	a3,-40(s0)
2040095c:	fe842783          	lw	a5,-24(s0)
20400960:	00f687b3          	add	a5,a3,a5
20400964:	00074703          	lbu	a4,0(a4)
20400968:	00e78023          	sb	a4,0(a5)
		pos = advance_headtail_value(pos, me->max);
2040096c:	fdc42783          	lw	a5,-36(s0)
20400970:	00c7a783          	lw	a5,12(a5)
20400974:	00078593          	mv	a1,a5
20400978:	fec42503          	lw	a0,-20(s0)
2040097c:	849ff0ef          	jal	ra,204001c4 <advance_headtail_value>
20400980:	fea42623          	sw	a0,-20(s0)
	for(unsigned int i = 0; i < look_ahead_counter; i++)
20400984:	fe842783          	lw	a5,-24(s0)
20400988:	00178793          	addi	a5,a5,1
2040098c:	fef42423          	sw	a5,-24(s0)
20400990:	fe842703          	lw	a4,-24(s0)
20400994:	fd442783          	lw	a5,-44(s0)
20400998:	faf768e3          	bltu	a4,a5,20400948 <circular_buf_peek+0xa0>
	}

	return 0;
2040099c:	00000793          	li	a5,0
}
204009a0:	00078513          	mv	a0,a5
204009a4:	02c12083          	lw	ra,44(sp)
204009a8:	02812403          	lw	s0,40(sp)
204009ac:	03010113          	addi	sp,sp,48
204009b0:	00008067          	ret

204009b4 <__cxa_pure_virtual>:
204009b4:	ff010113          	addi	sp,sp,-16
204009b8:	00812623          	sw	s0,12(sp)
204009bc:	01010413          	addi	s0,sp,16
204009c0:	0000006f          	j	204009c0 <__cxa_pure_virtual+0xc>

204009c4 <uart1_init>:
#include "platform.h"

#include <stdio.h>
#include <stdint.h>

static void uart1_init(size_t baud_rate){
204009c4:	fe010113          	addi	sp,sp,-32
204009c8:	00112e23          	sw	ra,28(sp)
204009cc:	00812c23          	sw	s0,24(sp)
204009d0:	02010413          	addi	s0,sp,32
204009d4:	fea42623          	sw	a0,-20(s0)
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART1_MASK;
204009d8:	100127b7          	lui	a5,0x10012
204009dc:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1000e03c>
204009e0:	0007a683          	lw	a3,0(a5)
204009e4:	100127b7          	lui	a5,0x10012
204009e8:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1000e03c>
204009ec:	fd000737          	lui	a4,0xfd000
204009f0:	fff70713          	addi	a4,a4,-1 # fcffffff <pulp__FC+0xfd000000>
204009f4:	00e6f733          	and	a4,a3,a4
204009f8:	00e7a023          	sw	a4,0(a5)
  GPIO_REG(GPIO_IOF_EN) |= IOF0_UART1_MASK;
204009fc:	100127b7          	lui	a5,0x10012
20400a00:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x1000e038>
20400a04:	0007a683          	lw	a3,0(a5)
20400a08:	100127b7          	lui	a5,0x10012
20400a0c:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x1000e038>
20400a10:	03000737          	lui	a4,0x3000
20400a14:	00e6e733          	or	a4,a3,a4
20400a18:	00e7a023          	sw	a4,0(a5)
  UART1_REG(UART_REG_DIV) = get_cpu_freq() / baud_rate - 1;
20400a1c:	0300b0ef          	jal	ra,2040ba4c <get_cpu_freq>
20400a20:	00050793          	mv	a5,a0
20400a24:	fec42583          	lw	a1,-20(s0)
20400a28:	00078513          	mv	a0,a5
20400a2c:	2801f0ef          	jal	ra,2041fcac <__udivsi3>
20400a30:	00050793          	mv	a5,a0
20400a34:	00078713          	mv	a4,a5
20400a38:	100237b7          	lui	a5,0x10023
20400a3c:	01878793          	addi	a5,a5,24 # 10023018 <__stack_size+0x1001f018>
20400a40:	fff70713          	addi	a4,a4,-1 # 2ffffff <__stack_size+0x2ffbfff>
20400a44:	00e7a023          	sw	a4,0(a5)
  UART1_REG(UART_REG_TXCTRL) |= UART_TXEN;
20400a48:	100237b7          	lui	a5,0x10023
20400a4c:	00878793          	addi	a5,a5,8 # 10023008 <__stack_size+0x1001f008>
20400a50:	0007a703          	lw	a4,0(a5)
20400a54:	100237b7          	lui	a5,0x10023
20400a58:	00878793          	addi	a5,a5,8 # 10023008 <__stack_size+0x1001f008>
20400a5c:	00176713          	ori	a4,a4,1
20400a60:	00e7a023          	sw	a4,0(a5)
  UART1_REG(UART_REG_RXCTRL) |= UART_RXEN;
20400a64:	100237b7          	lui	a5,0x10023
20400a68:	00c78793          	addi	a5,a5,12 # 1002300c <__stack_size+0x1001f00c>
20400a6c:	0007a703          	lw	a4,0(a5)
20400a70:	100237b7          	lui	a5,0x10023
20400a74:	00c78793          	addi	a5,a5,12 # 1002300c <__stack_size+0x1001f00c>
20400a78:	00176713          	ori	a4,a4,1
20400a7c:	00e7a023          	sw	a4,0(a5)
}
20400a80:	00000013          	nop
20400a84:	01c12083          	lw	ra,28(sp)
20400a88:	01812403          	lw	s0,24(sp)
20400a8c:	02010113          	addi	sp,sp,32
20400a90:	00008067          	ret

20400a94 <uart1_write>:


static ssize_t uart1_write(const void* ptr, size_t len){
20400a94:	fd010113          	addi	sp,sp,-48
20400a98:	02812623          	sw	s0,44(sp)
20400a9c:	03010413          	addi	s0,sp,48
20400aa0:	fca42e23          	sw	a0,-36(s0)
20400aa4:	fcb42c23          	sw	a1,-40(s0)
  const uint8_t * current = (const char *)ptr;
20400aa8:	fdc42783          	lw	a5,-36(s0)
20400aac:	fef42423          	sw	a5,-24(s0)

  for (size_t jj = 0; jj < len; jj++) {
20400ab0:	fe042623          	sw	zero,-20(s0)
20400ab4:	0380006f          	j	20400aec <uart1_write+0x58>
  	while(UART1_REG(UART_REG_TXFIFO) & 0x80000000) ;
20400ab8:	00000013          	nop
20400abc:	100237b7          	lui	a5,0x10023
20400ac0:	0007a783          	lw	a5,0(a5) # 10023000 <__stack_size+0x1001f000>
20400ac4:	fe07cce3          	bltz	a5,20400abc <uart1_write+0x28>
  	UART1_REG(UART_REG_TXFIFO) = current[jj];
20400ac8:	fe842703          	lw	a4,-24(s0)
20400acc:	fec42783          	lw	a5,-20(s0)
20400ad0:	00f707b3          	add	a5,a4,a5
20400ad4:	0007c703          	lbu	a4,0(a5)
20400ad8:	100237b7          	lui	a5,0x10023
20400adc:	00e7a023          	sw	a4,0(a5) # 10023000 <__stack_size+0x1001f000>
  for (size_t jj = 0; jj < len; jj++) {
20400ae0:	fec42783          	lw	a5,-20(s0)
20400ae4:	00178793          	addi	a5,a5,1
20400ae8:	fef42623          	sw	a5,-20(s0)
20400aec:	fec42703          	lw	a4,-20(s0)
20400af0:	fd842783          	lw	a5,-40(s0)
20400af4:	fcf762e3          	bltu	a4,a5,20400ab8 <uart1_write+0x24>
  }
  return len;
20400af8:	fd842783          	lw	a5,-40(s0)
}
20400afc:	00078513          	mv	a0,a5
20400b00:	02c12403          	lw	s0,44(sp)
20400b04:	03010113          	addi	sp,sp,48
20400b08:	00008067          	ret

20400b0c <uart1_read>:

static ssize_t uart1_read(void* ptr, size_t len)
{
20400b0c:	fd010113          	addi	sp,sp,-48
20400b10:	02812623          	sw	s0,44(sp)
20400b14:	03010413          	addi	s0,sp,48
20400b18:	fca42e23          	sw	a0,-36(s0)
20400b1c:	fcb42c23          	sw	a1,-40(s0)
  uint8_t * current = (uint8_t *)ptr;
20400b20:	fdc42783          	lw	a5,-36(s0)
20400b24:	fef42623          	sw	a5,-20(s0)
  volatile uint32_t * uart_rx = (uint32_t *)(UART1_CTRL_ADDR + UART_REG_RXFIFO);
20400b28:	100237b7          	lui	a5,0x10023
20400b2c:	00478793          	addi	a5,a5,4 # 10023004 <__stack_size+0x1001f004>
20400b30:	fef42223          	sw	a5,-28(s0)


  ssize_t result = 0;
20400b34:	fe042423          	sw	zero,-24(s0)

  for (current = (uint8_t *)ptr;
20400b38:	fdc42783          	lw	a5,-36(s0)
20400b3c:	fef42623          	sw	a5,-20(s0)
20400b40:	0400006f          	j	20400b80 <uart1_read+0x74>
      current < ((uint8_t *)ptr) + len;
      current ++) {
    uint32_t current_data = *uart_rx;
20400b44:	fe442783          	lw	a5,-28(s0)
20400b48:	0007a783          	lw	a5,0(a5)
20400b4c:	fef42023          	sw	a5,-32(s0)
    if((current_data & 0x80000000)){
20400b50:	fe042783          	lw	a5,-32(s0)
20400b54:	0407c263          	bltz	a5,20400b98 <uart1_read+0x8c>
        break;
    }
    *current = current_data;
20400b58:	fe042783          	lw	a5,-32(s0)
20400b5c:	0ff7f713          	andi	a4,a5,255
20400b60:	fec42783          	lw	a5,-20(s0)
20400b64:	00e78023          	sb	a4,0(a5)
    result++;
20400b68:	fe842783          	lw	a5,-24(s0)
20400b6c:	00178793          	addi	a5,a5,1
20400b70:	fef42423          	sw	a5,-24(s0)
      current ++) {
20400b74:	fec42783          	lw	a5,-20(s0)
20400b78:	00178793          	addi	a5,a5,1
20400b7c:	fef42623          	sw	a5,-20(s0)
      current < ((uint8_t *)ptr) + len;
20400b80:	fdc42703          	lw	a4,-36(s0)
20400b84:	fd842783          	lw	a5,-40(s0)
20400b88:	00f707b3          	add	a5,a4,a5
  for (current = (uint8_t *)ptr;
20400b8c:	fec42703          	lw	a4,-20(s0)
20400b90:	faf76ae3          	bltu	a4,a5,20400b44 <uart1_read+0x38>
20400b94:	0080006f          	j	20400b9c <uart1_read+0x90>
        break;
20400b98:	00000013          	nop
  }
  return result;
20400b9c:	fe842783          	lw	a5,-24(s0)
}
20400ba0:	00078513          	mv	a0,a5
20400ba4:	02c12403          	lw	s0,44(sp)
20400ba8:	03010113          	addi	sp,sp,48
20400bac:	00008067          	ret

20400bb0 <write_serial>:

#define SERIAL_BUFFER_SIZE (16)
char serial_buffer_data[SERIAL_BUFFER_SIZE];

// Called by TVM to write serial data to the UART.
ssize_t write_serial(void* unused_context, const uint8_t* data, size_t size) {
20400bb0:	fd010113          	addi	sp,sp,-48
20400bb4:	02112623          	sw	ra,44(sp)
20400bb8:	02812423          	sw	s0,40(sp)
20400bbc:	03010413          	addi	s0,sp,48
20400bc0:	fca42e23          	sw	a0,-36(s0)
20400bc4:	fcb42c23          	sw	a1,-40(s0)
20400bc8:	fcc42a23          	sw	a2,-44(s0)
  size_t written = 0;
20400bcc:	fe042623          	sw	zero,-20(s0)

  while(written < size){
20400bd0:	03c0006f          	j	20400c0c <write_serial+0x5c>
    written += uart1_write(data+written, size-written);
20400bd4:	fd842703          	lw	a4,-40(s0)
20400bd8:	fec42783          	lw	a5,-20(s0)
20400bdc:	00f706b3          	add	a3,a4,a5
20400be0:	fd442703          	lw	a4,-44(s0)
20400be4:	fec42783          	lw	a5,-20(s0)
20400be8:	40f707b3          	sub	a5,a4,a5
20400bec:	00078593          	mv	a1,a5
20400bf0:	00068513          	mv	a0,a3
20400bf4:	ea1ff0ef          	jal	ra,20400a94 <uart1_write>
20400bf8:	00050793          	mv	a5,a0
20400bfc:	00078713          	mv	a4,a5
20400c00:	fec42783          	lw	a5,-20(s0)
20400c04:	00e787b3          	add	a5,a5,a4
20400c08:	fef42623          	sw	a5,-20(s0)
  while(written < size){
20400c0c:	fec42703          	lw	a4,-20(s0)
20400c10:	fd442783          	lw	a5,-44(s0)
20400c14:	fcf760e3          	bltu	a4,a5,20400bd4 <write_serial+0x24>
  }

  return size;
20400c18:	fd442783          	lw	a5,-44(s0)
}
20400c1c:	00078513          	mv	a0,a5
20400c20:	02c12083          	lw	ra,44(sp)
20400c24:	02812403          	lw	s0,40(sp)
20400c28:	03010113          	addi	sp,sp,48
20400c2c:	00008067          	ret

20400c30 <TVMPlatformFormatMessage>:

// Called by TVM when a message needs to be formatted.
size_t TVMPlatformFormatMessage(char* out_buf, size_t out_buf_size_bytes, const char* fmt,
                                va_list args) {
20400c30:	fe010113          	addi	sp,sp,-32
20400c34:	00112e23          	sw	ra,28(sp)
20400c38:	00812c23          	sw	s0,24(sp)
20400c3c:	02010413          	addi	s0,sp,32
20400c40:	fea42623          	sw	a0,-20(s0)
20400c44:	feb42423          	sw	a1,-24(s0)
20400c48:	fec42223          	sw	a2,-28(s0)
20400c4c:	fed42023          	sw	a3,-32(s0)
  return vsnprintf(out_buf, out_buf_size_bytes, fmt, args);
20400c50:	fe042683          	lw	a3,-32(s0)
20400c54:	fe442603          	lw	a2,-28(s0)
20400c58:	fe842583          	lw	a1,-24(s0)
20400c5c:	fec42503          	lw	a0,-20(s0)
20400c60:	716160ef          	jal	ra,20417376 <vsnprintf>
20400c64:	00050793          	mv	a5,a0
}
20400c68:	00078513          	mv	a0,a5
20400c6c:	01c12083          	lw	ra,28(sp)
20400c70:	01812403          	lw	s0,24(sp)
20400c74:	02010113          	addi	sp,sp,32
20400c78:	00008067          	ret

20400c7c <TVMPlatformAbort>:

// Called by TVM when an internal invariant is violated, and execution cannot continue.
void TVMPlatformAbort(tvm_crt_error_t error) {
20400c7c:	fe010113          	addi	sp,sp,-32
20400c80:	00112e23          	sw	ra,28(sp)
20400c84:	00812c23          	sw	s0,24(sp)
20400c88:	02010413          	addi	s0,sp,32
20400c8c:	fea42623          	sw	a0,-20(s0)
  printf("TVMError: 0x%x", error);
20400c90:	fec42583          	lw	a1,-20(s0)
20400c94:	0001f517          	auipc	a0,0x1f
20400c98:	24450513          	addi	a0,a0,580 # 2041fed8 <__func__.2128+0x14>
20400c9c:	438120ef          	jal	ra,204130d4 <__wrap_printf>
  exit(-1);
20400ca0:	fff00513          	li	a0,-1
20400ca4:	582120ef          	jal	ra,20413226 <exit>

20400ca8 <TVMPlatformGenerateRandom>:
}

// Called by TVM to generate random data.
tvm_crt_error_t TVMPlatformGenerateRandom(uint8_t* buffer, size_t num_bytes) {
20400ca8:	fd010113          	addi	sp,sp,-48
20400cac:	02112623          	sw	ra,44(sp)
20400cb0:	02812423          	sw	s0,40(sp)
20400cb4:	03010413          	addi	s0,sp,48
20400cb8:	fca42e23          	sw	a0,-36(s0)
20400cbc:	fcb42c23          	sw	a1,-40(s0)
  //TODO: generate actual random numbers

  printf("Generating %d random numbers\n", num_bytes);
20400cc0:	fd842583          	lw	a1,-40(s0)
20400cc4:	0001f517          	auipc	a0,0x1f
20400cc8:	22450513          	addi	a0,a0,548 # 2041fee8 <__func__.2128+0x24>
20400ccc:	408120ef          	jal	ra,204130d4 <__wrap_printf>
  for(size_t i = 0; i < num_bytes; i++){
20400cd0:	fe042623          	sw	zero,-20(s0)
20400cd4:	0280006f          	j	20400cfc <TVMPlatformGenerateRandom+0x54>
    buffer[i] = i % 256;
20400cd8:	fdc42703          	lw	a4,-36(s0)
20400cdc:	fec42783          	lw	a5,-20(s0)
20400ce0:	00f707b3          	add	a5,a4,a5
20400ce4:	fec42703          	lw	a4,-20(s0)
20400ce8:	0ff77713          	andi	a4,a4,255
20400cec:	00e78023          	sb	a4,0(a5)
  for(size_t i = 0; i < num_bytes; i++){
20400cf0:	fec42783          	lw	a5,-20(s0)
20400cf4:	00178793          	addi	a5,a5,1
20400cf8:	fef42623          	sw	a5,-20(s0)
20400cfc:	fec42703          	lw	a4,-20(s0)
20400d00:	fd842783          	lw	a5,-40(s0)
20400d04:	fcf76ae3          	bltu	a4,a5,20400cd8 <TVMPlatformGenerateRandom+0x30>
  }

  return kTvmErrorNoError;
20400d08:	00000793          	li	a5,0
}
20400d0c:	00078513          	mv	a0,a5
20400d10:	02c12083          	lw	ra,44(sp)
20400d14:	02812403          	lw	s0,40(sp)
20400d18:	03010113          	addi	sp,sp,48
20400d1c:	00008067          	ret

20400d20 <TVMPlatformMemoryAllocate>:


// Called by TVM to allocate memory.
tvm_crt_error_t TVMPlatformMemoryAllocate(size_t num_bytes, DLDevice dev, void** out_ptr) {
20400d20:	fe010113          	addi	sp,sp,-32
20400d24:	00112e23          	sw	ra,28(sp)
20400d28:	00812c23          	sw	s0,24(sp)
20400d2c:	02010413          	addi	s0,sp,32
20400d30:	fea42623          	sw	a0,-20(s0)
20400d34:	feb42223          	sw	a1,-28(s0)
20400d38:	fec42423          	sw	a2,-24(s0)
20400d3c:	fed42023          	sw	a3,-32(s0)
  *out_ptr =  malloc(num_bytes);
20400d40:	fec42503          	lw	a0,-20(s0)
20400d44:	0d9110ef          	jal	ra,2041261c <__wrap_malloc>
20400d48:	00050793          	mv	a5,a0
20400d4c:	00078713          	mv	a4,a5
20400d50:	fe042783          	lw	a5,-32(s0)
20400d54:	00e7a023          	sw	a4,0(a5)
  return (*out_ptr == NULL) ? kTvmErrorPlatformNoMemory : kTvmErrorNoError;
20400d58:	fe042783          	lw	a5,-32(s0)
20400d5c:	0007a783          	lw	a5,0(a5)
20400d60:	00079663          	bnez	a5,20400d6c <TVMPlatformMemoryAllocate+0x4c>
20400d64:	50300793          	li	a5,1283
20400d68:	0080006f          	j	20400d70 <TVMPlatformMemoryAllocate+0x50>
20400d6c:	00000793          	li	a5,0
}
20400d70:	00078513          	mv	a0,a5
20400d74:	01c12083          	lw	ra,28(sp)
20400d78:	01812403          	lw	s0,24(sp)
20400d7c:	02010113          	addi	sp,sp,32
20400d80:	00008067          	ret

20400d84 <TVMPlatformMemoryFree>:

// Called by TVM to deallocate memory.
tvm_crt_error_t TVMPlatformMemoryFree(void* ptr, DLDevice dev) {
20400d84:	fe010113          	addi	sp,sp,-32
20400d88:	00112e23          	sw	ra,28(sp)
20400d8c:	00812c23          	sw	s0,24(sp)
20400d90:	02010413          	addi	s0,sp,32
20400d94:	fea42623          	sw	a0,-20(s0)
20400d98:	feb42223          	sw	a1,-28(s0)
20400d9c:	fec42423          	sw	a2,-24(s0)
  free(ptr);
20400da0:	fec42503          	lw	a0,-20(s0)
20400da4:	0c9110ef          	jal	ra,2041266c <__wrap_free>
  return kTvmErrorNoError;
20400da8:	00000793          	li	a5,0
}
20400dac:	00078513          	mv	a0,a5
20400db0:	01c12083          	lw	ra,28(sp)
20400db4:	01812403          	lw	s0,24(sp)
20400db8:	02010113          	addi	sp,sp,32
20400dbc:	00008067          	ret

20400dc0 <TVMPlatformTimerStart>:


// Called to start system timer.
tvm_crt_error_t TVMPlatformTimerStart() {
20400dc0:	ff010113          	addi	sp,sp,-16
20400dc4:	00812623          	sw	s0,12(sp)
20400dc8:	01010413          	addi	s0,sp,16
  //TODO
  return kTvmErrorNoError;
20400dcc:	00000793          	li	a5,0
}
20400dd0:	00078513          	mv	a0,a5
20400dd4:	00c12403          	lw	s0,12(sp)
20400dd8:	01010113          	addi	sp,sp,16
20400ddc:	00008067          	ret

20400de0 <TVMPlatformTimerStop>:

// Called to stop system timer.
tvm_crt_error_t TVMPlatformTimerStop(double* elapsed_time_seconds) {
20400de0:	fe010113          	addi	sp,sp,-32
20400de4:	00812e23          	sw	s0,28(sp)
20400de8:	02010413          	addi	s0,sp,32
20400dec:	fea42623          	sw	a0,-20(s0)
  //TODO
  return kTvmErrorNoError;
20400df0:	00000793          	li	a5,0
}
20400df4:	00078513          	mv	a0,a5
20400df8:	01c12403          	lw	s0,28(sp)
20400dfc:	02010113          	addi	sp,sp,32
20400e00:	00008067          	ret

20400e04 <uart_irq_cb>:


// UART interrupt callback.
void uart_irq_cb(const struct device* dev, void* user_data) {
20400e04:	fe010113          	addi	sp,sp,-32
20400e08:	00812e23          	sw	s0,28(sp)
20400e0c:	02010413          	addi	s0,sp,32
20400e10:	fea42623          	sw	a0,-20(s0)
20400e14:	feb42423          	sw	a1,-24(s0)

}
20400e18:	00000013          	nop
20400e1c:	01c12403          	lw	s0,28(sp)
20400e20:	02010113          	addi	sp,sp,32
20400e24:	00008067          	ret

20400e28 <TVMSystemLibEntryPoint>:

const void* TVMSystemLibEntryPoint(void) {
20400e28:	ff010113          	addi	sp,sp,-16
20400e2c:	00812623          	sw	s0,12(sp)
20400e30:	01010413          	addi	s0,sp,16
  return NULL;
20400e34:	00000793          	li	a5,0
}
20400e38:	00078513          	mv	a0,a5
20400e3c:	00c12403          	lw	s0,12(sp)
20400e40:	01010113          	addi	sp,sp,16
20400e44:	00008067          	ret

20400e48 <main>:

// The main function of this application.
int main(void) {
20400e48:	fd010113          	addi	sp,sp,-48
20400e4c:	02112623          	sw	ra,44(sp)
20400e50:	02812423          	sw	s0,40(sp)
20400e54:	03010413          	addi	s0,sp,48
  uart1_init(115200);
20400e58:	0001c7b7          	lui	a5,0x1c
20400e5c:	20078513          	addi	a0,a5,512 # 1c200 <__stack_size+0x18200>
20400e60:	b65ff0ef          	jal	ra,204009c4 <uart1_init>
  // Initialize microTVM RPC server, which will receive commands from the UART and execute them.
  microtvm_rpc_server_t server = MicroTVMRpcServerInit(write_serial, NULL);
20400e64:	00000593          	li	a1,0
20400e68:	00000517          	auipc	a0,0x0
20400e6c:	d4850513          	addi	a0,a0,-696 # 20400bb0 <write_serial>
20400e70:	7950c0ef          	jal	ra,2040de04 <MicroTVMRpcServerInit>
20400e74:	fea42623          	sw	a0,-20(s0)
  TVMLogf("microTVM TGC runtime - running");
20400e78:	0001f517          	auipc	a0,0x1f
20400e7c:	09050513          	addi	a0,a0,144 # 2041ff08 <__func__.2128+0x44>
20400e80:	0bc0d0ef          	jal	ra,2040df3c <TVMLogf>
  // The main application loop. We continuously read commands from the UART
  // and dispatch them to MicroTVMRpcServerLoop().
  while (1) {
    size_t bytes_read = uart1_read(serial_buffer_data, SERIAL_BUFFER_SIZE);
20400e84:	01000593          	li	a1,16
20400e88:	5fc00517          	auipc	a0,0x5fc00
20400e8c:	05c50513          	addi	a0,a0,92 # 80000ee4 <serial_buffer_data>
20400e90:	c7dff0ef          	jal	ra,20400b0c <uart1_read>
20400e94:	00050793          	mv	a5,a0
20400e98:	fef42423          	sw	a5,-24(s0)
    uint8_t *data = serial_buffer_data;
20400e9c:	5fc00797          	auipc	a5,0x5fc00
20400ea0:	04878793          	addi	a5,a5,72 # 80000ee4 <serial_buffer_data>
20400ea4:	fef42023          	sw	a5,-32(s0)
    if (bytes_read > 0) {
20400ea8:	fe842783          	lw	a5,-24(s0)
20400eac:	fc078ce3          	beqz	a5,20400e84 <main+0x3c>
      size_t bytes_remaining = bytes_read;
20400eb0:	fe842783          	lw	a5,-24(s0)
20400eb4:	fcf42e23          	sw	a5,-36(s0)
      while (bytes_remaining > 0) {
20400eb8:	03c0006f          	j	20400ef4 <main+0xac>
        // Pass the received bytes to the RPC server.
        tvm_crt_error_t err = MicroTVMRpcServerLoop(server, &data, &bytes_remaining);
20400ebc:	fdc40713          	addi	a4,s0,-36
20400ec0:	fe040793          	addi	a5,s0,-32
20400ec4:	00070613          	mv	a2,a4
20400ec8:	00078593          	mv	a1,a5
20400ecc:	fec42503          	lw	a0,-20(s0)
20400ed0:	1d80d0ef          	jal	ra,2040e0a8 <MicroTVMRpcServerLoop>
20400ed4:	fea42223          	sw	a0,-28(s0)
        if (err != kTvmErrorNoError && err != kTvmErrorFramingShortPacket) {
20400ed8:	fe442783          	lw	a5,-28(s0)
20400edc:	00078c63          	beqz	a5,20400ef4 <main+0xac>
20400ee0:	fe442703          	lw	a4,-28(s0)
20400ee4:	20100793          	li	a5,513
20400ee8:	00f70663          	beq	a4,a5,20400ef4 <main+0xac>
          TVMPlatformAbort(err);
20400eec:	fe442503          	lw	a0,-28(s0)
20400ef0:	d8dff0ef          	jal	ra,20400c7c <TVMPlatformAbort>
      while (bytes_remaining > 0) {
20400ef4:	fdc42783          	lw	a5,-36(s0)
20400ef8:	fc0792e3          	bnez	a5,20400ebc <main+0x74>
  while (1) {
20400efc:	f89ff06f          	j	20400e84 <main+0x3c>

20400f00 <TVMBackendAllocWorkspace>:
#include <tvm/runtime/crt/platform.h>

#include "crt_config.h"

void* TVMBackendAllocWorkspace(int device_type, int device_id, uint64_t nbytes, int dtype_code_hint,
                               int dtype_bits_hint) {
20400f00:	fa010113          	addi	sp,sp,-96
20400f04:	04112e23          	sw	ra,92(sp)
20400f08:	04812c23          	sw	s0,88(sp)
20400f0c:	06010413          	addi	s0,sp,96
20400f10:	fca42e23          	sw	a0,-36(s0)
20400f14:	fcb42c23          	sw	a1,-40(s0)
20400f18:	fcc42823          	sw	a2,-48(s0)
20400f1c:	fcd42a23          	sw	a3,-44(s0)
20400f20:	fce42623          	sw	a4,-52(s0)
20400f24:	fcf42423          	sw	a5,-56(s0)
  tvm_crt_error_t err = kTvmErrorNoError;
20400f28:	fe042623          	sw	zero,-20(s0)
  void* ptr = 0;
20400f2c:	fe042423          	sw	zero,-24(s0)
  DLDevice dev = {device_type, device_id};
20400f30:	fdc42783          	lw	a5,-36(s0)
20400f34:	fef42023          	sw	a5,-32(s0)
20400f38:	fd842783          	lw	a5,-40(s0)
20400f3c:	fef42223          	sw	a5,-28(s0)
  assert(nbytes > 0);
20400f40:	fd042783          	lw	a5,-48(s0)
20400f44:	fd442703          	lw	a4,-44(s0)
20400f48:	00e7e7b3          	or	a5,a5,a4
20400f4c:	02079263          	bnez	a5,20400f70 <TVMBackendAllocWorkspace+0x70>
20400f50:	0001f697          	auipc	a3,0x1f
20400f54:	fd868693          	addi	a3,a3,-40 # 2041ff28 <__func__.2128+0x64>
20400f58:	0001f617          	auipc	a2,0x1f
20400f5c:	0a860613          	addi	a2,a2,168 # 20420000 <__func__.3409>
20400f60:	02800593          	li	a1,40
20400f64:	0001f517          	auipc	a0,0x1f
20400f68:	fd050513          	addi	a0,a0,-48 # 2041ff34 <__func__.2128+0x70>
20400f6c:	268120ef          	jal	ra,204131d4 <__assert_func>
  err = TVMPlatformMemoryAllocate(nbytes, dev, &ptr);
20400f70:	fd042783          	lw	a5,-48(s0)
20400f74:	fe840713          	addi	a4,s0,-24
20400f78:	00070693          	mv	a3,a4
20400f7c:	fe042583          	lw	a1,-32(s0)
20400f80:	fe442603          	lw	a2,-28(s0)
20400f84:	00078513          	mv	a0,a5
20400f88:	d99ff0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20400f8c:	fea42623          	sw	a0,-20(s0)
  CHECK_EQ(err, kTvmErrorNoError,
20400f90:	fec42783          	lw	a5,-20(s0)
20400f94:	06078263          	beqz	a5,20400ff8 <TVMBackendAllocWorkspace+0xf8>
20400f98:	fec42783          	lw	a5,-20(s0)
20400f9c:	00f12823          	sw	a5,16(sp)
20400fa0:	fc842783          	lw	a5,-56(s0)
20400fa4:	00f12623          	sw	a5,12(sp)
20400fa8:	fcc42783          	lw	a5,-52(s0)
20400fac:	00f12423          	sw	a5,8(sp)
20400fb0:	fd042783          	lw	a5,-48(s0)
20400fb4:	fd442803          	lw	a6,-44(s0)
20400fb8:	00f12023          	sw	a5,0(sp)
20400fbc:	01012223          	sw	a6,4(sp)
20400fc0:	fd842803          	lw	a6,-40(s0)
20400fc4:	fdc42783          	lw	a5,-36(s0)
20400fc8:	0001f717          	auipc	a4,0x1f
20400fcc:	f9c70713          	addi	a4,a4,-100 # 2041ff64 <__func__.2128+0xa0>
20400fd0:	0001f697          	auipc	a3,0x1f
20400fd4:	fa868693          	addi	a3,a3,-88 # 2041ff78 <__func__.2128+0xb4>
20400fd8:	0001f617          	auipc	a2,0x1f
20400fdc:	fa460613          	addi	a2,a2,-92 # 2041ff7c <__func__.2128+0xb8>
20400fe0:	02c00593          	li	a1,44
20400fe4:	0001f517          	auipc	a0,0x1f
20400fe8:	f9c50513          	addi	a0,a0,-100 # 2041ff80 <__func__.2128+0xbc>
20400fec:	7510c0ef          	jal	ra,2040df3c <TVMLogf>
20400ff0:	50000513          	li	a0,1280
20400ff4:	c89ff0ef          	jal	ra,20400c7c <TVMPlatformAbort>
           "TVMBackendAllocWorkspace(%d, %d, %" PRIu64 ", %d, %d) -> %" PRId32, device_type,
           device_id, nbytes, dtype_code_hint, dtype_bits_hint, err);
  return ptr;
20400ff8:	fe842783          	lw	a5,-24(s0)
}
20400ffc:	00078513          	mv	a0,a5
20401000:	05c12083          	lw	ra,92(sp)
20401004:	05812403          	lw	s0,88(sp)
20401008:	06010113          	addi	sp,sp,96
2040100c:	00008067          	ret

20401010 <TVMBackendFreeWorkspace>:

int TVMBackendFreeWorkspace(int device_type, int device_id, void* ptr) {
20401010:	fd010113          	addi	sp,sp,-48
20401014:	02112623          	sw	ra,44(sp)
20401018:	02812423          	sw	s0,40(sp)
2040101c:	03010413          	addi	s0,sp,48
20401020:	fca42e23          	sw	a0,-36(s0)
20401024:	fcb42c23          	sw	a1,-40(s0)
20401028:	fcc42a23          	sw	a2,-44(s0)
  tvm_crt_error_t err = kTvmErrorNoError;
2040102c:	fe042623          	sw	zero,-20(s0)
  DLDevice dev = {device_type, device_id};
20401030:	fdc42783          	lw	a5,-36(s0)
20401034:	fef42223          	sw	a5,-28(s0)
20401038:	fd842783          	lw	a5,-40(s0)
2040103c:	fef42423          	sw	a5,-24(s0)
  err = TVMPlatformMemoryFree(ptr, dev);
20401040:	fe442583          	lw	a1,-28(s0)
20401044:	fe842603          	lw	a2,-24(s0)
20401048:	fd442503          	lw	a0,-44(s0)
2040104c:	d39ff0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20401050:	fea42623          	sw	a0,-20(s0)
  return err;
20401054:	fec42783          	lw	a5,-20(s0)
}
20401058:	00078513          	mv	a0,a5
2040105c:	02c12083          	lw	ra,44(sp)
20401060:	02812403          	lw	s0,40(sp)
20401064:	03010113          	addi	sp,sp,48
20401068:	00008067          	ret

2040106c <TVMBackendParallelLaunch>:

int TVMBackendParallelLaunch(FTVMParallelLambda flambda, void* cdata, int num_task) {
2040106c:	fd010113          	addi	sp,sp,-48
20401070:	02112623          	sw	ra,44(sp)
20401074:	02812423          	sw	s0,40(sp)
20401078:	03010413          	addi	s0,sp,48
2040107c:	fca42e23          	sw	a0,-36(s0)
20401080:	fcb42c23          	sw	a1,-40(s0)
20401084:	fcc42a23          	sw	a2,-44(s0)
  TVMParallelGroupEnv env;
  env.num_task = 1;
20401088:	00100793          	li	a5,1
2040108c:	fef42623          	sw	a5,-20(s0)
  flambda(0, &env, cdata);
20401090:	fe840793          	addi	a5,s0,-24
20401094:	fdc42703          	lw	a4,-36(s0)
20401098:	fd842603          	lw	a2,-40(s0)
2040109c:	00078593          	mv	a1,a5
204010a0:	00000513          	li	a0,0
204010a4:	000700e7          	jalr	a4
  return 0;
204010a8:	00000793          	li	a5,0
}
204010ac:	00078513          	mv	a0,a5
204010b0:	02c12083          	lw	ra,44(sp)
204010b4:	02812403          	lw	s0,40(sp)
204010b8:	03010113          	addi	sp,sp,48
204010bc:	00008067          	ret

204010c0 <TVMBackendRegisterSystemLibSymbol>:

int TVMBackendRegisterSystemLibSymbol(const char* name, void* ptr) {
204010c0:	fe010113          	addi	sp,sp,-32
204010c4:	00112e23          	sw	ra,28(sp)
204010c8:	00812c23          	sw	s0,24(sp)
204010cc:	02010413          	addi	s0,sp,32
204010d0:	fea42623          	sw	a0,-20(s0)
204010d4:	feb42423          	sw	a1,-24(s0)
  return TVMFuncRegisterGlobal(name, ptr, 0);
204010d8:	00000613          	li	a2,0
204010dc:	fe842583          	lw	a1,-24(s0)
204010e0:	fec42503          	lw	a0,-20(s0)
204010e4:	748000ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
204010e8:	00050793          	mv	a5,a0
}
204010ec:	00078513          	mv	a0,a5
204010f0:	01c12083          	lw	ra,28(sp)
204010f4:	01812403          	lw	s0,24(sp)
204010f8:	02010113          	addi	sp,sp,32
204010fc:	00008067          	ret

20401100 <TVMAPISetLastError>:

// Handle internal errors

static char g_last_error[1024];

void TVMAPISetLastError(const char* msg) {
20401100:	fe010113          	addi	sp,sp,-32
20401104:	00112e23          	sw	ra,28(sp)
20401108:	00812c23          	sw	s0,24(sp)
2040110c:	02010413          	addi	s0,sp,32
20401110:	fea42623          	sw	a0,-20(s0)
  strncpy(g_last_error, msg, sizeof(g_last_error) - 1);
20401114:	3ff00613          	li	a2,1023
20401118:	fec42583          	lw	a1,-20(s0)
2040111c:	5fc00517          	auipc	a0,0x5fc00
20401120:	95450513          	addi	a0,a0,-1708 # 80000a70 <g_last_error>
20401124:	744120ef          	jal	ra,20413868 <strncpy>
  g_last_error[sizeof(g_last_error) - 1] = 0;
20401128:	5fc00797          	auipc	a5,0x5fc00
2040112c:	94878793          	addi	a5,a5,-1720 # 80000a70 <g_last_error>
20401130:	3e078fa3          	sb	zero,1023(a5)
}
20401134:	00000013          	nop
20401138:	01c12083          	lw	ra,28(sp)
2040113c:	01812403          	lw	s0,24(sp)
20401140:	02010113          	addi	sp,sp,32
20401144:	00008067          	ret

20401148 <TVMAPIErrorf>:

__attribute__((format(printf, 1, 2))) int TVMAPIErrorf(const char* msg, ...) {
20401148:	fb010113          	addi	sp,sp,-80
2040114c:	02112623          	sw	ra,44(sp)
20401150:	02812423          	sw	s0,40(sp)
20401154:	03010413          	addi	s0,sp,48
20401158:	fca42e23          	sw	a0,-36(s0)
2040115c:	00b42223          	sw	a1,4(s0)
20401160:	00c42423          	sw	a2,8(s0)
20401164:	00d42623          	sw	a3,12(s0)
20401168:	00e42823          	sw	a4,16(s0)
2040116c:	00f42a23          	sw	a5,20(s0)
20401170:	01042c23          	sw	a6,24(s0)
20401174:	01142e23          	sw	a7,28(s0)
  va_list args;
  int to_return;

  va_start(args, msg);
20401178:	02040793          	addi	a5,s0,32
2040117c:	fe478793          	addi	a5,a5,-28
20401180:	fef42423          	sw	a5,-24(s0)
  to_return = vsnprintf(g_last_error, sizeof(g_last_error), msg, args);
20401184:	fe842783          	lw	a5,-24(s0)
20401188:	00078693          	mv	a3,a5
2040118c:	fdc42603          	lw	a2,-36(s0)
20401190:	40000593          	li	a1,1024
20401194:	5fc00517          	auipc	a0,0x5fc00
20401198:	8dc50513          	addi	a0,a0,-1828 # 80000a70 <g_last_error>
2040119c:	1da160ef          	jal	ra,20417376 <vsnprintf>
204011a0:	fea42623          	sw	a0,-20(s0)
  va_end(args);

  return to_return;
204011a4:	fec42783          	lw	a5,-20(s0)
}
204011a8:	00078513          	mv	a0,a5
204011ac:	02c12083          	lw	ra,44(sp)
204011b0:	02812403          	lw	s0,40(sp)
204011b4:	05010113          	addi	sp,sp,80
204011b8:	00008067          	ret

204011bc <TVMGetLastError>:

const char* TVMGetLastError(void) { return g_last_error; }
204011bc:	ff010113          	addi	sp,sp,-16
204011c0:	00812623          	sw	s0,12(sp)
204011c4:	01010413          	addi	s0,sp,16
204011c8:	5fc00797          	auipc	a5,0x5fc00
204011cc:	8a878793          	addi	a5,a5,-1880 # 80000a70 <g_last_error>
204011d0:	00078513          	mv	a0,a5
204011d4:	00c12403          	lw	s0,12(sp)
204011d8:	01010113          	addi	sp,sp,16
204011dc:	00008067          	ret

204011e0 <TVMArrayAlloc>:

// Manipulate NDArray on target device

int TVMArrayAlloc(const tvm_index_t* shape, int ndim, int dtype_code, int dtype_bits,
                  int dtype_lanes, int device_type, int device_id, TVMArrayHandle* out) {
204011e0:	f9010113          	addi	sp,sp,-112
204011e4:	06112623          	sw	ra,108(sp)
204011e8:	06812423          	sw	s0,104(sp)
204011ec:	07010413          	addi	s0,sp,112
204011f0:	faa42623          	sw	a0,-84(s0)
204011f4:	fab42423          	sw	a1,-88(s0)
204011f8:	fac42223          	sw	a2,-92(s0)
204011fc:	fad42023          	sw	a3,-96(s0)
20401200:	f8e42e23          	sw	a4,-100(s0)
20401204:	f8f42c23          	sw	a5,-104(s0)
20401208:	f9042a23          	sw	a6,-108(s0)
2040120c:	f9142823          	sw	a7,-112(s0)
  DLDataType dtype;
  dtype.code = dtype_code;
20401210:	fa442783          	lw	a5,-92(s0)
20401214:	0ff7f793          	andi	a5,a5,255
20401218:	fef40423          	sb	a5,-24(s0)
  dtype.bits = dtype_bits;
2040121c:	fa042783          	lw	a5,-96(s0)
20401220:	0ff7f793          	andi	a5,a5,255
20401224:	fef404a3          	sb	a5,-23(s0)
  dtype.lanes = dtype_lanes;
20401228:	f9c42783          	lw	a5,-100(s0)
2040122c:	01079793          	slli	a5,a5,0x10
20401230:	0107d793          	srli	a5,a5,0x10
20401234:	fef41523          	sh	a5,-22(s0)
  DLDevice dev;
  dev.device_type = (DLDeviceType)device_type;
20401238:	f9842783          	lw	a5,-104(s0)
2040123c:	fef42023          	sw	a5,-32(s0)
  dev.device_id = device_id;
20401240:	f9442783          	lw	a5,-108(s0)
20401244:	fef42223          	sw	a5,-28(s0)
  TVMNDArray arr;
  int status = TVMNDArray_Empty(ndim, shape, dtype, dev, &arr);
20401248:	fb840793          	addi	a5,s0,-72
2040124c:	fe042683          	lw	a3,-32(s0)
20401250:	fe442703          	lw	a4,-28(s0)
20401254:	fe842603          	lw	a2,-24(s0)
20401258:	fac42583          	lw	a1,-84(s0)
2040125c:	fa842503          	lw	a0,-88(s0)
20401260:	669010ef          	jal	ra,204030c8 <TVMNDArray_Empty>
20401264:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20401268:	fec42783          	lw	a5,-20(s0)
2040126c:	00078663          	beqz	a5,20401278 <TVMArrayAlloc+0x98>
    return status;
20401270:	fec42783          	lw	a5,-20(s0)
20401274:	02c0006f          	j	204012a0 <TVMArrayAlloc+0xc0>
  }
  **out = arr.dl_tensor;
20401278:	f9042783          	lw	a5,-112(s0)
2040127c:	0007a783          	lw	a5,0(a5)
20401280:	00078693          	mv	a3,a5
20401284:	fb840793          	addi	a5,s0,-72
20401288:	02800713          	li	a4,40
2040128c:	00070613          	mv	a2,a4
20401290:	00078593          	mv	a1,a5
20401294:	00068513          	mv	a0,a3
20401298:	23c120ef          	jal	ra,204134d4 <memcpy>
  return 0;
2040129c:	00000793          	li	a5,0
}
204012a0:	00078513          	mv	a0,a5
204012a4:	06c12083          	lw	ra,108(sp)
204012a8:	06812403          	lw	s0,104(sp)
204012ac:	07010113          	addi	sp,sp,112
204012b0:	00008067          	ret

204012b4 <TVMArrayFree>:

int TVMArrayFree(TVMArrayHandle handle) {
204012b4:	fb010113          	addi	sp,sp,-80
204012b8:	04112623          	sw	ra,76(sp)
204012bc:	04812423          	sw	s0,72(sp)
204012c0:	05010413          	addi	s0,sp,80
204012c4:	faa42e23          	sw	a0,-68(s0)
  TVMNDArray arr;
  arr.dl_tensor = *handle;
204012c8:	fbc42703          	lw	a4,-68(s0)
204012cc:	fc840793          	addi	a5,s0,-56
204012d0:	00070693          	mv	a3,a4
204012d4:	02800713          	li	a4,40
204012d8:	00070613          	mv	a2,a4
204012dc:	00068593          	mv	a1,a3
204012e0:	00078513          	mv	a0,a5
204012e4:	1f0120ef          	jal	ra,204134d4 <memcpy>
  return TVMNDArray_Release(&arr);
204012e8:	fc840793          	addi	a5,s0,-56
204012ec:	00078513          	mv	a0,a5
204012f0:	418020ef          	jal	ra,20403708 <TVMNDArray_Release>
204012f4:	00050793          	mv	a5,a0
}
204012f8:	00078513          	mv	a0,a5
204012fc:	04c12083          	lw	ra,76(sp)
20401300:	04812403          	lw	s0,72(sp)
20401304:	05010113          	addi	sp,sp,80
20401308:	00008067          	ret

2040130c <TVMDeviceAllocDataSpace>:

int TVMDeviceAllocDataSpace(DLDevice dev, size_t nbytes, size_t alignment, DLDataType type_hint,
                            void** out_data) {
2040130c:	fd010113          	addi	sp,sp,-48
20401310:	02112623          	sw	ra,44(sp)
20401314:	02812423          	sw	s0,40(sp)
20401318:	03010413          	addi	s0,sp,48
2040131c:	fea42423          	sw	a0,-24(s0)
20401320:	feb42623          	sw	a1,-20(s0)
20401324:	fec42223          	sw	a2,-28(s0)
20401328:	fed42023          	sw	a3,-32(s0)
2040132c:	fce42e23          	sw	a4,-36(s0)
20401330:	fcf42c23          	sw	a5,-40(s0)
  if (alignment != 1) {
20401334:	fe042703          	lw	a4,-32(s0)
20401338:	00100793          	li	a5,1
2040133c:	02f70c63          	beq	a4,a5,20401374 <TVMDeviceAllocDataSpace+0x68>
    nbytes = (nbytes + alignment - 1) / alignment * alignment;
20401340:	fe442703          	lw	a4,-28(s0)
20401344:	fe042783          	lw	a5,-32(s0)
20401348:	00f707b3          	add	a5,a4,a5
2040134c:	fff78793          	addi	a5,a5,-1
20401350:	fe042583          	lw	a1,-32(s0)
20401354:	00078513          	mv	a0,a5
20401358:	1551e0ef          	jal	ra,2041fcac <__udivsi3>
2040135c:	00050793          	mv	a5,a0
20401360:	00078593          	mv	a1,a5
20401364:	fe042503          	lw	a0,-32(s0)
20401368:	0c91e0ef          	jal	ra,2041fc30 <__mulsi3>
2040136c:	00050793          	mv	a5,a0
20401370:	fef42223          	sw	a5,-28(s0)
  }
  return TVMPlatformMemoryAllocate(nbytes, dev, out_data);
20401374:	fd842683          	lw	a3,-40(s0)
20401378:	fe842583          	lw	a1,-24(s0)
2040137c:	fec42603          	lw	a2,-20(s0)
20401380:	fe442503          	lw	a0,-28(s0)
20401384:	99dff0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20401388:	00050793          	mv	a5,a0
}
2040138c:	00078513          	mv	a0,a5
20401390:	02c12083          	lw	ra,44(sp)
20401394:	02812403          	lw	s0,40(sp)
20401398:	03010113          	addi	sp,sp,48
2040139c:	00008067          	ret

204013a0 <TVMDeviceAllocDataSpaceWithScope>:

int TVMDeviceAllocDataSpaceWithScope(DLDevice dev, int ndim, const int64_t* shape, DLDataType dtype,
                                     const char* mem_scope, void** out_data) {
204013a0:	fc010113          	addi	sp,sp,-64
204013a4:	02112e23          	sw	ra,60(sp)
204013a8:	02812c23          	sw	s0,56(sp)
204013ac:	04010413          	addi	s0,sp,64
204013b0:	fca42c23          	sw	a0,-40(s0)
204013b4:	fcb42e23          	sw	a1,-36(s0)
204013b8:	fcc42a23          	sw	a2,-44(s0)
204013bc:	fcd42823          	sw	a3,-48(s0)
204013c0:	fce42623          	sw	a4,-52(s0)
204013c4:	fcf42423          	sw	a5,-56(s0)
204013c8:	fd042223          	sw	a6,-60(s0)
  size_t nbytes = 1;
204013cc:	00100793          	li	a5,1
204013d0:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < ndim; ++i) {
204013d4:	fe042423          	sw	zero,-24(s0)
204013d8:	03c0006f          	j	20401414 <TVMDeviceAllocDataSpaceWithScope+0x74>
    nbytes *= shape[i];
204013dc:	fe842783          	lw	a5,-24(s0)
204013e0:	00379793          	slli	a5,a5,0x3
204013e4:	fd042703          	lw	a4,-48(s0)
204013e8:	00f707b3          	add	a5,a4,a5
204013ec:	0047a803          	lw	a6,4(a5)
204013f0:	0007a783          	lw	a5,0(a5)
204013f4:	00078593          	mv	a1,a5
204013f8:	fec42503          	lw	a0,-20(s0)
204013fc:	0351e0ef          	jal	ra,2041fc30 <__mulsi3>
20401400:	00050793          	mv	a5,a0
20401404:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < ndim; ++i) {
20401408:	fe842783          	lw	a5,-24(s0)
2040140c:	00178793          	addi	a5,a5,1
20401410:	fef42423          	sw	a5,-24(s0)
20401414:	fe842703          	lw	a4,-24(s0)
20401418:	fd442783          	lw	a5,-44(s0)
2040141c:	fcf740e3          	blt	a4,a5,204013dc <TVMDeviceAllocDataSpaceWithScope+0x3c>
  }
  nbytes *= (dtype.bits * dtype.lanes + 7) / 8;
20401420:	fcd44783          	lbu	a5,-51(s0)
20401424:	00078713          	mv	a4,a5
20401428:	fce45783          	lhu	a5,-50(s0)
2040142c:	00078593          	mv	a1,a5
20401430:	00070513          	mv	a0,a4
20401434:	7fc1e0ef          	jal	ra,2041fc30 <__mulsi3>
20401438:	00050793          	mv	a5,a0
2040143c:	00778793          	addi	a5,a5,7
20401440:	41f7d713          	srai	a4,a5,0x1f
20401444:	00777713          	andi	a4,a4,7
20401448:	00f707b3          	add	a5,a4,a5
2040144c:	4037d793          	srai	a5,a5,0x3
20401450:	00078593          	mv	a1,a5
20401454:	fec42503          	lw	a0,-20(s0)
20401458:	7d81e0ef          	jal	ra,2041fc30 <__mulsi3>
2040145c:	00050793          	mv	a5,a0
20401460:	fef42623          	sw	a5,-20(s0)

  int kAllocAlignment = 128;
20401464:	08000793          	li	a5,128
20401468:	fef42023          	sw	a5,-32(s0)
  size_t align = (dtype.bits / 8) * dtype.lanes;
2040146c:	fcd44783          	lbu	a5,-51(s0)
20401470:	0037d793          	srli	a5,a5,0x3
20401474:	0ff7f793          	andi	a5,a5,255
20401478:	00078713          	mv	a4,a5
2040147c:	fce45783          	lhu	a5,-50(s0)
20401480:	00078593          	mv	a1,a5
20401484:	00070513          	mv	a0,a4
20401488:	7a81e0ef          	jal	ra,2041fc30 <__mulsi3>
2040148c:	00050793          	mv	a5,a0
20401490:	fef42223          	sw	a5,-28(s0)
  if (align < kAllocAlignment) align = kAllocAlignment;
20401494:	fe042783          	lw	a5,-32(s0)
20401498:	fe442703          	lw	a4,-28(s0)
2040149c:	00f77663          	bleu	a5,a4,204014a8 <TVMDeviceAllocDataSpaceWithScope+0x108>
204014a0:	fe042783          	lw	a5,-32(s0)
204014a4:	fef42223          	sw	a5,-28(s0)
  return TVMDeviceAllocDataSpace(dev, nbytes, align, dtype, out_data);
204014a8:	fc442783          	lw	a5,-60(s0)
204014ac:	fcc42703          	lw	a4,-52(s0)
204014b0:	fe442683          	lw	a3,-28(s0)
204014b4:	fec42603          	lw	a2,-20(s0)
204014b8:	fd842503          	lw	a0,-40(s0)
204014bc:	fdc42583          	lw	a1,-36(s0)
204014c0:	e4dff0ef          	jal	ra,2040130c <TVMDeviceAllocDataSpace>
204014c4:	00050793          	mv	a5,a0
}
204014c8:	00078513          	mv	a0,a5
204014cc:	03c12083          	lw	ra,60(sp)
204014d0:	03812403          	lw	s0,56(sp)
204014d4:	04010113          	addi	sp,sp,64
204014d8:	00008067          	ret

204014dc <TVMDeviceFreeDataSpace>:

int TVMDeviceFreeDataSpace(DLDevice dev, void* ptr) { return TVMPlatformMemoryFree(ptr, dev); }
204014dc:	fe010113          	addi	sp,sp,-32
204014e0:	00112e23          	sw	ra,28(sp)
204014e4:	00812c23          	sw	s0,24(sp)
204014e8:	02010413          	addi	s0,sp,32
204014ec:	fea42423          	sw	a0,-24(s0)
204014f0:	feb42623          	sw	a1,-20(s0)
204014f4:	fec42223          	sw	a2,-28(s0)
204014f8:	fe842583          	lw	a1,-24(s0)
204014fc:	fec42603          	lw	a2,-20(s0)
20401500:	fe442503          	lw	a0,-28(s0)
20401504:	881ff0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20401508:	00050793          	mv	a5,a0
2040150c:	00078513          	mv	a0,a5
20401510:	01c12083          	lw	ra,28(sp)
20401514:	01812403          	lw	s0,24(sp)
20401518:	02010113          	addi	sp,sp,32
2040151c:	00008067          	ret

20401520 <IsContiguous>:

static bool IsContiguous(const DLTensor* arr) {
20401520:	fd010113          	addi	sp,sp,-48
20401524:	02112623          	sw	ra,44(sp)
20401528:	02812423          	sw	s0,40(sp)
2040152c:	03010413          	addi	s0,sp,48
20401530:	fca42e23          	sw	a0,-36(s0)
  if (arr->strides == NULL) return true;
20401534:	fdc42783          	lw	a5,-36(s0)
20401538:	0187a783          	lw	a5,24(a5)
2040153c:	00079663          	bnez	a5,20401548 <IsContiguous+0x28>
20401540:	00100793          	li	a5,1
20401544:	0c40006f          	j	20401608 <IsContiguous+0xe8>
  int64_t expected_stride = 1;
20401548:	00100793          	li	a5,1
2040154c:	00000813          	li	a6,0
20401550:	fef42423          	sw	a5,-24(s0)
20401554:	ff042623          	sw	a6,-20(s0)
  for (int32_t i = arr->ndim; i != 0; --i) {
20401558:	fdc42783          	lw	a5,-36(s0)
2040155c:	00c7a783          	lw	a5,12(a5)
20401560:	fef42223          	sw	a5,-28(s0)
20401564:	0980006f          	j	204015fc <IsContiguous+0xdc>
    int32_t k = i - 1;
20401568:	fe442783          	lw	a5,-28(s0)
2040156c:	fff78793          	addi	a5,a5,-1
20401570:	fef42023          	sw	a5,-32(s0)
    if (arr->strides[k] != expected_stride) return false;
20401574:	fdc42783          	lw	a5,-36(s0)
20401578:	0187a703          	lw	a4,24(a5)
2040157c:	fe042783          	lw	a5,-32(s0)
20401580:	00379793          	slli	a5,a5,0x3
20401584:	00f707b3          	add	a5,a4,a5
20401588:	0047a803          	lw	a6,4(a5)
2040158c:	0007a783          	lw	a5,0(a5)
20401590:	fe842703          	lw	a4,-24(s0)
20401594:	00078693          	mv	a3,a5
20401598:	00d71863          	bne	a4,a3,204015a8 <IsContiguous+0x88>
2040159c:	fec42703          	lw	a4,-20(s0)
204015a0:	00080793          	mv	a5,a6
204015a4:	00f70663          	beq	a4,a5,204015b0 <IsContiguous+0x90>
204015a8:	00000793          	li	a5,0
204015ac:	05c0006f          	j	20401608 <IsContiguous+0xe8>
    expected_stride *= arr->shape[k];
204015b0:	fdc42783          	lw	a5,-36(s0)
204015b4:	0147a703          	lw	a4,20(a5)
204015b8:	fe042783          	lw	a5,-32(s0)
204015bc:	00379793          	slli	a5,a5,0x3
204015c0:	00f707b3          	add	a5,a4,a5
204015c4:	0047a803          	lw	a6,4(a5)
204015c8:	0007a783          	lw	a5,0(a5)
204015cc:	00078613          	mv	a2,a5
204015d0:	00080693          	mv	a3,a6
204015d4:	fe842503          	lw	a0,-24(s0)
204015d8:	fec42583          	lw	a1,-20(s0)
204015dc:	66c1e0ef          	jal	ra,2041fc48 <__muldi3>
204015e0:	00050793          	mv	a5,a0
204015e4:	00058813          	mv	a6,a1
204015e8:	fef42423          	sw	a5,-24(s0)
204015ec:	ff042623          	sw	a6,-20(s0)
  for (int32_t i = arr->ndim; i != 0; --i) {
204015f0:	fe442783          	lw	a5,-28(s0)
204015f4:	fff78793          	addi	a5,a5,-1
204015f8:	fef42223          	sw	a5,-28(s0)
204015fc:	fe442783          	lw	a5,-28(s0)
20401600:	f60794e3          	bnez	a5,20401568 <IsContiguous+0x48>
  }
  return true;
20401604:	00100793          	li	a5,1
}
20401608:	00078513          	mv	a0,a5
2040160c:	02c12083          	lw	ra,44(sp)
20401610:	02812403          	lw	s0,40(sp)
20401614:	03010113          	addi	sp,sp,48
20401618:	00008067          	ret

2040161c <TVMDeviceCopyDataFromTo>:

int TVMDeviceCopyDataFromTo(DLTensor* from, DLTensor* to, TVMStreamHandle stream) {
2040161c:	fd010113          	addi	sp,sp,-48
20401620:	02112623          	sw	ra,44(sp)
20401624:	02812423          	sw	s0,40(sp)
20401628:	03010413          	addi	s0,sp,48
2040162c:	fca42e23          	sw	a0,-36(s0)
20401630:	fcb42c23          	sw	a1,-40(s0)
20401634:	fcc42a23          	sw	a2,-44(s0)
  assert(IsContiguous(from) && IsContiguous(to));
20401638:	fdc42503          	lw	a0,-36(s0)
2040163c:	ee5ff0ef          	jal	ra,20401520 <IsContiguous>
20401640:	00050793          	mv	a5,a0
20401644:	00078a63          	beqz	a5,20401658 <TVMDeviceCopyDataFromTo+0x3c>
20401648:	fd842503          	lw	a0,-40(s0)
2040164c:	ed5ff0ef          	jal	ra,20401520 <IsContiguous>
20401650:	00050793          	mv	a5,a0
20401654:	02079263          	bnez	a5,20401678 <TVMDeviceCopyDataFromTo+0x5c>
20401658:	0001f697          	auipc	a3,0x1f
2040165c:	9c868693          	addi	a3,a3,-1592 # 20420020 <__func__.3409+0x20>
20401660:	0001f617          	auipc	a2,0x1f
20401664:	b8060613          	addi	a2,a2,-1152 # 204201e0 <__func__.3846>
20401668:	07800593          	li	a1,120
2040166c:	0001f517          	auipc	a0,0x1f
20401670:	9dc50513          	addi	a0,a0,-1572 # 20420048 <__func__.3409+0x48>
20401674:	361110ef          	jal	ra,204131d4 <__assert_func>
  size_t size = 1;
20401678:	00100793          	li	a5,1
2040167c:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < from->ndim; ++i) {
20401680:	fe042423          	sw	zero,-24(s0)
20401684:	0400006f          	j	204016c4 <TVMDeviceCopyDataFromTo+0xa8>
    size *= from->shape[i];
20401688:	fdc42783          	lw	a5,-36(s0)
2040168c:	0147a703          	lw	a4,20(a5)
20401690:	fe842783          	lw	a5,-24(s0)
20401694:	00379793          	slli	a5,a5,0x3
20401698:	00f707b3          	add	a5,a4,a5
2040169c:	0047a803          	lw	a6,4(a5)
204016a0:	0007a783          	lw	a5,0(a5)
204016a4:	00078593          	mv	a1,a5
204016a8:	fec42503          	lw	a0,-20(s0)
204016ac:	5841e0ef          	jal	ra,2041fc30 <__mulsi3>
204016b0:	00050793          	mv	a5,a0
204016b4:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < from->ndim; ++i) {
204016b8:	fe842783          	lw	a5,-24(s0)
204016bc:	00178793          	addi	a5,a5,1
204016c0:	fef42423          	sw	a5,-24(s0)
204016c4:	fdc42783          	lw	a5,-36(s0)
204016c8:	00c7a783          	lw	a5,12(a5)
204016cc:	fe842703          	lw	a4,-24(s0)
204016d0:	faf74ce3          	blt	a4,a5,20401688 <TVMDeviceCopyDataFromTo+0x6c>
  }
  size *= (from->dtype.bits * from->dtype.lanes + 7) / 8;
204016d4:	fdc42783          	lw	a5,-36(s0)
204016d8:	0117c783          	lbu	a5,17(a5)
204016dc:	00078713          	mv	a4,a5
204016e0:	fdc42783          	lw	a5,-36(s0)
204016e4:	0127d783          	lhu	a5,18(a5)
204016e8:	00078593          	mv	a1,a5
204016ec:	00070513          	mv	a0,a4
204016f0:	5401e0ef          	jal	ra,2041fc30 <__mulsi3>
204016f4:	00050793          	mv	a5,a0
204016f8:	00778793          	addi	a5,a5,7
204016fc:	41f7d713          	srai	a4,a5,0x1f
20401700:	00777713          	andi	a4,a4,7
20401704:	00f707b3          	add	a5,a4,a5
20401708:	4037d793          	srai	a5,a5,0x3
2040170c:	00078593          	mv	a1,a5
20401710:	fec42503          	lw	a0,-20(s0)
20401714:	51c1e0ef          	jal	ra,2041fc30 <__mulsi3>
20401718:	00050793          	mv	a5,a0
2040171c:	fef42623          	sw	a5,-20(s0)
  memcpy(((uint8_t*)to->data) + to->byte_offset, ((uint8_t*)from->data) + from->byte_offset, size);
20401720:	fd842783          	lw	a5,-40(s0)
20401724:	0007a703          	lw	a4,0(a5)
20401728:	fd842783          	lw	a5,-40(s0)
2040172c:	0247a803          	lw	a6,36(a5)
20401730:	0207a783          	lw	a5,32(a5)
20401734:	00f706b3          	add	a3,a4,a5
20401738:	fdc42783          	lw	a5,-36(s0)
2040173c:	0007a703          	lw	a4,0(a5)
20401740:	fdc42783          	lw	a5,-36(s0)
20401744:	0247a803          	lw	a6,36(a5)
20401748:	0207a783          	lw	a5,32(a5)
2040174c:	00f707b3          	add	a5,a4,a5
20401750:	fec42603          	lw	a2,-20(s0)
20401754:	00078593          	mv	a1,a5
20401758:	00068513          	mv	a0,a3
2040175c:	579110ef          	jal	ra,204134d4 <memcpy>
  return 0;
20401760:	00000793          	li	a5,0
}
20401764:	00078513          	mv	a0,a5
20401768:	02c12083          	lw	ra,44(sp)
2040176c:	02812403          	lw	s0,40(sp)
20401770:	03010113          	addi	sp,sp,48
20401774:	00008067          	ret

20401778 <TVMStreamCreate>:

int TVMStreamCreate(int device_type, int device_id, TVMStreamHandle* out) {
20401778:	fe010113          	addi	sp,sp,-32
2040177c:	00812e23          	sw	s0,28(sp)
20401780:	02010413          	addi	s0,sp,32
20401784:	fea42623          	sw	a0,-20(s0)
20401788:	feb42423          	sw	a1,-24(s0)
2040178c:	fec42223          	sw	a2,-28(s0)
  out = NULL;
20401790:	fe042223          	sw	zero,-28(s0)
  return 0;
20401794:	00000793          	li	a5,0
}
20401798:	00078513          	mv	a0,a5
2040179c:	01c12403          	lw	s0,28(sp)
204017a0:	02010113          	addi	sp,sp,32
204017a4:	00008067          	ret

204017a8 <TVMStreamFree>:

int TVMStreamFree(int device_type, int device_id, TVMStreamHandle stream) { return 0; }
204017a8:	fe010113          	addi	sp,sp,-32
204017ac:	00812e23          	sw	s0,28(sp)
204017b0:	02010413          	addi	s0,sp,32
204017b4:	fea42623          	sw	a0,-20(s0)
204017b8:	feb42423          	sw	a1,-24(s0)
204017bc:	fec42223          	sw	a2,-28(s0)
204017c0:	00000793          	li	a5,0
204017c4:	00078513          	mv	a0,a5
204017c8:	01c12403          	lw	s0,28(sp)
204017cc:	02010113          	addi	sp,sp,32
204017d0:	00008067          	ret

204017d4 <TVMSetStream>:

int TVMSetStream(int device_type, int device_id, TVMStreamHandle stream) { return 0; }
204017d4:	fe010113          	addi	sp,sp,-32
204017d8:	00812e23          	sw	s0,28(sp)
204017dc:	02010413          	addi	s0,sp,32
204017e0:	fea42623          	sw	a0,-20(s0)
204017e4:	feb42423          	sw	a1,-24(s0)
204017e8:	fec42223          	sw	a2,-28(s0)
204017ec:	00000793          	li	a5,0
204017f0:	00078513          	mv	a0,a5
204017f4:	01c12403          	lw	s0,28(sp)
204017f8:	02010113          	addi	sp,sp,32
204017fc:	00008067          	ret

20401800 <TVMSynchronize>:

int TVMSynchronize(int device_type, int device_id, TVMStreamHandle stream) { return 0; }
20401800:	fe010113          	addi	sp,sp,-32
20401804:	00812e23          	sw	s0,28(sp)
20401808:	02010413          	addi	s0,sp,32
2040180c:	fea42623          	sw	a0,-20(s0)
20401810:	feb42423          	sw	a1,-24(s0)
20401814:	fec42223          	sw	a2,-28(s0)
20401818:	00000793          	li	a5,0
2040181c:	00078513          	mv	a0,a5
20401820:	01c12403          	lw	s0,28(sp)
20401824:	02010113          	addi	sp,sp,32
20401828:	00008067          	ret

2040182c <TVMFuncRegisterGlobal>:

static TVMMutableFuncRegistry global_func_registry;

int TVMFuncRegisterGlobal(const char* name, TVMFunctionHandle f, int override) {
2040182c:	fe010113          	addi	sp,sp,-32
20401830:	00112e23          	sw	ra,28(sp)
20401834:	00812c23          	sw	s0,24(sp)
20401838:	02010413          	addi	s0,sp,32
2040183c:	fea42623          	sw	a0,-20(s0)
20401840:	feb42423          	sw	a1,-24(s0)
20401844:	fec42223          	sw	a2,-28(s0)
  return TVMMutableFuncRegistry_Set(&global_func_registry, name, f, override != 0);
20401848:	fe842703          	lw	a4,-24(s0)
2040184c:	fe442783          	lw	a5,-28(s0)
20401850:	00f037b3          	snez	a5,a5
20401854:	0ff7f793          	andi	a5,a5,255
20401858:	00078693          	mv	a3,a5
2040185c:	00070613          	mv	a2,a4
20401860:	fec42583          	lw	a1,-20(s0)
20401864:	5fbff517          	auipc	a0,0x5fbff
20401868:	60c50513          	addi	a0,a0,1548 # 80000e70 <global_func_registry>
2040186c:	460010ef          	jal	ra,20402ccc <TVMMutableFuncRegistry_Set>
20401870:	00050793          	mv	a5,a0
}
20401874:	00078513          	mv	a0,a5
20401878:	01c12083          	lw	ra,28(sp)
2040187c:	01812403          	lw	s0,24(sp)
20401880:	02010113          	addi	sp,sp,32
20401884:	00008067          	ret

20401888 <DecodeModuleHandle>:
static const tvm_module_index_t kGlobalFuncModuleIndex = TVM_CRT_MAX_REGISTERED_MODULES;

/*! \brief Special module handle for retur values from RPCTimeEvaluator. */
static const tvm_module_index_t kTimeEvaluatorModuleIndex = 0x7fff;

static int DecodeModuleHandle(TVMModuleHandle handle, tvm_module_index_t* out_module_index) {
20401888:	fd010113          	addi	sp,sp,-48
2040188c:	02112623          	sw	ra,44(sp)
20401890:	02812423          	sw	s0,40(sp)
20401894:	03010413          	addi	s0,sp,48
20401898:	fca42e23          	sw	a0,-36(s0)
2040189c:	fcb42c23          	sw	a1,-40(s0)
  tvm_module_index_t module_index;

  module_index = ((tvm_module_index_t)((uintptr_t)handle)) & ~0x8000;
204018a0:	fdc42783          	lw	a5,-36(s0)
204018a4:	01079713          	slli	a4,a5,0x10
204018a8:	01075713          	srli	a4,a4,0x10
204018ac:	000087b7          	lui	a5,0x8
204018b0:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x3fff>
204018b4:	00f777b3          	and	a5,a4,a5
204018b8:	fef41723          	sh	a5,-18(s0)
  if (module_index > TVM_CRT_MAX_REGISTERED_MODULES || registered_modules[module_index] == NULL) {
204018bc:	fee45703          	lhu	a4,-18(s0)
204018c0:	00200793          	li	a5,2
204018c4:	02e7e063          	bltu	a5,a4,204018e4 <DecodeModuleHandle+0x5c>
204018c8:	fee45783          	lhu	a5,-18(s0)
204018cc:	5fbff717          	auipc	a4,0x5fbff
204018d0:	5b070713          	addi	a4,a4,1456 # 80000e7c <registered_modules>
204018d4:	00279793          	slli	a5,a5,0x2
204018d8:	00f707b3          	add	a5,a4,a5
204018dc:	0007a783          	lw	a5,0(a5)
204018e0:	02079063          	bnez	a5,20401900 <DecodeModuleHandle+0x78>
    TVMAPIErrorf("invalid module handle: %08x", module_index);
204018e4:	fee45783          	lhu	a5,-18(s0)
204018e8:	00078593          	mv	a1,a5
204018ec:	0001e517          	auipc	a0,0x1e
204018f0:	78c50513          	addi	a0,a0,1932 # 20420078 <__func__.3409+0x78>
204018f4:	855ff0ef          	jal	ra,20401148 <TVMAPIErrorf>
    return -1;
204018f8:	fff00793          	li	a5,-1
204018fc:	0140006f          	j	20401910 <DecodeModuleHandle+0x88>
  }

  *out_module_index = module_index;
20401900:	fd842783          	lw	a5,-40(s0)
20401904:	fee45703          	lhu	a4,-18(s0)
20401908:	00e79023          	sh	a4,0(a5)
  return 0;
2040190c:	00000793          	li	a5,0
}
20401910:	00078513          	mv	a0,a5
20401914:	02c12083          	lw	ra,44(sp)
20401918:	02812403          	lw	s0,40(sp)
2040191c:	03010113          	addi	sp,sp,48
20401920:	00008067          	ret

20401924 <EncodeModuleHandle>:

static TVMModuleHandle EncodeModuleHandle(tvm_module_index_t module_index) {
20401924:	fe010113          	addi	sp,sp,-32
20401928:	00812e23          	sw	s0,28(sp)
2040192c:	02010413          	addi	s0,sp,32
20401930:	00050793          	mv	a5,a0
20401934:	fef41723          	sh	a5,-18(s0)
  return (TVMModuleHandle)((uintptr_t)(module_index | 0x8000));
20401938:	fee45703          	lhu	a4,-18(s0)
2040193c:	ffff87b7          	lui	a5,0xffff8
20401940:	00f767b3          	or	a5,a4,a5
20401944:	01079793          	slli	a5,a5,0x10
20401948:	0107d793          	srli	a5,a5,0x10
}
2040194c:	00078513          	mv	a0,a5
20401950:	01c12403          	lw	s0,28(sp)
20401954:	02010113          	addi	sp,sp,32
20401958:	00008067          	ret

2040195c <TVMModCreateFromCModule>:

int TVMModCreateFromCModule(const TVMModule* mod, TVMModuleHandle* out_handle) {
2040195c:	fd010113          	addi	sp,sp,-48
20401960:	02112623          	sw	ra,44(sp)
20401964:	02812423          	sw	s0,40(sp)
20401968:	03010413          	addi	s0,sp,48
2040196c:	fca42e23          	sw	a0,-36(s0)
20401970:	fcb42c23          	sw	a1,-40(s0)
  tvm_module_index_t idx;

  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
20401974:	fe041723          	sh	zero,-18(s0)
20401978:	0680006f          	j	204019e0 <TVMModCreateFromCModule+0x84>
    if (registered_modules[idx] == NULL) {
2040197c:	fee45783          	lhu	a5,-18(s0)
20401980:	5fbff717          	auipc	a4,0x5fbff
20401984:	4fc70713          	addi	a4,a4,1276 # 80000e7c <registered_modules>
20401988:	00279793          	slli	a5,a5,0x2
2040198c:	00f707b3          	add	a5,a4,a5
20401990:	0007a783          	lw	a5,0(a5) # ffff8000 <pulp__FC+0xffff8001>
20401994:	04079063          	bnez	a5,204019d4 <TVMModCreateFromCModule+0x78>
      registered_modules[idx] = mod;
20401998:	fee45783          	lhu	a5,-18(s0)
2040199c:	5fbff717          	auipc	a4,0x5fbff
204019a0:	4e070713          	addi	a4,a4,1248 # 80000e7c <registered_modules>
204019a4:	00279793          	slli	a5,a5,0x2
204019a8:	00f707b3          	add	a5,a4,a5
204019ac:	fdc42703          	lw	a4,-36(s0)
204019b0:	00e7a023          	sw	a4,0(a5)
      *out_handle = EncodeModuleHandle(idx);
204019b4:	fee45783          	lhu	a5,-18(s0)
204019b8:	00078513          	mv	a0,a5
204019bc:	f69ff0ef          	jal	ra,20401924 <EncodeModuleHandle>
204019c0:	00050713          	mv	a4,a0
204019c4:	fd842783          	lw	a5,-40(s0)
204019c8:	00e7a023          	sw	a4,0(a5)
      return 0;
204019cc:	00000793          	li	a5,0
204019d0:	0200006f          	j	204019f0 <TVMModCreateFromCModule+0x94>
  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
204019d4:	fee45783          	lhu	a5,-18(s0)
204019d8:	00178793          	addi	a5,a5,1
204019dc:	fef41723          	sh	a5,-18(s0)
204019e0:	fee45703          	lhu	a4,-18(s0)
204019e4:	00100793          	li	a5,1
204019e8:	f8e7fae3          	bleu	a4,a5,2040197c <TVMModCreateFromCModule+0x20>
    }
  }

  return -1;
204019ec:	fff00793          	li	a5,-1
}
204019f0:	00078513          	mv	a0,a5
204019f4:	02c12083          	lw	ra,44(sp)
204019f8:	02812403          	lw	s0,40(sp)
204019fc:	03010113          	addi	sp,sp,48
20401a00:	00008067          	ret

20401a04 <TVMModFree>:

static const TVMModuleHandle kTVMModuleHandleUninitialized = (TVMModuleHandle)(~0UL);

static TVMModuleHandle system_lib_handle;

int TVMModFree(TVMModuleHandle mod) {
20401a04:	fd010113          	addi	sp,sp,-48
20401a08:	02112623          	sw	ra,44(sp)
20401a0c:	02812423          	sw	s0,40(sp)
20401a10:	03010413          	addi	s0,sp,48
20401a14:	fca42e23          	sw	a0,-36(s0)
  /* Never free system_lib_handler */
  if (mod == system_lib_handle && system_lib_handle != kTVMModuleHandleUninitialized) {
20401a18:	5fbff797          	auipc	a5,0x5fbff
20401a1c:	46c78793          	addi	a5,a5,1132 # 80000e84 <system_lib_handle>
20401a20:	0007a783          	lw	a5,0(a5)
20401a24:	fdc42703          	lw	a4,-36(s0)
20401a28:	02f71063          	bne	a4,a5,20401a48 <TVMModFree+0x44>
20401a2c:	5fbff797          	auipc	a5,0x5fbff
20401a30:	45878793          	addi	a5,a5,1112 # 80000e84 <system_lib_handle>
20401a34:	0007a703          	lw	a4,0(a5)
20401a38:	fff00793          	li	a5,-1
20401a3c:	00f70663          	beq	a4,a5,20401a48 <TVMModFree+0x44>
    return 0;
20401a40:	00000793          	li	a5,0
20401a44:	0400006f          	j	20401a84 <TVMModFree+0x80>
  }

  tvm_module_index_t module_index;
  if (DecodeModuleHandle(mod, &module_index) != 0) {
20401a48:	fee40793          	addi	a5,s0,-18
20401a4c:	00078593          	mv	a1,a5
20401a50:	fdc42503          	lw	a0,-36(s0)
20401a54:	e35ff0ef          	jal	ra,20401888 <DecodeModuleHandle>
20401a58:	00050793          	mv	a5,a0
20401a5c:	00078663          	beqz	a5,20401a68 <TVMModFree+0x64>
    return -1;
20401a60:	fff00793          	li	a5,-1
20401a64:	0200006f          	j	20401a84 <TVMModFree+0x80>
  }

  registered_modules[module_index] = NULL;
20401a68:	fee45783          	lhu	a5,-18(s0)
20401a6c:	5fbff717          	auipc	a4,0x5fbff
20401a70:	41070713          	addi	a4,a4,1040 # 80000e7c <registered_modules>
20401a74:	00279793          	slli	a5,a5,0x2
20401a78:	00f707b3          	add	a5,a4,a5
20401a7c:	0007a023          	sw	zero,0(a5)
  return 0;
20401a80:	00000793          	li	a5,0
}
20401a84:	00078513          	mv	a0,a5
20401a88:	02c12083          	lw	ra,44(sp)
20401a8c:	02812403          	lw	s0,40(sp)
20401a90:	03010113          	addi	sp,sp,48
20401a94:	00008067          	ret

20401a98 <SystemLibraryCreate>:

int SystemLibraryCreate(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                        int* ret_type_codes) {
20401a98:	fc010113          	addi	sp,sp,-64
20401a9c:	02112e23          	sw	ra,60(sp)
20401aa0:	02812c23          	sw	s0,56(sp)
20401aa4:	04010413          	addi	s0,sp,64
20401aa8:	fca42e23          	sw	a0,-36(s0)
20401aac:	fcb42c23          	sw	a1,-40(s0)
20401ab0:	fcc42a23          	sw	a2,-44(s0)
20401ab4:	fcd42823          	sw	a3,-48(s0)
20401ab8:	fce42623          	sw	a4,-52(s0)
  const TVMModule* system_lib;

  if (system_lib_handle == kTVMModuleHandleUninitialized) {
20401abc:	5fbff797          	auipc	a5,0x5fbff
20401ac0:	3c878793          	addi	a5,a5,968 # 80000e84 <system_lib_handle>
20401ac4:	0007a703          	lw	a4,0(a5)
20401ac8:	fff00793          	li	a5,-1
20401acc:	02f71c63          	bne	a4,a5,20401b04 <SystemLibraryCreate+0x6c>
    system_lib = TVMSystemLibEntryPoint();
20401ad0:	b58ff0ef          	jal	ra,20400e28 <TVMSystemLibEntryPoint>
20401ad4:	fea42623          	sw	a0,-20(s0)
    if (TVMModCreateFromCModule(system_lib, &system_lib_handle) != 0) {
20401ad8:	5fbff597          	auipc	a1,0x5fbff
20401adc:	3ac58593          	addi	a1,a1,940 # 80000e84 <system_lib_handle>
20401ae0:	fec42503          	lw	a0,-20(s0)
20401ae4:	e79ff0ef          	jal	ra,2040195c <TVMModCreateFromCModule>
20401ae8:	00050793          	mv	a5,a0
20401aec:	00078c63          	beqz	a5,20401b04 <SystemLibraryCreate+0x6c>
      TVMAPIErrorf("error registering system lib");
20401af0:	0001e517          	auipc	a0,0x1e
20401af4:	5a450513          	addi	a0,a0,1444 # 20420094 <__func__.3409+0x94>
20401af8:	e50ff0ef          	jal	ra,20401148 <TVMAPIErrorf>
      return -1;
20401afc:	fff00793          	li	a5,-1
20401b00:	0280006f          	j	20401b28 <SystemLibraryCreate+0x90>
    }
  }

  ret_val[0].v_handle = system_lib_handle;
20401b04:	5fbff797          	auipc	a5,0x5fbff
20401b08:	38078793          	addi	a5,a5,896 # 80000e84 <system_lib_handle>
20401b0c:	0007a703          	lw	a4,0(a5)
20401b10:	fd042783          	lw	a5,-48(s0)
20401b14:	00e7a023          	sw	a4,0(a5)
  ret_type_codes[0] = kTVMModuleHandle;
20401b18:	fcc42783          	lw	a5,-52(s0)
20401b1c:	00900713          	li	a4,9
20401b20:	00e7a023          	sw	a4,0(a5)
  return 0;
20401b24:	00000793          	li	a5,0
}
20401b28:	00078513          	mv	a0,a5
20401b2c:	03c12083          	lw	ra,60(sp)
20401b30:	03812403          	lw	s0,56(sp)
20401b34:	04010113          	addi	sp,sp,64
20401b38:	00008067          	ret

20401b3c <EncodeFunctionHandle>:

static TVMFunctionHandle EncodeFunctionHandle(tvm_module_index_t module_index,
                                              tvm_function_index_t function_index) {
20401b3c:	fe010113          	addi	sp,sp,-32
20401b40:	00812e23          	sw	s0,28(sp)
20401b44:	02010413          	addi	s0,sp,32
20401b48:	00050793          	mv	a5,a0
20401b4c:	00058713          	mv	a4,a1
20401b50:	fef41723          	sh	a5,-18(s0)
20401b54:	00070793          	mv	a5,a4
20401b58:	fef41623          	sh	a5,-20(s0)
  return (TVMFunctionHandle)(
      (((uintptr_t)(module_index | 0x8000) << (sizeof(tvm_function_index_t) * 8)) |
20401b5c:	fee45703          	lhu	a4,-18(s0)
20401b60:	ffff87b7          	lui	a5,0xffff8
20401b64:	00f767b3          	or	a5,a4,a5
20401b68:	01079793          	slli	a5,a5,0x10
20401b6c:	0107d793          	srli	a5,a5,0x10
20401b70:	01079793          	slli	a5,a5,0x10
       (function_index | 0x8000)));
20401b74:	fec45683          	lhu	a3,-20(s0)
20401b78:	ffff8737          	lui	a4,0xffff8
20401b7c:	00e6e733          	or	a4,a3,a4
20401b80:	01071713          	slli	a4,a4,0x10
20401b84:	01075713          	srli	a4,a4,0x10
      (((uintptr_t)(module_index | 0x8000) << (sizeof(tvm_function_index_t) * 8)) |
20401b88:	00e7e7b3          	or	a5,a5,a4
}
20401b8c:	00078513          	mv	a0,a5
20401b90:	01c12403          	lw	s0,28(sp)
20401b94:	02010113          	addi	sp,sp,32
20401b98:	00008067          	ret

20401b9c <DecodeFunctionHandle>:

static int DecodeFunctionHandle(TVMFunctionHandle handle, tvm_module_index_t* module_index,
                                tvm_function_index_t* function_index) {
20401b9c:	fd010113          	addi	sp,sp,-48
20401ba0:	02112623          	sw	ra,44(sp)
20401ba4:	02812423          	sw	s0,40(sp)
20401ba8:	03010413          	addi	s0,sp,48
20401bac:	fca42e23          	sw	a0,-36(s0)
20401bb0:	fcb42c23          	sw	a1,-40(s0)
20401bb4:	fcc42a23          	sw	a2,-44(s0)
  tvm_module_index_t unvalidated_module_index;
  unvalidated_module_index =
      (tvm_module_index_t)(((uintptr_t)handle) >> (sizeof(tvm_function_index_t) * 8));
20401bb8:	fdc42783          	lw	a5,-36(s0)
20401bbc:	0107d793          	srli	a5,a5,0x10
  unvalidated_module_index =
20401bc0:	fef41723          	sh	a5,-18(s0)
  unvalidated_module_index &= ~0x8000;
20401bc4:	fee45703          	lhu	a4,-18(s0)
20401bc8:	000087b7          	lui	a5,0x8
20401bcc:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x3fff>
20401bd0:	00f777b3          	and	a5,a4,a5
20401bd4:	fef41723          	sh	a5,-18(s0)

  if (unvalidated_module_index != kTimeEvaluatorModuleIndex) {
20401bd8:	000087b7          	lui	a5,0x8
20401bdc:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x3fff>
20401be0:	fee45703          	lhu	a4,-18(s0)
20401be4:	06f70863          	beq	a4,a5,20401c54 <DecodeFunctionHandle+0xb8>
    if (unvalidated_module_index > kGlobalFuncModuleIndex) {
20401be8:	00200793          	li	a5,2
20401bec:	fee45703          	lhu	a4,-18(s0)
20401bf0:	02e7f063          	bleu	a4,a5,20401c10 <DecodeFunctionHandle+0x74>
      TVMAPIErrorf("invalid module handle: index=%08x", unvalidated_module_index);
20401bf4:	fee45783          	lhu	a5,-18(s0)
20401bf8:	00078593          	mv	a1,a5
20401bfc:	0001e517          	auipc	a0,0x1e
20401c00:	4b850513          	addi	a0,a0,1208 # 204200b4 <__func__.3409+0xb4>
20401c04:	d44ff0ef          	jal	ra,20401148 <TVMAPIErrorf>
      return -1;
20401c08:	fff00793          	li	a5,-1
20401c0c:	0800006f          	j	20401c8c <DecodeFunctionHandle+0xf0>
    } else if (unvalidated_module_index < kGlobalFuncModuleIndex &&
20401c10:	00200793          	li	a5,2
20401c14:	fee45703          	lhu	a4,-18(s0)
20401c18:	02f77e63          	bleu	a5,a4,20401c54 <DecodeFunctionHandle+0xb8>
               registered_modules[unvalidated_module_index] == NULL) {
20401c1c:	fee45783          	lhu	a5,-18(s0)
20401c20:	5fbff717          	auipc	a4,0x5fbff
20401c24:	25c70713          	addi	a4,a4,604 # 80000e7c <registered_modules>
20401c28:	00279793          	slli	a5,a5,0x2
20401c2c:	00f707b3          	add	a5,a4,a5
20401c30:	0007a783          	lw	a5,0(a5)
    } else if (unvalidated_module_index < kGlobalFuncModuleIndex &&
20401c34:	02079063          	bnez	a5,20401c54 <DecodeFunctionHandle+0xb8>
      TVMAPIErrorf("unregistered module: index=%08x", unvalidated_module_index);
20401c38:	fee45783          	lhu	a5,-18(s0)
20401c3c:	00078593          	mv	a1,a5
20401c40:	0001e517          	auipc	a0,0x1e
20401c44:	49850513          	addi	a0,a0,1176 # 204200d8 <__func__.3409+0xd8>
20401c48:	d00ff0ef          	jal	ra,20401148 <TVMAPIErrorf>
      return -1;
20401c4c:	fff00793          	li	a5,-1
20401c50:	03c0006f          	j	20401c8c <DecodeFunctionHandle+0xf0>
    }
  }

  *function_index = ((uint32_t)((uintptr_t)handle)) & ~0x8000;
20401c54:	fdc42783          	lw	a5,-36(s0)
20401c58:	01079713          	slli	a4,a5,0x10
20401c5c:	01075713          	srli	a4,a4,0x10
20401c60:	000087b7          	lui	a5,0x8
20401c64:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x3fff>
20401c68:	00f777b3          	and	a5,a4,a5
20401c6c:	01079713          	slli	a4,a5,0x10
20401c70:	01075713          	srli	a4,a4,0x10
20401c74:	fd442783          	lw	a5,-44(s0)
20401c78:	00e79023          	sh	a4,0(a5)
  *module_index = unvalidated_module_index;
20401c7c:	fd842783          	lw	a5,-40(s0)
20401c80:	fee45703          	lhu	a4,-18(s0)
20401c84:	00e79023          	sh	a4,0(a5)
  return 0;
20401c88:	00000793          	li	a5,0
}
20401c8c:	00078513          	mv	a0,a5
20401c90:	02c12083          	lw	ra,44(sp)
20401c94:	02812403          	lw	s0,40(sp)
20401c98:	03010113          	addi	sp,sp,48
20401c9c:	00008067          	ret

20401ca0 <TVMByteArrayFree>:

int TVMByteArrayFree(TVMByteArray* arr) {
20401ca0:	fd010113          	addi	sp,sp,-48
20401ca4:	02112623          	sw	ra,44(sp)
20401ca8:	02812423          	sw	s0,40(sp)
20401cac:	03010413          	addi	s0,sp,48
20401cb0:	fca42e23          	sw	a0,-36(s0)
  DLDevice dev = {kDLCPU, 0};
20401cb4:	00100793          	li	a5,1
20401cb8:	fef42223          	sw	a5,-28(s0)
20401cbc:	fe042423          	sw	zero,-24(s0)
  int to_return = TVMPlatformMemoryFree((void*)arr->data, dev);
20401cc0:	fdc42783          	lw	a5,-36(s0)
20401cc4:	0007a783          	lw	a5,0(a5)
20401cc8:	fe442583          	lw	a1,-28(s0)
20401ccc:	fe842603          	lw	a2,-24(s0)
20401cd0:	00078513          	mv	a0,a5
20401cd4:	8b0ff0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20401cd8:	00050793          	mv	a5,a0
20401cdc:	fef42623          	sw	a5,-20(s0)
  if (to_return != 0) {
20401ce0:	fec42783          	lw	a5,-20(s0)
20401ce4:	00078663          	beqz	a5,20401cf0 <TVMByteArrayFree+0x50>
    return to_return;
20401ce8:	fec42783          	lw	a5,-20(s0)
20401cec:	0180006f          	j	20401d04 <TVMByteArrayFree+0x64>
  }

  return TVMPlatformMemoryFree((void*)arr, dev);
20401cf0:	fe442583          	lw	a1,-28(s0)
20401cf4:	fe842603          	lw	a2,-24(s0)
20401cf8:	fdc42503          	lw	a0,-36(s0)
20401cfc:	888ff0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20401d00:	00050793          	mv	a5,a0
}
20401d04:	00078513          	mv	a0,a5
20401d08:	02c12083          	lw	ra,44(sp)
20401d0c:	02812403          	lw	s0,40(sp)
20401d10:	03010113          	addi	sp,sp,48
20401d14:	00008067          	ret

20401d18 <TVMFuncCall>:
tvm_crt_error_t RunTimeEvaluator(tvm_function_index_t function_index, TVMValue* args,
                                 int* type_codes, int num_args, TVMValue* ret_val,
                                 int* ret_type_code);

int TVMFuncCall(TVMFunctionHandle func_handle, TVMValue* arg_values, int* type_codes, int num_args,
                TVMValue* ret_val, int* ret_type_code) {
20401d18:	fc010113          	addi	sp,sp,-64
20401d1c:	02112e23          	sw	ra,60(sp)
20401d20:	02812c23          	sw	s0,56(sp)
20401d24:	04010413          	addi	s0,sp,64
20401d28:	fca42e23          	sw	a0,-36(s0)
20401d2c:	fcb42c23          	sw	a1,-40(s0)
20401d30:	fcc42a23          	sw	a2,-44(s0)
20401d34:	fcd42823          	sw	a3,-48(s0)
20401d38:	fce42623          	sw	a4,-52(s0)
20401d3c:	fcf42423          	sw	a5,-56(s0)
  tvm_function_index_t function_index;
  void* resource_handle;
  const TVMFuncRegistry* registry;
  TVMBackendPackedCFunc func;

  if (DecodeFunctionHandle(func_handle, &module_index, &function_index) != 0) {
20401d40:	fe440713          	addi	a4,s0,-28
20401d44:	fe640793          	addi	a5,s0,-26
20401d48:	00070613          	mv	a2,a4
20401d4c:	00078593          	mv	a1,a5
20401d50:	fdc42503          	lw	a0,-36(s0)
20401d54:	e49ff0ef          	jal	ra,20401b9c <DecodeFunctionHandle>
20401d58:	00050793          	mv	a5,a0
20401d5c:	00078663          	beqz	a5,20401d68 <TVMFuncCall+0x50>
    return -1;
20401d60:	fff00793          	li	a5,-1
20401d64:	10c0006f          	j	20401e70 <TVMFuncCall+0x158>
  }

  if (module_index == kTimeEvaluatorModuleIndex) {
20401d68:	fe645703          	lhu	a4,-26(s0)
20401d6c:	000087b7          	lui	a5,0x8
20401d70:	fff78793          	addi	a5,a5,-1 # 7fff <__stack_size+0x3fff>
20401d74:	02f71463          	bne	a4,a5,20401d9c <TVMFuncCall+0x84>
    return RunTimeEvaluator(function_index, arg_values, type_codes, num_args, ret_val,
20401d78:	fe445503          	lhu	a0,-28(s0)
20401d7c:	fc842783          	lw	a5,-56(s0)
20401d80:	fcc42703          	lw	a4,-52(s0)
20401d84:	fd042683          	lw	a3,-48(s0)
20401d88:	fd442603          	lw	a2,-44(s0)
20401d8c:	fd842583          	lw	a1,-40(s0)
20401d90:	0c1000ef          	jal	ra,20402650 <RunTimeEvaluator>
20401d94:	00050793          	mv	a5,a0
20401d98:	0d80006f          	j	20401e70 <TVMFuncCall+0x158>
                            ret_type_code);
  } else if (module_index == kGlobalFuncModuleIndex) {
20401d9c:	fe645703          	lhu	a4,-26(s0)
20401da0:	00200793          	li	a5,2
20401da4:	00f71c63          	bne	a4,a5,20401dbc <TVMFuncCall+0xa4>
    resource_handle = NULL;
20401da8:	fe042623          	sw	zero,-20(s0)
    registry = &global_func_registry.registry;
20401dac:	5fbff797          	auipc	a5,0x5fbff
20401db0:	0c478793          	addi	a5,a5,196 # 80000e70 <global_func_registry>
20401db4:	fef42423          	sw	a5,-24(s0)
20401db8:	0440006f          	j	20401dfc <TVMFuncCall+0xe4>
  } else {
    resource_handle = (void*)registered_modules[module_index]->registry;
20401dbc:	fe645783          	lhu	a5,-26(s0)
20401dc0:	5fbff717          	auipc	a4,0x5fbff
20401dc4:	0bc70713          	addi	a4,a4,188 # 80000e7c <registered_modules>
20401dc8:	00279793          	slli	a5,a5,0x2
20401dcc:	00f707b3          	add	a5,a4,a5
20401dd0:	0007a783          	lw	a5,0(a5)
20401dd4:	0007a783          	lw	a5,0(a5)
20401dd8:	fef42623          	sw	a5,-20(s0)
    registry = registered_modules[module_index]->registry;
20401ddc:	fe645783          	lhu	a5,-26(s0)
20401de0:	5fbff717          	auipc	a4,0x5fbff
20401de4:	09c70713          	addi	a4,a4,156 # 80000e7c <registered_modules>
20401de8:	00279793          	slli	a5,a5,0x2
20401dec:	00f707b3          	add	a5,a4,a5
20401df0:	0007a783          	lw	a5,0(a5)
20401df4:	0007a783          	lw	a5,0(a5)
20401df8:	fef42423          	sw	a5,-24(s0)
  }

  if (TVMFuncRegistry_GetByIndex(registry, function_index, &func) != 0) {
20401dfc:	fe445783          	lhu	a5,-28(s0)
20401e00:	fe040713          	addi	a4,s0,-32
20401e04:	00070613          	mv	a2,a4
20401e08:	00078593          	mv	a1,a5
20401e0c:	fe842503          	lw	a0,-24(s0)
20401e10:	595000ef          	jal	ra,20402ba4 <TVMFuncRegistry_GetByIndex>
20401e14:	00050793          	mv	a5,a0
20401e18:	02078063          	beqz	a5,20401e38 <TVMFuncCall+0x120>
    TVMAPIErrorf("invalid function index: %04" PRIx16, function_index);
20401e1c:	fe445783          	lhu	a5,-28(s0)
20401e20:	00078593          	mv	a1,a5
20401e24:	0001e517          	auipc	a0,0x1e
20401e28:	2d450513          	addi	a0,a0,724 # 204200f8 <__func__.3409+0xf8>
20401e2c:	b1cff0ef          	jal	ra,20401148 <TVMAPIErrorf>
    return -1;
20401e30:	fff00793          	li	a5,-1
20401e34:	03c0006f          	j	20401e70 <TVMFuncCall+0x158>
  }

  ret_type_code[0] = kTVMNullptr;
20401e38:	fc842783          	lw	a5,-56(s0)
20401e3c:	00400713          	li	a4,4
20401e40:	00e7a023          	sw	a4,0(a5)
  ret_val[0].v_handle = NULL;
20401e44:	fcc42783          	lw	a5,-52(s0)
20401e48:	0007a023          	sw	zero,0(a5)
  return func(arg_values, type_codes, num_args, ret_val, ret_type_code, resource_handle);
20401e4c:	fe042803          	lw	a6,-32(s0)
20401e50:	fec42783          	lw	a5,-20(s0)
20401e54:	fc842703          	lw	a4,-56(s0)
20401e58:	fcc42683          	lw	a3,-52(s0)
20401e5c:	fd042603          	lw	a2,-48(s0)
20401e60:	fd442583          	lw	a1,-44(s0)
20401e64:	fd842503          	lw	a0,-40(s0)
20401e68:	000800e7          	jalr	a6
20401e6c:	00050793          	mv	a5,a0
}
20401e70:	00078513          	mv	a0,a5
20401e74:	03c12083          	lw	ra,60(sp)
20401e78:	03812403          	lw	s0,56(sp)
20401e7c:	04010113          	addi	sp,sp,64
20401e80:	00008067          	ret

20401e84 <FindFunctionOrSetAPIError>:

static tvm_crt_error_t FindFunctionOrSetAPIError(tvm_module_index_t module_index,
                                                 const TVMFuncRegistry* registry, const char* name,
                                                 TVMFunctionHandle* out) {
20401e84:	fd010113          	addi	sp,sp,-48
20401e88:	02112623          	sw	ra,44(sp)
20401e8c:	02812423          	sw	s0,40(sp)
20401e90:	03010413          	addi	s0,sp,48
20401e94:	00050793          	mv	a5,a0
20401e98:	fcb42c23          	sw	a1,-40(s0)
20401e9c:	fcc42a23          	sw	a2,-44(s0)
20401ea0:	fcd42823          	sw	a3,-48(s0)
20401ea4:	fcf41f23          	sh	a5,-34(s0)
  tvm_function_index_t function_index;
  tvm_crt_error_t err = TVMFuncRegistry_Lookup(registry, name, &function_index);
20401ea8:	fea40793          	addi	a5,s0,-22
20401eac:	00078613          	mv	a2,a5
20401eb0:	fd442583          	lw	a1,-44(s0)
20401eb4:	fd842503          	lw	a0,-40(s0)
20401eb8:	451000ef          	jal	ra,20402b08 <TVMFuncRegistry_Lookup>
20401ebc:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20401ec0:	fec42783          	lw	a5,-20(s0)
20401ec4:	00078663          	beqz	a5,20401ed0 <FindFunctionOrSetAPIError+0x4c>
    return err;
20401ec8:	fec42783          	lw	a5,-20(s0)
20401ecc:	0280006f          	j	20401ef4 <FindFunctionOrSetAPIError+0x70>
  }

  *out = EncodeFunctionHandle(module_index, function_index);
20401ed0:	fea45703          	lhu	a4,-22(s0)
20401ed4:	fde45783          	lhu	a5,-34(s0)
20401ed8:	00070593          	mv	a1,a4
20401edc:	00078513          	mv	a0,a5
20401ee0:	c5dff0ef          	jal	ra,20401b3c <EncodeFunctionHandle>
20401ee4:	00050713          	mv	a4,a0
20401ee8:	fd042783          	lw	a5,-48(s0)
20401eec:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
20401ef0:	00000793          	li	a5,0
}
20401ef4:	00078513          	mv	a0,a5
20401ef8:	02c12083          	lw	ra,44(sp)
20401efc:	02812403          	lw	s0,40(sp)
20401f00:	03010113          	addi	sp,sp,48
20401f04:	00008067          	ret

20401f08 <TVMFuncGetGlobal>:

int TVMFuncGetGlobal(const char* name, TVMFunctionHandle* out) {
20401f08:	fd010113          	addi	sp,sp,-48
20401f0c:	02112623          	sw	ra,44(sp)
20401f10:	02812423          	sw	s0,40(sp)
20401f14:	03010413          	addi	s0,sp,48
20401f18:	fca42e23          	sw	a0,-36(s0)
20401f1c:	fcb42c23          	sw	a1,-40(s0)
  tvm_crt_error_t to_return =
      FindFunctionOrSetAPIError(kGlobalFuncModuleIndex, &global_func_registry.registry, name, out);
20401f20:	00200793          	li	a5,2
  tvm_crt_error_t to_return =
20401f24:	fd842683          	lw	a3,-40(s0)
20401f28:	fdc42603          	lw	a2,-36(s0)
20401f2c:	5fbff597          	auipc	a1,0x5fbff
20401f30:	f4458593          	addi	a1,a1,-188 # 80000e70 <global_func_registry>
20401f34:	00078513          	mv	a0,a5
20401f38:	f4dff0ef          	jal	ra,20401e84 <FindFunctionOrSetAPIError>
20401f3c:	fea42623          	sw	a0,-20(s0)
  // For compatibility with the C++ runtime equivalent, in src/runtime/registry.cc.
  if (to_return == kTvmErrorFunctionNameNotFound) {
20401f40:	fec42703          	lw	a4,-20(s0)
20401f44:	10000793          	li	a5,256
20401f48:	00f71863          	bne	a4,a5,20401f58 <TVMFuncGetGlobal+0x50>
    *out = NULL;
20401f4c:	fd842783          	lw	a5,-40(s0)
20401f50:	0007a023          	sw	zero,0(a5)
    to_return = kTvmErrorNoError;
20401f54:	fe042623          	sw	zero,-20(s0)
  }
  return to_return;
20401f58:	fec42783          	lw	a5,-20(s0)
}
20401f5c:	00078513          	mv	a0,a5
20401f60:	02c12083          	lw	ra,44(sp)
20401f64:	02812403          	lw	s0,40(sp)
20401f68:	03010113          	addi	sp,sp,48
20401f6c:	00008067          	ret

20401f70 <TVMModGetFunction>:

int TVMModGetFunction(TVMModuleHandle mod, const char* func_name, int query_imports,
                      TVMFunctionHandle* out) {
20401f70:	fd010113          	addi	sp,sp,-48
20401f74:	02112623          	sw	ra,44(sp)
20401f78:	02812423          	sw	s0,40(sp)
20401f7c:	03010413          	addi	s0,sp,48
20401f80:	fca42e23          	sw	a0,-36(s0)
20401f84:	fcb42c23          	sw	a1,-40(s0)
20401f88:	fcc42a23          	sw	a2,-44(s0)
20401f8c:	fcd42823          	sw	a3,-48(s0)
  tvm_module_index_t module_index;
  if (DecodeModuleHandle(mod, &module_index) != 0) {
20401f90:	fee40793          	addi	a5,s0,-18
20401f94:	00078593          	mv	a1,a5
20401f98:	fdc42503          	lw	a0,-36(s0)
20401f9c:	8edff0ef          	jal	ra,20401888 <DecodeModuleHandle>
20401fa0:	00050793          	mv	a5,a0
20401fa4:	00078663          	beqz	a5,20401fb0 <TVMModGetFunction+0x40>
    return -1;
20401fa8:	fff00793          	li	a5,-1
20401fac:	0380006f          	j	20401fe4 <TVMModGetFunction+0x74>
  }

  return FindFunctionOrSetAPIError(module_index, registered_modules[module_index]->registry,
20401fb0:	fee45503          	lhu	a0,-18(s0)
20401fb4:	fee45783          	lhu	a5,-18(s0)
20401fb8:	5fbff717          	auipc	a4,0x5fbff
20401fbc:	ec470713          	addi	a4,a4,-316 # 80000e7c <registered_modules>
20401fc0:	00279793          	slli	a5,a5,0x2
20401fc4:	00f707b3          	add	a5,a4,a5
20401fc8:	0007a783          	lw	a5,0(a5)
20401fcc:	0007a783          	lw	a5,0(a5)
20401fd0:	fd042683          	lw	a3,-48(s0)
20401fd4:	fd842603          	lw	a2,-40(s0)
20401fd8:	00078593          	mv	a1,a5
20401fdc:	ea9ff0ef          	jal	ra,20401e84 <FindFunctionOrSetAPIError>
20401fe0:	00050793          	mv	a5,a0
                                   func_name, out);
}
20401fe4:	00078513          	mv	a0,a5
20401fe8:	02c12083          	lw	ra,44(sp)
20401fec:	02812403          	lw	s0,40(sp)
20401ff0:	03010113          	addi	sp,sp,48
20401ff4:	00008067          	ret

20401ff8 <ModuleGetFunction>:

int ModuleGetFunction(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_value,
                      int* ret_type_codes) {
20401ff8:	fc010113          	addi	sp,sp,-64
20401ffc:	02112e23          	sw	ra,60(sp)
20402000:	02812c23          	sw	s0,56(sp)
20402004:	04010413          	addi	s0,sp,64
20402008:	fca42e23          	sw	a0,-36(s0)
2040200c:	fcb42c23          	sw	a1,-40(s0)
20402010:	fcc42a23          	sw	a2,-44(s0)
20402014:	fcd42823          	sw	a3,-48(s0)
20402018:	fce42623          	sw	a4,-52(s0)
  TVMModuleHandle mod;
  const char* name;
  int to_return;
  int query_imports;

  ret_value[0].v_handle = NULL;
2040201c:	fd042783          	lw	a5,-48(s0)
20402020:	0007a023          	sw	zero,0(a5)
  ret_type_codes[0] = kTVMNullptr;
20402024:	fcc42783          	lw	a5,-52(s0)
20402028:	00400713          	li	a4,4
2040202c:	00e7a023          	sw	a4,0(a5)
  if (num_args != 3 || type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
20402030:	fd442703          	lw	a4,-44(s0)
20402034:	00300793          	li	a5,3
20402038:	02f71c63          	bne	a4,a5,20402070 <ModuleGetFunction+0x78>
2040203c:	fd842783          	lw	a5,-40(s0)
20402040:	0007a703          	lw	a4,0(a5)
20402044:	00900793          	li	a5,9
20402048:	02f71463          	bne	a4,a5,20402070 <ModuleGetFunction+0x78>
2040204c:	fd842783          	lw	a5,-40(s0)
20402050:	00478793          	addi	a5,a5,4
20402054:	0007a703          	lw	a4,0(a5)
20402058:	00b00793          	li	a5,11
2040205c:	00f71a63          	bne	a4,a5,20402070 <ModuleGetFunction+0x78>
      type_codes[2] != kDLInt) {
20402060:	fd842783          	lw	a5,-40(s0)
20402064:	00878793          	addi	a5,a5,8
20402068:	0007a783          	lw	a5,0(a5)
  if (num_args != 3 || type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
2040206c:	00078663          	beqz	a5,20402078 <ModuleGetFunction+0x80>
    return 0;
20402070:	00000793          	li	a5,0
20402074:	0900006f          	j	20402104 <ModuleGetFunction+0x10c>
  }

  mod = (TVMModuleHandle)args[0].v_handle;
20402078:	fdc42783          	lw	a5,-36(s0)
2040207c:	0007a783          	lw	a5,0(a5)
20402080:	fef42423          	sw	a5,-24(s0)
  name = args[1].v_str;
20402084:	fdc42783          	lw	a5,-36(s0)
20402088:	00878793          	addi	a5,a5,8
2040208c:	0007a783          	lw	a5,0(a5)
20402090:	fef42223          	sw	a5,-28(s0)
  query_imports = args[2].v_int64 != 0;
20402094:	fdc42783          	lw	a5,-36(s0)
20402098:	01078793          	addi	a5,a5,16
2040209c:	0047a803          	lw	a6,4(a5)
204020a0:	0007a783          	lw	a5,0(a5)
204020a4:	0107e7b3          	or	a5,a5,a6
204020a8:	00f037b3          	snez	a5,a5
204020ac:	0ff7f793          	andi	a5,a5,255
204020b0:	fef42023          	sw	a5,-32(s0)
  to_return = TVMModGetFunction(mod, name, query_imports, &ret_value->v_handle);
204020b4:	fd042783          	lw	a5,-48(s0)
204020b8:	00078693          	mv	a3,a5
204020bc:	fe042603          	lw	a2,-32(s0)
204020c0:	fe442583          	lw	a1,-28(s0)
204020c4:	fe842503          	lw	a0,-24(s0)
204020c8:	ea9ff0ef          	jal	ra,20401f70 <TVMModGetFunction>
204020cc:	fea42623          	sw	a0,-20(s0)

  if (to_return == 0) {
204020d0:	fec42783          	lw	a5,-20(s0)
204020d4:	00079a63          	bnez	a5,204020e8 <ModuleGetFunction+0xf0>
    ret_type_codes[0] = kTVMPackedFuncHandle;
204020d8:	fcc42783          	lw	a5,-52(s0)
204020dc:	00a00713          	li	a4,10
204020e0:	00e7a023          	sw	a4,0(a5)
204020e4:	00c0006f          	j	204020f0 <ModuleGetFunction+0xf8>
  } else {
    ret_value->v_handle = NULL;
204020e8:	fd042783          	lw	a5,-48(s0)
204020ec:	0007a023          	sw	zero,0(a5)
  }

  // NOTE: For compatibility with C++ runtime API, return no error (but NULL function) when the
  // function lookup failed.
  if (to_return == kTvmErrorFunctionNameNotFound) {
204020f0:	fec42703          	lw	a4,-20(s0)
204020f4:	10000793          	li	a5,256
204020f8:	00f71463          	bne	a4,a5,20402100 <ModuleGetFunction+0x108>
    to_return = kTvmErrorNoError;
204020fc:	fe042623          	sw	zero,-20(s0)
  }
  return to_return;
20402100:	fec42783          	lw	a5,-20(s0)
}
20402104:	00078513          	mv	a0,a5
20402108:	03c12083          	lw	ra,60(sp)
2040210c:	03812403          	lw	s0,56(sp)
20402110:	04010113          	addi	sp,sp,64
20402114:	00008067          	ret

20402118 <TVMCFuncSetReturn>:
typedef struct TVMCReturnValue {
  TVMValue* ret_val;
  int* ret_type_code;
} TVMCReturnValue;

int TVMCFuncSetReturn(TVMRetValueHandle ret, TVMValue* value, int* type_code, int num_ret) {
20402118:	fd010113          	addi	sp,sp,-48
2040211c:	02812623          	sw	s0,44(sp)
20402120:	03010413          	addi	s0,sp,48
20402124:	fca42e23          	sw	a0,-36(s0)
20402128:	fcb42c23          	sw	a1,-40(s0)
2040212c:	fcc42a23          	sw	a2,-44(s0)
20402130:	fcd42823          	sw	a3,-48(s0)
  TVMCReturnValue* ret_val;
  int idx;

  ret_val = (TVMCReturnValue*)ret;
20402134:	fdc42783          	lw	a5,-36(s0)
20402138:	fef42423          	sw	a5,-24(s0)
  for (idx = 0; idx < num_ret; idx++) {
2040213c:	fe042623          	sw	zero,-20(s0)
20402140:	0700006f          	j	204021b0 <TVMCFuncSetReturn+0x98>
    ret_val->ret_val[idx] = value[idx];
20402144:	fec42783          	lw	a5,-20(s0)
20402148:	00379793          	slli	a5,a5,0x3
2040214c:	fd842703          	lw	a4,-40(s0)
20402150:	00f707b3          	add	a5,a4,a5
20402154:	fe842703          	lw	a4,-24(s0)
20402158:	00072683          	lw	a3,0(a4)
2040215c:	fec42703          	lw	a4,-20(s0)
20402160:	00371713          	slli	a4,a4,0x3
20402164:	00e68733          	add	a4,a3,a4
20402168:	0047a803          	lw	a6,4(a5)
2040216c:	0007a783          	lw	a5,0(a5)
20402170:	00f72023          	sw	a5,0(a4)
20402174:	01072223          	sw	a6,4(a4)
    ret_val->ret_type_code[idx] = type_code[idx];
20402178:	fec42783          	lw	a5,-20(s0)
2040217c:	00279793          	slli	a5,a5,0x2
20402180:	fd442703          	lw	a4,-44(s0)
20402184:	00f70733          	add	a4,a4,a5
20402188:	fe842783          	lw	a5,-24(s0)
2040218c:	0047a683          	lw	a3,4(a5)
20402190:	fec42783          	lw	a5,-20(s0)
20402194:	00279793          	slli	a5,a5,0x2
20402198:	00f687b3          	add	a5,a3,a5
2040219c:	00072703          	lw	a4,0(a4)
204021a0:	00e7a023          	sw	a4,0(a5)
  for (idx = 0; idx < num_ret; idx++) {
204021a4:	fec42783          	lw	a5,-20(s0)
204021a8:	00178793          	addi	a5,a5,1
204021ac:	fef42623          	sw	a5,-20(s0)
204021b0:	fec42703          	lw	a4,-20(s0)
204021b4:	fd042783          	lw	a5,-48(s0)
204021b8:	f8f746e3          	blt	a4,a5,20402144 <TVMCFuncSetReturn+0x2c>
  }

  return 0;
204021bc:	00000793          	li	a5,0
}
204021c0:	00078513          	mv	a0,a5
204021c4:	02c12403          	lw	s0,44(sp)
204021c8:	03010113          	addi	sp,sp,48
204021cc:	00008067          	ret

204021d0 <TVMFuncFree>:

int TVMFuncFree(TVMFunctionHandle func) {
204021d0:	fe010113          	addi	sp,sp,-32
204021d4:	00812e23          	sw	s0,28(sp)
204021d8:	02010413          	addi	s0,sp,32
204021dc:	fea42623          	sw	a0,-20(s0)
  // A no-op, since we don't actually allocate anything in GetFunction.
  return 0;
204021e0:	00000793          	li	a5,0
}
204021e4:	00078513          	mv	a0,a5
204021e8:	01c12403          	lw	s0,28(sp)
204021ec:	02010113          	addi	sp,sp,32
204021f0:	00008067          	ret

204021f4 <RPCGetCRTMaxPacketSize>:
int RPCTimeEvaluator(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                     int* ret_type_code);

// Sends CRT max packet size.
int RPCGetCRTMaxPacketSize(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_value,
                           int* ret_type_codes) {
204021f4:	fd010113          	addi	sp,sp,-48
204021f8:	02812623          	sw	s0,44(sp)
204021fc:	03010413          	addi	s0,sp,48
20402200:	fea42623          	sw	a0,-20(s0)
20402204:	feb42423          	sw	a1,-24(s0)
20402208:	fec42223          	sw	a2,-28(s0)
2040220c:	fed42023          	sw	a3,-32(s0)
20402210:	fce42e23          	sw	a4,-36(s0)
  // 11 bytes is for microtvm overhead:
  // packet start(2), length(4), session header(3), crc(2)
  ret_value[0].v_int64 = TVM_CRT_MAX_PACKET_SIZE_BYTES - 11;
20402214:	fe042703          	lw	a4,-32(s0)
20402218:	000027b7          	lui	a5,0x2
2040221c:	ff578793          	addi	a5,a5,-11 # 1ff5 <__stack_size-0x200b>
20402220:	00000813          	li	a6,0
20402224:	00f72023          	sw	a5,0(a4)
20402228:	01072223          	sw	a6,4(a4)
  ret_type_codes[0] = kTVMArgInt;
2040222c:	fdc42783          	lw	a5,-36(s0)
20402230:	0007a023          	sw	zero,0(a5)
  return 0;
20402234:	00000793          	li	a5,0
}
20402238:	00078513          	mv	a0,a5
2040223c:	02c12403          	lw	s0,44(sp)
20402240:	03010113          	addi	sp,sp,48
20402244:	00008067          	ret

20402248 <TVMInitializeRuntime>:

int TVMContribRandomFill(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                         int* ret_type_code);
tvm_crt_error_t TVMInitializeRuntime() {
20402248:	fd010113          	addi	sp,sp,-48
2040224c:	02112623          	sw	ra,44(sp)
20402250:	02812423          	sw	s0,40(sp)
20402254:	03010413          	addi	s0,sp,48
  int idx = 0;
20402258:	fe042623          	sw	zero,-20(s0)
  tvm_crt_error_t error = kTvmErrorNoError;
2040225c:	fe042423          	sw	zero,-24(s0)

  DLDevice dev = {kDLCPU, 0};
20402260:	00100793          	li	a5,1
20402264:	fef42023          	sw	a5,-32(s0)
20402268:	fe042223          	sw	zero,-28(s0)

  void* registry_backing_memory;
  error = TVMPlatformMemoryAllocate(TVM_CRT_GLOBAL_FUNC_REGISTRY_SIZE_BYTES, dev,
2040226c:	fdc40793          	addi	a5,s0,-36
20402270:	00078693          	mv	a3,a5
20402274:	fe042583          	lw	a1,-32(s0)
20402278:	fe442603          	lw	a2,-28(s0)
2040227c:	10000513          	li	a0,256
20402280:	aa1fe0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20402284:	fea42423          	sw	a0,-24(s0)
                                    &registry_backing_memory);
  if (error != kTvmErrorNoError) {
20402288:	fe842783          	lw	a5,-24(s0)
2040228c:	00078663          	beqz	a5,20402298 <TVMInitializeRuntime+0x50>
    return error;
20402290:	fe842783          	lw	a5,-24(s0)
20402294:	1500006f          	j	204023e4 <TVMInitializeRuntime+0x19c>
  }

  system_lib_handle = kTVMModuleHandleUninitialized;
20402298:	fff00713          	li	a4,-1
2040229c:	5fbff797          	auipc	a5,0x5fbff
204022a0:	be878793          	addi	a5,a5,-1048 # 80000e84 <system_lib_handle>
204022a4:	00e7a023          	sw	a4,0(a5)

  error = TVMMutableFuncRegistry_Create(&global_func_registry, registry_backing_memory,
204022a8:	fdc42783          	lw	a5,-36(s0)
204022ac:	10000613          	li	a2,256
204022b0:	00078593          	mv	a1,a5
204022b4:	5fbff517          	auipc	a0,0x5fbff
204022b8:	bbc50513          	addi	a0,a0,-1092 # 80000e70 <global_func_registry>
204022bc:	165000ef          	jal	ra,20402c20 <TVMMutableFuncRegistry_Create>
204022c0:	fea42423          	sw	a0,-24(s0)
                                        TVM_CRT_GLOBAL_FUNC_REGISTRY_SIZE_BYTES);
  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
204022c4:	fe042623          	sw	zero,-20(s0)
204022c8:	0280006f          	j	204022f0 <TVMInitializeRuntime+0xa8>
    registered_modules[idx] = NULL;
204022cc:	5fbff717          	auipc	a4,0x5fbff
204022d0:	bb070713          	addi	a4,a4,-1104 # 80000e7c <registered_modules>
204022d4:	fec42783          	lw	a5,-20(s0)
204022d8:	00279793          	slli	a5,a5,0x2
204022dc:	00f707b3          	add	a5,a4,a5
204022e0:	0007a023          	sw	zero,0(a5)
  for (idx = 0; idx < TVM_CRT_MAX_REGISTERED_MODULES; idx++) {
204022e4:	fec42783          	lw	a5,-20(s0)
204022e8:	00178793          	addi	a5,a5,1
204022ec:	fef42623          	sw	a5,-20(s0)
204022f0:	fec42703          	lw	a4,-20(s0)
204022f4:	00100793          	li	a5,1
204022f8:	fce7dae3          	ble	a4,a5,204022cc <TVMInitializeRuntime+0x84>
  }

  if (error == kTvmErrorNoError) {
204022fc:	fe842783          	lw	a5,-24(s0)
20402300:	02079263          	bnez	a5,20402324 <TVMInitializeRuntime+0xdc>
    error = TVMFuncRegisterGlobal("runtime.SystemLib", &SystemLibraryCreate, 0);
20402304:	00000613          	li	a2,0
20402308:	fffff597          	auipc	a1,0xfffff
2040230c:	79058593          	addi	a1,a1,1936 # 20401a98 <SystemLibraryCreate>
20402310:	0001e517          	auipc	a0,0x1e
20402314:	e0850513          	addi	a0,a0,-504 # 20420118 <__func__.3409+0x118>
20402318:	d14ff0ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
2040231c:	00050793          	mv	a5,a0
20402320:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
20402324:	fe842783          	lw	a5,-24(s0)
20402328:	02079263          	bnez	a5,2040234c <TVMInitializeRuntime+0x104>
    error = TVMFuncRegisterGlobal("tvm.rpc.server.ModuleGetFunction", &ModuleGetFunction, 0);
2040232c:	00000613          	li	a2,0
20402330:	00000597          	auipc	a1,0x0
20402334:	cc858593          	addi	a1,a1,-824 # 20401ff8 <ModuleGetFunction>
20402338:	0001e517          	auipc	a0,0x1e
2040233c:	df450513          	addi	a0,a0,-524 # 2042012c <__func__.3409+0x12c>
20402340:	cecff0ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
20402344:	00050793          	mv	a5,a0
20402348:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
2040234c:	fe842783          	lw	a5,-24(s0)
20402350:	02079263          	bnez	a5,20402374 <TVMInitializeRuntime+0x12c>
    error = TVMFuncRegisterGlobal("runtime.RPCTimeEvaluator", &RPCTimeEvaluator, 0);
20402354:	00000613          	li	a2,0
20402358:	00000597          	auipc	a1,0x0
2040235c:	0a058593          	addi	a1,a1,160 # 204023f8 <RPCTimeEvaluator>
20402360:	0001e517          	auipc	a0,0x1e
20402364:	df050513          	addi	a0,a0,-528 # 20420150 <__func__.3409+0x150>
20402368:	cc4ff0ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
2040236c:	00050793          	mv	a5,a0
20402370:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
20402374:	fe842783          	lw	a5,-24(s0)
20402378:	02079263          	bnez	a5,2040239c <TVMInitializeRuntime+0x154>
    error = TVMFuncRegisterGlobal("tvm.rpc.server.GetCRTMaxPacketSize", &RPCGetCRTMaxPacketSize, 0);
2040237c:	00000613          	li	a2,0
20402380:	00000597          	auipc	a1,0x0
20402384:	e7458593          	addi	a1,a1,-396 # 204021f4 <RPCGetCRTMaxPacketSize>
20402388:	0001e517          	auipc	a0,0x1e
2040238c:	de450513          	addi	a0,a0,-540 # 2042016c <__func__.3409+0x16c>
20402390:	c9cff0ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
20402394:	00050793          	mv	a5,a0
20402398:	fef42423          	sw	a5,-24(s0)
  }

  if (error == kTvmErrorNoError) {
2040239c:	fe842783          	lw	a5,-24(s0)
204023a0:	02079263          	bnez	a5,204023c4 <TVMInitializeRuntime+0x17c>
    error = TVMFuncRegisterGlobal("tvm.contrib.random.random_fill", &TVMContribRandomFill, 0);
204023a4:	00000613          	li	a2,0
204023a8:	00000597          	auipc	a1,0x0
204023ac:	5fc58593          	addi	a1,a1,1532 # 204029a4 <TVMContribRandomFill>
204023b0:	0001e517          	auipc	a0,0x1e
204023b4:	de050513          	addi	a0,a0,-544 # 20420190 <__func__.3409+0x190>
204023b8:	c74ff0ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
204023bc:	00050793          	mv	a5,a0
204023c0:	fef42423          	sw	a5,-24(s0)
  }

  if (error != kTvmErrorNoError) {
204023c4:	fe842783          	lw	a5,-24(s0)
204023c8:	00078c63          	beqz	a5,204023e0 <TVMInitializeRuntime+0x198>
    TVMPlatformMemoryFree(registry_backing_memory, dev);
204023cc:	fdc42783          	lw	a5,-36(s0)
204023d0:	fe042583          	lw	a1,-32(s0)
204023d4:	fe442603          	lw	a2,-28(s0)
204023d8:	00078513          	mv	a0,a5
204023dc:	9a9fe0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
  }

  return error;
204023e0:	fe842783          	lw	a5,-24(s0)
}
204023e4:	00078513          	mv	a0,a5
204023e8:	02c12083          	lw	ra,44(sp)
204023ec:	02812403          	lw	s0,40(sp)
204023f0:	03010113          	addi	sp,sp,48
204023f4:	00008067          	ret

204023f8 <RPCTimeEvaluator>:
} time_evaluator_state_t;

static time_evaluator_state_t g_time_evaluator_state;

int RPCTimeEvaluator(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                     int* ret_type_code) {
204023f8:	fc010113          	addi	sp,sp,-64
204023fc:	02112e23          	sw	ra,60(sp)
20402400:	02812c23          	sw	s0,56(sp)
20402404:	04010413          	addi	s0,sp,64
20402408:	fca42e23          	sw	a0,-36(s0)
2040240c:	fcb42c23          	sw	a1,-40(s0)
20402410:	fcc42a23          	sw	a2,-44(s0)
20402414:	fcd42823          	sw	a3,-48(s0)
20402418:	fce42623          	sw	a4,-52(s0)
  ret_val[0].v_handle = NULL;
2040241c:	fd042783          	lw	a5,-48(s0)
20402420:	0007a023          	sw	zero,0(a5)
  ret_type_code[0] = kTVMNullptr;
20402424:	fcc42783          	lw	a5,-52(s0)
20402428:	00400713          	li	a4,4
2040242c:	00e7a023          	sw	a4,0(a5)
  if (num_args < 8) {
20402430:	fd442703          	lw	a4,-44(s0)
20402434:	00700793          	li	a5,7
20402438:	00e7ce63          	blt	a5,a4,20402454 <RPCTimeEvaluator+0x5c>
    TVMAPIErrorf("not enough args");
2040243c:	0001e517          	auipc	a0,0x1e
20402440:	d7450513          	addi	a0,a0,-652 # 204201b0 <__func__.3409+0x1b0>
20402444:	d05fe0ef          	jal	ra,20401148 <TVMAPIErrorf>
    return kTvmErrorFunctionCallNumArguments;
20402448:	000017b7          	lui	a5,0x1
2040244c:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20402450:	1ec0006f          	j	2040263c <RPCTimeEvaluator+0x244>
  }
  if (type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
20402454:	fd842783          	lw	a5,-40(s0)
20402458:	0007a703          	lw	a4,0(a5)
2040245c:	00900793          	li	a5,9
20402460:	06f71e63          	bne	a4,a5,204024dc <RPCTimeEvaluator+0xe4>
20402464:	fd842783          	lw	a5,-40(s0)
20402468:	00478793          	addi	a5,a5,4
2040246c:	0007a703          	lw	a4,0(a5)
20402470:	00b00793          	li	a5,11
20402474:	06f71463          	bne	a4,a5,204024dc <RPCTimeEvaluator+0xe4>
      type_codes[2] != kTVMArgInt || type_codes[3] != kTVMArgInt || type_codes[4] != kTVMArgInt ||
20402478:	fd842783          	lw	a5,-40(s0)
2040247c:	00878793          	addi	a5,a5,8
20402480:	0007a783          	lw	a5,0(a5)
  if (type_codes[0] != kTVMModuleHandle || type_codes[1] != kTVMStr ||
20402484:	04079c63          	bnez	a5,204024dc <RPCTimeEvaluator+0xe4>
      type_codes[2] != kTVMArgInt || type_codes[3] != kTVMArgInt || type_codes[4] != kTVMArgInt ||
20402488:	fd842783          	lw	a5,-40(s0)
2040248c:	00c78793          	addi	a5,a5,12
20402490:	0007a783          	lw	a5,0(a5)
20402494:	04079463          	bnez	a5,204024dc <RPCTimeEvaluator+0xe4>
20402498:	fd842783          	lw	a5,-40(s0)
2040249c:	01078793          	addi	a5,a5,16
204024a0:	0007a783          	lw	a5,0(a5)
204024a4:	02079c63          	bnez	a5,204024dc <RPCTimeEvaluator+0xe4>
      type_codes[5] != kTVMArgInt || type_codes[6] != kTVMArgInt || type_codes[7] != kTVMStr) {
204024a8:	fd842783          	lw	a5,-40(s0)
204024ac:	01478793          	addi	a5,a5,20
204024b0:	0007a783          	lw	a5,0(a5)
      type_codes[2] != kTVMArgInt || type_codes[3] != kTVMArgInt || type_codes[4] != kTVMArgInt ||
204024b4:	02079463          	bnez	a5,204024dc <RPCTimeEvaluator+0xe4>
      type_codes[5] != kTVMArgInt || type_codes[6] != kTVMArgInt || type_codes[7] != kTVMStr) {
204024b8:	fd842783          	lw	a5,-40(s0)
204024bc:	01878793          	addi	a5,a5,24
204024c0:	0007a783          	lw	a5,0(a5)
204024c4:	00079c63          	bnez	a5,204024dc <RPCTimeEvaluator+0xe4>
204024c8:	fd842783          	lw	a5,-40(s0)
204024cc:	01c78793          	addi	a5,a5,28
204024d0:	0007a703          	lw	a4,0(a5)
204024d4:	00b00793          	li	a5,11
204024d8:	00f70e63          	beq	a4,a5,204024f4 <RPCTimeEvaluator+0xfc>
    TVMAPIErrorf("one or more invalid arg types");
204024dc:	0001e517          	auipc	a0,0x1e
204024e0:	ce450513          	addi	a0,a0,-796 # 204201c0 <__func__.3409+0x1c0>
204024e4:	c65fe0ef          	jal	ra,20401148 <TVMAPIErrorf>
    return kTvmErrorFunctionCallWrongArgType;
204024e8:	000017b7          	lui	a5,0x1
204024ec:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
204024f0:	14c0006f          	j	2040263c <RPCTimeEvaluator+0x244>
  }

  TVMModuleHandle mod = (TVMModuleHandle)args[0].v_handle;
204024f4:	fdc42783          	lw	a5,-36(s0)
204024f8:	0007a783          	lw	a5,0(a5)
204024fc:	fef42623          	sw	a5,-20(s0)
  const char* name = args[1].v_str;
20402500:	fdc42783          	lw	a5,-36(s0)
20402504:	00878793          	addi	a5,a5,8
20402508:	0007a783          	lw	a5,0(a5)
2040250c:	fef42423          	sw	a5,-24(s0)
  g_time_evaluator_state.device.device_type = args[2].v_int64;
20402510:	fdc42783          	lw	a5,-36(s0)
20402514:	01078793          	addi	a5,a5,16
20402518:	0047a803          	lw	a6,4(a5)
2040251c:	0007a783          	lw	a5,0(a5)
20402520:	00078713          	mv	a4,a5
20402524:	5fbff797          	auipc	a5,0x5fbff
20402528:	96478793          	addi	a5,a5,-1692 # 80000e88 <g_time_evaluator_state>
2040252c:	00e7a423          	sw	a4,8(a5)
  g_time_evaluator_state.device.device_id = args[3].v_int64;
20402530:	fdc42783          	lw	a5,-36(s0)
20402534:	01878793          	addi	a5,a5,24
20402538:	0047a803          	lw	a6,4(a5)
2040253c:	0007a783          	lw	a5,0(a5)
20402540:	00078713          	mv	a4,a5
20402544:	5fbff797          	auipc	a5,0x5fbff
20402548:	94478793          	addi	a5,a5,-1724 # 80000e88 <g_time_evaluator_state>
2040254c:	00e7a623          	sw	a4,12(a5)
  g_time_evaluator_state.number = args[4].v_int64;
20402550:	fdc42783          	lw	a5,-36(s0)
20402554:	02078793          	addi	a5,a5,32
20402558:	0047a803          	lw	a6,4(a5)
2040255c:	0007a783          	lw	a5,0(a5)
20402560:	00078713          	mv	a4,a5
20402564:	5fbff797          	auipc	a5,0x5fbff
20402568:	92478793          	addi	a5,a5,-1756 # 80000e88 <g_time_evaluator_state>
2040256c:	00e7a823          	sw	a4,16(a5)
  g_time_evaluator_state.repeat = args[5].v_int64;
20402570:	fdc42783          	lw	a5,-36(s0)
20402574:	02878793          	addi	a5,a5,40
20402578:	0047a803          	lw	a6,4(a5)
2040257c:	0007a783          	lw	a5,0(a5)
20402580:	00078713          	mv	a4,a5
20402584:	5fbff797          	auipc	a5,0x5fbff
20402588:	90478793          	addi	a5,a5,-1788 # 80000e88 <g_time_evaluator_state>
2040258c:	00e7aa23          	sw	a4,20(a5)
  g_time_evaluator_state.min_repeat_ms = args[6].v_int64;
20402590:	fdc42783          	lw	a5,-36(s0)
20402594:	03078793          	addi	a5,a5,48
20402598:	0047a803          	lw	a6,4(a5)
2040259c:	0007a783          	lw	a5,0(a5)
204025a0:	00078713          	mv	a4,a5
204025a4:	5fbff797          	auipc	a5,0x5fbff
204025a8:	8e478793          	addi	a5,a5,-1820 # 80000e88 <g_time_evaluator_state>
204025ac:	00e7ac23          	sw	a4,24(a5)

  int ret_code =
204025b0:	5fbff697          	auipc	a3,0x5fbff
204025b4:	8dc68693          	addi	a3,a3,-1828 # 80000e8c <g_time_evaluator_state+0x4>
204025b8:	00000613          	li	a2,0
204025bc:	fe842583          	lw	a1,-24(s0)
204025c0:	fec42503          	lw	a0,-20(s0)
204025c4:	9adff0ef          	jal	ra,20401f70 <TVMModGetFunction>
204025c8:	fea42223          	sw	a0,-28(s0)
      TVMModGetFunction(mod, name, /* query_imports */ 0, &g_time_evaluator_state.func_to_time);
  if (ret_code != 0) {
204025cc:	fe442783          	lw	a5,-28(s0)
204025d0:	00078663          	beqz	a5,204025dc <RPCTimeEvaluator+0x1e4>
    return ret_code;
204025d4:	fe442783          	lw	a5,-28(s0)
204025d8:	0640006f          	j	2040263c <RPCTimeEvaluator+0x244>
  }

  g_time_evaluator_state.function_index++;
204025dc:	5fbff797          	auipc	a5,0x5fbff
204025e0:	8ac78793          	addi	a5,a5,-1876 # 80000e88 <g_time_evaluator_state>
204025e4:	0007d783          	lhu	a5,0(a5)
204025e8:	00178793          	addi	a5,a5,1
204025ec:	01079713          	slli	a4,a5,0x10
204025f0:	01075713          	srli	a4,a4,0x10
204025f4:	5fbff797          	auipc	a5,0x5fbff
204025f8:	89478793          	addi	a5,a5,-1900 # 80000e88 <g_time_evaluator_state>
204025fc:	00e79023          	sh	a4,0(a5)
  ret_val[0].v_handle =
      EncodeFunctionHandle(kTimeEvaluatorModuleIndex, g_time_evaluator_state.function_index);
20402600:	000087b7          	lui	a5,0x8
20402604:	fff78713          	addi	a4,a5,-1 # 7fff <__stack_size+0x3fff>
20402608:	5fbff797          	auipc	a5,0x5fbff
2040260c:	88078793          	addi	a5,a5,-1920 # 80000e88 <g_time_evaluator_state>
20402610:	0007d783          	lhu	a5,0(a5)
20402614:	00078593          	mv	a1,a5
20402618:	00070513          	mv	a0,a4
2040261c:	d20ff0ef          	jal	ra,20401b3c <EncodeFunctionHandle>
20402620:	00050713          	mv	a4,a0
  ret_val[0].v_handle =
20402624:	fd042783          	lw	a5,-48(s0)
20402628:	00e7a023          	sw	a4,0(a5)
  ret_type_code[0] = kTVMPackedFuncHandle;
2040262c:	fcc42783          	lw	a5,-52(s0)
20402630:	00a00713          	li	a4,10
20402634:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
20402638:	00000793          	li	a5,0
}
2040263c:	00078513          	mv	a0,a5
20402640:	03c12083          	lw	ra,60(sp)
20402644:	03812403          	lw	s0,56(sp)
20402648:	04010113          	addi	sp,sp,64
2040264c:	00008067          	ret

20402650 <RunTimeEvaluator>:

tvm_crt_error_t RunTimeEvaluator(tvm_function_index_t function_index, TVMValue* args,
                                 int* type_codes, int num_args, TVMValue* ret_val,
                                 int* ret_type_code) {
20402650:	f8010113          	addi	sp,sp,-128
20402654:	06112e23          	sw	ra,124(sp)
20402658:	06812c23          	sw	s0,120(sp)
2040265c:	08010413          	addi	s0,sp,128
20402660:	f8b42c23          	sw	a1,-104(s0)
20402664:	f8c42a23          	sw	a2,-108(s0)
20402668:	f8d42823          	sw	a3,-112(s0)
2040266c:	f8e42623          	sw	a4,-116(s0)
20402670:	f8f42423          	sw	a5,-120(s0)
20402674:	00050793          	mv	a5,a0
20402678:	f8f41f23          	sh	a5,-98(s0)
  if (function_index != g_time_evaluator_state.function_index) {
2040267c:	5fbff797          	auipc	a5,0x5fbff
20402680:	80c78793          	addi	a5,a5,-2036 # 80000e88 <g_time_evaluator_state>
20402684:	0007d783          	lhu	a5,0(a5)
20402688:	f9e45703          	lhu	a4,-98(s0)
2040268c:	00f70863          	beq	a4,a5,2040269c <RunTimeEvaluator+0x4c>
    return kTvmErrorTimeEvaluatorBadHandle;
20402690:	000017b7          	lui	a5,0x1
20402694:	90078793          	addi	a5,a5,-1792 # 900 <__stack_size-0x3700>
20402698:	2cc0006f          	j	20402964 <RunTimeEvaluator+0x314>
  }

  // TODO(areusch): should *really* rethink needing to return doubles
  DLDevice result_byte_dev = {kDLCPU, 0};
2040269c:	00100793          	li	a5,1
204026a0:	faf42823          	sw	a5,-80(s0)
204026a4:	fa042a23          	sw	zero,-76(s0)
  TVMByteArray* result_byte_arr = NULL;
204026a8:	fa042623          	sw	zero,-84(s0)
  tvm_crt_error_t err =
204026ac:	fac40793          	addi	a5,s0,-84
204026b0:	00078693          	mv	a3,a5
204026b4:	fb042583          	lw	a1,-80(s0)
204026b8:	fb442603          	lw	a2,-76(s0)
204026bc:	00800513          	li	a0,8
204026c0:	e60fe0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204026c4:	fea42623          	sw	a0,-20(s0)
      TVMPlatformMemoryAllocate(sizeof(TVMByteArray), result_byte_dev, (void*)&result_byte_arr);
  if (err != kTvmErrorNoError) {
204026c8:	fec42783          	lw	a5,-20(s0)
204026cc:	22079063          	bnez	a5,204028ec <RunTimeEvaluator+0x29c>
    goto release_and_return;
  }
  result_byte_arr->data = NULL;
204026d0:	fac42783          	lw	a5,-84(s0)
204026d4:	0007a023          	sw	zero,0(a5)
  size_t data_size = sizeof(double) * g_time_evaluator_state.repeat;
204026d8:	5fbfe797          	auipc	a5,0x5fbfe
204026dc:	7b078793          	addi	a5,a5,1968 # 80000e88 <g_time_evaluator_state>
204026e0:	0147a783          	lw	a5,20(a5)
204026e4:	00379793          	slli	a5,a5,0x3
204026e8:	fcf42423          	sw	a5,-56(s0)
  err = TVMPlatformMemoryAllocate(data_size, result_byte_dev, (void*)&result_byte_arr->data);
204026ec:	fac42783          	lw	a5,-84(s0)
204026f0:	00078693          	mv	a3,a5
204026f4:	fb042583          	lw	a1,-80(s0)
204026f8:	fb442603          	lw	a2,-76(s0)
204026fc:	fc842503          	lw	a0,-56(s0)
20402700:	e20fe0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20402704:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20402708:	fec42783          	lw	a5,-20(s0)
2040270c:	1e079463          	bnez	a5,204028f4 <RunTimeEvaluator+0x2a4>
    goto release_and_return;
  }
  result_byte_arr->size = data_size;
20402710:	fac42783          	lw	a5,-84(s0)
20402714:	fc842703          	lw	a4,-56(s0)
20402718:	00e7a223          	sw	a4,4(a5)
  double min_repeat_seconds = ((double)g_time_evaluator_state.min_repeat_ms) / 1000;
2040271c:	5fbfe797          	auipc	a5,0x5fbfe
20402720:	76c78793          	addi	a5,a5,1900 # 80000e88 <g_time_evaluator_state>
20402724:	0187a783          	lw	a5,24(a5)
20402728:	00078513          	mv	a0,a5
2040272c:	1a21b0ef          	jal	ra,2041d8ce <__floatsidf>
20402730:	0001e797          	auipc	a5,0x1e
20402734:	ac878793          	addi	a5,a5,-1336 # 204201f8 <__func__.3846+0x18>
20402738:	0007a603          	lw	a2,0(a5)
2040273c:	0047a683          	lw	a3,4(a5)
20402740:	7401a0ef          	jal	ra,2041ce80 <__divdf3>
20402744:	00050793          	mv	a5,a0
20402748:	00058813          	mv	a6,a1
2040274c:	fcf42023          	sw	a5,-64(s0)
20402750:	fd042223          	sw	a6,-60(s0)
  double* iter = (double*)result_byte_arr->data;
20402754:	fac42783          	lw	a5,-84(s0)
20402758:	0007a783          	lw	a5,0(a5)
2040275c:	fef42423          	sw	a5,-24(s0)
  for (int i = 0; i < g_time_evaluator_state.repeat; i++) {
20402760:	fe042223          	sw	zero,-28(s0)
20402764:	1540006f          	j	204028b8 <RunTimeEvaluator+0x268>
    double repeat_res_seconds = 0.0;
20402768:	fc042c23          	sw	zero,-40(s0)
2040276c:	fc042e23          	sw	zero,-36(s0)
    int exec_count = 0;
20402770:	fc042a23          	sw	zero,-44(s0)
    // do-while structure ensures we run even when `min_repeat_ms` isn't set (i.e., is 0).
    do {
      err = TVMPlatformTimerStart();
20402774:	e4cfe0ef          	jal	ra,20400dc0 <TVMPlatformTimerStart>
20402778:	fea42623          	sw	a0,-20(s0)
      if (err != kTvmErrorNoError) {
2040277c:	fec42783          	lw	a5,-20(s0)
20402780:	16079e63          	bnez	a5,204028fc <RunTimeEvaluator+0x2ac>
        goto release_and_return;
      }

      for (int j = 0; j < g_time_evaluator_state.number; j++) {
20402784:	fc042823          	sw	zero,-48(s0)
20402788:	0440006f          	j	204027cc <RunTimeEvaluator+0x17c>
        err = TVMFuncCall(g_time_evaluator_state.func_to_time, args, type_codes, num_args, ret_val,
2040278c:	5fbfe797          	auipc	a5,0x5fbfe
20402790:	6fc78793          	addi	a5,a5,1788 # 80000e88 <g_time_evaluator_state>
20402794:	0047a503          	lw	a0,4(a5)
20402798:	f8842783          	lw	a5,-120(s0)
2040279c:	f8c42703          	lw	a4,-116(s0)
204027a0:	f9042683          	lw	a3,-112(s0)
204027a4:	f9442603          	lw	a2,-108(s0)
204027a8:	f9842583          	lw	a1,-104(s0)
204027ac:	d6cff0ef          	jal	ra,20401d18 <TVMFuncCall>
204027b0:	00050793          	mv	a5,a0
204027b4:	fef42623          	sw	a5,-20(s0)
                          ret_type_code);
        if (err != kTvmErrorNoError) {
204027b8:	fec42783          	lw	a5,-20(s0)
204027bc:	14079463          	bnez	a5,20402904 <RunTimeEvaluator+0x2b4>
      for (int j = 0; j < g_time_evaluator_state.number; j++) {
204027c0:	fd042783          	lw	a5,-48(s0)
204027c4:	00178793          	addi	a5,a5,1
204027c8:	fcf42823          	sw	a5,-48(s0)
204027cc:	5fbfe797          	auipc	a5,0x5fbfe
204027d0:	6bc78793          	addi	a5,a5,1724 # 80000e88 <g_time_evaluator_state>
204027d4:	0107a783          	lw	a5,16(a5)
204027d8:	fd042703          	lw	a4,-48(s0)
204027dc:	faf748e3          	blt	a4,a5,2040278c <RunTimeEvaluator+0x13c>
          goto release_and_return;
        }
      }
      exec_count += g_time_evaluator_state.number;
204027e0:	5fbfe797          	auipc	a5,0x5fbfe
204027e4:	6a878793          	addi	a5,a5,1704 # 80000e88 <g_time_evaluator_state>
204027e8:	0107a783          	lw	a5,16(a5)
204027ec:	fd442703          	lw	a4,-44(s0)
204027f0:	00f707b3          	add	a5,a4,a5
204027f4:	fcf42a23          	sw	a5,-44(s0)

      double curr_res_seconds;
      err = TVMPlatformTimerStop(&curr_res_seconds);
204027f8:	fa040793          	addi	a5,s0,-96
204027fc:	00078513          	mv	a0,a5
20402800:	de0fe0ef          	jal	ra,20400de0 <TVMPlatformTimerStop>
20402804:	fea42623          	sw	a0,-20(s0)
      if (err != kTvmErrorNoError) {
20402808:	fec42783          	lw	a5,-20(s0)
2040280c:	10079063          	bnez	a5,2040290c <RunTimeEvaluator+0x2bc>
        goto release_and_return;
      }
      repeat_res_seconds += curr_res_seconds;
20402810:	fa042783          	lw	a5,-96(s0)
20402814:	fa442803          	lw	a6,-92(s0)
20402818:	00078613          	mv	a2,a5
2040281c:	00080693          	mv	a3,a6
20402820:	fd842503          	lw	a0,-40(s0)
20402824:	fdc42583          	lw	a1,-36(s0)
20402828:	01e1a0ef          	jal	ra,2041c846 <__adddf3>
2040282c:	00050793          	mv	a5,a0
20402830:	00058813          	mv	a6,a1
20402834:	fcf42c23          	sw	a5,-40(s0)
20402838:	fd042e23          	sw	a6,-36(s0)
    } while (repeat_res_seconds < min_repeat_seconds);
2040283c:	fc042603          	lw	a2,-64(s0)
20402840:	fc442683          	lw	a3,-60(s0)
20402844:	fd842503          	lw	a0,-40(s0)
20402848:	fdc42583          	lw	a1,-36(s0)
2040284c:	3631a0ef          	jal	ra,2041d3ae <__ledf2>
20402850:	00050793          	mv	a5,a0
20402854:	f207c0e3          	bltz	a5,20402774 <RunTimeEvaluator+0x124>
    double mean_exec_seconds = repeat_res_seconds / exec_count;
20402858:	fd442503          	lw	a0,-44(s0)
2040285c:	0721b0ef          	jal	ra,2041d8ce <__floatsidf>
20402860:	00050793          	mv	a5,a0
20402864:	00058813          	mv	a6,a1
20402868:	00078613          	mv	a2,a5
2040286c:	00080693          	mv	a3,a6
20402870:	fd842503          	lw	a0,-40(s0)
20402874:	fdc42583          	lw	a1,-36(s0)
20402878:	6081a0ef          	jal	ra,2041ce80 <__divdf3>
2040287c:	00050793          	mv	a5,a0
20402880:	00058813          	mv	a6,a1
20402884:	faf42c23          	sw	a5,-72(s0)
20402888:	fb042e23          	sw	a6,-68(s0)
    *iter = mean_exec_seconds;
2040288c:	fe842703          	lw	a4,-24(s0)
20402890:	fb842783          	lw	a5,-72(s0)
20402894:	fbc42803          	lw	a6,-68(s0)
20402898:	00f72023          	sw	a5,0(a4)
2040289c:	01072223          	sw	a6,4(a4)
    iter++;
204028a0:	fe842783          	lw	a5,-24(s0)
204028a4:	00878793          	addi	a5,a5,8
204028a8:	fef42423          	sw	a5,-24(s0)
  for (int i = 0; i < g_time_evaluator_state.repeat; i++) {
204028ac:	fe442783          	lw	a5,-28(s0)
204028b0:	00178793          	addi	a5,a5,1
204028b4:	fef42223          	sw	a5,-28(s0)
204028b8:	5fbfe797          	auipc	a5,0x5fbfe
204028bc:	5d078793          	addi	a5,a5,1488 # 80000e88 <g_time_evaluator_state>
204028c0:	0147a783          	lw	a5,20(a5)
204028c4:	fe442703          	lw	a4,-28(s0)
204028c8:	eaf740e3          	blt	a4,a5,20402768 <RunTimeEvaluator+0x118>
  }

  *ret_type_code = kTVMBytes;
204028cc:	f8842783          	lw	a5,-120(s0)
204028d0:	00c00713          	li	a4,12
204028d4:	00e7a023          	sw	a4,0(a5)
  ret_val->v_handle = result_byte_arr;
204028d8:	fac42703          	lw	a4,-84(s0)
204028dc:	f8c42783          	lw	a5,-116(s0)
204028e0:	00e7a023          	sw	a4,0(a5)
  return err;
204028e4:	fec42783          	lw	a5,-20(s0)
204028e8:	07c0006f          	j	20402964 <RunTimeEvaluator+0x314>
    goto release_and_return;
204028ec:	00000013          	nop
204028f0:	0200006f          	j	20402910 <RunTimeEvaluator+0x2c0>
    goto release_and_return;
204028f4:	00000013          	nop
204028f8:	0180006f          	j	20402910 <RunTimeEvaluator+0x2c0>
        goto release_and_return;
204028fc:	00000013          	nop
20402900:	0100006f          	j	20402910 <RunTimeEvaluator+0x2c0>
          goto release_and_return;
20402904:	00000013          	nop
20402908:	0080006f          	j	20402910 <RunTimeEvaluator+0x2c0>
        goto release_and_return;
2040290c:	00000013          	nop

release_and_return : {
  tvm_crt_error_t release_err =
      TVMPlatformMemoryFree((void*)&result_byte_arr->data, result_byte_dev);
20402910:	fac42783          	lw	a5,-84(s0)
  tvm_crt_error_t release_err =
20402914:	fb042583          	lw	a1,-80(s0)
20402918:	fb442603          	lw	a2,-76(s0)
2040291c:	00078513          	mv	a0,a5
20402920:	c64fe0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20402924:	fca42623          	sw	a0,-52(s0)
  if (release_err != kTvmErrorNoError) {
20402928:	fcc42783          	lw	a5,-52(s0)
2040292c:	00078e63          	beqz	a5,20402948 <RunTimeEvaluator+0x2f8>
    release_err = TVMPlatformMemoryFree((void*)&result_byte_arr, result_byte_dev);
20402930:	fac40793          	addi	a5,s0,-84
20402934:	fb042583          	lw	a1,-80(s0)
20402938:	fb442603          	lw	a2,-76(s0)
2040293c:	00078513          	mv	a0,a5
20402940:	c44fe0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20402944:	fca42623          	sw	a0,-52(s0)
  }

  if (err == kTvmErrorNoError && release_err != kTvmErrorNoError) {
20402948:	fec42783          	lw	a5,-20(s0)
2040294c:	00079a63          	bnez	a5,20402960 <RunTimeEvaluator+0x310>
20402950:	fcc42783          	lw	a5,-52(s0)
20402954:	00078663          	beqz	a5,20402960 <RunTimeEvaluator+0x310>
    err = release_err;
20402958:	fcc42783          	lw	a5,-52(s0)
2040295c:	fef42623          	sw	a5,-20(s0)
  }
}
  return err;
20402960:	fec42783          	lw	a5,-20(s0)
}
20402964:	00078513          	mv	a0,a5
20402968:	07c12083          	lw	ra,124(sp)
2040296c:	07812403          	lw	s0,120(sp)
20402970:	08010113          	addi	sp,sp,128
20402974:	00008067          	ret

// Default implementation, overridden by the platform runtime.
__attribute__((weak)) tvm_crt_error_t TVMPlatformGenerateRandom(uint8_t* buffer, size_t num_bytes) {
20402978:	fe010113          	addi	sp,sp,-32
2040297c:	00812e23          	sw	s0,28(sp)
20402980:	02010413          	addi	s0,sp,32
20402984:	fea42623          	sw	a0,-20(s0)
20402988:	feb42423          	sw	a1,-24(s0)
  return kTvmErrorFunctionCallNotImplemented;
2040298c:	000017b7          	lui	a5,0x1
20402990:	80278793          	addi	a5,a5,-2046 # 802 <__stack_size-0x37fe>
}
20402994:	00078513          	mv	a0,a5
20402998:	01c12403          	lw	s0,28(sp)
2040299c:	02010113          	addi	sp,sp,32
204029a0:	00008067          	ret

204029a4 <TVMContribRandomFill>:

// Fill the tensor in args[0] with random data using TVMPlatformGenerateRandom.
// Named to correspond with the analogous function in the C++ runtime.
int TVMContribRandomFill(TVMValue* args, int* type_codes, int num_args, TVMValue* ret_val,
                         int* ret_type_code) {
204029a4:	fa010113          	addi	sp,sp,-96
204029a8:	04112e23          	sw	ra,92(sp)
204029ac:	04812c23          	sw	s0,88(sp)
204029b0:	06010413          	addi	s0,sp,96
204029b4:	faa42e23          	sw	a0,-68(s0)
204029b8:	fab42c23          	sw	a1,-72(s0)
204029bc:	fac42a23          	sw	a2,-76(s0)
204029c0:	fad42823          	sw	a3,-80(s0)
204029c4:	fae42623          	sw	a4,-84(s0)
  if (num_args != 1) {
204029c8:	fb442703          	lw	a4,-76(s0)
204029cc:	00100793          	li	a5,1
204029d0:	00f70863          	beq	a4,a5,204029e0 <TVMContribRandomFill+0x3c>
    return kTvmErrorFunctionCallNumArguments;
204029d4:	000017b7          	lui	a5,0x1
204029d8:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
204029dc:	05c0006f          	j	20402a38 <TVMContribRandomFill+0x94>
  }

  if (type_codes[0] != kTVMDLTensorHandle) {
204029e0:	fb842783          	lw	a5,-72(s0)
204029e4:	0007a703          	lw	a4,0(a5)
204029e8:	00700793          	li	a5,7
204029ec:	00f70863          	beq	a4,a5,204029fc <TVMContribRandomFill+0x58>
    return kTvmErrorFunctionCallWrongArgType;
204029f0:	000017b7          	lui	a5,0x1
204029f4:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
204029f8:	0400006f          	j	20402a38 <TVMContribRandomFill+0x94>
  }

  DLTensor* tensor = (DLTensor*)args[0].v_handle;
204029fc:	fbc42783          	lw	a5,-68(s0)
20402a00:	0007a783          	lw	a5,0(a5)
20402a04:	fef42623          	sw	a5,-20(s0)
  TVMNDArray arr = {*tensor};
20402a08:	fec42703          	lw	a4,-20(s0)
20402a0c:	fc040793          	addi	a5,s0,-64
20402a10:	00070693          	mv	a3,a4
20402a14:	02800713          	li	a4,40
20402a18:	00070613          	mv	a2,a4
20402a1c:	00068593          	mv	a1,a3
20402a20:	00078513          	mv	a0,a5
20402a24:	2b1100ef          	jal	ra,204134d4 <memcpy>
  return TVMNDArray_RandomFill(&arr);
20402a28:	fc040793          	addi	a5,s0,-64
20402a2c:	00078513          	mv	a0,a5
20402a30:	469000ef          	jal	ra,20403698 <TVMNDArray_RandomFill>
20402a34:	00050793          	mv	a5,a0
}
20402a38:	00078513          	mv	a0,a5
20402a3c:	05c12083          	lw	ra,92(sp)
20402a40:	05812403          	lw	s0,88(sp)
20402a44:	06010113          	addi	sp,sp,96
20402a48:	00008067          	ret

20402a4c <strcmp_cursor>:
 *
 * \param cursor Pointer to cursor to first string to compare.
 * \param name Pointer to reference string.
 * \return 0 if the string pointed to by cursor == name; non-zero otherwise.
 */
int strcmp_cursor(const char** cursor, const char* name) {
20402a4c:	fd010113          	addi	sp,sp,-48
20402a50:	02812623          	sw	s0,44(sp)
20402a54:	03010413          	addi	s0,sp,48
20402a58:	fca42e23          	sw	a0,-36(s0)
20402a5c:	fcb42c23          	sw	a1,-40(s0)
  int return_value = 0;
20402a60:	fe042623          	sw	zero,-20(s0)
  while (return_value == 0) {
20402a64:	0600006f          	j	20402ac4 <strcmp_cursor+0x78>
    char c = **cursor;
20402a68:	fdc42783          	lw	a5,-36(s0)
20402a6c:	0007a783          	lw	a5,0(a5)
20402a70:	0007c783          	lbu	a5,0(a5)
20402a74:	fef405a3          	sb	a5,-21(s0)
    char n = *name;
20402a78:	fd842783          	lw	a5,-40(s0)
20402a7c:	0007c783          	lbu	a5,0(a5)
20402a80:	fef40523          	sb	a5,-22(s0)
    return_value = ((int)c) - ((int)n);
20402a84:	feb44703          	lbu	a4,-21(s0)
20402a88:	fea44783          	lbu	a5,-22(s0)
20402a8c:	40f707b3          	sub	a5,a4,a5
20402a90:	fef42623          	sw	a5,-20(s0)

    if (n == 0 || c == 0) {
20402a94:	fea44783          	lbu	a5,-22(s0)
20402a98:	04078663          	beqz	a5,20402ae4 <strcmp_cursor+0x98>
20402a9c:	feb44783          	lbu	a5,-21(s0)
20402aa0:	04078263          	beqz	a5,20402ae4 <strcmp_cursor+0x98>
      break;
    }

    name++;
20402aa4:	fd842783          	lw	a5,-40(s0)
20402aa8:	00178793          	addi	a5,a5,1
20402aac:	fcf42c23          	sw	a5,-40(s0)
    (*cursor)++;
20402ab0:	fdc42783          	lw	a5,-36(s0)
20402ab4:	0007a783          	lw	a5,0(a5)
20402ab8:	00178713          	addi	a4,a5,1
20402abc:	fdc42783          	lw	a5,-36(s0)
20402ac0:	00e7a023          	sw	a4,0(a5)
  while (return_value == 0) {
20402ac4:	fec42783          	lw	a5,-20(s0)
20402ac8:	fa0780e3          	beqz	a5,20402a68 <strcmp_cursor+0x1c>
  }

  while (**cursor != 0) {
20402acc:	0180006f          	j	20402ae4 <strcmp_cursor+0x98>
    (*cursor)++;
20402ad0:	fdc42783          	lw	a5,-36(s0)
20402ad4:	0007a783          	lw	a5,0(a5)
20402ad8:	00178713          	addi	a4,a5,1
20402adc:	fdc42783          	lw	a5,-36(s0)
20402ae0:	00e7a023          	sw	a4,0(a5)
  while (**cursor != 0) {
20402ae4:	fdc42783          	lw	a5,-36(s0)
20402ae8:	0007a783          	lw	a5,0(a5)
20402aec:	0007c783          	lbu	a5,0(a5)
20402af0:	fe0790e3          	bnez	a5,20402ad0 <strcmp_cursor+0x84>
  }

  return return_value;
20402af4:	fec42783          	lw	a5,-20(s0)
}
20402af8:	00078513          	mv	a0,a5
20402afc:	02c12403          	lw	s0,44(sp)
20402b00:	03010113          	addi	sp,sp,48
20402b04:	00008067          	ret

20402b08 <TVMFuncRegistry_Lookup>:

tvm_crt_error_t TVMFuncRegistry_Lookup(const TVMFuncRegistry* reg, const char* name,
                                       tvm_function_index_t* function_index) {
20402b08:	fd010113          	addi	sp,sp,-48
20402b0c:	02112623          	sw	ra,44(sp)
20402b10:	02812423          	sw	s0,40(sp)
20402b14:	03010413          	addi	s0,sp,48
20402b18:	fca42e23          	sw	a0,-36(s0)
20402b1c:	fcb42c23          	sw	a1,-40(s0)
20402b20:	fcc42a23          	sw	a2,-44(s0)
  tvm_function_index_t idx;
  const char* reg_name_ptr;

  idx = 0;
20402b24:	fe041723          	sh	zero,-18(s0)
  // NOTE: reg_name_ptr starts at index 1 to skip num_funcs.
  for (reg_name_ptr = reg->names + 1; *reg_name_ptr != '\0'; reg_name_ptr++) {
20402b28:	fdc42783          	lw	a5,-36(s0)
20402b2c:	0007a783          	lw	a5,0(a5)
20402b30:	00178793          	addi	a5,a5,1
20402b34:	fef42423          	sw	a5,-24(s0)
20402b38:	0480006f          	j	20402b80 <TVMFuncRegistry_Lookup+0x78>
    if (!strcmp_cursor(&reg_name_ptr, name)) {
20402b3c:	fe840793          	addi	a5,s0,-24
20402b40:	fd842583          	lw	a1,-40(s0)
20402b44:	00078513          	mv	a0,a5
20402b48:	f05ff0ef          	jal	ra,20402a4c <strcmp_cursor>
20402b4c:	00050793          	mv	a5,a0
20402b50:	00079c63          	bnez	a5,20402b68 <TVMFuncRegistry_Lookup+0x60>
      *function_index = idx;
20402b54:	fd442783          	lw	a5,-44(s0)
20402b58:	fee45703          	lhu	a4,-18(s0)
20402b5c:	00e79023          	sh	a4,0(a5)
      return kTvmErrorNoError;
20402b60:	00000793          	li	a5,0
20402b64:	02c0006f          	j	20402b90 <TVMFuncRegistry_Lookup+0x88>
    }

    idx++;
20402b68:	fee45783          	lhu	a5,-18(s0)
20402b6c:	00178793          	addi	a5,a5,1
20402b70:	fef41723          	sh	a5,-18(s0)
  for (reg_name_ptr = reg->names + 1; *reg_name_ptr != '\0'; reg_name_ptr++) {
20402b74:	fe842783          	lw	a5,-24(s0)
20402b78:	00178793          	addi	a5,a5,1
20402b7c:	fef42423          	sw	a5,-24(s0)
20402b80:	fe842783          	lw	a5,-24(s0)
20402b84:	0007c783          	lbu	a5,0(a5)
20402b88:	fa079ae3          	bnez	a5,20402b3c <TVMFuncRegistry_Lookup+0x34>
  }

  return kTvmErrorFunctionNameNotFound;
20402b8c:	10000793          	li	a5,256
}
20402b90:	00078513          	mv	a0,a5
20402b94:	02c12083          	lw	ra,44(sp)
20402b98:	02812403          	lw	s0,40(sp)
20402b9c:	03010113          	addi	sp,sp,48
20402ba0:	00008067          	ret

20402ba4 <TVMFuncRegistry_GetByIndex>:

tvm_crt_error_t TVMFuncRegistry_GetByIndex(const TVMFuncRegistry* reg,
                                           tvm_function_index_t function_index,
                                           TVMBackendPackedCFunc* out_func) {
20402ba4:	fd010113          	addi	sp,sp,-48
20402ba8:	02812623          	sw	s0,44(sp)
20402bac:	03010413          	addi	s0,sp,48
20402bb0:	fca42e23          	sw	a0,-36(s0)
20402bb4:	00058793          	mv	a5,a1
20402bb8:	fcc42a23          	sw	a2,-44(s0)
20402bbc:	fcf41d23          	sh	a5,-38(s0)
  uint8_t num_funcs;

  num_funcs = reg->names[0];
20402bc0:	fdc42783          	lw	a5,-36(s0)
20402bc4:	0007a783          	lw	a5,0(a5)
20402bc8:	0007c783          	lbu	a5,0(a5)
20402bcc:	fef407a3          	sb	a5,-17(s0)
  if (function_index >= num_funcs) {
20402bd0:	fef44783          	lbu	a5,-17(s0)
20402bd4:	01079793          	slli	a5,a5,0x10
20402bd8:	0107d793          	srli	a5,a5,0x10
20402bdc:	fda45703          	lhu	a4,-38(s0)
20402be0:	00f76663          	bltu	a4,a5,20402bec <TVMFuncRegistry_GetByIndex+0x48>
    return kTvmErrorFunctionIndexInvalid;
20402be4:	10100793          	li	a5,257
20402be8:	0280006f          	j	20402c10 <TVMFuncRegistry_GetByIndex+0x6c>
  }

  *out_func = reg->funcs[function_index];
20402bec:	fdc42783          	lw	a5,-36(s0)
20402bf0:	0047a703          	lw	a4,4(a5)
20402bf4:	fda45783          	lhu	a5,-38(s0)
20402bf8:	00279793          	slli	a5,a5,0x2
20402bfc:	00f707b3          	add	a5,a4,a5
20402c00:	0007a703          	lw	a4,0(a5)
20402c04:	fd442783          	lw	a5,-44(s0)
20402c08:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
20402c0c:	00000793          	li	a5,0
}
20402c10:	00078513          	mv	a0,a5
20402c14:	02c12403          	lw	s0,44(sp)
20402c18:	03010113          	addi	sp,sp,48
20402c1c:	00008067          	ret

20402c20 <TVMMutableFuncRegistry_Create>:

tvm_crt_error_t TVMMutableFuncRegistry_Create(TVMMutableFuncRegistry* reg, uint8_t* buffer,
                                              size_t buffer_size_bytes) {
20402c20:	fe010113          	addi	sp,sp,-32
20402c24:	00112e23          	sw	ra,28(sp)
20402c28:	00812c23          	sw	s0,24(sp)
20402c2c:	02010413          	addi	s0,sp,32
20402c30:	fea42623          	sw	a0,-20(s0)
20402c34:	feb42423          	sw	a1,-24(s0)
20402c38:	fec42223          	sw	a2,-28(s0)
  if (buffer_size_bytes < kTvmAverageFuncEntrySizeBytes) {
20402c3c:	00f00793          	li	a5,15
20402c40:	fe442703          	lw	a4,-28(s0)
20402c44:	00f77663          	bleu	a5,a4,20402c50 <TVMMutableFuncRegistry_Create+0x30>
    return kTvmErrorBufferTooSmall;
20402c48:	10400793          	li	a5,260
20402c4c:	06c0006f          	j	20402cb8 <TVMMutableFuncRegistry_Create+0x98>
  }

  reg->registry.names = (const char*)buffer;
20402c50:	fec42783          	lw	a5,-20(s0)
20402c54:	fe842703          	lw	a4,-24(s0)
20402c58:	00e7a023          	sw	a4,0(a5)
  buffer[0] = 0;  // number of functions present in buffer.
20402c5c:	fe842783          	lw	a5,-24(s0)
20402c60:	00078023          	sb	zero,0(a5)
  buffer[1] = 0;  // end of names list marker.
20402c64:	fe842783          	lw	a5,-24(s0)
20402c68:	00178793          	addi	a5,a5,1
20402c6c:	00078023          	sb	zero,0(a5)

  // compute a guess of the average size of one entry:
  //  - assume average function name is around ~10 bytes
  //  - 1 byte for \0
  //  - size of 1 function pointer
  reg->max_functions = buffer_size_bytes / kTvmAverageFuncEntrySizeBytes;
20402c70:	00f00793          	li	a5,15
20402c74:	00078593          	mv	a1,a5
20402c78:	fe442503          	lw	a0,-28(s0)
20402c7c:	0301d0ef          	jal	ra,2041fcac <__udivsi3>
20402c80:	00050793          	mv	a5,a0
20402c84:	00078713          	mv	a4,a5
20402c88:	fec42783          	lw	a5,-20(s0)
20402c8c:	00e7a423          	sw	a4,8(a5)
  reg->registry.funcs =
      (TVMBackendPackedCFunc*)(buffer + buffer_size_bytes - reg->max_functions * sizeof(void*));
20402c90:	fec42783          	lw	a5,-20(s0)
20402c94:	0087a783          	lw	a5,8(a5)
20402c98:	00279793          	slli	a5,a5,0x2
20402c9c:	fe442703          	lw	a4,-28(s0)
20402ca0:	40f707b3          	sub	a5,a4,a5
20402ca4:	fe842703          	lw	a4,-24(s0)
20402ca8:	00f70733          	add	a4,a4,a5
  reg->registry.funcs =
20402cac:	fec42783          	lw	a5,-20(s0)
20402cb0:	00e7a223          	sw	a4,4(a5)

  return kTvmErrorNoError;
20402cb4:	00000793          	li	a5,0
}
20402cb8:	00078513          	mv	a0,a5
20402cbc:	01c12083          	lw	ra,28(sp)
20402cc0:	01812403          	lw	s0,24(sp)
20402cc4:	02010113          	addi	sp,sp,32
20402cc8:	00008067          	ret

20402ccc <TVMMutableFuncRegistry_Set>:

tvm_crt_error_t TVMMutableFuncRegistry_Set(TVMMutableFuncRegistry* reg, const char* name,
                                           TVMBackendPackedCFunc func, int override) {
20402ccc:	fd010113          	addi	sp,sp,-48
20402cd0:	02112623          	sw	ra,44(sp)
20402cd4:	02812423          	sw	s0,40(sp)
20402cd8:	03010413          	addi	s0,sp,48
20402cdc:	fca42e23          	sw	a0,-36(s0)
20402ce0:	fcb42c23          	sw	a1,-40(s0)
20402ce4:	fcc42a23          	sw	a2,-44(s0)
20402ce8:	fcd42823          	sw	a3,-48(s0)
  size_t idx;
  char* reg_name_ptr;

  idx = 0;
20402cec:	fe042623          	sw	zero,-20(s0)
  // NOTE: safe to discard const qualifier here, since reg->registry.names was set from
  // TVMMutableFuncRegistry_Create above.
  // NOTE: reg_name_ptr starts at index 1 to skip num_funcs.
  for (reg_name_ptr = (char*)reg->registry.names + 1; *reg_name_ptr != 0; reg_name_ptr++) {
20402cf0:	fdc42783          	lw	a5,-36(s0)
20402cf4:	0007a783          	lw	a5,0(a5)
20402cf8:	00178793          	addi	a5,a5,1
20402cfc:	fef42023          	sw	a5,-32(s0)
20402d00:	0680006f          	j	20402d68 <TVMMutableFuncRegistry_Set+0x9c>
    if (!strcmp_cursor((const char**)&reg_name_ptr, name)) {
20402d04:	fe040793          	addi	a5,s0,-32
20402d08:	fd842583          	lw	a1,-40(s0)
20402d0c:	00078513          	mv	a0,a5
20402d10:	d3dff0ef          	jal	ra,20402a4c <strcmp_cursor>
20402d14:	00050793          	mv	a5,a0
20402d18:	02079c63          	bnez	a5,20402d50 <TVMMutableFuncRegistry_Set+0x84>
      if (override == 0) {
20402d1c:	fd042783          	lw	a5,-48(s0)
20402d20:	00079663          	bnez	a5,20402d2c <TVMMutableFuncRegistry_Set+0x60>
        return kTvmErrorFunctionAlreadyDefined;
20402d24:	10300793          	li	a5,259
20402d28:	1200006f          	j	20402e48 <TVMMutableFuncRegistry_Set+0x17c>
      }
      ((TVMBackendPackedCFunc*)reg->registry.funcs)[idx] = func;
20402d2c:	fdc42783          	lw	a5,-36(s0)
20402d30:	0047a703          	lw	a4,4(a5)
20402d34:	fec42783          	lw	a5,-20(s0)
20402d38:	00279793          	slli	a5,a5,0x2
20402d3c:	00f707b3          	add	a5,a4,a5
20402d40:	fd442703          	lw	a4,-44(s0)
20402d44:	00e7a023          	sw	a4,0(a5)
      return kTvmErrorNoError;
20402d48:	00000793          	li	a5,0
20402d4c:	0fc0006f          	j	20402e48 <TVMMutableFuncRegistry_Set+0x17c>
    }

    idx++;
20402d50:	fec42783          	lw	a5,-20(s0)
20402d54:	00178793          	addi	a5,a5,1
20402d58:	fef42623          	sw	a5,-20(s0)
  for (reg_name_ptr = (char*)reg->registry.names + 1; *reg_name_ptr != 0; reg_name_ptr++) {
20402d5c:	fe042783          	lw	a5,-32(s0)
20402d60:	00178793          	addi	a5,a5,1
20402d64:	fef42023          	sw	a5,-32(s0)
20402d68:	fe042783          	lw	a5,-32(s0)
20402d6c:	0007c783          	lbu	a5,0(a5)
20402d70:	f8079ae3          	bnez	a5,20402d04 <TVMMutableFuncRegistry_Set+0x38>
  }

  if (reg_name_ptr > ((const char*)reg->registry.funcs)) {
20402d74:	fdc42783          	lw	a5,-36(s0)
20402d78:	0047a703          	lw	a4,4(a5)
20402d7c:	fe042783          	lw	a5,-32(s0)
20402d80:	00f77663          	bleu	a5,a4,20402d8c <TVMMutableFuncRegistry_Set+0xc0>
    return kTvmErrorFunctionRegistryFull;
20402d84:	10200793          	li	a5,258
20402d88:	0c00006f          	j	20402e48 <TVMMutableFuncRegistry_Set+0x17c>
  }

  size_t name_len = strlen(name);
20402d8c:	fd842503          	lw	a0,-40(s0)
20402d90:	29d100ef          	jal	ra,2041382c <strlen>
20402d94:	fea42423          	sw	a0,-24(s0)
  size_t names_bytes_remaining = ((const char*)reg->registry.funcs) - reg_name_ptr;
20402d98:	fdc42783          	lw	a5,-36(s0)
20402d9c:	0047a783          	lw	a5,4(a5)
20402da0:	00078713          	mv	a4,a5
20402da4:	fe042783          	lw	a5,-32(s0)
20402da8:	40f707b3          	sub	a5,a4,a5
20402dac:	fef42223          	sw	a5,-28(s0)
  if (idx >= reg->max_functions || name_len + 1 > names_bytes_remaining) {
20402db0:	fdc42783          	lw	a5,-36(s0)
20402db4:	0087a783          	lw	a5,8(a5)
20402db8:	fec42703          	lw	a4,-20(s0)
20402dbc:	00f77a63          	bleu	a5,a4,20402dd0 <TVMMutableFuncRegistry_Set+0x104>
20402dc0:	fe842783          	lw	a5,-24(s0)
20402dc4:	00178793          	addi	a5,a5,1
20402dc8:	fe442703          	lw	a4,-28(s0)
20402dcc:	00f77663          	bleu	a5,a4,20402dd8 <TVMMutableFuncRegistry_Set+0x10c>
    return kTvmErrorFunctionRegistryFull;
20402dd0:	10200793          	li	a5,258
20402dd4:	0740006f          	j	20402e48 <TVMMutableFuncRegistry_Set+0x17c>
  }

  memcpy(reg_name_ptr, name, name_len + 1);
20402dd8:	fe042703          	lw	a4,-32(s0)
20402ddc:	fe842783          	lw	a5,-24(s0)
20402de0:	00178793          	addi	a5,a5,1
20402de4:	00078613          	mv	a2,a5
20402de8:	fd842583          	lw	a1,-40(s0)
20402dec:	00070513          	mv	a0,a4
20402df0:	6e4100ef          	jal	ra,204134d4 <memcpy>
  reg_name_ptr += name_len + 1;
20402df4:	fe042703          	lw	a4,-32(s0)
20402df8:	fe842783          	lw	a5,-24(s0)
20402dfc:	00178793          	addi	a5,a5,1
20402e00:	00f707b3          	add	a5,a4,a5
20402e04:	fef42023          	sw	a5,-32(s0)
  *reg_name_ptr = 0;
20402e08:	fe042783          	lw	a5,-32(s0)
20402e0c:	00078023          	sb	zero,0(a5)
  ((TVMBackendPackedCFunc*)reg->registry.funcs)[idx] = func;
20402e10:	fdc42783          	lw	a5,-36(s0)
20402e14:	0047a703          	lw	a4,4(a5)
20402e18:	fec42783          	lw	a5,-20(s0)
20402e1c:	00279793          	slli	a5,a5,0x2
20402e20:	00f707b3          	add	a5,a4,a5
20402e24:	fd442703          	lw	a4,-44(s0)
20402e28:	00e7a023          	sw	a4,0(a5)
  ((char*)reg->registry.names)[0]++;  // increment num_funcs.
20402e2c:	fdc42783          	lw	a5,-36(s0)
20402e30:	0007a783          	lw	a5,0(a5)
20402e34:	0007c703          	lbu	a4,0(a5)
20402e38:	00170713          	addi	a4,a4,1
20402e3c:	0ff77713          	andi	a4,a4,255
20402e40:	00e78023          	sb	a4,0(a5)

  return kTvmErrorNoError;
20402e44:	00000793          	li	a5,0
}
20402e48:	00078513          	mv	a0,a5
20402e4c:	02c12083          	lw	ra,44(sp)
20402e50:	02812403          	lw	s0,40(sp)
20402e54:	03010113          	addi	sp,sp,48
20402e58:	00008067          	ret

20402e5c <TVMNDArray_Create>:
#include <tvm/runtime/crt/platform.h>

#include "crt_config.h"

int TVMNDArray_Create(int32_t ndim, const tvm_index_t* shape, DLDataType dtype, DLDevice dev,
                      TVMNDArray* array) {
20402e5c:	fc010113          	addi	sp,sp,-64
20402e60:	02112e23          	sw	ra,60(sp)
20402e64:	02812c23          	sw	s0,56(sp)
20402e68:	04010413          	addi	s0,sp,64
20402e6c:	fca42e23          	sw	a0,-36(s0)
20402e70:	fcb42c23          	sw	a1,-40(s0)
20402e74:	fcc42a23          	sw	a2,-44(s0)
20402e78:	fcd42623          	sw	a3,-52(s0)
20402e7c:	fce42823          	sw	a4,-48(s0)
20402e80:	fcf42423          	sw	a5,-56(s0)
  memset(array, 0, sizeof(TVMNDArray));
20402e84:	02800613          	li	a2,40
20402e88:	00000593          	li	a1,0
20402e8c:	fc842503          	lw	a0,-56(s0)
20402e90:	702100ef          	jal	ra,20413592 <memset>
  array->dl_tensor.ndim = ndim;
20402e94:	fc842783          	lw	a5,-56(s0)
20402e98:	fdc42703          	lw	a4,-36(s0)
20402e9c:	00e7a623          	sw	a4,12(a5)
  tvm_crt_error_t err;
  DLDevice dldev = {kDLCPU, 0};
20402ea0:	00100793          	li	a5,1
20402ea4:	fef42223          	sw	a5,-28(s0)
20402ea8:	fe042423          	sw	zero,-24(s0)
  err = TVMPlatformMemoryAllocate(sizeof(int64_t) * ndim, dldev, (void*)&array->dl_tensor.shape);
20402eac:	fdc42783          	lw	a5,-36(s0)
20402eb0:	00379713          	slli	a4,a5,0x3
20402eb4:	fc842783          	lw	a5,-56(s0)
20402eb8:	01478793          	addi	a5,a5,20
20402ebc:	00078693          	mv	a3,a5
20402ec0:	fe442583          	lw	a1,-28(s0)
20402ec4:	fe842603          	lw	a2,-24(s0)
20402ec8:	00070513          	mv	a0,a4
20402ecc:	e55fd0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20402ed0:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20402ed4:	fec42783          	lw	a5,-20(s0)
20402ed8:	00078663          	beqz	a5,20402ee4 <TVMNDArray_Create+0x88>
    return -1;
20402edc:	fff00793          	li	a5,-1
20402ee0:	0500006f          	j	20402f30 <TVMNDArray_Create+0xd4>
  }
  memcpy(array->dl_tensor.shape, shape, sizeof(int64_t) * ndim);
20402ee4:	fc842783          	lw	a5,-56(s0)
20402ee8:	0147a703          	lw	a4,20(a5)
20402eec:	fdc42783          	lw	a5,-36(s0)
20402ef0:	00379793          	slli	a5,a5,0x3
20402ef4:	00078613          	mv	a2,a5
20402ef8:	fd842583          	lw	a1,-40(s0)
20402efc:	00070513          	mv	a0,a4
20402f00:	5d4100ef          	jal	ra,204134d4 <memcpy>
  array->dl_tensor.dtype = dtype;
20402f04:	fc842783          	lw	a5,-56(s0)
20402f08:	fd442703          	lw	a4,-44(s0)
20402f0c:	00e7a823          	sw	a4,16(a5)
  array->dl_tensor.device = dev;
20402f10:	fc842703          	lw	a4,-56(s0)
20402f14:	fcc42783          	lw	a5,-52(s0)
20402f18:	fd042803          	lw	a6,-48(s0)
20402f1c:	00f72223          	sw	a5,4(a4)
20402f20:	01072423          	sw	a6,8(a4)
  array->dl_tensor.data = 0;
20402f24:	fc842783          	lw	a5,-56(s0)
20402f28:	0007a023          	sw	zero,0(a5)
  return 0;
20402f2c:	00000793          	li	a5,0
}
20402f30:	00078513          	mv	a0,a5
20402f34:	03c12083          	lw	ra,60(sp)
20402f38:	03812403          	lw	s0,56(sp)
20402f3c:	04010113          	addi	sp,sp,64
20402f40:	00008067          	ret

20402f44 <TVMNDArray_DataSizeBytes>:

int64_t TVMNDArray_DataSizeBytes(TVMNDArray* array) {
20402f44:	fb010113          	addi	sp,sp,-80
20402f48:	04112623          	sw	ra,76(sp)
20402f4c:	04812423          	sw	s0,72(sp)
20402f50:	05212223          	sw	s2,68(sp)
20402f54:	05312023          	sw	s3,64(sp)
20402f58:	03412e23          	sw	s4,60(sp)
20402f5c:	03512c23          	sw	s5,56(sp)
20402f60:	03612a23          	sw	s6,52(sp)
20402f64:	03712823          	sw	s7,48(sp)
20402f68:	03812623          	sw	s8,44(sp)
20402f6c:	03912423          	sw	s9,40(sp)
20402f70:	05010413          	addi	s0,sp,80
20402f74:	faa42e23          	sw	a0,-68(s0)
  int64_t num_elems = 1;
20402f78:	00100793          	li	a5,1
20402f7c:	00000813          	li	a6,0
20402f80:	fcf42423          	sw	a5,-56(s0)
20402f84:	fd042623          	sw	a6,-52(s0)
  int32_t idx;
  for (idx = 0; idx < array->dl_tensor.ndim; ++idx) {
20402f88:	fc042223          	sw	zero,-60(s0)
20402f8c:	0500006f          	j	20402fdc <TVMNDArray_DataSizeBytes+0x98>
    num_elems *= array->dl_tensor.shape[idx];
20402f90:	fbc42783          	lw	a5,-68(s0)
20402f94:	0147a703          	lw	a4,20(a5)
20402f98:	fc442783          	lw	a5,-60(s0)
20402f9c:	00379793          	slli	a5,a5,0x3
20402fa0:	00f707b3          	add	a5,a4,a5
20402fa4:	0047a803          	lw	a6,4(a5)
20402fa8:	0007a783          	lw	a5,0(a5)
20402fac:	00078613          	mv	a2,a5
20402fb0:	00080693          	mv	a3,a6
20402fb4:	fc842503          	lw	a0,-56(s0)
20402fb8:	fcc42583          	lw	a1,-52(s0)
20402fbc:	48d1c0ef          	jal	ra,2041fc48 <__muldi3>
20402fc0:	00050793          	mv	a5,a0
20402fc4:	00058813          	mv	a6,a1
20402fc8:	fcf42423          	sw	a5,-56(s0)
20402fcc:	fd042623          	sw	a6,-52(s0)
  for (idx = 0; idx < array->dl_tensor.ndim; ++idx) {
20402fd0:	fc442783          	lw	a5,-60(s0)
20402fd4:	00178793          	addi	a5,a5,1
20402fd8:	fcf42223          	sw	a5,-60(s0)
20402fdc:	fbc42783          	lw	a5,-68(s0)
20402fe0:	00c7a783          	lw	a5,12(a5)
20402fe4:	fc442703          	lw	a4,-60(s0)
20402fe8:	faf744e3          	blt	a4,a5,20402f90 <TVMNDArray_DataSizeBytes+0x4c>
  }
  return (num_elems * array->dl_tensor.dtype.bits + 7) / 8;
20402fec:	fbc42783          	lw	a5,-68(s0)
20402ff0:	0117c783          	lbu	a5,17(a5)
20402ff4:	00078c13          	mv	s8,a5
20402ff8:	00000c93          	li	s9,0
20402ffc:	fc842603          	lw	a2,-56(s0)
20403000:	fcc42683          	lw	a3,-52(s0)
20403004:	000c0513          	mv	a0,s8
20403008:	000c8593          	mv	a1,s9
2040300c:	43d1c0ef          	jal	ra,2041fc48 <__muldi3>
20403010:	00050793          	mv	a5,a0
20403014:	00058813          	mv	a6,a1
20403018:	00078693          	mv	a3,a5
2040301c:	00080713          	mv	a4,a6
20403020:	00700593          	li	a1,7
20403024:	00000613          	li	a2,0
20403028:	00b687b3          	add	a5,a3,a1
2040302c:	00078513          	mv	a0,a5
20403030:	00d53533          	sltu	a0,a0,a3
20403034:	00c70833          	add	a6,a4,a2
20403038:	01050733          	add	a4,a0,a6
2040303c:	00070813          	mv	a6,a4
20403040:	00078693          	mv	a3,a5
20403044:	00080713          	mv	a4,a6
20403048:	41f75793          	srai	a5,a4,0x1f
2040304c:	00078b13          	mv	s6,a5
20403050:	41f7d793          	srai	a5,a5,0x1f
20403054:	00078b93          	mv	s7,a5
20403058:	007b7913          	andi	s2,s6,7
2040305c:	000bf993          	andi	s3,s7,0
20403060:	00d907b3          	add	a5,s2,a3
20403064:	00078613          	mv	a2,a5
20403068:	01263633          	sltu	a2,a2,s2
2040306c:	00e98833          	add	a6,s3,a4
20403070:	01060733          	add	a4,a2,a6
20403074:	00070813          	mv	a6,a4
20403078:	01d81713          	slli	a4,a6,0x1d
2040307c:	0037da13          	srli	s4,a5,0x3
20403080:	01476a33          	or	s4,a4,s4
20403084:	40385a93          	srai	s5,a6,0x3
20403088:	000a0793          	mv	a5,s4
2040308c:	000a8813          	mv	a6,s5
}
20403090:	00078513          	mv	a0,a5
20403094:	00080593          	mv	a1,a6
20403098:	04c12083          	lw	ra,76(sp)
2040309c:	04812403          	lw	s0,72(sp)
204030a0:	04412903          	lw	s2,68(sp)
204030a4:	04012983          	lw	s3,64(sp)
204030a8:	03c12a03          	lw	s4,60(sp)
204030ac:	03812a83          	lw	s5,56(sp)
204030b0:	03412b03          	lw	s6,52(sp)
204030b4:	03012b83          	lw	s7,48(sp)
204030b8:	02c12c03          	lw	s8,44(sp)
204030bc:	02812c83          	lw	s9,40(sp)
204030c0:	05010113          	addi	sp,sp,80
204030c4:	00008067          	ret

204030c8 <TVMNDArray_Empty>:

int TVMNDArray_Empty(int32_t ndim, const tvm_index_t* shape, DLDataType dtype, DLDevice dev,
                     TVMNDArray* array) {
204030c8:	fc010113          	addi	sp,sp,-64
204030cc:	02112e23          	sw	ra,60(sp)
204030d0:	02812c23          	sw	s0,56(sp)
204030d4:	03212a23          	sw	s2,52(sp)
204030d8:	03312823          	sw	s3,48(sp)
204030dc:	04010413          	addi	s0,sp,64
204030e0:	fca42e23          	sw	a0,-36(s0)
204030e4:	fcb42c23          	sw	a1,-40(s0)
204030e8:	fcc42a23          	sw	a2,-44(s0)
204030ec:	fcd42623          	sw	a3,-52(s0)
204030f0:	fce42823          	sw	a4,-48(s0)
204030f4:	fcf42423          	sw	a5,-56(s0)
  int status = TVMNDArray_Create(ndim, shape, dtype, dev, array);
204030f8:	fc842783          	lw	a5,-56(s0)
204030fc:	fcc42683          	lw	a3,-52(s0)
20403100:	fd042703          	lw	a4,-48(s0)
20403104:	fd442603          	lw	a2,-44(s0)
20403108:	fd842583          	lw	a1,-40(s0)
2040310c:	fdc42503          	lw	a0,-36(s0)
20403110:	d4dff0ef          	jal	ra,20402e5c <TVMNDArray_Create>
20403114:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20403118:	fec42783          	lw	a5,-20(s0)
2040311c:	00078663          	beqz	a5,20403128 <TVMNDArray_Empty+0x60>
    return status;
20403120:	fec42783          	lw	a5,-20(s0)
20403124:	0740006f          	j	20403198 <TVMNDArray_Empty+0xd0>
  }
  int total_elem_bytes = TVMNDArray_DataSizeBytes(array);
20403128:	fc842503          	lw	a0,-56(s0)
2040312c:	e19ff0ef          	jal	ra,20402f44 <TVMNDArray_DataSizeBytes>
20403130:	00050793          	mv	a5,a0
20403134:	00058813          	mv	a6,a1
20403138:	fef42423          	sw	a5,-24(s0)
  array->dl_tensor.data =
      TVMBackendAllocWorkspace(kDLCPU, 0, total_elem_bytes, dtype.code, dtype.bits);
2040313c:	fe842783          	lw	a5,-24(s0)
20403140:	00078913          	mv	s2,a5
20403144:	41f7d793          	srai	a5,a5,0x1f
20403148:	00078993          	mv	s3,a5
2040314c:	fd444783          	lbu	a5,-44(s0)
20403150:	00078713          	mv	a4,a5
20403154:	fd544783          	lbu	a5,-43(s0)
20403158:	00090613          	mv	a2,s2
2040315c:	00098693          	mv	a3,s3
20403160:	00000593          	li	a1,0
20403164:	00100513          	li	a0,1
20403168:	d99fd0ef          	jal	ra,20400f00 <TVMBackendAllocWorkspace>
2040316c:	00050713          	mv	a4,a0
  array->dl_tensor.data =
20403170:	fc842783          	lw	a5,-56(s0)
20403174:	00e7a023          	sw	a4,0(a5)
  memset(array->dl_tensor.data, 0, total_elem_bytes);
20403178:	fc842783          	lw	a5,-56(s0)
2040317c:	0007a783          	lw	a5,0(a5)
20403180:	fe842703          	lw	a4,-24(s0)
20403184:	00070613          	mv	a2,a4
20403188:	00000593          	li	a1,0
2040318c:	00078513          	mv	a0,a5
20403190:	402100ef          	jal	ra,20413592 <memset>
  return 0;
20403194:	00000793          	li	a5,0
}
20403198:	00078513          	mv	a0,a5
2040319c:	03c12083          	lw	ra,60(sp)
204031a0:	03812403          	lw	s0,56(sp)
204031a4:	03412903          	lw	s2,52(sp)
204031a8:	03012983          	lw	s3,48(sp)
204031ac:	04010113          	addi	sp,sp,64
204031b0:	00008067          	ret

204031b4 <TVMNDArray_Load>:

int TVMNDArray_Load(TVMNDArray* ret, const char** strm) {
204031b4:	f6010113          	addi	sp,sp,-160
204031b8:	08112e23          	sw	ra,156(sp)
204031bc:	08812c23          	sw	s0,152(sp)
204031c0:	08912a23          	sw	s1,148(sp)
204031c4:	09212823          	sw	s2,144(sp)
204031c8:	09312623          	sw	s3,140(sp)
204031cc:	0a010413          	addi	s0,sp,160
204031d0:	f6a42623          	sw	a0,-148(s0)
204031d4:	f6b42423          	sw	a1,-152(s0)
  int32_t status = 0;
204031d8:	fc042e23          	sw	zero,-36(s0)
  uint64_t header, reserved;
  memcpy(&header, *strm, sizeof(header));
204031dc:	f6842783          	lw	a5,-152(s0)
204031e0:	0007a783          	lw	a5,0(a5)
204031e4:	0047a803          	lw	a6,4(a5)
204031e8:	0007a783          	lw	a5,0(a5)
204031ec:	fcf42023          	sw	a5,-64(s0)
204031f0:	fd042223          	sw	a6,-60(s0)
  *strm += sizeof(header);
204031f4:	f6842783          	lw	a5,-152(s0)
204031f8:	0007a783          	lw	a5,0(a5)
204031fc:	00878713          	addi	a4,a5,8
20403200:	f6842783          	lw	a5,-152(s0)
20403204:	00e7a023          	sw	a4,0(a5)
  if (header != kTVMNDArrayMagic) {
20403208:	fc042683          	lw	a3,-64(s0)
2040320c:	fc442703          	lw	a4,-60(s0)
20403210:	0001d797          	auipc	a5,0x1d
20403214:	0c878793          	addi	a5,a5,200 # 204202d8 <__func__.3846+0xf8>
20403218:	0047a803          	lw	a6,4(a5)
2040321c:	0007a783          	lw	a5,0(a5)
20403220:	00068593          	mv	a1,a3
20403224:	00078613          	mv	a2,a5
20403228:	00c59663          	bne	a1,a2,20403234 <TVMNDArray_Load+0x80>
2040322c:	00080793          	mv	a5,a6
20403230:	02f70a63          	beq	a4,a5,20403264 <TVMNDArray_Load+0xb0>
    fprintf(stderr, "Invalid DLTensor file format\n");
20403234:	5fbfe797          	auipc	a5,0x5fbfe
20403238:	80478793          	addi	a5,a5,-2044 # 80000a38 <_impure_ptr>
2040323c:	0007a783          	lw	a5,0(a5)
20403240:	00c7a783          	lw	a5,12(a5)
20403244:	00078693          	mv	a3,a5
20403248:	01d00613          	li	a2,29
2040324c:	00100593          	li	a1,1
20403250:	0001d517          	auipc	a0,0x1d
20403254:	fb050513          	addi	a0,a0,-80 # 20420200 <__func__.3846+0x20>
20403258:	130100ef          	jal	ra,20413388 <fwrite>
    status = -1;
2040325c:	fff00793          	li	a5,-1
20403260:	fcf42e23          	sw	a5,-36(s0)
  }
  memcpy(&reserved, *strm, sizeof(reserved));
20403264:	f6842783          	lw	a5,-152(s0)
20403268:	0007a783          	lw	a5,0(a5)
2040326c:	0047a803          	lw	a6,4(a5)
20403270:	0007a783          	lw	a5,0(a5)
20403274:	faf42c23          	sw	a5,-72(s0)
20403278:	fb042e23          	sw	a6,-68(s0)
  *strm += sizeof(reserved);
2040327c:	f6842783          	lw	a5,-152(s0)
20403280:	0007a783          	lw	a5,0(a5)
20403284:	00878713          	addi	a4,a5,8
20403288:	f6842783          	lw	a5,-152(s0)
2040328c:	00e7a023          	sw	a4,0(a5)
  DLDevice dev;
  int ndim;  // sizeof ndim should match dlpack
  DLDataType dtype;
  memcpy(&dev, *strm, sizeof(dev));
20403290:	f6842783          	lw	a5,-152(s0)
20403294:	0007a783          	lw	a5,0(a5)
20403298:	0047a803          	lw	a6,4(a5)
2040329c:	0007a783          	lw	a5,0(a5)
204032a0:	faf42823          	sw	a5,-80(s0)
204032a4:	fb042a23          	sw	a6,-76(s0)
  *strm += sizeof(dev);
204032a8:	f6842783          	lw	a5,-152(s0)
204032ac:	0007a783          	lw	a5,0(a5)
204032b0:	00878713          	addi	a4,a5,8
204032b4:	f6842783          	lw	a5,-152(s0)
204032b8:	00e7a023          	sw	a4,0(a5)
  memcpy(&ndim, *strm, sizeof(ndim));
204032bc:	f6842783          	lw	a5,-152(s0)
204032c0:	0007a783          	lw	a5,0(a5)
204032c4:	0007a783          	lw	a5,0(a5)
204032c8:	faf42623          	sw	a5,-84(s0)
  *strm += sizeof(ndim);
204032cc:	f6842783          	lw	a5,-152(s0)
204032d0:	0007a783          	lw	a5,0(a5)
204032d4:	00478713          	addi	a4,a5,4
204032d8:	f6842783          	lw	a5,-152(s0)
204032dc:	00e7a023          	sw	a4,0(a5)
  memcpy(&dtype, *strm, sizeof(dtype));
204032e0:	f6842783          	lw	a5,-152(s0)
204032e4:	0007a783          	lw	a5,0(a5)
204032e8:	0007a783          	lw	a5,0(a5)
204032ec:	faf42423          	sw	a5,-88(s0)
  *strm += sizeof(dtype);
204032f0:	f6842783          	lw	a5,-152(s0)
204032f4:	0007a783          	lw	a5,0(a5)
204032f8:	00478713          	addi	a4,a5,4
204032fc:	f6842783          	lw	a5,-152(s0)
20403300:	00e7a023          	sw	a4,0(a5)
  if ((ndim < 0) || (ndim > TVM_CRT_MAX_NDIM)) {
20403304:	fac42783          	lw	a5,-84(s0)
20403308:	0007c863          	bltz	a5,20403318 <TVMNDArray_Load+0x164>
2040330c:	fac42703          	lw	a4,-84(s0)
20403310:	00600793          	li	a5,6
20403314:	02e7dc63          	ble	a4,a5,2040334c <TVMNDArray_Load+0x198>
    fprintf(stderr, "Invalid ndim=%d: expected to be 0 ~ %d.\n", ndim, TVM_CRT_MAX_NDIM);
20403318:	5fbfd797          	auipc	a5,0x5fbfd
2040331c:	72078793          	addi	a5,a5,1824 # 80000a38 <_impure_ptr>
20403320:	0007a783          	lw	a5,0(a5)
20403324:	00c7a783          	lw	a5,12(a5)
20403328:	fac42703          	lw	a4,-84(s0)
2040332c:	00600693          	li	a3,6
20403330:	00070613          	mv	a2,a4
20403334:	0001d597          	auipc	a1,0x1d
20403338:	eec58593          	addi	a1,a1,-276 # 20420220 <__func__.3846+0x40>
2040333c:	00078513          	mv	a0,a5
20403340:	7af0f0ef          	jal	ra,204132ee <fprintf>
    status = -1;
20403344:	fff00793          	li	a5,-1
20403348:	fcf42e23          	sw	a5,-36(s0)
  }
  if (dev.device_type != kDLCPU) {
2040334c:	fb042703          	lw	a4,-80(s0)
20403350:	00100793          	li	a5,1
20403354:	02f70a63          	beq	a4,a5,20403388 <TVMNDArray_Load+0x1d4>
    fprintf(stderr, "Invalid DLTensor device: can only save as CPU tensor\n");
20403358:	5fbfd797          	auipc	a5,0x5fbfd
2040335c:	6e078793          	addi	a5,a5,1760 # 80000a38 <_impure_ptr>
20403360:	0007a783          	lw	a5,0(a5)
20403364:	00c7a783          	lw	a5,12(a5)
20403368:	00078693          	mv	a3,a5
2040336c:	03500613          	li	a2,53
20403370:	00100593          	li	a1,1
20403374:	0001d517          	auipc	a0,0x1d
20403378:	ed850513          	addi	a0,a0,-296 # 2042024c <__func__.3846+0x6c>
2040337c:	00c100ef          	jal	ra,20413388 <fwrite>
    status = -1;
20403380:	fff00793          	li	a5,-1
20403384:	fcf42e23          	sw	a5,-36(s0)
  }
  int64_t shape[TVM_CRT_MAX_NDIM] = {0};
20403388:	f6042c23          	sw	zero,-136(s0)
2040338c:	f6042e23          	sw	zero,-132(s0)
20403390:	f8042023          	sw	zero,-128(s0)
20403394:	f8042223          	sw	zero,-124(s0)
20403398:	f8042423          	sw	zero,-120(s0)
2040339c:	f8042623          	sw	zero,-116(s0)
204033a0:	f8042823          	sw	zero,-112(s0)
204033a4:	f8042a23          	sw	zero,-108(s0)
204033a8:	f8042c23          	sw	zero,-104(s0)
204033ac:	f8042e23          	sw	zero,-100(s0)
204033b0:	fa042023          	sw	zero,-96(s0)
204033b4:	fa042223          	sw	zero,-92(s0)
  int32_t idx;
  if (ndim != 0) {
204033b8:	fac42783          	lw	a5,-84(s0)
204033bc:	06078063          	beqz	a5,2040341c <TVMNDArray_Load+0x268>
    for (idx = 0; idx < ndim; idx++) {
204033c0:	fc042c23          	sw	zero,-40(s0)
204033c4:	04c0006f          	j	20403410 <TVMNDArray_Load+0x25c>
      memcpy(&shape[idx], *strm, sizeof(int64_t));
204033c8:	f7840713          	addi	a4,s0,-136
204033cc:	fd842783          	lw	a5,-40(s0)
204033d0:	00379793          	slli	a5,a5,0x3
204033d4:	00f70733          	add	a4,a4,a5
204033d8:	f6842783          	lw	a5,-152(s0)
204033dc:	0007a783          	lw	a5,0(a5)
204033e0:	00800613          	li	a2,8
204033e4:	00078593          	mv	a1,a5
204033e8:	00070513          	mv	a0,a4
204033ec:	0e8100ef          	jal	ra,204134d4 <memcpy>
      *strm += sizeof(shape[idx]);
204033f0:	f6842783          	lw	a5,-152(s0)
204033f4:	0007a783          	lw	a5,0(a5)
204033f8:	00878713          	addi	a4,a5,8
204033fc:	f6842783          	lw	a5,-152(s0)
20403400:	00e7a023          	sw	a4,0(a5)
    for (idx = 0; idx < ndim; idx++) {
20403404:	fd842783          	lw	a5,-40(s0)
20403408:	00178793          	addi	a5,a5,1
2040340c:	fcf42c23          	sw	a5,-40(s0)
20403410:	fac42783          	lw	a5,-84(s0)
20403414:	fd842703          	lw	a4,-40(s0)
20403418:	faf748e3          	blt	a4,a5,204033c8 <TVMNDArray_Load+0x214>
    }
  }
  status = TVMNDArray_Empty(ndim, shape, dtype, dev, ret);
2040341c:	fac42503          	lw	a0,-84(s0)
20403420:	f7840593          	addi	a1,s0,-136
20403424:	f6c42783          	lw	a5,-148(s0)
20403428:	fb042683          	lw	a3,-80(s0)
2040342c:	fb442703          	lw	a4,-76(s0)
20403430:	fa842603          	lw	a2,-88(s0)
20403434:	c95ff0ef          	jal	ra,204030c8 <TVMNDArray_Empty>
20403438:	fca42e23          	sw	a0,-36(s0)
  if (status != 0) {
2040343c:	fdc42783          	lw	a5,-36(s0)
20403440:	00078663          	beqz	a5,2040344c <TVMNDArray_Load+0x298>
    return status;
20403444:	fdc42783          	lw	a5,-36(s0)
20403448:	1b00006f          	j	204035f8 <TVMNDArray_Load+0x444>
  }
  int64_t num_elems = 1;
2040344c:	00100793          	li	a5,1
20403450:	00000813          	li	a6,0
20403454:	fcf42823          	sw	a5,-48(s0)
20403458:	fd042a23          	sw	a6,-44(s0)
  int elem_bytes = (ret->dl_tensor.dtype.bits + 7) / 8;
2040345c:	f6c42783          	lw	a5,-148(s0)
20403460:	0117c783          	lbu	a5,17(a5)
20403464:	00778793          	addi	a5,a5,7
20403468:	41f7d713          	srai	a4,a5,0x1f
2040346c:	00777713          	andi	a4,a4,7
20403470:	00f707b3          	add	a5,a4,a5
20403474:	4037d793          	srai	a5,a5,0x3
20403478:	fcf42623          	sw	a5,-52(s0)
  for (idx = 0; idx < ret->dl_tensor.ndim; ++idx) {
2040347c:	fc042c23          	sw	zero,-40(s0)
20403480:	0500006f          	j	204034d0 <TVMNDArray_Load+0x31c>
    num_elems *= ret->dl_tensor.shape[idx];
20403484:	f6c42783          	lw	a5,-148(s0)
20403488:	0147a703          	lw	a4,20(a5)
2040348c:	fd842783          	lw	a5,-40(s0)
20403490:	00379793          	slli	a5,a5,0x3
20403494:	00f707b3          	add	a5,a4,a5
20403498:	0047a803          	lw	a6,4(a5)
2040349c:	0007a783          	lw	a5,0(a5)
204034a0:	00078613          	mv	a2,a5
204034a4:	00080693          	mv	a3,a6
204034a8:	fd042503          	lw	a0,-48(s0)
204034ac:	fd442583          	lw	a1,-44(s0)
204034b0:	7981c0ef          	jal	ra,2041fc48 <__muldi3>
204034b4:	00050793          	mv	a5,a0
204034b8:	00058813          	mv	a6,a1
204034bc:	fcf42823          	sw	a5,-48(s0)
204034c0:	fd042a23          	sw	a6,-44(s0)
  for (idx = 0; idx < ret->dl_tensor.ndim; ++idx) {
204034c4:	fd842783          	lw	a5,-40(s0)
204034c8:	00178793          	addi	a5,a5,1
204034cc:	fcf42c23          	sw	a5,-40(s0)
204034d0:	f6c42783          	lw	a5,-148(s0)
204034d4:	00c7a783          	lw	a5,12(a5)
204034d8:	fd842703          	lw	a4,-40(s0)
204034dc:	faf744e3          	blt	a4,a5,20403484 <TVMNDArray_Load+0x2d0>
  }
  int64_t data_byte_size;
  memcpy(&data_byte_size, *strm, sizeof(data_byte_size));
204034e0:	f6842783          	lw	a5,-152(s0)
204034e4:	0007a783          	lw	a5,0(a5)
204034e8:	0047a803          	lw	a6,4(a5)
204034ec:	0007a783          	lw	a5,0(a5)
204034f0:	f6f42823          	sw	a5,-144(s0)
204034f4:	f7042a23          	sw	a6,-140(s0)
  *strm += sizeof(data_byte_size);
204034f8:	f6842783          	lw	a5,-152(s0)
204034fc:	0007a783          	lw	a5,0(a5)
20403500:	00878713          	addi	a4,a5,8
20403504:	f6842783          	lw	a5,-152(s0)
20403508:	00e7a023          	sw	a4,0(a5)
  if (!(data_byte_size == num_elems * elem_bytes)) {
2040350c:	fcc42783          	lw	a5,-52(s0)
20403510:	00078913          	mv	s2,a5
20403514:	41f7d793          	srai	a5,a5,0x1f
20403518:	00078993          	mv	s3,a5
2040351c:	fd042603          	lw	a2,-48(s0)
20403520:	fd442683          	lw	a3,-44(s0)
20403524:	00090513          	mv	a0,s2
20403528:	00098593          	mv	a1,s3
2040352c:	71c1c0ef          	jal	ra,2041fc48 <__muldi3>
20403530:	00050793          	mv	a5,a0
20403534:	00058813          	mv	a6,a1
20403538:	00078693          	mv	a3,a5
2040353c:	00080713          	mv	a4,a6
20403540:	f7042783          	lw	a5,-144(s0)
20403544:	f7442803          	lw	a6,-140(s0)
20403548:	00068593          	mv	a1,a3
2040354c:	00078613          	mv	a2,a5
20403550:	00c59663          	bne	a1,a2,2040355c <TVMNDArray_Load+0x3a8>
20403554:	00080793          	mv	a5,a6
20403558:	04f70c63          	beq	a4,a5,204035b0 <TVMNDArray_Load+0x3fc>
    fprintf(stderr,
2040355c:	5fbfd797          	auipc	a5,0x5fbfd
20403560:	4dc78793          	addi	a5,a5,1244 # 80000a38 <_impure_ptr>
20403564:	0007a783          	lw	a5,0(a5)
20403568:	00c7a483          	lw	s1,12(a5)
2040356c:	f7042783          	lw	a5,-144(s0)
20403570:	f7442803          	lw	a6,-140(s0)
20403574:	00078913          	mv	s2,a5
20403578:	fd042783          	lw	a5,-48(s0)
2040357c:	fcc42703          	lw	a4,-52(s0)
20403580:	00070593          	mv	a1,a4
20403584:	00078513          	mv	a0,a5
20403588:	6a81c0ef          	jal	ra,2041fc30 <__mulsi3>
2040358c:	00050793          	mv	a5,a0
20403590:	00078693          	mv	a3,a5
20403594:	00090613          	mv	a2,s2
20403598:	0001d597          	auipc	a1,0x1d
2040359c:	cec58593          	addi	a1,a1,-788 # 20420284 <__func__.3846+0xa4>
204035a0:	00048513          	mv	a0,s1
204035a4:	54b0f0ef          	jal	ra,204132ee <fprintf>
            "invalid DLTensor file format: data_byte_size=%d, "
            "while num_elems*elem_bytes=%d\n",
            (int)data_byte_size, (int)(num_elems * elem_bytes));  // NOLINT(*)
    status = -1;
204035a8:	fff00793          	li	a5,-1
204035ac:	fcf42e23          	sw	a5,-36(s0)
  }
  memcpy(ret->dl_tensor.data, *strm, data_byte_size);
204035b0:	f6c42783          	lw	a5,-148(s0)
204035b4:	0007a703          	lw	a4,0(a5)
204035b8:	f6842783          	lw	a5,-152(s0)
204035bc:	0007a683          	lw	a3,0(a5)
204035c0:	f7042783          	lw	a5,-144(s0)
204035c4:	f7442803          	lw	a6,-140(s0)
204035c8:	00078613          	mv	a2,a5
204035cc:	00068593          	mv	a1,a3
204035d0:	00070513          	mv	a0,a4
204035d4:	7010f0ef          	jal	ra,204134d4 <memcpy>
  *strm += data_byte_size;
204035d8:	f6842783          	lw	a5,-152(s0)
204035dc:	0007a703          	lw	a4,0(a5)
204035e0:	f7042783          	lw	a5,-144(s0)
204035e4:	f7442803          	lw	a6,-140(s0)
204035e8:	00f70733          	add	a4,a4,a5
204035ec:	f6842783          	lw	a5,-152(s0)
204035f0:	00e7a023          	sw	a4,0(a5)

  return status;
204035f4:	fdc42783          	lw	a5,-36(s0)
}
204035f8:	00078513          	mv	a0,a5
204035fc:	09c12083          	lw	ra,156(sp)
20403600:	09812403          	lw	s0,152(sp)
20403604:	09412483          	lw	s1,148(sp)
20403608:	09012903          	lw	s2,144(sp)
2040360c:	08c12983          	lw	s3,140(sp)
20403610:	0a010113          	addi	sp,sp,160
20403614:	00008067          	ret

20403618 <TVMNDArray_CreateView>:

int TVMNDArray_CreateView(TVMNDArray* arr, const tvm_index_t* shape, int32_t ndim, DLDataType dtype,
                          TVMNDArray* array_view) {
20403618:	fc010113          	addi	sp,sp,-64
2040361c:	02112e23          	sw	ra,60(sp)
20403620:	02812c23          	sw	s0,56(sp)
20403624:	04010413          	addi	s0,sp,64
20403628:	fca42e23          	sw	a0,-36(s0)
2040362c:	fcb42c23          	sw	a1,-40(s0)
20403630:	fcc42a23          	sw	a2,-44(s0)
20403634:	fcd42823          	sw	a3,-48(s0)
20403638:	fce42623          	sw	a4,-52(s0)
  int status = TVMNDArray_Create(ndim, shape, dtype, arr->dl_tensor.device, array_view);
2040363c:	fdc42703          	lw	a4,-36(s0)
20403640:	fcc42783          	lw	a5,-52(s0)
20403644:	00472683          	lw	a3,4(a4)
20403648:	00872703          	lw	a4,8(a4)
2040364c:	fd042603          	lw	a2,-48(s0)
20403650:	fd842583          	lw	a1,-40(s0)
20403654:	fd442503          	lw	a0,-44(s0)
20403658:	805ff0ef          	jal	ra,20402e5c <TVMNDArray_Create>
2040365c:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20403660:	fec42783          	lw	a5,-20(s0)
20403664:	00078663          	beqz	a5,20403670 <TVMNDArray_CreateView+0x58>
    return status;
20403668:	fec42783          	lw	a5,-20(s0)
2040366c:	0180006f          	j	20403684 <TVMNDArray_CreateView+0x6c>
  }
  array_view->dl_tensor.data = arr->dl_tensor.data;
20403670:	fdc42783          	lw	a5,-36(s0)
20403674:	0007a703          	lw	a4,0(a5)
20403678:	fcc42783          	lw	a5,-52(s0)
2040367c:	00e7a023          	sw	a4,0(a5)
  return 0;
20403680:	00000793          	li	a5,0
}
20403684:	00078513          	mv	a0,a5
20403688:	03c12083          	lw	ra,60(sp)
2040368c:	03812403          	lw	s0,56(sp)
20403690:	04010113          	addi	sp,sp,64
20403694:	00008067          	ret

20403698 <TVMNDArray_RandomFill>:

int TVMNDArray_RandomFill(TVMNDArray* arr) {
20403698:	fd010113          	addi	sp,sp,-48
2040369c:	02112623          	sw	ra,44(sp)
204036a0:	02812423          	sw	s0,40(sp)
204036a4:	03010413          	addi	s0,sp,48
204036a8:	fca42e23          	sw	a0,-36(s0)
  int64_t num_bytes = TVMNDArray_DataSizeBytes(arr);
204036ac:	fdc42503          	lw	a0,-36(s0)
204036b0:	895ff0ef          	jal	ra,20402f44 <TVMNDArray_DataSizeBytes>
204036b4:	fea42423          	sw	a0,-24(s0)
204036b8:	feb42623          	sw	a1,-20(s0)
  if (num_bytes < 0 || num_bytes > SIZE_MAX) {
204036bc:	fec42783          	lw	a5,-20(s0)
204036c0:	0207c663          	bltz	a5,204036ec <TVMNDArray_RandomFill+0x54>
204036c4:	fec42783          	lw	a5,-20(s0)
204036c8:	02f04263          	bgtz	a5,204036ec <TVMNDArray_RandomFill+0x54>
    return kTvmErrorFunctionCallInvalidArg;
  }

  return TVMPlatformGenerateRandom(arr->dl_tensor.data, (size_t)num_bytes);
204036cc:	fdc42783          	lw	a5,-36(s0)
204036d0:	0007a783          	lw	a5,0(a5)
204036d4:	fe842703          	lw	a4,-24(s0)
204036d8:	00070593          	mv	a1,a4
204036dc:	00078513          	mv	a0,a5
204036e0:	dc8fd0ef          	jal	ra,20400ca8 <TVMPlatformGenerateRandom>
204036e4:	00050793          	mv	a5,a0
204036e8:	00c0006f          	j	204036f4 <TVMNDArray_RandomFill+0x5c>
    return kTvmErrorFunctionCallInvalidArg;
204036ec:	000017b7          	lui	a5,0x1
204036f0:	80378793          	addi	a5,a5,-2045 # 803 <__stack_size-0x37fd>
}
204036f4:	00078513          	mv	a0,a5
204036f8:	02c12083          	lw	ra,44(sp)
204036fc:	02812403          	lw	s0,40(sp)
20403700:	03010113          	addi	sp,sp,48
20403704:	00008067          	ret

20403708 <TVMNDArray_Release>:

int TVMNDArray_Release(TVMNDArray* arr) {
20403708:	fd010113          	addi	sp,sp,-48
2040370c:	02112623          	sw	ra,44(sp)
20403710:	02812423          	sw	s0,40(sp)
20403714:	03010413          	addi	s0,sp,48
20403718:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t err;
  DLDevice dev = {kDLCPU, 0};
2040371c:	00100793          	li	a5,1
20403720:	fef42223          	sw	a5,-28(s0)
20403724:	fe042423          	sw	zero,-24(s0)

  err = TVMPlatformMemoryFree(arr->dl_tensor.data, dev);
20403728:	fdc42783          	lw	a5,-36(s0)
2040372c:	0007a783          	lw	a5,0(a5)
20403730:	fe442583          	lw	a1,-28(s0)
20403734:	fe842603          	lw	a2,-24(s0)
20403738:	00078513          	mv	a0,a5
2040373c:	e48fd0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20403740:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20403744:	fec42783          	lw	a5,-20(s0)
20403748:	00078663          	beqz	a5,20403754 <TVMNDArray_Release+0x4c>
    return err;
2040374c:	fec42783          	lw	a5,-20(s0)
20403750:	0440006f          	j	20403794 <TVMNDArray_Release+0x8c>
  }

  arr->dl_tensor.data = 0;
20403754:	fdc42783          	lw	a5,-36(s0)
20403758:	0007a023          	sw	zero,0(a5)
  err = TVMPlatformMemoryFree(arr->dl_tensor.shape, dev);
2040375c:	fdc42783          	lw	a5,-36(s0)
20403760:	0147a783          	lw	a5,20(a5)
20403764:	fe442583          	lw	a1,-28(s0)
20403768:	fe842603          	lw	a2,-24(s0)
2040376c:	00078513          	mv	a0,a5
20403770:	e14fd0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20403774:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20403778:	fec42783          	lw	a5,-20(s0)
2040377c:	00078663          	beqz	a5,20403788 <TVMNDArray_Release+0x80>
    return err;
20403780:	fec42783          	lw	a5,-20(s0)
20403784:	0100006f          	j	20403794 <TVMNDArray_Release+0x8c>
  }

  arr->dl_tensor.shape = 0;
20403788:	fdc42783          	lw	a5,-36(s0)
2040378c:	0007aa23          	sw	zero,20(a5)
  return 0;
20403790:	00000793          	li	a5,0
}
20403794:	00078513          	mv	a0,a5
20403798:	02c12083          	lw	ra,44(sp)
2040379c:	02812403          	lw	s0,40(sp)
204037a0:	03010113          	addi	sp,sp,48
204037a4:	00008067          	ret

204037a8 <String2DLDataType>:
#include <stdio.h>
#include <string.h>
#include <tvm/runtime/crt/logging.h>
#include <tvm/runtime/crt/packed_func.h>

DLDataType String2DLDataType(const char* s) {
204037a8:	fc010113          	addi	sp,sp,-64
204037ac:	02112e23          	sw	ra,60(sp)
204037b0:	02812c23          	sw	s0,56(sp)
204037b4:	04010413          	addi	s0,sp,64
204037b8:	fca42623          	sw	a0,-52(s0)
  DLDataType t;
  // handle None type
  if (strlen(s) == 0) {
204037bc:	fcc42783          	lw	a5,-52(s0)
204037c0:	0007c783          	lbu	a5,0(a5)
204037c4:	00079e63          	bnez	a5,204037e0 <String2DLDataType+0x38>
    t.bits = 0;
204037c8:	fe0402a3          	sb	zero,-27(s0)
    t.lanes = 0;
204037cc:	fe041323          	sh	zero,-26(s0)
    t.code = kTVMOpaqueHandle;
204037d0:	00300793          	li	a5,3
204037d4:	fef40223          	sb	a5,-28(s0)
    return t;
204037d8:	fe442783          	lw	a5,-28(s0)
204037dc:	2340006f          	j	20403a10 <String2DLDataType+0x268>
  }
  t.bits = 32;
204037e0:	02000793          	li	a5,32
204037e4:	fef402a3          	sb	a5,-27(s0)
  t.lanes = 1;
204037e8:	00100793          	li	a5,1
204037ec:	fef41323          	sh	a5,-26(s0)
  const char* scan;
  if (!strncmp(s, "int", 3)) {
204037f0:	00300613          	li	a2,3
204037f4:	0001d597          	auipc	a1,0x1d
204037f8:	aec58593          	addi	a1,a1,-1300 # 204202e0 <__func__.3846+0x100>
204037fc:	fcc42503          	lw	a0,-52(s0)
20403800:	03e100ef          	jal	ra,2041383e <strncmp>
20403804:	00050793          	mv	a5,a0
20403808:	00079c63          	bnez	a5,20403820 <String2DLDataType+0x78>
    t.code = kDLInt;
2040380c:	fe040223          	sb	zero,-28(s0)
    scan = s + 3;
20403810:	fcc42783          	lw	a5,-52(s0)
20403814:	00378793          	addi	a5,a5,3
20403818:	fef42623          	sw	a5,-20(s0)
2040381c:	1400006f          	j	2040395c <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "uint", 4)) {
20403820:	00400613          	li	a2,4
20403824:	0001d597          	auipc	a1,0x1d
20403828:	ac058593          	addi	a1,a1,-1344 # 204202e4 <__func__.3846+0x104>
2040382c:	fcc42503          	lw	a0,-52(s0)
20403830:	00e100ef          	jal	ra,2041383e <strncmp>
20403834:	00050793          	mv	a5,a0
20403838:	00079e63          	bnez	a5,20403854 <String2DLDataType+0xac>
    t.code = kDLUInt;
2040383c:	00100793          	li	a5,1
20403840:	fef40223          	sb	a5,-28(s0)
    scan = s + 4;
20403844:	fcc42783          	lw	a5,-52(s0)
20403848:	00478793          	addi	a5,a5,4
2040384c:	fef42623          	sw	a5,-20(s0)
20403850:	10c0006f          	j	2040395c <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "float", 5)) {
20403854:	00500613          	li	a2,5
20403858:	0001d597          	auipc	a1,0x1d
2040385c:	a9458593          	addi	a1,a1,-1388 # 204202ec <__func__.3846+0x10c>
20403860:	fcc42503          	lw	a0,-52(s0)
20403864:	7db0f0ef          	jal	ra,2041383e <strncmp>
20403868:	00050793          	mv	a5,a0
2040386c:	00079e63          	bnez	a5,20403888 <String2DLDataType+0xe0>
    t.code = kDLFloat;
20403870:	00200793          	li	a5,2
20403874:	fef40223          	sb	a5,-28(s0)
    scan = s + 5;
20403878:	fcc42783          	lw	a5,-52(s0)
2040387c:	00578793          	addi	a5,a5,5
20403880:	fef42623          	sw	a5,-20(s0)
20403884:	0d80006f          	j	2040395c <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "bfloat", 6)) {
20403888:	00600613          	li	a2,6
2040388c:	0001d597          	auipc	a1,0x1d
20403890:	a6858593          	addi	a1,a1,-1432 # 204202f4 <__func__.3846+0x114>
20403894:	fcc42503          	lw	a0,-52(s0)
20403898:	7a70f0ef          	jal	ra,2041383e <strncmp>
2040389c:	00050793          	mv	a5,a0
204038a0:	00079e63          	bnez	a5,204038bc <String2DLDataType+0x114>
    t.code = kDLBfloat;
204038a4:	00400793          	li	a5,4
204038a8:	fef40223          	sb	a5,-28(s0)
    scan = s + 6;
204038ac:	fcc42783          	lw	a5,-52(s0)
204038b0:	00678793          	addi	a5,a5,6
204038b4:	fef42623          	sw	a5,-20(s0)
204038b8:	0a40006f          	j	2040395c <String2DLDataType+0x1b4>
  } else if (!strncmp(s, "handle", 6)) {
204038bc:	00600613          	li	a2,6
204038c0:	0001d597          	auipc	a1,0x1d
204038c4:	a3c58593          	addi	a1,a1,-1476 # 204202fc <__func__.3846+0x11c>
204038c8:	fcc42503          	lw	a0,-52(s0)
204038cc:	7730f0ef          	jal	ra,2041383e <strncmp>
204038d0:	00050793          	mv	a5,a0
204038d4:	02079263          	bnez	a5,204038f8 <String2DLDataType+0x150>
    t.code = kTVMOpaqueHandle;
204038d8:	00300793          	li	a5,3
204038dc:	fef40223          	sb	a5,-28(s0)
    t.bits = 64;  // handle uses 64 bit by default.
204038e0:	04000793          	li	a5,64
204038e4:	fef402a3          	sb	a5,-27(s0)
    scan = s + 6;
204038e8:	fcc42783          	lw	a5,-52(s0)
204038ec:	00678793          	addi	a5,a5,6
204038f0:	fef42623          	sw	a5,-20(s0)
204038f4:	0680006f          	j	2040395c <String2DLDataType+0x1b4>
  } else if (!strcmp(s, "bool")) {
204038f8:	0001d597          	auipc	a1,0x1d
204038fc:	a0c58593          	addi	a1,a1,-1524 # 20420304 <__func__.3846+0x124>
20403900:	fcc42503          	lw	a0,-52(s0)
20403904:	60b0f0ef          	jal	ra,2041370e <strcmp>
20403908:	00050793          	mv	a5,a0
2040390c:	02079263          	bnez	a5,20403930 <String2DLDataType+0x188>
    t.code = kDLUInt;
20403910:	00100793          	li	a5,1
20403914:	fef40223          	sb	a5,-28(s0)
    t.bits = 1;
20403918:	00100793          	li	a5,1
2040391c:	fef402a3          	sb	a5,-27(s0)
    t.lanes = 1;
20403920:	00100793          	li	a5,1
20403924:	fef41323          	sh	a5,-26(s0)
    return t;
20403928:	fe442783          	lw	a5,-28(s0)
2040392c:	0e40006f          	j	20403a10 <String2DLDataType+0x268>
  } else {
    scan = s;
20403930:	fcc42783          	lw	a5,-52(s0)
20403934:	fef42623          	sw	a5,-20(s0)
    fprintf(stderr, "unknown type %s\n", s);
20403938:	5fbfd797          	auipc	a5,0x5fbfd
2040393c:	10078793          	addi	a5,a5,256 # 80000a38 <_impure_ptr>
20403940:	0007a783          	lw	a5,0(a5)
20403944:	00c7a783          	lw	a5,12(a5)
20403948:	fcc42603          	lw	a2,-52(s0)
2040394c:	0001d597          	auipc	a1,0x1d
20403950:	9c058593          	addi	a1,a1,-1600 # 2042030c <__func__.3846+0x12c>
20403954:	00078513          	mv	a0,a5
20403958:	1970f0ef          	jal	ra,204132ee <fprintf>
  }
  char* xdelim;
  uint8_t bits = (uint8_t)(strtoul(scan, &xdelim, 10));
2040395c:	fe040793          	addi	a5,s0,-32
20403960:	00a00613          	li	a2,10
20403964:	00078593          	mv	a1,a5
20403968:	fec42503          	lw	a0,-20(s0)
2040396c:	21c100ef          	jal	ra,20413b88 <strtoul>
20403970:	00050793          	mv	a5,a0
20403974:	fef405a3          	sb	a5,-21(s0)
  if (bits != 0) t.bits = bits;
20403978:	feb44783          	lbu	a5,-21(s0)
2040397c:	00078663          	beqz	a5,20403988 <String2DLDataType+0x1e0>
20403980:	feb44783          	lbu	a5,-21(s0)
20403984:	fef402a3          	sb	a5,-27(s0)
  char* endpt = xdelim;
20403988:	fe042783          	lw	a5,-32(s0)
2040398c:	fcf42e23          	sw	a5,-36(s0)
  if (*xdelim == 'x') {
20403990:	fe042783          	lw	a5,-32(s0)
20403994:	0007c703          	lbu	a4,0(a5)
20403998:	07800793          	li	a5,120
2040399c:	02f71863          	bne	a4,a5,204039cc <String2DLDataType+0x224>
    t.lanes = (uint16_t)(strtoul(xdelim + 1, &endpt, 10));
204039a0:	fe042783          	lw	a5,-32(s0)
204039a4:	00178793          	addi	a5,a5,1
204039a8:	fdc40713          	addi	a4,s0,-36
204039ac:	00a00613          	li	a2,10
204039b0:	00070593          	mv	a1,a4
204039b4:	00078513          	mv	a0,a5
204039b8:	1d0100ef          	jal	ra,20413b88 <strtoul>
204039bc:	00050793          	mv	a5,a0
204039c0:	01079793          	slli	a5,a5,0x10
204039c4:	0107d793          	srli	a5,a5,0x10
204039c8:	fef41323          	sh	a5,-26(s0)
  }
  if (!(endpt == s + strlen(s))) {
204039cc:	fcc42503          	lw	a0,-52(s0)
204039d0:	65d0f0ef          	jal	ra,2041382c <strlen>
204039d4:	00050713          	mv	a4,a0
204039d8:	fcc42783          	lw	a5,-52(s0)
204039dc:	00e78733          	add	a4,a5,a4
204039e0:	fdc42783          	lw	a5,-36(s0)
204039e4:	02f70463          	beq	a4,a5,20403a0c <String2DLDataType+0x264>
    fprintf(stderr, "unknown type %s\n", s);
204039e8:	5fbfd797          	auipc	a5,0x5fbfd
204039ec:	05078793          	addi	a5,a5,80 # 80000a38 <_impure_ptr>
204039f0:	0007a783          	lw	a5,0(a5)
204039f4:	00c7a783          	lw	a5,12(a5)
204039f8:	fcc42603          	lw	a2,-52(s0)
204039fc:	0001d597          	auipc	a1,0x1d
20403a00:	91058593          	addi	a1,a1,-1776 # 2042030c <__func__.3846+0x12c>
20403a04:	00078513          	mv	a0,a5
20403a08:	0e70f0ef          	jal	ra,204132ee <fprintf>
  }
  return t;
20403a0c:	fe442783          	lw	a5,-28(s0)
}
20403a10:	00078513          	mv	a0,a5
20403a14:	03c12083          	lw	ra,60(sp)
20403a18:	03812403          	lw	s0,56(sp)
20403a1c:	04010113          	addi	sp,sp,64
20403a20:	00008067          	ret

20403a24 <TVMPackedFunc_InitGlobalFunc>:

int TVMPackedFunc_InitGlobalFunc(TVMPackedFunc* pf, const char* name, const TVMArgs* args) {
20403a24:	fd010113          	addi	sp,sp,-48
20403a28:	02112623          	sw	ra,44(sp)
20403a2c:	02812423          	sw	s0,40(sp)
20403a30:	03010413          	addi	s0,sp,48
20403a34:	fca42e23          	sw	a0,-36(s0)
20403a38:	fcb42c23          	sw	a1,-40(s0)
20403a3c:	fcc42a23          	sw	a2,-44(s0)
  int status = 0;
20403a40:	fe042623          	sw	zero,-20(s0)

  pf->Call = &TVMPackedFunc_Call;
20403a44:	fdc42783          	lw	a5,-36(s0)
20403a48:	00000717          	auipc	a4,0x0
20403a4c:	22870713          	addi	a4,a4,552 # 20403c70 <TVMPackedFunc_Call>
20403a50:	1ce7a823          	sw	a4,464(a5)
  pf->SetArgs = &TVMPackedFunc_SetArgs;
20403a54:	fdc42783          	lw	a5,-36(s0)
20403a58:	00000717          	auipc	a4,0x0
20403a5c:	29470713          	addi	a4,a4,660 # 20403cec <TVMPackedFunc_SetArgs>
20403a60:	1ce7aa23          	sw	a4,468(a5)

  status = TVMFuncGetGlobal(name, &pf->fexec);
20403a64:	fdc42783          	lw	a5,-36(s0)
20403a68:	0c878793          	addi	a5,a5,200
20403a6c:	00078593          	mv	a1,a5
20403a70:	fd842503          	lw	a0,-40(s0)
20403a74:	c94fe0ef          	jal	ra,20401f08 <TVMFuncGetGlobal>
20403a78:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20403a7c:	fec42783          	lw	a5,-20(s0)
20403a80:	00078663          	beqz	a5,20403a8c <TVMPackedFunc_InitGlobalFunc+0x68>
    return status;
20403a84:	fec42783          	lw	a5,-20(s0)
20403a88:	0300006f          	j	20403ab8 <TVMPackedFunc_InitGlobalFunc+0x94>
  }

  snprintf(pf->name, sizeof(pf->name), "%s", name);
20403a8c:	fdc42783          	lw	a5,-36(s0)
20403a90:	fd842683          	lw	a3,-40(s0)
20403a94:	0001d617          	auipc	a2,0x1d
20403a98:	88c60613          	addi	a2,a2,-1908 # 20420320 <__func__.3846+0x140>
20403a9c:	0c800593          	li	a1,200
20403aa0:	00078513          	mv	a0,a5
20403aa4:	3ff0f0ef          	jal	ra,204136a2 <snprintf>
  TVMPackedFunc_SetArgs(pf, args);
20403aa8:	fd442583          	lw	a1,-44(s0)
20403aac:	fdc42503          	lw	a0,-36(s0)
20403ab0:	23c000ef          	jal	ra,20403cec <TVMPackedFunc_SetArgs>
  return status;
20403ab4:	fec42783          	lw	a5,-20(s0)
}
20403ab8:	00078513          	mv	a0,a5
20403abc:	02c12083          	lw	ra,44(sp)
20403ac0:	02812403          	lw	s0,40(sp)
20403ac4:	03010113          	addi	sp,sp,48
20403ac8:	00008067          	ret

20403acc <TVMPackedFunc_InitModuleFunc>:

int TVMPackedFunc_InitModuleFunc(TVMPackedFunc* pf, TVMModuleHandle module, const char* name,
                                 const TVMArgs* args) {
20403acc:	fd010113          	addi	sp,sp,-48
20403ad0:	02112623          	sw	ra,44(sp)
20403ad4:	02812423          	sw	s0,40(sp)
20403ad8:	03010413          	addi	s0,sp,48
20403adc:	fca42e23          	sw	a0,-36(s0)
20403ae0:	fcb42c23          	sw	a1,-40(s0)
20403ae4:	fcc42a23          	sw	a2,-44(s0)
20403ae8:	fcd42823          	sw	a3,-48(s0)
  int status = 0;
20403aec:	fe042623          	sw	zero,-20(s0)

  pf->Call = &TVMPackedFunc_Call;
20403af0:	fdc42783          	lw	a5,-36(s0)
20403af4:	00000717          	auipc	a4,0x0
20403af8:	17c70713          	addi	a4,a4,380 # 20403c70 <TVMPackedFunc_Call>
20403afc:	1ce7a823          	sw	a4,464(a5)
  pf->SetArgs = &TVMPackedFunc_SetArgs;
20403b00:	fdc42783          	lw	a5,-36(s0)
20403b04:	00000717          	auipc	a4,0x0
20403b08:	1e870713          	addi	a4,a4,488 # 20403cec <TVMPackedFunc_SetArgs>
20403b0c:	1ce7aa23          	sw	a4,468(a5)

  status = TVMModGetFunction(module, name, 0, &pf->fexec);
20403b10:	fdc42783          	lw	a5,-36(s0)
20403b14:	0c878793          	addi	a5,a5,200
20403b18:	00078693          	mv	a3,a5
20403b1c:	00000613          	li	a2,0
20403b20:	fd442583          	lw	a1,-44(s0)
20403b24:	fd842503          	lw	a0,-40(s0)
20403b28:	c48fe0ef          	jal	ra,20401f70 <TVMModGetFunction>
20403b2c:	fea42623          	sw	a0,-20(s0)
  if (status != 0) {
20403b30:	fec42783          	lw	a5,-20(s0)
20403b34:	00078663          	beqz	a5,20403b40 <TVMPackedFunc_InitModuleFunc+0x74>
    return status;
20403b38:	fec42783          	lw	a5,-20(s0)
20403b3c:	0300006f          	j	20403b6c <TVMPackedFunc_InitModuleFunc+0xa0>
  }

  snprintf(pf->name, sizeof(pf->name), "%s", name);
20403b40:	fdc42783          	lw	a5,-36(s0)
20403b44:	fd442683          	lw	a3,-44(s0)
20403b48:	0001c617          	auipc	a2,0x1c
20403b4c:	7d860613          	addi	a2,a2,2008 # 20420320 <__func__.3846+0x140>
20403b50:	0c800593          	li	a1,200
20403b54:	00078513          	mv	a0,a5
20403b58:	34b0f0ef          	jal	ra,204136a2 <snprintf>
  TVMPackedFunc_SetArgs(pf, args);
20403b5c:	fd042583          	lw	a1,-48(s0)
20403b60:	fdc42503          	lw	a0,-36(s0)
20403b64:	188000ef          	jal	ra,20403cec <TVMPackedFunc_SetArgs>
  return status;
20403b68:	fec42783          	lw	a5,-20(s0)
}
20403b6c:	00078513          	mv	a0,a5
20403b70:	02c12083          	lw	ra,44(sp)
20403b74:	02812403          	lw	s0,40(sp)
20403b78:	03010113          	addi	sp,sp,48
20403b7c:	00008067          	ret

20403b80 <TVMArgs_Create>:

TVMArgs TVMArgs_Create(TVMValue* values, uint32_t* tcodes, uint32_t values_count) {
20403b80:	f5010113          	addi	sp,sp,-176
20403b84:	0a112623          	sw	ra,172(sp)
20403b88:	0a812423          	sw	s0,168(sp)
20403b8c:	0b010413          	addi	s0,sp,176
20403b90:	f4a42e23          	sw	a0,-164(s0)
20403b94:	f4b42c23          	sw	a1,-168(s0)
20403b98:	f4c42a23          	sw	a2,-172(s0)
20403b9c:	f4d42823          	sw	a3,-176(s0)
  uint32_t idx;
  TVMArgs args;
  memset(&args, 0, sizeof(args));
20403ba0:	f6840793          	addi	a5,s0,-152
20403ba4:	08000613          	li	a2,128
20403ba8:	00000593          	li	a1,0
20403bac:	00078513          	mv	a0,a5
20403bb0:	1e30f0ef          	jal	ra,20413592 <memset>
  for (idx = 0; idx < values_count; idx++) {
20403bb4:	fe042623          	sw	zero,-20(s0)
20403bb8:	0700006f          	j	20403c28 <TVMArgs_Create+0xa8>
    memcpy(args.values + idx, values + idx, sizeof(TVMValue));
20403bbc:	fec42783          	lw	a5,-20(s0)
20403bc0:	00379793          	slli	a5,a5,0x3
20403bc4:	f6840713          	addi	a4,s0,-152
20403bc8:	00f706b3          	add	a3,a4,a5
20403bcc:	fec42783          	lw	a5,-20(s0)
20403bd0:	00379793          	slli	a5,a5,0x3
20403bd4:	f5842703          	lw	a4,-168(s0)
20403bd8:	00f707b3          	add	a5,a4,a5
20403bdc:	00800613          	li	a2,8
20403be0:	00078593          	mv	a1,a5
20403be4:	00068513          	mv	a0,a3
20403be8:	0ed0f0ef          	jal	ra,204134d4 <memcpy>
    args.tcodes[idx] = tcodes[idx];
20403bec:	fec42783          	lw	a5,-20(s0)
20403bf0:	00279793          	slli	a5,a5,0x2
20403bf4:	f5442703          	lw	a4,-172(s0)
20403bf8:	00f707b3          	add	a5,a4,a5
20403bfc:	0007a783          	lw	a5,0(a5)
20403c00:	00078713          	mv	a4,a5
20403c04:	fec42783          	lw	a5,-20(s0)
20403c08:	01478793          	addi	a5,a5,20
20403c0c:	00279793          	slli	a5,a5,0x2
20403c10:	ff040693          	addi	a3,s0,-16
20403c14:	00f687b3          	add	a5,a3,a5
20403c18:	f6e7ac23          	sw	a4,-136(a5)
  for (idx = 0; idx < values_count; idx++) {
20403c1c:	fec42783          	lw	a5,-20(s0)
20403c20:	00178793          	addi	a5,a5,1
20403c24:	fef42623          	sw	a5,-20(s0)
20403c28:	fec42703          	lw	a4,-20(s0)
20403c2c:	f5042783          	lw	a5,-176(s0)
20403c30:	f8f766e3          	bltu	a4,a5,20403bbc <TVMArgs_Create+0x3c>
  }
  args.values_count = values_count;
20403c34:	f5042783          	lw	a5,-176(s0)
20403c38:	fef42023          	sw	a5,-32(s0)
  return args;
20403c3c:	f5c42783          	lw	a5,-164(s0)
20403c40:	00078693          	mv	a3,a5
20403c44:	f6840793          	addi	a5,s0,-152
20403c48:	08000713          	li	a4,128
20403c4c:	00070613          	mv	a2,a4
20403c50:	00078593          	mv	a1,a5
20403c54:	00068513          	mv	a0,a3
20403c58:	07d0f0ef          	jal	ra,204134d4 <memcpy>
}
20403c5c:	f5c42503          	lw	a0,-164(s0)
20403c60:	0ac12083          	lw	ra,172(sp)
20403c64:	0a812403          	lw	s0,168(sp)
20403c68:	0b010113          	addi	sp,sp,176
20403c6c:	00008067          	ret

20403c70 <TVMPackedFunc_Call>:

int TVMPackedFunc_Call(TVMPackedFunc* pf) {
20403c70:	fe010113          	addi	sp,sp,-32
20403c74:	00112e23          	sw	ra,28(sp)
20403c78:	00812c23          	sw	s0,24(sp)
20403c7c:	02010413          	addi	s0,sp,32
20403c80:	fea42623          	sw	a0,-20(s0)
  pf->ret_value.values_count = 1;
20403c84:	fec42783          	lw	a5,-20(s0)
20403c88:	00100713          	li	a4,1
20403c8c:	1ce7a423          	sw	a4,456(a5)
  pf->ret_value.tcodes[0] = kTVMNullptr;
20403c90:	fec42783          	lw	a5,-20(s0)
20403c94:	00400713          	li	a4,4
20403c98:	1ae7a023          	sw	a4,416(a5)
  return TVMFuncCall(pf->fexec, pf->args.values, pf->args.tcodes, pf->args.values_count,
20403c9c:	fec42783          	lw	a5,-20(s0)
20403ca0:	0c87a503          	lw	a0,200(a5)
20403ca4:	fec42783          	lw	a5,-20(s0)
20403ca8:	0d078593          	addi	a1,a5,208
20403cac:	fec42783          	lw	a5,-20(s0)
20403cb0:	12078613          	addi	a2,a5,288
20403cb4:	fec42783          	lw	a5,-20(s0)
20403cb8:	1487a783          	lw	a5,328(a5)
20403cbc:	00078693          	mv	a3,a5
                     pf->ret_value.values, pf->ret_value.tcodes);
20403cc0:	fec42783          	lw	a5,-20(s0)
20403cc4:	15078713          	addi	a4,a5,336
20403cc8:	fec42783          	lw	a5,-20(s0)
20403ccc:	1a078793          	addi	a5,a5,416
  return TVMFuncCall(pf->fexec, pf->args.values, pf->args.tcodes, pf->args.values_count,
20403cd0:	848fe0ef          	jal	ra,20401d18 <TVMFuncCall>
20403cd4:	00050793          	mv	a5,a0
}
20403cd8:	00078513          	mv	a0,a5
20403cdc:	01c12083          	lw	ra,28(sp)
20403ce0:	01812403          	lw	s0,24(sp)
20403ce4:	02010113          	addi	sp,sp,32
20403ce8:	00008067          	ret

20403cec <TVMPackedFunc_SetArgs>:

void TVMPackedFunc_SetArgs(TVMPackedFunc* pf, const TVMArgs* args) {
20403cec:	fe010113          	addi	sp,sp,-32
20403cf0:	00112e23          	sw	ra,28(sp)
20403cf4:	00812c23          	sw	s0,24(sp)
20403cf8:	02010413          	addi	s0,sp,32
20403cfc:	fea42623          	sw	a0,-20(s0)
20403d00:	feb42423          	sw	a1,-24(s0)
  memcpy(&(pf->args), args, sizeof(TVMArgs));
20403d04:	fec42783          	lw	a5,-20(s0)
20403d08:	0d078793          	addi	a5,a5,208
20403d0c:	08000613          	li	a2,128
20403d10:	fe842583          	lw	a1,-24(s0)
20403d14:	00078513          	mv	a0,a5
20403d18:	7bc0f0ef          	jal	ra,204134d4 <memcpy>
}
20403d1c:	00000013          	nop
20403d20:	01c12083          	lw	ra,28(sp)
20403d24:	01812403          	lw	s0,24(sp)
20403d28:	02010113          	addi	sp,sp,32
20403d2c:	00008067          	ret

20403d30 <Shape_Accumulate>:

#ifndef MAX
#define MAX(a, b) (((a) > (b)) ? (a) : (b))
#endif  // MAX

uint32_t Shape_Accumulate(int64_t* shape, uint32_t ndim) {
20403d30:	fd010113          	addi	sp,sp,-48
20403d34:	02112623          	sw	ra,44(sp)
20403d38:	02812423          	sw	s0,40(sp)
20403d3c:	03010413          	addi	s0,sp,48
20403d40:	fca42e23          	sw	a0,-36(s0)
20403d44:	fcb42c23          	sw	a1,-40(s0)
  int64_t accum = 1;
20403d48:	00100793          	li	a5,1
20403d4c:	00000813          	li	a6,0
20403d50:	fef42423          	sw	a5,-24(s0)
20403d54:	ff042623          	sw	a6,-20(s0)
  uint32_t idx;
  for (idx = 0; idx < ndim; idx++) {
20403d58:	fe042223          	sw	zero,-28(s0)
20403d5c:	0700006f          	j	20403dcc <Shape_Accumulate+0x9c>
    if (shape[idx] == 0) {
20403d60:	fe442783          	lw	a5,-28(s0)
20403d64:	00379793          	slli	a5,a5,0x3
20403d68:	fdc42703          	lw	a4,-36(s0)
20403d6c:	00f707b3          	add	a5,a4,a5
20403d70:	0007a683          	lw	a3,0(a5)
20403d74:	0047a703          	lw	a4,4(a5)
20403d78:	00068793          	mv	a5,a3
20403d7c:	00e7e7b3          	or	a5,a5,a4
20403d80:	04078e63          	beqz	a5,20403ddc <Shape_Accumulate+0xac>
      break;
    }
    accum *= shape[idx];
20403d84:	fe442783          	lw	a5,-28(s0)
20403d88:	00379793          	slli	a5,a5,0x3
20403d8c:	fdc42703          	lw	a4,-36(s0)
20403d90:	00f707b3          	add	a5,a4,a5
20403d94:	0047a803          	lw	a6,4(a5)
20403d98:	0007a783          	lw	a5,0(a5)
20403d9c:	00078613          	mv	a2,a5
20403da0:	00080693          	mv	a3,a6
20403da4:	fe842503          	lw	a0,-24(s0)
20403da8:	fec42583          	lw	a1,-20(s0)
20403dac:	69d1b0ef          	jal	ra,2041fc48 <__muldi3>
20403db0:	00050793          	mv	a5,a0
20403db4:	00058813          	mv	a6,a1
20403db8:	fef42423          	sw	a5,-24(s0)
20403dbc:	ff042623          	sw	a6,-20(s0)
  for (idx = 0; idx < ndim; idx++) {
20403dc0:	fe442783          	lw	a5,-28(s0)
20403dc4:	00178793          	addi	a5,a5,1
20403dc8:	fef42223          	sw	a5,-28(s0)
20403dcc:	fe442703          	lw	a4,-28(s0)
20403dd0:	fd842783          	lw	a5,-40(s0)
20403dd4:	f8f766e3          	bltu	a4,a5,20403d60 <Shape_Accumulate+0x30>
20403dd8:	0080006f          	j	20403de0 <Shape_Accumulate+0xb0>
      break;
20403ddc:	00000013          	nop
  }
  return accum;
20403de0:	fe842783          	lw	a5,-24(s0)
}
20403de4:	00078513          	mv	a0,a5
20403de8:	02c12083          	lw	ra,44(sp)
20403dec:	02812403          	lw	s0,40(sp)
20403df0:	03010113          	addi	sp,sp,48
20403df4:	00008067          	ret

20403df8 <NodeEntry_Load>:

int NodeEntry_Load(TVMGraphExecutorNodeEntry* entry, JSONReader* reader) {
20403df8:	fd010113          	addi	sp,sp,-48
20403dfc:	02112623          	sw	ra,44(sp)
20403e00:	02812423          	sw	s0,40(sp)
20403e04:	03010413          	addi	s0,sp,48
20403e08:	fca42e23          	sw	a0,-36(s0)
20403e0c:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
20403e10:	fe042623          	sw	zero,-20(s0)
  reader->BeginArray(reader);
20403e14:	fd842783          	lw	a5,-40(s0)
20403e18:	0307a783          	lw	a5,48(a5)
20403e1c:	fd842503          	lw	a0,-40(s0)
20403e20:	000780e7          	jalr	a5
  if (!(reader->NextArrayItem(reader))) {
20403e24:	fd842783          	lw	a5,-40(s0)
20403e28:	03c7a783          	lw	a5,60(a5)
20403e2c:	fd842503          	lw	a0,-40(s0)
20403e30:	000780e7          	jalr	a5
20403e34:	00050793          	mv	a5,a0
20403e38:	02079a63          	bnez	a5,20403e6c <NodeEntry_Load+0x74>
    fprintf(stderr, "invalid json format: failed to parse `node_id`\n");
20403e3c:	5fbfd797          	auipc	a5,0x5fbfd
20403e40:	bfc78793          	addi	a5,a5,-1028 # 80000a38 <_impure_ptr>
20403e44:	0007a783          	lw	a5,0(a5)
20403e48:	00c7a783          	lw	a5,12(a5)
20403e4c:	00078693          	mv	a3,a5
20403e50:	02f00613          	li	a2,47
20403e54:	00100593          	li	a1,1
20403e58:	0001c517          	auipc	a0,0x1c
20403e5c:	4d050513          	addi	a0,a0,1232 # 20420328 <__func__.3846+0x148>
20403e60:	5280f0ef          	jal	ra,20413388 <fwrite>
    status = -1;
20403e64:	fff00793          	li	a5,-1
20403e68:	fef42623          	sw	a5,-20(s0)
  }
  reader->ReadUnsignedInteger(reader, &(entry->node_id));
20403e6c:	fd842783          	lw	a5,-40(s0)
20403e70:	0247a703          	lw	a4,36(a5)
20403e74:	fdc42783          	lw	a5,-36(s0)
20403e78:	00078593          	mv	a1,a5
20403e7c:	fd842503          	lw	a0,-40(s0)
20403e80:	000700e7          	jalr	a4
  if (!(reader->NextArrayItem(reader))) {
20403e84:	fd842783          	lw	a5,-40(s0)
20403e88:	03c7a783          	lw	a5,60(a5)
20403e8c:	fd842503          	lw	a0,-40(s0)
20403e90:	000780e7          	jalr	a5
20403e94:	00050793          	mv	a5,a0
20403e98:	02079a63          	bnez	a5,20403ecc <NodeEntry_Load+0xd4>
    fprintf(stderr, "invalid json format: failed to parse `index`\n");
20403e9c:	5fbfd797          	auipc	a5,0x5fbfd
20403ea0:	b9c78793          	addi	a5,a5,-1124 # 80000a38 <_impure_ptr>
20403ea4:	0007a783          	lw	a5,0(a5)
20403ea8:	00c7a783          	lw	a5,12(a5)
20403eac:	00078693          	mv	a3,a5
20403eb0:	02d00613          	li	a2,45
20403eb4:	00100593          	li	a1,1
20403eb8:	0001c517          	auipc	a0,0x1c
20403ebc:	4a050513          	addi	a0,a0,1184 # 20420358 <__func__.3846+0x178>
20403ec0:	4c80f0ef          	jal	ra,20413388 <fwrite>
    status = -1;
20403ec4:	fff00793          	li	a5,-1
20403ec8:	fef42623          	sw	a5,-20(s0)
  }
  reader->ReadUnsignedInteger(reader, &(entry->index));
20403ecc:	fd842783          	lw	a5,-40(s0)
20403ed0:	0247a703          	lw	a4,36(a5)
20403ed4:	fdc42783          	lw	a5,-36(s0)
20403ed8:	00478793          	addi	a5,a5,4
20403edc:	00078593          	mv	a1,a5
20403ee0:	fd842503          	lw	a0,-40(s0)
20403ee4:	000700e7          	jalr	a4
  if (reader->NextArrayItem(reader)) {
20403ee8:	fd842783          	lw	a5,-40(s0)
20403eec:	03c7a783          	lw	a5,60(a5)
20403ef0:	fd842503          	lw	a0,-40(s0)
20403ef4:	000780e7          	jalr	a5
20403ef8:	00050793          	mv	a5,a0
20403efc:	06078663          	beqz	a5,20403f68 <NodeEntry_Load+0x170>
    reader->ReadUnsignedInteger(reader, &(entry->version));
20403f00:	fd842783          	lw	a5,-40(s0)
20403f04:	0247a703          	lw	a4,36(a5)
20403f08:	fdc42783          	lw	a5,-36(s0)
20403f0c:	00878793          	addi	a5,a5,8
20403f10:	00078593          	mv	a1,a5
20403f14:	fd842503          	lw	a0,-40(s0)
20403f18:	000700e7          	jalr	a4
    if (reader->NextArrayItem(reader)) {
20403f1c:	fd842783          	lw	a5,-40(s0)
20403f20:	03c7a783          	lw	a5,60(a5)
20403f24:	fd842503          	lw	a0,-40(s0)
20403f28:	000780e7          	jalr	a5
20403f2c:	00050793          	mv	a5,a0
20403f30:	04078063          	beqz	a5,20403f70 <NodeEntry_Load+0x178>
      fprintf(stderr, "invalid json format: failed to parse `version`\n");
20403f34:	5fbfd797          	auipc	a5,0x5fbfd
20403f38:	b0478793          	addi	a5,a5,-1276 # 80000a38 <_impure_ptr>
20403f3c:	0007a783          	lw	a5,0(a5)
20403f40:	00c7a783          	lw	a5,12(a5)
20403f44:	00078693          	mv	a3,a5
20403f48:	02f00613          	li	a2,47
20403f4c:	00100593          	li	a1,1
20403f50:	0001c517          	auipc	a0,0x1c
20403f54:	43850513          	addi	a0,a0,1080 # 20420388 <__func__.3846+0x1a8>
20403f58:	4300f0ef          	jal	ra,20413388 <fwrite>
      status = -1;
20403f5c:	fff00793          	li	a5,-1
20403f60:	fef42623          	sw	a5,-20(s0)
20403f64:	00c0006f          	j	20403f70 <NodeEntry_Load+0x178>
    }
  } else {
    entry->version = 0;
20403f68:	fdc42783          	lw	a5,-36(s0)
20403f6c:	0007a423          	sw	zero,8(a5)
  }
  return status;
20403f70:	fec42783          	lw	a5,-20(s0)
}
20403f74:	00078513          	mv	a0,a5
20403f78:	02c12083          	lw	ra,44(sp)
20403f7c:	02812403          	lw	s0,40(sp)
20403f80:	03010113          	addi	sp,sp,48
20403f84:	00008067          	ret

20403f88 <TVMGraphExecutorNode_LoadAttrs>:

void TVMGraphExecutorNode_LoadAttrs(TVMGraphExecutorNode* node, JSONReader* reader,
                                    TVMOpParam* param) {
20403f88:	f4010113          	addi	sp,sp,-192
20403f8c:	0a112e23          	sw	ra,188(sp)
20403f90:	0a812c23          	sw	s0,184(sp)
20403f94:	0c010413          	addi	s0,sp,192
20403f98:	f4a42623          	sw	a0,-180(s0)
20403f9c:	f4b42423          	sw	a1,-184(s0)
20403fa0:	f4c42223          	sw	a2,-188(s0)
  int bitmask = 0;
20403fa4:	fe042623          	sw	zero,-20(s0)
  char key[20], value[TVM_CRT_MAX_STRLEN_FUNCTION_NAME];
  memset(param, 0, sizeof(TVMOpParam));
20403fa8:	08400613          	li	a2,132
20403fac:	00000593          	li	a1,0
20403fb0:	f4442503          	lw	a0,-188(s0)
20403fb4:	5de0f0ef          	jal	ra,20413592 <memset>
  memset(key, 0, sizeof(key));
20403fb8:	fd440793          	addi	a5,s0,-44
20403fbc:	01400613          	li	a2,20
20403fc0:	00000593          	li	a1,0
20403fc4:	00078513          	mv	a0,a5
20403fc8:	5ca0f0ef          	jal	ra,20413592 <memset>
  memset(value, 0, sizeof(value));
20403fcc:	f5c40793          	addi	a5,s0,-164
20403fd0:	07800613          	li	a2,120
20403fd4:	00000593          	li	a1,0
20403fd8:	00078513          	mv	a0,a5
20403fdc:	5b60f0ef          	jal	ra,20413592 <memset>
  reader->BeginObject(reader);
20403fe0:	f4842783          	lw	a5,-184(s0)
20403fe4:	0347a783          	lw	a5,52(a5)
20403fe8:	f4842503          	lw	a0,-184(s0)
20403fec:	000780e7          	jalr	a5
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20403ff0:	1840006f          	j	20404174 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    int status = reader->ReadString(reader, value, sizeof(value));
20403ff4:	f4842783          	lw	a5,-184(s0)
20403ff8:	02c7a703          	lw	a4,44(a5)
20403ffc:	f5c40793          	addi	a5,s0,-164
20404000:	07800613          	li	a2,120
20404004:	00078593          	mv	a1,a5
20404008:	f4842503          	lw	a0,-184(s0)
2040400c:	000700e7          	jalr	a4
20404010:	fea42423          	sw	a0,-24(s0)
    if (status != 0) {
20404014:	fe842783          	lw	a5,-24(s0)
20404018:	02078863          	beqz	a5,20404048 <TVMGraphExecutorNode_LoadAttrs+0xc0>
      fprintf(stderr, "error reading value for key: %s\n", key);
2040401c:	5fbfd797          	auipc	a5,0x5fbfd
20404020:	a1c78793          	addi	a5,a5,-1508 # 80000a38 <_impure_ptr>
20404024:	0007a783          	lw	a5,0(a5)
20404028:	00c7a783          	lw	a5,12(a5)
2040402c:	fd440713          	addi	a4,s0,-44
20404030:	00070613          	mv	a2,a4
20404034:	0001c597          	auipc	a1,0x1c
20404038:	38458593          	addi	a1,a1,900 # 204203b8 <__func__.3846+0x1d8>
2040403c:	00078513          	mv	a0,a5
20404040:	2ae0f0ef          	jal	ra,204132ee <fprintf>
      break;
20404044:	1540006f          	j	20404198 <TVMGraphExecutorNode_LoadAttrs+0x210>
    }
    if (!strcmp(key, "func_name")) {
20404048:	fd440793          	addi	a5,s0,-44
2040404c:	0001c597          	auipc	a1,0x1c
20404050:	39058593          	addi	a1,a1,912 # 204203dc <__func__.3846+0x1fc>
20404054:	00078513          	mv	a0,a5
20404058:	6b60f0ef          	jal	ra,2041370e <strcmp>
2040405c:	00050793          	mv	a5,a0
20404060:	02079a63          	bnez	a5,20404094 <TVMGraphExecutorNode_LoadAttrs+0x10c>
      snprintf(param->func_name, sizeof(value), "%s", value);
20404064:	f4442783          	lw	a5,-188(s0)
20404068:	f5c40713          	addi	a4,s0,-164
2040406c:	00070693          	mv	a3,a4
20404070:	0001c617          	auipc	a2,0x1c
20404074:	37860613          	addi	a2,a2,888 # 204203e8 <__func__.3846+0x208>
20404078:	07800593          	li	a1,120
2040407c:	00078513          	mv	a0,a5
20404080:	6220f0ef          	jal	ra,204136a2 <snprintf>
      bitmask |= 1;
20404084:	fec42783          	lw	a5,-20(s0)
20404088:	0017e793          	ori	a5,a5,1
2040408c:	fef42623          	sw	a5,-20(s0)
20404090:	0e40006f          	j	20404174 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    } else if (!strcmp(key, "num_inputs")) {
20404094:	fd440793          	addi	a5,s0,-44
20404098:	0001c597          	auipc	a1,0x1c
2040409c:	35458593          	addi	a1,a1,852 # 204203ec <__func__.3846+0x20c>
204040a0:	00078513          	mv	a0,a5
204040a4:	66a0f0ef          	jal	ra,2041370e <strcmp>
204040a8:	00050793          	mv	a5,a0
204040ac:	02079a63          	bnez	a5,204040e0 <TVMGraphExecutorNode_LoadAttrs+0x158>
      param->num_inputs = strtoul(value, 0, 10);
204040b0:	f5c40793          	addi	a5,s0,-164
204040b4:	00a00613          	li	a2,10
204040b8:	00000593          	li	a1,0
204040bc:	00078513          	mv	a0,a5
204040c0:	2c90f0ef          	jal	ra,20413b88 <strtoul>
204040c4:	00050713          	mv	a4,a0
204040c8:	f4442783          	lw	a5,-188(s0)
204040cc:	06e7ac23          	sw	a4,120(a5)
      bitmask |= 2;
204040d0:	fec42783          	lw	a5,-20(s0)
204040d4:	0027e793          	ori	a5,a5,2
204040d8:	fef42623          	sw	a5,-20(s0)
204040dc:	0980006f          	j	20404174 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    } else if (!strcmp(key, "num_outputs")) {
204040e0:	fd440793          	addi	a5,s0,-44
204040e4:	0001c597          	auipc	a1,0x1c
204040e8:	31458593          	addi	a1,a1,788 # 204203f8 <__func__.3846+0x218>
204040ec:	00078513          	mv	a0,a5
204040f0:	61e0f0ef          	jal	ra,2041370e <strcmp>
204040f4:	00050793          	mv	a5,a0
204040f8:	02079a63          	bnez	a5,2040412c <TVMGraphExecutorNode_LoadAttrs+0x1a4>
      param->num_outputs = strtoul(value, 0, 10);
204040fc:	f5c40793          	addi	a5,s0,-164
20404100:	00a00613          	li	a2,10
20404104:	00000593          	li	a1,0
20404108:	00078513          	mv	a0,a5
2040410c:	27d0f0ef          	jal	ra,20413b88 <strtoul>
20404110:	00050713          	mv	a4,a0
20404114:	f4442783          	lw	a5,-188(s0)
20404118:	06e7ae23          	sw	a4,124(a5)
      bitmask |= 4;
2040411c:	fec42783          	lw	a5,-20(s0)
20404120:	0047e793          	ori	a5,a5,4
20404124:	fef42623          	sw	a5,-20(s0)
20404128:	04c0006f          	j	20404174 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
    } else if (!strcmp(key, "flatten_data")) {
2040412c:	fd440793          	addi	a5,s0,-44
20404130:	0001c597          	auipc	a1,0x1c
20404134:	2d458593          	addi	a1,a1,724 # 20420404 <__func__.3846+0x224>
20404138:	00078513          	mv	a0,a5
2040413c:	5d20f0ef          	jal	ra,2041370e <strcmp>
20404140:	00050793          	mv	a5,a0
20404144:	02079863          	bnez	a5,20404174 <TVMGraphExecutorNode_LoadAttrs+0x1ec>
      param->flatten_data = strtoul(value, 0, 10);
20404148:	f5c40793          	addi	a5,s0,-164
2040414c:	00a00613          	li	a2,10
20404150:	00000593          	li	a1,0
20404154:	00078513          	mv	a0,a5
20404158:	2310f0ef          	jal	ra,20413b88 <strtoul>
2040415c:	00050713          	mv	a4,a0
20404160:	f4442783          	lw	a5,-188(s0)
20404164:	08e7a023          	sw	a4,128(a5)
      bitmask |= 8;
20404168:	fec42783          	lw	a5,-20(s0)
2040416c:	0087e793          	ori	a5,a5,8
20404170:	fef42623          	sw	a5,-20(s0)
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20404174:	f4842783          	lw	a5,-184(s0)
20404178:	0387a703          	lw	a4,56(a5)
2040417c:	fd440793          	addi	a5,s0,-44
20404180:	01400613          	li	a2,20
20404184:	00078593          	mv	a1,a5
20404188:	f4842503          	lw	a0,-184(s0)
2040418c:	000700e7          	jalr	a4
20404190:	00050793          	mv	a5,a0
20404194:	e60790e3          	bnez	a5,20403ff4 <TVMGraphExecutorNode_LoadAttrs+0x6c>
    } else {
      printf("do not support key %s", key);
#endif  // TVM_CRT_DEBUG
    }
  }
  if (bitmask != (1 | 2 | 4 | 8)) {
20404198:	fec42703          	lw	a4,-20(s0)
2040419c:	00f00793          	li	a5,15
204041a0:	02f70663          	beq	a4,a5,204041cc <TVMGraphExecutorNode_LoadAttrs+0x244>
    fprintf(stderr, "invalid format\n");
204041a4:	5fbfd797          	auipc	a5,0x5fbfd
204041a8:	89478793          	addi	a5,a5,-1900 # 80000a38 <_impure_ptr>
204041ac:	0007a783          	lw	a5,0(a5)
204041b0:	00c7a783          	lw	a5,12(a5)
204041b4:	00078693          	mv	a3,a5
204041b8:	00f00613          	li	a2,15
204041bc:	00100593          	li	a1,1
204041c0:	0001c517          	auipc	a0,0x1c
204041c4:	25450513          	addi	a0,a0,596 # 20420414 <__func__.3846+0x234>
204041c8:	1c00f0ef          	jal	ra,20413388 <fwrite>
  }
}
204041cc:	00000013          	nop
204041d0:	0bc12083          	lw	ra,188(sp)
204041d4:	0b812403          	lw	s0,184(sp)
204041d8:	0c010113          	addi	sp,sp,192
204041dc:	00008067          	ret

204041e0 <TVMGraphExecutorNode_Load>:

int TVMGraphExecutorNode_Load(TVMGraphExecutorNode* node, JSONReader* reader) {
204041e0:	f2010113          	addi	sp,sp,-224
204041e4:	0c112e23          	sw	ra,220(sp)
204041e8:	0c812c23          	sw	s0,216(sp)
204041ec:	0e010413          	addi	s0,sp,224
204041f0:	f2a42623          	sw	a0,-212(s0)
204041f4:	f2b42423          	sw	a1,-216(s0)
  int status = 0;
204041f8:	fe042623          	sw	zero,-20(s0)
  reader->BeginObject(reader);
204041fc:	f2842783          	lw	a5,-216(s0)
20404200:	0347a783          	lw	a5,52(a5)
20404204:	f2842503          	lw	a0,-216(s0)
20404208:	000780e7          	jalr	a5
  int bitmask = 0;
2040420c:	fe042423          	sw	zero,-24(s0)
  char key[20];
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20404210:	4dc0006f          	j	204046ec <TVMGraphExecutorNode_Load+0x50c>
    if (!strcmp(key, "op")) {
20404214:	fc840793          	addi	a5,s0,-56
20404218:	0001c597          	auipc	a1,0x1c
2040421c:	20c58593          	addi	a1,a1,524 # 20420424 <__func__.3846+0x244>
20404220:	00078513          	mv	a0,a5
20404224:	4ea0f0ef          	jal	ra,2041370e <strcmp>
20404228:	00050793          	mv	a5,a0
2040422c:	06079463          	bnez	a5,20404294 <TVMGraphExecutorNode_Load+0xb4>
      status = reader->ReadString(reader, node->op_type, sizeof(node->op_type));
20404230:	f2842783          	lw	a5,-216(s0)
20404234:	02c7a703          	lw	a4,44(a5)
20404238:	f2c42783          	lw	a5,-212(s0)
2040423c:	01000613          	li	a2,16
20404240:	00078593          	mv	a1,a5
20404244:	f2842503          	lw	a0,-216(s0)
20404248:	000700e7          	jalr	a4
2040424c:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20404250:	fec42783          	lw	a5,-20(s0)
20404254:	02078863          	beqz	a5,20404284 <TVMGraphExecutorNode_Load+0xa4>
        fprintf(stderr, "error reading op\n");
20404258:	5fbfc797          	auipc	a5,0x5fbfc
2040425c:	7e078793          	addi	a5,a5,2016 # 80000a38 <_impure_ptr>
20404260:	0007a783          	lw	a5,0(a5)
20404264:	00c7a783          	lw	a5,12(a5)
20404268:	00078693          	mv	a3,a5
2040426c:	01100613          	li	a2,17
20404270:	00100593          	li	a1,1
20404274:	0001c517          	auipc	a0,0x1c
20404278:	1b450513          	addi	a0,a0,436 # 20420428 <__func__.3846+0x248>
2040427c:	10c0f0ef          	jal	ra,20413388 <fwrite>
        break;
20404280:	4980006f          	j	20404718 <TVMGraphExecutorNode_Load+0x538>
      }
      bitmask |= 1;
20404284:	fe842783          	lw	a5,-24(s0)
20404288:	0017e793          	ori	a5,a5,1
2040428c:	fef42423          	sw	a5,-24(s0)
20404290:	4540006f          	j	204046e4 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "name")) {
20404294:	fc840793          	addi	a5,s0,-56
20404298:	0001c597          	auipc	a1,0x1c
2040429c:	1a458593          	addi	a1,a1,420 # 2042043c <__func__.3846+0x25c>
204042a0:	00078513          	mv	a0,a5
204042a4:	46a0f0ef          	jal	ra,2041370e <strcmp>
204042a8:	00050793          	mv	a5,a0
204042ac:	06079663          	bnez	a5,20404318 <TVMGraphExecutorNode_Load+0x138>
      status = reader->ReadString(reader, node->name, sizeof(node->name));
204042b0:	f2842783          	lw	a5,-216(s0)
204042b4:	02c7a703          	lw	a4,44(a5)
204042b8:	f2c42783          	lw	a5,-212(s0)
204042bc:	01078793          	addi	a5,a5,16
204042c0:	07800613          	li	a2,120
204042c4:	00078593          	mv	a1,a5
204042c8:	f2842503          	lw	a0,-216(s0)
204042cc:	000700e7          	jalr	a4
204042d0:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
204042d4:	fec42783          	lw	a5,-20(s0)
204042d8:	02078863          	beqz	a5,20404308 <TVMGraphExecutorNode_Load+0x128>
        fprintf(stderr, "error reading name\n");
204042dc:	5fbfc797          	auipc	a5,0x5fbfc
204042e0:	75c78793          	addi	a5,a5,1884 # 80000a38 <_impure_ptr>
204042e4:	0007a783          	lw	a5,0(a5)
204042e8:	00c7a783          	lw	a5,12(a5)
204042ec:	00078693          	mv	a3,a5
204042f0:	01300613          	li	a2,19
204042f4:	00100593          	li	a1,1
204042f8:	0001c517          	auipc	a0,0x1c
204042fc:	14c50513          	addi	a0,a0,332 # 20420444 <__func__.3846+0x264>
20404300:	0880f0ef          	jal	ra,20413388 <fwrite>
        break;
20404304:	4140006f          	j	20404718 <TVMGraphExecutorNode_Load+0x538>
      }
      bitmask |= 2;
20404308:	fe842783          	lw	a5,-24(s0)
2040430c:	0027e793          	ori	a5,a5,2
20404310:	fef42423          	sw	a5,-24(s0)
20404314:	3d00006f          	j	204046e4 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "inputs")) {
20404318:	fc840793          	addi	a5,s0,-56
2040431c:	0001c597          	auipc	a1,0x1c
20404320:	13c58593          	addi	a1,a1,316 # 20420458 <__func__.3846+0x278>
20404324:	00078513          	mv	a0,a5
20404328:	3e60f0ef          	jal	ra,2041370e <strcmp>
2040432c:	00050793          	mv	a5,a0
20404330:	2c079463          	bnez	a5,204045f8 <TVMGraphExecutorNode_Load+0x418>
      size_t count = 0;
20404334:	fe042223          	sw	zero,-28(s0)
      reader->BeginArray(reader);
20404338:	f2842783          	lw	a5,-216(s0)
2040433c:	0307a783          	lw	a5,48(a5)
20404340:	f2842503          	lw	a0,-216(s0)
20404344:	000780e7          	jalr	a5
      size_t num_inputs = 0;
20404348:	fc042223          	sw	zero,-60(s0)
      if (reader->ArrayLength(reader, &num_inputs) != 0) {
2040434c:	f2842783          	lw	a5,-216(s0)
20404350:	0407a703          	lw	a4,64(a5)
20404354:	fc440793          	addi	a5,s0,-60
20404358:	00078593          	mv	a1,a5
2040435c:	f2842503          	lw	a0,-216(s0)
20404360:	000700e7          	jalr	a4
20404364:	00050793          	mv	a5,a0
20404368:	02078863          	beqz	a5,20404398 <TVMGraphExecutorNode_Load+0x1b8>
        fprintf(stderr, "error determining inputs array length\n");
2040436c:	5fbfc797          	auipc	a5,0x5fbfc
20404370:	6cc78793          	addi	a5,a5,1740 # 80000a38 <_impure_ptr>
20404374:	0007a783          	lw	a5,0(a5)
20404378:	00c7a783          	lw	a5,12(a5)
2040437c:	00078693          	mv	a3,a5
20404380:	02600613          	li	a2,38
20404384:	00100593          	li	a1,1
20404388:	0001c517          	auipc	a0,0x1c
2040438c:	0d850513          	addi	a0,a0,216 # 20420460 <__func__.3846+0x280>
20404390:	7f90e0ef          	jal	ra,20413388 <fwrite>
20404394:	3840006f          	j	20404718 <TVMGraphExecutorNode_Load+0x538>
        break;
      }
      DLDevice dev = {kDLCPU, 0};
20404398:	00100793          	li	a5,1
2040439c:	faf42e23          	sw	a5,-68(s0)
204043a0:	fc042023          	sw	zero,-64(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
204043a4:	fc442783          	lw	a5,-60(s0)
204043a8:	00479713          	slli	a4,a5,0x4
          sizeof(TVMGraphExecutorNodeEntry) * num_inputs, dev, (void**)&node->inputs);
204043ac:	f2c42783          	lw	a5,-212(s0)
204043b0:	10c78793          	addi	a5,a5,268
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
204043b4:	00078693          	mv	a3,a5
204043b8:	fbc42583          	lw	a1,-68(s0)
204043bc:	fc042603          	lw	a2,-64(s0)
204043c0:	00070513          	mv	a0,a4
204043c4:	95dfc0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204043c8:	fea42023          	sw	a0,-32(s0)
      if (err != kTvmErrorNoError) {
204043cc:	fe042783          	lw	a5,-32(s0)
204043d0:	1e078a63          	beqz	a5,204045c4 <TVMGraphExecutorNode_Load+0x3e4>
        fprintf(stderr, "memory allocate error: %08x", err);
204043d4:	5fbfc797          	auipc	a5,0x5fbfc
204043d8:	66478793          	addi	a5,a5,1636 # 80000a38 <_impure_ptr>
204043dc:	0007a783          	lw	a5,0(a5)
204043e0:	00c7a783          	lw	a5,12(a5)
204043e4:	fe042603          	lw	a2,-32(s0)
204043e8:	0001c597          	auipc	a1,0x1c
204043ec:	0a058593          	addi	a1,a1,160 # 20420488 <__func__.3846+0x2a8>
204043f0:	00078513          	mv	a0,a5
204043f4:	6fb0e0ef          	jal	ra,204132ee <fprintf>
        return -1;
204043f8:	fff00793          	li	a5,-1
204043fc:	35c0006f          	j	20404758 <TVMGraphExecutorNode_Load+0x578>
      }
      while (reader->NextArrayItem(reader)) {
        if (count == num_inputs) {
20404400:	fc442783          	lw	a5,-60(s0)
20404404:	fe442703          	lw	a4,-28(s0)
20404408:	02f71a63          	bne	a4,a5,2040443c <TVMGraphExecutorNode_Load+0x25c>
          fprintf(stderr, "too many array elements\n");
2040440c:	5fbfc797          	auipc	a5,0x5fbfc
20404410:	62c78793          	addi	a5,a5,1580 # 80000a38 <_impure_ptr>
20404414:	0007a783          	lw	a5,0(a5)
20404418:	00c7a783          	lw	a5,12(a5)
2040441c:	00078693          	mv	a3,a5
20404420:	01800613          	li	a2,24
20404424:	00100593          	li	a1,1
20404428:	0001c517          	auipc	a0,0x1c
2040442c:	07c50513          	addi	a0,a0,124 # 204204a4 <__func__.3846+0x2c4>
20404430:	7590e0ef          	jal	ra,20413388 <fwrite>
          return -1;
20404434:	fff00793          	li	a5,-1
20404438:	3200006f          	j	20404758 <TVMGraphExecutorNode_Load+0x578>
        }

        TVMGraphExecutorNodeEntry* inputs = node->inputs + count;
2040443c:	f2c42783          	lw	a5,-212(s0)
20404440:	10c7a703          	lw	a4,268(a5)
20404444:	fe442783          	lw	a5,-28(s0)
20404448:	00479793          	slli	a5,a5,0x4
2040444c:	00f707b3          	add	a5,a4,a5
20404450:	fcf42e23          	sw	a5,-36(s0)
        reader->BeginArray(reader);
20404454:	f2842783          	lw	a5,-216(s0)
20404458:	0307a783          	lw	a5,48(a5)
2040445c:	f2842503          	lw	a0,-216(s0)
20404460:	000780e7          	jalr	a5
        if (!reader->NextArrayItem(reader)) {
20404464:	f2842783          	lw	a5,-216(s0)
20404468:	03c7a783          	lw	a5,60(a5)
2040446c:	f2842503          	lw	a0,-216(s0)
20404470:	000780e7          	jalr	a5
20404474:	00050793          	mv	a5,a0
20404478:	02079c63          	bnez	a5,204044b0 <TVMGraphExecutorNode_Load+0x2d0>
          fprintf(stderr, "invalid json format\n");
2040447c:	5fbfc797          	auipc	a5,0x5fbfc
20404480:	5bc78793          	addi	a5,a5,1468 # 80000a38 <_impure_ptr>
20404484:	0007a783          	lw	a5,0(a5)
20404488:	00c7a783          	lw	a5,12(a5)
2040448c:	00078693          	mv	a3,a5
20404490:	01400613          	li	a2,20
20404494:	00100593          	li	a1,1
20404498:	0001c517          	auipc	a0,0x1c
2040449c:	02850513          	addi	a0,a0,40 # 204204c0 <__func__.3846+0x2e0>
204044a0:	6e90e0ef          	jal	ra,20413388 <fwrite>
          status = -1;
204044a4:	fff00793          	li	a5,-1
204044a8:	fef42623          	sw	a5,-20(s0)
          break;
204044ac:	1300006f          	j	204045dc <TVMGraphExecutorNode_Load+0x3fc>
        }
        reader->ReadUnsignedInteger(reader, &(inputs->node_id));
204044b0:	f2842783          	lw	a5,-216(s0)
204044b4:	0247a703          	lw	a4,36(a5)
204044b8:	fdc42783          	lw	a5,-36(s0)
204044bc:	00078593          	mv	a1,a5
204044c0:	f2842503          	lw	a0,-216(s0)
204044c4:	000700e7          	jalr	a4
        if (!reader->NextArrayItem(reader)) {
204044c8:	f2842783          	lw	a5,-216(s0)
204044cc:	03c7a783          	lw	a5,60(a5)
204044d0:	f2842503          	lw	a0,-216(s0)
204044d4:	000780e7          	jalr	a5
204044d8:	00050793          	mv	a5,a0
204044dc:	02079c63          	bnez	a5,20404514 <TVMGraphExecutorNode_Load+0x334>
          fprintf(stderr, "invalid json format\n");
204044e0:	5fbfc797          	auipc	a5,0x5fbfc
204044e4:	55878793          	addi	a5,a5,1368 # 80000a38 <_impure_ptr>
204044e8:	0007a783          	lw	a5,0(a5)
204044ec:	00c7a783          	lw	a5,12(a5)
204044f0:	00078693          	mv	a3,a5
204044f4:	01400613          	li	a2,20
204044f8:	00100593          	li	a1,1
204044fc:	0001c517          	auipc	a0,0x1c
20404500:	fc450513          	addi	a0,a0,-60 # 204204c0 <__func__.3846+0x2e0>
20404504:	6850e0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20404508:	fff00793          	li	a5,-1
2040450c:	fef42623          	sw	a5,-20(s0)
          break;
20404510:	0cc0006f          	j	204045dc <TVMGraphExecutorNode_Load+0x3fc>
        }
        reader->ReadUnsignedInteger(reader, &(inputs->index));
20404514:	f2842783          	lw	a5,-216(s0)
20404518:	0247a703          	lw	a4,36(a5)
2040451c:	fdc42783          	lw	a5,-36(s0)
20404520:	00478793          	addi	a5,a5,4
20404524:	00078593          	mv	a1,a5
20404528:	f2842503          	lw	a0,-216(s0)
2040452c:	000700e7          	jalr	a4
        if (reader->NextArrayItem(reader)) {
20404530:	f2842783          	lw	a5,-216(s0)
20404534:	03c7a783          	lw	a5,60(a5)
20404538:	f2842503          	lw	a0,-216(s0)
2040453c:	000780e7          	jalr	a5
20404540:	00050793          	mv	a5,a0
20404544:	06078663          	beqz	a5,204045b0 <TVMGraphExecutorNode_Load+0x3d0>
          reader->ReadUnsignedInteger(reader, &(inputs->version));
20404548:	f2842783          	lw	a5,-216(s0)
2040454c:	0247a703          	lw	a4,36(a5)
20404550:	fdc42783          	lw	a5,-36(s0)
20404554:	00878793          	addi	a5,a5,8
20404558:	00078593          	mv	a1,a5
2040455c:	f2842503          	lw	a0,-216(s0)
20404560:	000700e7          	jalr	a4
          if (reader->NextArrayItem(reader)) {
20404564:	f2842783          	lw	a5,-216(s0)
20404568:	03c7a783          	lw	a5,60(a5)
2040456c:	f2842503          	lw	a0,-216(s0)
20404570:	000780e7          	jalr	a5
20404574:	00050793          	mv	a5,a0
20404578:	04078063          	beqz	a5,204045b8 <TVMGraphExecutorNode_Load+0x3d8>
            fprintf(stderr, "invalid json format\n");
2040457c:	5fbfc797          	auipc	a5,0x5fbfc
20404580:	4bc78793          	addi	a5,a5,1212 # 80000a38 <_impure_ptr>
20404584:	0007a783          	lw	a5,0(a5)
20404588:	00c7a783          	lw	a5,12(a5)
2040458c:	00078693          	mv	a3,a5
20404590:	01400613          	li	a2,20
20404594:	00100593          	li	a1,1
20404598:	0001c517          	auipc	a0,0x1c
2040459c:	f2850513          	addi	a0,a0,-216 # 204204c0 <__func__.3846+0x2e0>
204045a0:	5e90e0ef          	jal	ra,20413388 <fwrite>
            status = -1;
204045a4:	fff00793          	li	a5,-1
204045a8:	fef42623          	sw	a5,-20(s0)
            break;
204045ac:	0300006f          	j	204045dc <TVMGraphExecutorNode_Load+0x3fc>
          }
        } else {
          inputs->version = 0;
204045b0:	fdc42783          	lw	a5,-36(s0)
204045b4:	0007a423          	sw	zero,8(a5)
        }
        count++;
204045b8:	fe442783          	lw	a5,-28(s0)
204045bc:	00178793          	addi	a5,a5,1
204045c0:	fef42223          	sw	a5,-28(s0)
      while (reader->NextArrayItem(reader)) {
204045c4:	f2842783          	lw	a5,-216(s0)
204045c8:	03c7a783          	lw	a5,60(a5)
204045cc:	f2842503          	lw	a0,-216(s0)
204045d0:	000780e7          	jalr	a5
204045d4:	00050793          	mv	a5,a0
204045d8:	e20794e3          	bnez	a5,20404400 <TVMGraphExecutorNode_Load+0x220>
      }
      node->inputs_count = count;
204045dc:	f2c42783          	lw	a5,-212(s0)
204045e0:	fe442703          	lw	a4,-28(s0)
204045e4:	10e7a823          	sw	a4,272(a5)
      bitmask |= 4;
204045e8:	fe842783          	lw	a5,-24(s0)
204045ec:	0047e793          	ori	a5,a5,4
204045f0:	fef42423          	sw	a5,-24(s0)
204045f4:	0f00006f          	j	204046e4 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "attr") || !strcmp(key, "attrs")) {
204045f8:	fc840793          	addi	a5,s0,-56
204045fc:	0001c597          	auipc	a1,0x1c
20404600:	edc58593          	addi	a1,a1,-292 # 204204d8 <__func__.3846+0x2f8>
20404604:	00078513          	mv	a0,a5
20404608:	1060f0ef          	jal	ra,2041370e <strcmp>
2040460c:	00050793          	mv	a5,a0
20404610:	02078063          	beqz	a5,20404630 <TVMGraphExecutorNode_Load+0x450>
20404614:	fc840793          	addi	a5,s0,-56
20404618:	0001c597          	auipc	a1,0x1c
2040461c:	ec858593          	addi	a1,a1,-312 # 204204e0 <__func__.3846+0x300>
20404620:	00078513          	mv	a0,a5
20404624:	0ea0f0ef          	jal	ra,2041370e <strcmp>
20404628:	00050793          	mv	a5,a0
2040462c:	02079c63          	bnez	a5,20404664 <TVMGraphExecutorNode_Load+0x484>
      TVMOpParam param;

      TVMGraphExecutorNode_LoadAttrs(node, reader, &param);
20404630:	f3840793          	addi	a5,s0,-200
20404634:	00078613          	mv	a2,a5
20404638:	f2842583          	lw	a1,-216(s0)
2040463c:	f2c42503          	lw	a0,-212(s0)
20404640:	949ff0ef          	jal	ra,20403f88 <TVMGraphExecutorNode_LoadAttrs>
      memcpy(&node->param, &param, sizeof(param));
20404644:	f2c42783          	lw	a5,-212(s0)
20404648:	08878793          	addi	a5,a5,136
2040464c:	f3840713          	addi	a4,s0,-200
20404650:	08400613          	li	a2,132
20404654:	00070593          	mv	a1,a4
20404658:	00078513          	mv	a0,a5
2040465c:	6790e0ef          	jal	ra,204134d4 <memcpy>
    } else if (!strcmp(key, "attr") || !strcmp(key, "attrs")) {
20404660:	0840006f          	j	204046e4 <TVMGraphExecutorNode_Load+0x504>
    } else if (!strcmp(key, "control_deps")) {
20404664:	fc840793          	addi	a5,s0,-56
20404668:	0001c597          	auipc	a1,0x1c
2040466c:	e8058593          	addi	a1,a1,-384 # 204204e8 <__func__.3846+0x308>
20404670:	00078513          	mv	a0,a5
20404674:	09a0f0ef          	jal	ra,2041370e <strcmp>
20404678:	00050793          	mv	a5,a0
2040467c:	02079c63          	bnez	a5,204046b4 <TVMGraphExecutorNode_Load+0x4d4>
      fprintf(stderr, "do not support key %s", key);
20404680:	5fbfc797          	auipc	a5,0x5fbfc
20404684:	3b878793          	addi	a5,a5,952 # 80000a38 <_impure_ptr>
20404688:	0007a783          	lw	a5,0(a5)
2040468c:	00c7a783          	lw	a5,12(a5)
20404690:	fc840713          	addi	a4,s0,-56
20404694:	00070613          	mv	a2,a4
20404698:	0001c597          	auipc	a1,0x1c
2040469c:	e6058593          	addi	a1,a1,-416 # 204204f8 <__func__.3846+0x318>
204046a0:	00078513          	mv	a0,a5
204046a4:	44b0e0ef          	jal	ra,204132ee <fprintf>
      status = -1;
204046a8:	fff00793          	li	a5,-1
204046ac:	fef42623          	sw	a5,-20(s0)
204046b0:	0340006f          	j	204046e4 <TVMGraphExecutorNode_Load+0x504>
    } else {
      fprintf(stderr, "do not support key %s", key);
204046b4:	5fbfc797          	auipc	a5,0x5fbfc
204046b8:	38478793          	addi	a5,a5,900 # 80000a38 <_impure_ptr>
204046bc:	0007a783          	lw	a5,0(a5)
204046c0:	00c7a783          	lw	a5,12(a5)
204046c4:	fc840713          	addi	a4,s0,-56
204046c8:	00070613          	mv	a2,a4
204046cc:	0001c597          	auipc	a1,0x1c
204046d0:	e2c58593          	addi	a1,a1,-468 # 204204f8 <__func__.3846+0x318>
204046d4:	00078513          	mv	a0,a5
204046d8:	4170e0ef          	jal	ra,204132ee <fprintf>
      status = -1;
204046dc:	fff00793          	li	a5,-1
204046e0:	fef42623          	sw	a5,-20(s0)
    }
    if (status != 0) {
204046e4:	fec42783          	lw	a5,-20(s0)
204046e8:	02079663          	bnez	a5,20404714 <TVMGraphExecutorNode_Load+0x534>
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
204046ec:	f2842783          	lw	a5,-216(s0)
204046f0:	0387a703          	lw	a4,56(a5)
204046f4:	fc840793          	addi	a5,s0,-56
204046f8:	01400613          	li	a2,20
204046fc:	00078593          	mv	a1,a5
20404700:	f2842503          	lw	a0,-216(s0)
20404704:	000700e7          	jalr	a4
20404708:	00050793          	mv	a5,a0
2040470c:	b00794e3          	bnez	a5,20404214 <TVMGraphExecutorNode_Load+0x34>
20404710:	0080006f          	j	20404718 <TVMGraphExecutorNode_Load+0x538>
      break;
20404714:	00000013          	nop
    }
  }
  if (bitmask != (1 | 2 | 4)) {
20404718:	fe842703          	lw	a4,-24(s0)
2040471c:	00700793          	li	a5,7
20404720:	02f70a63          	beq	a4,a5,20404754 <TVMGraphExecutorNode_Load+0x574>
    fprintf(stderr, "invalid format\n");
20404724:	5fbfc797          	auipc	a5,0x5fbfc
20404728:	31478793          	addi	a5,a5,788 # 80000a38 <_impure_ptr>
2040472c:	0007a783          	lw	a5,0(a5)
20404730:	00c7a783          	lw	a5,12(a5)
20404734:	00078693          	mv	a3,a5
20404738:	00f00613          	li	a2,15
2040473c:	00100593          	li	a1,1
20404740:	0001c517          	auipc	a0,0x1c
20404744:	cd450513          	addi	a0,a0,-812 # 20420414 <__func__.3846+0x234>
20404748:	4410e0ef          	jal	ra,20413388 <fwrite>
    status = -1;
2040474c:	fff00793          	li	a5,-1
20404750:	fef42623          	sw	a5,-20(s0)
  }
  return status;
20404754:	fec42783          	lw	a5,-20(s0)
}
20404758:	00078513          	mv	a0,a5
2040475c:	0dc12083          	lw	ra,220(sp)
20404760:	0d812403          	lw	s0,216(sp)
20404764:	0e010113          	addi	sp,sp,224
20404768:	00008067          	ret

2040476c <TVMGraphExecutorNodeCreate>:

TVMGraphExecutorNode TVMGraphExecutorNodeCreate() {
2040476c:	e7010113          	addi	sp,sp,-400
20404770:	18112623          	sw	ra,396(sp)
20404774:	18812423          	sw	s0,392(sp)
20404778:	19010413          	addi	s0,sp,400
2040477c:	e6a42e23          	sw	a0,-388(s0)
  TVMGraphExecutorNode node;
  memset(&node, 0, sizeof(TVMGraphExecutorNode));
20404780:	e8440793          	addi	a5,s0,-380
20404784:	16c00613          	li	a2,364
20404788:	00000593          	li	a1,0
2040478c:	00078513          	mv	a0,a5
20404790:	6030e0ef          	jal	ra,20413592 <memset>
  node.LoadAttrs = TVMGraphExecutorNode_LoadAttrs;
20404794:	fffff797          	auipc	a5,0xfffff
20404798:	7f478793          	addi	a5,a5,2036 # 20403f88 <TVMGraphExecutorNode_LoadAttrs>
2040479c:	fef42423          	sw	a5,-24(s0)
  node.Load = TVMGraphExecutorNode_Load;
204047a0:	00000797          	auipc	a5,0x0
204047a4:	a4078793          	addi	a5,a5,-1472 # 204041e0 <TVMGraphExecutorNode_Load>
204047a8:	fef42623          	sw	a5,-20(s0)
  return node;
204047ac:	e7c42783          	lw	a5,-388(s0)
204047b0:	00078693          	mv	a3,a5
204047b4:	e8440793          	addi	a5,s0,-380
204047b8:	16c00713          	li	a4,364
204047bc:	00070613          	mv	a2,a4
204047c0:	00078593          	mv	a1,a5
204047c4:	00068513          	mv	a0,a3
204047c8:	50d0e0ef          	jal	ra,204134d4 <memcpy>
}
204047cc:	e7c42503          	lw	a0,-388(s0)
204047d0:	18c12083          	lw	ra,396(sp)
204047d4:	18812403          	lw	s0,392(sp)
204047d8:	19010113          	addi	sp,sp,400
204047dc:	00008067          	ret

204047e0 <TVMGraphExecutorNodeRelease>:

int TVMGraphExecutorNodeRelease(TVMGraphExecutorNode* node) {
204047e0:	fd010113          	addi	sp,sp,-48
204047e4:	02112623          	sw	ra,44(sp)
204047e8:	02812423          	sw	s0,40(sp)
204047ec:	03010413          	addi	s0,sp,48
204047f0:	fca42e23          	sw	a0,-36(s0)
  if (!node) {
204047f4:	fdc42783          	lw	a5,-36(s0)
204047f8:	00079663          	bnez	a5,20404804 <TVMGraphExecutorNodeRelease+0x24>
    return 0;
204047fc:	00000793          	li	a5,0
20404800:	0540006f          	j	20404854 <TVMGraphExecutorNodeRelease+0x74>
  }
  if (node->inputs) {
20404804:	fdc42783          	lw	a5,-36(s0)
20404808:	10c7a783          	lw	a5,268(a5)
2040480c:	04078263          	beqz	a5,20404850 <TVMGraphExecutorNodeRelease+0x70>
    DLDevice dev = {kDLCPU, 0};
20404810:	00100793          	li	a5,1
20404814:	fef42223          	sw	a5,-28(s0)
20404818:	fe042423          	sw	zero,-24(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(node->inputs, dev);
2040481c:	fdc42783          	lw	a5,-36(s0)
20404820:	10c7a783          	lw	a5,268(a5)
20404824:	fe442583          	lw	a1,-28(s0)
20404828:	fe842603          	lw	a2,-24(s0)
2040482c:	00078513          	mv	a0,a5
20404830:	d54fc0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20404834:	fea42623          	sw	a0,-20(s0)
    node->inputs = 0;
20404838:	fdc42783          	lw	a5,-36(s0)
2040483c:	1007a623          	sw	zero,268(a5)
    if (err != kTvmErrorNoError) {
20404840:	fec42783          	lw	a5,-20(s0)
20404844:	00078663          	beqz	a5,20404850 <TVMGraphExecutorNodeRelease+0x70>
      return -1;
20404848:	fff00793          	li	a5,-1
2040484c:	0080006f          	j	20404854 <TVMGraphExecutorNodeRelease+0x74>
    }
  }

  return 0;
20404850:	00000793          	li	a5,0
}
20404854:	00078513          	mv	a0,a5
20404858:	02c12083          	lw	ra,44(sp)
2040485c:	02812403          	lw	s0,40(sp)
20404860:	03010113          	addi	sp,sp,48
20404864:	00008067          	ret

20404868 <TVMGraphExecutorGraphAttr_Load>:

int TVMGraphExecutorGraphAttr_Load(TVMGraphExecutorGraphAttr* attr, JSONReader* reader) {
20404868:	f5010113          	addi	sp,sp,-176
2040486c:	0a112623          	sw	ra,172(sp)
20404870:	0a812423          	sw	s0,168(sp)
20404874:	0b010413          	addi	s0,sp,176
20404878:	f4a42e23          	sw	a0,-164(s0)
2040487c:	f4b42c23          	sw	a1,-168(s0)
  int status = 0;
20404880:	fe042623          	sw	zero,-20(s0)
  int bitmask = 0;
20404884:	fe042423          	sw	zero,-24(s0)
  char key[16], type[16];
  uint32_t storage_id_count = 0;
20404888:	fe042223          	sw	zero,-28(s0)
  uint32_t dltype_count = 0;
2040488c:	fe042023          	sw	zero,-32(s0)
  uint32_t shape_count = 0;
20404890:	fc042e23          	sw	zero,-36(s0)
  uint32_t device_index_count = 0;
20404894:	fc042c23          	sw	zero,-40(s0)
  reader->BeginObject(reader);
20404898:	f5842783          	lw	a5,-168(s0)
2040489c:	0347a783          	lw	a5,52(a5)
204048a0:	f5842503          	lw	a0,-168(s0)
204048a4:	000780e7          	jalr	a5
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
204048a8:	0b40106f          	j	2040595c <TVMGraphExecutorGraphAttr_Load+0x10f4>
    if (!strcmp(key, "dltype")) {
204048ac:	fac40793          	addi	a5,s0,-84
204048b0:	0001c597          	auipc	a1,0x1c
204048b4:	c6058593          	addi	a1,a1,-928 # 20420510 <__func__.3846+0x330>
204048b8:	00078513          	mv	a0,a5
204048bc:	6530e0ef          	jal	ra,2041370e <strcmp>
204048c0:	00050793          	mv	a5,a0
204048c4:	36079e63          	bnez	a5,20404c40 <TVMGraphExecutorGraphAttr_Load+0x3d8>
      reader->BeginArray(reader);
204048c8:	f5842783          	lw	a5,-168(s0)
204048cc:	0307a783          	lw	a5,48(a5)
204048d0:	f5842503          	lw	a0,-168(s0)
204048d4:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
204048d8:	f5842783          	lw	a5,-168(s0)
204048dc:	03c7a783          	lw	a5,60(a5)
204048e0:	f5842503          	lw	a0,-168(s0)
204048e4:	000780e7          	jalr	a5
204048e8:	00050793          	mv	a5,a0
204048ec:	02079c63          	bnez	a5,20404924 <TVMGraphExecutorGraphAttr_Load+0xbc>
        fprintf(stderr, "Invalid json format\n");
204048f0:	5fbfc797          	auipc	a5,0x5fbfc
204048f4:	14878793          	addi	a5,a5,328 # 80000a38 <_impure_ptr>
204048f8:	0007a783          	lw	a5,0(a5)
204048fc:	00c7a783          	lw	a5,12(a5)
20404900:	00078693          	mv	a3,a5
20404904:	01400613          	li	a2,20
20404908:	00100593          	li	a1,1
2040490c:	0001c517          	auipc	a0,0x1c
20404910:	c0c50513          	addi	a0,a0,-1012 # 20420518 <__func__.3846+0x338>
20404914:	2750e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404918:	fff00793          	li	a5,-1
2040491c:	fef42623          	sw	a5,-20(s0)
        break;
20404920:	0640106f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20404924:	f5842783          	lw	a5,-168(s0)
20404928:	02c7a703          	lw	a4,44(a5)
2040492c:	f9c40793          	addi	a5,s0,-100
20404930:	01000613          	li	a2,16
20404934:	00078593          	mv	a1,a5
20404938:	f5842503          	lw	a0,-168(s0)
2040493c:	000700e7          	jalr	a4
20404940:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20404944:	fec42783          	lw	a5,-20(s0)
20404948:	02078863          	beqz	a5,20404978 <TVMGraphExecutorGraphAttr_Load+0x110>
        fprintf(stderr, "error reading dltype type\n");
2040494c:	5fbfc797          	auipc	a5,0x5fbfc
20404950:	0ec78793          	addi	a5,a5,236 # 80000a38 <_impure_ptr>
20404954:	0007a783          	lw	a5,0(a5)
20404958:	00c7a783          	lw	a5,12(a5)
2040495c:	00078693          	mv	a3,a5
20404960:	01a00613          	li	a2,26
20404964:	00100593          	li	a1,1
20404968:	0001c517          	auipc	a0,0x1c
2040496c:	bc850513          	addi	a0,a0,-1080 # 20420530 <__func__.3846+0x350>
20404970:	2190e0ef          	jal	ra,20413388 <fwrite>
        break;
20404974:	0100106f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (strcmp(type, "list_str")) {
20404978:	f9c40793          	addi	a5,s0,-100
2040497c:	0001c597          	auipc	a1,0x1c
20404980:	bd058593          	addi	a1,a1,-1072 # 2042054c <__func__.3846+0x36c>
20404984:	00078513          	mv	a0,a5
20404988:	5870e0ef          	jal	ra,2041370e <strcmp>
2040498c:	00050793          	mv	a5,a0
20404990:	02078c63          	beqz	a5,204049c8 <TVMGraphExecutorGraphAttr_Load+0x160>
        fprintf(stderr, "Invalid json format\n");
20404994:	5fbfc797          	auipc	a5,0x5fbfc
20404998:	0a478793          	addi	a5,a5,164 # 80000a38 <_impure_ptr>
2040499c:	0007a783          	lw	a5,0(a5)
204049a0:	00c7a783          	lw	a5,12(a5)
204049a4:	00078693          	mv	a3,a5
204049a8:	01400613          	li	a2,20
204049ac:	00100593          	li	a1,1
204049b0:	0001c517          	auipc	a0,0x1c
204049b4:	b6850513          	addi	a0,a0,-1176 # 20420518 <__func__.3846+0x338>
204049b8:	1d10e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
204049bc:	fff00793          	li	a5,-1
204049c0:	fef42623          	sw	a5,-20(s0)
        break;
204049c4:	7c10006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
204049c8:	f5842783          	lw	a5,-168(s0)
204049cc:	03c7a783          	lw	a5,60(a5)
204049d0:	f5842503          	lw	a0,-168(s0)
204049d4:	000780e7          	jalr	a5
204049d8:	00050793          	mv	a5,a0
204049dc:	02079c63          	bnez	a5,20404a14 <TVMGraphExecutorGraphAttr_Load+0x1ac>
        fprintf(stderr, "Invalid json format\n");
204049e0:	5fbfc797          	auipc	a5,0x5fbfc
204049e4:	05878793          	addi	a5,a5,88 # 80000a38 <_impure_ptr>
204049e8:	0007a783          	lw	a5,0(a5)
204049ec:	00c7a783          	lw	a5,12(a5)
204049f0:	00078693          	mv	a3,a5
204049f4:	01400613          	li	a2,20
204049f8:	00100593          	li	a1,1
204049fc:	0001c517          	auipc	a0,0x1c
20404a00:	b1c50513          	addi	a0,a0,-1252 # 20420518 <__func__.3846+0x338>
20404a04:	1850e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404a08:	fff00793          	li	a5,-1
20404a0c:	fef42623          	sw	a5,-20(s0)
        break;
20404a10:	7750006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
20404a14:	f5842783          	lw	a5,-168(s0)
20404a18:	0307a783          	lw	a5,48(a5)
20404a1c:	f5842503          	lw	a0,-168(s0)
20404a20:	000780e7          	jalr	a5
      size_t num_items = 0;
20404a24:	f8042c23          	sw	zero,-104(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20404a28:	f5842783          	lw	a5,-168(s0)
20404a2c:	0407a703          	lw	a4,64(a5)
20404a30:	f9840793          	addi	a5,s0,-104
20404a34:	00078593          	mv	a1,a5
20404a38:	f5842503          	lw	a0,-168(s0)
20404a3c:	000700e7          	jalr	a4
20404a40:	00050793          	mv	a5,a0
20404a44:	02078c63          	beqz	a5,20404a7c <TVMGraphExecutorGraphAttr_Load+0x214>
        fprintf(stderr, "error determing list_str length\n");
20404a48:	5fbfc797          	auipc	a5,0x5fbfc
20404a4c:	ff078793          	addi	a5,a5,-16 # 80000a38 <_impure_ptr>
20404a50:	0007a783          	lw	a5,0(a5)
20404a54:	00c7a783          	lw	a5,12(a5)
20404a58:	00078693          	mv	a3,a5
20404a5c:	02000613          	li	a2,32
20404a60:	00100593          	li	a1,1
20404a64:	0001c517          	auipc	a0,0x1c
20404a68:	af450513          	addi	a0,a0,-1292 # 20420558 <__func__.3846+0x378>
20404a6c:	11d0e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404a70:	fff00793          	li	a5,-1
20404a74:	fef42623          	sw	a5,-20(s0)
        break;
20404a78:	70d0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
20404a7c:	00100793          	li	a5,1
20404a80:	f8f42823          	sw	a5,-112(s0)
20404a84:	f8042a23          	sw	zero,-108(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(TVM_CRT_MAX_STRLEN_DLTYPE * num_items, dev,
20404a88:	f9842703          	lw	a4,-104(s0)
20404a8c:	00070793          	mv	a5,a4
20404a90:	00279793          	slli	a5,a5,0x2
20404a94:	00e787b3          	add	a5,a5,a4
20404a98:	00179793          	slli	a5,a5,0x1
20404a9c:	00078713          	mv	a4,a5
                                                      (void**)&attr->dltype);
20404aa0:	f5c42783          	lw	a5,-164(s0)
20404aa4:	00c78793          	addi	a5,a5,12
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(TVM_CRT_MAX_STRLEN_DLTYPE * num_items, dev,
20404aa8:	00078693          	mv	a3,a5
20404aac:	f9042583          	lw	a1,-112(s0)
20404ab0:	f9442603          	lw	a2,-108(s0)
20404ab4:	00070513          	mv	a0,a4
20404ab8:	a68fc0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20404abc:	faa42e23          	sw	a0,-68(s0)
      if (err != kTvmErrorNoError) {
20404ac0:	fbc42783          	lw	a5,-68(s0)
20404ac4:	02078863          	beqz	a5,20404af4 <TVMGraphExecutorGraphAttr_Load+0x28c>
        fprintf(stderr, "memory allocate error: %08x", err);
20404ac8:	5fbfc797          	auipc	a5,0x5fbfc
20404acc:	f7078793          	addi	a5,a5,-144 # 80000a38 <_impure_ptr>
20404ad0:	0007a783          	lw	a5,0(a5)
20404ad4:	00c7a783          	lw	a5,12(a5)
20404ad8:	fbc42603          	lw	a2,-68(s0)
20404adc:	0001c597          	auipc	a1,0x1c
20404ae0:	9ac58593          	addi	a1,a1,-1620 # 20420488 <__func__.3846+0x2a8>
20404ae4:	00078513          	mv	a0,a5
20404ae8:	0070e0ef          	jal	ra,204132ee <fprintf>
        return -1;
20404aec:	fff00793          	li	a5,-1
20404af0:	6d50006f          	j	204059c4 <TVMGraphExecutorGraphAttr_Load+0x115c>
      }
      dltype_count = 0;
20404af4:	fe042023          	sw	zero,-32(s0)
      while (reader->NextArrayItem(reader)) {
20404af8:	0c40006f          	j	20404bbc <TVMGraphExecutorGraphAttr_Load+0x354>
        if (dltype_count == num_items) {
20404afc:	f9842783          	lw	a5,-104(s0)
20404b00:	fe042703          	lw	a4,-32(s0)
20404b04:	02f71e63          	bne	a4,a5,20404b40 <TVMGraphExecutorGraphAttr_Load+0x2d8>
          fprintf(stderr, "array too big\n");
20404b08:	5fbfc797          	auipc	a5,0x5fbfc
20404b0c:	f3078793          	addi	a5,a5,-208 # 80000a38 <_impure_ptr>
20404b10:	0007a783          	lw	a5,0(a5)
20404b14:	00c7a783          	lw	a5,12(a5)
20404b18:	00078693          	mv	a3,a5
20404b1c:	00e00613          	li	a2,14
20404b20:	00100593          	li	a1,1
20404b24:	0001c517          	auipc	a0,0x1c
20404b28:	a5850513          	addi	a0,a0,-1448 # 2042057c <__func__.3846+0x39c>
20404b2c:	05d0e0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20404b30:	fff00793          	li	a5,-1
20404b34:	fef42623          	sw	a5,-20(s0)
          return status;
20404b38:	fec42783          	lw	a5,-20(s0)
20404b3c:	6890006f          	j	204059c4 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        status = reader->ReadString(reader, attr->dltype + dltype_count * TVM_CRT_MAX_STRLEN_DLTYPE,
20404b40:	f5842783          	lw	a5,-168(s0)
20404b44:	02c7a803          	lw	a6,44(a5)
20404b48:	f5c42783          	lw	a5,-164(s0)
20404b4c:	00c7a683          	lw	a3,12(a5)
20404b50:	fe042703          	lw	a4,-32(s0)
20404b54:	00070793          	mv	a5,a4
20404b58:	00279793          	slli	a5,a5,0x2
20404b5c:	00e787b3          	add	a5,a5,a4
20404b60:	00179793          	slli	a5,a5,0x1
20404b64:	00f687b3          	add	a5,a3,a5
20404b68:	00a00613          	li	a2,10
20404b6c:	00078593          	mv	a1,a5
20404b70:	f5842503          	lw	a0,-168(s0)
20404b74:	000800e7          	jalr	a6
20404b78:	fea42623          	sw	a0,-20(s0)
                                    TVM_CRT_MAX_STRLEN_DLTYPE);
        if (status != 0) {
20404b7c:	fec42783          	lw	a5,-20(s0)
20404b80:	02078863          	beqz	a5,20404bb0 <TVMGraphExecutorGraphAttr_Load+0x348>
          fprintf(stderr, "error reading dltype array item");
20404b84:	5fbfc797          	auipc	a5,0x5fbfc
20404b88:	eb478793          	addi	a5,a5,-332 # 80000a38 <_impure_ptr>
20404b8c:	0007a783          	lw	a5,0(a5)
20404b90:	00c7a783          	lw	a5,12(a5)
20404b94:	00078693          	mv	a3,a5
20404b98:	01f00613          	li	a2,31
20404b9c:	00100593          	li	a1,1
20404ba0:	0001c517          	auipc	a0,0x1c
20404ba4:	9ec50513          	addi	a0,a0,-1556 # 2042058c <__func__.3846+0x3ac>
20404ba8:	7e00e0ef          	jal	ra,20413388 <fwrite>
          break;
20404bac:	0280006f          	j	20404bd4 <TVMGraphExecutorGraphAttr_Load+0x36c>
        }
        dltype_count++;
20404bb0:	fe042783          	lw	a5,-32(s0)
20404bb4:	00178793          	addi	a5,a5,1
20404bb8:	fef42023          	sw	a5,-32(s0)
      while (reader->NextArrayItem(reader)) {
20404bbc:	f5842783          	lw	a5,-168(s0)
20404bc0:	03c7a783          	lw	a5,60(a5)
20404bc4:	f5842503          	lw	a0,-168(s0)
20404bc8:	000780e7          	jalr	a5
20404bcc:	00050793          	mv	a5,a0
20404bd0:	f20796e3          	bnez	a5,20404afc <TVMGraphExecutorGraphAttr_Load+0x294>
      }
      attr->dltype_count = dltype_count;
20404bd4:	f5c42783          	lw	a5,-164(s0)
20404bd8:	fe042703          	lw	a4,-32(s0)
20404bdc:	00e7a823          	sw	a4,16(a5)

      if (reader->NextArrayItem(reader)) {
20404be0:	f5842783          	lw	a5,-168(s0)
20404be4:	03c7a783          	lw	a5,60(a5)
20404be8:	f5842503          	lw	a0,-168(s0)
20404bec:	000780e7          	jalr	a5
20404bf0:	00050793          	mv	a5,a0
20404bf4:	02078e63          	beqz	a5,20404c30 <TVMGraphExecutorGraphAttr_Load+0x3c8>
        fprintf(stderr, "Invalid json format\n");
20404bf8:	5fbfc797          	auipc	a5,0x5fbfc
20404bfc:	e4078793          	addi	a5,a5,-448 # 80000a38 <_impure_ptr>
20404c00:	0007a783          	lw	a5,0(a5)
20404c04:	00c7a783          	lw	a5,12(a5)
20404c08:	00078693          	mv	a3,a5
20404c0c:	01400613          	li	a2,20
20404c10:	00100593          	li	a1,1
20404c14:	0001c517          	auipc	a0,0x1c
20404c18:	90450513          	addi	a0,a0,-1788 # 20420518 <__func__.3846+0x338>
20404c1c:	76c0e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404c20:	fff00793          	li	a5,-1
20404c24:	fef42623          	sw	a5,-20(s0)
        break;
20404c28:	00000013          	nop
20404c2c:	5590006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      bitmask |= 1;
20404c30:	fe842783          	lw	a5,-24(s0)
20404c34:	0017e793          	ori	a5,a5,1
20404c38:	fef42423          	sw	a5,-24(s0)
20404c3c:	5210006f          	j	2040595c <TVMGraphExecutorGraphAttr_Load+0x10f4>
    } else if (!strcmp(key, "storage_id")) {
20404c40:	fac40793          	addi	a5,s0,-84
20404c44:	0001c597          	auipc	a1,0x1c
20404c48:	96858593          	addi	a1,a1,-1688 # 204205ac <__func__.3846+0x3cc>
20404c4c:	00078513          	mv	a0,a5
20404c50:	2bf0e0ef          	jal	ra,2041370e <strcmp>
20404c54:	00050793          	mv	a5,a0
20404c58:	30079a63          	bnez	a5,20404f6c <TVMGraphExecutorGraphAttr_Load+0x704>
      reader->BeginArray(reader);
20404c5c:	f5842783          	lw	a5,-168(s0)
20404c60:	0307a783          	lw	a5,48(a5)
20404c64:	f5842503          	lw	a0,-168(s0)
20404c68:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20404c6c:	f5842783          	lw	a5,-168(s0)
20404c70:	03c7a783          	lw	a5,60(a5)
20404c74:	f5842503          	lw	a0,-168(s0)
20404c78:	000780e7          	jalr	a5
20404c7c:	00050793          	mv	a5,a0
20404c80:	02079c63          	bnez	a5,20404cb8 <TVMGraphExecutorGraphAttr_Load+0x450>
        fprintf(stderr, "Invalid json format\n");
20404c84:	5fbfc797          	auipc	a5,0x5fbfc
20404c88:	db478793          	addi	a5,a5,-588 # 80000a38 <_impure_ptr>
20404c8c:	0007a783          	lw	a5,0(a5)
20404c90:	00c7a783          	lw	a5,12(a5)
20404c94:	00078693          	mv	a3,a5
20404c98:	01400613          	li	a2,20
20404c9c:	00100593          	li	a1,1
20404ca0:	0001c517          	auipc	a0,0x1c
20404ca4:	87850513          	addi	a0,a0,-1928 # 20420518 <__func__.3846+0x338>
20404ca8:	6e00e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404cac:	fff00793          	li	a5,-1
20404cb0:	fef42623          	sw	a5,-20(s0)
        break;
20404cb4:	4d10006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20404cb8:	f5842783          	lw	a5,-168(s0)
20404cbc:	02c7a703          	lw	a4,44(a5)
20404cc0:	f9c40793          	addi	a5,s0,-100
20404cc4:	01000613          	li	a2,16
20404cc8:	00078593          	mv	a1,a5
20404ccc:	f5842503          	lw	a0,-168(s0)
20404cd0:	000700e7          	jalr	a4
20404cd4:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20404cd8:	fec42783          	lw	a5,-20(s0)
20404cdc:	02078663          	beqz	a5,20404d08 <TVMGraphExecutorGraphAttr_Load+0x4a0>
        fprintf(stderr, "error reading device_index array item");
20404ce0:	5fbfc797          	auipc	a5,0x5fbfc
20404ce4:	d5878793          	addi	a5,a5,-680 # 80000a38 <_impure_ptr>
20404ce8:	0007a783          	lw	a5,0(a5)
20404cec:	00c7a783          	lw	a5,12(a5)
20404cf0:	00078693          	mv	a3,a5
20404cf4:	02500613          	li	a2,37
20404cf8:	00100593          	li	a1,1
20404cfc:	0001c517          	auipc	a0,0x1c
20404d00:	8bc50513          	addi	a0,a0,-1860 # 204205b8 <__func__.3846+0x3d8>
20404d04:	6840e0ef          	jal	ra,20413388 <fwrite>
      }
      if (strcmp(type, "list_int")) {
20404d08:	f9c40793          	addi	a5,s0,-100
20404d0c:	0001c597          	auipc	a1,0x1c
20404d10:	8d458593          	addi	a1,a1,-1836 # 204205e0 <__func__.3846+0x400>
20404d14:	00078513          	mv	a0,a5
20404d18:	1f70e0ef          	jal	ra,2041370e <strcmp>
20404d1c:	00050793          	mv	a5,a0
20404d20:	02078c63          	beqz	a5,20404d58 <TVMGraphExecutorGraphAttr_Load+0x4f0>
        fprintf(stderr, "Invalid json format\n");
20404d24:	5fbfc797          	auipc	a5,0x5fbfc
20404d28:	d1478793          	addi	a5,a5,-748 # 80000a38 <_impure_ptr>
20404d2c:	0007a783          	lw	a5,0(a5)
20404d30:	00c7a783          	lw	a5,12(a5)
20404d34:	00078693          	mv	a3,a5
20404d38:	01400613          	li	a2,20
20404d3c:	00100593          	li	a1,1
20404d40:	0001b517          	auipc	a0,0x1b
20404d44:	7d850513          	addi	a0,a0,2008 # 20420518 <__func__.3846+0x338>
20404d48:	6400e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404d4c:	fff00793          	li	a5,-1
20404d50:	fef42623          	sw	a5,-20(s0)
        break;
20404d54:	4310006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
20404d58:	f5842783          	lw	a5,-168(s0)
20404d5c:	03c7a783          	lw	a5,60(a5)
20404d60:	f5842503          	lw	a0,-168(s0)
20404d64:	000780e7          	jalr	a5
20404d68:	00050793          	mv	a5,a0
20404d6c:	02079c63          	bnez	a5,20404da4 <TVMGraphExecutorGraphAttr_Load+0x53c>
        fprintf(stderr, "Invalid json format\n");
20404d70:	5fbfc797          	auipc	a5,0x5fbfc
20404d74:	cc878793          	addi	a5,a5,-824 # 80000a38 <_impure_ptr>
20404d78:	0007a783          	lw	a5,0(a5)
20404d7c:	00c7a783          	lw	a5,12(a5)
20404d80:	00078693          	mv	a3,a5
20404d84:	01400613          	li	a2,20
20404d88:	00100593          	li	a1,1
20404d8c:	0001b517          	auipc	a0,0x1b
20404d90:	78c50513          	addi	a0,a0,1932 # 20420518 <__func__.3846+0x338>
20404d94:	5f40e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404d98:	fff00793          	li	a5,-1
20404d9c:	fef42623          	sw	a5,-20(s0)
        break;
20404da0:	3e50006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
20404da4:	f5842783          	lw	a5,-168(s0)
20404da8:	0307a783          	lw	a5,48(a5)
20404dac:	f5842503          	lw	a0,-168(s0)
20404db0:	000780e7          	jalr	a5
      size_t num_items = 0;
20404db4:	f8042623          	sw	zero,-116(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20404db8:	f5842783          	lw	a5,-168(s0)
20404dbc:	0407a703          	lw	a4,64(a5)
20404dc0:	f8c40793          	addi	a5,s0,-116
20404dc4:	00078593          	mv	a1,a5
20404dc8:	f5842503          	lw	a0,-168(s0)
20404dcc:	000700e7          	jalr	a4
20404dd0:	00050793          	mv	a5,a0
20404dd4:	02078c63          	beqz	a5,20404e0c <TVMGraphExecutorGraphAttr_Load+0x5a4>
        fprintf(stderr, "error determing list_str length\n");
20404dd8:	5fbfc797          	auipc	a5,0x5fbfc
20404ddc:	c6078793          	addi	a5,a5,-928 # 80000a38 <_impure_ptr>
20404de0:	0007a783          	lw	a5,0(a5)
20404de4:	00c7a783          	lw	a5,12(a5)
20404de8:	00078693          	mv	a3,a5
20404dec:	02000613          	li	a2,32
20404df0:	00100593          	li	a1,1
20404df4:	0001b517          	auipc	a0,0x1b
20404df8:	76450513          	addi	a0,a0,1892 # 20420558 <__func__.3846+0x378>
20404dfc:	58c0e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404e00:	fff00793          	li	a5,-1
20404e04:	fef42623          	sw	a5,-20(s0)
        break;
20404e08:	37d0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
20404e0c:	00100793          	li	a5,1
20404e10:	f8f42223          	sw	a5,-124(s0)
20404e14:	f8042423          	sw	zero,-120(s0)
      tvm_crt_error_t err =
          TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev, (void**)&attr->storage_id);
20404e18:	f8c42783          	lw	a5,-116(s0)
20404e1c:	00279713          	slli	a4,a5,0x2
20404e20:	f5c42783          	lw	a5,-164(s0)
20404e24:	00478793          	addi	a5,a5,4
      tvm_crt_error_t err =
20404e28:	00078693          	mv	a3,a5
20404e2c:	f8442583          	lw	a1,-124(s0)
20404e30:	f8842603          	lw	a2,-120(s0)
20404e34:	00070513          	mv	a0,a4
20404e38:	ee9fb0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20404e3c:	fca42023          	sw	a0,-64(s0)
      if (err != kTvmErrorNoError) {
20404e40:	fc042783          	lw	a5,-64(s0)
20404e44:	02078863          	beqz	a5,20404e74 <TVMGraphExecutorGraphAttr_Load+0x60c>
        fprintf(stderr, "memory allocate error: %08x", err);
20404e48:	5fbfc797          	auipc	a5,0x5fbfc
20404e4c:	bf078793          	addi	a5,a5,-1040 # 80000a38 <_impure_ptr>
20404e50:	0007a783          	lw	a5,0(a5)
20404e54:	00c7a783          	lw	a5,12(a5)
20404e58:	fc042603          	lw	a2,-64(s0)
20404e5c:	0001b597          	auipc	a1,0x1b
20404e60:	62c58593          	addi	a1,a1,1580 # 20420488 <__func__.3846+0x2a8>
20404e64:	00078513          	mv	a0,a5
20404e68:	4860e0ef          	jal	ra,204132ee <fprintf>
        return -1;
20404e6c:	fff00793          	li	a5,-1
20404e70:	3550006f          	j	204059c4 <TVMGraphExecutorGraphAttr_Load+0x115c>
      }
      storage_id_count = 0;
20404e74:	fe042223          	sw	zero,-28(s0)
      while (reader->NextArrayItem(reader)) {
20404e78:	07c0006f          	j	20404ef4 <TVMGraphExecutorGraphAttr_Load+0x68c>
        if (storage_id_count == num_items) {
20404e7c:	f8c42783          	lw	a5,-116(s0)
20404e80:	fe442703          	lw	a4,-28(s0)
20404e84:	02f71e63          	bne	a4,a5,20404ec0 <TVMGraphExecutorGraphAttr_Load+0x658>
          fprintf(stderr, "array too big\n");
20404e88:	5fbfc797          	auipc	a5,0x5fbfc
20404e8c:	bb078793          	addi	a5,a5,-1104 # 80000a38 <_impure_ptr>
20404e90:	0007a783          	lw	a5,0(a5)
20404e94:	00c7a783          	lw	a5,12(a5)
20404e98:	00078693          	mv	a3,a5
20404e9c:	00e00613          	li	a2,14
20404ea0:	00100593          	li	a1,1
20404ea4:	0001b517          	auipc	a0,0x1b
20404ea8:	6d850513          	addi	a0,a0,1752 # 2042057c <__func__.3846+0x39c>
20404eac:	4dc0e0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20404eb0:	fff00793          	li	a5,-1
20404eb4:	fef42623          	sw	a5,-20(s0)
          return status;
20404eb8:	fec42783          	lw	a5,-20(s0)
20404ebc:	3090006f          	j	204059c4 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        reader->ReadUnsignedInteger(reader, &(attr->storage_id[storage_id_count]));
20404ec0:	f5842783          	lw	a5,-168(s0)
20404ec4:	0247a683          	lw	a3,36(a5)
20404ec8:	f5c42783          	lw	a5,-164(s0)
20404ecc:	0047a703          	lw	a4,4(a5)
20404ed0:	fe442783          	lw	a5,-28(s0)
20404ed4:	00279793          	slli	a5,a5,0x2
20404ed8:	00f707b3          	add	a5,a4,a5
20404edc:	00078593          	mv	a1,a5
20404ee0:	f5842503          	lw	a0,-168(s0)
20404ee4:	000680e7          	jalr	a3
        storage_id_count++;
20404ee8:	fe442783          	lw	a5,-28(s0)
20404eec:	00178793          	addi	a5,a5,1
20404ef0:	fef42223          	sw	a5,-28(s0)
      while (reader->NextArrayItem(reader)) {
20404ef4:	f5842783          	lw	a5,-168(s0)
20404ef8:	03c7a783          	lw	a5,60(a5)
20404efc:	f5842503          	lw	a0,-168(s0)
20404f00:	000780e7          	jalr	a5
20404f04:	00050793          	mv	a5,a0
20404f08:	f6079ae3          	bnez	a5,20404e7c <TVMGraphExecutorGraphAttr_Load+0x614>
      }
      if (reader->NextArrayItem(reader)) {
20404f0c:	f5842783          	lw	a5,-168(s0)
20404f10:	03c7a783          	lw	a5,60(a5)
20404f14:	f5842503          	lw	a0,-168(s0)
20404f18:	000780e7          	jalr	a5
20404f1c:	00050793          	mv	a5,a0
20404f20:	02078e63          	beqz	a5,20404f5c <TVMGraphExecutorGraphAttr_Load+0x6f4>
        fprintf(stderr, "Invalid json format\n");
20404f24:	5fbfc797          	auipc	a5,0x5fbfc
20404f28:	b1478793          	addi	a5,a5,-1260 # 80000a38 <_impure_ptr>
20404f2c:	0007a783          	lw	a5,0(a5)
20404f30:	00c7a783          	lw	a5,12(a5)
20404f34:	00078693          	mv	a3,a5
20404f38:	01400613          	li	a2,20
20404f3c:	00100593          	li	a1,1
20404f40:	0001b517          	auipc	a0,0x1b
20404f44:	5d850513          	addi	a0,a0,1496 # 20420518 <__func__.3846+0x338>
20404f48:	4400e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404f4c:	fff00793          	li	a5,-1
20404f50:	fef42623          	sw	a5,-20(s0)
        break;
20404f54:	00000013          	nop
20404f58:	22d0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      bitmask |= 2;
20404f5c:	fe842783          	lw	a5,-24(s0)
20404f60:	0027e793          	ori	a5,a5,2
20404f64:	fef42423          	sw	a5,-24(s0)
20404f68:	1f50006f          	j	2040595c <TVMGraphExecutorGraphAttr_Load+0x10f4>
    } else if (!strcmp(key, "shape")) {
20404f6c:	fac40793          	addi	a5,s0,-84
20404f70:	0001b597          	auipc	a1,0x1b
20404f74:	67c58593          	addi	a1,a1,1660 # 204205ec <__func__.3846+0x40c>
20404f78:	00078513          	mv	a0,a5
20404f7c:	7920e0ef          	jal	ra,2041370e <strcmp>
20404f80:	00050793          	mv	a5,a0
20404f84:	46079c63          	bnez	a5,204053fc <TVMGraphExecutorGraphAttr_Load+0xb94>
      reader->BeginArray(reader);
20404f88:	f5842783          	lw	a5,-168(s0)
20404f8c:	0307a783          	lw	a5,48(a5)
20404f90:	f5842503          	lw	a0,-168(s0)
20404f94:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20404f98:	f5842783          	lw	a5,-168(s0)
20404f9c:	03c7a783          	lw	a5,60(a5)
20404fa0:	f5842503          	lw	a0,-168(s0)
20404fa4:	000780e7          	jalr	a5
20404fa8:	00050793          	mv	a5,a0
20404fac:	02079c63          	bnez	a5,20404fe4 <TVMGraphExecutorGraphAttr_Load+0x77c>
        fprintf(stderr, "Invalid json format\n");
20404fb0:	5fbfc797          	auipc	a5,0x5fbfc
20404fb4:	a8878793          	addi	a5,a5,-1400 # 80000a38 <_impure_ptr>
20404fb8:	0007a783          	lw	a5,0(a5)
20404fbc:	00c7a783          	lw	a5,12(a5)
20404fc0:	00078693          	mv	a3,a5
20404fc4:	01400613          	li	a2,20
20404fc8:	00100593          	li	a1,1
20404fcc:	0001b517          	auipc	a0,0x1b
20404fd0:	54c50513          	addi	a0,a0,1356 # 20420518 <__func__.3846+0x338>
20404fd4:	3b40e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20404fd8:	fff00793          	li	a5,-1
20404fdc:	fef42623          	sw	a5,-20(s0)
        break;
20404fe0:	1a50006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20404fe4:	f5842783          	lw	a5,-168(s0)
20404fe8:	02c7a703          	lw	a4,44(a5)
20404fec:	f9c40793          	addi	a5,s0,-100
20404ff0:	01000613          	li	a2,16
20404ff4:	00078593          	mv	a1,a5
20404ff8:	f5842503          	lw	a0,-168(s0)
20404ffc:	000700e7          	jalr	a4
20405000:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20405004:	fec42783          	lw	a5,-20(s0)
20405008:	02078863          	beqz	a5,20405038 <TVMGraphExecutorGraphAttr_Load+0x7d0>
        fprintf(stderr, "error reading shape array item\n");
2040500c:	5fbfc797          	auipc	a5,0x5fbfc
20405010:	a2c78793          	addi	a5,a5,-1492 # 80000a38 <_impure_ptr>
20405014:	0007a783          	lw	a5,0(a5)
20405018:	00c7a783          	lw	a5,12(a5)
2040501c:	00078693          	mv	a3,a5
20405020:	01f00613          	li	a2,31
20405024:	00100593          	li	a1,1
20405028:	0001b517          	auipc	a0,0x1b
2040502c:	5cc50513          	addi	a0,a0,1484 # 204205f4 <__func__.3846+0x414>
20405030:	3580e0ef          	jal	ra,20413388 <fwrite>
        break;
20405034:	1510006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (strcmp(type, "list_shape")) {
20405038:	f9c40793          	addi	a5,s0,-100
2040503c:	0001b597          	auipc	a1,0x1b
20405040:	5d858593          	addi	a1,a1,1496 # 20420614 <__func__.3846+0x434>
20405044:	00078513          	mv	a0,a5
20405048:	6c60e0ef          	jal	ra,2041370e <strcmp>
2040504c:	00050793          	mv	a5,a0
20405050:	02078c63          	beqz	a5,20405088 <TVMGraphExecutorGraphAttr_Load+0x820>
        fprintf(stderr, "Invalid json format\n");
20405054:	5fbfc797          	auipc	a5,0x5fbfc
20405058:	9e478793          	addi	a5,a5,-1564 # 80000a38 <_impure_ptr>
2040505c:	0007a783          	lw	a5,0(a5)
20405060:	00c7a783          	lw	a5,12(a5)
20405064:	00078693          	mv	a3,a5
20405068:	01400613          	li	a2,20
2040506c:	00100593          	li	a1,1
20405070:	0001b517          	auipc	a0,0x1b
20405074:	4a850513          	addi	a0,a0,1192 # 20420518 <__func__.3846+0x338>
20405078:	3100e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
2040507c:	fff00793          	li	a5,-1
20405080:	fef42623          	sw	a5,-20(s0)
        break;
20405084:	1010006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
20405088:	f5842783          	lw	a5,-168(s0)
2040508c:	03c7a783          	lw	a5,60(a5)
20405090:	f5842503          	lw	a0,-168(s0)
20405094:	000780e7          	jalr	a5
20405098:	00050793          	mv	a5,a0
2040509c:	02079c63          	bnez	a5,204050d4 <TVMGraphExecutorGraphAttr_Load+0x86c>
        fprintf(stderr, "Invalid json format\n");
204050a0:	5fbfc797          	auipc	a5,0x5fbfc
204050a4:	99878793          	addi	a5,a5,-1640 # 80000a38 <_impure_ptr>
204050a8:	0007a783          	lw	a5,0(a5)
204050ac:	00c7a783          	lw	a5,12(a5)
204050b0:	00078693          	mv	a3,a5
204050b4:	01400613          	li	a2,20
204050b8:	00100593          	li	a1,1
204050bc:	0001b517          	auipc	a0,0x1b
204050c0:	45c50513          	addi	a0,a0,1116 # 20420518 <__func__.3846+0x338>
204050c4:	2c40e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
204050c8:	fff00793          	li	a5,-1
204050cc:	fef42623          	sw	a5,-20(s0)
        break;
204050d0:	0b50006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
204050d4:	f5842783          	lw	a5,-168(s0)
204050d8:	0307a783          	lw	a5,48(a5)
204050dc:	f5842503          	lw	a0,-168(s0)
204050e0:	000780e7          	jalr	a5
      size_t num_items = 0;
204050e4:	f8042023          	sw	zero,-128(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
204050e8:	f5842783          	lw	a5,-168(s0)
204050ec:	0407a703          	lw	a4,64(a5)
204050f0:	f8040793          	addi	a5,s0,-128
204050f4:	00078593          	mv	a1,a5
204050f8:	f5842503          	lw	a0,-168(s0)
204050fc:	000700e7          	jalr	a4
20405100:	00050793          	mv	a5,a0
20405104:	02078c63          	beqz	a5,2040513c <TVMGraphExecutorGraphAttr_Load+0x8d4>
        fprintf(stderr, "error determing list_str length\n");
20405108:	5fbfc797          	auipc	a5,0x5fbfc
2040510c:	93078793          	addi	a5,a5,-1744 # 80000a38 <_impure_ptr>
20405110:	0007a783          	lw	a5,0(a5)
20405114:	00c7a783          	lw	a5,12(a5)
20405118:	00078693          	mv	a3,a5
2040511c:	02000613          	li	a2,32
20405120:	00100593          	li	a1,1
20405124:	0001b517          	auipc	a0,0x1b
20405128:	43450513          	addi	a0,a0,1076 # 20420558 <__func__.3846+0x378>
2040512c:	25c0e0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405130:	fff00793          	li	a5,-1
20405134:	fef42623          	sw	a5,-20(s0)
        break;
20405138:	04d0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
2040513c:	00100793          	li	a5,1
20405140:	f6f42c23          	sw	a5,-136(s0)
20405144:	f6042e23          	sw	zero,-132(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20405148:	f8042703          	lw	a4,-128(s0)
2040514c:	00070793          	mv	a5,a4
20405150:	00179793          	slli	a5,a5,0x1
20405154:	00e787b3          	add	a5,a5,a4
20405158:	00479793          	slli	a5,a5,0x4
2040515c:	00078713          	mv	a4,a5
          sizeof(int64_t) * TVM_CRT_MAX_NDIM * num_items, dev, (void**)&attr->shape);
20405160:	f5c42783          	lw	a5,-164(s0)
20405164:	01478793          	addi	a5,a5,20
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20405168:	00078693          	mv	a3,a5
2040516c:	f7842583          	lw	a1,-136(s0)
20405170:	f7c42603          	lw	a2,-132(s0)
20405174:	00070513          	mv	a0,a4
20405178:	ba9fb0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
2040517c:	fca42423          	sw	a0,-56(s0)
      if (err != kTvmErrorNoError) {
20405180:	fc842783          	lw	a5,-56(s0)
20405184:	02078a63          	beqz	a5,204051b8 <TVMGraphExecutorGraphAttr_Load+0x950>
        fprintf(stderr, "memory allocate error: %08x", err);
20405188:	5fbfc797          	auipc	a5,0x5fbfc
2040518c:	8b078793          	addi	a5,a5,-1872 # 80000a38 <_impure_ptr>
20405190:	0007a783          	lw	a5,0(a5)
20405194:	00c7a783          	lw	a5,12(a5)
20405198:	fc842603          	lw	a2,-56(s0)
2040519c:	0001b597          	auipc	a1,0x1b
204051a0:	2ec58593          	addi	a1,a1,748 # 20420488 <__func__.3846+0x2a8>
204051a4:	00078513          	mv	a0,a5
204051a8:	1460e0ef          	jal	ra,204132ee <fprintf>
        status = -1;
204051ac:	fff00793          	li	a5,-1
204051b0:	fef42623          	sw	a5,-20(s0)
        break;
204051b4:	7d00006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev, (void**)&attr->ndim);
204051b8:	f8042783          	lw	a5,-128(s0)
204051bc:	00279713          	slli	a4,a5,0x2
204051c0:	f5c42783          	lw	a5,-164(s0)
204051c4:	01878793          	addi	a5,a5,24
204051c8:	00078693          	mv	a3,a5
204051cc:	f7842583          	lw	a1,-136(s0)
204051d0:	f7c42603          	lw	a2,-132(s0)
204051d4:	00070513          	mv	a0,a4
204051d8:	b49fb0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204051dc:	fca42423          	sw	a0,-56(s0)
      if (err != kTvmErrorNoError) {
204051e0:	fc842783          	lw	a5,-56(s0)
204051e4:	02078a63          	beqz	a5,20405218 <TVMGraphExecutorGraphAttr_Load+0x9b0>
        fprintf(stderr, "memory allocate error: %08x", err);
204051e8:	5fbfc797          	auipc	a5,0x5fbfc
204051ec:	85078793          	addi	a5,a5,-1968 # 80000a38 <_impure_ptr>
204051f0:	0007a783          	lw	a5,0(a5)
204051f4:	00c7a783          	lw	a5,12(a5)
204051f8:	fc842603          	lw	a2,-56(s0)
204051fc:	0001b597          	auipc	a1,0x1b
20405200:	28c58593          	addi	a1,a1,652 # 20420488 <__func__.3846+0x2a8>
20405204:	00078513          	mv	a0,a5
20405208:	0e60e0ef          	jal	ra,204132ee <fprintf>
        status = -1;
2040520c:	fff00793          	li	a5,-1
20405210:	fef42623          	sw	a5,-20(s0)
        break;
20405214:	7700006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      shape_count = 0;
20405218:	fc042e23          	sw	zero,-36(s0)
      while (reader->NextArrayItem(reader)) {
2040521c:	15c0006f          	j	20405378 <TVMGraphExecutorGraphAttr_Load+0xb10>
        if (shape_count == num_items) {
20405220:	f8042783          	lw	a5,-128(s0)
20405224:	fdc42703          	lw	a4,-36(s0)
20405228:	02f71e63          	bne	a4,a5,20405264 <TVMGraphExecutorGraphAttr_Load+0x9fc>
          fprintf(stderr, "array too big\n");
2040522c:	5fbfc797          	auipc	a5,0x5fbfc
20405230:	80c78793          	addi	a5,a5,-2036 # 80000a38 <_impure_ptr>
20405234:	0007a783          	lw	a5,0(a5)
20405238:	00c7a783          	lw	a5,12(a5)
2040523c:	00078693          	mv	a3,a5
20405240:	00e00613          	li	a2,14
20405244:	00100593          	li	a1,1
20405248:	0001b517          	auipc	a0,0x1b
2040524c:	33450513          	addi	a0,a0,820 # 2042057c <__func__.3846+0x39c>
20405250:	1380e0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20405254:	fff00793          	li	a5,-1
20405258:	fef42623          	sw	a5,-20(s0)
          return status;
2040525c:	fec42783          	lw	a5,-20(s0)
20405260:	7640006f          	j	204059c4 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        reader->BeginArray(reader);
20405264:	f5842783          	lw	a5,-168(s0)
20405268:	0307a783          	lw	a5,48(a5)
2040526c:	f5842503          	lw	a0,-168(s0)
20405270:	000780e7          	jalr	a5
        int64_t* attr_shape_ptr = attr->shape + shape_count * TVM_CRT_MAX_NDIM;
20405274:	f5c42783          	lw	a5,-164(s0)
20405278:	0147a683          	lw	a3,20(a5)
2040527c:	fdc42703          	lw	a4,-36(s0)
20405280:	00070793          	mv	a5,a4
20405284:	00179793          	slli	a5,a5,0x1
20405288:	00e787b3          	add	a5,a5,a4
2040528c:	00479793          	slli	a5,a5,0x4
20405290:	00f687b3          	add	a5,a3,a5
20405294:	fcf42223          	sw	a5,-60(s0)
        reader->ReadInteger(reader, attr_shape_ptr + 0);
20405298:	f5842783          	lw	a5,-168(s0)
2040529c:	0287a783          	lw	a5,40(a5)
204052a0:	fc442583          	lw	a1,-60(s0)
204052a4:	f5842503          	lw	a0,-168(s0)
204052a8:	000780e7          	jalr	a5
        uint32_t ndim = 1;
204052ac:	00100793          	li	a5,1
204052b0:	fcf42a23          	sw	a5,-44(s0)
        if (reader->NextArrayItem(reader)) {
204052b4:	f5842783          	lw	a5,-168(s0)
204052b8:	03c7a783          	lw	a5,60(a5)
204052bc:	f5842503          	lw	a0,-168(s0)
204052c0:	000780e7          	jalr	a5
204052c4:	00050793          	mv	a5,a0
204052c8:	08078463          	beqz	a5,20405350 <TVMGraphExecutorGraphAttr_Load+0xae8>
          for (ndim = 1; ndim < TVM_CRT_MAX_NDIM; ndim++) {
204052cc:	00100793          	li	a5,1
204052d0:	fcf42a23          	sw	a5,-44(s0)
204052d4:	04c0006f          	j	20405320 <TVMGraphExecutorGraphAttr_Load+0xab8>
            if (reader->NextArrayItem(reader)) {
204052d8:	f5842783          	lw	a5,-168(s0)
204052dc:	03c7a783          	lw	a5,60(a5)
204052e0:	f5842503          	lw	a0,-168(s0)
204052e4:	000780e7          	jalr	a5
204052e8:	00050793          	mv	a5,a0
204052ec:	04078263          	beqz	a5,20405330 <TVMGraphExecutorGraphAttr_Load+0xac8>
              reader->ReadInteger(reader, attr_shape_ptr + ndim);
204052f0:	f5842783          	lw	a5,-168(s0)
204052f4:	0287a683          	lw	a3,40(a5)
204052f8:	fd442783          	lw	a5,-44(s0)
204052fc:	00379793          	slli	a5,a5,0x3
20405300:	fc442703          	lw	a4,-60(s0)
20405304:	00f707b3          	add	a5,a4,a5
20405308:	00078593          	mv	a1,a5
2040530c:	f5842503          	lw	a0,-168(s0)
20405310:	000680e7          	jalr	a3
          for (ndim = 1; ndim < TVM_CRT_MAX_NDIM; ndim++) {
20405314:	fd442783          	lw	a5,-44(s0)
20405318:	00178793          	addi	a5,a5,1
2040531c:	fcf42a23          	sw	a5,-44(s0)
20405320:	fd442703          	lw	a4,-44(s0)
20405324:	00500793          	li	a5,5
20405328:	fae7f8e3          	bleu	a4,a5,204052d8 <TVMGraphExecutorGraphAttr_Load+0xa70>
2040532c:	0080006f          	j	20405334 <TVMGraphExecutorGraphAttr_Load+0xacc>
            } else {
              break;
20405330:	00000013          	nop
            }
          }
          if (ndim == TVM_CRT_MAX_NDIM) {
20405334:	fd442703          	lw	a4,-44(s0)
20405338:	00600793          	li	a5,6
2040533c:	00f71a63          	bne	a4,a5,20405350 <TVMGraphExecutorGraphAttr_Load+0xae8>
            reader->NextArrayItem(reader);
20405340:	f5842783          	lw	a5,-168(s0)
20405344:	03c7a783          	lw	a5,60(a5)
20405348:	f5842503          	lw	a0,-168(s0)
2040534c:	000780e7          	jalr	a5
          }
        }
        attr->ndim[shape_count] = ndim;
20405350:	f5c42783          	lw	a5,-164(s0)
20405354:	0187a703          	lw	a4,24(a5)
20405358:	fdc42783          	lw	a5,-36(s0)
2040535c:	00279793          	slli	a5,a5,0x2
20405360:	00f707b3          	add	a5,a4,a5
20405364:	fd442703          	lw	a4,-44(s0)
20405368:	00e7a023          	sw	a4,0(a5)
        shape_count++;
2040536c:	fdc42783          	lw	a5,-36(s0)
20405370:	00178793          	addi	a5,a5,1
20405374:	fcf42e23          	sw	a5,-36(s0)
      while (reader->NextArrayItem(reader)) {
20405378:	f5842783          	lw	a5,-168(s0)
2040537c:	03c7a783          	lw	a5,60(a5)
20405380:	f5842503          	lw	a0,-168(s0)
20405384:	000780e7          	jalr	a5
20405388:	00050793          	mv	a5,a0
2040538c:	e8079ae3          	bnez	a5,20405220 <TVMGraphExecutorGraphAttr_Load+0x9b8>
      }
      attr->shape_count = shape_count;
20405390:	f5c42783          	lw	a5,-164(s0)
20405394:	fdc42703          	lw	a4,-36(s0)
20405398:	00e7ae23          	sw	a4,28(a5)
      if (reader->NextArrayItem(reader)) {
2040539c:	f5842783          	lw	a5,-168(s0)
204053a0:	03c7a783          	lw	a5,60(a5)
204053a4:	f5842503          	lw	a0,-168(s0)
204053a8:	000780e7          	jalr	a5
204053ac:	00050793          	mv	a5,a0
204053b0:	02078e63          	beqz	a5,204053ec <TVMGraphExecutorGraphAttr_Load+0xb84>
        fprintf(stderr, "Invalid json format\n");
204053b4:	5fbfb797          	auipc	a5,0x5fbfb
204053b8:	68478793          	addi	a5,a5,1668 # 80000a38 <_impure_ptr>
204053bc:	0007a783          	lw	a5,0(a5)
204053c0:	00c7a783          	lw	a5,12(a5)
204053c4:	00078693          	mv	a3,a5
204053c8:	01400613          	li	a2,20
204053cc:	00100593          	li	a1,1
204053d0:	0001b517          	auipc	a0,0x1b
204053d4:	14850513          	addi	a0,a0,328 # 20420518 <__func__.3846+0x338>
204053d8:	7b10d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
204053dc:	fff00793          	li	a5,-1
204053e0:	fef42623          	sw	a5,-20(s0)
        break;
204053e4:	00000013          	nop
204053e8:	59c0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      bitmask |= 4;
204053ec:	fe842783          	lw	a5,-24(s0)
204053f0:	0047e793          	ori	a5,a5,4
204053f4:	fef42423          	sw	a5,-24(s0)
204053f8:	5640006f          	j	2040595c <TVMGraphExecutorGraphAttr_Load+0x10f4>
    } else if (!strcmp(key, "device_index")) {
204053fc:	fac40793          	addi	a5,s0,-84
20405400:	0001b597          	auipc	a1,0x1b
20405404:	22058593          	addi	a1,a1,544 # 20420620 <__func__.3846+0x440>
20405408:	00078513          	mv	a0,a5
2040540c:	3020e0ef          	jal	ra,2041370e <strcmp>
20405410:	00050793          	mv	a5,a0
20405414:	30079663          	bnez	a5,20405720 <TVMGraphExecutorGraphAttr_Load+0xeb8>
      reader->BeginArray(reader);
20405418:	f5842783          	lw	a5,-168(s0)
2040541c:	0307a783          	lw	a5,48(a5)
20405420:	f5842503          	lw	a0,-168(s0)
20405424:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20405428:	f5842783          	lw	a5,-168(s0)
2040542c:	03c7a783          	lw	a5,60(a5)
20405430:	f5842503          	lw	a0,-168(s0)
20405434:	000780e7          	jalr	a5
20405438:	00050793          	mv	a5,a0
2040543c:	02079c63          	bnez	a5,20405474 <TVMGraphExecutorGraphAttr_Load+0xc0c>
        fprintf(stderr, "Invalid json format\n");
20405440:	5fbfb797          	auipc	a5,0x5fbfb
20405444:	5f878793          	addi	a5,a5,1528 # 80000a38 <_impure_ptr>
20405448:	0007a783          	lw	a5,0(a5)
2040544c:	00c7a783          	lw	a5,12(a5)
20405450:	00078693          	mv	a3,a5
20405454:	01400613          	li	a2,20
20405458:	00100593          	li	a1,1
2040545c:	0001b517          	auipc	a0,0x1b
20405460:	0bc50513          	addi	a0,a0,188 # 20420518 <__func__.3846+0x338>
20405464:	7250d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405468:	fff00793          	li	a5,-1
2040546c:	fef42623          	sw	a5,-20(s0)
        break;
20405470:	5140006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      status = reader->ReadString(reader, type, sizeof(type));
20405474:	f5842783          	lw	a5,-168(s0)
20405478:	02c7a703          	lw	a4,44(a5)
2040547c:	f9c40793          	addi	a5,s0,-100
20405480:	01000613          	li	a2,16
20405484:	00078593          	mv	a1,a5
20405488:	f5842503          	lw	a0,-168(s0)
2040548c:	000700e7          	jalr	a4
20405490:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
20405494:	fec42783          	lw	a5,-20(s0)
20405498:	02078863          	beqz	a5,204054c8 <TVMGraphExecutorGraphAttr_Load+0xc60>
        fprintf(stderr, "error reading device_index array item");
2040549c:	5fbfb797          	auipc	a5,0x5fbfb
204054a0:	59c78793          	addi	a5,a5,1436 # 80000a38 <_impure_ptr>
204054a4:	0007a783          	lw	a5,0(a5)
204054a8:	00c7a783          	lw	a5,12(a5)
204054ac:	00078693          	mv	a3,a5
204054b0:	02500613          	li	a2,37
204054b4:	00100593          	li	a1,1
204054b8:	0001b517          	auipc	a0,0x1b
204054bc:	10050513          	addi	a0,a0,256 # 204205b8 <__func__.3846+0x3d8>
204054c0:	6c90d0ef          	jal	ra,20413388 <fwrite>
        break;
204054c4:	4c00006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (strcmp(type, "list_int")) {
204054c8:	f9c40793          	addi	a5,s0,-100
204054cc:	0001b597          	auipc	a1,0x1b
204054d0:	11458593          	addi	a1,a1,276 # 204205e0 <__func__.3846+0x400>
204054d4:	00078513          	mv	a0,a5
204054d8:	2360e0ef          	jal	ra,2041370e <strcmp>
204054dc:	00050793          	mv	a5,a0
204054e0:	02078c63          	beqz	a5,20405518 <TVMGraphExecutorGraphAttr_Load+0xcb0>
        fprintf(stderr, "Invalid json format\n");
204054e4:	5fbfb797          	auipc	a5,0x5fbfb
204054e8:	55478793          	addi	a5,a5,1364 # 80000a38 <_impure_ptr>
204054ec:	0007a783          	lw	a5,0(a5)
204054f0:	00c7a783          	lw	a5,12(a5)
204054f4:	00078693          	mv	a3,a5
204054f8:	01400613          	li	a2,20
204054fc:	00100593          	li	a1,1
20405500:	0001b517          	auipc	a0,0x1b
20405504:	01850513          	addi	a0,a0,24 # 20420518 <__func__.3846+0x338>
20405508:	6810d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
2040550c:	fff00793          	li	a5,-1
20405510:	fef42623          	sw	a5,-20(s0)
        break;
20405514:	4700006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (!(reader->NextArrayItem(reader))) {
20405518:	f5842783          	lw	a5,-168(s0)
2040551c:	03c7a783          	lw	a5,60(a5)
20405520:	f5842503          	lw	a0,-168(s0)
20405524:	000780e7          	jalr	a5
20405528:	00050793          	mv	a5,a0
2040552c:	02079c63          	bnez	a5,20405564 <TVMGraphExecutorGraphAttr_Load+0xcfc>
        fprintf(stderr, "Invalid json format\n");
20405530:	5fbfb797          	auipc	a5,0x5fbfb
20405534:	50878793          	addi	a5,a5,1288 # 80000a38 <_impure_ptr>
20405538:	0007a783          	lw	a5,0(a5)
2040553c:	00c7a783          	lw	a5,12(a5)
20405540:	00078693          	mv	a3,a5
20405544:	01400613          	li	a2,20
20405548:	00100593          	li	a1,1
2040554c:	0001b517          	auipc	a0,0x1b
20405550:	fcc50513          	addi	a0,a0,-52 # 20420518 <__func__.3846+0x338>
20405554:	6350d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405558:	fff00793          	li	a5,-1
2040555c:	fef42623          	sw	a5,-20(s0)
        break;
20405560:	4240006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->BeginArray(reader);
20405564:	f5842783          	lw	a5,-168(s0)
20405568:	0307a783          	lw	a5,48(a5)
2040556c:	f5842503          	lw	a0,-168(s0)
20405570:	000780e7          	jalr	a5
      size_t num_items = 0;
20405574:	f6042a23          	sw	zero,-140(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405578:	f5842783          	lw	a5,-168(s0)
2040557c:	0407a703          	lw	a4,64(a5)
20405580:	f7440793          	addi	a5,s0,-140
20405584:	00078593          	mv	a1,a5
20405588:	f5842503          	lw	a0,-168(s0)
2040558c:	000700e7          	jalr	a4
20405590:	00050793          	mv	a5,a0
20405594:	02078c63          	beqz	a5,204055cc <TVMGraphExecutorGraphAttr_Load+0xd64>
        fprintf(stderr, "error determing list_int length\n");
20405598:	5fbfb797          	auipc	a5,0x5fbfb
2040559c:	4a078793          	addi	a5,a5,1184 # 80000a38 <_impure_ptr>
204055a0:	0007a783          	lw	a5,0(a5)
204055a4:	00c7a783          	lw	a5,12(a5)
204055a8:	00078693          	mv	a3,a5
204055ac:	02000613          	li	a2,32
204055b0:	00100593          	li	a1,1
204055b4:	0001b517          	auipc	a0,0x1b
204055b8:	07c50513          	addi	a0,a0,124 # 20420630 <__func__.3846+0x450>
204055bc:	5cd0d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
204055c0:	fff00793          	li	a5,-1
204055c4:	fef42623          	sw	a5,-20(s0)
        break;
204055c8:	3bc0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      DLDevice dev = {kDLCPU, 0};
204055cc:	00100793          	li	a5,1
204055d0:	f6f42623          	sw	a5,-148(s0)
204055d4:	f6042823          	sw	zero,-144(s0)
      tvm_crt_error_t err =
          TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev, (void**)&attr->device_index);
204055d8:	f7442783          	lw	a5,-140(s0)
204055dc:	00279713          	slli	a4,a5,0x2
204055e0:	f5c42783          	lw	a5,-164(s0)
204055e4:	00878793          	addi	a5,a5,8
      tvm_crt_error_t err =
204055e8:	00078693          	mv	a3,a5
204055ec:	f6c42583          	lw	a1,-148(s0)
204055f0:	f7042603          	lw	a2,-144(s0)
204055f4:	00070513          	mv	a0,a4
204055f8:	f28fb0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204055fc:	fca42623          	sw	a0,-52(s0)
      if (err != kTvmErrorNoError) {
20405600:	fcc42783          	lw	a5,-52(s0)
20405604:	02078a63          	beqz	a5,20405638 <TVMGraphExecutorGraphAttr_Load+0xdd0>
        fprintf(stderr, "memory allocate error: %08x", err);
20405608:	5fbfb797          	auipc	a5,0x5fbfb
2040560c:	43078793          	addi	a5,a5,1072 # 80000a38 <_impure_ptr>
20405610:	0007a783          	lw	a5,0(a5)
20405614:	00c7a783          	lw	a5,12(a5)
20405618:	fcc42603          	lw	a2,-52(s0)
2040561c:	0001b597          	auipc	a1,0x1b
20405620:	e6c58593          	addi	a1,a1,-404 # 20420488 <__func__.3846+0x2a8>
20405624:	00078513          	mv	a0,a5
20405628:	4c70d0ef          	jal	ra,204132ee <fprintf>
        status = -1;
2040562c:	fff00793          	li	a5,-1
20405630:	fef42623          	sw	a5,-20(s0)
        break;
20405634:	3500006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      device_index_count = 0;
20405638:	fc042c23          	sw	zero,-40(s0)
      while (reader->NextArrayItem(reader)) {
2040563c:	07c0006f          	j	204056b8 <TVMGraphExecutorGraphAttr_Load+0xe50>
        if (device_index_count == num_items) {
20405640:	f7442783          	lw	a5,-140(s0)
20405644:	fd842703          	lw	a4,-40(s0)
20405648:	02f71e63          	bne	a4,a5,20405684 <TVMGraphExecutorGraphAttr_Load+0xe1c>
          fprintf(stderr, "array too big\n");
2040564c:	5fbfb797          	auipc	a5,0x5fbfb
20405650:	3ec78793          	addi	a5,a5,1004 # 80000a38 <_impure_ptr>
20405654:	0007a783          	lw	a5,0(a5)
20405658:	00c7a783          	lw	a5,12(a5)
2040565c:	00078693          	mv	a3,a5
20405660:	00e00613          	li	a2,14
20405664:	00100593          	li	a1,1
20405668:	0001b517          	auipc	a0,0x1b
2040566c:	f1450513          	addi	a0,a0,-236 # 2042057c <__func__.3846+0x39c>
20405670:	5190d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20405674:	fff00793          	li	a5,-1
20405678:	fef42623          	sw	a5,-20(s0)
          return status;
2040567c:	fec42783          	lw	a5,-20(s0)
20405680:	3440006f          	j	204059c4 <TVMGraphExecutorGraphAttr_Load+0x115c>
        }
        reader->ReadUnsignedInteger(reader, &(attr->device_index[device_index_count]));
20405684:	f5842783          	lw	a5,-168(s0)
20405688:	0247a683          	lw	a3,36(a5)
2040568c:	f5c42783          	lw	a5,-164(s0)
20405690:	0087a703          	lw	a4,8(a5)
20405694:	fd842783          	lw	a5,-40(s0)
20405698:	00279793          	slli	a5,a5,0x2
2040569c:	00f707b3          	add	a5,a4,a5
204056a0:	00078593          	mv	a1,a5
204056a4:	f5842503          	lw	a0,-168(s0)
204056a8:	000680e7          	jalr	a3
        device_index_count++;
204056ac:	fd842783          	lw	a5,-40(s0)
204056b0:	00178793          	addi	a5,a5,1
204056b4:	fcf42c23          	sw	a5,-40(s0)
      while (reader->NextArrayItem(reader)) {
204056b8:	f5842783          	lw	a5,-168(s0)
204056bc:	03c7a783          	lw	a5,60(a5)
204056c0:	f5842503          	lw	a0,-168(s0)
204056c4:	000780e7          	jalr	a5
204056c8:	00050793          	mv	a5,a0
204056cc:	f6079ae3          	bnez	a5,20405640 <TVMGraphExecutorGraphAttr_Load+0xdd8>
      }
      if (reader->NextArrayItem(reader)) {
204056d0:	f5842783          	lw	a5,-168(s0)
204056d4:	03c7a783          	lw	a5,60(a5)
204056d8:	f5842503          	lw	a0,-168(s0)
204056dc:	000780e7          	jalr	a5
204056e0:	00050793          	mv	a5,a0
204056e4:	26078c63          	beqz	a5,2040595c <TVMGraphExecutorGraphAttr_Load+0x10f4>
        fprintf(stderr, "Invalid json format\n");
204056e8:	5fbfb797          	auipc	a5,0x5fbfb
204056ec:	35078793          	addi	a5,a5,848 # 80000a38 <_impure_ptr>
204056f0:	0007a783          	lw	a5,0(a5)
204056f4:	00c7a783          	lw	a5,12(a5)
204056f8:	00078693          	mv	a3,a5
204056fc:	01400613          	li	a2,20
20405700:	00100593          	li	a1,1
20405704:	0001b517          	auipc	a0,0x1b
20405708:	e1450513          	addi	a0,a0,-492 # 20420518 <__func__.3846+0x338>
2040570c:	47d0d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405710:	fff00793          	li	a5,-1
20405714:	fef42623          	sw	a5,-20(s0)
        break;
20405718:	00000013          	nop
2040571c:	2680006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
    } else {
      reader->BeginArray(reader);
20405720:	f5842783          	lw	a5,-168(s0)
20405724:	0307a783          	lw	a5,48(a5)
20405728:	f5842503          	lw	a0,-168(s0)
2040572c:	000780e7          	jalr	a5
      if (!(reader->NextArrayItem(reader))) {
20405730:	f5842783          	lw	a5,-168(s0)
20405734:	03c7a783          	lw	a5,60(a5)
20405738:	f5842503          	lw	a0,-168(s0)
2040573c:	000780e7          	jalr	a5
20405740:	00050793          	mv	a5,a0
20405744:	02079c63          	bnez	a5,2040577c <TVMGraphExecutorGraphAttr_Load+0xf14>
        fprintf(stderr, "Invalid json format\n");
20405748:	5fbfb797          	auipc	a5,0x5fbfb
2040574c:	2f078793          	addi	a5,a5,752 # 80000a38 <_impure_ptr>
20405750:	0007a783          	lw	a5,0(a5)
20405754:	00c7a783          	lw	a5,12(a5)
20405758:	00078693          	mv	a3,a5
2040575c:	01400613          	li	a2,20
20405760:	00100593          	li	a1,1
20405764:	0001b517          	auipc	a0,0x1b
20405768:	db450513          	addi	a0,a0,-588 # 20420518 <__func__.3846+0x338>
2040576c:	41d0d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405770:	fff00793          	li	a5,-1
20405774:	fef42623          	sw	a5,-20(s0)
        break;
20405778:	20c0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      reader->ReadString(reader, type, sizeof(type));
2040577c:	f5842783          	lw	a5,-168(s0)
20405780:	02c7a703          	lw	a4,44(a5)
20405784:	f9c40793          	addi	a5,s0,-100
20405788:	01000613          	li	a2,16
2040578c:	00078593          	mv	a1,a5
20405790:	f5842503          	lw	a0,-168(s0)
20405794:	000700e7          	jalr	a4
      if (!strcmp(type, "list_int")) {
20405798:	f9c40793          	addi	a5,s0,-100
2040579c:	0001b597          	auipc	a1,0x1b
204057a0:	e4458593          	addi	a1,a1,-444 # 204205e0 <__func__.3846+0x400>
204057a4:	00078513          	mv	a0,a5
204057a8:	7670d0ef          	jal	ra,2041370e <strcmp>
204057ac:	00050793          	mv	a5,a0
204057b0:	0a079463          	bnez	a5,20405858 <TVMGraphExecutorGraphAttr_Load+0xff0>
        if (!(reader->NextArrayItem(reader))) {
204057b4:	f5842783          	lw	a5,-168(s0)
204057b8:	03c7a783          	lw	a5,60(a5)
204057bc:	f5842503          	lw	a0,-168(s0)
204057c0:	000780e7          	jalr	a5
204057c4:	00050793          	mv	a5,a0
204057c8:	02079c63          	bnez	a5,20405800 <TVMGraphExecutorGraphAttr_Load+0xf98>
          fprintf(stderr, "Invalid json format\n");
204057cc:	5fbfb797          	auipc	a5,0x5fbfb
204057d0:	26c78793          	addi	a5,a5,620 # 80000a38 <_impure_ptr>
204057d4:	0007a783          	lw	a5,0(a5)
204057d8:	00c7a783          	lw	a5,12(a5)
204057dc:	00078693          	mv	a3,a5
204057e0:	01400613          	li	a2,20
204057e4:	00100593          	li	a1,1
204057e8:	0001b517          	auipc	a0,0x1b
204057ec:	d3050513          	addi	a0,a0,-720 # 20420518 <__func__.3846+0x338>
204057f0:	3990d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
204057f4:	fff00793          	li	a5,-1
204057f8:	fef42623          	sw	a5,-20(s0)
          break;
204057fc:	1880006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
        }
        uint32_t temp_count = 0;
20405800:	fc042823          	sw	zero,-48(s0)
        reader->BeginArray(reader);
20405804:	f5842783          	lw	a5,-168(s0)
20405808:	0307a783          	lw	a5,48(a5)
2040580c:	f5842503          	lw	a0,-168(s0)
20405810:	000780e7          	jalr	a5
        while (reader->NextArrayItem(reader)) {
20405814:	0280006f          	j	2040583c <TVMGraphExecutorGraphAttr_Load+0xfd4>
          uint32_t temp;
          reader->ReadUnsignedInteger(reader, &temp);
20405818:	f5842783          	lw	a5,-168(s0)
2040581c:	0247a703          	lw	a4,36(a5)
20405820:	f6840793          	addi	a5,s0,-152
20405824:	00078593          	mv	a1,a5
20405828:	f5842503          	lw	a0,-168(s0)
2040582c:	000700e7          	jalr	a4
          temp_count++;
20405830:	fd042783          	lw	a5,-48(s0)
20405834:	00178793          	addi	a5,a5,1
20405838:	fcf42823          	sw	a5,-48(s0)
        while (reader->NextArrayItem(reader)) {
2040583c:	f5842783          	lw	a5,-168(s0)
20405840:	03c7a783          	lw	a5,60(a5)
20405844:	f5842503          	lw	a0,-168(s0)
20405848:	000780e7          	jalr	a5
2040584c:	00050793          	mv	a5,a0
20405850:	fc0794e3          	bnez	a5,20405818 <TVMGraphExecutorGraphAttr_Load+0xfb0>
20405854:	0bc0006f          	j	20405910 <TVMGraphExecutorGraphAttr_Load+0x10a8>
        }
      } else if (!strcmp(type, "size_t")) {
20405858:	f9c40793          	addi	a5,s0,-100
2040585c:	0001b597          	auipc	a1,0x1b
20405860:	df858593          	addi	a1,a1,-520 # 20420654 <__func__.3846+0x474>
20405864:	00078513          	mv	a0,a5
20405868:	6a70d0ef          	jal	ra,2041370e <strcmp>
2040586c:	00050793          	mv	a5,a0
20405870:	06079663          	bnez	a5,204058dc <TVMGraphExecutorGraphAttr_Load+0x1074>
        if (!(reader->NextArrayItem(reader))) {
20405874:	f5842783          	lw	a5,-168(s0)
20405878:	03c7a783          	lw	a5,60(a5)
2040587c:	f5842503          	lw	a0,-168(s0)
20405880:	000780e7          	jalr	a5
20405884:	00050793          	mv	a5,a0
20405888:	02079c63          	bnez	a5,204058c0 <TVMGraphExecutorGraphAttr_Load+0x1058>
          fprintf(stderr, "Invalid json format\n");
2040588c:	5fbfb797          	auipc	a5,0x5fbfb
20405890:	1ac78793          	addi	a5,a5,428 # 80000a38 <_impure_ptr>
20405894:	0007a783          	lw	a5,0(a5)
20405898:	00c7a783          	lw	a5,12(a5)
2040589c:	00078693          	mv	a3,a5
204058a0:	01400613          	li	a2,20
204058a4:	00100593          	li	a1,1
204058a8:	0001b517          	auipc	a0,0x1b
204058ac:	c7050513          	addi	a0,a0,-912 # 20420518 <__func__.3846+0x338>
204058b0:	2d90d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
204058b4:	fff00793          	li	a5,-1
204058b8:	fef42623          	sw	a5,-20(s0)
204058bc:	0c80006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
          break;
        }
        uint32_t temp;
        reader->ReadUnsignedInteger(reader, &temp);
204058c0:	f5842783          	lw	a5,-168(s0)
204058c4:	0247a703          	lw	a4,36(a5)
204058c8:	f6440793          	addi	a5,s0,-156
204058cc:	00078593          	mv	a1,a5
204058d0:	f5842503          	lw	a0,-168(s0)
204058d4:	000700e7          	jalr	a4
204058d8:	0380006f          	j	20405910 <TVMGraphExecutorGraphAttr_Load+0x10a8>
      } else {
        fprintf(stderr, "cannot skip graph attr %s", key);
204058dc:	5fbfb797          	auipc	a5,0x5fbfb
204058e0:	15c78793          	addi	a5,a5,348 # 80000a38 <_impure_ptr>
204058e4:	0007a783          	lw	a5,0(a5)
204058e8:	00c7a783          	lw	a5,12(a5)
204058ec:	fac40713          	addi	a4,s0,-84
204058f0:	00070613          	mv	a2,a4
204058f4:	0001b597          	auipc	a1,0x1b
204058f8:	d6858593          	addi	a1,a1,-664 # 2042065c <__func__.3846+0x47c>
204058fc:	00078513          	mv	a0,a5
20405900:	1ef0d0ef          	jal	ra,204132ee <fprintf>
        status = -1;
20405904:	fff00793          	li	a5,-1
20405908:	fef42623          	sw	a5,-20(s0)
        break;
2040590c:	0780006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
      }
      if (reader->NextArrayItem(reader)) {
20405910:	f5842783          	lw	a5,-168(s0)
20405914:	03c7a783          	lw	a5,60(a5)
20405918:	f5842503          	lw	a0,-168(s0)
2040591c:	000780e7          	jalr	a5
20405920:	00050793          	mv	a5,a0
20405924:	02078c63          	beqz	a5,2040595c <TVMGraphExecutorGraphAttr_Load+0x10f4>
        fprintf(stderr, "Invalid json format\n");
20405928:	5fbfb797          	auipc	a5,0x5fbfb
2040592c:	11078793          	addi	a5,a5,272 # 80000a38 <_impure_ptr>
20405930:	0007a783          	lw	a5,0(a5)
20405934:	00c7a783          	lw	a5,12(a5)
20405938:	00078693          	mv	a3,a5
2040593c:	01400613          	li	a2,20
20405940:	00100593          	li	a1,1
20405944:	0001b517          	auipc	a0,0x1b
20405948:	bd450513          	addi	a0,a0,-1068 # 20420518 <__func__.3846+0x338>
2040594c:	23d0d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405950:	fff00793          	li	a5,-1
20405954:	fef42623          	sw	a5,-20(s0)
        break;
20405958:	02c0006f          	j	20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
2040595c:	f5842783          	lw	a5,-168(s0)
20405960:	0387a703          	lw	a4,56(a5)
20405964:	fac40793          	addi	a5,s0,-84
20405968:	01000613          	li	a2,16
2040596c:	00078593          	mv	a1,a5
20405970:	f5842503          	lw	a0,-168(s0)
20405974:	000700e7          	jalr	a4
20405978:	00050793          	mv	a5,a0
2040597c:	00078463          	beqz	a5,20405984 <TVMGraphExecutorGraphAttr_Load+0x111c>
20405980:	f2dfe06f          	j	204048ac <TVMGraphExecutorGraphAttr_Load+0x44>
      }
    }
  }
  if (bitmask != (1 | 2 | 4)) {
20405984:	fe842703          	lw	a4,-24(s0)
20405988:	00700793          	li	a5,7
2040598c:	02f70a63          	beq	a4,a5,204059c0 <TVMGraphExecutorGraphAttr_Load+0x1158>
    fprintf(stderr, "invalid format\n");
20405990:	5fbfb797          	auipc	a5,0x5fbfb
20405994:	0a878793          	addi	a5,a5,168 # 80000a38 <_impure_ptr>
20405998:	0007a783          	lw	a5,0(a5)
2040599c:	00c7a783          	lw	a5,12(a5)
204059a0:	00078693          	mv	a3,a5
204059a4:	00f00613          	li	a2,15
204059a8:	00100593          	li	a1,1
204059ac:	0001b517          	auipc	a0,0x1b
204059b0:	a6850513          	addi	a0,a0,-1432 # 20420414 <__func__.3846+0x234>
204059b4:	1d50d0ef          	jal	ra,20413388 <fwrite>
    status = -1;
204059b8:	fff00793          	li	a5,-1
204059bc:	fef42623          	sw	a5,-20(s0)
  }
  return status;
204059c0:	fec42783          	lw	a5,-20(s0)
}
204059c4:	00078513          	mv	a0,a5
204059c8:	0ac12083          	lw	ra,172(sp)
204059cc:	0a812403          	lw	s0,168(sp)
204059d0:	0b010113          	addi	sp,sp,176
204059d4:	00008067          	ret

204059d8 <TVMGraphExecutorGraphAttr_Release>:

int TVMGraphExecutorGraphAttr_Release(TVMGraphExecutorGraphAttr* attr) {
204059d8:	fa010113          	addi	sp,sp,-96
204059dc:	04112e23          	sw	ra,92(sp)
204059e0:	04812c23          	sw	s0,88(sp)
204059e4:	06010413          	addi	s0,sp,96
204059e8:	faa42623          	sw	a0,-84(s0)
  if (!attr) {
204059ec:	fac42783          	lw	a5,-84(s0)
204059f0:	00079663          	bnez	a5,204059fc <TVMGraphExecutorGraphAttr_Release+0x24>
    return 0;
204059f4:	00000793          	li	a5,0
204059f8:	1840006f          	j	20405b7c <TVMGraphExecutorGraphAttr_Release+0x1a4>
  }
  if (attr->storage_id) {
204059fc:	fac42783          	lw	a5,-84(s0)
20405a00:	0047a783          	lw	a5,4(a5)
20405a04:	04078263          	beqz	a5,20405a48 <TVMGraphExecutorGraphAttr_Release+0x70>
    DLDevice dev = {kDLCPU, 0};
20405a08:	00100793          	li	a5,1
20405a0c:	fcf42a23          	sw	a5,-44(s0)
20405a10:	fc042c23          	sw	zero,-40(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->storage_id, dev);
20405a14:	fac42783          	lw	a5,-84(s0)
20405a18:	0047a783          	lw	a5,4(a5)
20405a1c:	fd442583          	lw	a1,-44(s0)
20405a20:	fd842603          	lw	a2,-40(s0)
20405a24:	00078513          	mv	a0,a5
20405a28:	b5cfb0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20405a2c:	fea42623          	sw	a0,-20(s0)
    attr->storage_id = 0;
20405a30:	fac42783          	lw	a5,-84(s0)
20405a34:	0007a223          	sw	zero,4(a5)
    if (err != kTvmErrorNoError) {
20405a38:	fec42783          	lw	a5,-20(s0)
20405a3c:	00078663          	beqz	a5,20405a48 <TVMGraphExecutorGraphAttr_Release+0x70>
      return -1;
20405a40:	fff00793          	li	a5,-1
20405a44:	1380006f          	j	20405b7c <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->device_index) {
20405a48:	fac42783          	lw	a5,-84(s0)
20405a4c:	0087a783          	lw	a5,8(a5)
20405a50:	04078263          	beqz	a5,20405a94 <TVMGraphExecutorGraphAttr_Release+0xbc>
    DLDevice dev = {kDLCPU, 0};
20405a54:	00100793          	li	a5,1
20405a58:	fcf42623          	sw	a5,-52(s0)
20405a5c:	fc042823          	sw	zero,-48(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->device_index, dev);
20405a60:	fac42783          	lw	a5,-84(s0)
20405a64:	0087a783          	lw	a5,8(a5)
20405a68:	fcc42583          	lw	a1,-52(s0)
20405a6c:	fd042603          	lw	a2,-48(s0)
20405a70:	00078513          	mv	a0,a5
20405a74:	b10fb0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20405a78:	fea42423          	sw	a0,-24(s0)
    attr->device_index = 0;
20405a7c:	fac42783          	lw	a5,-84(s0)
20405a80:	0007a423          	sw	zero,8(a5)
    if (err != kTvmErrorNoError) {
20405a84:	fe842783          	lw	a5,-24(s0)
20405a88:	00078663          	beqz	a5,20405a94 <TVMGraphExecutorGraphAttr_Release+0xbc>
      return -1;
20405a8c:	fff00793          	li	a5,-1
20405a90:	0ec0006f          	j	20405b7c <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->dltype) {
20405a94:	fac42783          	lw	a5,-84(s0)
20405a98:	00c7a783          	lw	a5,12(a5)
20405a9c:	04078263          	beqz	a5,20405ae0 <TVMGraphExecutorGraphAttr_Release+0x108>
    DLDevice dev = {kDLCPU, 0};
20405aa0:	00100793          	li	a5,1
20405aa4:	fcf42223          	sw	a5,-60(s0)
20405aa8:	fc042423          	sw	zero,-56(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->dltype, dev);
20405aac:	fac42783          	lw	a5,-84(s0)
20405ab0:	00c7a783          	lw	a5,12(a5)
20405ab4:	fc442583          	lw	a1,-60(s0)
20405ab8:	fc842603          	lw	a2,-56(s0)
20405abc:	00078513          	mv	a0,a5
20405ac0:	ac4fb0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20405ac4:	fea42223          	sw	a0,-28(s0)
    attr->dltype = 0;
20405ac8:	fac42783          	lw	a5,-84(s0)
20405acc:	0007a623          	sw	zero,12(a5)
    if (err != kTvmErrorNoError) {
20405ad0:	fe442783          	lw	a5,-28(s0)
20405ad4:	00078663          	beqz	a5,20405ae0 <TVMGraphExecutorGraphAttr_Release+0x108>
      return -1;
20405ad8:	fff00793          	li	a5,-1
20405adc:	0a00006f          	j	20405b7c <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->shape) {
20405ae0:	fac42783          	lw	a5,-84(s0)
20405ae4:	0147a783          	lw	a5,20(a5)
20405ae8:	04078263          	beqz	a5,20405b2c <TVMGraphExecutorGraphAttr_Release+0x154>
    DLDevice dev = {kDLCPU, 0};
20405aec:	00100793          	li	a5,1
20405af0:	faf42e23          	sw	a5,-68(s0)
20405af4:	fc042023          	sw	zero,-64(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->shape, dev);
20405af8:	fac42783          	lw	a5,-84(s0)
20405afc:	0147a783          	lw	a5,20(a5)
20405b00:	fbc42583          	lw	a1,-68(s0)
20405b04:	fc042603          	lw	a2,-64(s0)
20405b08:	00078513          	mv	a0,a5
20405b0c:	a78fb0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20405b10:	fea42023          	sw	a0,-32(s0)
    attr->shape = 0;
20405b14:	fac42783          	lw	a5,-84(s0)
20405b18:	0007aa23          	sw	zero,20(a5)
    if (err != kTvmErrorNoError) {
20405b1c:	fe042783          	lw	a5,-32(s0)
20405b20:	00078663          	beqz	a5,20405b2c <TVMGraphExecutorGraphAttr_Release+0x154>
      return -1;
20405b24:	fff00793          	li	a5,-1
20405b28:	0540006f          	j	20405b7c <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }
  if (attr->ndim) {
20405b2c:	fac42783          	lw	a5,-84(s0)
20405b30:	0187a783          	lw	a5,24(a5)
20405b34:	04078263          	beqz	a5,20405b78 <TVMGraphExecutorGraphAttr_Release+0x1a0>
    DLDevice dev = {kDLCPU, 0};
20405b38:	00100793          	li	a5,1
20405b3c:	faf42a23          	sw	a5,-76(s0)
20405b40:	fa042c23          	sw	zero,-72(s0)
    tvm_crt_error_t err = TVMPlatformMemoryFree(attr->ndim, dev);
20405b44:	fac42783          	lw	a5,-84(s0)
20405b48:	0187a783          	lw	a5,24(a5)
20405b4c:	fb442583          	lw	a1,-76(s0)
20405b50:	fb842603          	lw	a2,-72(s0)
20405b54:	00078513          	mv	a0,a5
20405b58:	a2cfb0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20405b5c:	fca42e23          	sw	a0,-36(s0)
    attr->ndim = 0;
20405b60:	fac42783          	lw	a5,-84(s0)
20405b64:	0007ac23          	sw	zero,24(a5)
    if (err != kTvmErrorNoError) {
20405b68:	fdc42783          	lw	a5,-36(s0)
20405b6c:	00078663          	beqz	a5,20405b78 <TVMGraphExecutorGraphAttr_Release+0x1a0>
      return -1;
20405b70:	fff00793          	li	a5,-1
20405b74:	0080006f          	j	20405b7c <TVMGraphExecutorGraphAttr_Release+0x1a4>
    }
  }

  return 0;
20405b78:	00000793          	li	a5,0
}
20405b7c:	00078513          	mv	a0,a5
20405b80:	05c12083          	lw	ra,92(sp)
20405b84:	05812403          	lw	s0,88(sp)
20405b88:	06010113          	addi	sp,sp,96
20405b8c:	00008067          	ret

20405b90 <TVMGraphExecutor_Load>:

int TVMGraphExecutor_Load(TVMGraphExecutor* executor, JSONReader* reader) {
20405b90:	f7010113          	addi	sp,sp,-144
20405b94:	08112623          	sw	ra,140(sp)
20405b98:	08812423          	sw	s0,136(sp)
20405b9c:	08912223          	sw	s1,132(sp)
20405ba0:	09010413          	addi	s0,sp,144
20405ba4:	f6a42e23          	sw	a0,-132(s0)
20405ba8:	f6b42c23          	sw	a1,-136(s0)
  int status = 0;
20405bac:	fe042623          	sw	zero,-20(s0)
  reader->BeginObject(reader);
20405bb0:	f7842783          	lw	a5,-136(s0)
20405bb4:	0347a783          	lw	a5,52(a5)
20405bb8:	f7842503          	lw	a0,-136(s0)
20405bbc:	000780e7          	jalr	a5
  int bitmask = 0;
20405bc0:	fe042423          	sw	zero,-24(s0)
  char key[20];
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
20405bc4:	7f00006f          	j	204063b4 <TVMGraphExecutor_Load+0x824>
    if (!strcmp(key, "nodes")) {
20405bc8:	fb040793          	addi	a5,s0,-80
20405bcc:	0001b597          	auipc	a1,0x1b
20405bd0:	aac58593          	addi	a1,a1,-1364 # 20420678 <__func__.3846+0x498>
20405bd4:	00078513          	mv	a0,a5
20405bd8:	3370d0ef          	jal	ra,2041370e <strcmp>
20405bdc:	00050793          	mv	a5,a0
20405be0:	1c079c63          	bnez	a5,20405db8 <TVMGraphExecutor_Load+0x228>
      reader->BeginArray(reader);
20405be4:	f7842783          	lw	a5,-136(s0)
20405be8:	0307a783          	lw	a5,48(a5)
20405bec:	f7842503          	lw	a0,-136(s0)
20405bf0:	000780e7          	jalr	a5
      size_t num_items = 0;
20405bf4:	fa042623          	sw	zero,-84(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405bf8:	f7842783          	lw	a5,-136(s0)
20405bfc:	0407a703          	lw	a4,64(a5)
20405c00:	fac40793          	addi	a5,s0,-84
20405c04:	00078593          	mv	a1,a5
20405c08:	f7842503          	lw	a0,-136(s0)
20405c0c:	000700e7          	jalr	a4
20405c10:	00050793          	mv	a5,a0
20405c14:	02078c63          	beqz	a5,20405c4c <TVMGraphExecutor_Load+0xbc>
        fprintf(stderr, "error determing list_int length\n");
20405c18:	5fbfb797          	auipc	a5,0x5fbfb
20405c1c:	e2078793          	addi	a5,a5,-480 # 80000a38 <_impure_ptr>
20405c20:	0007a783          	lw	a5,0(a5)
20405c24:	00c7a783          	lw	a5,12(a5)
20405c28:	00078693          	mv	a3,a5
20405c2c:	02000613          	li	a2,32
20405c30:	00100593          	li	a1,1
20405c34:	0001b517          	auipc	a0,0x1b
20405c38:	9fc50513          	addi	a0,a0,-1540 # 20420630 <__func__.3846+0x450>
20405c3c:	74c0d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405c40:	fff00793          	li	a5,-1
20405c44:	fef42623          	sw	a5,-20(s0)
        break;
20405c48:	7a00006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405c4c:	00100793          	li	a5,1
20405c50:	faf42223          	sw	a5,-92(s0)
20405c54:	fa042423          	sw	zero,-88(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNode) * num_items, dev,
20405c58:	fac42783          	lw	a5,-84(s0)
20405c5c:	16c00593          	li	a1,364
20405c60:	00078513          	mv	a0,a5
20405c64:	7cd190ef          	jal	ra,2041fc30 <__mulsi3>
20405c68:	00050793          	mv	a5,a0
20405c6c:	00078713          	mv	a4,a5
                                                      (void**)&executor->nodes);
20405c70:	f7c42783          	lw	a5,-132(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNode) * num_items, dev,
20405c74:	00078693          	mv	a3,a5
20405c78:	fa442583          	lw	a1,-92(s0)
20405c7c:	fa842603          	lw	a2,-88(s0)
20405c80:	00070513          	mv	a0,a4
20405c84:	89cfb0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20405c88:	fca42423          	sw	a0,-56(s0)
      if (err != kTvmErrorNoError) {
20405c8c:	fc842783          	lw	a5,-56(s0)
20405c90:	10078063          	beqz	a5,20405d90 <TVMGraphExecutor_Load+0x200>
        fprintf(stderr, "memory allocate error: %08x", err);
20405c94:	5fbfb797          	auipc	a5,0x5fbfb
20405c98:	da478793          	addi	a5,a5,-604 # 80000a38 <_impure_ptr>
20405c9c:	0007a783          	lw	a5,0(a5)
20405ca0:	00c7a783          	lw	a5,12(a5)
20405ca4:	fc842603          	lw	a2,-56(s0)
20405ca8:	0001a597          	auipc	a1,0x1a
20405cac:	7e058593          	addi	a1,a1,2016 # 20420488 <__func__.3846+0x2a8>
20405cb0:	00078513          	mv	a0,a5
20405cb4:	63a0d0ef          	jal	ra,204132ee <fprintf>
        status = -1;
20405cb8:	fff00793          	li	a5,-1
20405cbc:	fef42623          	sw	a5,-20(s0)
        break;
20405cc0:	00000013          	nop
20405cc4:	7240006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->nodes_count == num_items) {
20405cc8:	f7c42783          	lw	a5,-132(s0)
20405ccc:	0047a703          	lw	a4,4(a5)
20405cd0:	fac42783          	lw	a5,-84(s0)
20405cd4:	02f71e63          	bne	a4,a5,20405d10 <TVMGraphExecutor_Load+0x180>
          fprintf(stderr, "array too big\n");
20405cd8:	5fbfb797          	auipc	a5,0x5fbfb
20405cdc:	d6078793          	addi	a5,a5,-672 # 80000a38 <_impure_ptr>
20405ce0:	0007a783          	lw	a5,0(a5)
20405ce4:	00c7a783          	lw	a5,12(a5)
20405ce8:	00078693          	mv	a3,a5
20405cec:	00e00613          	li	a2,14
20405cf0:	00100593          	li	a1,1
20405cf4:	0001b517          	auipc	a0,0x1b
20405cf8:	88850513          	addi	a0,a0,-1912 # 2042057c <__func__.3846+0x39c>
20405cfc:	68c0d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20405d00:	fff00793          	li	a5,-1
20405d04:	fef42623          	sw	a5,-20(s0)
          return status;
20405d08:	fec42783          	lw	a5,-20(s0)
20405d0c:	71c0006f          	j	20406428 <TVMGraphExecutor_Load+0x898>
        }
        TVMGraphExecutorNode* node = executor->nodes + executor->nodes_count;
20405d10:	f7c42783          	lw	a5,-132(s0)
20405d14:	0007a483          	lw	s1,0(a5)
20405d18:	f7c42783          	lw	a5,-132(s0)
20405d1c:	0047a783          	lw	a5,4(a5)
20405d20:	16c00593          	li	a1,364
20405d24:	00078513          	mv	a0,a5
20405d28:	709190ef          	jal	ra,2041fc30 <__mulsi3>
20405d2c:	00050793          	mv	a5,a0
20405d30:	00f487b3          	add	a5,s1,a5
20405d34:	fcf42223          	sw	a5,-60(s0)
        status = TVMGraphExecutorNode_Load(node, reader);
20405d38:	f7842583          	lw	a1,-136(s0)
20405d3c:	fc442503          	lw	a0,-60(s0)
20405d40:	ca0fe0ef          	jal	ra,204041e0 <TVMGraphExecutorNode_Load>
20405d44:	fea42623          	sw	a0,-20(s0)
        if (status != 0) {
20405d48:	fec42783          	lw	a5,-20(s0)
20405d4c:	02078863          	beqz	a5,20405d7c <TVMGraphExecutor_Load+0x1ec>
          fprintf(stderr, "failed to load an element in `nodes` field in graph executor node.\n");
20405d50:	5fbfb797          	auipc	a5,0x5fbfb
20405d54:	ce878793          	addi	a5,a5,-792 # 80000a38 <_impure_ptr>
20405d58:	0007a783          	lw	a5,0(a5)
20405d5c:	00c7a783          	lw	a5,12(a5)
20405d60:	00078693          	mv	a3,a5
20405d64:	04300613          	li	a2,67
20405d68:	00100593          	li	a1,1
20405d6c:	0001b517          	auipc	a0,0x1b
20405d70:	91450513          	addi	a0,a0,-1772 # 20420680 <__func__.3846+0x4a0>
20405d74:	6140d0ef          	jal	ra,20413388 <fwrite>
          break;
20405d78:	0300006f          	j	20405da8 <TVMGraphExecutor_Load+0x218>
#if TVM_CRT_DEBUG
        } else {
          printf("loading: node (%u) %s loaded.\n", executor->nodes_count, node->name);
#endif  // TVM_CRT_DEBUG
        }
        executor->nodes_count++;
20405d7c:	f7c42783          	lw	a5,-132(s0)
20405d80:	0047a783          	lw	a5,4(a5)
20405d84:	00178713          	addi	a4,a5,1
20405d88:	f7c42783          	lw	a5,-132(s0)
20405d8c:	00e7a223          	sw	a4,4(a5)
      while (reader->NextArrayItem(reader)) {
20405d90:	f7842783          	lw	a5,-136(s0)
20405d94:	03c7a783          	lw	a5,60(a5)
20405d98:	f7842503          	lw	a0,-136(s0)
20405d9c:	000780e7          	jalr	a5
20405da0:	00050793          	mv	a5,a0
20405da4:	f20792e3          	bnez	a5,20405cc8 <TVMGraphExecutor_Load+0x138>
      }
      bitmask |= 1;
20405da8:	fe842783          	lw	a5,-24(s0)
20405dac:	0017e793          	ori	a5,a5,1
20405db0:	fef42423          	sw	a5,-24(s0)
20405db4:	5f80006f          	j	204063ac <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "arg_nodes")) {
20405db8:	fb040793          	addi	a5,s0,-80
20405dbc:	0001b597          	auipc	a1,0x1b
20405dc0:	90858593          	addi	a1,a1,-1784 # 204206c4 <__func__.3846+0x4e4>
20405dc4:	00078513          	mv	a0,a5
20405dc8:	1470d0ef          	jal	ra,2041370e <strcmp>
20405dcc:	00050793          	mv	a5,a0
20405dd0:	18079863          	bnez	a5,20405f60 <TVMGraphExecutor_Load+0x3d0>
      reader->BeginArray(reader);
20405dd4:	f7842783          	lw	a5,-136(s0)
20405dd8:	0307a783          	lw	a5,48(a5)
20405ddc:	f7842503          	lw	a0,-136(s0)
20405de0:	000780e7          	jalr	a5
      size_t num_items = 0;
20405de4:	fa042023          	sw	zero,-96(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405de8:	f7842783          	lw	a5,-136(s0)
20405dec:	0407a703          	lw	a4,64(a5)
20405df0:	fa040793          	addi	a5,s0,-96
20405df4:	00078593          	mv	a1,a5
20405df8:	f7842503          	lw	a0,-136(s0)
20405dfc:	000700e7          	jalr	a4
20405e00:	00050793          	mv	a5,a0
20405e04:	02078c63          	beqz	a5,20405e3c <TVMGraphExecutor_Load+0x2ac>
        fprintf(stderr, "error determing list_int length\n");
20405e08:	5fbfb797          	auipc	a5,0x5fbfb
20405e0c:	c3078793          	addi	a5,a5,-976 # 80000a38 <_impure_ptr>
20405e10:	0007a783          	lw	a5,0(a5)
20405e14:	00c7a783          	lw	a5,12(a5)
20405e18:	00078693          	mv	a3,a5
20405e1c:	02000613          	li	a2,32
20405e20:	00100593          	li	a1,1
20405e24:	0001b517          	auipc	a0,0x1b
20405e28:	80c50513          	addi	a0,a0,-2036 # 20420630 <__func__.3846+0x450>
20405e2c:	55c0d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405e30:	fff00793          	li	a5,-1
20405e34:	fef42623          	sw	a5,-20(s0)
        break;
20405e38:	5b00006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405e3c:	00100793          	li	a5,1
20405e40:	f8f42c23          	sw	a5,-104(s0)
20405e44:	f8042e23          	sw	zero,-100(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405e48:	fa042783          	lw	a5,-96(s0)
20405e4c:	00279713          	slli	a4,a5,0x2
                                                      (void**)&executor->input_nodes);
20405e50:	f7c42783          	lw	a5,-132(s0)
20405e54:	00878793          	addi	a5,a5,8
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405e58:	00078693          	mv	a3,a5
20405e5c:	f9842583          	lw	a1,-104(s0)
20405e60:	f9c42603          	lw	a2,-100(s0)
20405e64:	00070513          	mv	a0,a4
20405e68:	eb9fa0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20405e6c:	fca42823          	sw	a0,-48(s0)

      if (err != kTvmErrorNoError) {
20405e70:	fd042783          	lw	a5,-48(s0)
20405e74:	0c078263          	beqz	a5,20405f38 <TVMGraphExecutor_Load+0x3a8>
        fprintf(stderr, "memory allocate error: %08x", err);
20405e78:	5fbfb797          	auipc	a5,0x5fbfb
20405e7c:	bc078793          	addi	a5,a5,-1088 # 80000a38 <_impure_ptr>
20405e80:	0007a783          	lw	a5,0(a5)
20405e84:	00c7a783          	lw	a5,12(a5)
20405e88:	fd042603          	lw	a2,-48(s0)
20405e8c:	0001a597          	auipc	a1,0x1a
20405e90:	5fc58593          	addi	a1,a1,1532 # 20420488 <__func__.3846+0x2a8>
20405e94:	00078513          	mv	a0,a5
20405e98:	4560d0ef          	jal	ra,204132ee <fprintf>
        status = -1;
20405e9c:	fff00793          	li	a5,-1
20405ea0:	fef42623          	sw	a5,-20(s0)
        break;
20405ea4:	00000013          	nop
20405ea8:	5400006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->input_nodes_count == num_items) {
20405eac:	f7c42783          	lw	a5,-132(s0)
20405eb0:	00c7a703          	lw	a4,12(a5)
20405eb4:	fa042783          	lw	a5,-96(s0)
20405eb8:	02f71e63          	bne	a4,a5,20405ef4 <TVMGraphExecutor_Load+0x364>
          fprintf(stderr, "array too big\n");
20405ebc:	5fbfb797          	auipc	a5,0x5fbfb
20405ec0:	b7c78793          	addi	a5,a5,-1156 # 80000a38 <_impure_ptr>
20405ec4:	0007a783          	lw	a5,0(a5)
20405ec8:	00c7a783          	lw	a5,12(a5)
20405ecc:	00078693          	mv	a3,a5
20405ed0:	00e00613          	li	a2,14
20405ed4:	00100593          	li	a1,1
20405ed8:	0001a517          	auipc	a0,0x1a
20405edc:	6a450513          	addi	a0,a0,1700 # 2042057c <__func__.3846+0x39c>
20405ee0:	4a80d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
20405ee4:	fff00793          	li	a5,-1
20405ee8:	fef42623          	sw	a5,-20(s0)
          return status;
20405eec:	fec42783          	lw	a5,-20(s0)
20405ef0:	5380006f          	j	20406428 <TVMGraphExecutor_Load+0x898>
        }
        uint32_t* node = executor->input_nodes + executor->input_nodes_count;
20405ef4:	f7c42783          	lw	a5,-132(s0)
20405ef8:	0087a703          	lw	a4,8(a5)
20405efc:	f7c42783          	lw	a5,-132(s0)
20405f00:	00c7a783          	lw	a5,12(a5)
20405f04:	00279793          	slli	a5,a5,0x2
20405f08:	00f707b3          	add	a5,a4,a5
20405f0c:	fcf42623          	sw	a5,-52(s0)
        reader->ReadUnsignedInteger(reader, node);
20405f10:	f7842783          	lw	a5,-136(s0)
20405f14:	0247a783          	lw	a5,36(a5)
20405f18:	fcc42583          	lw	a1,-52(s0)
20405f1c:	f7842503          	lw	a0,-136(s0)
20405f20:	000780e7          	jalr	a5
        executor->input_nodes_count++;
20405f24:	f7c42783          	lw	a5,-132(s0)
20405f28:	00c7a783          	lw	a5,12(a5)
20405f2c:	00178713          	addi	a4,a5,1
20405f30:	f7c42783          	lw	a5,-132(s0)
20405f34:	00e7a623          	sw	a4,12(a5)
      while (reader->NextArrayItem(reader)) {
20405f38:	f7842783          	lw	a5,-136(s0)
20405f3c:	03c7a783          	lw	a5,60(a5)
20405f40:	f7842503          	lw	a0,-136(s0)
20405f44:	000780e7          	jalr	a5
20405f48:	00050793          	mv	a5,a0
20405f4c:	f60790e3          	bnez	a5,20405eac <TVMGraphExecutor_Load+0x31c>
      }
      bitmask |= 2;
20405f50:	fe842783          	lw	a5,-24(s0)
20405f54:	0027e793          	ori	a5,a5,2
20405f58:	fef42423          	sw	a5,-24(s0)
20405f5c:	4500006f          	j	204063ac <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "node_row_ptr")) {
20405f60:	fb040793          	addi	a5,s0,-80
20405f64:	0001a597          	auipc	a1,0x1a
20405f68:	76c58593          	addi	a1,a1,1900 # 204206d0 <__func__.3846+0x4f0>
20405f6c:	00078513          	mv	a0,a5
20405f70:	79e0d0ef          	jal	ra,2041370e <strcmp>
20405f74:	00050793          	mv	a5,a0
20405f78:	18079c63          	bnez	a5,20406110 <TVMGraphExecutor_Load+0x580>
      reader->BeginArray(reader);
20405f7c:	f7842783          	lw	a5,-136(s0)
20405f80:	0307a783          	lw	a5,48(a5)
20405f84:	f7842503          	lw	a0,-136(s0)
20405f88:	000780e7          	jalr	a5
      size_t num_items = 0;
20405f8c:	f8042a23          	sw	zero,-108(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20405f90:	f7842783          	lw	a5,-136(s0)
20405f94:	0407a703          	lw	a4,64(a5)
20405f98:	f9440793          	addi	a5,s0,-108
20405f9c:	00078593          	mv	a1,a5
20405fa0:	f7842503          	lw	a0,-136(s0)
20405fa4:	000700e7          	jalr	a4
20405fa8:	00050793          	mv	a5,a0
20405fac:	02078c63          	beqz	a5,20405fe4 <TVMGraphExecutor_Load+0x454>
        fprintf(stderr, "error determing list_int length\n");
20405fb0:	5fbfb797          	auipc	a5,0x5fbfb
20405fb4:	a8878793          	addi	a5,a5,-1400 # 80000a38 <_impure_ptr>
20405fb8:	0007a783          	lw	a5,0(a5)
20405fbc:	00c7a783          	lw	a5,12(a5)
20405fc0:	00078693          	mv	a3,a5
20405fc4:	02000613          	li	a2,32
20405fc8:	00100593          	li	a1,1
20405fcc:	0001a517          	auipc	a0,0x1a
20405fd0:	66450513          	addi	a0,a0,1636 # 20420630 <__func__.3846+0x450>
20405fd4:	3b40d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20405fd8:	fff00793          	li	a5,-1
20405fdc:	fef42623          	sw	a5,-20(s0)
        break;
20405fe0:	4080006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20405fe4:	00100793          	li	a5,1
20405fe8:	f8f42623          	sw	a5,-116(s0)
20405fec:	f8042823          	sw	zero,-112(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20405ff0:	f9442783          	lw	a5,-108(s0)
20405ff4:	00279713          	slli	a4,a5,0x2
                                                      (void**)&executor->node_row_ptr);
20405ff8:	f7c42783          	lw	a5,-132(s0)
20405ffc:	01078793          	addi	a5,a5,16
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * num_items, dev,
20406000:	00078693          	mv	a3,a5
20406004:	f8c42583          	lw	a1,-116(s0)
20406008:	f9042603          	lw	a2,-112(s0)
2040600c:	00070513          	mv	a0,a4
20406010:	d11fa0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20406014:	fca42e23          	sw	a0,-36(s0)
      if (err != kTvmErrorNoError) {
20406018:	fdc42783          	lw	a5,-36(s0)
2040601c:	0c078663          	beqz	a5,204060e8 <TVMGraphExecutor_Load+0x558>
        fprintf(stderr, "memory allocate error: %08x", err);
20406020:	5fbfb797          	auipc	a5,0x5fbfb
20406024:	a1878793          	addi	a5,a5,-1512 # 80000a38 <_impure_ptr>
20406028:	0007a783          	lw	a5,0(a5)
2040602c:	00c7a783          	lw	a5,12(a5)
20406030:	fdc42603          	lw	a2,-36(s0)
20406034:	0001a597          	auipc	a1,0x1a
20406038:	45458593          	addi	a1,a1,1108 # 20420488 <__func__.3846+0x2a8>
2040603c:	00078513          	mv	a0,a5
20406040:	2ae0d0ef          	jal	ra,204132ee <fprintf>
        status = -1;
20406044:	fff00793          	li	a5,-1
20406048:	fef42623          	sw	a5,-20(s0)
        break;
2040604c:	00000013          	nop
20406050:	3980006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->node_row_ptr_count == num_items) {
20406054:	f7c42783          	lw	a5,-132(s0)
20406058:	0147a703          	lw	a4,20(a5)
2040605c:	f9442783          	lw	a5,-108(s0)
20406060:	02f71e63          	bne	a4,a5,2040609c <TVMGraphExecutor_Load+0x50c>
          fprintf(stderr, "array too big\n");
20406064:	5fbfb797          	auipc	a5,0x5fbfb
20406068:	9d478793          	addi	a5,a5,-1580 # 80000a38 <_impure_ptr>
2040606c:	0007a783          	lw	a5,0(a5)
20406070:	00c7a783          	lw	a5,12(a5)
20406074:	00078693          	mv	a3,a5
20406078:	00e00613          	li	a2,14
2040607c:	00100593          	li	a1,1
20406080:	0001a517          	auipc	a0,0x1a
20406084:	4fc50513          	addi	a0,a0,1276 # 2042057c <__func__.3846+0x39c>
20406088:	3000d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
2040608c:	fff00793          	li	a5,-1
20406090:	fef42623          	sw	a5,-20(s0)
          return status;
20406094:	fec42783          	lw	a5,-20(s0)
20406098:	3900006f          	j	20406428 <TVMGraphExecutor_Load+0x898>
        }
        uint32_t count = executor->node_row_ptr_count;
2040609c:	f7c42783          	lw	a5,-132(s0)
204060a0:	0147a783          	lw	a5,20(a5)
204060a4:	fcf42c23          	sw	a5,-40(s0)
        uint32_t* node = executor->node_row_ptr + count;
204060a8:	f7c42783          	lw	a5,-132(s0)
204060ac:	0107a703          	lw	a4,16(a5)
204060b0:	fd842783          	lw	a5,-40(s0)
204060b4:	00279793          	slli	a5,a5,0x2
204060b8:	00f707b3          	add	a5,a4,a5
204060bc:	fcf42a23          	sw	a5,-44(s0)
        reader->ReadUnsignedInteger(reader, node);
204060c0:	f7842783          	lw	a5,-136(s0)
204060c4:	0247a783          	lw	a5,36(a5)
204060c8:	fd442583          	lw	a1,-44(s0)
204060cc:	f7842503          	lw	a0,-136(s0)
204060d0:	000780e7          	jalr	a5
        executor->node_row_ptr_count++;
204060d4:	f7c42783          	lw	a5,-132(s0)
204060d8:	0147a783          	lw	a5,20(a5)
204060dc:	00178713          	addi	a4,a5,1
204060e0:	f7c42783          	lw	a5,-132(s0)
204060e4:	00e7aa23          	sw	a4,20(a5)
      while (reader->NextArrayItem(reader)) {
204060e8:	f7842783          	lw	a5,-136(s0)
204060ec:	03c7a783          	lw	a5,60(a5)
204060f0:	f7842503          	lw	a0,-136(s0)
204060f4:	000780e7          	jalr	a5
204060f8:	00050793          	mv	a5,a0
204060fc:	f4079ce3          	bnez	a5,20406054 <TVMGraphExecutor_Load+0x4c4>
      }
      bitmask |= 4;
20406100:	fe842783          	lw	a5,-24(s0)
20406104:	0047e793          	ori	a5,a5,4
20406108:	fef42423          	sw	a5,-24(s0)
2040610c:	2a00006f          	j	204063ac <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "heads")) {
20406110:	fb040793          	addi	a5,s0,-80
20406114:	0001a597          	auipc	a1,0x1a
20406118:	5cc58593          	addi	a1,a1,1484 # 204206e0 <__func__.3846+0x500>
2040611c:	00078513          	mv	a0,a5
20406120:	5ee0d0ef          	jal	ra,2041370e <strcmp>
20406124:	00050793          	mv	a5,a0
20406128:	1c079063          	bnez	a5,204062e8 <TVMGraphExecutor_Load+0x758>
      reader->BeginArray(reader);
2040612c:	f7842783          	lw	a5,-136(s0)
20406130:	0307a783          	lw	a5,48(a5)
20406134:	f7842503          	lw	a0,-136(s0)
20406138:	000780e7          	jalr	a5
      size_t num_items = 0;
2040613c:	f8042423          	sw	zero,-120(s0)
      if (reader->ArrayLength(reader, &num_items) != 0) {
20406140:	f7842783          	lw	a5,-136(s0)
20406144:	0407a703          	lw	a4,64(a5)
20406148:	f8840793          	addi	a5,s0,-120
2040614c:	00078593          	mv	a1,a5
20406150:	f7842503          	lw	a0,-136(s0)
20406154:	000700e7          	jalr	a4
20406158:	00050793          	mv	a5,a0
2040615c:	02078c63          	beqz	a5,20406194 <TVMGraphExecutor_Load+0x604>
        fprintf(stderr, "error determing list_int length\n");
20406160:	5fbfb797          	auipc	a5,0x5fbfb
20406164:	8d878793          	addi	a5,a5,-1832 # 80000a38 <_impure_ptr>
20406168:	0007a783          	lw	a5,0(a5)
2040616c:	00c7a783          	lw	a5,12(a5)
20406170:	00078693          	mv	a3,a5
20406174:	02000613          	li	a2,32
20406178:	00100593          	li	a1,1
2040617c:	0001a517          	auipc	a0,0x1a
20406180:	4b450513          	addi	a0,a0,1204 # 20420630 <__func__.3846+0x450>
20406184:	2040d0ef          	jal	ra,20413388 <fwrite>
        status = -1;
20406188:	fff00793          	li	a5,-1
2040618c:	fef42623          	sw	a5,-20(s0)
        break;
20406190:	2580006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      DLDevice dev = {kDLCPU, 0};
20406194:	00100793          	li	a5,1
20406198:	f8f42023          	sw	a5,-128(s0)
2040619c:	f8042223          	sw	zero,-124(s0)
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNodeEntry) * num_items,
204061a0:	f8842783          	lw	a5,-120(s0)
204061a4:	00479713          	slli	a4,a5,0x4
                                                      dev, (void**)&executor->outputs);
204061a8:	f7c42783          	lw	a5,-132(s0)
204061ac:	01878793          	addi	a5,a5,24
      tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorNodeEntry) * num_items,
204061b0:	00078693          	mv	a3,a5
204061b4:	f8042583          	lw	a1,-128(s0)
204061b8:	f8442603          	lw	a2,-124(s0)
204061bc:	00070513          	mv	a0,a4
204061c0:	b61fa0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204061c4:	fea42223          	sw	a0,-28(s0)
      if (err != kTvmErrorNoError) {
204061c8:	fe442783          	lw	a5,-28(s0)
204061cc:	0e078a63          	beqz	a5,204062c0 <TVMGraphExecutor_Load+0x730>
        fprintf(stderr, "memory allocate error: %08x", err);
204061d0:	5fbfb797          	auipc	a5,0x5fbfb
204061d4:	86878793          	addi	a5,a5,-1944 # 80000a38 <_impure_ptr>
204061d8:	0007a783          	lw	a5,0(a5)
204061dc:	00c7a783          	lw	a5,12(a5)
204061e0:	fe442603          	lw	a2,-28(s0)
204061e4:	0001a597          	auipc	a1,0x1a
204061e8:	2a458593          	addi	a1,a1,676 # 20420488 <__func__.3846+0x2a8>
204061ec:	00078513          	mv	a0,a5
204061f0:	0fe0d0ef          	jal	ra,204132ee <fprintf>
        status = -1;
204061f4:	fff00793          	li	a5,-1
204061f8:	fef42623          	sw	a5,-20(s0)
        break;
204061fc:	00000013          	nop
20406200:	1e80006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      while (reader->NextArrayItem(reader)) {
        if (executor->outputs_count == num_items) {
20406204:	f7c42783          	lw	a5,-132(s0)
20406208:	01c7a703          	lw	a4,28(a5)
2040620c:	f8842783          	lw	a5,-120(s0)
20406210:	02f71e63          	bne	a4,a5,2040624c <TVMGraphExecutor_Load+0x6bc>
          fprintf(stderr, "array too big\n");
20406214:	5fbfb797          	auipc	a5,0x5fbfb
20406218:	82478793          	addi	a5,a5,-2012 # 80000a38 <_impure_ptr>
2040621c:	0007a783          	lw	a5,0(a5)
20406220:	00c7a783          	lw	a5,12(a5)
20406224:	00078693          	mv	a3,a5
20406228:	00e00613          	li	a2,14
2040622c:	00100593          	li	a1,1
20406230:	0001a517          	auipc	a0,0x1a
20406234:	34c50513          	addi	a0,a0,844 # 2042057c <__func__.3846+0x39c>
20406238:	1500d0ef          	jal	ra,20413388 <fwrite>
          status = -1;
2040623c:	fff00793          	li	a5,-1
20406240:	fef42623          	sw	a5,-20(s0)
          return status;
20406244:	fec42783          	lw	a5,-20(s0)
20406248:	1e00006f          	j	20406428 <TVMGraphExecutor_Load+0x898>
        }
        TVMGraphExecutorNodeEntry* entry = executor->outputs + executor->outputs_count;
2040624c:	f7c42783          	lw	a5,-132(s0)
20406250:	0187a703          	lw	a4,24(a5)
20406254:	f7c42783          	lw	a5,-132(s0)
20406258:	01c7a783          	lw	a5,28(a5)
2040625c:	00479793          	slli	a5,a5,0x4
20406260:	00f707b3          	add	a5,a4,a5
20406264:	fef42023          	sw	a5,-32(s0)
        status = NodeEntry_Load(entry, reader);
20406268:	f7842583          	lw	a1,-136(s0)
2040626c:	fe042503          	lw	a0,-32(s0)
20406270:	b89fd0ef          	jal	ra,20403df8 <NodeEntry_Load>
20406274:	fea42623          	sw	a0,-20(s0)
        if (status != 0) {
20406278:	fec42783          	lw	a5,-20(s0)
2040627c:	02078863          	beqz	a5,204062ac <TVMGraphExecutor_Load+0x71c>
          fprintf(stderr, "Fail to load an element in `heads` field in graph executor node.\n");
20406280:	5fbfa797          	auipc	a5,0x5fbfa
20406284:	7b878793          	addi	a5,a5,1976 # 80000a38 <_impure_ptr>
20406288:	0007a783          	lw	a5,0(a5)
2040628c:	00c7a783          	lw	a5,12(a5)
20406290:	00078693          	mv	a3,a5
20406294:	04100613          	li	a2,65
20406298:	00100593          	li	a1,1
2040629c:	0001a517          	auipc	a0,0x1a
204062a0:	44c50513          	addi	a0,a0,1100 # 204206e8 <__func__.3846+0x508>
204062a4:	0e40d0ef          	jal	ra,20413388 <fwrite>
          break;
204062a8:	0300006f          	j	204062d8 <TVMGraphExecutor_Load+0x748>
        }
        executor->outputs_count++;
204062ac:	f7c42783          	lw	a5,-132(s0)
204062b0:	01c7a783          	lw	a5,28(a5)
204062b4:	00178713          	addi	a4,a5,1
204062b8:	f7c42783          	lw	a5,-132(s0)
204062bc:	00e7ae23          	sw	a4,28(a5)
      while (reader->NextArrayItem(reader)) {
204062c0:	f7842783          	lw	a5,-136(s0)
204062c4:	03c7a783          	lw	a5,60(a5)
204062c8:	f7842503          	lw	a0,-136(s0)
204062cc:	000780e7          	jalr	a5
204062d0:	00050793          	mv	a5,a0
204062d4:	f20798e3          	bnez	a5,20406204 <TVMGraphExecutor_Load+0x674>
      }
      bitmask |= 8;
204062d8:	fe842783          	lw	a5,-24(s0)
204062dc:	0087e793          	ori	a5,a5,8
204062e0:	fef42423          	sw	a5,-24(s0)
204062e4:	0c80006f          	j	204063ac <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "attrs")) {
204062e8:	fb040793          	addi	a5,s0,-80
204062ec:	0001a597          	auipc	a1,0x1a
204062f0:	1f458593          	addi	a1,a1,500 # 204204e0 <__func__.3846+0x300>
204062f4:	00078513          	mv	a0,a5
204062f8:	4160d0ef          	jal	ra,2041370e <strcmp>
204062fc:	00050793          	mv	a5,a0
20406300:	06079063          	bnez	a5,20406360 <TVMGraphExecutor_Load+0x7d0>
      status = TVMGraphExecutorGraphAttr_Load(&(executor->attrs), reader);
20406304:	f7c42783          	lw	a5,-132(s0)
20406308:	02078793          	addi	a5,a5,32
2040630c:	f7842583          	lw	a1,-136(s0)
20406310:	00078513          	mv	a0,a5
20406314:	d54fe0ef          	jal	ra,20404868 <TVMGraphExecutorGraphAttr_Load>
20406318:	fea42623          	sw	a0,-20(s0)
      if (status != 0) {
2040631c:	fec42783          	lw	a5,-20(s0)
20406320:	02078863          	beqz	a5,20406350 <TVMGraphExecutor_Load+0x7c0>
        fprintf(stderr, "Fail to load an element in `heads` field in graph executor node.\n");
20406324:	5fbfa797          	auipc	a5,0x5fbfa
20406328:	71478793          	addi	a5,a5,1812 # 80000a38 <_impure_ptr>
2040632c:	0007a783          	lw	a5,0(a5)
20406330:	00c7a783          	lw	a5,12(a5)
20406334:	00078693          	mv	a3,a5
20406338:	04100613          	li	a2,65
2040633c:	00100593          	li	a1,1
20406340:	0001a517          	auipc	a0,0x1a
20406344:	3a850513          	addi	a0,a0,936 # 204206e8 <__func__.3846+0x508>
20406348:	0400d0ef          	jal	ra,20413388 <fwrite>
        break;
2040634c:	09c0006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      }
      bitmask |= 16;
20406350:	fe842783          	lw	a5,-24(s0)
20406354:	0107e793          	ori	a5,a5,16
20406358:	fef42423          	sw	a5,-24(s0)
2040635c:	0500006f          	j	204063ac <TVMGraphExecutor_Load+0x81c>
    } else if (!strcmp(key, "metadata")) {
20406360:	fb040793          	addi	a5,s0,-80
20406364:	0001a597          	auipc	a1,0x1a
20406368:	3c858593          	addi	a1,a1,968 # 2042072c <__func__.3846+0x54c>
2040636c:	00078513          	mv	a0,a5
20406370:	39e0d0ef          	jal	ra,2041370e <strcmp>
20406374:	00050793          	mv	a5,a0
20406378:	06078263          	beqz	a5,204063dc <TVMGraphExecutor_Load+0x84c>
      break;
    } else {
      fprintf(stderr, "key %s is not supported\n", key);
2040637c:	5fbfa797          	auipc	a5,0x5fbfa
20406380:	6bc78793          	addi	a5,a5,1724 # 80000a38 <_impure_ptr>
20406384:	0007a783          	lw	a5,0(a5)
20406388:	00c7a783          	lw	a5,12(a5)
2040638c:	fb040713          	addi	a4,s0,-80
20406390:	00070613          	mv	a2,a4
20406394:	0001a597          	auipc	a1,0x1a
20406398:	3a458593          	addi	a1,a1,932 # 20420738 <__func__.3846+0x558>
2040639c:	00078513          	mv	a0,a5
204063a0:	74f0c0ef          	jal	ra,204132ee <fprintf>
      status = -1;
204063a4:	fff00793          	li	a5,-1
204063a8:	fef42623          	sw	a5,-20(s0)
    }
    if (status != 0) {
204063ac:	fec42783          	lw	a5,-20(s0)
204063b0:	02079a63          	bnez	a5,204063e4 <TVMGraphExecutor_Load+0x854>
  while (reader->NextObjectItem(reader, key, sizeof(key))) {
204063b4:	f7842783          	lw	a5,-136(s0)
204063b8:	0387a703          	lw	a4,56(a5)
204063bc:	fb040793          	addi	a5,s0,-80
204063c0:	01400613          	li	a2,20
204063c4:	00078593          	mv	a1,a5
204063c8:	f7842503          	lw	a0,-136(s0)
204063cc:	000700e7          	jalr	a4
204063d0:	00050793          	mv	a5,a0
204063d4:	fe079a63          	bnez	a5,20405bc8 <TVMGraphExecutor_Load+0x38>
204063d8:	0100006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      break;
204063dc:	00000013          	nop
204063e0:	0080006f          	j	204063e8 <TVMGraphExecutor_Load+0x858>
      break;
204063e4:	00000013          	nop
    }
  }
  if (!(bitmask == (1 | 2 | 4 | 8 | 16))) {
204063e8:	fe842703          	lw	a4,-24(s0)
204063ec:	01f00793          	li	a5,31
204063f0:	02f70a63          	beq	a4,a5,20406424 <TVMGraphExecutor_Load+0x894>
    fprintf(stderr, "invalid format\n");
204063f4:	5fbfa797          	auipc	a5,0x5fbfa
204063f8:	64478793          	addi	a5,a5,1604 # 80000a38 <_impure_ptr>
204063fc:	0007a783          	lw	a5,0(a5)
20406400:	00c7a783          	lw	a5,12(a5)
20406404:	00078693          	mv	a3,a5
20406408:	00f00613          	li	a2,15
2040640c:	00100593          	li	a1,1
20406410:	0001a517          	auipc	a0,0x1a
20406414:	00450513          	addi	a0,a0,4 # 20420414 <__func__.3846+0x234>
20406418:	7710c0ef          	jal	ra,20413388 <fwrite>
    status = -1;
2040641c:	fff00793          	li	a5,-1
20406420:	fef42623          	sw	a5,-20(s0)
  }
  return status;
20406424:	fec42783          	lw	a5,-20(s0)
}
20406428:	00078513          	mv	a0,a5
2040642c:	08c12083          	lw	ra,140(sp)
20406430:	08812403          	lw	s0,136(sp)
20406434:	08412483          	lw	s1,132(sp)
20406438:	09010113          	addi	sp,sp,144
2040643c:	00008067          	ret

20406440 <TVMGraphExecutor_GetEntryId>:

uint32_t TVMGraphExecutor_GetEntryId(TVMGraphExecutor* executor, uint32_t nid, uint32_t index) {
20406440:	fe010113          	addi	sp,sp,-32
20406444:	00812e23          	sw	s0,28(sp)
20406448:	02010413          	addi	s0,sp,32
2040644c:	fea42623          	sw	a0,-20(s0)
20406450:	feb42423          	sw	a1,-24(s0)
20406454:	fec42223          	sw	a2,-28(s0)
  return executor->node_row_ptr[nid] + index;
20406458:	fec42783          	lw	a5,-20(s0)
2040645c:	0107a703          	lw	a4,16(a5)
20406460:	fe842783          	lw	a5,-24(s0)
20406464:	00279793          	slli	a5,a5,0x2
20406468:	00f707b3          	add	a5,a4,a5
2040646c:	0007a703          	lw	a4,0(a5)
20406470:	fe442783          	lw	a5,-28(s0)
20406474:	00f707b3          	add	a5,a4,a5
}
20406478:	00078513          	mv	a0,a5
2040647c:	01c12403          	lw	s0,28(sp)
20406480:	02010113          	addi	sp,sp,32
20406484:	00008067          	ret

20406488 <TVMGraphExecutor_GetNumInputs>:
/*!
 * \brief Get the number of input tensors allocated.
 * \param executor The graph executor.
 * \return the number of input tensors allocated.
 */
int TVMGraphExecutor_GetNumInputs(TVMGraphExecutor* executor) {
20406488:	fe010113          	addi	sp,sp,-32
2040648c:	00812e23          	sw	s0,28(sp)
20406490:	02010413          	addi	s0,sp,32
20406494:	fea42623          	sw	a0,-20(s0)
  return executor->input_nodes_count;
20406498:	fec42783          	lw	a5,-20(s0)
2040649c:	00c7a783          	lw	a5,12(a5)
}
204064a0:	00078513          	mv	a0,a5
204064a4:	01c12403          	lw	s0,28(sp)
204064a8:	02010113          	addi	sp,sp,32
204064ac:	00008067          	ret

204064b0 <TVMGraphExecutor_GetInputIndex>:
 * \brief Get the input index given the name of input.
 * \param executor The graph executor.
 * \param name The name of the input.
 * \return The index of input.
 */
int TVMGraphExecutor_GetInputIndex(TVMGraphExecutor* executor, const char* name) {
204064b0:	fd010113          	addi	sp,sp,-48
204064b4:	02112623          	sw	ra,44(sp)
204064b8:	02812423          	sw	s0,40(sp)
204064bc:	02912223          	sw	s1,36(sp)
204064c0:	03010413          	addi	s0,sp,48
204064c4:	fca42e23          	sw	a0,-36(s0)
204064c8:	fcb42c23          	sw	a1,-40(s0)
  uint32_t i;
  int32_t rv = -1;
204064cc:	fff00793          	li	a5,-1
204064d0:	fef42423          	sw	a5,-24(s0)
  for (i = 0; i < executor->input_nodes_count; ++i) {
204064d4:	fe042623          	sw	zero,-20(s0)
204064d8:	06c0006f          	j	20406544 <TVMGraphExecutor_GetInputIndex+0x94>
    uint32_t nid = executor->input_nodes[i];
204064dc:	fdc42783          	lw	a5,-36(s0)
204064e0:	0087a703          	lw	a4,8(a5)
204064e4:	fec42783          	lw	a5,-20(s0)
204064e8:	00279793          	slli	a5,a5,0x2
204064ec:	00f707b3          	add	a5,a4,a5
204064f0:	0007a783          	lw	a5,0(a5)
204064f4:	fef42223          	sw	a5,-28(s0)
    if (!strcmp(executor->nodes[nid].name, name)) {
204064f8:	fdc42783          	lw	a5,-36(s0)
204064fc:	0007a483          	lw	s1,0(a5)
20406500:	16c00593          	li	a1,364
20406504:	fe442503          	lw	a0,-28(s0)
20406508:	728190ef          	jal	ra,2041fc30 <__mulsi3>
2040650c:	00050793          	mv	a5,a0
20406510:	00f487b3          	add	a5,s1,a5
20406514:	01078793          	addi	a5,a5,16
20406518:	fd842583          	lw	a1,-40(s0)
2040651c:	00078513          	mv	a0,a5
20406520:	1ee0d0ef          	jal	ra,2041370e <strcmp>
20406524:	00050793          	mv	a5,a0
20406528:	00079863          	bnez	a5,20406538 <TVMGraphExecutor_GetInputIndex+0x88>
      rv = i;
2040652c:	fec42783          	lw	a5,-20(s0)
20406530:	fef42423          	sw	a5,-24(s0)
      break;
20406534:	0200006f          	j	20406554 <TVMGraphExecutor_GetInputIndex+0xa4>
  for (i = 0; i < executor->input_nodes_count; ++i) {
20406538:	fec42783          	lw	a5,-20(s0)
2040653c:	00178793          	addi	a5,a5,1
20406540:	fef42623          	sw	a5,-20(s0)
20406544:	fdc42783          	lw	a5,-36(s0)
20406548:	00c7a783          	lw	a5,12(a5)
2040654c:	fec42703          	lw	a4,-20(s0)
20406550:	f8f766e3          	bltu	a4,a5,204064dc <TVMGraphExecutor_GetInputIndex+0x2c>
    }
  }
  CHECK_GE(rv, 0, "cannot find '%s' among input.", name);
20406554:	fe842783          	lw	a5,-24(s0)
20406558:	0207dc63          	bgez	a5,20406590 <TVMGraphExecutor_GetInputIndex+0xe0>
2040655c:	fd842783          	lw	a5,-40(s0)
20406560:	0001a717          	auipc	a4,0x1a
20406564:	1f470713          	addi	a4,a4,500 # 20420754 <__func__.3846+0x574>
20406568:	0001a697          	auipc	a3,0x1a
2040656c:	1f068693          	addi	a3,a3,496 # 20420758 <__func__.3846+0x578>
20406570:	0001a617          	auipc	a2,0x1a
20406574:	1ec60613          	addi	a2,a2,492 # 2042075c <__func__.3846+0x57c>
20406578:	2f300593          	li	a1,755
2040657c:	0001a517          	auipc	a0,0x1a
20406580:	1e450513          	addi	a0,a0,484 # 20420760 <__func__.3846+0x580>
20406584:	1b9070ef          	jal	ra,2040df3c <TVMLogf>
20406588:	50000513          	li	a0,1280
2040658c:	ef0fa0ef          	jal	ra,20400c7c <TVMPlatformAbort>
  return rv;
20406590:	fe842783          	lw	a5,-24(s0)
}
20406594:	00078513          	mv	a0,a5
20406598:	02c12083          	lw	ra,44(sp)
2040659c:	02812403          	lw	s0,40(sp)
204065a0:	02412483          	lw	s1,36(sp)
204065a4:	03010113          	addi	sp,sp,48
204065a8:	00008067          	ret

204065ac <TVMGraphExecutor_SetInput>:
 * \brief set input to the graph based on name.
 * \param executor The graph executor.
 * \param name The name of the input.
 * \param data_in The input data.
 */
void TVMGraphExecutor_SetInput(TVMGraphExecutor* executor, const char* name, DLTensor* data_in) {
204065ac:	fd010113          	addi	sp,sp,-48
204065b0:	02112623          	sw	ra,44(sp)
204065b4:	02812423          	sw	s0,40(sp)
204065b8:	03010413          	addi	s0,sp,48
204065bc:	fca42e23          	sw	a0,-36(s0)
204065c0:	fcb42c23          	sw	a1,-40(s0)
204065c4:	fcc42a23          	sw	a2,-44(s0)
  uint32_t index = TVMGraphExecutor_GetInputIndex(executor, name);
204065c8:	fd842583          	lw	a1,-40(s0)
204065cc:	fdc42503          	lw	a0,-36(s0)
204065d0:	ee1ff0ef          	jal	ra,204064b0 <TVMGraphExecutor_GetInputIndex>
204065d4:	00050793          	mv	a5,a0
204065d8:	fef42623          	sw	a5,-20(s0)
  if (index >= executor->input_nodes_count) {
204065dc:	fdc42783          	lw	a5,-36(s0)
204065e0:	00c7a783          	lw	a5,12(a5)
204065e4:	fec42703          	lw	a4,-20(s0)
204065e8:	02f76663          	bltu	a4,a5,20406614 <TVMGraphExecutor_SetInput+0x68>
    fprintf(stderr, "given index is greater than num of input nodes.\n");
204065ec:	5fbfa797          	auipc	a5,0x5fbfa
204065f0:	44c78793          	addi	a5,a5,1100 # 80000a38 <_impure_ptr>
204065f4:	0007a783          	lw	a5,0(a5)
204065f8:	00c7a783          	lw	a5,12(a5)
204065fc:	00078693          	mv	a3,a5
20406600:	03000613          	li	a2,48
20406604:	00100593          	li	a1,1
20406608:	0001a517          	auipc	a0,0x1a
2040660c:	1c850513          	addi	a0,a0,456 # 204207d0 <__func__.3846+0x5f0>
20406610:	5790c0ef          	jal	ra,20413388 <fwrite>
  }
  uint32_t eid = TVMGraphExecutor_GetEntryId(executor, executor->input_nodes[index], 0);
20406614:	fdc42783          	lw	a5,-36(s0)
20406618:	0087a703          	lw	a4,8(a5)
2040661c:	fec42783          	lw	a5,-20(s0)
20406620:	00279793          	slli	a5,a5,0x2
20406624:	00f707b3          	add	a5,a4,a5
20406628:	0007a783          	lw	a5,0(a5)
2040662c:	00000613          	li	a2,0
20406630:	00078593          	mv	a1,a5
20406634:	fdc42503          	lw	a0,-36(s0)
20406638:	e09ff0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
2040663c:	fea42423          	sw	a0,-24(s0)
  executor->data_entry[eid].dl_tensor.data = data_in->data;
20406640:	fdc42783          	lw	a5,-36(s0)
20406644:	0587a683          	lw	a3,88(a5)
20406648:	fe842703          	lw	a4,-24(s0)
2040664c:	00070793          	mv	a5,a4
20406650:	00279793          	slli	a5,a5,0x2
20406654:	00e787b3          	add	a5,a5,a4
20406658:	00379793          	slli	a5,a5,0x3
2040665c:	00f687b3          	add	a5,a3,a5
20406660:	fd442703          	lw	a4,-44(s0)
20406664:	00072703          	lw	a4,0(a4)
20406668:	00e7a023          	sw	a4,0(a5)
}
2040666c:	00000013          	nop
20406670:	02c12083          	lw	ra,44(sp)
20406674:	02812403          	lw	s0,40(sp)
20406678:	03010113          	addi	sp,sp,48
2040667c:	00008067          	ret

20406680 <TVMGraphExecutor_LoadParams>:
 * \param param_blob A binary blob of parameter.
 * \param param_size The parameter size.
 * \return The result of this function execution.
 */
int TVMGraphExecutor_LoadParams(TVMGraphExecutor* executor, const char* param_blob,
                                const uint32_t param_size) {
20406680:	f7010113          	addi	sp,sp,-144
20406684:	08112623          	sw	ra,140(sp)
20406688:	08812423          	sw	s0,136(sp)
2040668c:	09212223          	sw	s2,132(sp)
20406690:	09312023          	sw	s3,128(sp)
20406694:	07412e23          	sw	s4,124(sp)
20406698:	07512c23          	sw	s5,120(sp)
2040669c:	09010413          	addi	s0,sp,144
204066a0:	f6a42e23          	sw	a0,-132(s0)
204066a4:	f6b42c23          	sw	a1,-136(s0)
204066a8:	f6c42a23          	sw	a2,-140(s0)
  int status = 0;
204066ac:	fc042e23          	sw	zero,-36(s0)
  const char* bptr = param_blob;
204066b0:	f7842783          	lw	a5,-136(s0)
204066b4:	fcf42223          	sw	a5,-60(s0)
  uint64_t header, reserved;
  memcpy(&header, bptr, sizeof(header));
204066b8:	fc442783          	lw	a5,-60(s0)
204066bc:	0047a803          	lw	a6,4(a5)
204066c0:	0007a783          	lw	a5,0(a5)
204066c4:	faf42c23          	sw	a5,-72(s0)
204066c8:	fb042e23          	sw	a6,-68(s0)
  bptr += sizeof(header);
204066cc:	fc442783          	lw	a5,-60(s0)
204066d0:	00878793          	addi	a5,a5,8
204066d4:	fcf42223          	sw	a5,-60(s0)
  if (header != kTVMNDArrayListMagic) {
204066d8:	fb842683          	lw	a3,-72(s0)
204066dc:	fbc42703          	lw	a4,-68(s0)
204066e0:	0001a797          	auipc	a5,0x1a
204066e4:	5f078793          	addi	a5,a5,1520 # 20420cd0 <__func__.3846+0xaf0>
204066e8:	0047a803          	lw	a6,4(a5)
204066ec:	0007a783          	lw	a5,0(a5)
204066f0:	00068593          	mv	a1,a3
204066f4:	00078613          	mv	a2,a5
204066f8:	00c59663          	bne	a1,a2,20406704 <TVMGraphExecutor_LoadParams+0x84>
204066fc:	00080793          	mv	a5,a6
20406700:	02f70a63          	beq	a4,a5,20406734 <TVMGraphExecutor_LoadParams+0xb4>
    fprintf(stderr, "Invalid parameters file format");
20406704:	5fbfa797          	auipc	a5,0x5fbfa
20406708:	33478793          	addi	a5,a5,820 # 80000a38 <_impure_ptr>
2040670c:	0007a783          	lw	a5,0(a5)
20406710:	00c7a783          	lw	a5,12(a5)
20406714:	00078693          	mv	a3,a5
20406718:	01e00613          	li	a2,30
2040671c:	00100593          	li	a1,1
20406720:	0001a517          	auipc	a0,0x1a
20406724:	0e450513          	addi	a0,a0,228 # 20420804 <__func__.3846+0x624>
20406728:	4610c0ef          	jal	ra,20413388 <fwrite>
    status = -1;
2040672c:	fff00793          	li	a5,-1
20406730:	fcf42e23          	sw	a5,-36(s0)
  }
  memcpy(&reserved, bptr, sizeof(reserved));
20406734:	fc442783          	lw	a5,-60(s0)
20406738:	0047a803          	lw	a6,4(a5)
2040673c:	0007a783          	lw	a5,0(a5)
20406740:	faf42823          	sw	a5,-80(s0)
20406744:	fb042a23          	sw	a6,-76(s0)
  bptr += sizeof(reserved);
20406748:	fc442783          	lw	a5,-60(s0)
2040674c:	00878793          	addi	a5,a5,8
20406750:	fcf42223          	sw	a5,-60(s0)

  // read names
  char* names = NULL;
20406754:	fa042623          	sw	zero,-84(s0)
  DLDevice dev = {kDLCPU, 0};
20406758:	00100793          	li	a5,1
2040675c:	faf42223          	sw	a5,-92(s0)
20406760:	fa042423          	sw	zero,-88(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(
      TVM_CRT_MAX_STRLEN_PARAM_NAME * executor->nodes_count, dev, (void**)&names);
20406764:	f7c42783          	lw	a5,-132(s0)
20406768:	0047a703          	lw	a4,4(a5)
2040676c:	00070793          	mv	a5,a4
20406770:	00279793          	slli	a5,a5,0x2
20406774:	00e787b3          	add	a5,a5,a4
20406778:	00479793          	slli	a5,a5,0x4
2040677c:	00078713          	mv	a4,a5
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(
20406780:	fac40793          	addi	a5,s0,-84
20406784:	00078693          	mv	a3,a5
20406788:	fa442583          	lw	a1,-92(s0)
2040678c:	fa842603          	lw	a2,-88(s0)
20406790:	00070513          	mv	a0,a4
20406794:	d8cfa0ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20406798:	fca42a23          	sw	a0,-44(s0)
  if (err != kTvmErrorNoError) {
2040679c:	fd442783          	lw	a5,-44(s0)
204067a0:	02078c63          	beqz	a5,204067d8 <TVMGraphExecutor_LoadParams+0x158>
    fprintf(stderr, "memory allocate error: %08x", err);
204067a4:	5fbfa797          	auipc	a5,0x5fbfa
204067a8:	29478793          	addi	a5,a5,660 # 80000a38 <_impure_ptr>
204067ac:	0007a783          	lw	a5,0(a5)
204067b0:	00c7a783          	lw	a5,12(a5)
204067b4:	fd442603          	lw	a2,-44(s0)
204067b8:	0001a597          	auipc	a1,0x1a
204067bc:	cd058593          	addi	a1,a1,-816 # 20420488 <__func__.3846+0x2a8>
204067c0:	00078513          	mv	a0,a5
204067c4:	32b0c0ef          	jal	ra,204132ee <fprintf>
    status = -1;
204067c8:	fff00793          	li	a5,-1
204067cc:	fcf42e23          	sw	a5,-36(s0)
    return status;
204067d0:	fdc42783          	lw	a5,-36(s0)
204067d4:	4980006f          	j	20406c6c <TVMGraphExecutor_LoadParams+0x5ec>
  }
  memset(names, 0, TVM_CRT_MAX_STRLEN_PARAM_NAME * executor->nodes_count);
204067d8:	fac42683          	lw	a3,-84(s0)
204067dc:	f7c42783          	lw	a5,-132(s0)
204067e0:	0047a703          	lw	a4,4(a5)
204067e4:	00070793          	mv	a5,a4
204067e8:	00279793          	slli	a5,a5,0x2
204067ec:	00e787b3          	add	a5,a5,a4
204067f0:	00479793          	slli	a5,a5,0x4
204067f4:	00078613          	mv	a2,a5
204067f8:	00000593          	li	a1,0
204067fc:	00068513          	mv	a0,a3
20406800:	5930c0ef          	jal	ra,20413592 <memset>
  uint64_t names_count;
  int idx;
  memcpy(&names_count, bptr, sizeof(names_count));
20406804:	fc442783          	lw	a5,-60(s0)
20406808:	0047a803          	lw	a6,4(a5)
2040680c:	0007a783          	lw	a5,0(a5)
20406810:	f8f42c23          	sw	a5,-104(s0)
20406814:	f9042e23          	sw	a6,-100(s0)
  bptr += sizeof(names_count);
20406818:	fc442783          	lw	a5,-60(s0)
2040681c:	00878793          	addi	a5,a5,8
20406820:	fcf42223          	sw	a5,-60(s0)
  for (idx = 0; idx < names_count; idx++) {
20406824:	fc042c23          	sw	zero,-40(s0)
20406828:	0d00006f          	j	204068f8 <TVMGraphExecutor_LoadParams+0x278>
    uint64_t name_length;
    memcpy(&name_length, bptr, sizeof(name_length));
2040682c:	fc442783          	lw	a5,-60(s0)
20406830:	0047a803          	lw	a6,4(a5)
20406834:	0007a783          	lw	a5,0(a5)
20406838:	f8f42423          	sw	a5,-120(s0)
2040683c:	f9042623          	sw	a6,-116(s0)
    bptr += sizeof(name_length);
20406840:	fc442783          	lw	a5,-60(s0)
20406844:	00878793          	addi	a5,a5,8
20406848:	fcf42223          	sw	a5,-60(s0)
    if (name_length >= TVM_CRT_MAX_STRLEN_PARAM_NAME) {
2040684c:	f8842783          	lw	a5,-120(s0)
20406850:	f8c42803          	lw	a6,-116(s0)
20406854:	00080713          	mv	a4,a6
20406858:	00071c63          	bnez	a4,20406870 <TVMGraphExecutor_LoadParams+0x1f0>
2040685c:	00080713          	mv	a4,a6
20406860:	04071063          	bnez	a4,204068a0 <TVMGraphExecutor_LoadParams+0x220>
20406864:	00078713          	mv	a4,a5
20406868:	04f00793          	li	a5,79
2040686c:	02e7fa63          	bleu	a4,a5,204068a0 <TVMGraphExecutor_LoadParams+0x220>
      fprintf(stderr, "Error: function name longer than expected.\n");
20406870:	5fbfa797          	auipc	a5,0x5fbfa
20406874:	1c878793          	addi	a5,a5,456 # 80000a38 <_impure_ptr>
20406878:	0007a783          	lw	a5,0(a5)
2040687c:	00c7a783          	lw	a5,12(a5)
20406880:	00078693          	mv	a3,a5
20406884:	02b00613          	li	a2,43
20406888:	00100593          	li	a1,1
2040688c:	0001a517          	auipc	a0,0x1a
20406890:	f9850513          	addi	a0,a0,-104 # 20420824 <__func__.3846+0x644>
20406894:	2f50c0ef          	jal	ra,20413388 <fwrite>
      status = -1;
20406898:	fff00793          	li	a5,-1
2040689c:	fcf42e23          	sw	a5,-36(s0)
    }
    memcpy(names + TVM_CRT_MAX_STRLEN_PARAM_NAME * idx, bptr, name_length);
204068a0:	fac42683          	lw	a3,-84(s0)
204068a4:	fd842703          	lw	a4,-40(s0)
204068a8:	00070793          	mv	a5,a4
204068ac:	00279793          	slli	a5,a5,0x2
204068b0:	00e787b3          	add	a5,a5,a4
204068b4:	00479793          	slli	a5,a5,0x4
204068b8:	00f68733          	add	a4,a3,a5
204068bc:	fc442683          	lw	a3,-60(s0)
204068c0:	f8842783          	lw	a5,-120(s0)
204068c4:	f8c42803          	lw	a6,-116(s0)
204068c8:	00078613          	mv	a2,a5
204068cc:	00068593          	mv	a1,a3
204068d0:	00070513          	mv	a0,a4
204068d4:	4010c0ef          	jal	ra,204134d4 <memcpy>
    bptr += name_length;
204068d8:	fc442703          	lw	a4,-60(s0)
204068dc:	f8842783          	lw	a5,-120(s0)
204068e0:	f8c42803          	lw	a6,-116(s0)
204068e4:	00f707b3          	add	a5,a4,a5
204068e8:	fcf42223          	sw	a5,-60(s0)
  for (idx = 0; idx < names_count; idx++) {
204068ec:	fd842783          	lw	a5,-40(s0)
204068f0:	00178793          	addi	a5,a5,1
204068f4:	fcf42c23          	sw	a5,-40(s0)
204068f8:	fd842783          	lw	a5,-40(s0)
204068fc:	00078913          	mv	s2,a5
20406900:	41f7d793          	srai	a5,a5,0x1f
20406904:	00078993          	mv	s3,a5
20406908:	f9842783          	lw	a5,-104(s0)
2040690c:	f9c42803          	lw	a6,-100(s0)
20406910:	00080693          	mv	a3,a6
20406914:	00098713          	mv	a4,s3
20406918:	f0d76ae3          	bltu	a4,a3,2040682c <TVMGraphExecutor_LoadParams+0x1ac>
2040691c:	00080693          	mv	a3,a6
20406920:	00098713          	mv	a4,s3
20406924:	00e69863          	bne	a3,a4,20406934 <TVMGraphExecutor_LoadParams+0x2b4>
20406928:	00078713          	mv	a4,a5
2040692c:	00090793          	mv	a5,s2
20406930:	eee7eee3          	bltu	a5,a4,2040682c <TVMGraphExecutor_LoadParams+0x1ac>
  }

  // read sizes
  uint64_t sz;
  memcpy(&sz, bptr, sizeof(sz));
20406934:	fc442783          	lw	a5,-60(s0)
20406938:	0047a803          	lw	a6,4(a5)
2040693c:	0007a783          	lw	a5,0(a5)
20406940:	f8f42823          	sw	a5,-112(s0)
20406944:	f9042a23          	sw	a6,-108(s0)
  bptr += sizeof(sz);
20406948:	fc442783          	lw	a5,-60(s0)
2040694c:	00878793          	addi	a5,a5,8
20406950:	fcf42223          	sw	a5,-60(s0)
  uint32_t size = sz;
20406954:	f9042783          	lw	a5,-112(s0)
20406958:	f9442803          	lw	a6,-108(s0)
2040695c:	fcf42823          	sw	a5,-48(s0)
  if (size != names_count) {
20406960:	fd042783          	lw	a5,-48(s0)
20406964:	00078a13          	mv	s4,a5
20406968:	00000a93          	li	s5,0
2040696c:	f9842783          	lw	a5,-104(s0)
20406970:	f9c42803          	lw	a6,-100(s0)
20406974:	000a0693          	mv	a3,s4
20406978:	00078713          	mv	a4,a5
2040697c:	00e69863          	bne	a3,a4,2040698c <TVMGraphExecutor_LoadParams+0x30c>
20406980:	000a8713          	mv	a4,s5
20406984:	00080793          	mv	a5,a6
20406988:	02f70a63          	beq	a4,a5,204069bc <TVMGraphExecutor_LoadParams+0x33c>
    fprintf(stderr, "Invalid parameters file format\n");
2040698c:	5fbfa797          	auipc	a5,0x5fbfa
20406990:	0ac78793          	addi	a5,a5,172 # 80000a38 <_impure_ptr>
20406994:	0007a783          	lw	a5,0(a5)
20406998:	00c7a783          	lw	a5,12(a5)
2040699c:	00078693          	mv	a3,a5
204069a0:	01f00613          	li	a2,31
204069a4:	00100593          	li	a1,1
204069a8:	0001a517          	auipc	a0,0x1a
204069ac:	ea850513          	addi	a0,a0,-344 # 20420850 <__func__.3846+0x670>
204069b0:	1d90c0ef          	jal	ra,20413388 <fwrite>
    status = -1;
204069b4:	fff00793          	li	a5,-1
204069b8:	fcf42e23          	sw	a5,-36(s0)
  }

  for (idx = 0; idx < size; idx++) {
204069bc:	fc042c23          	sw	zero,-40(s0)
204069c0:	26c0006f          	j	20406c2c <TVMGraphExecutor_LoadParams+0x5ac>
    int32_t in_idx =
        TVMGraphExecutor_GetInputIndex(executor, names + TVM_CRT_MAX_STRLEN_PARAM_NAME * idx);
204069c4:	fac42683          	lw	a3,-84(s0)
204069c8:	fd842703          	lw	a4,-40(s0)
204069cc:	00070793          	mv	a5,a4
204069d0:	00279793          	slli	a5,a5,0x2
204069d4:	00e787b3          	add	a5,a5,a4
204069d8:	00479793          	slli	a5,a5,0x4
204069dc:	00f687b3          	add	a5,a3,a5
    int32_t in_idx =
204069e0:	00078593          	mv	a1,a5
204069e4:	f7c42503          	lw	a0,-132(s0)
204069e8:	ac9ff0ef          	jal	ra,204064b0 <TVMGraphExecutor_GetInputIndex>
204069ec:	fca42623          	sw	a0,-52(s0)
    CHECK_GT(in_idx, 0, "Found param for non-existent input: %s\n",
204069f0:	fcc42783          	lw	a5,-52(s0)
204069f4:	04f04863          	bgtz	a5,20406a44 <TVMGraphExecutor_LoadParams+0x3c4>
204069f8:	fac42683          	lw	a3,-84(s0)
204069fc:	fd842703          	lw	a4,-40(s0)
20406a00:	00070793          	mv	a5,a4
20406a04:	00279793          	slli	a5,a5,0x2
20406a08:	00e787b3          	add	a5,a5,a4
20406a0c:	00479793          	slli	a5,a5,0x4
20406a10:	00f687b3          	add	a5,a3,a5
20406a14:	0001a717          	auipc	a4,0x1a
20406a18:	d4070713          	addi	a4,a4,-704 # 20420754 <__func__.3846+0x574>
20406a1c:	0001a697          	auipc	a3,0x1a
20406a20:	e5468693          	addi	a3,a3,-428 # 20420870 <__func__.3846+0x690>
20406a24:	0001a617          	auipc	a2,0x1a
20406a28:	e5060613          	addi	a2,a2,-432 # 20420874 <__func__.3846+0x694>
20406a2c:	34400593          	li	a1,836
20406a30:	0001a517          	auipc	a0,0x1a
20406a34:	e4c50513          	addi	a0,a0,-436 # 2042087c <__func__.3846+0x69c>
20406a38:	504070ef          	jal	ra,2040df3c <TVMLogf>
20406a3c:	50000513          	li	a0,1280
20406a40:	a3cfa0ef          	jal	ra,20400c7c <TVMPlatformAbort>
             names + TVM_CRT_MAX_STRLEN_PARAM_NAME * idx);
    uint32_t eid = TVMGraphExecutor_GetEntryId(executor, executor->input_nodes[in_idx], 0);
20406a44:	f7c42783          	lw	a5,-132(s0)
20406a48:	0087a703          	lw	a4,8(a5)
20406a4c:	fcc42783          	lw	a5,-52(s0)
20406a50:	00279793          	slli	a5,a5,0x2
20406a54:	00f707b3          	add	a5,a4,a5
20406a58:	0007a783          	lw	a5,0(a5)
20406a5c:	00000613          	li	a2,0
20406a60:	00078593          	mv	a1,a5
20406a64:	f7c42503          	lw	a0,-132(s0)
20406a68:	9d9ff0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
20406a6c:	fca42423          	sw	a0,-56(s0)
    if (!(eid < executor->data_entry_count)) {
20406a70:	f7c42783          	lw	a5,-132(s0)
20406a74:	05c7a783          	lw	a5,92(a5)
20406a78:	fc842703          	lw	a4,-56(s0)
20406a7c:	02f76e63          	bltu	a4,a5,20406ab8 <TVMGraphExecutor_LoadParams+0x438>
      fprintf(stderr, "`entry_id`=%d is greater than expected(%d).\n", eid,
20406a80:	5fbfa797          	auipc	a5,0x5fbfa
20406a84:	fb878793          	addi	a5,a5,-72 # 80000a38 <_impure_ptr>
20406a88:	0007a783          	lw	a5,0(a5)
20406a8c:	00c7a703          	lw	a4,12(a5)
20406a90:	f7c42783          	lw	a5,-132(s0)
20406a94:	05c7a783          	lw	a5,92(a5)
20406a98:	00078693          	mv	a3,a5
20406a9c:	fc842603          	lw	a2,-56(s0)
20406aa0:	0001a597          	auipc	a1,0x1a
20406aa4:	e5858593          	addi	a1,a1,-424 # 204208f8 <__func__.3846+0x718>
20406aa8:	00070513          	mv	a0,a4
20406aac:	0430c0ef          	jal	ra,204132ee <fprintf>
              executor->data_entry_count);
      status = -1;
20406ab0:	fff00793          	li	a5,-1
20406ab4:	fcf42e23          	sw	a5,-36(s0)
    }

    if (executor->data_entry[eid].dl_tensor.shape) {
20406ab8:	f7c42783          	lw	a5,-132(s0)
20406abc:	0587a683          	lw	a3,88(a5)
20406ac0:	fc842703          	lw	a4,-56(s0)
20406ac4:	00070793          	mv	a5,a4
20406ac8:	00279793          	slli	a5,a5,0x2
20406acc:	00e787b3          	add	a5,a5,a4
20406ad0:	00379793          	slli	a5,a5,0x3
20406ad4:	00f687b3          	add	a5,a3,a5
20406ad8:	0147a783          	lw	a5,20(a5)
20406adc:	06078863          	beqz	a5,20406b4c <TVMGraphExecutor_LoadParams+0x4cc>
      err = TVMPlatformMemoryFree(executor->data_entry[eid].dl_tensor.shape, dev);
20406ae0:	f7c42783          	lw	a5,-132(s0)
20406ae4:	0587a683          	lw	a3,88(a5)
20406ae8:	fc842703          	lw	a4,-56(s0)
20406aec:	00070793          	mv	a5,a4
20406af0:	00279793          	slli	a5,a5,0x2
20406af4:	00e787b3          	add	a5,a5,a4
20406af8:	00379793          	slli	a5,a5,0x3
20406afc:	00f687b3          	add	a5,a3,a5
20406b00:	0147a783          	lw	a5,20(a5)
20406b04:	fa442583          	lw	a1,-92(s0)
20406b08:	fa842603          	lw	a2,-88(s0)
20406b0c:	00078513          	mv	a0,a5
20406b10:	a74fa0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20406b14:	fca42a23          	sw	a0,-44(s0)
      if (err != kTvmErrorNoError) {
20406b18:	fd442783          	lw	a5,-44(s0)
20406b1c:	00078663          	beqz	a5,20406b28 <TVMGraphExecutor_LoadParams+0x4a8>
        status = -1;
20406b20:	fff00793          	li	a5,-1
20406b24:	fcf42e23          	sw	a5,-36(s0)
      }
      executor->data_entry[eid].dl_tensor.shape = 0;
20406b28:	f7c42783          	lw	a5,-132(s0)
20406b2c:	0587a683          	lw	a3,88(a5)
20406b30:	fc842703          	lw	a4,-56(s0)
20406b34:	00070793          	mv	a5,a4
20406b38:	00279793          	slli	a5,a5,0x2
20406b3c:	00e787b3          	add	a5,a5,a4
20406b40:	00379793          	slli	a5,a5,0x3
20406b44:	00f687b3          	add	a5,a3,a5
20406b48:	0007aa23          	sw	zero,20(a5)
    }
    if (executor->data_entry[eid].dl_tensor.data) {
20406b4c:	f7c42783          	lw	a5,-132(s0)
20406b50:	0587a683          	lw	a3,88(a5)
20406b54:	fc842703          	lw	a4,-56(s0)
20406b58:	00070793          	mv	a5,a4
20406b5c:	00279793          	slli	a5,a5,0x2
20406b60:	00e787b3          	add	a5,a5,a4
20406b64:	00379793          	slli	a5,a5,0x3
20406b68:	00f687b3          	add	a5,a3,a5
20406b6c:	0007a783          	lw	a5,0(a5)
20406b70:	06078863          	beqz	a5,20406be0 <TVMGraphExecutor_LoadParams+0x560>
      err = TVMPlatformMemoryFree(executor->data_entry[eid].dl_tensor.data, dev);
20406b74:	f7c42783          	lw	a5,-132(s0)
20406b78:	0587a683          	lw	a3,88(a5)
20406b7c:	fc842703          	lw	a4,-56(s0)
20406b80:	00070793          	mv	a5,a4
20406b84:	00279793          	slli	a5,a5,0x2
20406b88:	00e787b3          	add	a5,a5,a4
20406b8c:	00379793          	slli	a5,a5,0x3
20406b90:	00f687b3          	add	a5,a3,a5
20406b94:	0007a783          	lw	a5,0(a5)
20406b98:	fa442583          	lw	a1,-92(s0)
20406b9c:	fa842603          	lw	a2,-88(s0)
20406ba0:	00078513          	mv	a0,a5
20406ba4:	9e0fa0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20406ba8:	fca42a23          	sw	a0,-44(s0)
      if (err != kTvmErrorNoError) {
20406bac:	fd442783          	lw	a5,-44(s0)
20406bb0:	00078663          	beqz	a5,20406bbc <TVMGraphExecutor_LoadParams+0x53c>
        status = -1;
20406bb4:	fff00793          	li	a5,-1
20406bb8:	fcf42e23          	sw	a5,-36(s0)
      }
      executor->data_entry[eid].dl_tensor.data = 0;
20406bbc:	f7c42783          	lw	a5,-132(s0)
20406bc0:	0587a683          	lw	a3,88(a5)
20406bc4:	fc842703          	lw	a4,-56(s0)
20406bc8:	00070793          	mv	a5,a4
20406bcc:	00279793          	slli	a5,a5,0x2
20406bd0:	00e787b3          	add	a5,a5,a4
20406bd4:	00379793          	slli	a5,a5,0x3
20406bd8:	00f687b3          	add	a5,a3,a5
20406bdc:	0007a023          	sw	zero,0(a5)
    }
    status |= TVMNDArray_Load(&(executor->data_entry[eid]), &bptr);
20406be0:	f7c42783          	lw	a5,-132(s0)
20406be4:	0587a683          	lw	a3,88(a5)
20406be8:	fc842703          	lw	a4,-56(s0)
20406bec:	00070793          	mv	a5,a4
20406bf0:	00279793          	slli	a5,a5,0x2
20406bf4:	00e787b3          	add	a5,a5,a4
20406bf8:	00379793          	slli	a5,a5,0x3
20406bfc:	00f687b3          	add	a5,a3,a5
20406c00:	fc440713          	addi	a4,s0,-60
20406c04:	00070593          	mv	a1,a4
20406c08:	00078513          	mv	a0,a5
20406c0c:	da8fc0ef          	jal	ra,204031b4 <TVMNDArray_Load>
20406c10:	00050713          	mv	a4,a0
20406c14:	fdc42783          	lw	a5,-36(s0)
20406c18:	00e7e7b3          	or	a5,a5,a4
20406c1c:	fcf42e23          	sw	a5,-36(s0)
  for (idx = 0; idx < size; idx++) {
20406c20:	fd842783          	lw	a5,-40(s0)
20406c24:	00178793          	addi	a5,a5,1
20406c28:	fcf42c23          	sw	a5,-40(s0)
20406c2c:	fd842783          	lw	a5,-40(s0)
20406c30:	fd042703          	lw	a4,-48(s0)
20406c34:	d8e7e8e3          	bltu	a5,a4,204069c4 <TVMGraphExecutor_LoadParams+0x344>
           ((float*)entry->dl_tensor.data)[0]);  // NOLINT(*)
#endif                                           // TVM_CRT_DEBUG
  }

  // Release memory
  err = TVMPlatformMemoryFree(names, dev);
20406c38:	fac42783          	lw	a5,-84(s0)
20406c3c:	fa442583          	lw	a1,-92(s0)
20406c40:	fa842603          	lw	a2,-88(s0)
20406c44:	00078513          	mv	a0,a5
20406c48:	93cfa0ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20406c4c:	fca42a23          	sw	a0,-44(s0)
  if (err != kTvmErrorNoError) {
20406c50:	fd442783          	lw	a5,-44(s0)
20406c54:	00078a63          	beqz	a5,20406c68 <TVMGraphExecutor_LoadParams+0x5e8>
    status = -1;
20406c58:	fff00793          	li	a5,-1
20406c5c:	fcf42e23          	sw	a5,-36(s0)
    return status;
20406c60:	fdc42783          	lw	a5,-36(s0)
20406c64:	0080006f          	j	20406c6c <TVMGraphExecutor_LoadParams+0x5ec>
  }

  return status;
20406c68:	fdc42783          	lw	a5,-36(s0)
}
20406c6c:	00078513          	mv	a0,a5
20406c70:	08c12083          	lw	ra,140(sp)
20406c74:	08812403          	lw	s0,136(sp)
20406c78:	08412903          	lw	s2,132(sp)
20406c7c:	08012983          	lw	s3,128(sp)
20406c80:	07c12a03          	lw	s4,124(sp)
20406c84:	07812a83          	lw	s5,120(sp)
20406c88:	09010113          	addi	sp,sp,144
20406c8c:	00008067          	ret

20406c90 <TVMGraphExecutor_Run>:

/*!
 * \brief Run all the operations one by one.
 * \param executor The graph executor.
 */
void TVMGraphExecutor_Run(TVMGraphExecutor* executor) {
20406c90:	fd010113          	addi	sp,sp,-48
20406c94:	02112623          	sw	ra,44(sp)
20406c98:	02812423          	sw	s0,40(sp)
20406c9c:	02912223          	sw	s1,36(sp)
20406ca0:	03212023          	sw	s2,32(sp)
20406ca4:	03010413          	addi	s0,sp,48
20406ca8:	fca42e23          	sw	a0,-36(s0)
  // setup the array and requirements.
  uint32_t idx;
  for (idx = 0; idx < executor->op_execs_count; ++idx) {
20406cac:	fe042623          	sw	zero,-20(s0)
20406cb0:	0780006f          	j	20406d28 <TVMGraphExecutor_Run+0x98>
    if (executor->op_execs[idx].fexec) {
20406cb4:	fdc42783          	lw	a5,-36(s0)
20406cb8:	0607a483          	lw	s1,96(a5)
20406cbc:	1d800593          	li	a1,472
20406cc0:	fec42503          	lw	a0,-20(s0)
20406cc4:	76d180ef          	jal	ra,2041fc30 <__mulsi3>
20406cc8:	00050793          	mv	a5,a0
20406ccc:	00f487b3          	add	a5,s1,a5
20406cd0:	0c87a783          	lw	a5,200(a5)
20406cd4:	04078463          	beqz	a5,20406d1c <TVMGraphExecutor_Run+0x8c>
#if TVM_CRT_DEBUG
      printf("calling: %s (%d)\n", executor->op_execs[idx].name, idx);
#endif  // TVM_CRT_DEBUG
      executor->op_execs[idx].Call(&(executor->op_execs[idx]));
20406cd8:	fdc42783          	lw	a5,-36(s0)
20406cdc:	0607a483          	lw	s1,96(a5)
20406ce0:	1d800593          	li	a1,472
20406ce4:	fec42503          	lw	a0,-20(s0)
20406ce8:	749180ef          	jal	ra,2041fc30 <__mulsi3>
20406cec:	00050793          	mv	a5,a0
20406cf0:	00f487b3          	add	a5,s1,a5
20406cf4:	1d07a903          	lw	s2,464(a5)
20406cf8:	fdc42783          	lw	a5,-36(s0)
20406cfc:	0607a483          	lw	s1,96(a5)
20406d00:	1d800593          	li	a1,472
20406d04:	fec42503          	lw	a0,-20(s0)
20406d08:	729180ef          	jal	ra,2041fc30 <__mulsi3>
20406d0c:	00050793          	mv	a5,a0
20406d10:	00f487b3          	add	a5,s1,a5
20406d14:	00078513          	mv	a0,a5
20406d18:	000900e7          	jalr	s2
  for (idx = 0; idx < executor->op_execs_count; ++idx) {
20406d1c:	fec42783          	lw	a5,-20(s0)
20406d20:	00178793          	addi	a5,a5,1
20406d24:	fef42623          	sw	a5,-20(s0)
20406d28:	fdc42783          	lw	a5,-36(s0)
20406d2c:	0647a783          	lw	a5,100(a5)
20406d30:	fec42703          	lw	a4,-20(s0)
20406d34:	f8f760e3          	bltu	a4,a5,20406cb4 <TVMGraphExecutor_Run+0x24>
    }
  }
}
20406d38:	00000013          	nop
20406d3c:	02c12083          	lw	ra,44(sp)
20406d40:	02812403          	lw	s0,40(sp)
20406d44:	02412483          	lw	s1,36(sp)
20406d48:	02012903          	lw	s2,32(sp)
20406d4c:	03010113          	addi	sp,sp,48
20406d50:	00008067          	ret

20406d54 <TVMGraphExecutor_GetNumOutputs>:
/*!
 * \brief Get the number of output tensors allocated.
 * \param executor The graph executor.
 * \return the number of output tensors allocated.
 */
int TVMGraphExecutor_GetNumOutputs(TVMGraphExecutor* executor) { return executor->outputs_count; }
20406d54:	fe010113          	addi	sp,sp,-32
20406d58:	00812e23          	sw	s0,28(sp)
20406d5c:	02010413          	addi	s0,sp,32
20406d60:	fea42623          	sw	a0,-20(s0)
20406d64:	fec42783          	lw	a5,-20(s0)
20406d68:	01c7a783          	lw	a5,28(a5)
20406d6c:	00078513          	mv	a0,a5
20406d70:	01c12403          	lw	s0,28(sp)
20406d74:	02010113          	addi	sp,sp,32
20406d78:	00008067          	ret

20406d7c <TVMGraphExecutor_GetOutput>:

int TVMGraphExecutor_GetOutput(TVMGraphExecutor* executor, const int32_t idx, DLTensor* out) {
20406d7c:	fb010113          	addi	sp,sp,-80
20406d80:	04112623          	sw	ra,76(sp)
20406d84:	04812423          	sw	s0,72(sp)
20406d88:	04912223          	sw	s1,68(sp)
20406d8c:	05212023          	sw	s2,64(sp)
20406d90:	05010413          	addi	s0,sp,80
20406d94:	faa42e23          	sw	a0,-68(s0)
20406d98:	fab42c23          	sw	a1,-72(s0)
20406d9c:	fac42a23          	sw	a2,-76(s0)
  int status = 0;
20406da0:	fe042623          	sw	zero,-20(s0)
  uint32_t nid = executor->outputs[idx].node_id;
20406da4:	fbc42783          	lw	a5,-68(s0)
20406da8:	0187a703          	lw	a4,24(a5)
20406dac:	fb842783          	lw	a5,-72(s0)
20406db0:	00479793          	slli	a5,a5,0x4
20406db4:	00f707b3          	add	a5,a4,a5
20406db8:	0007a783          	lw	a5,0(a5)
20406dbc:	fef42423          	sw	a5,-24(s0)
  uint32_t index = executor->outputs[idx].index;
20406dc0:	fbc42783          	lw	a5,-68(s0)
20406dc4:	0187a703          	lw	a4,24(a5)
20406dc8:	fb842783          	lw	a5,-72(s0)
20406dcc:	00479793          	slli	a5,a5,0x4
20406dd0:	00f707b3          	add	a5,a4,a5
20406dd4:	0047a783          	lw	a5,4(a5)
20406dd8:	fef42223          	sw	a5,-28(s0)
  uint32_t eid = TVMGraphExecutor_GetEntryId(executor, nid, index);
20406ddc:	fe442603          	lw	a2,-28(s0)
20406de0:	fe842583          	lw	a1,-24(s0)
20406de4:	fbc42503          	lw	a0,-68(s0)
20406de8:	e58ff0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
20406dec:	fea42023          	sw	a0,-32(s0)

  // copy data section to allocated output tensor
  int32_t elem_bytes = out->dtype.bits / 8;
20406df0:	fb442783          	lw	a5,-76(s0)
20406df4:	0117c783          	lbu	a5,17(a5)
20406df8:	0037d793          	srli	a5,a5,0x3
20406dfc:	0ff7f793          	andi	a5,a5,255
20406e00:	fcf42e23          	sw	a5,-36(s0)
  int64_t size = Shape_Accumulate(out->shape, out->ndim);
20406e04:	fb442783          	lw	a5,-76(s0)
20406e08:	0147a703          	lw	a4,20(a5)
20406e0c:	fb442783          	lw	a5,-76(s0)
20406e10:	00c7a783          	lw	a5,12(a5)
20406e14:	00078593          	mv	a1,a5
20406e18:	00070513          	mv	a0,a4
20406e1c:	f15fc0ef          	jal	ra,20403d30 <Shape_Accumulate>
20406e20:	00050793          	mv	a5,a0
20406e24:	fcf42823          	sw	a5,-48(s0)
20406e28:	fc042a23          	sw	zero,-44(s0)
  DLTensor* tensor = &(executor->data_entry[eid].dl_tensor);
20406e2c:	fbc42783          	lw	a5,-68(s0)
20406e30:	0587a683          	lw	a3,88(a5)
20406e34:	fe042703          	lw	a4,-32(s0)
20406e38:	00070793          	mv	a5,a4
20406e3c:	00279793          	slli	a5,a5,0x2
20406e40:	00e787b3          	add	a5,a5,a4
20406e44:	00379793          	slli	a5,a5,0x3
20406e48:	00f687b3          	add	a5,a3,a5
20406e4c:	fcf42623          	sw	a5,-52(s0)
  CHECK(out->ndim == tensor->ndim);
20406e50:	fb442783          	lw	a5,-76(s0)
20406e54:	00c7a703          	lw	a4,12(a5)
20406e58:	fcc42783          	lw	a5,-52(s0)
20406e5c:	00c7a783          	lw	a5,12(a5)
20406e60:	02f70263          	beq	a4,a5,20406e84 <TVMGraphExecutor_GetOutput+0x108>
20406e64:	0001a617          	auipc	a2,0x1a
20406e68:	ac460613          	addi	a2,a2,-1340 # 20420928 <__func__.3846+0x748>
20406e6c:	38f00593          	li	a1,911
20406e70:	0001a517          	auipc	a0,0x1a
20406e74:	ad450513          	addi	a0,a0,-1324 # 20420944 <__func__.3846+0x764>
20406e78:	0c4070ef          	jal	ra,2040df3c <TVMLogf>
20406e7c:	50000513          	li	a0,1280
20406e80:	dfdf90ef          	jal	ra,20400c7c <TVMPlatformAbort>
  CHECK(out->dtype.bits == tensor->dtype.bits);
20406e84:	fb442783          	lw	a5,-76(s0)
20406e88:	0117c703          	lbu	a4,17(a5)
20406e8c:	fcc42783          	lw	a5,-52(s0)
20406e90:	0117c783          	lbu	a5,17(a5)
20406e94:	02f70263          	beq	a4,a5,20406eb8 <TVMGraphExecutor_GetOutput+0x13c>
20406e98:	0001a617          	auipc	a2,0x1a
20406e9c:	af860613          	addi	a2,a2,-1288 # 20420990 <__func__.3846+0x7b0>
20406ea0:	39000593          	li	a1,912
20406ea4:	0001a517          	auipc	a0,0x1a
20406ea8:	aa050513          	addi	a0,a0,-1376 # 20420944 <__func__.3846+0x764>
20406eac:	090070ef          	jal	ra,2040df3c <TVMLogf>
20406eb0:	50000513          	li	a0,1280
20406eb4:	dc9f90ef          	jal	ra,20400c7c <TVMPlatformAbort>
  CHECK(Shape_Accumulate(out->shape, out->ndim) == Shape_Accumulate(tensor->shape, tensor->ndim));
20406eb8:	fb442783          	lw	a5,-76(s0)
20406ebc:	0147a703          	lw	a4,20(a5)
20406ec0:	fb442783          	lw	a5,-76(s0)
20406ec4:	00c7a783          	lw	a5,12(a5)
20406ec8:	00078593          	mv	a1,a5
20406ecc:	00070513          	mv	a0,a4
20406ed0:	e61fc0ef          	jal	ra,20403d30 <Shape_Accumulate>
20406ed4:	00050493          	mv	s1,a0
20406ed8:	fcc42783          	lw	a5,-52(s0)
20406edc:	0147a703          	lw	a4,20(a5)
20406ee0:	fcc42783          	lw	a5,-52(s0)
20406ee4:	00c7a783          	lw	a5,12(a5)
20406ee8:	00078593          	mv	a1,a5
20406eec:	00070513          	mv	a0,a4
20406ef0:	e41fc0ef          	jal	ra,20403d30 <Shape_Accumulate>
20406ef4:	00050793          	mv	a5,a0
20406ef8:	02f48263          	beq	s1,a5,20406f1c <TVMGraphExecutor_GetOutput+0x1a0>
20406efc:	0001a617          	auipc	a2,0x1a
20406f00:	abc60613          	addi	a2,a2,-1348 # 204209b8 <__func__.3846+0x7d8>
20406f04:	39100593          	li	a1,913
20406f08:	0001a517          	auipc	a0,0x1a
20406f0c:	a3c50513          	addi	a0,a0,-1476 # 20420944 <__func__.3846+0x764>
20406f10:	02c070ef          	jal	ra,2040df3c <TVMLogf>
20406f14:	50000513          	li	a0,1280
20406f18:	d65f90ef          	jal	ra,20400c7c <TVMPlatformAbort>
  memcpy(out->data, tensor->data, size * elem_bytes);
20406f1c:	fb442783          	lw	a5,-76(s0)
20406f20:	0007a483          	lw	s1,0(a5)
20406f24:	fcc42783          	lw	a5,-52(s0)
20406f28:	0007a903          	lw	s2,0(a5)
20406f2c:	fd042783          	lw	a5,-48(s0)
20406f30:	fdc42703          	lw	a4,-36(s0)
20406f34:	00070593          	mv	a1,a4
20406f38:	00078513          	mv	a0,a5
20406f3c:	4f5180ef          	jal	ra,2041fc30 <__mulsi3>
20406f40:	00050793          	mv	a5,a0
20406f44:	00078613          	mv	a2,a5
20406f48:	00090593          	mv	a1,s2
20406f4c:	00048513          	mv	a0,s1
20406f50:	5840c0ef          	jal	ra,204134d4 <memcpy>
  return status;
20406f54:	fec42783          	lw	a5,-20(s0)
}
20406f58:	00078513          	mv	a0,a5
20406f5c:	04c12083          	lw	ra,76(sp)
20406f60:	04812403          	lw	s0,72(sp)
20406f64:	04412483          	lw	s1,68(sp)
20406f68:	04012903          	lw	s2,64(sp)
20406f6c:	05010113          	addi	sp,sp,80
20406f70:	00008067          	ret

20406f74 <TVMGraphExecutor_SetupStorage>:

int TVMGraphExecutor_SetupStorage(TVMGraphExecutor* executor) {
20406f74:	d0010113          	addi	sp,sp,-768
20406f78:	2e112e23          	sw	ra,764(sp)
20406f7c:	2e812c23          	sw	s0,760(sp)
20406f80:	2e912a23          	sw	s1,756(sp)
20406f84:	2f212823          	sw	s2,752(sp)
20406f88:	2f312623          	sw	s3,748(sp)
20406f8c:	2f412423          	sw	s4,744(sp)
20406f90:	2f512223          	sw	s5,740(sp)
20406f94:	30010413          	addi	s0,sp,768
20406f98:	d0a42623          	sw	a0,-756(s0)
  int lookup_linked_param_valid;
  uint32_t idx;

  {
    TVMArgs temp_args;
    temp_args.values[0].v_int64 = 0;
20406f9c:	00000693          	li	a3,0
20406fa0:	00000713          	li	a4,0
20406fa4:	d0d42823          	sw	a3,-752(s0)
20406fa8:	d0e42a23          	sw	a4,-748(s0)
    temp_args.tcodes[0] = kTVMArgInt;
20406fac:	d6042023          	sw	zero,-672(s0)
    temp_args.values_count = 1;
20406fb0:	00100793          	li	a5,1
20406fb4:	d8f42423          	sw	a5,-632(s0)
    lookup_linked_param_valid =
        (TVMPackedFunc_InitModuleFunc(&lookup_linked_param, executor->module_handle,
20406fb8:	d0c42783          	lw	a5,-756(s0)
20406fbc:	0407a703          	lw	a4,64(a5)
20406fc0:	d1040693          	addi	a3,s0,-752
20406fc4:	dc040793          	addi	a5,s0,-576
20406fc8:	0001a617          	auipc	a2,0x1a
20406fcc:	a4c60613          	addi	a2,a2,-1460 # 20420a14 <__func__.3846+0x834>
20406fd0:	00070593          	mv	a1,a4
20406fd4:	00078513          	mv	a0,a5
20406fd8:	af5fc0ef          	jal	ra,20403acc <TVMPackedFunc_InitModuleFunc>
20406fdc:	00050793          	mv	a5,a0
                                      "_lookup_linked_param", &temp_args) == 0);
20406fe0:	0017b793          	seqz	a5,a5
20406fe4:	0ff7f793          	andi	a5,a5,255
    lookup_linked_param_valid =
20406fe8:	fcf42823          	sw	a5,-48(s0)
  }

  // Grab saved optimization plan from graph.
  TVMGraphExecutorGraphAttr* attrs = &(executor->attrs);
20406fec:	d0c42783          	lw	a5,-756(s0)
20406ff0:	02078793          	addi	a5,a5,32
20406ff4:	fcf42623          	sw	a5,-52(s0)
  DLDataType* vtype = NULL;
20406ff8:	da042e23          	sw	zero,-580(s0)
  DLDevice alloc_dev = {kDLCPU, 0};
20406ffc:	00100793          	li	a5,1
20407000:	daf42a23          	sw	a5,-588(s0)
20407004:	da042c23          	sw	zero,-584(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(DLDataType) * attrs->dltype_count,
20407008:	fcc42783          	lw	a5,-52(s0)
2040700c:	0107a783          	lw	a5,16(a5)
20407010:	00279793          	slli	a5,a5,0x2
20407014:	dbc40713          	addi	a4,s0,-580
20407018:	00070693          	mv	a3,a4
2040701c:	db442583          	lw	a1,-588(s0)
20407020:	db842603          	lw	a2,-584(s0)
20407024:	00078513          	mv	a0,a5
20407028:	cf9f90ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
2040702c:	fca42423          	sw	a0,-56(s0)
                                                  alloc_dev, (void**)&vtype);
  if (err != kTvmErrorNoError) {
20407030:	fc842783          	lw	a5,-56(s0)
20407034:	02078863          	beqz	a5,20407064 <TVMGraphExecutor_SetupStorage+0xf0>
    fprintf(stderr, "memory allocate error: %08x", err);
20407038:	5fbfa797          	auipc	a5,0x5fbfa
2040703c:	a0078793          	addi	a5,a5,-1536 # 80000a38 <_impure_ptr>
20407040:	0007a783          	lw	a5,0(a5)
20407044:	00c7a783          	lw	a5,12(a5)
20407048:	fc842603          	lw	a2,-56(s0)
2040704c:	00019597          	auipc	a1,0x19
20407050:	43c58593          	addi	a1,a1,1084 # 20420488 <__func__.3846+0x2a8>
20407054:	00078513          	mv	a0,a5
20407058:	2960c0ef          	jal	ra,204132ee <fprintf>
    return -1;
2040705c:	fff00793          	li	a5,-1
20407060:	06d0006f          	j	204078cc <TVMGraphExecutor_SetupStorage+0x958>
  }
  for (idx = 0; idx < attrs->dltype_count; idx++) {
20407064:	fc042e23          	sw	zero,-36(s0)
20407068:	0500006f          	j	204070b8 <TVMGraphExecutor_SetupStorage+0x144>
    vtype[idx] = String2DLDataType(attrs->dltype + idx * TVM_CRT_MAX_STRLEN_DLTYPE);
2040706c:	fcc42783          	lw	a5,-52(s0)
20407070:	00c7a683          	lw	a3,12(a5)
20407074:	fdc42703          	lw	a4,-36(s0)
20407078:	00070793          	mv	a5,a4
2040707c:	00279793          	slli	a5,a5,0x2
20407080:	00e787b3          	add	a5,a5,a4
20407084:	00179793          	slli	a5,a5,0x1
20407088:	00f686b3          	add	a3,a3,a5
2040708c:	dbc42703          	lw	a4,-580(s0)
20407090:	fdc42783          	lw	a5,-36(s0)
20407094:	00279793          	slli	a5,a5,0x2
20407098:	00f704b3          	add	s1,a4,a5
2040709c:	00068513          	mv	a0,a3
204070a0:	f08fc0ef          	jal	ra,204037a8 <String2DLDataType>
204070a4:	00050793          	mv	a5,a0
204070a8:	00f4a023          	sw	a5,0(s1)
  for (idx = 0; idx < attrs->dltype_count; idx++) {
204070ac:	fdc42783          	lw	a5,-36(s0)
204070b0:	00178793          	addi	a5,a5,1
204070b4:	fcf42e23          	sw	a5,-36(s0)
204070b8:	fcc42783          	lw	a5,-52(s0)
204070bc:	0107a783          	lw	a5,16(a5)
204070c0:	fdc42703          	lw	a4,-36(s0)
204070c4:	faf764e3          	bltu	a4,a5,2040706c <TVMGraphExecutor_SetupStorage+0xf8>
  }

  // Size and device type of each storage pool entry.
  TVMGraphExecutorPoolEntry* pool_entry = NULL;
204070c8:	da042823          	sw	zero,-592(s0)
  err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorPoolEntry) * executor->nodes_count,
204070cc:	d0c42783          	lw	a5,-756(s0)
204070d0:	0047a703          	lw	a4,4(a5)
204070d4:	00070793          	mv	a5,a4
204070d8:	00179793          	slli	a5,a5,0x1
204070dc:	00e787b3          	add	a5,a5,a4
204070e0:	00279793          	slli	a5,a5,0x2
204070e4:	00078713          	mv	a4,a5
204070e8:	db040793          	addi	a5,s0,-592
204070ec:	00078693          	mv	a3,a5
204070f0:	db442583          	lw	a1,-588(s0)
204070f4:	db842603          	lw	a2,-584(s0)
204070f8:	00070513          	mv	a0,a4
204070fc:	c25f90ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20407100:	fca42423          	sw	a0,-56(s0)
                                  alloc_dev, (void**)&pool_entry);
  if (err != kTvmErrorNoError) {
20407104:	fc842783          	lw	a5,-56(s0)
20407108:	02078863          	beqz	a5,20407138 <TVMGraphExecutor_SetupStorage+0x1c4>
    fprintf(stderr, "memory allocate error: %08x", err);
2040710c:	5fbfa797          	auipc	a5,0x5fbfa
20407110:	92c78793          	addi	a5,a5,-1748 # 80000a38 <_impure_ptr>
20407114:	0007a783          	lw	a5,0(a5)
20407118:	00c7a783          	lw	a5,12(a5)
2040711c:	fc842603          	lw	a2,-56(s0)
20407120:	00019597          	auipc	a1,0x19
20407124:	36858593          	addi	a1,a1,872 # 20420488 <__func__.3846+0x2a8>
20407128:	00078513          	mv	a0,a5
2040712c:	1c20c0ef          	jal	ra,204132ee <fprintf>
    return -1;
20407130:	fff00793          	li	a5,-1
20407134:	7980006f          	j	204078cc <TVMGraphExecutor_SetupStorage+0x958>
  }
  memset(pool_entry, 0, sizeof(TVMGraphExecutorPoolEntry) * executor->nodes_count);
20407138:	db042683          	lw	a3,-592(s0)
2040713c:	d0c42783          	lw	a5,-756(s0)
20407140:	0047a703          	lw	a4,4(a5)
20407144:	00070793          	mv	a5,a4
20407148:	00179793          	slli	a5,a5,0x1
2040714c:	00e787b3          	add	a5,a5,a4
20407150:	00279793          	slli	a5,a5,0x2
20407154:	00078613          	mv	a2,a5
20407158:	00000593          	li	a1,0
2040715c:	00068513          	mv	a0,a3
20407160:	4320c0ef          	jal	ra,20413592 <memset>
  uint32_t pool_entry_count = 0;
20407164:	fc042c23          	sw	zero,-40(s0)
  // Find the maximum space size.
  for (idx = 0; idx < attrs->shape_count; idx++) {
20407168:	fc042e23          	sw	zero,-36(s0)
2040716c:	18c0006f          	j	204072f8 <TVMGraphExecutor_SetupStorage+0x384>
    int storage_id = attrs->storage_id[idx];
20407170:	fcc42783          	lw	a5,-52(s0)
20407174:	0047a703          	lw	a4,4(a5)
20407178:	fdc42783          	lw	a5,-36(s0)
2040717c:	00279793          	slli	a5,a5,0x2
20407180:	00f707b3          	add	a5,a4,a5
20407184:	0007a783          	lw	a5,0(a5)
20407188:	faf42823          	sw	a5,-80(s0)
    // Use the fallback device if no device index is available.
    int device_type = executor->devices[0].device_type;
2040718c:	d0c42783          	lw	a5,-756(s0)
20407190:	0447a783          	lw	a5,68(a5)
20407194:	faf42623          	sw	a5,-84(s0)
    uint32_t size = Shape_Accumulate(attrs->shape + idx * TVM_CRT_MAX_NDIM, attrs->ndim[idx]);
20407198:	fcc42783          	lw	a5,-52(s0)
2040719c:	0147a683          	lw	a3,20(a5)
204071a0:	fdc42703          	lw	a4,-36(s0)
204071a4:	00070793          	mv	a5,a4
204071a8:	00179793          	slli	a5,a5,0x1
204071ac:	00e787b3          	add	a5,a5,a4
204071b0:	00479793          	slli	a5,a5,0x4
204071b4:	00f686b3          	add	a3,a3,a5
204071b8:	fcc42783          	lw	a5,-52(s0)
204071bc:	0187a703          	lw	a4,24(a5)
204071c0:	fdc42783          	lw	a5,-36(s0)
204071c4:	00279793          	slli	a5,a5,0x2
204071c8:	00f707b3          	add	a5,a4,a5
204071cc:	0007a783          	lw	a5,0(a5)
204071d0:	00078593          	mv	a1,a5
204071d4:	00068513          	mv	a0,a3
204071d8:	b59fc0ef          	jal	ra,20403d30 <Shape_Accumulate>
204071dc:	faa42423          	sw	a0,-88(s0)
    DLDataType t = vtype[idx];
204071e0:	dbc42703          	lw	a4,-580(s0)
204071e4:	fdc42783          	lw	a5,-36(s0)
204071e8:	00279793          	slli	a5,a5,0x2
204071ec:	00f707b3          	add	a5,a4,a5
204071f0:	0007a783          	lw	a5,0(a5)
204071f4:	daf42623          	sw	a5,-596(s0)
    uint32_t bits = t.bits * t.lanes;
204071f8:	dad44783          	lbu	a5,-595(s0)
204071fc:	00078713          	mv	a4,a5
20407200:	dae45783          	lhu	a5,-594(s0)
20407204:	00078593          	mv	a1,a5
20407208:	00070513          	mv	a0,a4
2040720c:	225180ef          	jal	ra,2041fc30 <__mulsi3>
20407210:	00050793          	mv	a5,a0
20407214:	faf42223          	sw	a5,-92(s0)
    size_t bytes = ((bits + 7U) / 8U) * size;
20407218:	fa442783          	lw	a5,-92(s0)
2040721c:	00778793          	addi	a5,a5,7
20407220:	0037d793          	srli	a5,a5,0x3
20407224:	00078593          	mv	a1,a5
20407228:	fa842503          	lw	a0,-88(s0)
2040722c:	205180ef          	jal	ra,2041fc30 <__mulsi3>
20407230:	00050793          	mv	a5,a0
20407234:	faf42023          	sw	a5,-96(s0)

    uint32_t sid = storage_id;
20407238:	fb042783          	lw	a5,-80(s0)
2040723c:	f8f42e23          	sw	a5,-100(s0)
    if (sid >= pool_entry_count) {
20407240:	f9c42703          	lw	a4,-100(s0)
20407244:	fd842783          	lw	a5,-40(s0)
20407248:	00f76863          	bltu	a4,a5,20407258 <TVMGraphExecutor_SetupStorage+0x2e4>
      pool_entry_count = sid + 1;
2040724c:	f9c42783          	lw	a5,-100(s0)
20407250:	00178793          	addi	a5,a5,1
20407254:	fcf42c23          	sw	a5,-40(s0)
    }
    pool_entry[sid].entry_id = idx;
20407258:	db042683          	lw	a3,-592(s0)
2040725c:	f9c42703          	lw	a4,-100(s0)
20407260:	00070793          	mv	a5,a4
20407264:	00179793          	slli	a5,a5,0x1
20407268:	00e787b3          	add	a5,a5,a4
2040726c:	00279793          	slli	a5,a5,0x2
20407270:	00f687b3          	add	a5,a3,a5
20407274:	fdc42703          	lw	a4,-36(s0)
20407278:	00e7a423          	sw	a4,8(a5)
    pool_entry[sid].size = MAX(pool_entry[sid].size, bytes);
2040727c:	db042683          	lw	a3,-592(s0)
20407280:	f9c42703          	lw	a4,-100(s0)
20407284:	00070793          	mv	a5,a4
20407288:	00179793          	slli	a5,a5,0x1
2040728c:	00e787b3          	add	a5,a5,a4
20407290:	00279793          	slli	a5,a5,0x2
20407294:	00f687b3          	add	a5,a3,a5
20407298:	0007a703          	lw	a4,0(a5)
2040729c:	db042603          	lw	a2,-592(s0)
204072a0:	f9c42683          	lw	a3,-100(s0)
204072a4:	00068793          	mv	a5,a3
204072a8:	00179793          	slli	a5,a5,0x1
204072ac:	00d787b3          	add	a5,a5,a3
204072b0:	00279793          	slli	a5,a5,0x2
204072b4:	00f606b3          	add	a3,a2,a5
204072b8:	fa042783          	lw	a5,-96(s0)
204072bc:	00e7f463          	bleu	a4,a5,204072c4 <TVMGraphExecutor_SetupStorage+0x350>
204072c0:	00070793          	mv	a5,a4
204072c4:	00f6a023          	sw	a5,0(a3)
    pool_entry[sid].device_type = device_type;
204072c8:	db042683          	lw	a3,-592(s0)
204072cc:	f9c42703          	lw	a4,-100(s0)
204072d0:	00070793          	mv	a5,a4
204072d4:	00179793          	slli	a5,a5,0x1
204072d8:	00e787b3          	add	a5,a5,a4
204072dc:	00279793          	slli	a5,a5,0x2
204072e0:	00f687b3          	add	a5,a3,a5
204072e4:	fac42703          	lw	a4,-84(s0)
204072e8:	00e7a223          	sw	a4,4(a5)
  for (idx = 0; idx < attrs->shape_count; idx++) {
204072ec:	fdc42783          	lw	a5,-36(s0)
204072f0:	00178793          	addi	a5,a5,1
204072f4:	fcf42e23          	sw	a5,-36(s0)
204072f8:	fcc42783          	lw	a5,-52(s0)
204072fc:	01c7a783          	lw	a5,28(a5)
20407300:	fdc42703          	lw	a4,-36(s0)
20407304:	e6f766e3          	bltu	a4,a5,20407170 <TVMGraphExecutor_SetupStorage+0x1fc>
  }

  // Allocate the space.
  err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorStorageEntry) * pool_entry_count,
20407308:	fd842703          	lw	a4,-40(s0)
2040730c:	00070793          	mv	a5,a4
20407310:	00179793          	slli	a5,a5,0x1
20407314:	00e787b3          	add	a5,a5,a4
20407318:	00479793          	slli	a5,a5,0x4
2040731c:	00078713          	mv	a4,a5
                                  alloc_dev, (void**)&executor->storage_pool);
20407320:	d0c42783          	lw	a5,-756(s0)
20407324:	05078793          	addi	a5,a5,80
  err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutorStorageEntry) * pool_entry_count,
20407328:	00078693          	mv	a3,a5
2040732c:	db442583          	lw	a1,-588(s0)
20407330:	db842603          	lw	a2,-584(s0)
20407334:	00070513          	mv	a0,a4
20407338:	9e9f90ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
2040733c:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
20407340:	fc842783          	lw	a5,-56(s0)
20407344:	02078863          	beqz	a5,20407374 <TVMGraphExecutor_SetupStorage+0x400>
    fprintf(stderr, "memory allocate error: %08x", err);
20407348:	5fbf9797          	auipc	a5,0x5fbf9
2040734c:	6f078793          	addi	a5,a5,1776 # 80000a38 <_impure_ptr>
20407350:	0007a783          	lw	a5,0(a5)
20407354:	00c7a783          	lw	a5,12(a5)
20407358:	fc842603          	lw	a2,-56(s0)
2040735c:	00019597          	auipc	a1,0x19
20407360:	12c58593          	addi	a1,a1,300 # 20420488 <__func__.3846+0x2a8>
20407364:	00078513          	mv	a0,a5
20407368:	7870b0ef          	jal	ra,204132ee <fprintf>
    return -1;
2040736c:	fff00793          	li	a5,-1
20407370:	55c0006f          	j	204078cc <TVMGraphExecutor_SetupStorage+0x958>
  }
  for (idx = 0; idx < pool_entry_count; idx++) {
20407374:	fc042e23          	sw	zero,-36(s0)
20407378:	2b80006f          	j	20407630 <TVMGraphExecutor_SetupStorage+0x6bc>
    TVMGraphExecutorPoolEntry pit = pool_entry[idx];
2040737c:	db042683          	lw	a3,-592(s0)
20407380:	fdc42703          	lw	a4,-36(s0)
20407384:	00070793          	mv	a5,a4
20407388:	00179793          	slli	a5,a5,0x1
2040738c:	00e787b3          	add	a5,a5,a4
20407390:	00279793          	slli	a5,a5,0x2
20407394:	00f687b3          	add	a5,a3,a5
20407398:	0007a703          	lw	a4,0(a5)
2040739c:	dae42023          	sw	a4,-608(s0)
204073a0:	0047a703          	lw	a4,4(a5)
204073a4:	dae42223          	sw	a4,-604(s0)
204073a8:	0087a783          	lw	a5,8(a5)
204073ac:	daf42423          	sw	a5,-600(s0)
    DLDevice dev = executor->devices[0];
204073b0:	d0c42783          	lw	a5,-756(s0)
204073b4:	0487a803          	lw	a6,72(a5)
204073b8:	0447a783          	lw	a5,68(a5)
204073bc:	d8f42c23          	sw	a5,-616(s0)
204073c0:	d9042e23          	sw	a6,-612(s0)
    uint8_t did_find_linked_param = 0;
204073c4:	fc040ba3          	sb	zero,-41(s0)
    if (lookup_linked_param_valid) {
204073c8:	fd042783          	lw	a5,-48(s0)
204073cc:	14078c63          	beqz	a5,20407524 <TVMGraphExecutor_SetupStorage+0x5b0>
      lookup_linked_param.args.values[0].v_int64 = idx;
204073d0:	fdc42783          	lw	a5,-36(s0)
204073d4:	00078913          	mv	s2,a5
204073d8:	00000993          	li	s3,0
204073dc:	e9242823          	sw	s2,-368(s0)
204073e0:	e9342a23          	sw	s3,-364(s0)
      CHECK_EQ(lookup_linked_param.Call(&lookup_linked_param), 0, "lookup_linked_param");
204073e4:	f9042703          	lw	a4,-112(s0)
204073e8:	dc040793          	addi	a5,s0,-576
204073ec:	00078513          	mv	a0,a5
204073f0:	000700e7          	jalr	a4
204073f4:	00050793          	mv	a5,a0
204073f8:	02078a63          	beqz	a5,2040742c <TVMGraphExecutor_SetupStorage+0x4b8>
204073fc:	00019717          	auipc	a4,0x19
20407400:	35870713          	addi	a4,a4,856 # 20420754 <__func__.3846+0x574>
20407404:	00019697          	auipc	a3,0x19
20407408:	62868693          	addi	a3,a3,1576 # 20420a2c <__func__.3846+0x84c>
2040740c:	00019617          	auipc	a2,0x19
20407410:	62460613          	addi	a2,a2,1572 # 20420a30 <__func__.3846+0x850>
20407414:	3dd00593          	li	a1,989
20407418:	00019517          	auipc	a0,0x19
2040741c:	64850513          	addi	a0,a0,1608 # 20420a60 <__func__.3846+0x880>
20407420:	31d060ef          	jal	ra,2040df3c <TVMLogf>
20407424:	50000513          	li	a0,1280
20407428:	855f90ef          	jal	ra,20400c7c <TVMPlatformAbort>

      void* linked_param_data = lookup_linked_param.ret_value.values[0].v_handle;
2040742c:	f1042783          	lw	a5,-240(s0)
20407430:	faf42e23          	sw	a5,-68(s0)
      if (linked_param_data != NULL) {
20407434:	fbc42783          	lw	a5,-68(s0)
20407438:	0e078663          	beqz	a5,20407524 <TVMGraphExecutor_SetupStorage+0x5b0>
        executor->storage_pool[executor->storage_pool_count].is_linked_param = 1;
2040743c:	d0c42783          	lw	a5,-756(s0)
20407440:	0507a683          	lw	a3,80(a5)
20407444:	d0c42783          	lw	a5,-756(s0)
20407448:	0547a703          	lw	a4,84(a5)
2040744c:	00070793          	mv	a5,a4
20407450:	00179793          	slli	a5,a5,0x1
20407454:	00e787b3          	add	a5,a5,a4
20407458:	00479793          	slli	a5,a5,0x4
2040745c:	00f687b3          	add	a5,a3,a5
20407460:	00100713          	li	a4,1
20407464:	00e78023          	sb	a4,0(a5)
        DLTensor* tensor = &executor->storage_pool[executor->storage_pool_count].array.dl_tensor;
20407468:	d0c42783          	lw	a5,-756(s0)
2040746c:	0507a683          	lw	a3,80(a5)
20407470:	d0c42783          	lw	a5,-756(s0)
20407474:	0547a703          	lw	a4,84(a5)
20407478:	00070793          	mv	a5,a4
2040747c:	00179793          	slli	a5,a5,0x1
20407480:	00e787b3          	add	a5,a5,a4
20407484:	00479793          	slli	a5,a5,0x4
20407488:	00f687b3          	add	a5,a3,a5
2040748c:	00878793          	addi	a5,a5,8
20407490:	faf42c23          	sw	a5,-72(s0)
        tensor->data = linked_param_data;
20407494:	fb842783          	lw	a5,-72(s0)
20407498:	fbc42703          	lw	a4,-68(s0)
2040749c:	00e7a023          	sw	a4,0(a5)
        tensor->device = dev;
204074a0:	fb842703          	lw	a4,-72(s0)
204074a4:	d9842783          	lw	a5,-616(s0)
204074a8:	d9c42803          	lw	a6,-612(s0)
204074ac:	00f72223          	sw	a5,4(a4)
204074b0:	01072423          	sw	a6,8(a4)
        tensor->ndim = attrs->ndim[pit.entry_id];
204074b4:	fcc42783          	lw	a5,-52(s0)
204074b8:	0187a703          	lw	a4,24(a5)
204074bc:	da842783          	lw	a5,-600(s0)
204074c0:	00279793          	slli	a5,a5,0x2
204074c4:	00f707b3          	add	a5,a4,a5
204074c8:	0007a783          	lw	a5,0(a5)
204074cc:	00078713          	mv	a4,a5
204074d0:	fb842783          	lw	a5,-72(s0)
204074d4:	00e7a623          	sw	a4,12(a5)
        tensor->shape = attrs->shape + idx * TVM_CRT_MAX_NDIM;
204074d8:	fcc42783          	lw	a5,-52(s0)
204074dc:	0147a683          	lw	a3,20(a5)
204074e0:	fdc42703          	lw	a4,-36(s0)
204074e4:	00070793          	mv	a5,a4
204074e8:	00179793          	slli	a5,a5,0x1
204074ec:	00e787b3          	add	a5,a5,a4
204074f0:	00479793          	slli	a5,a5,0x4
204074f4:	00f68733          	add	a4,a3,a5
204074f8:	fb842783          	lw	a5,-72(s0)
204074fc:	00e7aa23          	sw	a4,20(a5)
        tensor->strides = NULL;
20407500:	fb842783          	lw	a5,-72(s0)
20407504:	0007ac23          	sw	zero,24(a5)
        tensor->byte_offset = 0;
20407508:	fb842783          	lw	a5,-72(s0)
2040750c:	00000693          	li	a3,0
20407510:	00000713          	li	a4,0
20407514:	02d7a023          	sw	a3,32(a5)
20407518:	02e7a223          	sw	a4,36(a5)
        did_find_linked_param = 1;
2040751c:	00100793          	li	a5,1
20407520:	fcf40ba3          	sb	a5,-41(s0)
      }
    }
    if (did_find_linked_param == 0) {
20407524:	fd744783          	lbu	a5,-41(s0)
20407528:	0e079463          	bnez	a5,20407610 <TVMGraphExecutor_SetupStorage+0x69c>
      DLDataType dtype = {kDLFloat, 32, 1};
2040752c:	00200793          	li	a5,2
20407530:	d8f40a23          	sb	a5,-620(s0)
20407534:	02000793          	li	a5,32
20407538:	d8f40aa3          	sb	a5,-619(s0)
2040753c:	00100793          	li	a5,1
20407540:	d8f41b23          	sh	a5,-618(s0)
      int64_t shape[TVM_CRT_MAX_NDIM] = {
20407544:	d0042823          	sw	zero,-752(s0)
20407548:	d0042a23          	sw	zero,-748(s0)
2040754c:	d0042c23          	sw	zero,-744(s0)
20407550:	d0042e23          	sw	zero,-740(s0)
20407554:	d2042023          	sw	zero,-736(s0)
20407558:	d2042223          	sw	zero,-732(s0)
2040755c:	d2042423          	sw	zero,-728(s0)
20407560:	d2042623          	sw	zero,-724(s0)
20407564:	d2042823          	sw	zero,-720(s0)
20407568:	d2042a23          	sw	zero,-716(s0)
2040756c:	d2042c23          	sw	zero,-712(s0)
20407570:	d2042e23          	sw	zero,-708(s0)
          0,
      };
      shape[0] = (pit.size + 3) / 4;
20407574:	da042783          	lw	a5,-608(s0)
20407578:	00378793          	addi	a5,a5,3
2040757c:	0027d793          	srli	a5,a5,0x2
20407580:	00078a13          	mv	s4,a5
20407584:	00000a93          	li	s5,0
20407588:	d1442823          	sw	s4,-752(s0)
2040758c:	d1542a23          	sw	s5,-748(s0)
      int status = TVMNDArray_Empty(1, shape, dtype, dev,
                                    &executor->storage_pool[executor->storage_pool_count].array);
20407590:	d0c42783          	lw	a5,-756(s0)
20407594:	0507a683          	lw	a3,80(a5)
20407598:	d0c42783          	lw	a5,-756(s0)
2040759c:	0547a703          	lw	a4,84(a5)
204075a0:	00070793          	mv	a5,a4
204075a4:	00179793          	slli	a5,a5,0x1
204075a8:	00e787b3          	add	a5,a5,a4
204075ac:	00479793          	slli	a5,a5,0x4
204075b0:	00f687b3          	add	a5,a3,a5
      int status = TVMNDArray_Empty(1, shape, dtype, dev,
204075b4:	00878793          	addi	a5,a5,8
204075b8:	d1040593          	addi	a1,s0,-752
204075bc:	d9842683          	lw	a3,-616(s0)
204075c0:	d9c42703          	lw	a4,-612(s0)
204075c4:	d9442603          	lw	a2,-620(s0)
204075c8:	00100513          	li	a0,1
204075cc:	afdfb0ef          	jal	ra,204030c8 <TVMNDArray_Empty>
204075d0:	faa42a23          	sw	a0,-76(s0)
      CHECK_EQ(status, 0, "fail to create storage_pool with idx=%d\n", idx);
204075d4:	fb442783          	lw	a5,-76(s0)
204075d8:	02078c63          	beqz	a5,20407610 <TVMGraphExecutor_SetupStorage+0x69c>
204075dc:	fdc42783          	lw	a5,-36(s0)
204075e0:	00019717          	auipc	a4,0x19
204075e4:	17470713          	addi	a4,a4,372 # 20420754 <__func__.3846+0x574>
204075e8:	00019697          	auipc	a3,0x19
204075ec:	44468693          	addi	a3,a3,1092 # 20420a2c <__func__.3846+0x84c>
204075f0:	00019617          	auipc	a2,0x19
204075f4:	4d860613          	addi	a2,a2,1240 # 20420ac8 <__func__.3846+0x8e8>
204075f8:	3f400593          	li	a1,1012
204075fc:	00019517          	auipc	a0,0x19
20407600:	4d450513          	addi	a0,a0,1236 # 20420ad0 <__func__.3846+0x8f0>
20407604:	139060ef          	jal	ra,2040df3c <TVMLogf>
20407608:	50000513          	li	a0,1280
2040760c:	e70f90ef          	jal	ra,20400c7c <TVMPlatformAbort>
    }
    executor->storage_pool_count++;
20407610:	d0c42783          	lw	a5,-756(s0)
20407614:	0547a783          	lw	a5,84(a5)
20407618:	00178713          	addi	a4,a5,1
2040761c:	d0c42783          	lw	a5,-756(s0)
20407620:	04e7aa23          	sw	a4,84(a5)
  for (idx = 0; idx < pool_entry_count; idx++) {
20407624:	fdc42783          	lw	a5,-36(s0)
20407628:	00178793          	addi	a5,a5,1
2040762c:	fcf42e23          	sw	a5,-36(s0)
20407630:	fdc42703          	lw	a4,-36(s0)
20407634:	fd842783          	lw	a5,-40(s0)
20407638:	d4f762e3          	bltu	a4,a5,2040737c <TVMGraphExecutor_SetupStorage+0x408>
  }

  // Assign the pooled entries. A unified memory pool is used to simplifiy
  // memory assignment for each node entry. The allocated memory on each device
  // is mapped to this pool.
  executor->data_entry_count = executor->node_row_ptr[executor->node_row_ptr_count - 1];
2040763c:	d0c42783          	lw	a5,-756(s0)
20407640:	0107a703          	lw	a4,16(a5)
20407644:	d0c42783          	lw	a5,-756(s0)
20407648:	0147a683          	lw	a3,20(a5)
2040764c:	400007b7          	lui	a5,0x40000
20407650:	fff78793          	addi	a5,a5,-1 # 3fffffff <__fini_array_end+0x1fbdd743>
20407654:	00f687b3          	add	a5,a3,a5
20407658:	00279793          	slli	a5,a5,0x2
2040765c:	00f707b3          	add	a5,a4,a5
20407660:	0007a703          	lw	a4,0(a5)
20407664:	d0c42783          	lw	a5,-756(s0)
20407668:	04e7ae23          	sw	a4,92(a5)
  err = TVMPlatformMemoryAllocate(sizeof(TVMNDArray) * executor->data_entry_count, alloc_dev,
2040766c:	d0c42783          	lw	a5,-756(s0)
20407670:	05c7a703          	lw	a4,92(a5)
20407674:	00070793          	mv	a5,a4
20407678:	00279793          	slli	a5,a5,0x2
2040767c:	00e787b3          	add	a5,a5,a4
20407680:	00379793          	slli	a5,a5,0x3
20407684:	00078713          	mv	a4,a5
                                  (void**)&executor->data_entry);
20407688:	d0c42783          	lw	a5,-756(s0)
2040768c:	05878793          	addi	a5,a5,88
  err = TVMPlatformMemoryAllocate(sizeof(TVMNDArray) * executor->data_entry_count, alloc_dev,
20407690:	00078693          	mv	a3,a5
20407694:	db442583          	lw	a1,-588(s0)
20407698:	db842603          	lw	a2,-584(s0)
2040769c:	00070513          	mv	a0,a4
204076a0:	e80f90ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204076a4:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
204076a8:	fc842783          	lw	a5,-56(s0)
204076ac:	02078863          	beqz	a5,204076dc <TVMGraphExecutor_SetupStorage+0x768>
    fprintf(stderr, "memory allocate error: %08x", err);
204076b0:	5fbf9797          	auipc	a5,0x5fbf9
204076b4:	38878793          	addi	a5,a5,904 # 80000a38 <_impure_ptr>
204076b8:	0007a783          	lw	a5,0(a5)
204076bc:	00c7a783          	lw	a5,12(a5)
204076c0:	fc842603          	lw	a2,-56(s0)
204076c4:	00019597          	auipc	a1,0x19
204076c8:	dc458593          	addi	a1,a1,-572 # 20420488 <__func__.3846+0x2a8>
204076cc:	00078513          	mv	a0,a5
204076d0:	41f0b0ef          	jal	ra,204132ee <fprintf>
    return -1;
204076d4:	fff00793          	li	a5,-1
204076d8:	1f40006f          	j	204078cc <TVMGraphExecutor_SetupStorage+0x958>
  }
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
204076dc:	fc042e23          	sw	zero,-36(s0)
204076e0:	1400006f          	j	20407820 <TVMGraphExecutor_SetupStorage+0x8ac>
    uint32_t storage_id = attrs->storage_id[idx];
204076e4:	fcc42783          	lw	a5,-52(s0)
204076e8:	0047a703          	lw	a4,4(a5)
204076ec:	fdc42783          	lw	a5,-36(s0)
204076f0:	00279793          	slli	a5,a5,0x2
204076f4:	00f707b3          	add	a5,a4,a5
204076f8:	0007a783          	lw	a5,0(a5)
204076fc:	fcf42223          	sw	a5,-60(s0)
    CHECK(storage_id < executor->storage_pool_count);
20407700:	d0c42783          	lw	a5,-756(s0)
20407704:	0547a783          	lw	a5,84(a5)
20407708:	fc442703          	lw	a4,-60(s0)
2040770c:	02f76263          	bltu	a4,a5,20407730 <TVMGraphExecutor_SetupStorage+0x7bc>
20407710:	00019617          	auipc	a2,0x19
20407714:	43c60613          	addi	a2,a2,1084 # 20420b4c <__func__.3846+0x96c>
20407718:	40500593          	li	a1,1029
2040771c:	00019517          	auipc	a0,0x19
20407720:	22850513          	addi	a0,a0,552 # 20420944 <__func__.3846+0x764>
20407724:	019060ef          	jal	ra,2040df3c <TVMLogf>
20407728:	50000513          	li	a0,1280
2040772c:	d50f90ef          	jal	ra,20400c7c <TVMPlatformAbort>
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
20407730:	d0c42783          	lw	a5,-756(s0)
20407734:	0507a683          	lw	a3,80(a5)
20407738:	fc442703          	lw	a4,-60(s0)
2040773c:	00070793          	mv	a5,a4
20407740:	00179793          	slli	a5,a5,0x1
20407744:	00e787b3          	add	a5,a5,a4
20407748:	00479793          	slli	a5,a5,0x4
2040774c:	00f687b3          	add	a5,a3,a5
20407750:	00878513          	addi	a0,a5,8
                                       attrs->shape + idx * TVM_CRT_MAX_NDIM, attrs->ndim[idx],
20407754:	fcc42783          	lw	a5,-52(s0)
20407758:	0147a683          	lw	a3,20(a5)
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
2040775c:	fdc42703          	lw	a4,-36(s0)
20407760:	00070793          	mv	a5,a4
20407764:	00179793          	slli	a5,a5,0x1
20407768:	00e787b3          	add	a5,a5,a4
2040776c:	00479793          	slli	a5,a5,0x4
                                       attrs->shape + idx * TVM_CRT_MAX_NDIM, attrs->ndim[idx],
20407770:	00f685b3          	add	a1,a3,a5
20407774:	fcc42783          	lw	a5,-52(s0)
20407778:	0187a703          	lw	a4,24(a5)
2040777c:	fdc42783          	lw	a5,-36(s0)
20407780:	00279793          	slli	a5,a5,0x2
20407784:	00f707b3          	add	a5,a4,a5
20407788:	0007a783          	lw	a5,0(a5)
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
2040778c:	00078813          	mv	a6,a5
                                       vtype[idx], &executor->data_entry[idx]);
20407790:	dbc42703          	lw	a4,-580(s0)
20407794:	fdc42783          	lw	a5,-36(s0)
20407798:	00279793          	slli	a5,a5,0x2
2040779c:	00f706b3          	add	a3,a4,a5
204077a0:	d0c42783          	lw	a5,-756(s0)
204077a4:	0587a603          	lw	a2,88(a5)
204077a8:	fdc42703          	lw	a4,-36(s0)
204077ac:	00070793          	mv	a5,a4
204077b0:	00279793          	slli	a5,a5,0x2
204077b4:	00e787b3          	add	a5,a5,a4
204077b8:	00379793          	slli	a5,a5,0x3
    int status = TVMNDArray_CreateView(&(executor->storage_pool[storage_id].array),
204077bc:	00f60733          	add	a4,a2,a5
204077c0:	0006a783          	lw	a5,0(a3)
204077c4:	00078693          	mv	a3,a5
204077c8:	00080613          	mv	a2,a6
204077cc:	e4dfb0ef          	jal	ra,20403618 <TVMNDArray_CreateView>
204077d0:	fca42023          	sw	a0,-64(s0)
    CHECK_EQ(status, 0, "fail to create for node with idx=%d, storage_id=%u\n", idx, storage_id);
204077d4:	fc042783          	lw	a5,-64(s0)
204077d8:	02078e63          	beqz	a5,20407814 <TVMGraphExecutor_SetupStorage+0x8a0>
204077dc:	fc442803          	lw	a6,-60(s0)
204077e0:	fdc42783          	lw	a5,-36(s0)
204077e4:	00019717          	auipc	a4,0x19
204077e8:	f7070713          	addi	a4,a4,-144 # 20420754 <__func__.3846+0x574>
204077ec:	00019697          	auipc	a3,0x19
204077f0:	24068693          	addi	a3,a3,576 # 20420a2c <__func__.3846+0x84c>
204077f4:	00019617          	auipc	a2,0x19
204077f8:	2d460613          	addi	a2,a2,724 # 20420ac8 <__func__.3846+0x8e8>
204077fc:	40900593          	li	a1,1033
20407800:	00019517          	auipc	a0,0x19
20407804:	37850513          	addi	a0,a0,888 # 20420b78 <__func__.3846+0x998>
20407808:	734060ef          	jal	ra,2040df3c <TVMLogf>
2040780c:	50000513          	li	a0,1280
20407810:	c6cf90ef          	jal	ra,20400c7c <TVMPlatformAbort>
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
20407814:	fdc42783          	lw	a5,-36(s0)
20407818:	00178793          	addi	a5,a5,1
2040781c:	fcf42e23          	sw	a5,-36(s0)
20407820:	d0c42783          	lw	a5,-756(s0)
20407824:	05c7a783          	lw	a5,92(a5)
20407828:	fdc42703          	lw	a4,-36(s0)
2040782c:	eaf76ce3          	bltu	a4,a5,204076e4 <TVMGraphExecutor_SetupStorage+0x770>
  }

  // Release memory
  err = TVMPlatformMemoryFree(vtype, alloc_dev);
20407830:	dbc42783          	lw	a5,-580(s0)
20407834:	db442583          	lw	a1,-588(s0)
20407838:	db842603          	lw	a2,-584(s0)
2040783c:	00078513          	mv	a0,a5
20407840:	d44f90ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20407844:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
20407848:	fc842783          	lw	a5,-56(s0)
2040784c:	02078863          	beqz	a5,2040787c <TVMGraphExecutor_SetupStorage+0x908>
    fprintf(stderr, "memory free error: %08x", err);
20407850:	5fbf9797          	auipc	a5,0x5fbf9
20407854:	1e878793          	addi	a5,a5,488 # 80000a38 <_impure_ptr>
20407858:	0007a783          	lw	a5,0(a5)
2040785c:	00c7a783          	lw	a5,12(a5)
20407860:	fc842603          	lw	a2,-56(s0)
20407864:	00019597          	auipc	a1,0x19
20407868:	39c58593          	addi	a1,a1,924 # 20420c00 <__func__.3846+0xa20>
2040786c:	00078513          	mv	a0,a5
20407870:	27f0b0ef          	jal	ra,204132ee <fprintf>
    return err;
20407874:	fc842783          	lw	a5,-56(s0)
20407878:	0540006f          	j	204078cc <TVMGraphExecutor_SetupStorage+0x958>
  }

  err = TVMPlatformMemoryFree(pool_entry, alloc_dev);
2040787c:	db042783          	lw	a5,-592(s0)
20407880:	db442583          	lw	a1,-588(s0)
20407884:	db842603          	lw	a2,-584(s0)
20407888:	00078513          	mv	a0,a5
2040788c:	cf8f90ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20407890:	fca42423          	sw	a0,-56(s0)
  if (err != kTvmErrorNoError) {
20407894:	fc842783          	lw	a5,-56(s0)
20407898:	02078863          	beqz	a5,204078c8 <TVMGraphExecutor_SetupStorage+0x954>
    fprintf(stderr, "memory free error: %08x", err);
2040789c:	5fbf9797          	auipc	a5,0x5fbf9
204078a0:	19c78793          	addi	a5,a5,412 # 80000a38 <_impure_ptr>
204078a4:	0007a783          	lw	a5,0(a5)
204078a8:	00c7a783          	lw	a5,12(a5)
204078ac:	fc842603          	lw	a2,-56(s0)
204078b0:	00019597          	auipc	a1,0x19
204078b4:	35058593          	addi	a1,a1,848 # 20420c00 <__func__.3846+0xa20>
204078b8:	00078513          	mv	a0,a5
204078bc:	2330b0ef          	jal	ra,204132ee <fprintf>
    return -1;
204078c0:	fff00793          	li	a5,-1
204078c4:	0080006f          	j	204078cc <TVMGraphExecutor_SetupStorage+0x958>
  }

  return 0;
204078c8:	00000793          	li	a5,0
}
204078cc:	00078513          	mv	a0,a5
204078d0:	2fc12083          	lw	ra,764(sp)
204078d4:	2f812403          	lw	s0,760(sp)
204078d8:	2f412483          	lw	s1,756(sp)
204078dc:	2f012903          	lw	s2,752(sp)
204078e0:	2ec12983          	lw	s3,748(sp)
204078e4:	2e812a03          	lw	s4,744(sp)
204078e8:	2e412a83          	lw	s5,740(sp)
204078ec:	30010113          	addi	sp,sp,768
204078f0:	00008067          	ret

204078f4 <TVMGraphExecutor_SetupOpExecs>:

int TVMGraphExecutor_SetupOpExecs(TVMGraphExecutor* executor) {
204078f4:	db010113          	addi	sp,sp,-592
204078f8:	24112623          	sw	ra,588(sp)
204078fc:	24812423          	sw	s0,584(sp)
20407900:	24912223          	sw	s1,580(sp)
20407904:	25010413          	addi	s0,sp,592
20407908:	daa42e23          	sw	a0,-580(s0)
  int status = 0;
2040790c:	fe042623          	sw	zero,-20(s0)
  uint32_t nid, idx;
  executor->op_execs_count = executor->nodes_count;
20407910:	dbc42783          	lw	a5,-580(s0)
20407914:	0047a703          	lw	a4,4(a5)
20407918:	dbc42783          	lw	a5,-580(s0)
2040791c:	06e7a223          	sw	a4,100(a5)
  DLDevice dev = {kDLCPU, 0};
20407920:	00100793          	li	a5,1
20407924:	fcf42223          	sw	a5,-60(s0)
20407928:	fc042423          	sw	zero,-56(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMPackedFunc) * executor->op_execs_count,
2040792c:	dbc42783          	lw	a5,-580(s0)
20407930:	0647a783          	lw	a5,100(a5)
20407934:	1d800593          	li	a1,472
20407938:	00078513          	mv	a0,a5
2040793c:	2f4180ef          	jal	ra,2041fc30 <__mulsi3>
20407940:	00050793          	mv	a5,a0
20407944:	00078713          	mv	a4,a5
                                                  dev, (void**)&executor->op_execs);
20407948:	dbc42783          	lw	a5,-580(s0)
2040794c:	06078793          	addi	a5,a5,96
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMPackedFunc) * executor->op_execs_count,
20407950:	00078693          	mv	a3,a5
20407954:	fc442583          	lw	a1,-60(s0)
20407958:	fc842603          	lw	a2,-56(s0)
2040795c:	00070513          	mv	a0,a4
20407960:	bc0f90ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20407964:	fca42e23          	sw	a0,-36(s0)
  if (err != kTvmErrorNoError) {
20407968:	fdc42783          	lw	a5,-36(s0)
2040796c:	02078c63          	beqz	a5,204079a4 <TVMGraphExecutor_SetupOpExecs+0xb0>
    fprintf(stderr, "memory allocate error: %08x", err);
20407970:	5fbf9797          	auipc	a5,0x5fbf9
20407974:	0c878793          	addi	a5,a5,200 # 80000a38 <_impure_ptr>
20407978:	0007a783          	lw	a5,0(a5)
2040797c:	00c7a783          	lw	a5,12(a5)
20407980:	fdc42603          	lw	a2,-36(s0)
20407984:	00019597          	auipc	a1,0x19
20407988:	b0458593          	addi	a1,a1,-1276 # 20420488 <__func__.3846+0x2a8>
2040798c:	00078513          	mv	a0,a5
20407990:	15f0b0ef          	jal	ra,204132ee <fprintf>
    status = -1;
20407994:	fff00793          	li	a5,-1
20407998:	fef42623          	sw	a5,-20(s0)
    return status;
2040799c:	fec42783          	lw	a5,-20(s0)
204079a0:	2a80006f          	j	20407c48 <TVMGraphExecutor_SetupOpExecs+0x354>
  }
  for (nid = 0; nid < executor->nodes_count; nid++) {
204079a4:	fe042423          	sw	zero,-24(s0)
204079a8:	28c0006f          	j	20407c34 <TVMGraphExecutor_SetupOpExecs+0x340>
    const TVMGraphExecutorNode* inode = executor->nodes + nid;
204079ac:	dbc42783          	lw	a5,-580(s0)
204079b0:	0007a483          	lw	s1,0(a5)
204079b4:	16c00593          	li	a1,364
204079b8:	fe842503          	lw	a0,-24(s0)
204079bc:	274180ef          	jal	ra,2041fc30 <__mulsi3>
204079c0:	00050793          	mv	a5,a0
204079c4:	00f487b3          	add	a5,s1,a5
204079c8:	fcf42c23          	sw	a5,-40(s0)
    if (strcmp(inode->op_type, "null")) {
204079cc:	fd842783          	lw	a5,-40(s0)
204079d0:	00019597          	auipc	a1,0x19
204079d4:	24858593          	addi	a1,a1,584 # 20420c18 <__func__.3846+0xa38>
204079d8:	00078513          	mv	a0,a5
204079dc:	5330b0ef          	jal	ra,2041370e <strcmp>
204079e0:	00050793          	mv	a5,a0
204079e4:	20078c63          	beqz	a5,20407bfc <TVMGraphExecutor_SetupOpExecs+0x308>
      DLTensorPtr args[TVM_CRT_MAX_ARGS];
      uint32_t args_count = 0;
204079e8:	fe042023          	sw	zero,-32(s0)
      for (idx = 0; idx < inode->inputs_count; idx++) {
204079ec:	fe042223          	sw	zero,-28(s0)
204079f0:	0900006f          	j	20407a80 <TVMGraphExecutor_SetupOpExecs+0x18c>
        const TVMGraphExecutorNodeEntry* entry = inode->inputs + idx;
204079f4:	fd842783          	lw	a5,-40(s0)
204079f8:	10c7a703          	lw	a4,268(a5)
204079fc:	fe442783          	lw	a5,-28(s0)
20407a00:	00479793          	slli	a5,a5,0x4
20407a04:	00f707b3          	add	a5,a4,a5
20407a08:	fcf42823          	sw	a5,-48(s0)
        uint32_t eid = TVMGraphExecutor_GetEntryId(executor, entry->node_id, entry->index);
20407a0c:	fd042783          	lw	a5,-48(s0)
20407a10:	0007a703          	lw	a4,0(a5)
20407a14:	fd042783          	lw	a5,-48(s0)
20407a18:	0047a783          	lw	a5,4(a5)
20407a1c:	00078613          	mv	a2,a5
20407a20:	00070593          	mv	a1,a4
20407a24:	dbc42503          	lw	a0,-580(s0)
20407a28:	a19fe0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
20407a2c:	fca42623          	sw	a0,-52(s0)
        args[idx] = &(executor->data_entry[eid].dl_tensor);
20407a30:	dbc42783          	lw	a5,-580(s0)
20407a34:	0587a683          	lw	a3,88(a5)
20407a38:	fcc42703          	lw	a4,-52(s0)
20407a3c:	00070793          	mv	a5,a4
20407a40:	00279793          	slli	a5,a5,0x2
20407a44:	00e787b3          	add	a5,a5,a4
20407a48:	00379793          	slli	a5,a5,0x3
20407a4c:	00f687b3          	add	a5,a3,a5
20407a50:	00078713          	mv	a4,a5
20407a54:	fe442783          	lw	a5,-28(s0)
20407a58:	00279793          	slli	a5,a5,0x2
20407a5c:	ff040693          	addi	a3,s0,-16
20407a60:	00f687b3          	add	a5,a3,a5
20407a64:	dce7a823          	sw	a4,-560(a5)
        args_count++;
20407a68:	fe042783          	lw	a5,-32(s0)
20407a6c:	00178793          	addi	a5,a5,1
20407a70:	fef42023          	sw	a5,-32(s0)
      for (idx = 0; idx < inode->inputs_count; idx++) {
20407a74:	fe442783          	lw	a5,-28(s0)
20407a78:	00178793          	addi	a5,a5,1
20407a7c:	fef42223          	sw	a5,-28(s0)
20407a80:	fd842783          	lw	a5,-40(s0)
20407a84:	1107a783          	lw	a5,272(a5)
20407a88:	fe442703          	lw	a4,-28(s0)
20407a8c:	f6f764e3          	bltu	a4,a5,204079f4 <TVMGraphExecutor_SetupOpExecs+0x100>
      }
      for (idx = 0; idx < inode->param.num_outputs; idx++) {
20407a90:	fe042223          	sw	zero,-28(s0)
20407a94:	0680006f          	j	20407afc <TVMGraphExecutor_SetupOpExecs+0x208>
        uint32_t eid = TVMGraphExecutor_GetEntryId(executor, nid, idx);
20407a98:	fe442603          	lw	a2,-28(s0)
20407a9c:	fe842583          	lw	a1,-24(s0)
20407aa0:	dbc42503          	lw	a0,-580(s0)
20407aa4:	99dfe0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
20407aa8:	fca42a23          	sw	a0,-44(s0)
        args[args_count] = &(executor->data_entry[eid].dl_tensor);
20407aac:	dbc42783          	lw	a5,-580(s0)
20407ab0:	0587a683          	lw	a3,88(a5)
20407ab4:	fd442703          	lw	a4,-44(s0)
20407ab8:	00070793          	mv	a5,a4
20407abc:	00279793          	slli	a5,a5,0x2
20407ac0:	00e787b3          	add	a5,a5,a4
20407ac4:	00379793          	slli	a5,a5,0x3
20407ac8:	00f687b3          	add	a5,a3,a5
20407acc:	00078713          	mv	a4,a5
20407ad0:	fe042783          	lw	a5,-32(s0)
20407ad4:	00279793          	slli	a5,a5,0x2
20407ad8:	ff040693          	addi	a3,s0,-16
20407adc:	00f687b3          	add	a5,a3,a5
20407ae0:	dce7a823          	sw	a4,-560(a5)
        args_count++;
20407ae4:	fe042783          	lw	a5,-32(s0)
20407ae8:	00178793          	addi	a5,a5,1
20407aec:	fef42023          	sw	a5,-32(s0)
      for (idx = 0; idx < inode->param.num_outputs; idx++) {
20407af0:	fe442783          	lw	a5,-28(s0)
20407af4:	00178793          	addi	a5,a5,1
20407af8:	fef42223          	sw	a5,-28(s0)
20407afc:	fd842783          	lw	a5,-40(s0)
20407b00:	1047a783          	lw	a5,260(a5)
20407b04:	fe442703          	lw	a4,-28(s0)
20407b08:	f8f768e3          	bltu	a4,a5,20407a98 <TVMGraphExecutor_SetupOpExecs+0x1a4>
      }
      if (strcmp(inode->op_type, "tvm_op")) {
20407b0c:	fd842783          	lw	a5,-40(s0)
20407b10:	00019597          	auipc	a1,0x19
20407b14:	11058593          	addi	a1,a1,272 # 20420c20 <__func__.3846+0xa40>
20407b18:	00078513          	mv	a0,a5
20407b1c:	3f30b0ef          	jal	ra,2041370e <strcmp>
20407b20:	00050793          	mv	a5,a0
20407b24:	02078c63          	beqz	a5,20407b5c <TVMGraphExecutor_SetupOpExecs+0x268>
        fprintf(stderr, "Can only take tvm_op as op, but \"%s\" is found.\n", inode->op_type);
20407b28:	5fbf9797          	auipc	a5,0x5fbf9
20407b2c:	f1078793          	addi	a5,a5,-240 # 80000a38 <_impure_ptr>
20407b30:	0007a783          	lw	a5,0(a5)
20407b34:	00c7a783          	lw	a5,12(a5)
20407b38:	fd842703          	lw	a4,-40(s0)
20407b3c:	00070613          	mv	a2,a4
20407b40:	00019597          	auipc	a1,0x19
20407b44:	0e858593          	addi	a1,a1,232 # 20420c28 <__func__.3846+0xa48>
20407b48:	00078513          	mv	a0,a5
20407b4c:	7a20b0ef          	jal	ra,204132ee <fprintf>
        status = -1;
20407b50:	fff00793          	li	a5,-1
20407b54:	fef42623          	sw	a5,-20(s0)
        break;
20407b58:	0ec0006f          	j	20407c44 <TVMGraphExecutor_SetupOpExecs+0x350>
      }
      if (args_count >= TVM_CRT_MAX_ARGS) {
20407b5c:	fe042703          	lw	a4,-32(s0)
20407b60:	00900793          	li	a5,9
20407b64:	02e7fe63          	bleu	a4,a5,20407ba0 <TVMGraphExecutor_SetupOpExecs+0x2ac>
        fprintf(stderr, "too many arguments: expected less than %d args, but got %d.\n",
20407b68:	5fbf9797          	auipc	a5,0x5fbf9
20407b6c:	ed078793          	addi	a5,a5,-304 # 80000a38 <_impure_ptr>
20407b70:	0007a783          	lw	a5,0(a5)
20407b74:	00c7a783          	lw	a5,12(a5)
20407b78:	fe042683          	lw	a3,-32(s0)
20407b7c:	00a00613          	li	a2,10
20407b80:	00019597          	auipc	a1,0x19
20407b84:	0d858593          	addi	a1,a1,216 # 20420c58 <__func__.3846+0xa78>
20407b88:	00078513          	mv	a0,a5
20407b8c:	7620b0ef          	jal	ra,204132ee <fprintf>
                TVM_CRT_MAX_ARGS, args_count);
        status = -1;
20407b90:	fff00793          	li	a5,-1
20407b94:	fef42623          	sw	a5,-20(s0)
        break;
20407b98:	00000013          	nop
20407b9c:	0a80006f          	j	20407c44 <TVMGraphExecutor_SetupOpExecs+0x350>
      }
#if TVM_CRT_DEBUG
      printf("tvm_op: creating %s with node_id=%d\n", inode->param.func_name, nid);
#endif  // TVM_CRT_DEBUG
      TVMPackedFunc pf;
      TVMGraphExecutor_CreateTVMOp(executor, &(inode->param), args, args_count, &pf);
20407ba0:	fd842783          	lw	a5,-40(s0)
20407ba4:	08878793          	addi	a5,a5,136
20407ba8:	de840713          	addi	a4,s0,-536
20407bac:	dc040613          	addi	a2,s0,-576
20407bb0:	fe042683          	lw	a3,-32(s0)
20407bb4:	00078593          	mv	a1,a5
20407bb8:	dbc42503          	lw	a0,-580(s0)
20407bbc:	0a4000ef          	jal	ra,20407c60 <TVMGraphExecutor_CreateTVMOp>
      executor->op_execs[nid] = pf;
20407bc0:	dbc42783          	lw	a5,-580(s0)
20407bc4:	0607a483          	lw	s1,96(a5)
20407bc8:	1d800593          	li	a1,472
20407bcc:	fe842503          	lw	a0,-24(s0)
20407bd0:	060180ef          	jal	ra,2041fc30 <__mulsi3>
20407bd4:	00050793          	mv	a5,a0
20407bd8:	00f487b3          	add	a5,s1,a5
20407bdc:	00078693          	mv	a3,a5
20407be0:	de840793          	addi	a5,s0,-536
20407be4:	1d800713          	li	a4,472
20407be8:	00070613          	mv	a2,a4
20407bec:	00078593          	mv	a1,a5
20407bf0:	00068513          	mv	a0,a3
20407bf4:	0e10b0ef          	jal	ra,204134d4 <memcpy>
20407bf8:	0300006f          	j	20407c28 <TVMGraphExecutor_SetupOpExecs+0x334>
    } else {
      memset(&executor->op_execs[nid], 0, sizeof(TVMPackedFunc));
20407bfc:	dbc42783          	lw	a5,-580(s0)
20407c00:	0607a483          	lw	s1,96(a5)
20407c04:	1d800593          	li	a1,472
20407c08:	fe842503          	lw	a0,-24(s0)
20407c0c:	024180ef          	jal	ra,2041fc30 <__mulsi3>
20407c10:	00050793          	mv	a5,a0
20407c14:	00f487b3          	add	a5,s1,a5
20407c18:	1d800613          	li	a2,472
20407c1c:	00000593          	li	a1,0
20407c20:	00078513          	mv	a0,a5
20407c24:	16f0b0ef          	jal	ra,20413592 <memset>
  for (nid = 0; nid < executor->nodes_count; nid++) {
20407c28:	fe842783          	lw	a5,-24(s0)
20407c2c:	00178793          	addi	a5,a5,1
20407c30:	fef42423          	sw	a5,-24(s0)
20407c34:	dbc42783          	lw	a5,-580(s0)
20407c38:	0047a783          	lw	a5,4(a5)
20407c3c:	fe842703          	lw	a4,-24(s0)
20407c40:	d6f766e3          	bltu	a4,a5,204079ac <TVMGraphExecutor_SetupOpExecs+0xb8>
    }
  }
  return status;
20407c44:	fec42783          	lw	a5,-20(s0)
}
20407c48:	00078513          	mv	a0,a5
20407c4c:	24c12083          	lw	ra,588(sp)
20407c50:	24812403          	lw	s0,584(sp)
20407c54:	24412483          	lw	s1,580(sp)
20407c58:	25010113          	addi	sp,sp,592
20407c5c:	00008067          	ret

20407c60 <TVMGraphExecutor_CreateTVMOp>:
  uint32_t shape_data_count;
} TVMOpArgs;

int32_t TVMGraphExecutor_CreateTVMOp(TVMGraphExecutor* executor, const TVMOpParam* param,
                                     DLTensorPtr* args, const uint32_t args_count,
                                     TVMPackedFunc* pf) {
20407c60:	cc010113          	addi	sp,sp,-832
20407c64:	32112e23          	sw	ra,828(sp)
20407c68:	32812c23          	sw	s0,824(sp)
20407c6c:	33212a23          	sw	s2,820(sp)
20407c70:	33312823          	sw	s3,816(sp)
20407c74:	34010413          	addi	s0,sp,832
20407c78:	cca42e23          	sw	a0,-804(s0)
20407c7c:	ccb42c23          	sw	a1,-808(s0)
20407c80:	ccc42a23          	sw	a2,-812(s0)
20407c84:	ccd42823          	sw	a3,-816(s0)
20407c88:	cce42623          	sw	a4,-820(s0)
  int status = 0;
20407c8c:	fe042423          	sw	zero,-24(s0)
  uint32_t idx;
  TVMOpArgs arg_ptr;
  memset(&arg_ptr, 0, sizeof(TVMOpArgs));
20407c90:	d7040793          	addi	a5,s0,-656
20407c94:	27000613          	li	a2,624
20407c98:	00000593          	li	a1,0
20407c9c:	00078513          	mv	a0,a5
20407ca0:	0f30b0ef          	jal	ra,20413592 <memset>
  arg_ptr.args_count = args_count;
20407ca4:	cd042783          	lw	a5,-816(s0)
20407ca8:	f0f42023          	sw	a5,-256(s0)
  if (param->flatten_data) {
20407cac:	cd842783          	lw	a5,-808(s0)
20407cb0:	0807a783          	lw	a5,128(a5)
20407cb4:	00078663          	beqz	a5,20407cc0 <TVMGraphExecutor_CreateTVMOp+0x60>
    arg_ptr.shape_data_count = arg_ptr.args_count;
20407cb8:	f0042783          	lw	a5,-256(s0)
20407cbc:	fcf42c23          	sw	a5,-40(s0)
  }
  for (idx = 0; idx < arg_ptr.args_count; ++idx) {
20407cc0:	fe042623          	sw	zero,-20(s0)
20407cc4:	13c0006f          	j	20407e00 <TVMGraphExecutor_CreateTVMOp+0x1a0>
    TVMValue v;
    memset(&v, 0, sizeof(v));
20407cc8:	ce840793          	addi	a5,s0,-792
20407ccc:	00800613          	li	a2,8
20407cd0:	00000593          	li	a1,0
20407cd4:	00078513          	mv	a0,a5
20407cd8:	0bb0b0ef          	jal	ra,20413592 <memset>
    DLTensor* t = &(arg_ptr.args[idx]);
20407cdc:	d7040693          	addi	a3,s0,-656
20407ce0:	fec42703          	lw	a4,-20(s0)
20407ce4:	00070793          	mv	a5,a4
20407ce8:	00279793          	slli	a5,a5,0x2
20407cec:	00e787b3          	add	a5,a5,a4
20407cf0:	00379793          	slli	a5,a5,0x3
20407cf4:	00f687b3          	add	a5,a3,a5
20407cf8:	fef42223          	sw	a5,-28(s0)
    /* v.v_handle = &((*args)[idx]); */
    v.v_handle = args[idx];
20407cfc:	fec42783          	lw	a5,-20(s0)
20407d00:	00279793          	slli	a5,a5,0x2
20407d04:	cd442703          	lw	a4,-812(s0)
20407d08:	00f707b3          	add	a5,a4,a5
20407d0c:	0007a783          	lw	a5,0(a5)
20407d10:	cef42423          	sw	a5,-792(s0)
    arg_ptr.arg_values[idx] = v;
20407d14:	fec42783          	lw	a5,-20(s0)
20407d18:	03278793          	addi	a5,a5,50
20407d1c:	00379793          	slli	a5,a5,0x3
20407d20:	ff040693          	addi	a3,s0,-16
20407d24:	00f687b3          	add	a5,a3,a5
20407d28:	ce842683          	lw	a3,-792(s0)
20407d2c:	cec42703          	lw	a4,-788(s0)
20407d30:	d8d7a423          	sw	a3,-632(a5)
20407d34:	d8e7a623          	sw	a4,-628(a5)
    arg_ptr.arg_values_count++;
20407d38:	f5842783          	lw	a5,-168(s0)
20407d3c:	00178793          	addi	a5,a5,1
20407d40:	f4f42c23          	sw	a5,-168(s0)
    arg_ptr.arg_tcodes[idx] = kTVMNDArrayHandle;
20407d44:	fec42783          	lw	a5,-20(s0)
20407d48:	07878793          	addi	a5,a5,120
20407d4c:	00279793          	slli	a5,a5,0x2
20407d50:	ff040713          	addi	a4,s0,-16
20407d54:	00f707b3          	add	a5,a4,a5
20407d58:	00d00713          	li	a4,13
20407d5c:	d8e7a623          	sw	a4,-628(a5)
    arg_ptr.arg_tcodes_count++;
20407d60:	f8442783          	lw	a5,-124(s0)
20407d64:	00178793          	addi	a5,a5,1
20407d68:	f8f42223          	sw	a5,-124(s0)
    if (param->flatten_data) {
20407d6c:	cd842783          	lw	a5,-808(s0)
20407d70:	0807a783          	lw	a5,128(a5)
20407d74:	08078063          	beqz	a5,20407df4 <TVMGraphExecutor_CreateTVMOp+0x194>
      arg_ptr.shape_data[idx] = Shape_Accumulate(t->shape, t->ndim);
20407d78:	fe442783          	lw	a5,-28(s0)
20407d7c:	0147a703          	lw	a4,20(a5)
20407d80:	fe442783          	lw	a5,-28(s0)
20407d84:	00c7a783          	lw	a5,12(a5)
20407d88:	00078593          	mv	a1,a5
20407d8c:	00070513          	mv	a0,a4
20407d90:	fa1fb0ef          	jal	ra,20403d30 <Shape_Accumulate>
20407d94:	00050793          	mv	a5,a0
20407d98:	00078913          	mv	s2,a5
20407d9c:	00000993          	li	s3,0
20407da0:	fec42783          	lw	a5,-20(s0)
20407da4:	04278793          	addi	a5,a5,66
20407da8:	00379793          	slli	a5,a5,0x3
20407dac:	ff040693          	addi	a3,s0,-16
20407db0:	00f687b3          	add	a5,a3,a5
20407db4:	d927a423          	sw	s2,-632(a5)
20407db8:	d937a623          	sw	s3,-628(a5)
      t->ndim = 1;
20407dbc:	fe442783          	lw	a5,-28(s0)
20407dc0:	00100713          	li	a4,1
20407dc4:	00e7a623          	sw	a4,12(a5)
      t->shape[0] = arg_ptr.shape_data[idx];
20407dc8:	fe442783          	lw	a5,-28(s0)
20407dcc:	0147a703          	lw	a4,20(a5)
20407dd0:	fec42783          	lw	a5,-20(s0)
20407dd4:	04278793          	addi	a5,a5,66
20407dd8:	00379793          	slli	a5,a5,0x3
20407ddc:	ff040693          	addi	a3,s0,-16
20407de0:	00f687b3          	add	a5,a3,a5
20407de4:	d8c7a803          	lw	a6,-628(a5)
20407de8:	d887a783          	lw	a5,-632(a5)
20407dec:	00f72023          	sw	a5,0(a4)
20407df0:	01072223          	sw	a6,4(a4)
  for (idx = 0; idx < arg_ptr.args_count; ++idx) {
20407df4:	fec42783          	lw	a5,-20(s0)
20407df8:	00178793          	addi	a5,a5,1
20407dfc:	fef42623          	sw	a5,-20(s0)
20407e00:	f0042783          	lw	a5,-256(s0)
20407e04:	fec42703          	lw	a4,-20(s0)
20407e08:	ecf760e3          	bltu	a4,a5,20407cc8 <TVMGraphExecutor_CreateTVMOp+0x68>
    }
  }
  if (!strcmp(param->func_name, "__nop") || !strcmp(param->func_name, "__copy")) {
20407e0c:	cd842783          	lw	a5,-808(s0)
20407e10:	00019597          	auipc	a1,0x19
20407e14:	e8858593          	addi	a1,a1,-376 # 20420c98 <__func__.3846+0xab8>
20407e18:	00078513          	mv	a0,a5
20407e1c:	0f30b0ef          	jal	ra,2041370e <strcmp>
20407e20:	00050793          	mv	a5,a0
20407e24:	02078063          	beqz	a5,20407e44 <TVMGraphExecutor_CreateTVMOp+0x1e4>
20407e28:	cd842783          	lw	a5,-808(s0)
20407e2c:	00019597          	auipc	a1,0x19
20407e30:	e7458593          	addi	a1,a1,-396 # 20420ca0 <__func__.3846+0xac0>
20407e34:	00078513          	mv	a0,a5
20407e38:	0d70b0ef          	jal	ra,2041370e <strcmp>
20407e3c:	00050793          	mv	a5,a0
20407e40:	02079a63          	bnez	a5,20407e74 <TVMGraphExecutor_CreateTVMOp+0x214>
    fprintf(stderr, "%s function is not yet supported.", param->func_name);
20407e44:	5fbf9797          	auipc	a5,0x5fbf9
20407e48:	bf478793          	addi	a5,a5,-1036 # 80000a38 <_impure_ptr>
20407e4c:	0007a783          	lw	a5,0(a5)
20407e50:	00c7a783          	lw	a5,12(a5)
20407e54:	cd842703          	lw	a4,-808(s0)
20407e58:	00070613          	mv	a2,a4
20407e5c:	00019597          	auipc	a1,0x19
20407e60:	e4c58593          	addi	a1,a1,-436 # 20420ca8 <__func__.3846+0xac8>
20407e64:	00078513          	mv	a0,a5
20407e68:	4860b0ef          	jal	ra,204132ee <fprintf>
    status = -1;
20407e6c:	fff00793          	li	a5,-1
20407e70:	fef42423          	sw	a5,-24(s0)
  }

  TVMArgs targs = TVMArgs_Create(arg_ptr.arg_values, arg_ptr.arg_tcodes, arg_ptr.arg_values_count);
20407e74:	f5842683          	lw	a3,-168(s0)
20407e78:	cf040713          	addi	a4,s0,-784
20407e7c:	d7040793          	addi	a5,s0,-656
20407e80:	1ec78613          	addi	a2,a5,492
20407e84:	d7040793          	addi	a5,s0,-656
20407e88:	19878793          	addi	a5,a5,408
20407e8c:	00078593          	mv	a1,a5
20407e90:	00070513          	mv	a0,a4
20407e94:	cedfb0ef          	jal	ra,20403b80 <TVMArgs_Create>
  status = TVMPackedFunc_InitModuleFunc(pf, executor->module_handle, param->func_name, &targs);
20407e98:	cdc42783          	lw	a5,-804(s0)
20407e9c:	0407a783          	lw	a5,64(a5)
20407ea0:	cd842703          	lw	a4,-808(s0)
20407ea4:	cf040693          	addi	a3,s0,-784
20407ea8:	00070613          	mv	a2,a4
20407eac:	00078593          	mv	a1,a5
20407eb0:	ccc42503          	lw	a0,-820(s0)
20407eb4:	c19fb0ef          	jal	ra,20403acc <TVMPackedFunc_InitModuleFunc>
20407eb8:	fea42423          	sw	a0,-24(s0)

  return status;
20407ebc:	fe842783          	lw	a5,-24(s0)
}
20407ec0:	00078513          	mv	a0,a5
20407ec4:	33c12083          	lw	ra,828(sp)
20407ec8:	33812403          	lw	s0,824(sp)
20407ecc:	33412903          	lw	s2,820(sp)
20407ed0:	33012983          	lw	s3,816(sp)
20407ed4:	34010113          	addi	sp,sp,832
20407ed8:	00008067          	ret

20407edc <TVMGraphExecutor_Init>:
 * \param devs The device of the host and devices where graph nodes will be
 * executed on.
 * \return 0 on success.
 */
int TVMGraphExecutor_Init(TVMGraphExecutor* executor, const char* graph_json,
                          TVMModuleHandle module_handle, const DLDevice* devs) {
20407edc:	f9010113          	addi	sp,sp,-112
20407ee0:	06112623          	sw	ra,108(sp)
20407ee4:	06812423          	sw	s0,104(sp)
20407ee8:	07010413          	addi	s0,sp,112
20407eec:	f8a42e23          	sw	a0,-100(s0)
20407ef0:	f8b42c23          	sw	a1,-104(s0)
20407ef4:	f8c42a23          	sw	a2,-108(s0)
20407ef8:	f8d42823          	sw	a3,-112(s0)
  JSONReader reader;
  tvm_crt_error_t err = JSONReader_Create(graph_json, &reader);
20407efc:	fa440793          	addi	a5,s0,-92
20407f00:	00078593          	mv	a1,a5
20407f04:	f9842503          	lw	a0,-104(s0)
20407f08:	6d0010ef          	jal	ra,204095d8 <JSONReader_Create>
20407f0c:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20407f10:	fec42783          	lw	a5,-20(s0)
20407f14:	00078663          	beqz	a5,20407f20 <TVMGraphExecutor_Init+0x44>
    return -1;
20407f18:	fff00793          	li	a5,-1
20407f1c:	0840006f          	j	20407fa0 <TVMGraphExecutor_Init+0xc4>
  }

  TVMGraphExecutor_Load(executor, &reader);
20407f20:	fa440793          	addi	a5,s0,-92
20407f24:	00078593          	mv	a1,a5
20407f28:	f9c42503          	lw	a0,-100(s0)
20407f2c:	c65fd0ef          	jal	ra,20405b90 <TVMGraphExecutor_Load>
  err = JSONReader_Release(&reader);
20407f30:	fa440793          	addi	a5,s0,-92
20407f34:	00078513          	mv	a0,a5
20407f38:	085010ef          	jal	ra,204097bc <JSONReader_Release>
20407f3c:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20407f40:	fec42783          	lw	a5,-20(s0)
20407f44:	00078663          	beqz	a5,20407f50 <TVMGraphExecutor_Init+0x74>
    return -1;
20407f48:	fff00793          	li	a5,-1
20407f4c:	0540006f          	j	20407fa0 <TVMGraphExecutor_Init+0xc4>
  }
  executor->module_handle = module_handle;
20407f50:	f9c42783          	lw	a5,-100(s0)
20407f54:	f9442703          	lw	a4,-108(s0)
20407f58:	04e7a023          	sw	a4,64(a5)
  executor->devices[0] = devs[0];
20407f5c:	f9c42703          	lw	a4,-100(s0)
20407f60:	f9042783          	lw	a5,-112(s0)
20407f64:	0047a803          	lw	a6,4(a5)
20407f68:	0007a783          	lw	a5,0(a5)
20407f6c:	04f72223          	sw	a5,68(a4)
20407f70:	05072423          	sw	a6,72(a4)

  int status;
  status = TVMGraphExecutor_SetupStorage(executor);
20407f74:	f9c42503          	lw	a0,-100(s0)
20407f78:	ffdfe0ef          	jal	ra,20406f74 <TVMGraphExecutor_SetupStorage>
20407f7c:	fea42423          	sw	a0,-24(s0)
  if (status != 0) {
20407f80:	fe842783          	lw	a5,-24(s0)
20407f84:	00078663          	beqz	a5,20407f90 <TVMGraphExecutor_Init+0xb4>
    return status;
20407f88:	fe842783          	lw	a5,-24(s0)
20407f8c:	0140006f          	j	20407fa0 <TVMGraphExecutor_Init+0xc4>
  }
  status = TVMGraphExecutor_SetupOpExecs(executor);
20407f90:	f9c42503          	lw	a0,-100(s0)
20407f94:	961ff0ef          	jal	ra,204078f4 <TVMGraphExecutor_SetupOpExecs>
20407f98:	fea42423          	sw	a0,-24(s0)

  return status;
20407f9c:	fe842783          	lw	a5,-24(s0)
}
20407fa0:	00078513          	mv	a0,a5
20407fa4:	06c12083          	lw	ra,108(sp)
20407fa8:	06812403          	lw	s0,104(sp)
20407fac:	07010113          	addi	sp,sp,112
20407fb0:	00008067          	ret

20407fb4 <TVMGraphExecutor_Create>:

int TVMGraphExecutor_Create(const char* sym_json, TVMModuleHandle module_handle,
                            const DLDevice* devs, TVMGraphExecutor** executor) {
20407fb4:	fd010113          	addi	sp,sp,-48
20407fb8:	02112623          	sw	ra,44(sp)
20407fbc:	02812423          	sw	s0,40(sp)
20407fc0:	03010413          	addi	s0,sp,48
20407fc4:	fca42e23          	sw	a0,-36(s0)
20407fc8:	fcb42c23          	sw	a1,-40(s0)
20407fcc:	fcc42a23          	sw	a2,-44(s0)
20407fd0:	fcd42823          	sw	a3,-48(s0)
  DLDevice dev = {kDLCPU, 0};
20407fd4:	00100793          	li	a5,1
20407fd8:	fef42223          	sw	a5,-28(s0)
20407fdc:	fe042423          	sw	zero,-24(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(TVMGraphExecutor), dev, (void**)executor);
20407fe0:	fd042683          	lw	a3,-48(s0)
20407fe4:	fe442583          	lw	a1,-28(s0)
20407fe8:	fe842603          	lw	a2,-24(s0)
20407fec:	06800513          	li	a0,104
20407ff0:	d31f80ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20407ff4:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20407ff8:	fec42783          	lw	a5,-20(s0)
20407ffc:	02078863          	beqz	a5,2040802c <TVMGraphExecutor_Create+0x78>
    fprintf(stderr, "memory allocate error: %08x", err);
20408000:	5fbf9797          	auipc	a5,0x5fbf9
20408004:	a3878793          	addi	a5,a5,-1480 # 80000a38 <_impure_ptr>
20408008:	0007a783          	lw	a5,0(a5)
2040800c:	00c7a783          	lw	a5,12(a5)
20408010:	fec42603          	lw	a2,-20(s0)
20408014:	00018597          	auipc	a1,0x18
20408018:	47458593          	addi	a1,a1,1140 # 20420488 <__func__.3846+0x2a8>
2040801c:	00078513          	mv	a0,a5
20408020:	2ce0b0ef          	jal	ra,204132ee <fprintf>
    return -1;
20408024:	fff00793          	li	a5,-1
20408028:	03c0006f          	j	20408064 <TVMGraphExecutor_Create+0xb0>
  }

  memset(*executor, 0, sizeof(TVMGraphExecutor));
2040802c:	fd042783          	lw	a5,-48(s0)
20408030:	0007a783          	lw	a5,0(a5)
20408034:	06800613          	li	a2,104
20408038:	00000593          	li	a1,0
2040803c:	00078513          	mv	a0,a5
20408040:	5520b0ef          	jal	ra,20413592 <memset>
  // init
  return TVMGraphExecutor_Init(*executor, sym_json, module_handle, devs);
20408044:	fd042783          	lw	a5,-48(s0)
20408048:	0007a783          	lw	a5,0(a5)
2040804c:	fd442683          	lw	a3,-44(s0)
20408050:	fd842603          	lw	a2,-40(s0)
20408054:	fdc42583          	lw	a1,-36(s0)
20408058:	00078513          	mv	a0,a5
2040805c:	e81ff0ef          	jal	ra,20407edc <TVMGraphExecutor_Init>
20408060:	00050793          	mv	a5,a0
}
20408064:	00078513          	mv	a0,a5
20408068:	02c12083          	lw	ra,44(sp)
2040806c:	02812403          	lw	s0,40(sp)
20408070:	03010113          	addi	sp,sp,48
20408074:	00008067          	ret

20408078 <TVMGraphExecutor_Release>:

int TVMGraphExecutor_Release(TVMGraphExecutor** pptr) {
20408078:	fc010113          	addi	sp,sp,-64
2040807c:	02112e23          	sw	ra,60(sp)
20408080:	02812c23          	sw	s0,56(sp)
20408084:	02912a23          	sw	s1,52(sp)
20408088:	04010413          	addi	s0,sp,64
2040808c:	fca42623          	sw	a0,-52(s0)
  int status = 0;
20408090:	fe042423          	sw	zero,-24(s0)
  int32_t idx;
  TVMGraphExecutor* executor = (TVMGraphExecutor*)(*pptr);
20408094:	fcc42783          	lw	a5,-52(s0)
20408098:	0007a783          	lw	a5,0(a5)
2040809c:	fef42223          	sw	a5,-28(s0)
  for (idx = 0; idx < executor->nodes_count; ++idx) {
204080a0:	fe042623          	sw	zero,-20(s0)
204080a4:	04c0006f          	j	204080f0 <TVMGraphExecutor_Release+0x78>
    status = TVMGraphExecutorNodeRelease(&(executor->nodes[idx]));
204080a8:	fe442783          	lw	a5,-28(s0)
204080ac:	0007a483          	lw	s1,0(a5)
204080b0:	fec42783          	lw	a5,-20(s0)
204080b4:	16c00593          	li	a1,364
204080b8:	00078513          	mv	a0,a5
204080bc:	375170ef          	jal	ra,2041fc30 <__mulsi3>
204080c0:	00050793          	mv	a5,a0
204080c4:	00f487b3          	add	a5,s1,a5
204080c8:	00078513          	mv	a0,a5
204080cc:	f14fc0ef          	jal	ra,204047e0 <TVMGraphExecutorNodeRelease>
204080d0:	fea42423          	sw	a0,-24(s0)
    if (status != 0) {
204080d4:	fe842783          	lw	a5,-24(s0)
204080d8:	00078663          	beqz	a5,204080e4 <TVMGraphExecutor_Release+0x6c>
      return status;
204080dc:	fe842783          	lw	a5,-24(s0)
204080e0:	3200006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  for (idx = 0; idx < executor->nodes_count; ++idx) {
204080e4:	fec42783          	lw	a5,-20(s0)
204080e8:	00178793          	addi	a5,a5,1
204080ec:	fef42623          	sw	a5,-20(s0)
204080f0:	fe442783          	lw	a5,-28(s0)
204080f4:	0047a703          	lw	a4,4(a5)
204080f8:	fec42783          	lw	a5,-20(s0)
204080fc:	fae7e6e3          	bltu	a5,a4,204080a8 <TVMGraphExecutor_Release+0x30>
    }
  }
  DLDevice dev = {kDLCPU, 0};
20408100:	00100793          	li	a5,1
20408104:	fcf42e23          	sw	a5,-36(s0)
20408108:	fe042023          	sw	zero,-32(s0)
  status = TVMPlatformMemoryFree(executor->nodes, dev);
2040810c:	fe442783          	lw	a5,-28(s0)
20408110:	0007a783          	lw	a5,0(a5)
20408114:	fdc42583          	lw	a1,-36(s0)
20408118:	fe042603          	lw	a2,-32(s0)
2040811c:	00078513          	mv	a0,a5
20408120:	c65f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408124:	00050793          	mv	a5,a0
20408128:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
2040812c:	fe842783          	lw	a5,-24(s0)
20408130:	00078663          	beqz	a5,2040813c <TVMGraphExecutor_Release+0xc4>
    return status;
20408134:	fe842783          	lw	a5,-24(s0)
20408138:	2c80006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMGraphExecutorGraphAttr_Release(&(executor->attrs));
2040813c:	fe442783          	lw	a5,-28(s0)
20408140:	02078793          	addi	a5,a5,32
20408144:	00078513          	mv	a0,a5
20408148:	891fd0ef          	jal	ra,204059d8 <TVMGraphExecutorGraphAttr_Release>
2040814c:	fea42423          	sw	a0,-24(s0)
  if (status != 0) {
20408150:	fe842783          	lw	a5,-24(s0)
20408154:	00078663          	beqz	a5,20408160 <TVMGraphExecutor_Release+0xe8>
    return status;
20408158:	fe842783          	lw	a5,-24(s0)
2040815c:	2a40006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  for (idx = 0; idx < executor->storage_pool_count; ++idx) {
20408160:	fe042623          	sw	zero,-20(s0)
20408164:	0780006f          	j	204081dc <TVMGraphExecutor_Release+0x164>
    if (executor->storage_pool[idx].is_linked_param == 0) {
20408168:	fe442783          	lw	a5,-28(s0)
2040816c:	0507a683          	lw	a3,80(a5)
20408170:	fec42703          	lw	a4,-20(s0)
20408174:	00070793          	mv	a5,a4
20408178:	00179793          	slli	a5,a5,0x1
2040817c:	00e787b3          	add	a5,a5,a4
20408180:	00479793          	slli	a5,a5,0x4
20408184:	00f687b3          	add	a5,a3,a5
20408188:	0007c783          	lbu	a5,0(a5)
2040818c:	04079263          	bnez	a5,204081d0 <TVMGraphExecutor_Release+0x158>
      status = TVMNDArray_Release(&(executor->storage_pool[idx]).array);
20408190:	fe442783          	lw	a5,-28(s0)
20408194:	0507a683          	lw	a3,80(a5)
20408198:	fec42703          	lw	a4,-20(s0)
2040819c:	00070793          	mv	a5,a4
204081a0:	00179793          	slli	a5,a5,0x1
204081a4:	00e787b3          	add	a5,a5,a4
204081a8:	00479793          	slli	a5,a5,0x4
204081ac:	00f687b3          	add	a5,a3,a5
204081b0:	00878793          	addi	a5,a5,8
204081b4:	00078513          	mv	a0,a5
204081b8:	d50fb0ef          	jal	ra,20403708 <TVMNDArray_Release>
204081bc:	fea42423          	sw	a0,-24(s0)
      if (status != 0) {
204081c0:	fe842783          	lw	a5,-24(s0)
204081c4:	00078663          	beqz	a5,204081d0 <TVMGraphExecutor_Release+0x158>
        return status;
204081c8:	fe842783          	lw	a5,-24(s0)
204081cc:	2340006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  for (idx = 0; idx < executor->storage_pool_count; ++idx) {
204081d0:	fec42783          	lw	a5,-20(s0)
204081d4:	00178793          	addi	a5,a5,1
204081d8:	fef42623          	sw	a5,-20(s0)
204081dc:	fe442783          	lw	a5,-28(s0)
204081e0:	0547a703          	lw	a4,84(a5)
204081e4:	fec42783          	lw	a5,-20(s0)
204081e8:	f8e7e0e3          	bltu	a5,a4,20408168 <TVMGraphExecutor_Release+0xf0>
      }
    }
  }
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
204081ec:	fe042623          	sw	zero,-20(s0)
204081f0:	05c0006f          	j	2040824c <TVMGraphExecutor_Release+0x1d4>
    status = TVMPlatformMemoryFree(executor->data_entry[idx].dl_tensor.shape, dev);
204081f4:	fe442783          	lw	a5,-28(s0)
204081f8:	0587a683          	lw	a3,88(a5)
204081fc:	fec42703          	lw	a4,-20(s0)
20408200:	00070793          	mv	a5,a4
20408204:	00279793          	slli	a5,a5,0x2
20408208:	00e787b3          	add	a5,a5,a4
2040820c:	00379793          	slli	a5,a5,0x3
20408210:	00f687b3          	add	a5,a3,a5
20408214:	0147a783          	lw	a5,20(a5)
20408218:	fdc42583          	lw	a1,-36(s0)
2040821c:	fe042603          	lw	a2,-32(s0)
20408220:	00078513          	mv	a0,a5
20408224:	b61f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408228:	00050793          	mv	a5,a0
2040822c:	fef42423          	sw	a5,-24(s0)
    if (status != 0) {
20408230:	fe842783          	lw	a5,-24(s0)
20408234:	00078663          	beqz	a5,20408240 <TVMGraphExecutor_Release+0x1c8>
      return status;
20408238:	fe842783          	lw	a5,-24(s0)
2040823c:	1c40006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  for (idx = 0; idx < executor->data_entry_count; ++idx) {
20408240:	fec42783          	lw	a5,-20(s0)
20408244:	00178793          	addi	a5,a5,1
20408248:	fef42623          	sw	a5,-20(s0)
2040824c:	fe442783          	lw	a5,-28(s0)
20408250:	05c7a703          	lw	a4,92(a5)
20408254:	fec42783          	lw	a5,-20(s0)
20408258:	f8e7eee3          	bltu	a5,a4,204081f4 <TVMGraphExecutor_Release+0x17c>
    }
  }
  status = TVMPlatformMemoryFree(executor->input_nodes, dev);
2040825c:	fe442783          	lw	a5,-28(s0)
20408260:	0087a783          	lw	a5,8(a5)
20408264:	fdc42583          	lw	a1,-36(s0)
20408268:	fe042603          	lw	a2,-32(s0)
2040826c:	00078513          	mv	a0,a5
20408270:	b15f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408274:	00050793          	mv	a5,a0
20408278:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
2040827c:	fe842783          	lw	a5,-24(s0)
20408280:	00078663          	beqz	a5,2040828c <TVMGraphExecutor_Release+0x214>
    return status;
20408284:	fe842783          	lw	a5,-24(s0)
20408288:	1780006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->node_row_ptr, dev);
2040828c:	fe442783          	lw	a5,-28(s0)
20408290:	0107a783          	lw	a5,16(a5)
20408294:	fdc42583          	lw	a1,-36(s0)
20408298:	fe042603          	lw	a2,-32(s0)
2040829c:	00078513          	mv	a0,a5
204082a0:	ae5f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
204082a4:	00050793          	mv	a5,a0
204082a8:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
204082ac:	fe842783          	lw	a5,-24(s0)
204082b0:	00078663          	beqz	a5,204082bc <TVMGraphExecutor_Release+0x244>
    return status;
204082b4:	fe842783          	lw	a5,-24(s0)
204082b8:	1480006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->outputs, dev);
204082bc:	fe442783          	lw	a5,-28(s0)
204082c0:	0187a783          	lw	a5,24(a5)
204082c4:	fdc42583          	lw	a1,-36(s0)
204082c8:	fe042603          	lw	a2,-32(s0)
204082cc:	00078513          	mv	a0,a5
204082d0:	ab5f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
204082d4:	00050793          	mv	a5,a0
204082d8:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
204082dc:	fe842783          	lw	a5,-24(s0)
204082e0:	00078663          	beqz	a5,204082ec <TVMGraphExecutor_Release+0x274>
    return status;
204082e4:	fe842783          	lw	a5,-24(s0)
204082e8:	1180006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->storage_pool, dev);
204082ec:	fe442783          	lw	a5,-28(s0)
204082f0:	0507a783          	lw	a5,80(a5)
204082f4:	fdc42583          	lw	a1,-36(s0)
204082f8:	fe042603          	lw	a2,-32(s0)
204082fc:	00078513          	mv	a0,a5
20408300:	a85f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408304:	00050793          	mv	a5,a0
20408308:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
2040830c:	fe842783          	lw	a5,-24(s0)
20408310:	00078663          	beqz	a5,2040831c <TVMGraphExecutor_Release+0x2a4>
    return status;
20408314:	fe842783          	lw	a5,-24(s0)
20408318:	0e80006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->data_entry, dev);
2040831c:	fe442783          	lw	a5,-28(s0)
20408320:	0587a783          	lw	a5,88(a5)
20408324:	fdc42583          	lw	a1,-36(s0)
20408328:	fe042603          	lw	a2,-32(s0)
2040832c:	00078513          	mv	a0,a5
20408330:	a55f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408334:	00050793          	mv	a5,a0
20408338:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
2040833c:	fe842783          	lw	a5,-24(s0)
20408340:	00078663          	beqz	a5,2040834c <TVMGraphExecutor_Release+0x2d4>
    return status;
20408344:	fe842783          	lw	a5,-24(s0)
20408348:	0b80006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(executor->op_execs, dev);
2040834c:	fe442783          	lw	a5,-28(s0)
20408350:	0607a783          	lw	a5,96(a5)
20408354:	fdc42583          	lw	a1,-36(s0)
20408358:	fe042603          	lw	a2,-32(s0)
2040835c:	00078513          	mv	a0,a5
20408360:	a25f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408364:	00050793          	mv	a5,a0
20408368:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
2040836c:	fe842783          	lw	a5,-24(s0)
20408370:	00078663          	beqz	a5,2040837c <TVMGraphExecutor_Release+0x304>
    return status;
20408374:	fe842783          	lw	a5,-24(s0)
20408378:	0880006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }
  status = TVMPlatformMemoryFree(*pptr, dev);
2040837c:	fcc42783          	lw	a5,-52(s0)
20408380:	0007a783          	lw	a5,0(a5)
20408384:	fdc42583          	lw	a1,-36(s0)
20408388:	fe042603          	lw	a2,-32(s0)
2040838c:	00078513          	mv	a0,a5
20408390:	9f5f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20408394:	00050793          	mv	a5,a0
20408398:	fef42423          	sw	a5,-24(s0)
  if (status != 0) {
2040839c:	fe842783          	lw	a5,-24(s0)
204083a0:	00078663          	beqz	a5,204083ac <TVMGraphExecutor_Release+0x334>
    return status;
204083a4:	fe842783          	lw	a5,-24(s0)
204083a8:	0580006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
  }

  if (g_fexecs) {
204083ac:	5fbf9797          	auipc	a5,0x5fbf9
204083b0:	b4878793          	addi	a5,a5,-1208 # 80000ef4 <g_fexecs>
204083b4:	0007a783          	lw	a5,0(a5)
204083b8:	04078263          	beqz	a5,204083fc <TVMGraphExecutor_Release+0x384>
    status = TVMPlatformMemoryFree(g_fexecs, dev);
204083bc:	5fbf9797          	auipc	a5,0x5fbf9
204083c0:	b3878793          	addi	a5,a5,-1224 # 80000ef4 <g_fexecs>
204083c4:	0007a783          	lw	a5,0(a5)
204083c8:	fdc42583          	lw	a1,-36(s0)
204083cc:	fe042603          	lw	a2,-32(s0)
204083d0:	00078513          	mv	a0,a5
204083d4:	9b1f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
204083d8:	00050793          	mv	a5,a0
204083dc:	fef42423          	sw	a5,-24(s0)
    g_fexecs = 0;
204083e0:	5fbf9797          	auipc	a5,0x5fbf9
204083e4:	b1478793          	addi	a5,a5,-1260 # 80000ef4 <g_fexecs>
204083e8:	0007a023          	sw	zero,0(a5)
    if (status != 0) {
204083ec:	fe842783          	lw	a5,-24(s0)
204083f0:	00078663          	beqz	a5,204083fc <TVMGraphExecutor_Release+0x384>
      return status;
204083f4:	fe842783          	lw	a5,-24(s0)
204083f8:	0080006f          	j	20408400 <TVMGraphExecutor_Release+0x388>
    }
  }

  return 0;
204083fc:	00000793          	li	a5,0
}
20408400:	00078513          	mv	a0,a5
20408404:	03c12083          	lw	ra,60(sp)
20408408:	03812403          	lw	s0,56(sp)
2040840c:	03412483          	lw	s1,52(sp)
20408410:	04010113          	addi	sp,sp,64
20408414:	00008067          	ret

20408418 <JSONNodeEntryLoad>:
  uint32_t index;
  uint32_t version;
  void (*Load)(struct JSONNodeEntry* entry, JSONReader* reader);
} JSONNodeEntry;

void JSONNodeEntryLoad(JSONNodeEntry* entry, JSONReader* reader) {
20408418:	fe010113          	addi	sp,sp,-32
2040841c:	00112e23          	sw	ra,28(sp)
20408420:	00812c23          	sw	s0,24(sp)
20408424:	02010413          	addi	s0,sp,32
20408428:	fea42623          	sw	a0,-20(s0)
2040842c:	feb42423          	sw	a1,-24(s0)
  reader->BeginArray(reader);
20408430:	fe842783          	lw	a5,-24(s0)
20408434:	0307a783          	lw	a5,48(a5)
20408438:	fe842503          	lw	a0,-24(s0)
2040843c:	000780e7          	jalr	a5
  if (reader->NextArrayItem(reader)) {
20408440:	fe842783          	lw	a5,-24(s0)
20408444:	03c7a783          	lw	a5,60(a5)
20408448:	fe842503          	lw	a0,-24(s0)
2040844c:	000780e7          	jalr	a5
20408450:	00050793          	mv	a5,a0
20408454:	02078663          	beqz	a5,20408480 <JSONNodeEntryLoad+0x68>
    fprintf(stderr, "invalid json format\n");
20408458:	5fbf8797          	auipc	a5,0x5fbf8
2040845c:	5e078793          	addi	a5,a5,1504 # 80000a38 <_impure_ptr>
20408460:	0007a783          	lw	a5,0(a5)
20408464:	00c7a783          	lw	a5,12(a5)
20408468:	00078693          	mv	a3,a5
2040846c:	01400613          	li	a2,20
20408470:	00100593          	li	a1,1
20408474:	00019517          	auipc	a0,0x19
20408478:	86450513          	addi	a0,a0,-1948 # 20420cd8 <__func__.3846+0xaf8>
2040847c:	70d0a0ef          	jal	ra,20413388 <fwrite>
  }
  reader->ReadUnsignedInteger(reader, &(entry->node_id));
20408480:	fe842783          	lw	a5,-24(s0)
20408484:	0247a703          	lw	a4,36(a5)
20408488:	fec42783          	lw	a5,-20(s0)
2040848c:	00078593          	mv	a1,a5
20408490:	fe842503          	lw	a0,-24(s0)
20408494:	000700e7          	jalr	a4
  if (reader->NextArrayItem(reader)) {
20408498:	fe842783          	lw	a5,-24(s0)
2040849c:	03c7a783          	lw	a5,60(a5)
204084a0:	fe842503          	lw	a0,-24(s0)
204084a4:	000780e7          	jalr	a5
204084a8:	00050793          	mv	a5,a0
204084ac:	02078663          	beqz	a5,204084d8 <JSONNodeEntryLoad+0xc0>
    fprintf(stderr, "invalid json format\n");
204084b0:	5fbf8797          	auipc	a5,0x5fbf8
204084b4:	58878793          	addi	a5,a5,1416 # 80000a38 <_impure_ptr>
204084b8:	0007a783          	lw	a5,0(a5)
204084bc:	00c7a783          	lw	a5,12(a5)
204084c0:	00078693          	mv	a3,a5
204084c4:	01400613          	li	a2,20
204084c8:	00100593          	li	a1,1
204084cc:	00019517          	auipc	a0,0x19
204084d0:	80c50513          	addi	a0,a0,-2036 # 20420cd8 <__func__.3846+0xaf8>
204084d4:	6b50a0ef          	jal	ra,20413388 <fwrite>
  }
  reader->ReadUnsignedInteger(reader, &(entry->index));
204084d8:	fe842783          	lw	a5,-24(s0)
204084dc:	0247a703          	lw	a4,36(a5)
204084e0:	fec42783          	lw	a5,-20(s0)
204084e4:	00478793          	addi	a5,a5,4
204084e8:	00078593          	mv	a1,a5
204084ec:	fe842503          	lw	a0,-24(s0)
204084f0:	000700e7          	jalr	a4
  if (reader->NextArrayItem(reader)) {
204084f4:	fe842783          	lw	a5,-24(s0)
204084f8:	03c7a783          	lw	a5,60(a5)
204084fc:	fe842503          	lw	a0,-24(s0)
20408500:	000780e7          	jalr	a5
20408504:	00050793          	mv	a5,a0
20408508:	06078263          	beqz	a5,2040856c <JSONNodeEntryLoad+0x154>
    reader->ReadUnsignedInteger(reader, &(entry->version));
2040850c:	fe842783          	lw	a5,-24(s0)
20408510:	0247a703          	lw	a4,36(a5)
20408514:	fec42783          	lw	a5,-20(s0)
20408518:	00878793          	addi	a5,a5,8
2040851c:	00078593          	mv	a1,a5
20408520:	fe842503          	lw	a0,-24(s0)
20408524:	000700e7          	jalr	a4
    if (!reader->NextArrayItem(reader)) {
20408528:	fe842783          	lw	a5,-24(s0)
2040852c:	03c7a783          	lw	a5,60(a5)
20408530:	fe842503          	lw	a0,-24(s0)
20408534:	000780e7          	jalr	a5
20408538:	00050793          	mv	a5,a0
2040853c:	02079c63          	bnez	a5,20408574 <JSONNodeEntryLoad+0x15c>
      fprintf(stderr, "invalid json format\n");
20408540:	5fbf8797          	auipc	a5,0x5fbf8
20408544:	4f878793          	addi	a5,a5,1272 # 80000a38 <_impure_ptr>
20408548:	0007a783          	lw	a5,0(a5)
2040854c:	00c7a783          	lw	a5,12(a5)
20408550:	00078693          	mv	a3,a5
20408554:	01400613          	li	a2,20
20408558:	00100593          	li	a1,1
2040855c:	00018517          	auipc	a0,0x18
20408560:	77c50513          	addi	a0,a0,1916 # 20420cd8 <__func__.3846+0xaf8>
20408564:	6250a0ef          	jal	ra,20413388 <fwrite>
    }
  } else {
    entry->version = 0;
  }
}
20408568:	00c0006f          	j	20408574 <JSONNodeEntryLoad+0x15c>
    entry->version = 0;
2040856c:	fec42783          	lw	a5,-20(s0)
20408570:	0007a423          	sw	zero,8(a5)
}
20408574:	00000013          	nop
20408578:	01c12083          	lw	ra,28(sp)
2040857c:	01812403          	lw	s0,24(sp)
20408580:	02010113          	addi	sp,sp,32
20408584:	00008067          	ret

20408588 <SeqPush>:

// implementation of Seq class

void SeqPush(Seq* seq, uint32_t src) {
20408588:	fe010113          	addi	sp,sp,-32
2040858c:	00112e23          	sw	ra,28(sp)
20408590:	00812c23          	sw	s0,24(sp)
20408594:	02010413          	addi	s0,sp,32
20408598:	fea42623          	sw	a0,-20(s0)
2040859c:	feb42423          	sw	a1,-24(s0)
  if (seq->size >= seq->allocated) {
204085a0:	fec42783          	lw	a5,-20(s0)
204085a4:	0107a783          	lw	a5,16(a5)
204085a8:	00078693          	mv	a3,a5
204085ac:	00000713          	li	a4,0
204085b0:	fec42783          	lw	a5,-20(s0)
204085b4:	00c7a803          	lw	a6,12(a5)
204085b8:	0087a783          	lw	a5,8(a5)
204085bc:	00080593          	mv	a1,a6
204085c0:	00070613          	mv	a2,a4
204085c4:	02b66463          	bltu	a2,a1,204085ec <SeqPush+0x64>
204085c8:	00080593          	mv	a1,a6
204085cc:	00070613          	mv	a2,a4
204085d0:	00c59863          	bne	a1,a2,204085e0 <SeqPush+0x58>
204085d4:	00078613          	mv	a2,a5
204085d8:	00068793          	mv	a5,a3
204085dc:	00c7e863          	bltu	a5,a2,204085ec <SeqPush+0x64>
    printf("seq too large.\n");
204085e0:	00018517          	auipc	a0,0x18
204085e4:	71050513          	addi	a0,a0,1808 # 20420cf0 <__func__.3846+0xb10>
204085e8:	31c0a0ef          	jal	ra,20412904 <__wrap_puts>
  }
  seq->data[seq->size] = src;
204085ec:	fec42783          	lw	a5,-20(s0)
204085f0:	0007a703          	lw	a4,0(a5)
204085f4:	fec42783          	lw	a5,-20(s0)
204085f8:	0107a783          	lw	a5,16(a5)
204085fc:	00279793          	slli	a5,a5,0x2
20408600:	00f707b3          	add	a5,a4,a5
20408604:	fe842703          	lw	a4,-24(s0)
20408608:	00e7a023          	sw	a4,0(a5)
  seq->size += 1;
2040860c:	fec42783          	lw	a5,-20(s0)
20408610:	0107a783          	lw	a5,16(a5)
20408614:	00178713          	addi	a4,a5,1
20408618:	fec42783          	lw	a5,-20(s0)
2040861c:	00e7a823          	sw	a4,16(a5)
}
20408620:	00000013          	nop
20408624:	01c12083          	lw	ra,28(sp)
20408628:	01812403          	lw	s0,24(sp)
2040862c:	02010113          	addi	sp,sp,32
20408630:	00008067          	ret

20408634 <SeqBack>:

uint32_t* SeqBack(Seq* seq) {
20408634:	fe010113          	addi	sp,sp,-32
20408638:	00112e23          	sw	ra,28(sp)
2040863c:	00812c23          	sw	s0,24(sp)
20408640:	02010413          	addi	s0,sp,32
20408644:	fea42623          	sw	a0,-20(s0)
  if (seq->size >= seq->allocated) {
20408648:	fec42783          	lw	a5,-20(s0)
2040864c:	0107a783          	lw	a5,16(a5)
20408650:	00078693          	mv	a3,a5
20408654:	00000713          	li	a4,0
20408658:	fec42783          	lw	a5,-20(s0)
2040865c:	00c7a803          	lw	a6,12(a5)
20408660:	0087a783          	lw	a5,8(a5)
20408664:	00080593          	mv	a1,a6
20408668:	00070613          	mv	a2,a4
2040866c:	02b66463          	bltu	a2,a1,20408694 <SeqBack+0x60>
20408670:	00080593          	mv	a1,a6
20408674:	00070613          	mv	a2,a4
20408678:	00c59863          	bne	a1,a2,20408688 <SeqBack+0x54>
2040867c:	00078613          	mv	a2,a5
20408680:	00068793          	mv	a5,a3
20408684:	00c7e863          	bltu	a5,a2,20408694 <SeqBack+0x60>
    printf("seq too large.\n");
20408688:	00018517          	auipc	a0,0x18
2040868c:	66850513          	addi	a0,a0,1640 # 20420cf0 <__func__.3846+0xb10>
20408690:	2740a0ef          	jal	ra,20412904 <__wrap_puts>
  }
  return seq->data + (seq->size - 1);
20408694:	fec42783          	lw	a5,-20(s0)
20408698:	0007a703          	lw	a4,0(a5)
2040869c:	fec42783          	lw	a5,-20(s0)
204086a0:	0107a683          	lw	a3,16(a5)
204086a4:	400007b7          	lui	a5,0x40000
204086a8:	fff78793          	addi	a5,a5,-1 # 3fffffff <__fini_array_end+0x1fbdd743>
204086ac:	00f687b3          	add	a5,a3,a5
204086b0:	00279793          	slli	a5,a5,0x2
204086b4:	00f707b3          	add	a5,a4,a5
}
204086b8:	00078513          	mv	a0,a5
204086bc:	01c12083          	lw	ra,28(sp)
204086c0:	01812403          	lw	s0,24(sp)
204086c4:	02010113          	addi	sp,sp,32
204086c8:	00008067          	ret

204086cc <SeqPop>:

void SeqPop(Seq* seq) {
204086cc:	fe010113          	addi	sp,sp,-32
204086d0:	00112e23          	sw	ra,28(sp)
204086d4:	00812c23          	sw	s0,24(sp)
204086d8:	02010413          	addi	s0,sp,32
204086dc:	fea42623          	sw	a0,-20(s0)
  if (seq->size >= seq->allocated) {
204086e0:	fec42783          	lw	a5,-20(s0)
204086e4:	0107a783          	lw	a5,16(a5)
204086e8:	00078693          	mv	a3,a5
204086ec:	00000713          	li	a4,0
204086f0:	fec42783          	lw	a5,-20(s0)
204086f4:	00c7a803          	lw	a6,12(a5)
204086f8:	0087a783          	lw	a5,8(a5)
204086fc:	00080593          	mv	a1,a6
20408700:	00070613          	mv	a2,a4
20408704:	02b66463          	bltu	a2,a1,2040872c <SeqPop+0x60>
20408708:	00080593          	mv	a1,a6
2040870c:	00070613          	mv	a2,a4
20408710:	00c59863          	bne	a1,a2,20408720 <SeqPop+0x54>
20408714:	00078613          	mv	a2,a5
20408718:	00068793          	mv	a5,a3
2040871c:	00c7e863          	bltu	a5,a2,2040872c <SeqPop+0x60>
    printf("seq size is too large.\n");
20408720:	00018517          	auipc	a0,0x18
20408724:	5e050513          	addi	a0,a0,1504 # 20420d00 <__func__.3846+0xb20>
20408728:	1dc0a0ef          	jal	ra,20412904 <__wrap_puts>
  }
  if (seq->size == 0) {
2040872c:	fec42783          	lw	a5,-20(s0)
20408730:	0107a783          	lw	a5,16(a5)
20408734:	00079863          	bnez	a5,20408744 <SeqPop+0x78>
    printf("seq size is too small.\n");
20408738:	00018517          	auipc	a0,0x18
2040873c:	5e050513          	addi	a0,a0,1504 # 20420d18 <__func__.3846+0xb38>
20408740:	1c40a0ef          	jal	ra,20412904 <__wrap_puts>
  }
  seq->size -= 1;
20408744:	fec42783          	lw	a5,-20(s0)
20408748:	0107a783          	lw	a5,16(a5)
2040874c:	fff78713          	addi	a4,a5,-1
20408750:	fec42783          	lw	a5,-20(s0)
20408754:	00e7a823          	sw	a4,16(a5)
}
20408758:	00000013          	nop
2040875c:	01c12083          	lw	ra,28(sp)
20408760:	01812403          	lw	s0,24(sp)
20408764:	02010113          	addi	sp,sp,32
20408768:	00008067          	ret

2040876c <SeqCreate>:

tvm_crt_error_t SeqCreate(uint64_t len, Seq** seq) {
2040876c:	fd010113          	addi	sp,sp,-48
20408770:	02112623          	sw	ra,44(sp)
20408774:	02812423          	sw	s0,40(sp)
20408778:	03010413          	addi	s0,sp,48
2040877c:	fca42c23          	sw	a0,-40(s0)
20408780:	fcb42e23          	sw	a1,-36(s0)
20408784:	fcc42a23          	sw	a2,-44(s0)
  DLDevice dev = {kDLCPU, 0};
20408788:	00100793          	li	a5,1
2040878c:	fef42223          	sw	a5,-28(s0)
20408790:	fe042423          	sw	zero,-24(s0)
  tvm_crt_error_t err = TVMPlatformMemoryAllocate(sizeof(Seq), dev, (void**)seq);
20408794:	fd442683          	lw	a3,-44(s0)
20408798:	fe442583          	lw	a1,-28(s0)
2040879c:	fe842603          	lw	a2,-24(s0)
204087a0:	02000513          	li	a0,32
204087a4:	d7cf80ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
204087a8:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
204087ac:	fec42783          	lw	a5,-20(s0)
204087b0:	00078663          	beqz	a5,204087bc <SeqCreate+0x50>
    return err;
204087b4:	fec42783          	lw	a5,-20(s0)
204087b8:	0ac0006f          	j	20408864 <SeqCreate+0xf8>
  }
  memset(*seq, 0, sizeof(Seq));
204087bc:	fd442783          	lw	a5,-44(s0)
204087c0:	0007a783          	lw	a5,0(a5)
204087c4:	02000613          	li	a2,32
204087c8:	00000593          	li	a1,0
204087cc:	00078513          	mv	a0,a5
204087d0:	5c30a0ef          	jal	ra,20413592 <memset>
  (*seq)->allocated = len;
204087d4:	fd442783          	lw	a5,-44(s0)
204087d8:	0007a703          	lw	a4,0(a5)
204087dc:	fd842783          	lw	a5,-40(s0)
204087e0:	fdc42803          	lw	a6,-36(s0)
204087e4:	00f72423          	sw	a5,8(a4)
204087e8:	01072623          	sw	a6,12(a4)

  err = TVMPlatformMemoryAllocate(sizeof(uint32_t) * len, dev, (void**)&(*seq)->data);
204087ec:	fd842783          	lw	a5,-40(s0)
204087f0:	00279713          	slli	a4,a5,0x2
204087f4:	fd442783          	lw	a5,-44(s0)
204087f8:	0007a783          	lw	a5,0(a5)
204087fc:	00078693          	mv	a3,a5
20408800:	fe442583          	lw	a1,-28(s0)
20408804:	fe842603          	lw	a2,-24(s0)
20408808:	00070513          	mv	a0,a4
2040880c:	d14f80ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20408810:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20408814:	fec42783          	lw	a5,-20(s0)
20408818:	00078663          	beqz	a5,20408824 <SeqCreate+0xb8>
    return err;
2040881c:	fec42783          	lw	a5,-20(s0)
20408820:	0440006f          	j	20408864 <SeqCreate+0xf8>
  }
  (*seq)->push_back = SeqPush;
20408824:	fd442783          	lw	a5,-44(s0)
20408828:	0007a783          	lw	a5,0(a5)
2040882c:	00000717          	auipc	a4,0x0
20408830:	d5c70713          	addi	a4,a4,-676 # 20408588 <SeqPush>
20408834:	00e7aa23          	sw	a4,20(a5)
  (*seq)->back = SeqBack;
20408838:	fd442783          	lw	a5,-44(s0)
2040883c:	0007a783          	lw	a5,0(a5)
20408840:	00000717          	auipc	a4,0x0
20408844:	df470713          	addi	a4,a4,-524 # 20408634 <SeqBack>
20408848:	00e7ac23          	sw	a4,24(a5)
  (*seq)->pop_back = SeqPop;
2040884c:	fd442783          	lw	a5,-44(s0)
20408850:	0007a783          	lw	a5,0(a5)
20408854:	00000717          	auipc	a4,0x0
20408858:	e7870713          	addi	a4,a4,-392 # 204086cc <SeqPop>
2040885c:	00e7ae23          	sw	a4,28(a5)
  return err;
20408860:	fec42783          	lw	a5,-20(s0)
}
20408864:	00078513          	mv	a0,a5
20408868:	02c12083          	lw	ra,44(sp)
2040886c:	02812403          	lw	s0,40(sp)
20408870:	03010113          	addi	sp,sp,48
20408874:	00008067          	ret

20408878 <SeqRelease>:

tvm_crt_error_t SeqRelease(Seq* seq) {
20408878:	fd010113          	addi	sp,sp,-48
2040887c:	02112623          	sw	ra,44(sp)
20408880:	02812423          	sw	s0,40(sp)
20408884:	03010413          	addi	s0,sp,48
20408888:	fca42e23          	sw	a0,-36(s0)
  DLDevice dev = {kDLCPU, 0};
2040888c:	00100793          	li	a5,1
20408890:	fef42223          	sw	a5,-28(s0)
20408894:	fe042423          	sw	zero,-24(s0)
  tvm_crt_error_t err = TVMPlatformMemoryFree(seq->data, dev);
20408898:	fdc42783          	lw	a5,-36(s0)
2040889c:	0007a783          	lw	a5,0(a5)
204088a0:	fe442583          	lw	a1,-28(s0)
204088a4:	fe842603          	lw	a2,-24(s0)
204088a8:	00078513          	mv	a0,a5
204088ac:	cd8f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
204088b0:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
204088b4:	fec42783          	lw	a5,-20(s0)
204088b8:	00078663          	beqz	a5,204088c4 <SeqRelease+0x4c>
    return err;
204088bc:	fec42783          	lw	a5,-20(s0)
204088c0:	0180006f          	j	204088d8 <SeqRelease+0x60>
  }
  return TVMPlatformMemoryFree(seq, dev);
204088c4:	fe442583          	lw	a1,-28(s0)
204088c8:	fe842603          	lw	a2,-24(s0)
204088cc:	fdc42503          	lw	a0,-36(s0)
204088d0:	cb4f80ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
204088d4:	00050793          	mv	a5,a0
}
204088d8:	00078513          	mv	a0,a5
204088dc:	02c12083          	lw	ra,44(sp)
204088e0:	02812403          	lw	s0,40(sp)
204088e4:	03010113          	addi	sp,sp,48
204088e8:	00008067          	ret

204088ec <JSONReader_NextChar>:

/*!
 * \brief Takes the next char from the input source.
 * \return the next character.
 */
char JSONReader_NextChar(JSONReader* reader) {
204088ec:	fd010113          	addi	sp,sp,-48
204088f0:	02812623          	sw	s0,44(sp)
204088f4:	03010413          	addi	s0,sp,48
204088f8:	fca42e23          	sw	a0,-36(s0)
  char ch = reader->isptr[0];
204088fc:	fdc42783          	lw	a5,-36(s0)
20408900:	0047a783          	lw	a5,4(a5)
20408904:	0007c783          	lbu	a5,0(a5)
20408908:	fef407a3          	sb	a5,-17(s0)
  reader->isptr += 1;
2040890c:	fdc42783          	lw	a5,-36(s0)
20408910:	0047a783          	lw	a5,4(a5)
20408914:	00178713          	addi	a4,a5,1
20408918:	fdc42783          	lw	a5,-36(s0)
2040891c:	00e7a223          	sw	a4,4(a5)
  return ch;
20408920:	fef44783          	lbu	a5,-17(s0)
}
20408924:	00078513          	mv	a0,a5
20408928:	02c12403          	lw	s0,44(sp)
2040892c:	03010113          	addi	sp,sp,48
20408930:	00008067          	ret

20408934 <JSONReader_PeekNextChar>:

/*!
 * \brief Returns the next char from the input source.
 * \return the next character.
 */
char JSONReader_PeekNextChar(JSONReader* reader) { return reader->isptr[0]; }
20408934:	fe010113          	addi	sp,sp,-32
20408938:	00812e23          	sw	s0,28(sp)
2040893c:	02010413          	addi	s0,sp,32
20408940:	fea42623          	sw	a0,-20(s0)
20408944:	fec42783          	lw	a5,-20(s0)
20408948:	0047a783          	lw	a5,4(a5)
2040894c:	0007c783          	lbu	a5,0(a5)
20408950:	00078513          	mv	a0,a5
20408954:	01c12403          	lw	s0,28(sp)
20408958:	02010113          	addi	sp,sp,32
2040895c:	00008067          	ret

20408960 <JSONReader_NextNonSpace>:

/*!
 * \brief Read next nonspace character.
 * \return the next nonspace character.
 */
char JSONReader_NextNonSpace(JSONReader* reader) {
20408960:	fd010113          	addi	sp,sp,-48
20408964:	02112623          	sw	ra,44(sp)
20408968:	02812423          	sw	s0,40(sp)
2040896c:	03010413          	addi	s0,sp,48
20408970:	fca42e23          	sw	a0,-36(s0)
  int ch;
  do {
    ch = reader->NextChar(reader);
20408974:	fdc42783          	lw	a5,-36(s0)
20408978:	0147a783          	lw	a5,20(a5)
2040897c:	fdc42503          	lw	a0,-36(s0)
20408980:	000780e7          	jalr	a5
20408984:	00050793          	mv	a5,a0
20408988:	fef42623          	sw	a5,-20(s0)
    if (ch == '\n') {
2040898c:	fec42703          	lw	a4,-20(s0)
20408990:	00a00793          	li	a5,10
20408994:	00f71c63          	bne	a4,a5,204089ac <JSONReader_NextNonSpace+0x4c>
      ++(reader->line_count_n_);
20408998:	fdc42783          	lw	a5,-36(s0)
2040899c:	00c7a783          	lw	a5,12(a5)
204089a0:	00178713          	addi	a4,a5,1
204089a4:	fdc42783          	lw	a5,-36(s0)
204089a8:	00e7a623          	sw	a4,12(a5)
    }
    if (ch == '\r') {
204089ac:	fec42703          	lw	a4,-20(s0)
204089b0:	00d00793          	li	a5,13
204089b4:	00f71c63          	bne	a4,a5,204089cc <JSONReader_NextNonSpace+0x6c>
      ++(reader->line_count_r_);
204089b8:	fdc42783          	lw	a5,-36(s0)
204089bc:	0087a783          	lw	a5,8(a5)
204089c0:	00178713          	addi	a4,a5,1
204089c4:	fdc42783          	lw	a5,-36(s0)
204089c8:	00e7a423          	sw	a4,8(a5)
    }
  } while (isspace(ch));
204089cc:	2990a0ef          	jal	ra,20413464 <__locale_ctype_ptr>
204089d0:	00050713          	mv	a4,a0
204089d4:	fec42783          	lw	a5,-20(s0)
204089d8:	00178793          	addi	a5,a5,1
204089dc:	00f707b3          	add	a5,a4,a5
204089e0:	0007c783          	lbu	a5,0(a5)
204089e4:	0087f793          	andi	a5,a5,8
204089e8:	f80796e3          	bnez	a5,20408974 <JSONReader_NextNonSpace+0x14>
  return ch;
204089ec:	fec42783          	lw	a5,-20(s0)
204089f0:	0ff7f793          	andi	a5,a5,255
}
204089f4:	00078513          	mv	a0,a5
204089f8:	02c12083          	lw	ra,44(sp)
204089fc:	02812403          	lw	s0,40(sp)
20408a00:	03010113          	addi	sp,sp,48
20408a04:	00008067          	ret

20408a08 <JSONReader_PeekNextNonSpace>:

/*!
 * \brief Read just before next nonspace but not read that.
 * \return the next nonspace character.
 */
char JSONReader_PeekNextNonSpace(JSONReader* reader) {
20408a08:	fd010113          	addi	sp,sp,-48
20408a0c:	02112623          	sw	ra,44(sp)
20408a10:	02812423          	sw	s0,40(sp)
20408a14:	03010413          	addi	s0,sp,48
20408a18:	fca42e23          	sw	a0,-36(s0)
  int ch;
  while (1) {
    ch = reader->PeekNextChar(reader);
20408a1c:	fdc42783          	lw	a5,-36(s0)
20408a20:	01c7a783          	lw	a5,28(a5)
20408a24:	fdc42503          	lw	a0,-36(s0)
20408a28:	000780e7          	jalr	a5
20408a2c:	00050793          	mv	a5,a0
20408a30:	fef42623          	sw	a5,-20(s0)
    if (ch == '\n') {
20408a34:	fec42703          	lw	a4,-20(s0)
20408a38:	00a00793          	li	a5,10
20408a3c:	00f71c63          	bne	a4,a5,20408a54 <JSONReader_PeekNextNonSpace+0x4c>
      ++(reader->line_count_n_);
20408a40:	fdc42783          	lw	a5,-36(s0)
20408a44:	00c7a783          	lw	a5,12(a5)
20408a48:	00178713          	addi	a4,a5,1
20408a4c:	fdc42783          	lw	a5,-36(s0)
20408a50:	00e7a623          	sw	a4,12(a5)
    }
    if (ch == '\r') {
20408a54:	fec42703          	lw	a4,-20(s0)
20408a58:	00d00793          	li	a5,13
20408a5c:	00f71c63          	bne	a4,a5,20408a74 <JSONReader_PeekNextNonSpace+0x6c>
      ++(reader->line_count_r_);
20408a60:	fdc42783          	lw	a5,-36(s0)
20408a64:	0087a783          	lw	a5,8(a5)
20408a68:	00178713          	addi	a4,a5,1
20408a6c:	fdc42783          	lw	a5,-36(s0)
20408a70:	00e7a423          	sw	a4,8(a5)
    }
    if (!isspace(ch)) break;
20408a74:	1f10a0ef          	jal	ra,20413464 <__locale_ctype_ptr>
20408a78:	00050713          	mv	a4,a0
20408a7c:	fec42783          	lw	a5,-20(s0)
20408a80:	00178793          	addi	a5,a5,1
20408a84:	00f707b3          	add	a5,a4,a5
20408a88:	0007c783          	lbu	a5,0(a5)
20408a8c:	0087f793          	andi	a5,a5,8
20408a90:	00078c63          	beqz	a5,20408aa8 <JSONReader_PeekNextNonSpace+0xa0>
    reader->NextChar(reader);
20408a94:	fdc42783          	lw	a5,-36(s0)
20408a98:	0147a783          	lw	a5,20(a5)
20408a9c:	fdc42503          	lw	a0,-36(s0)
20408aa0:	000780e7          	jalr	a5
    ch = reader->PeekNextChar(reader);
20408aa4:	f79ff06f          	j	20408a1c <JSONReader_PeekNextNonSpace+0x14>
    if (!isspace(ch)) break;
20408aa8:	00000013          	nop
  }
  return ch;
20408aac:	fec42783          	lw	a5,-20(s0)
20408ab0:	0ff7f793          	andi	a5,a5,255
}
20408ab4:	00078513          	mv	a0,a5
20408ab8:	02c12083          	lw	ra,44(sp)
20408abc:	02812403          	lw	s0,40(sp)
20408ac0:	03010113          	addi	sp,sp,48
20408ac4:	00008067          	ret

20408ac8 <JSONReader_ReadString>:
 * \param out_str the output string. NULL to merely consume input and discard it.
 * \param out_str_size Number of bytes available to write starting from out_str. Includes
 *      terminating \0.
 * \throw tvm::Error when next token is not string
 */
int JSONReader_ReadString(JSONReader* reader, char* out_str, size_t out_str_size) {
20408ac8:	fd010113          	addi	sp,sp,-48
20408acc:	02112623          	sw	ra,44(sp)
20408ad0:	02812423          	sw	s0,40(sp)
20408ad4:	03010413          	addi	s0,sp,48
20408ad8:	fca42e23          	sw	a0,-36(s0)
20408adc:	fcb42c23          	sw	a1,-40(s0)
20408ae0:	fcc42a23          	sw	a2,-44(s0)
  int status = 0;
20408ae4:	fe042423          	sw	zero,-24(s0)
  char ch = reader->NextNonSpace(reader);
20408ae8:	fdc42783          	lw	a5,-36(s0)
20408aec:	0187a783          	lw	a5,24(a5)
20408af0:	fdc42503          	lw	a0,-36(s0)
20408af4:	000780e7          	jalr	a5
20408af8:	00050793          	mv	a5,a0
20408afc:	fef403a3          	sb	a5,-25(s0)
  size_t output_counter = 0;
20408b00:	fe042623          	sw	zero,-20(s0)
  while (output_counter < out_str_size || out_str == NULL) {
20408b04:	1fc0006f          	j	20408d00 <JSONReader_ReadString+0x238>
    ch = reader->NextChar(reader);
20408b08:	fdc42783          	lw	a5,-36(s0)
20408b0c:	0147a783          	lw	a5,20(a5)
20408b10:	fdc42503          	lw	a0,-36(s0)
20408b14:	000780e7          	jalr	a5
20408b18:	00050793          	mv	a5,a0
20408b1c:	fef403a3          	sb	a5,-25(s0)
    if (ch == '\\') {
20408b20:	fe744703          	lbu	a4,-25(s0)
20408b24:	05c00793          	li	a5,92
20408b28:	12f71463          	bne	a4,a5,20408c50 <JSONReader_ReadString+0x188>
      char sch = reader->NextChar(reader);
20408b2c:	fdc42783          	lw	a5,-36(s0)
20408b30:	0147a783          	lw	a5,20(a5)
20408b34:	fdc42503          	lw	a0,-36(s0)
20408b38:	000780e7          	jalr	a5
20408b3c:	00050793          	mv	a5,a0
20408b40:	fef40323          	sb	a5,-26(s0)
      switch (sch) {
20408b44:	fe644783          	lbu	a5,-26(s0)
20408b48:	06e00713          	li	a4,110
20408b4c:	04e78a63          	beq	a5,a4,20408ba0 <JSONReader_ReadString+0xd8>
20408b50:	06e00713          	li	a4,110
20408b54:	00f74c63          	blt	a4,a5,20408b6c <JSONReader_ReadString+0xa4>
20408b58:	02200713          	li	a4,34
20408b5c:	0ae78263          	beq	a5,a4,20408c00 <JSONReader_ReadString+0x138>
20408b60:	05c00713          	li	a4,92
20408b64:	04e78e63          	beq	a5,a4,20408bc0 <JSONReader_ReadString+0xf8>
20408b68:	0b80006f          	j	20408c20 <JSONReader_ReadString+0x158>
20408b6c:	07200713          	li	a4,114
20408b70:	00e78863          	beq	a5,a4,20408b80 <JSONReader_ReadString+0xb8>
20408b74:	07400713          	li	a4,116
20408b78:	06e78463          	beq	a5,a4,20408be0 <JSONReader_ReadString+0x118>
20408b7c:	0a40006f          	j	20408c20 <JSONReader_ReadString+0x158>
        case 'r':
          out_str[output_counter++] = '\r';
20408b80:	fec42783          	lw	a5,-20(s0)
20408b84:	00178713          	addi	a4,a5,1
20408b88:	fee42623          	sw	a4,-20(s0)
20408b8c:	fd842703          	lw	a4,-40(s0)
20408b90:	00f707b3          	add	a5,a4,a5
20408b94:	00d00713          	li	a4,13
20408b98:	00e78023          	sb	a4,0(a5)
          break;
20408b9c:	0e40006f          	j	20408c80 <JSONReader_ReadString+0x1b8>
        case 'n':
          out_str[output_counter++] = '\n';
20408ba0:	fec42783          	lw	a5,-20(s0)
20408ba4:	00178713          	addi	a4,a5,1
20408ba8:	fee42623          	sw	a4,-20(s0)
20408bac:	fd842703          	lw	a4,-40(s0)
20408bb0:	00f707b3          	add	a5,a4,a5
20408bb4:	00a00713          	li	a4,10
20408bb8:	00e78023          	sb	a4,0(a5)
          break;
20408bbc:	0c40006f          	j	20408c80 <JSONReader_ReadString+0x1b8>
        case '\\':
          out_str[output_counter++] = '\\';
20408bc0:	fec42783          	lw	a5,-20(s0)
20408bc4:	00178713          	addi	a4,a5,1
20408bc8:	fee42623          	sw	a4,-20(s0)
20408bcc:	fd842703          	lw	a4,-40(s0)
20408bd0:	00f707b3          	add	a5,a4,a5
20408bd4:	05c00713          	li	a4,92
20408bd8:	00e78023          	sb	a4,0(a5)
          break;
20408bdc:	0a40006f          	j	20408c80 <JSONReader_ReadString+0x1b8>
        case 't':
          out_str[output_counter++] = '\t';
20408be0:	fec42783          	lw	a5,-20(s0)
20408be4:	00178713          	addi	a4,a5,1
20408be8:	fee42623          	sw	a4,-20(s0)
20408bec:	fd842703          	lw	a4,-40(s0)
20408bf0:	00f707b3          	add	a5,a4,a5
20408bf4:	00900713          	li	a4,9
20408bf8:	00e78023          	sb	a4,0(a5)
          break;
20408bfc:	0840006f          	j	20408c80 <JSONReader_ReadString+0x1b8>
        case '\"':
          out_str[output_counter++] = '\"';
20408c00:	fec42783          	lw	a5,-20(s0)
20408c04:	00178713          	addi	a4,a5,1
20408c08:	fee42623          	sw	a4,-20(s0)
20408c0c:	fd842703          	lw	a4,-40(s0)
20408c10:	00f707b3          	add	a5,a4,a5
20408c14:	02200713          	li	a4,34
20408c18:	00e78023          	sb	a4,0(a5)
          break;
20408c1c:	0640006f          	j	20408c80 <JSONReader_ReadString+0x1b8>
        default:
          fprintf(stderr, "unknown string escape %c\n", sch);
20408c20:	5fbf8797          	auipc	a5,0x5fbf8
20408c24:	e1878793          	addi	a5,a5,-488 # 80000a38 <_impure_ptr>
20408c28:	0007a783          	lw	a5,0(a5)
20408c2c:	00c7a783          	lw	a5,12(a5)
20408c30:	fe644703          	lbu	a4,-26(s0)
20408c34:	00070613          	mv	a2,a4
20408c38:	00018597          	auipc	a1,0x18
20408c3c:	0f858593          	addi	a1,a1,248 # 20420d30 <__func__.3846+0xb50>
20408c40:	00078513          	mv	a0,a5
20408c44:	6aa0a0ef          	jal	ra,204132ee <fprintf>
          break;
20408c48:	00000013          	nop
20408c4c:	0340006f          	j	20408c80 <JSONReader_ReadString+0x1b8>
      }
    } else {
      if (ch == '\"') {
20408c50:	fe744703          	lbu	a4,-25(s0)
20408c54:	02200793          	li	a5,34
20408c58:	0cf70063          	beq	a4,a5,20408d18 <JSONReader_ReadString+0x250>
        break;
      }
      if (out_str != NULL) {
20408c5c:	fd842783          	lw	a5,-40(s0)
20408c60:	02078063          	beqz	a5,20408c80 <JSONReader_ReadString+0x1b8>
        out_str[output_counter++] = ch;
20408c64:	fec42783          	lw	a5,-20(s0)
20408c68:	00178713          	addi	a4,a5,1
20408c6c:	fee42623          	sw	a4,-20(s0)
20408c70:	fd842703          	lw	a4,-40(s0)
20408c74:	00f707b3          	add	a5,a4,a5
20408c78:	fe744703          	lbu	a4,-25(s0)
20408c7c:	00e78023          	sb	a4,0(a5)
      }
    }
    if (output_counter == out_str_size - 1) {
20408c80:	fd442783          	lw	a5,-44(s0)
20408c84:	fff78793          	addi	a5,a5,-1
20408c88:	fec42703          	lw	a4,-20(s0)
20408c8c:	02f71663          	bne	a4,a5,20408cb8 <JSONReader_ReadString+0x1f0>
      fprintf(stderr, "Error: string size greater than buffer size (%zu).\n", out_str_size);
20408c90:	5fbf8797          	auipc	a5,0x5fbf8
20408c94:	da878793          	addi	a5,a5,-600 # 80000a38 <_impure_ptr>
20408c98:	0007a783          	lw	a5,0(a5)
20408c9c:	00c7a783          	lw	a5,12(a5)
20408ca0:	fd442603          	lw	a2,-44(s0)
20408ca4:	00018597          	auipc	a1,0x18
20408ca8:	0a858593          	addi	a1,a1,168 # 20420d4c <__func__.3846+0xb6c>
20408cac:	00078513          	mv	a0,a5
20408cb0:	63e0a0ef          	jal	ra,204132ee <fprintf>
      break;
20408cb4:	0680006f          	j	20408d1c <JSONReader_ReadString+0x254>
    }
    if (ch == EOF || ch == '\r' || ch == '\n') {
20408cb8:	fe744703          	lbu	a4,-25(s0)
20408cbc:	00d00793          	li	a5,13
20408cc0:	00f70863          	beq	a4,a5,20408cd0 <JSONReader_ReadString+0x208>
20408cc4:	fe744703          	lbu	a4,-25(s0)
20408cc8:	00a00793          	li	a5,10
20408ccc:	02f71a63          	bne	a4,a5,20408d00 <JSONReader_ReadString+0x238>
      fprintf(stderr, "Error at line %zu, Expect \'\"\' but reach end of line\n",
20408cd0:	5fbf8797          	auipc	a5,0x5fbf8
20408cd4:	d6878793          	addi	a5,a5,-664 # 80000a38 <_impure_ptr>
20408cd8:	0007a783          	lw	a5,0(a5)
20408cdc:	00c7a703          	lw	a4,12(a5)
20408ce0:	fdc42783          	lw	a5,-36(s0)
20408ce4:	00c7a783          	lw	a5,12(a5)
20408ce8:	00078613          	mv	a2,a5
20408cec:	00018597          	auipc	a1,0x18
20408cf0:	09458593          	addi	a1,a1,148 # 20420d80 <__func__.3846+0xba0>
20408cf4:	00070513          	mv	a0,a4
20408cf8:	5f60a0ef          	jal	ra,204132ee <fprintf>
              reader->line_count_n_);
      break;
20408cfc:	0200006f          	j	20408d1c <JSONReader_ReadString+0x254>
  while (output_counter < out_str_size || out_str == NULL) {
20408d00:	fec42703          	lw	a4,-20(s0)
20408d04:	fd442783          	lw	a5,-44(s0)
20408d08:	e0f760e3          	bltu	a4,a5,20408b08 <JSONReader_ReadString+0x40>
20408d0c:	fd842783          	lw	a5,-40(s0)
20408d10:	de078ce3          	beqz	a5,20408b08 <JSONReader_ReadString+0x40>
20408d14:	0080006f          	j	20408d1c <JSONReader_ReadString+0x254>
        break;
20408d18:	00000013          	nop
    }
  }

  if (out_str != NULL) {
20408d1c:	fd842783          	lw	a5,-40(s0)
20408d20:	00078a63          	beqz	a5,20408d34 <JSONReader_ReadString+0x26c>
    out_str[output_counter] = 0;
20408d24:	fd842703          	lw	a4,-40(s0)
20408d28:	fec42783          	lw	a5,-20(s0)
20408d2c:	00f707b3          	add	a5,a4,a5
20408d30:	00078023          	sb	zero,0(a5)
  }
  return status;
20408d34:	fe842783          	lw	a5,-24(s0)
}
20408d38:	00078513          	mv	a0,a5
20408d3c:	02c12083          	lw	ra,44(sp)
20408d40:	02812403          	lw	s0,40(sp)
20408d44:	03010113          	addi	sp,sp,48
20408d48:	00008067          	ret

20408d4c <JSONReader_ReadUnsignedInteger>:

int JSONReader_ReadUnsignedInteger(JSONReader* reader, unsigned int* out_value) {
20408d4c:	fd010113          	addi	sp,sp,-48
20408d50:	02112623          	sw	ra,44(sp)
20408d54:	02812423          	sw	s0,40(sp)
20408d58:	03010413          	addi	s0,sp,48
20408d5c:	fca42e23          	sw	a0,-36(s0)
20408d60:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
20408d64:	fe042623          	sw	zero,-20(s0)
  char* endptr;
  const char* icstr = reader->isptr;
20408d68:	fdc42783          	lw	a5,-36(s0)
20408d6c:	0047a783          	lw	a5,4(a5)
20408d70:	fef42423          	sw	a5,-24(s0)
  unsigned int number = strtol(icstr, &endptr, 10);
20408d74:	fe040793          	addi	a5,s0,-32
20408d78:	00a00613          	li	a2,10
20408d7c:	00078593          	mv	a1,a5
20408d80:	fe842503          	lw	a0,-24(s0)
20408d84:	4910a0ef          	jal	ra,20413a14 <strtol>
20408d88:	00050793          	mv	a5,a0
20408d8c:	fef42223          	sw	a5,-28(s0)
  reader->isptr += endptr - icstr;
20408d90:	fdc42783          	lw	a5,-36(s0)
20408d94:	0047a783          	lw	a5,4(a5)
20408d98:	fe042703          	lw	a4,-32(s0)
20408d9c:	00070693          	mv	a3,a4
20408da0:	fe842703          	lw	a4,-24(s0)
20408da4:	40e68733          	sub	a4,a3,a4
20408da8:	00e78733          	add	a4,a5,a4
20408dac:	fdc42783          	lw	a5,-36(s0)
20408db0:	00e7a223          	sw	a4,4(a5)
  *out_value = number;
20408db4:	fd842783          	lw	a5,-40(s0)
20408db8:	fe442703          	lw	a4,-28(s0)
20408dbc:	00e7a023          	sw	a4,0(a5)
  return status;
20408dc0:	fec42783          	lw	a5,-20(s0)
}
20408dc4:	00078513          	mv	a0,a5
20408dc8:	02c12083          	lw	ra,44(sp)
20408dcc:	02812403          	lw	s0,40(sp)
20408dd0:	03010113          	addi	sp,sp,48
20408dd4:	00008067          	ret

20408dd8 <JSONReader_ReadInteger>:

int JSONReader_ReadInteger(JSONReader* reader, int64_t* out_value) {
20408dd8:	fc010113          	addi	sp,sp,-64
20408ddc:	02112e23          	sw	ra,60(sp)
20408de0:	02812c23          	sw	s0,56(sp)
20408de4:	04010413          	addi	s0,sp,64
20408de8:	fca42623          	sw	a0,-52(s0)
20408dec:	fcb42423          	sw	a1,-56(s0)
  int status = 0;
20408df0:	fe042623          	sw	zero,-20(s0)
  char* endptr;
  const char* icstr = reader->isptr;
20408df4:	fcc42783          	lw	a5,-52(s0)
20408df8:	0047a783          	lw	a5,4(a5)
20408dfc:	fef42423          	sw	a5,-24(s0)
  int64_t number = strtol(icstr, &endptr, 10);
20408e00:	fdc40793          	addi	a5,s0,-36
20408e04:	00a00613          	li	a2,10
20408e08:	00078593          	mv	a1,a5
20408e0c:	fe842503          	lw	a0,-24(s0)
20408e10:	4050a0ef          	jal	ra,20413a14 <strtol>
20408e14:	00050793          	mv	a5,a0
20408e18:	fef42023          	sw	a5,-32(s0)
20408e1c:	41f7d793          	srai	a5,a5,0x1f
20408e20:	fef42223          	sw	a5,-28(s0)
  reader->isptr += endptr - icstr;
20408e24:	fcc42783          	lw	a5,-52(s0)
20408e28:	0047a783          	lw	a5,4(a5)
20408e2c:	fdc42703          	lw	a4,-36(s0)
20408e30:	00070693          	mv	a3,a4
20408e34:	fe842703          	lw	a4,-24(s0)
20408e38:	40e68733          	sub	a4,a3,a4
20408e3c:	00e78733          	add	a4,a5,a4
20408e40:	fcc42783          	lw	a5,-52(s0)
20408e44:	00e7a223          	sw	a4,4(a5)
  *out_value = number;
20408e48:	fc842703          	lw	a4,-56(s0)
20408e4c:	fe042783          	lw	a5,-32(s0)
20408e50:	fe442803          	lw	a6,-28(s0)
20408e54:	00f72023          	sw	a5,0(a4)
20408e58:	01072223          	sw	a6,4(a4)
  return status;
20408e5c:	fec42783          	lw	a5,-20(s0)
}
20408e60:	00078513          	mv	a0,a5
20408e64:	03c12083          	lw	ra,60(sp)
20408e68:	03812403          	lw	s0,56(sp)
20408e6c:	04010113          	addi	sp,sp,64
20408e70:	00008067          	ret

20408e74 <JSONReader_BeginObject>:
 *    // do somthing to key value
 *    reader->Read(&value);
 *  }
 * \endcode
 */
void JSONReader_BeginObject(JSONReader* reader) {
20408e74:	fd010113          	addi	sp,sp,-48
20408e78:	02112623          	sw	ra,44(sp)
20408e7c:	02812423          	sw	s0,40(sp)
20408e80:	03010413          	addi	s0,sp,48
20408e84:	fca42e23          	sw	a0,-36(s0)
  int ch = reader->NextNonSpace(reader);
20408e88:	fdc42783          	lw	a5,-36(s0)
20408e8c:	0187a783          	lw	a5,24(a5)
20408e90:	fdc42503          	lw	a0,-36(s0)
20408e94:	000780e7          	jalr	a5
20408e98:	00050793          	mv	a5,a0
20408e9c:	fef42623          	sw	a5,-20(s0)
  if (!(ch == '{')) {
20408ea0:	fec42703          	lw	a4,-20(s0)
20408ea4:	07b00793          	li	a5,123
20408ea8:	02f70a63          	beq	a4,a5,20408edc <JSONReader_BeginObject+0x68>
    fprintf(stderr, "Error at line %zu, Expect \'{\' but got \'%c\'\n", reader->line_count_n_, ch);
20408eac:	5fbf8797          	auipc	a5,0x5fbf8
20408eb0:	b8c78793          	addi	a5,a5,-1140 # 80000a38 <_impure_ptr>
20408eb4:	0007a783          	lw	a5,0(a5)
20408eb8:	00c7a703          	lw	a4,12(a5)
20408ebc:	fdc42783          	lw	a5,-36(s0)
20408ec0:	00c7a783          	lw	a5,12(a5)
20408ec4:	fec42683          	lw	a3,-20(s0)
20408ec8:	00078613          	mv	a2,a5
20408ecc:	00018597          	auipc	a1,0x18
20408ed0:	eec58593          	addi	a1,a1,-276 # 20420db8 <__func__.3846+0xbd8>
20408ed4:	00070513          	mv	a0,a4
20408ed8:	4160a0ef          	jal	ra,204132ee <fprintf>
  }
  Seq* scope_counter_ = reader->scope_counter_;
20408edc:	fdc42783          	lw	a5,-36(s0)
20408ee0:	0107a783          	lw	a5,16(a5)
20408ee4:	fef42423          	sw	a5,-24(s0)
  scope_counter_->push_back(scope_counter_, 0);
20408ee8:	fe842783          	lw	a5,-24(s0)
20408eec:	0147a783          	lw	a5,20(a5)
20408ef0:	00000593          	li	a1,0
20408ef4:	fe842503          	lw	a0,-24(s0)
20408ef8:	000780e7          	jalr	a5
}
20408efc:	00000013          	nop
20408f00:	02c12083          	lw	ra,44(sp)
20408f04:	02812403          	lw	s0,40(sp)
20408f08:	03010113          	addi	sp,sp,48
20408f0c:	00008067          	ret

20408f10 <JSONReader_NextObjectItem>:
 *  reader->Read to read in the value.
 * \param out_key the key to the next object.
 * \param out_key_size number of bytes available to write at out_key, including terminating \0.
 * \return true if the read is successful, false if we are at end of the object.
 */
uint8_t JSONReader_NextObjectItem(JSONReader* reader, char* out_key, size_t out_key_size) {
20408f10:	fc010113          	addi	sp,sp,-64
20408f14:	02112e23          	sw	ra,60(sp)
20408f18:	02812c23          	sw	s0,56(sp)
20408f1c:	04010413          	addi	s0,sp,64
20408f20:	fca42623          	sw	a0,-52(s0)
20408f24:	fcb42423          	sw	a1,-56(s0)
20408f28:	fcc42223          	sw	a2,-60(s0)
  uint8_t next = 1;
20408f2c:	00100793          	li	a5,1
20408f30:	fef407a3          	sb	a5,-17(s0)
  Seq* scope_counter_ = reader->scope_counter_;
20408f34:	fcc42783          	lw	a5,-52(s0)
20408f38:	0107a783          	lw	a5,16(a5)
20408f3c:	fef42423          	sw	a5,-24(s0)
  if (scope_counter_->back(scope_counter_)[0] != 0) {
20408f40:	fe842783          	lw	a5,-24(s0)
20408f44:	0187a783          	lw	a5,24(a5)
20408f48:	fe842503          	lw	a0,-24(s0)
20408f4c:	000780e7          	jalr	a5
20408f50:	00050793          	mv	a5,a0
20408f54:	0007a783          	lw	a5,0(a5)
20408f58:	08078263          	beqz	a5,20408fdc <JSONReader_NextObjectItem+0xcc>
    int ch = reader->NextNonSpace(reader);
20408f5c:	fcc42783          	lw	a5,-52(s0)
20408f60:	0187a783          	lw	a5,24(a5)
20408f64:	fcc42503          	lw	a0,-52(s0)
20408f68:	000780e7          	jalr	a5
20408f6c:	00050793          	mv	a5,a0
20408f70:	fef42023          	sw	a5,-32(s0)
    if (ch == EOF) {
20408f74:	fe042703          	lw	a4,-32(s0)
20408f78:	fff00793          	li	a5,-1
20408f7c:	00f71663          	bne	a4,a5,20408f88 <JSONReader_NextObjectItem+0x78>
      next = 0;
20408f80:	fe0407a3          	sb	zero,-17(s0)
20408f84:	0900006f          	j	20409014 <JSONReader_NextObjectItem+0x104>
    } else if (ch == '}') {
20408f88:	fe042703          	lw	a4,-32(s0)
20408f8c:	07d00793          	li	a5,125
20408f90:	00f71663          	bne	a4,a5,20408f9c <JSONReader_NextObjectItem+0x8c>
      next = 0;
20408f94:	fe0407a3          	sb	zero,-17(s0)
20408f98:	07c0006f          	j	20409014 <JSONReader_NextObjectItem+0x104>
    } else {
      if (ch != ',') {
20408f9c:	fe042703          	lw	a4,-32(s0)
20408fa0:	02c00793          	li	a5,44
20408fa4:	06f70863          	beq	a4,a5,20409014 <JSONReader_NextObjectItem+0x104>
        fprintf(stderr, "Error at line %zu, JSON object expect \'}\' or \',\' but got \'%c\'\n",
20408fa8:	5fbf8797          	auipc	a5,0x5fbf8
20408fac:	a9078793          	addi	a5,a5,-1392 # 80000a38 <_impure_ptr>
20408fb0:	0007a783          	lw	a5,0(a5)
20408fb4:	00c7a703          	lw	a4,12(a5)
20408fb8:	fcc42783          	lw	a5,-52(s0)
20408fbc:	00c7a783          	lw	a5,12(a5)
20408fc0:	fe042683          	lw	a3,-32(s0)
20408fc4:	00078613          	mv	a2,a5
20408fc8:	00018597          	auipc	a1,0x18
20408fcc:	e1c58593          	addi	a1,a1,-484 # 20420de4 <__func__.3846+0xc04>
20408fd0:	00070513          	mv	a0,a4
20408fd4:	31a0a0ef          	jal	ra,204132ee <fprintf>
20408fd8:	03c0006f          	j	20409014 <JSONReader_NextObjectItem+0x104>
                reader->line_count_n_, ch);
      }
    }
  } else {
    int ch = reader->PeekNextNonSpace(reader);
20408fdc:	fcc42783          	lw	a5,-52(s0)
20408fe0:	0207a783          	lw	a5,32(a5)
20408fe4:	fcc42503          	lw	a0,-52(s0)
20408fe8:	000780e7          	jalr	a5
20408fec:	00050793          	mv	a5,a0
20408ff0:	fef42223          	sw	a5,-28(s0)
    if (ch == '}') {
20408ff4:	fe442703          	lw	a4,-28(s0)
20408ff8:	07d00793          	li	a5,125
20408ffc:	00f71c63          	bne	a4,a5,20409014 <JSONReader_NextObjectItem+0x104>
      reader->NextChar(reader);
20409000:	fcc42783          	lw	a5,-52(s0)
20409004:	0147a783          	lw	a5,20(a5)
20409008:	fcc42503          	lw	a0,-52(s0)
2040900c:	000780e7          	jalr	a5
      next = 0;
20409010:	fe0407a3          	sb	zero,-17(s0)
    }
  }
  if (!next) {
20409014:	fef44783          	lbu	a5,-17(s0)
20409018:	00079e63          	bnez	a5,20409034 <JSONReader_NextObjectItem+0x124>
    scope_counter_->pop_back(scope_counter_);
2040901c:	fe842783          	lw	a5,-24(s0)
20409020:	01c7a783          	lw	a5,28(a5)
20409024:	fe842503          	lw	a0,-24(s0)
20409028:	000780e7          	jalr	a5
    return 0;
2040902c:	00000793          	li	a5,0
20409030:	0d00006f          	j	20409100 <JSONReader_NextObjectItem+0x1f0>
  } else {
    scope_counter_->back(scope_counter_)[0] += 1;
20409034:	fe842783          	lw	a5,-24(s0)
20409038:	0187a783          	lw	a5,24(a5)
2040903c:	fe842503          	lw	a0,-24(s0)
20409040:	000780e7          	jalr	a5
20409044:	00050793          	mv	a5,a0
20409048:	0007a703          	lw	a4,0(a5)
2040904c:	00170713          	addi	a4,a4,1
20409050:	00e7a023          	sw	a4,0(a5)
    int err = reader->ReadString(reader, out_key, out_key_size);
20409054:	fcc42783          	lw	a5,-52(s0)
20409058:	02c7a783          	lw	a5,44(a5)
2040905c:	fc442603          	lw	a2,-60(s0)
20409060:	fc842583          	lw	a1,-56(s0)
20409064:	fcc42503          	lw	a0,-52(s0)
20409068:	000780e7          	jalr	a5
2040906c:	fca42e23          	sw	a0,-36(s0)
    if (err != 0) {
20409070:	fdc42783          	lw	a5,-36(s0)
20409074:	02078a63          	beqz	a5,204090a8 <JSONReader_NextObjectItem+0x198>
      fprintf(stderr, "error reading key");
20409078:	5fbf8797          	auipc	a5,0x5fbf8
2040907c:	9c078793          	addi	a5,a5,-1600 # 80000a38 <_impure_ptr>
20409080:	0007a783          	lw	a5,0(a5)
20409084:	00c7a783          	lw	a5,12(a5)
20409088:	00078693          	mv	a3,a5
2040908c:	01100613          	li	a2,17
20409090:	00100593          	li	a1,1
20409094:	00018517          	auipc	a0,0x18
20409098:	d9050513          	addi	a0,a0,-624 # 20420e24 <__func__.3846+0xc44>
2040909c:	2ec0a0ef          	jal	ra,20413388 <fwrite>
      return 0;
204090a0:	00000793          	li	a5,0
204090a4:	05c0006f          	j	20409100 <JSONReader_NextObjectItem+0x1f0>
    }
    int ch = reader->NextNonSpace(reader);
204090a8:	fcc42783          	lw	a5,-52(s0)
204090ac:	0187a783          	lw	a5,24(a5)
204090b0:	fcc42503          	lw	a0,-52(s0)
204090b4:	000780e7          	jalr	a5
204090b8:	00050793          	mv	a5,a0
204090bc:	fcf42c23          	sw	a5,-40(s0)
    if (ch != ':') {
204090c0:	fd842703          	lw	a4,-40(s0)
204090c4:	03a00793          	li	a5,58
204090c8:	02f70a63          	beq	a4,a5,204090fc <JSONReader_NextObjectItem+0x1ec>
      fprintf(stderr, "Error at line %zu, Expect \':\' but get \'%c\'\n", reader->line_count_n_,
204090cc:	5fbf8797          	auipc	a5,0x5fbf8
204090d0:	96c78793          	addi	a5,a5,-1684 # 80000a38 <_impure_ptr>
204090d4:	0007a783          	lw	a5,0(a5)
204090d8:	00c7a703          	lw	a4,12(a5)
204090dc:	fcc42783          	lw	a5,-52(s0)
204090e0:	00c7a783          	lw	a5,12(a5)
204090e4:	fd842683          	lw	a3,-40(s0)
204090e8:	00078613          	mv	a2,a5
204090ec:	00018597          	auipc	a1,0x18
204090f0:	d4c58593          	addi	a1,a1,-692 # 20420e38 <__func__.3846+0xc58>
204090f4:	00070513          	mv	a0,a4
204090f8:	1f60a0ef          	jal	ra,204132ee <fprintf>
              ch);
    }
    return 1;
204090fc:	00100793          	li	a5,1
  }
}
20409100:	00078513          	mv	a0,a5
20409104:	03c12083          	lw	ra,60(sp)
20409108:	03812403          	lw	s0,56(sp)
2040910c:	04010113          	addi	sp,sp,64
20409110:	00008067          	ret

20409114 <JSONReader_BeginArray>:
 *  while (reader->NextArrayItem(&value)) {
 *    // do somthing to value
 *  }
 * \endcode
 */
void JSONReader_BeginArray(JSONReader* reader) {
20409114:	fd010113          	addi	sp,sp,-48
20409118:	02112623          	sw	ra,44(sp)
2040911c:	02812423          	sw	s0,40(sp)
20409120:	03010413          	addi	s0,sp,48
20409124:	fca42e23          	sw	a0,-36(s0)
  int ch = reader->NextNonSpace(reader);
20409128:	fdc42783          	lw	a5,-36(s0)
2040912c:	0187a783          	lw	a5,24(a5)
20409130:	fdc42503          	lw	a0,-36(s0)
20409134:	000780e7          	jalr	a5
20409138:	00050793          	mv	a5,a0
2040913c:	fef42623          	sw	a5,-20(s0)
  if (ch != '[') {
20409140:	fec42703          	lw	a4,-20(s0)
20409144:	05b00793          	li	a5,91
20409148:	02f70a63          	beq	a4,a5,2040917c <JSONReader_BeginArray+0x68>
    fprintf(stderr, "Error at line %zu, Expect \'[\' but get \'%c\'\n", reader->line_count_n_, ch);
2040914c:	5fbf8797          	auipc	a5,0x5fbf8
20409150:	8ec78793          	addi	a5,a5,-1812 # 80000a38 <_impure_ptr>
20409154:	0007a783          	lw	a5,0(a5)
20409158:	00c7a703          	lw	a4,12(a5)
2040915c:	fdc42783          	lw	a5,-36(s0)
20409160:	00c7a783          	lw	a5,12(a5)
20409164:	fec42683          	lw	a3,-20(s0)
20409168:	00078613          	mv	a2,a5
2040916c:	00018597          	auipc	a1,0x18
20409170:	cf858593          	addi	a1,a1,-776 # 20420e64 <__func__.3846+0xc84>
20409174:	00070513          	mv	a0,a4
20409178:	1760a0ef          	jal	ra,204132ee <fprintf>
  }
  Seq* scope_counter_ = reader->scope_counter_;
2040917c:	fdc42783          	lw	a5,-36(s0)
20409180:	0107a783          	lw	a5,16(a5)
20409184:	fef42423          	sw	a5,-24(s0)
  scope_counter_->push_back(scope_counter_, 0);
20409188:	fe842783          	lw	a5,-24(s0)
2040918c:	0147a783          	lw	a5,20(a5)
20409190:	00000593          	li	a1,0
20409194:	fe842503          	lw	a0,-24(s0)
20409198:	000780e7          	jalr	a5
}
2040919c:	00000013          	nop
204091a0:	02c12083          	lw	ra,44(sp)
204091a4:	02812403          	lw	s0,40(sp)
204091a8:	03010113          	addi	sp,sp,48
204091ac:	00008067          	ret

204091b0 <JSONReader_NextArrayItem>:
 * \brief Try to read the next element in the array.
 *  If this call is successful, user can proceed to call
 *  reader->Read to read in the value.
 * \return true if the read is successful, false if we are at end of the array.
 */
uint8_t JSONReader_NextArrayItem(JSONReader* reader) {
204091b0:	fd010113          	addi	sp,sp,-48
204091b4:	02112623          	sw	ra,44(sp)
204091b8:	02812423          	sw	s0,40(sp)
204091bc:	03010413          	addi	s0,sp,48
204091c0:	fca42e23          	sw	a0,-36(s0)
  uint8_t next = 1;
204091c4:	00100793          	li	a5,1
204091c8:	fef407a3          	sb	a5,-17(s0)
  Seq* scope_counter_ = reader->scope_counter_;
204091cc:	fdc42783          	lw	a5,-36(s0)
204091d0:	0107a783          	lw	a5,16(a5)
204091d4:	fef42423          	sw	a5,-24(s0)
  if (scope_counter_->back(scope_counter_)[0] != 0) {
204091d8:	fe842783          	lw	a5,-24(s0)
204091dc:	0187a783          	lw	a5,24(a5)
204091e0:	fe842503          	lw	a0,-24(s0)
204091e4:	000780e7          	jalr	a5
204091e8:	00050793          	mv	a5,a0
204091ec:	0007a783          	lw	a5,0(a5)
204091f0:	08078263          	beqz	a5,20409274 <JSONReader_NextArrayItem+0xc4>
    int ch = reader->NextNonSpace(reader);
204091f4:	fdc42783          	lw	a5,-36(s0)
204091f8:	0187a783          	lw	a5,24(a5)
204091fc:	fdc42503          	lw	a0,-36(s0)
20409200:	000780e7          	jalr	a5
20409204:	00050793          	mv	a5,a0
20409208:	fef42023          	sw	a5,-32(s0)
    if (ch == EOF) {
2040920c:	fe042703          	lw	a4,-32(s0)
20409210:	fff00793          	li	a5,-1
20409214:	00f71663          	bne	a4,a5,20409220 <JSONReader_NextArrayItem+0x70>
      next = 0;
20409218:	fe0407a3          	sb	zero,-17(s0)
2040921c:	0900006f          	j	204092ac <JSONReader_NextArrayItem+0xfc>
    } else if (ch == ']') {
20409220:	fe042703          	lw	a4,-32(s0)
20409224:	05d00793          	li	a5,93
20409228:	00f71663          	bne	a4,a5,20409234 <JSONReader_NextArrayItem+0x84>
      next = 0;
2040922c:	fe0407a3          	sb	zero,-17(s0)
20409230:	07c0006f          	j	204092ac <JSONReader_NextArrayItem+0xfc>
    } else {
      if (ch != ',') {
20409234:	fe042703          	lw	a4,-32(s0)
20409238:	02c00793          	li	a5,44
2040923c:	06f70863          	beq	a4,a5,204092ac <JSONReader_NextArrayItem+0xfc>
        fprintf(stderr, "Error at line %zu, JSON object expect \']\' or \',\' but got \'%c\'\n",
20409240:	5fbf7797          	auipc	a5,0x5fbf7
20409244:	7f878793          	addi	a5,a5,2040 # 80000a38 <_impure_ptr>
20409248:	0007a783          	lw	a5,0(a5)
2040924c:	00c7a703          	lw	a4,12(a5)
20409250:	fdc42783          	lw	a5,-36(s0)
20409254:	00c7a783          	lw	a5,12(a5)
20409258:	fe042683          	lw	a3,-32(s0)
2040925c:	00078613          	mv	a2,a5
20409260:	00018597          	auipc	a1,0x18
20409264:	c3058593          	addi	a1,a1,-976 # 20420e90 <__func__.3846+0xcb0>
20409268:	00070513          	mv	a0,a4
2040926c:	0820a0ef          	jal	ra,204132ee <fprintf>
20409270:	03c0006f          	j	204092ac <JSONReader_NextArrayItem+0xfc>
                reader->line_count_n_, ch);
      }
    }
  } else {
    int ch = reader->PeekNextNonSpace(reader);
20409274:	fdc42783          	lw	a5,-36(s0)
20409278:	0207a783          	lw	a5,32(a5)
2040927c:	fdc42503          	lw	a0,-36(s0)
20409280:	000780e7          	jalr	a5
20409284:	00050793          	mv	a5,a0
20409288:	fef42223          	sw	a5,-28(s0)
    if (ch == ']') {
2040928c:	fe442703          	lw	a4,-28(s0)
20409290:	05d00793          	li	a5,93
20409294:	00f71c63          	bne	a4,a5,204092ac <JSONReader_NextArrayItem+0xfc>
      reader->NextChar(reader);
20409298:	fdc42783          	lw	a5,-36(s0)
2040929c:	0147a783          	lw	a5,20(a5)
204092a0:	fdc42503          	lw	a0,-36(s0)
204092a4:	000780e7          	jalr	a5
      next = 0;
204092a8:	fe0407a3          	sb	zero,-17(s0)
    }
  }
  if (!next) {
204092ac:	fef44783          	lbu	a5,-17(s0)
204092b0:	00079e63          	bnez	a5,204092cc <JSONReader_NextArrayItem+0x11c>
    scope_counter_->pop_back(scope_counter_);
204092b4:	fe842783          	lw	a5,-24(s0)
204092b8:	01c7a783          	lw	a5,28(a5)
204092bc:	fe842503          	lw	a0,-24(s0)
204092c0:	000780e7          	jalr	a5
    return 0;
204092c4:	00000793          	li	a5,0
204092c8:	0280006f          	j	204092f0 <JSONReader_NextArrayItem+0x140>
  } else {
    scope_counter_->back(scope_counter_)[0] += 1;
204092cc:	fe842783          	lw	a5,-24(s0)
204092d0:	0187a783          	lw	a5,24(a5)
204092d4:	fe842503          	lw	a0,-24(s0)
204092d8:	000780e7          	jalr	a5
204092dc:	00050793          	mv	a5,a0
204092e0:	0007a703          	lw	a4,0(a5)
204092e4:	00170713          	addi	a4,a4,1
204092e8:	00e7a023          	sw	a4,0(a5)
    return 1;
204092ec:	00100793          	li	a5,1
  }
}
204092f0:	00078513          	mv	a0,a5
204092f4:	02c12083          	lw	ra,44(sp)
204092f8:	02812403          	lw	s0,40(sp)
204092fc:	03010113          	addi	sp,sp,48
20409300:	00008067          	ret

20409304 <JSONReader_ArrayLength>:
/*!
 * \brief Determine the remaining length of the array to read.
 * \param num_elements Pointer which receives the length.
 * \return 0 if successful
 */
int JSONReader_ArrayLength(JSONReader* reader, size_t* num_elements) {
20409304:	fb010113          	addi	sp,sp,-80
20409308:	04112623          	sw	ra,76(sp)
2040930c:	04812423          	sw	s0,72(sp)
20409310:	05010413          	addi	s0,sp,80
20409314:	faa42e23          	sw	a0,-68(s0)
20409318:	fab42c23          	sw	a1,-72(s0)
  int status = 0;
2040931c:	fe042623          	sw	zero,-20(s0)
  char* old_isptr = reader->isptr;
20409320:	fbc42783          	lw	a5,-68(s0)
20409324:	0047a783          	lw	a5,4(a5)
20409328:	fef42023          	sw	a5,-32(s0)
  size_t old_line_count_r_ = reader->line_count_r_;
2040932c:	fbc42783          	lw	a5,-68(s0)
20409330:	0087a783          	lw	a5,8(a5)
20409334:	fcf42e23          	sw	a5,-36(s0)
  size_t old_line_count_n_ = reader->line_count_n_;
20409338:	fbc42783          	lw	a5,-68(s0)
2040933c:	00c7a783          	lw	a5,12(a5)
20409340:	fcf42c23          	sw	a5,-40(s0)
  int old_scope_counter_back = *reader->scope_counter_->back(reader->scope_counter_);
20409344:	fbc42783          	lw	a5,-68(s0)
20409348:	0107a783          	lw	a5,16(a5)
2040934c:	0187a703          	lw	a4,24(a5)
20409350:	fbc42783          	lw	a5,-68(s0)
20409354:	0107a783          	lw	a5,16(a5)
20409358:	00078513          	mv	a0,a5
2040935c:	000700e7          	jalr	a4
20409360:	00050793          	mv	a5,a0
20409364:	0007a783          	lw	a5,0(a5)
20409368:	fcf42a23          	sw	a5,-44(s0)

  typedef enum { kObject, kArray } item_type_t;
  Seq* scopes;
  tvm_crt_error_t err = SeqCreate(10, &scopes);
2040936c:	fc840793          	addi	a5,s0,-56
20409370:	00078613          	mv	a2,a5
20409374:	00a00513          	li	a0,10
20409378:	00000593          	li	a1,0
2040937c:	bf0ff0ef          	jal	ra,2040876c <SeqCreate>
20409380:	fca42823          	sw	a0,-48(s0)
  if (err != kTvmErrorNoError) {
20409384:	fd042783          	lw	a5,-48(s0)
20409388:	00078663          	beqz	a5,20409394 <JSONReader_ArrayLength+0x90>
    return -1;
2040938c:	fff00793          	li	a5,-1
20409390:	2340006f          	j	204095c4 <JSONReader_ArrayLength+0x2c0>
  }
  item_type_t json_item_type = kArray;
20409394:	00100793          	li	a5,1
20409398:	fef42423          	sw	a5,-24(s0)
  *num_elements = 0;
2040939c:	fb842783          	lw	a5,-72(s0)
204093a0:	0007a023          	sw	zero,0(a5)
  for (;;) {
    int has_item = 0;
204093a4:	fe042223          	sw	zero,-28(s0)
    if (json_item_type == kArray) {
204093a8:	fe842703          	lw	a4,-24(s0)
204093ac:	00100793          	li	a5,1
204093b0:	04f71463          	bne	a4,a5,204093f8 <JSONReader_ArrayLength+0xf4>
      has_item = reader->NextArrayItem(reader);
204093b4:	fbc42783          	lw	a5,-68(s0)
204093b8:	03c7a783          	lw	a5,60(a5)
204093bc:	fbc42503          	lw	a0,-68(s0)
204093c0:	000780e7          	jalr	a5
204093c4:	00050793          	mv	a5,a0
204093c8:	fef42223          	sw	a5,-28(s0)
      if (scopes->size == 0 && has_item != 0) {
204093cc:	fc842783          	lw	a5,-56(s0)
204093d0:	0107a783          	lw	a5,16(a5)
204093d4:	04079e63          	bnez	a5,20409430 <JSONReader_ArrayLength+0x12c>
204093d8:	fe442783          	lw	a5,-28(s0)
204093dc:	04078a63          	beqz	a5,20409430 <JSONReader_ArrayLength+0x12c>
        (*num_elements)++;
204093e0:	fb842783          	lw	a5,-72(s0)
204093e4:	0007a783          	lw	a5,0(a5)
204093e8:	00178713          	addi	a4,a5,1
204093ec:	fb842783          	lw	a5,-72(s0)
204093f0:	00e7a023          	sw	a4,0(a5)
204093f4:	03c0006f          	j	20409430 <JSONReader_ArrayLength+0x12c>
      }
    } else if (json_item_type == kObject) {
204093f8:	fe842783          	lw	a5,-24(s0)
204093fc:	02079463          	bnez	a5,20409424 <JSONReader_ArrayLength+0x120>
      has_item = reader->NextObjectItem(reader, NULL, 0);
20409400:	fbc42783          	lw	a5,-68(s0)
20409404:	0387a783          	lw	a5,56(a5)
20409408:	00000613          	li	a2,0
2040940c:	00000593          	li	a1,0
20409410:	fbc42503          	lw	a0,-68(s0)
20409414:	000780e7          	jalr	a5
20409418:	00050793          	mv	a5,a0
2040941c:	fef42223          	sw	a5,-28(s0)
20409420:	0100006f          	j	20409430 <JSONReader_ArrayLength+0x12c>
    } else {
      status = -1;
20409424:	fff00793          	li	a5,-1
20409428:	fef42623          	sw	a5,-20(s0)
      break;
2040942c:	12c0006f          	j	20409558 <JSONReader_ArrayLength+0x254>
    }

    if (has_item) {
20409430:	fe442783          	lw	a5,-28(s0)
20409434:	0c078e63          	beqz	a5,20409510 <JSONReader_ArrayLength+0x20c>
      char c = reader->PeekNextNonSpace(reader);
20409438:	fbc42783          	lw	a5,-68(s0)
2040943c:	0207a783          	lw	a5,32(a5)
20409440:	fbc42503          	lw	a0,-68(s0)
20409444:	000780e7          	jalr	a5
20409448:	00050793          	mv	a5,a0
2040944c:	fcf407a3          	sb	a5,-49(s0)
      if (c == '"') {
20409450:	fcf44703          	lbu	a4,-49(s0)
20409454:	02200793          	li	a5,34
20409458:	02f71063          	bne	a4,a5,20409478 <JSONReader_ArrayLength+0x174>
        reader->ReadString(reader, NULL, 1024);
2040945c:	fbc42783          	lw	a5,-68(s0)
20409460:	02c7a783          	lw	a5,44(a5)
20409464:	40000613          	li	a2,1024
20409468:	00000593          	li	a1,0
2040946c:	fbc42503          	lw	a0,-68(s0)
20409470:	000780e7          	jalr	a5
20409474:	f31ff06f          	j	204093a4 <JSONReader_ArrayLength+0xa0>
      } else if (c == '[') {
20409478:	fcf44703          	lbu	a4,-49(s0)
2040947c:	05b00793          	li	a5,91
20409480:	02f71c63          	bne	a4,a5,204094b8 <JSONReader_ArrayLength+0x1b4>
        reader->BeginArray(reader);
20409484:	fbc42783          	lw	a5,-68(s0)
20409488:	0307a783          	lw	a5,48(a5)
2040948c:	fbc42503          	lw	a0,-68(s0)
20409490:	000780e7          	jalr	a5
        scopes->push_back(scopes, json_item_type);
20409494:	fc842783          	lw	a5,-56(s0)
20409498:	0147a703          	lw	a4,20(a5)
2040949c:	fc842783          	lw	a5,-56(s0)
204094a0:	fe842583          	lw	a1,-24(s0)
204094a4:	00078513          	mv	a0,a5
204094a8:	000700e7          	jalr	a4
        json_item_type = kArray;
204094ac:	00100793          	li	a5,1
204094b0:	fef42423          	sw	a5,-24(s0)
204094b4:	ef1ff06f          	j	204093a4 <JSONReader_ArrayLength+0xa0>
      } else if (c == '{') {
204094b8:	fcf44703          	lbu	a4,-49(s0)
204094bc:	07b00793          	li	a5,123
204094c0:	02f71a63          	bne	a4,a5,204094f4 <JSONReader_ArrayLength+0x1f0>
        reader->BeginObject(reader);
204094c4:	fbc42783          	lw	a5,-68(s0)
204094c8:	0347a783          	lw	a5,52(a5)
204094cc:	fbc42503          	lw	a0,-68(s0)
204094d0:	000780e7          	jalr	a5
        scopes->push_back(scopes, json_item_type);
204094d4:	fc842783          	lw	a5,-56(s0)
204094d8:	0147a703          	lw	a4,20(a5)
204094dc:	fc842783          	lw	a5,-56(s0)
204094e0:	fe842583          	lw	a1,-24(s0)
204094e4:	00078513          	mv	a0,a5
204094e8:	000700e7          	jalr	a4
        json_item_type = kObject;
204094ec:	fe042423          	sw	zero,-24(s0)
204094f0:	eb5ff06f          	j	204093a4 <JSONReader_ArrayLength+0xa0>
      } else {
        int64_t val;
        reader->ReadInteger(reader, &val);
204094f4:	fbc42783          	lw	a5,-68(s0)
204094f8:	0287a703          	lw	a4,40(a5)
204094fc:	fc040793          	addi	a5,s0,-64
20409500:	00078593          	mv	a1,a5
20409504:	fbc42503          	lw	a0,-68(s0)
20409508:	000700e7          	jalr	a4
2040950c:	e99ff06f          	j	204093a4 <JSONReader_ArrayLength+0xa0>
      }
    } else {
      if (scopes->size > 0) {
20409510:	fc842783          	lw	a5,-56(s0)
20409514:	0107a783          	lw	a5,16(a5)
20409518:	02078e63          	beqz	a5,20409554 <JSONReader_ArrayLength+0x250>
        json_item_type = *scopes->back(scopes);
2040951c:	fc842783          	lw	a5,-56(s0)
20409520:	0187a703          	lw	a4,24(a5)
20409524:	fc842783          	lw	a5,-56(s0)
20409528:	00078513          	mv	a0,a5
2040952c:	000700e7          	jalr	a4
20409530:	00050793          	mv	a5,a0
20409534:	0007a783          	lw	a5,0(a5)
20409538:	fef42423          	sw	a5,-24(s0)
        scopes->pop_back(scopes);
2040953c:	fc842783          	lw	a5,-56(s0)
20409540:	01c7a703          	lw	a4,28(a5)
20409544:	fc842783          	lw	a5,-56(s0)
20409548:	00078513          	mv	a0,a5
2040954c:	000700e7          	jalr	a4
  for (;;) {
20409550:	e55ff06f          	j	204093a4 <JSONReader_ArrayLength+0xa0>
      } else {
        break;
20409554:	00000013          	nop
      }
    }
  }

  reader->isptr = old_isptr;
20409558:	fbc42783          	lw	a5,-68(s0)
2040955c:	fe042703          	lw	a4,-32(s0)
20409560:	00e7a223          	sw	a4,4(a5)
  reader->line_count_r_ = old_line_count_r_;
20409564:	fbc42783          	lw	a5,-68(s0)
20409568:	fdc42703          	lw	a4,-36(s0)
2040956c:	00e7a423          	sw	a4,8(a5)
  reader->line_count_n_ = old_line_count_n_;
20409570:	fbc42783          	lw	a5,-68(s0)
20409574:	fd842703          	lw	a4,-40(s0)
20409578:	00e7a623          	sw	a4,12(a5)
  reader->scope_counter_->push_back(reader->scope_counter_, old_scope_counter_back);
2040957c:	fbc42783          	lw	a5,-68(s0)
20409580:	0107a783          	lw	a5,16(a5)
20409584:	0147a683          	lw	a3,20(a5)
20409588:	fbc42783          	lw	a5,-68(s0)
2040958c:	0107a783          	lw	a5,16(a5)
20409590:	fd442703          	lw	a4,-44(s0)
20409594:	00070593          	mv	a1,a4
20409598:	00078513          	mv	a0,a5
2040959c:	000680e7          	jalr	a3

  err = SeqRelease(scopes);
204095a0:	fc842783          	lw	a5,-56(s0)
204095a4:	00078513          	mv	a0,a5
204095a8:	ad0ff0ef          	jal	ra,20408878 <SeqRelease>
204095ac:	fca42823          	sw	a0,-48(s0)
  if (err != kTvmErrorNoError) {
204095b0:	fd042783          	lw	a5,-48(s0)
204095b4:	00078663          	beqz	a5,204095c0 <JSONReader_ArrayLength+0x2bc>
    return -1;
204095b8:	fff00793          	li	a5,-1
204095bc:	0080006f          	j	204095c4 <JSONReader_ArrayLength+0x2c0>
  }

  return status;
204095c0:	fec42783          	lw	a5,-20(s0)
}
204095c4:	00078513          	mv	a0,a5
204095c8:	04c12083          	lw	ra,76(sp)
204095cc:	04812403          	lw	s0,72(sp)
204095d0:	05010113          	addi	sp,sp,80
204095d4:	00008067          	ret

204095d8 <JSONReader_Create>:

/*!
 * \brief Constructor.
 * \param is the input source.
 */
tvm_crt_error_t JSONReader_Create(const char* is, JSONReader* reader) {
204095d8:	fd010113          	addi	sp,sp,-48
204095dc:	02112623          	sw	ra,44(sp)
204095e0:	02812423          	sw	s0,40(sp)
204095e4:	02912223          	sw	s1,36(sp)
204095e8:	03010413          	addi	s0,sp,48
204095ec:	fca42e23          	sw	a0,-36(s0)
204095f0:	fcb42c23          	sw	a1,-40(s0)
  memset(reader, 0, sizeof(JSONReader));
204095f4:	04400613          	li	a2,68
204095f8:	00000593          	li	a1,0
204095fc:	fd842503          	lw	a0,-40(s0)
20409600:	793090ef          	jal	ra,20413592 <memset>
  tvm_crt_error_t err = SeqCreate(200, &reader->scope_counter_);
20409604:	fd842783          	lw	a5,-40(s0)
20409608:	01078793          	addi	a5,a5,16
2040960c:	00078613          	mv	a2,a5
20409610:	0c800513          	li	a0,200
20409614:	00000593          	li	a1,0
20409618:	954ff0ef          	jal	ra,2040876c <SeqCreate>
2040961c:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20409620:	fec42783          	lw	a5,-20(s0)
20409624:	00078663          	beqz	a5,20409630 <JSONReader_Create+0x58>
    return err;
20409628:	fec42783          	lw	a5,-20(s0)
2040962c:	1780006f          	j	204097a4 <JSONReader_Create+0x1cc>
  }
  reader->NextChar = JSONReader_NextChar;
20409630:	fd842783          	lw	a5,-40(s0)
20409634:	fffff717          	auipc	a4,0xfffff
20409638:	2b870713          	addi	a4,a4,696 # 204088ec <JSONReader_NextChar>
2040963c:	00e7aa23          	sw	a4,20(a5)
  reader->PeekNextChar = JSONReader_PeekNextChar;
20409640:	fd842783          	lw	a5,-40(s0)
20409644:	fffff717          	auipc	a4,0xfffff
20409648:	2f070713          	addi	a4,a4,752 # 20408934 <JSONReader_PeekNextChar>
2040964c:	00e7ae23          	sw	a4,28(a5)
  reader->NextNonSpace = JSONReader_NextNonSpace;
20409650:	fd842783          	lw	a5,-40(s0)
20409654:	fffff717          	auipc	a4,0xfffff
20409658:	30c70713          	addi	a4,a4,780 # 20408960 <JSONReader_NextNonSpace>
2040965c:	00e7ac23          	sw	a4,24(a5)
  reader->PeekNextNonSpace = JSONReader_PeekNextNonSpace;
20409660:	fd842783          	lw	a5,-40(s0)
20409664:	fffff717          	auipc	a4,0xfffff
20409668:	3a470713          	addi	a4,a4,932 # 20408a08 <JSONReader_PeekNextNonSpace>
2040966c:	02e7a023          	sw	a4,32(a5)
  reader->ReadString = JSONReader_ReadString;
20409670:	fd842783          	lw	a5,-40(s0)
20409674:	fffff717          	auipc	a4,0xfffff
20409678:	45470713          	addi	a4,a4,1108 # 20408ac8 <JSONReader_ReadString>
2040967c:	02e7a623          	sw	a4,44(a5)
  reader->ReadUnsignedInteger = JSONReader_ReadUnsignedInteger;
20409680:	fd842783          	lw	a5,-40(s0)
20409684:	fffff717          	auipc	a4,0xfffff
20409688:	6c870713          	addi	a4,a4,1736 # 20408d4c <JSONReader_ReadUnsignedInteger>
2040968c:	02e7a223          	sw	a4,36(a5)
  reader->ReadInteger = JSONReader_ReadInteger;
20409690:	fd842783          	lw	a5,-40(s0)
20409694:	fffff717          	auipc	a4,0xfffff
20409698:	74470713          	addi	a4,a4,1860 # 20408dd8 <JSONReader_ReadInteger>
2040969c:	02e7a423          	sw	a4,40(a5)
  reader->BeginArray = JSONReader_BeginArray;
204096a0:	fd842783          	lw	a5,-40(s0)
204096a4:	00000717          	auipc	a4,0x0
204096a8:	a7070713          	addi	a4,a4,-1424 # 20409114 <JSONReader_BeginArray>
204096ac:	02e7a823          	sw	a4,48(a5)
  reader->BeginObject = JSONReader_BeginObject;
204096b0:	fd842783          	lw	a5,-40(s0)
204096b4:	fffff717          	auipc	a4,0xfffff
204096b8:	7c070713          	addi	a4,a4,1984 # 20408e74 <JSONReader_BeginObject>
204096bc:	02e7aa23          	sw	a4,52(a5)
  reader->NextArrayItem = JSONReader_NextArrayItem;
204096c0:	fd842783          	lw	a5,-40(s0)
204096c4:	00000717          	auipc	a4,0x0
204096c8:	aec70713          	addi	a4,a4,-1300 # 204091b0 <JSONReader_NextArrayItem>
204096cc:	02e7ae23          	sw	a4,60(a5)
  reader->NextObjectItem = JSONReader_NextObjectItem;
204096d0:	fd842783          	lw	a5,-40(s0)
204096d4:	00000717          	auipc	a4,0x0
204096d8:	83c70713          	addi	a4,a4,-1988 # 20408f10 <JSONReader_NextObjectItem>
204096dc:	02e7ac23          	sw	a4,56(a5)
  reader->ArrayLength = JSONReader_ArrayLength;
204096e0:	fd842783          	lw	a5,-40(s0)
204096e4:	00000717          	auipc	a4,0x0
204096e8:	c2070713          	addi	a4,a4,-992 # 20409304 <JSONReader_ArrayLength>
204096ec:	04e7a023          	sw	a4,64(a5)

  DLDevice dev = {kDLCPU, 0};
204096f0:	00100793          	li	a5,1
204096f4:	fef42223          	sw	a5,-28(s0)
204096f8:	fe042423          	sw	zero,-24(s0)
  err = TVMPlatformMemoryAllocate(strlen(is) + 1, dev, (void**)&reader->is_);
204096fc:	fdc42503          	lw	a0,-36(s0)
20409700:	12c0a0ef          	jal	ra,2041382c <strlen>
20409704:	00050793          	mv	a5,a0
20409708:	00178793          	addi	a5,a5,1
2040970c:	fd842703          	lw	a4,-40(s0)
20409710:	00070693          	mv	a3,a4
20409714:	fe442583          	lw	a1,-28(s0)
20409718:	fe842603          	lw	a2,-24(s0)
2040971c:	00078513          	mv	a0,a5
20409720:	e00f70ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
20409724:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
20409728:	fec42783          	lw	a5,-20(s0)
2040972c:	00078663          	beqz	a5,20409738 <JSONReader_Create+0x160>
    return err;
20409730:	fec42783          	lw	a5,-20(s0)
20409734:	0700006f          	j	204097a4 <JSONReader_Create+0x1cc>
  }

  memset(reader->is_, 0, strlen(is) + 1);
20409738:	fd842783          	lw	a5,-40(s0)
2040973c:	0007a483          	lw	s1,0(a5)
20409740:	fdc42503          	lw	a0,-36(s0)
20409744:	0e80a0ef          	jal	ra,2041382c <strlen>
20409748:	00050793          	mv	a5,a0
2040974c:	00178793          	addi	a5,a5,1
20409750:	00078613          	mv	a2,a5
20409754:	00000593          	li	a1,0
20409758:	00048513          	mv	a0,s1
2040975c:	637090ef          	jal	ra,20413592 <memset>
  snprintf(reader->is_, strlen(is) + 1, "%s", is);
20409760:	fd842783          	lw	a5,-40(s0)
20409764:	0007a483          	lw	s1,0(a5)
20409768:	fdc42503          	lw	a0,-36(s0)
2040976c:	0c00a0ef          	jal	ra,2041382c <strlen>
20409770:	00050793          	mv	a5,a0
20409774:	00178793          	addi	a5,a5,1
20409778:	fdc42683          	lw	a3,-36(s0)
2040977c:	00017617          	auipc	a2,0x17
20409780:	75460613          	addi	a2,a2,1876 # 20420ed0 <__func__.3846+0xcf0>
20409784:	00078593          	mv	a1,a5
20409788:	00048513          	mv	a0,s1
2040978c:	717090ef          	jal	ra,204136a2 <snprintf>
  reader->isptr = reader->is_;
20409790:	fd842783          	lw	a5,-40(s0)
20409794:	0007a703          	lw	a4,0(a5)
20409798:	fd842783          	lw	a5,-40(s0)
2040979c:	00e7a223          	sw	a4,4(a5)
  return err;
204097a0:	fec42783          	lw	a5,-20(s0)
}
204097a4:	00078513          	mv	a0,a5
204097a8:	02c12083          	lw	ra,44(sp)
204097ac:	02812403          	lw	s0,40(sp)
204097b0:	02412483          	lw	s1,36(sp)
204097b4:	03010113          	addi	sp,sp,48
204097b8:	00008067          	ret

204097bc <JSONReader_Release>:

tvm_crt_error_t JSONReader_Release(JSONReader* reader) {
204097bc:	fd010113          	addi	sp,sp,-48
204097c0:	02112623          	sw	ra,44(sp)
204097c4:	02812423          	sw	s0,40(sp)
204097c8:	03010413          	addi	s0,sp,48
204097cc:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t err = SeqRelease(reader->scope_counter_);
204097d0:	fdc42783          	lw	a5,-36(s0)
204097d4:	0107a783          	lw	a5,16(a5)
204097d8:	00078513          	mv	a0,a5
204097dc:	89cff0ef          	jal	ra,20408878 <SeqRelease>
204097e0:	fea42623          	sw	a0,-20(s0)
  if (err != kTvmErrorNoError) {
204097e4:	fec42783          	lw	a5,-20(s0)
204097e8:	00078663          	beqz	a5,204097f4 <JSONReader_Release+0x38>
    return err;
204097ec:	fec42783          	lw	a5,-20(s0)
204097f0:	02c0006f          	j	2040981c <JSONReader_Release+0x60>
  }

  DLDevice dev = {kDLCPU, 0};
204097f4:	00100793          	li	a5,1
204097f8:	fef42223          	sw	a5,-28(s0)
204097fc:	fe042423          	sw	zero,-24(s0)
  return TVMPlatformMemoryFree(reader->is_, dev);
20409800:	fdc42783          	lw	a5,-36(s0)
20409804:	0007a783          	lw	a5,0(a5)
20409808:	fe442583          	lw	a1,-28(s0)
2040980c:	fe842603          	lw	a2,-24(s0)
20409810:	00078513          	mv	a0,a5
20409814:	d70f70ef          	jal	ra,20400d84 <TVMPlatformMemoryFree>
20409818:	00050793          	mv	a5,a0
}
2040981c:	00078513          	mv	a0,a5
20409820:	02c12083          	lw	ra,44(sp)
20409824:	02812403          	lw	s0,40(sp)
20409828:	03010113          	addi	sp,sp,48
2040982c:	00008067          	ret

20409830 <TVMGraphExecutorModule_Create>:
} GraphExecutorModule;

static GraphExecutorModule graph_executor;

int32_t TVMGraphExecutorModule_Create(TVMValue* args, int* tcodes, int nargs, TVMValue* ret_values,
                                      int* ret_tcodes, void* resource_handle) {
20409830:	fc010113          	addi	sp,sp,-64
20409834:	02112e23          	sw	ra,60(sp)
20409838:	02812c23          	sw	s0,56(sp)
2040983c:	04010413          	addi	s0,sp,64
20409840:	fca42e23          	sw	a0,-36(s0)
20409844:	fcb42c23          	sw	a1,-40(s0)
20409848:	fcc42a23          	sw	a2,-44(s0)
2040984c:	fcd42823          	sw	a3,-48(s0)
20409850:	fce42623          	sw	a4,-52(s0)
20409854:	fcf42423          	sw	a5,-56(s0)
  if (graph_executor.executor != NULL) {
20409858:	5fbf7797          	auipc	a5,0x5fbf7
2040985c:	64c78793          	addi	a5,a5,1612 # 80000ea4 <graph_executor>
20409860:	0047a783          	lw	a5,4(a5)
20409864:	00078663          	beqz	a5,20409870 <TVMGraphExecutorModule_Create+0x40>
    return kTvmErrorGraphModuleAlreadyCreated;
20409868:	70000793          	li	a5,1792
2040986c:	1780006f          	j	204099e4 <TVMGraphExecutorModule_Create+0x1b4>
  }

  if (nargs != 4) {
20409870:	fd442703          	lw	a4,-44(s0)
20409874:	00400793          	li	a5,4
20409878:	00f70863          	beq	a4,a5,20409888 <TVMGraphExecutorModule_Create+0x58>
    return kTvmErrorFunctionCallNumArguments;
2040987c:	000017b7          	lui	a5,0x1
20409880:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409884:	1600006f          	j	204099e4 <TVMGraphExecutorModule_Create+0x1b4>
  }

  if (tcodes[0] != kTVMStr || tcodes[1] != kTVMModuleHandle || tcodes[2] != kTVMArgInt ||
20409888:	fd842783          	lw	a5,-40(s0)
2040988c:	0007a703          	lw	a4,0(a5)
20409890:	00b00793          	li	a5,11
20409894:	02f71c63          	bne	a4,a5,204098cc <TVMGraphExecutorModule_Create+0x9c>
20409898:	fd842783          	lw	a5,-40(s0)
2040989c:	00478793          	addi	a5,a5,4
204098a0:	0007a703          	lw	a4,0(a5)
204098a4:	00900793          	li	a5,9
204098a8:	02f71263          	bne	a4,a5,204098cc <TVMGraphExecutorModule_Create+0x9c>
204098ac:	fd842783          	lw	a5,-40(s0)
204098b0:	00878793          	addi	a5,a5,8
204098b4:	0007a783          	lw	a5,0(a5)
204098b8:	00079a63          	bnez	a5,204098cc <TVMGraphExecutorModule_Create+0x9c>
      tcodes[3] != kTVMArgInt) {
204098bc:	fd842783          	lw	a5,-40(s0)
204098c0:	00c78793          	addi	a5,a5,12
204098c4:	0007a783          	lw	a5,0(a5)
  if (tcodes[0] != kTVMStr || tcodes[1] != kTVMModuleHandle || tcodes[2] != kTVMArgInt ||
204098c8:	00078863          	beqz	a5,204098d8 <TVMGraphExecutorModule_Create+0xa8>
    return kTvmErrorFunctionCallWrongArgType;
204098cc:	000017b7          	lui	a5,0x1
204098d0:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
204098d4:	1100006f          	j	204099e4 <TVMGraphExecutorModule_Create+0x1b4>
  }

  if (args[2].v_int64 != kDLCPU || args[3].v_int64 != 0) {
204098d8:	fdc42783          	lw	a5,-36(s0)
204098dc:	01078793          	addi	a5,a5,16
204098e0:	0047a803          	lw	a6,4(a5)
204098e4:	0007a783          	lw	a5,0(a5)
204098e8:	00078693          	mv	a3,a5
204098ec:	00100713          	li	a4,1
204098f0:	02e69463          	bne	a3,a4,20409918 <TVMGraphExecutorModule_Create+0xe8>
204098f4:	00080793          	mv	a5,a6
204098f8:	02079063          	bnez	a5,20409918 <TVMGraphExecutorModule_Create+0xe8>
204098fc:	fdc42783          	lw	a5,-36(s0)
20409900:	01878793          	addi	a5,a5,24
20409904:	0007a683          	lw	a3,0(a5)
20409908:	0047a703          	lw	a4,4(a5)
2040990c:	00068793          	mv	a5,a3
20409910:	00e7e7b3          	or	a5,a5,a4
20409914:	00078663          	beqz	a5,20409920 <TVMGraphExecutorModule_Create+0xf0>
    return kTvmErrorGraphModuleBadContext;
20409918:	70100793          	li	a5,1793
2040991c:	0c80006f          	j	204099e4 <TVMGraphExecutorModule_Create+0x1b4>
  }

  DLDevice dev = {(DLDeviceType)args[2].v_int64, (int)args[3].v_int64};
20409920:	fdc42783          	lw	a5,-36(s0)
20409924:	01078793          	addi	a5,a5,16
20409928:	0047a803          	lw	a6,4(a5)
2040992c:	0007a783          	lw	a5,0(a5)
20409930:	fef42223          	sw	a5,-28(s0)
20409934:	fdc42783          	lw	a5,-36(s0)
20409938:	01878793          	addi	a5,a5,24
2040993c:	0047a803          	lw	a6,4(a5)
20409940:	0007a783          	lw	a5,0(a5)
20409944:	fef42423          	sw	a5,-24(s0)
  int ret_value =
      TVMGraphExecutor_Create(args[0].v_str, args[1].v_handle, &dev, &graph_executor.executor);
20409948:	fdc42783          	lw	a5,-36(s0)
2040994c:	0007a703          	lw	a4,0(a5)
20409950:	fdc42783          	lw	a5,-36(s0)
20409954:	00878793          	addi	a5,a5,8
20409958:	0007a783          	lw	a5,0(a5)
  int ret_value =
2040995c:	fe440613          	addi	a2,s0,-28
20409960:	5fbf7697          	auipc	a3,0x5fbf7
20409964:	54868693          	addi	a3,a3,1352 # 80000ea8 <graph_executor+0x4>
20409968:	00078593          	mv	a1,a5
2040996c:	00070513          	mv	a0,a4
20409970:	e44fe0ef          	jal	ra,20407fb4 <TVMGraphExecutor_Create>
20409974:	fea42623          	sw	a0,-20(s0)
  if (ret_value != 0) {
20409978:	fec42783          	lw	a5,-20(s0)
2040997c:	00078663          	beqz	a5,20409988 <TVMGraphExecutorModule_Create+0x158>
    return ret_value;
20409980:	fec42783          	lw	a5,-20(s0)
20409984:	0600006f          	j	204099e4 <TVMGraphExecutorModule_Create+0x1b4>
  }

  TVMModuleHandle out;
  ret_value = TVMModCreateFromCModule(&graph_executor.mod, &out);
20409988:	fe040793          	addi	a5,s0,-32
2040998c:	00078593          	mv	a1,a5
20409990:	5fbf7517          	auipc	a0,0x5fbf7
20409994:	51450513          	addi	a0,a0,1300 # 80000ea4 <graph_executor>
20409998:	fc5f70ef          	jal	ra,2040195c <TVMModCreateFromCModule>
2040999c:	fea42623          	sw	a0,-20(s0)
  if (ret_value != 0) {
204099a0:	fec42783          	lw	a5,-20(s0)
204099a4:	02078263          	beqz	a5,204099c8 <TVMGraphExecutorModule_Create+0x198>
    ret_tcodes[0] = kTVMNullptr;
204099a8:	fcc42783          	lw	a5,-52(s0)
204099ac:	00400713          	li	a4,4
204099b0:	00e7a023          	sw	a4,0(a5)
    TVMGraphExecutor_Release(&graph_executor.executor);
204099b4:	5fbf7517          	auipc	a0,0x5fbf7
204099b8:	4f450513          	addi	a0,a0,1268 # 80000ea8 <graph_executor+0x4>
204099bc:	ebcfe0ef          	jal	ra,20408078 <TVMGraphExecutor_Release>
    return ret_value;
204099c0:	fec42783          	lw	a5,-20(s0)
204099c4:	0200006f          	j	204099e4 <TVMGraphExecutorModule_Create+0x1b4>
  }

  ret_values[0].v_handle = out;
204099c8:	fe042703          	lw	a4,-32(s0)
204099cc:	fd042783          	lw	a5,-48(s0)
204099d0:	00e7a023          	sw	a4,0(a5)
  ret_tcodes[0] = kTVMModuleHandle;
204099d4:	fcc42783          	lw	a5,-52(s0)
204099d8:	00900713          	li	a4,9
204099dc:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
204099e0:	00000793          	li	a5,0
}
204099e4:	00078513          	mv	a0,a5
204099e8:	03c12083          	lw	ra,60(sp)
204099ec:	03812403          	lw	s0,56(sp)
204099f0:	04010113          	addi	sp,sp,64
204099f4:	00008067          	ret

204099f8 <TVMGraphExecutorModule_GetInput>:

int32_t TVMGraphExecutorModule_GetInput(TVMValue* args, int* tcodes, int nargs,
                                        TVMValue* ret_values, int* ret_tcodes,
                                        void* resource_handle) {
204099f8:	fc010113          	addi	sp,sp,-64
204099fc:	02112e23          	sw	ra,60(sp)
20409a00:	02812c23          	sw	s0,56(sp)
20409a04:	04010413          	addi	s0,sp,64
20409a08:	fca42e23          	sw	a0,-36(s0)
20409a0c:	fcb42c23          	sw	a1,-40(s0)
20409a10:	fcc42a23          	sw	a2,-44(s0)
20409a14:	fcd42823          	sw	a3,-48(s0)
20409a18:	fce42623          	sw	a4,-52(s0)
20409a1c:	fcf42423          	sw	a5,-56(s0)
  if (nargs != 1) {
20409a20:	fd442703          	lw	a4,-44(s0)
20409a24:	00100793          	li	a5,1
20409a28:	00f70863          	beq	a4,a5,20409a38 <TVMGraphExecutorModule_GetInput+0x40>
    return kTvmErrorFunctionCallNumArguments;
20409a2c:	000017b7          	lui	a5,0x1
20409a30:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409a34:	0d80006f          	j	20409b0c <TVMGraphExecutorModule_GetInput+0x114>
  }

  if (tcodes[0] != kTVMStr) {
20409a38:	fd842783          	lw	a5,-40(s0)
20409a3c:	0007a703          	lw	a4,0(a5)
20409a40:	00b00793          	li	a5,11
20409a44:	00f70863          	beq	a4,a5,20409a54 <TVMGraphExecutorModule_GetInput+0x5c>
    return kTvmErrorFunctionCallWrongArgType;
20409a48:	000017b7          	lui	a5,0x1
20409a4c:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
20409a50:	0bc0006f          	j	20409b0c <TVMGraphExecutorModule_GetInput+0x114>
  }

  int index = TVMGraphExecutor_GetInputIndex(graph_executor.executor, args[0].v_str);
20409a54:	5fbf7797          	auipc	a5,0x5fbf7
20409a58:	45078793          	addi	a5,a5,1104 # 80000ea4 <graph_executor>
20409a5c:	0047a703          	lw	a4,4(a5)
20409a60:	fdc42783          	lw	a5,-36(s0)
20409a64:	0007a783          	lw	a5,0(a5)
20409a68:	00078593          	mv	a1,a5
20409a6c:	00070513          	mv	a0,a4
20409a70:	a41fc0ef          	jal	ra,204064b0 <TVMGraphExecutor_GetInputIndex>
20409a74:	fea42623          	sw	a0,-20(s0)
  if (index < 0) {
20409a78:	fec42783          	lw	a5,-20(s0)
20409a7c:	0007d663          	bgez	a5,20409a88 <TVMGraphExecutorModule_GetInput+0x90>
    return kTvmErrorGraphModuleNoSuchInput;
20409a80:	70200793          	li	a5,1794
20409a84:	0880006f          	j	20409b0c <TVMGraphExecutorModule_GetInput+0x114>
  }

  uint32_t eid = TVMGraphExecutor_GetEntryId(graph_executor.executor,
20409a88:	5fbf7797          	auipc	a5,0x5fbf7
20409a8c:	41c78793          	addi	a5,a5,1052 # 80000ea4 <graph_executor>
20409a90:	0047a683          	lw	a3,4(a5)
                                             graph_executor.executor->input_nodes[index], 0);
20409a94:	5fbf7797          	auipc	a5,0x5fbf7
20409a98:	41078793          	addi	a5,a5,1040 # 80000ea4 <graph_executor>
20409a9c:	0047a783          	lw	a5,4(a5)
20409aa0:	0087a703          	lw	a4,8(a5)
20409aa4:	fec42783          	lw	a5,-20(s0)
20409aa8:	00279793          	slli	a5,a5,0x2
20409aac:	00f707b3          	add	a5,a4,a5
  uint32_t eid = TVMGraphExecutor_GetEntryId(graph_executor.executor,
20409ab0:	0007a783          	lw	a5,0(a5)
20409ab4:	00000613          	li	a2,0
20409ab8:	00078593          	mv	a1,a5
20409abc:	00068513          	mv	a0,a3
20409ac0:	981fc0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
20409ac4:	fea42423          	sw	a0,-24(s0)
  ret_values[0].v_handle = (void*)&graph_executor.executor->data_entry[eid].dl_tensor;
20409ac8:	5fbf7797          	auipc	a5,0x5fbf7
20409acc:	3dc78793          	addi	a5,a5,988 # 80000ea4 <graph_executor>
20409ad0:	0047a783          	lw	a5,4(a5)
20409ad4:	0587a683          	lw	a3,88(a5)
20409ad8:	fe842703          	lw	a4,-24(s0)
20409adc:	00070793          	mv	a5,a4
20409ae0:	00279793          	slli	a5,a5,0x2
20409ae4:	00e787b3          	add	a5,a5,a4
20409ae8:	00379793          	slli	a5,a5,0x3
20409aec:	00f687b3          	add	a5,a3,a5
20409af0:	00078713          	mv	a4,a5
20409af4:	fd042783          	lw	a5,-48(s0)
20409af8:	00e7a023          	sw	a4,0(a5)
  ret_tcodes[0] = kTVMNDArrayHandle;
20409afc:	fcc42783          	lw	a5,-52(s0)
20409b00:	00d00713          	li	a4,13
20409b04:	00e7a023          	sw	a4,0(a5)
  return 0;
20409b08:	00000793          	li	a5,0
}
20409b0c:	00078513          	mv	a0,a5
20409b10:	03c12083          	lw	ra,60(sp)
20409b14:	03812403          	lw	s0,56(sp)
20409b18:	04010113          	addi	sp,sp,64
20409b1c:	00008067          	ret

20409b20 <TVMGraphExecutorModule_GetNumInputs>:

int32_t TVMGraphExecutorModule_GetNumInputs(TVMValue* args, int* tcodes, int nargs,
                                            TVMValue* ret_values, int* ret_tcodes,
                                            void* resource_handle) {
20409b20:	fd010113          	addi	sp,sp,-48
20409b24:	02112623          	sw	ra,44(sp)
20409b28:	02812423          	sw	s0,40(sp)
20409b2c:	03212223          	sw	s2,36(sp)
20409b30:	03312023          	sw	s3,32(sp)
20409b34:	03010413          	addi	s0,sp,48
20409b38:	fea42623          	sw	a0,-20(s0)
20409b3c:	feb42423          	sw	a1,-24(s0)
20409b40:	fec42223          	sw	a2,-28(s0)
20409b44:	fed42023          	sw	a3,-32(s0)
20409b48:	fce42e23          	sw	a4,-36(s0)
20409b4c:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 0) {
20409b50:	fe442783          	lw	a5,-28(s0)
20409b54:	00078863          	beqz	a5,20409b64 <TVMGraphExecutorModule_GetNumInputs+0x44>
    return kTvmErrorFunctionCallNumArguments;
20409b58:	000017b7          	lui	a5,0x1
20409b5c:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409b60:	0300006f          	j	20409b90 <TVMGraphExecutorModule_GetNumInputs+0x70>
  }

  ret_values[0].v_int64 = TVMGraphExecutor_GetNumInputs();
20409b64:	925fc0ef          	jal	ra,20406488 <TVMGraphExecutor_GetNumInputs>
20409b68:	00050793          	mv	a5,a0
20409b6c:	00078913          	mv	s2,a5
20409b70:	41f7d793          	srai	a5,a5,0x1f
20409b74:	00078993          	mv	s3,a5
20409b78:	fe042783          	lw	a5,-32(s0)
20409b7c:	0127a023          	sw	s2,0(a5)
20409b80:	0137a223          	sw	s3,4(a5)
  ret_tcodes[0] = kTVMArgInt;
20409b84:	fdc42783          	lw	a5,-36(s0)
20409b88:	0007a023          	sw	zero,0(a5)
  return 0;
20409b8c:	00000793          	li	a5,0
}
20409b90:	00078513          	mv	a0,a5
20409b94:	02c12083          	lw	ra,44(sp)
20409b98:	02812403          	lw	s0,40(sp)
20409b9c:	02412903          	lw	s2,36(sp)
20409ba0:	02012983          	lw	s3,32(sp)
20409ba4:	03010113          	addi	sp,sp,48
20409ba8:	00008067          	ret

20409bac <TVMGraphExecutorModule_GetNumOutputs>:

int32_t TVMGraphExecutorModule_GetNumOutputs(TVMValue* args, int* tcodes, int nargs,
                                             TVMValue* ret_values, int* ret_tcodes,
                                             void* resource_handle) {
20409bac:	fd010113          	addi	sp,sp,-48
20409bb0:	02112623          	sw	ra,44(sp)
20409bb4:	02812423          	sw	s0,40(sp)
20409bb8:	03212223          	sw	s2,36(sp)
20409bbc:	03312023          	sw	s3,32(sp)
20409bc0:	03010413          	addi	s0,sp,48
20409bc4:	fea42623          	sw	a0,-20(s0)
20409bc8:	feb42423          	sw	a1,-24(s0)
20409bcc:	fec42223          	sw	a2,-28(s0)
20409bd0:	fed42023          	sw	a3,-32(s0)
20409bd4:	fce42e23          	sw	a4,-36(s0)
20409bd8:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 0) {
20409bdc:	fe442783          	lw	a5,-28(s0)
20409be0:	00078863          	beqz	a5,20409bf0 <TVMGraphExecutorModule_GetNumOutputs+0x44>
    return kTvmErrorFunctionCallNumArguments;
20409be4:	000017b7          	lui	a5,0x1
20409be8:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409bec:	0400006f          	j	20409c2c <TVMGraphExecutorModule_GetNumOutputs+0x80>
  }

  ret_values[0].v_int64 = TVMGraphExecutor_GetNumOutputs(graph_executor.executor);
20409bf0:	5fbf7797          	auipc	a5,0x5fbf7
20409bf4:	2b478793          	addi	a5,a5,692 # 80000ea4 <graph_executor>
20409bf8:	0047a783          	lw	a5,4(a5)
20409bfc:	00078513          	mv	a0,a5
20409c00:	954fd0ef          	jal	ra,20406d54 <TVMGraphExecutor_GetNumOutputs>
20409c04:	00050793          	mv	a5,a0
20409c08:	00078913          	mv	s2,a5
20409c0c:	41f7d793          	srai	a5,a5,0x1f
20409c10:	00078993          	mv	s3,a5
20409c14:	fe042783          	lw	a5,-32(s0)
20409c18:	0127a023          	sw	s2,0(a5)
20409c1c:	0137a223          	sw	s3,4(a5)
  ret_tcodes[0] = kTVMArgInt;
20409c20:	fdc42783          	lw	a5,-36(s0)
20409c24:	0007a023          	sw	zero,0(a5)
  return 0;
20409c28:	00000793          	li	a5,0
}
20409c2c:	00078513          	mv	a0,a5
20409c30:	02c12083          	lw	ra,44(sp)
20409c34:	02812403          	lw	s0,40(sp)
20409c38:	02412903          	lw	s2,36(sp)
20409c3c:	02012983          	lw	s3,32(sp)
20409c40:	03010113          	addi	sp,sp,48
20409c44:	00008067          	ret

20409c48 <TVMGraphExecutorModule_GetOutput>:

int32_t TVMGraphExecutorModule_GetOutput(TVMValue* args, int* tcodes, int nargs,
                                         TVMValue* ret_values, int* ret_tcodes,
                                         void* resource_handle) {
20409c48:	fc010113          	addi	sp,sp,-64
20409c4c:	02112e23          	sw	ra,60(sp)
20409c50:	02812c23          	sw	s0,56(sp)
20409c54:	04010413          	addi	s0,sp,64
20409c58:	fca42e23          	sw	a0,-36(s0)
20409c5c:	fcb42c23          	sw	a1,-40(s0)
20409c60:	fcc42a23          	sw	a2,-44(s0)
20409c64:	fcd42823          	sw	a3,-48(s0)
20409c68:	fce42623          	sw	a4,-52(s0)
20409c6c:	fcf42423          	sw	a5,-56(s0)
  if (nargs != 1) {
20409c70:	fd442703          	lw	a4,-44(s0)
20409c74:	00100793          	li	a5,1
20409c78:	00f70863          	beq	a4,a5,20409c88 <TVMGraphExecutorModule_GetOutput+0x40>
    return kTvmErrorFunctionCallNumArguments;
20409c7c:	000017b7          	lui	a5,0x1
20409c80:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409c84:	1080006f          	j	20409d8c <TVMGraphExecutorModule_GetOutput+0x144>
  }

  if (tcodes[0] != kTVMArgInt) {
20409c88:	fd842783          	lw	a5,-40(s0)
20409c8c:	0007a783          	lw	a5,0(a5)
20409c90:	00078863          	beqz	a5,20409ca0 <TVMGraphExecutorModule_GetOutput+0x58>
    return kTvmErrorFunctionCallWrongArgType;
20409c94:	000017b7          	lui	a5,0x1
20409c98:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
20409c9c:	0f00006f          	j	20409d8c <TVMGraphExecutorModule_GetOutput+0x144>
  }

  int output_index = args[0].v_int64;
20409ca0:	fdc42783          	lw	a5,-36(s0)
20409ca4:	0047a803          	lw	a6,4(a5)
20409ca8:	0007a783          	lw	a5,0(a5)
20409cac:	fef42623          	sw	a5,-20(s0)
  if (output_index < 0 || output_index > TVMGraphExecutor_GetNumOutputs(graph_executor.executor)) {
20409cb0:	fec42783          	lw	a5,-20(s0)
20409cb4:	0207c263          	bltz	a5,20409cd8 <TVMGraphExecutorModule_GetOutput+0x90>
20409cb8:	5fbf7797          	auipc	a5,0x5fbf7
20409cbc:	1ec78793          	addi	a5,a5,492 # 80000ea4 <graph_executor>
20409cc0:	0047a783          	lw	a5,4(a5)
20409cc4:	00078513          	mv	a0,a5
20409cc8:	88cfd0ef          	jal	ra,20406d54 <TVMGraphExecutor_GetNumOutputs>
20409ccc:	00050713          	mv	a4,a0
20409cd0:	fec42783          	lw	a5,-20(s0)
20409cd4:	00f75663          	ble	a5,a4,20409ce0 <TVMGraphExecutorModule_GetOutput+0x98>
    return kTvmErrorGraphModuleNoSuchInput;
20409cd8:	70200793          	li	a5,1794
20409cdc:	0b00006f          	j	20409d8c <TVMGraphExecutorModule_GetOutput+0x144>
  }

  uint32_t nid = graph_executor.executor->outputs[output_index].node_id;
20409ce0:	5fbf7797          	auipc	a5,0x5fbf7
20409ce4:	1c478793          	addi	a5,a5,452 # 80000ea4 <graph_executor>
20409ce8:	0047a783          	lw	a5,4(a5)
20409cec:	0187a703          	lw	a4,24(a5)
20409cf0:	fec42783          	lw	a5,-20(s0)
20409cf4:	00479793          	slli	a5,a5,0x4
20409cf8:	00f707b3          	add	a5,a4,a5
20409cfc:	0007a783          	lw	a5,0(a5)
20409d00:	fef42423          	sw	a5,-24(s0)
  uint32_t index = graph_executor.executor->outputs[output_index].index;
20409d04:	5fbf7797          	auipc	a5,0x5fbf7
20409d08:	1a078793          	addi	a5,a5,416 # 80000ea4 <graph_executor>
20409d0c:	0047a783          	lw	a5,4(a5)
20409d10:	0187a703          	lw	a4,24(a5)
20409d14:	fec42783          	lw	a5,-20(s0)
20409d18:	00479793          	slli	a5,a5,0x4
20409d1c:	00f707b3          	add	a5,a4,a5
20409d20:	0047a783          	lw	a5,4(a5)
20409d24:	fef42223          	sw	a5,-28(s0)
  uint32_t eid = TVMGraphExecutor_GetEntryId(graph_executor.executor, nid, index);
20409d28:	5fbf7797          	auipc	a5,0x5fbf7
20409d2c:	17c78793          	addi	a5,a5,380 # 80000ea4 <graph_executor>
20409d30:	0047a783          	lw	a5,4(a5)
20409d34:	fe442603          	lw	a2,-28(s0)
20409d38:	fe842583          	lw	a1,-24(s0)
20409d3c:	00078513          	mv	a0,a5
20409d40:	f00fc0ef          	jal	ra,20406440 <TVMGraphExecutor_GetEntryId>
20409d44:	fea42023          	sw	a0,-32(s0)

  ret_values[0].v_handle = (void*)&(graph_executor.executor->data_entry[eid].dl_tensor);
20409d48:	5fbf7797          	auipc	a5,0x5fbf7
20409d4c:	15c78793          	addi	a5,a5,348 # 80000ea4 <graph_executor>
20409d50:	0047a783          	lw	a5,4(a5)
20409d54:	0587a683          	lw	a3,88(a5)
20409d58:	fe042703          	lw	a4,-32(s0)
20409d5c:	00070793          	mv	a5,a4
20409d60:	00279793          	slli	a5,a5,0x2
20409d64:	00e787b3          	add	a5,a5,a4
20409d68:	00379793          	slli	a5,a5,0x3
20409d6c:	00f687b3          	add	a5,a3,a5
20409d70:	00078713          	mv	a4,a5
20409d74:	fd042783          	lw	a5,-48(s0)
20409d78:	00e7a023          	sw	a4,0(a5)
  ret_tcodes[0] = kTVMNDArrayHandle;
20409d7c:	fcc42783          	lw	a5,-52(s0)
20409d80:	00d00713          	li	a4,13
20409d84:	00e7a023          	sw	a4,0(a5)
  return 0;
20409d88:	00000793          	li	a5,0
}
20409d8c:	00078513          	mv	a0,a5
20409d90:	03c12083          	lw	ra,60(sp)
20409d94:	03812403          	lw	s0,56(sp)
20409d98:	04010113          	addi	sp,sp,64
20409d9c:	00008067          	ret

20409da0 <TVMGraphExecutorModule_LoadParams>:

int32_t TVMGraphExecutorModule_LoadParams(TVMValue* args, int* tcodes, int nargs,
                                          TVMValue* ret_values, int* ret_tcodes,
                                          void* resource_handle) {
20409da0:	fc010113          	addi	sp,sp,-64
20409da4:	02112e23          	sw	ra,60(sp)
20409da8:	02812c23          	sw	s0,56(sp)
20409dac:	04010413          	addi	s0,sp,64
20409db0:	fca42e23          	sw	a0,-36(s0)
20409db4:	fcb42c23          	sw	a1,-40(s0)
20409db8:	fcc42a23          	sw	a2,-44(s0)
20409dbc:	fcd42823          	sw	a3,-48(s0)
20409dc0:	fce42623          	sw	a4,-52(s0)
20409dc4:	fcf42423          	sw	a5,-56(s0)
  if (nargs != 1) {
20409dc8:	fd442703          	lw	a4,-44(s0)
20409dcc:	00100793          	li	a5,1
20409dd0:	00f70863          	beq	a4,a5,20409de0 <TVMGraphExecutorModule_LoadParams+0x40>
    return kTvmErrorFunctionCallNumArguments;
20409dd4:	000017b7          	lui	a5,0x1
20409dd8:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409ddc:	0680006f          	j	20409e44 <TVMGraphExecutorModule_LoadParams+0xa4>
  }

  if (tcodes[0] != kTVMBytes) {
20409de0:	fd842783          	lw	a5,-40(s0)
20409de4:	0007a703          	lw	a4,0(a5)
20409de8:	00c00793          	li	a5,12
20409dec:	00f70863          	beq	a4,a5,20409dfc <TVMGraphExecutorModule_LoadParams+0x5c>
    return kTvmErrorFunctionCallWrongArgType;
20409df0:	000017b7          	lui	a5,0x1
20409df4:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
20409df8:	04c0006f          	j	20409e44 <TVMGraphExecutorModule_LoadParams+0xa4>
  }

  ret_tcodes[0] = kTVMNullptr;
20409dfc:	fcc42783          	lw	a5,-52(s0)
20409e00:	00400713          	li	a4,4
20409e04:	00e7a023          	sw	a4,0(a5)

  TVMByteArray* arr = (TVMByteArray*)args[0].v_handle;
20409e08:	fdc42783          	lw	a5,-36(s0)
20409e0c:	0007a783          	lw	a5,0(a5)
20409e10:	fef42623          	sw	a5,-20(s0)
  return TVMGraphExecutor_LoadParams(graph_executor.executor, arr->data, arr->size);
20409e14:	5fbf7797          	auipc	a5,0x5fbf7
20409e18:	09078793          	addi	a5,a5,144 # 80000ea4 <graph_executor>
20409e1c:	0047a703          	lw	a4,4(a5)
20409e20:	fec42783          	lw	a5,-20(s0)
20409e24:	0007a683          	lw	a3,0(a5)
20409e28:	fec42783          	lw	a5,-20(s0)
20409e2c:	0047a783          	lw	a5,4(a5)
20409e30:	00078613          	mv	a2,a5
20409e34:	00068593          	mv	a1,a3
20409e38:	00070513          	mv	a0,a4
20409e3c:	845fc0ef          	jal	ra,20406680 <TVMGraphExecutor_LoadParams>
20409e40:	00050793          	mv	a5,a0
}
20409e44:	00078513          	mv	a0,a5
20409e48:	03c12083          	lw	ra,60(sp)
20409e4c:	03812403          	lw	s0,56(sp)
20409e50:	04010113          	addi	sp,sp,64
20409e54:	00008067          	ret

20409e58 <TVMGraphExecutorModule_Run>:

int32_t TVMGraphExecutorModule_Run(TVMValue* args, int* tcodes, int nargs, TVMValue* ret_values,
                                   int* ret_tcodes, void* resource_handle) {
20409e58:	fd010113          	addi	sp,sp,-48
20409e5c:	02112623          	sw	ra,44(sp)
20409e60:	02812423          	sw	s0,40(sp)
20409e64:	03010413          	addi	s0,sp,48
20409e68:	fea42623          	sw	a0,-20(s0)
20409e6c:	feb42423          	sw	a1,-24(s0)
20409e70:	fec42223          	sw	a2,-28(s0)
20409e74:	fed42023          	sw	a3,-32(s0)
20409e78:	fce42e23          	sw	a4,-36(s0)
20409e7c:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 0) {
20409e80:	fe442783          	lw	a5,-28(s0)
20409e84:	00078863          	beqz	a5,20409e94 <TVMGraphExecutorModule_Run+0x3c>
    return kTvmErrorFunctionCallNumArguments;
20409e88:	000017b7          	lui	a5,0x1
20409e8c:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409e90:	0280006f          	j	20409eb8 <TVMGraphExecutorModule_Run+0x60>
  }

  TVMGraphExecutor_Run(graph_executor.executor);
20409e94:	5fbf7797          	auipc	a5,0x5fbf7
20409e98:	01078793          	addi	a5,a5,16 # 80000ea4 <graph_executor>
20409e9c:	0047a783          	lw	a5,4(a5)
20409ea0:	00078513          	mv	a0,a5
20409ea4:	dedfc0ef          	jal	ra,20406c90 <TVMGraphExecutor_Run>

  ret_tcodes[0] = kTVMNullptr;
20409ea8:	fdc42783          	lw	a5,-36(s0)
20409eac:	00400713          	li	a4,4
20409eb0:	00e7a023          	sw	a4,0(a5)
  return 0;
20409eb4:	00000793          	li	a5,0
}
20409eb8:	00078513          	mv	a0,a5
20409ebc:	02c12083          	lw	ra,44(sp)
20409ec0:	02812403          	lw	s0,40(sp)
20409ec4:	03010113          	addi	sp,sp,48
20409ec8:	00008067          	ret

20409ecc <TVMGraphExecutorModule_SetInput>:

int32_t TVMGraphExecutorModule_SetInput(TVMValue* args, int* tcodes, int nargs,
                                        TVMValue* ret_values, int* ret_tcodes,
                                        void* resource_handle) {
20409ecc:	fd010113          	addi	sp,sp,-48
20409ed0:	02112623          	sw	ra,44(sp)
20409ed4:	02812423          	sw	s0,40(sp)
20409ed8:	03010413          	addi	s0,sp,48
20409edc:	fea42623          	sw	a0,-20(s0)
20409ee0:	feb42423          	sw	a1,-24(s0)
20409ee4:	fec42223          	sw	a2,-28(s0)
20409ee8:	fed42023          	sw	a3,-32(s0)
20409eec:	fce42e23          	sw	a4,-36(s0)
20409ef0:	fcf42c23          	sw	a5,-40(s0)
  if (nargs != 2) {
20409ef4:	fe442703          	lw	a4,-28(s0)
20409ef8:	00200793          	li	a5,2
20409efc:	00f70863          	beq	a4,a5,20409f0c <TVMGraphExecutorModule_SetInput+0x40>
    return kTvmErrorFunctionCallNumArguments;
20409f00:	000017b7          	lui	a5,0x1
20409f04:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size-0x3800>
20409f08:	0740006f          	j	20409f7c <TVMGraphExecutorModule_SetInput+0xb0>
  }

  if (tcodes[0] != kTVMStr || tcodes[1] != kTVMDLTensorHandle) {
20409f0c:	fe842783          	lw	a5,-24(s0)
20409f10:	0007a703          	lw	a4,0(a5)
20409f14:	00b00793          	li	a5,11
20409f18:	00f71c63          	bne	a4,a5,20409f30 <TVMGraphExecutorModule_SetInput+0x64>
20409f1c:	fe842783          	lw	a5,-24(s0)
20409f20:	00478793          	addi	a5,a5,4
20409f24:	0007a703          	lw	a4,0(a5)
20409f28:	00700793          	li	a5,7
20409f2c:	00f70863          	beq	a4,a5,20409f3c <TVMGraphExecutorModule_SetInput+0x70>
    return kTvmErrorFunctionCallWrongArgType;
20409f30:	000017b7          	lui	a5,0x1
20409f34:	80178793          	addi	a5,a5,-2047 # 801 <__stack_size-0x37ff>
20409f38:	0440006f          	j	20409f7c <TVMGraphExecutorModule_SetInput+0xb0>
  }

  TVMGraphExecutor_SetInput(graph_executor.executor, args[0].v_str, (DLTensor*)args[1].v_handle);
20409f3c:	5fbf7797          	auipc	a5,0x5fbf7
20409f40:	f6878793          	addi	a5,a5,-152 # 80000ea4 <graph_executor>
20409f44:	0047a703          	lw	a4,4(a5)
20409f48:	fec42783          	lw	a5,-20(s0)
20409f4c:	0007a683          	lw	a3,0(a5)
20409f50:	fec42783          	lw	a5,-20(s0)
20409f54:	00878793          	addi	a5,a5,8
20409f58:	0007a783          	lw	a5,0(a5)
20409f5c:	00078613          	mv	a2,a5
20409f60:	00068593          	mv	a1,a3
20409f64:	00070513          	mv	a0,a4
20409f68:	e44fc0ef          	jal	ra,204065ac <TVMGraphExecutor_SetInput>

  ret_tcodes[0] = kTVMNullptr;
20409f6c:	fdc42783          	lw	a5,-36(s0)
20409f70:	00400713          	li	a4,4
20409f74:	00e7a023          	sw	a4,0(a5)
  return 0;
20409f78:	00000793          	li	a5,0
}
20409f7c:	00078513          	mv	a0,a5
20409f80:	02c12083          	lw	ra,44(sp)
20409f84:	02812403          	lw	s0,40(sp)
20409f88:	03010113          	addi	sp,sp,48
20409f8c:	00008067          	ret

20409f90 <TVMGraphExecutorModule_NotImplemented>:

int32_t TVMGraphExecutorModule_NotImplemented(TVMValue* args, int* tcodes, int nargs,
                                              TVMValue* ret_values, int* ret_tcodes,
                                              void* resource_handle) {
20409f90:	fd010113          	addi	sp,sp,-48
20409f94:	02812623          	sw	s0,44(sp)
20409f98:	03010413          	addi	s0,sp,48
20409f9c:	fea42623          	sw	a0,-20(s0)
20409fa0:	feb42423          	sw	a1,-24(s0)
20409fa4:	fec42223          	sw	a2,-28(s0)
20409fa8:	fed42023          	sw	a3,-32(s0)
20409fac:	fce42e23          	sw	a4,-36(s0)
20409fb0:	fcf42c23          	sw	a5,-40(s0)
  return kTvmErrorFunctionCallNotImplemented;
20409fb4:	000017b7          	lui	a5,0x1
20409fb8:	80278793          	addi	a5,a5,-2046 # 802 <__stack_size-0x37fe>
}
20409fbc:	00078513          	mv	a0,a5
20409fc0:	02c12403          	lw	s0,44(sp)
20409fc4:	03010113          	addi	sp,sp,48
20409fc8:	00008067          	ret

20409fcc <TVMGraphExecutorModule_Register>:
    "run\0"
    "set_input\0"
    "share_params\0",
    graph_executor_registry_funcs};

tvm_crt_error_t TVMGraphExecutorModule_Register() {
20409fcc:	ff010113          	addi	sp,sp,-16
20409fd0:	00112623          	sw	ra,12(sp)
20409fd4:	00812423          	sw	s0,8(sp)
20409fd8:	01010413          	addi	s0,sp,16
  graph_executor.mod.registry = &graph_executor_registry;
20409fdc:	5fbf7797          	auipc	a5,0x5fbf7
20409fe0:	ec878793          	addi	a5,a5,-312 # 80000ea4 <graph_executor>
20409fe4:	5fbf7717          	auipc	a4,0x5fbf7
20409fe8:	a2c70713          	addi	a4,a4,-1492 # 80000a10 <graph_executor_registry>
20409fec:	00e7a023          	sw	a4,0(a5)
  graph_executor.executor = NULL;
20409ff0:	5fbf7797          	auipc	a5,0x5fbf7
20409ff4:	eb478793          	addi	a5,a5,-332 # 80000ea4 <graph_executor>
20409ff8:	0007a223          	sw	zero,4(a5)

  return TVMFuncRegisterGlobal("tvm.graph_executor.create", &TVMGraphExecutorModule_Create, 0);
20409ffc:	00000613          	li	a2,0
2040a000:	00000597          	auipc	a1,0x0
2040a004:	83058593          	addi	a1,a1,-2000 # 20409830 <TVMGraphExecutorModule_Create>
2040a008:	00017517          	auipc	a0,0x17
2040a00c:	f4c50513          	addi	a0,a0,-180 # 20420f54 <graph_executor_registry_funcs+0x80>
2040a010:	81df70ef          	jal	ra,2040182c <TVMFuncRegisterGlobal>
2040a014:	00050793          	mv	a5,a0
}
2040a018:	00078513          	mv	a0,a5
2040a01c:	00c12083          	lw	ra,12(sp)
2040a020:	00812403          	lw	s0,8(sp)
2040a024:	01010113          	addi	sp,sp,16
2040a028:	00008067          	ret

2040a02c <PageCreate>:
#include <tvm/runtime/crt/logging.h>
#include <tvm/runtime/crt/platform.h>

// construct a new page
Page PageCreate(uint8_t* memory_pool, size_t page_size_bytes, tvm_index_t ptable_begin,
                tvm_index_t num_pages) {
2040a02c:	fb010113          	addi	sp,sp,-80
2040a030:	04112623          	sw	ra,76(sp)
2040a034:	04812423          	sw	s0,72(sp)
2040a038:	05010413          	addi	s0,sp,80
2040a03c:	fca42623          	sw	a0,-52(s0)
2040a040:	fcb42423          	sw	a1,-56(s0)
2040a044:	fcc42223          	sw	a2,-60(s0)
2040a048:	fad42c23          	sw	a3,-72(s0)
2040a04c:	fae42e23          	sw	a4,-68(s0)
2040a050:	faf42823          	sw	a5,-80(s0)
2040a054:	fb042a23          	sw	a6,-76(s0)
  Page page;
  page.ptable_begin = ptable_begin;
2040a058:	fb842783          	lw	a5,-72(s0)
2040a05c:	fbc42803          	lw	a6,-68(s0)
2040a060:	fcf42c23          	sw	a5,-40(s0)
2040a064:	fd042e23          	sw	a6,-36(s0)
  page.num_pages = num_pages;
2040a068:	fb042783          	lw	a5,-80(s0)
2040a06c:	fb442803          	lw	a6,-76(s0)
2040a070:	fef42023          	sw	a5,-32(s0)
2040a074:	ff042223          	sw	a6,-28(s0)
  page.data = memory_pool + ptable_begin * page_size_bytes;
2040a078:	fb842783          	lw	a5,-72(s0)
2040a07c:	fc442583          	lw	a1,-60(s0)
2040a080:	00078513          	mv	a0,a5
2040a084:	3ad150ef          	jal	ra,2041fc30 <__mulsi3>
2040a088:	00050793          	mv	a5,a0
2040a08c:	00078713          	mv	a4,a5
2040a090:	fc842783          	lw	a5,-56(s0)
2040a094:	00e787b3          	add	a5,a5,a4
2040a098:	fef42423          	sw	a5,-24(s0)
  return page;
2040a09c:	fcc42783          	lw	a5,-52(s0)
2040a0a0:	fd842703          	lw	a4,-40(s0)
2040a0a4:	00e7a023          	sw	a4,0(a5)
2040a0a8:	fdc42703          	lw	a4,-36(s0)
2040a0ac:	00e7a223          	sw	a4,4(a5)
2040a0b0:	fe042703          	lw	a4,-32(s0)
2040a0b4:	00e7a423          	sw	a4,8(a5)
2040a0b8:	fe442703          	lw	a4,-28(s0)
2040a0bc:	00e7a623          	sw	a4,12(a5)
2040a0c0:	fe842703          	lw	a4,-24(s0)
2040a0c4:	00e7a823          	sw	a4,16(a5)
2040a0c8:	fec42703          	lw	a4,-20(s0)
2040a0cc:	00e7aa23          	sw	a4,20(a5)
}
2040a0d0:	fcc42503          	lw	a0,-52(s0)
2040a0d4:	04c12083          	lw	ra,76(sp)
2040a0d8:	04812403          	lw	s0,72(sp)
2040a0dc:	05010113          	addi	sp,sp,80
2040a0e0:	00008067          	ret

2040a0e4 <PageTable_Resize>:

void PageTable_Resize(struct PageTable* ptable, size_t new_size, Page* page) {
2040a0e4:	fd010113          	addi	sp,sp,-48
2040a0e8:	02112623          	sw	ra,44(sp)
2040a0ec:	02812423          	sw	s0,40(sp)
2040a0f0:	03010413          	addi	s0,sp,48
2040a0f4:	fca42e23          	sw	a0,-36(s0)
2040a0f8:	fcb42c23          	sw	a1,-40(s0)
2040a0fc:	fcc42a23          	sw	a2,-44(s0)
  CHECK_LE(ptable->num_pages, new_size, "size value (%zu) is smaller than expected (%zu).",
2040a100:	fdc42783          	lw	a5,-36(s0)
2040a104:	0107a783          	lw	a5,16(a5)
2040a108:	fd842703          	lw	a4,-40(s0)
2040a10c:	04f77263          	bleu	a5,a4,2040a150 <PageTable_Resize+0x6c>
2040a110:	fdc42783          	lw	a5,-36(s0)
2040a114:	0107a783          	lw	a5,16(a5)
2040a118:	00078813          	mv	a6,a5
2040a11c:	fd842783          	lw	a5,-40(s0)
2040a120:	00017717          	auipc	a4,0x17
2040a124:	e5070713          	addi	a4,a4,-432 # 20420f70 <graph_executor_registry_funcs+0x9c>
2040a128:	00017697          	auipc	a3,0x17
2040a12c:	e5468693          	addi	a3,a3,-428 # 20420f7c <graph_executor_registry_funcs+0xa8>
2040a130:	00017617          	auipc	a2,0x17
2040a134:	e5060613          	addi	a2,a2,-432 # 20420f80 <graph_executor_registry_funcs+0xac>
2040a138:	03400593          	li	a1,52
2040a13c:	00017517          	auipc	a0,0x17
2040a140:	e5850513          	addi	a0,a0,-424 # 20420f94 <graph_executor_registry_funcs+0xc0>
2040a144:	5f9030ef          	jal	ra,2040df3c <TVMLogf>
2040a148:	50000513          	li	a0,1280
2040a14c:	b31f60ef          	jal	ra,20400c7c <TVMPlatformAbort>
           new_size, ptable->num_pages);
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
2040a150:	fdc42783          	lw	a5,-36(s0)
2040a154:	0107a783          	lw	a5,16(a5)
2040a158:	fef42623          	sw	a5,-20(s0)
2040a15c:	0640006f          	j	2040a1c0 <PageTable_Resize+0xdc>
    ptable->page[idx] = *page;
2040a160:	fdc42783          	lw	a5,-36(s0)
2040a164:	0087a683          	lw	a3,8(a5)
2040a168:	fec42703          	lw	a4,-20(s0)
2040a16c:	00070793          	mv	a5,a4
2040a170:	00179793          	slli	a5,a5,0x1
2040a174:	00e787b3          	add	a5,a5,a4
2040a178:	00379793          	slli	a5,a5,0x3
2040a17c:	00f687b3          	add	a5,a3,a5
2040a180:	fd442703          	lw	a4,-44(s0)
2040a184:	00072683          	lw	a3,0(a4)
2040a188:	00d7a023          	sw	a3,0(a5)
2040a18c:	00472683          	lw	a3,4(a4)
2040a190:	00d7a223          	sw	a3,4(a5)
2040a194:	00872683          	lw	a3,8(a4)
2040a198:	00d7a423          	sw	a3,8(a5)
2040a19c:	00c72683          	lw	a3,12(a4)
2040a1a0:	00d7a623          	sw	a3,12(a5)
2040a1a4:	01072683          	lw	a3,16(a4)
2040a1a8:	00d7a823          	sw	a3,16(a5)
2040a1ac:	01472703          	lw	a4,20(a4)
2040a1b0:	00e7aa23          	sw	a4,20(a5)
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
2040a1b4:	fec42783          	lw	a5,-20(s0)
2040a1b8:	00178793          	addi	a5,a5,1
2040a1bc:	fef42623          	sw	a5,-20(s0)
2040a1c0:	fec42703          	lw	a4,-20(s0)
2040a1c4:	fd842783          	lw	a5,-40(s0)
2040a1c8:	f8f76ce3          	bltu	a4,a5,2040a160 <PageTable_Resize+0x7c>
  }
  ptable->num_pages = new_size;
2040a1cc:	fdc42783          	lw	a5,-36(s0)
2040a1d0:	fd842703          	lw	a4,-40(s0)
2040a1d4:	00e7a823          	sw	a4,16(a5)
}
2040a1d8:	00000013          	nop
2040a1dc:	02c12083          	lw	ra,44(sp)
2040a1e0:	02812403          	lw	s0,40(sp)
2040a1e4:	03010113          	addi	sp,sp,48
2040a1e8:	00008067          	ret

2040a1ec <TLB_Set>:

void TLB_Set(TLB* tlb, uint8_t* data, Page* page) {
2040a1ec:	fd010113          	addi	sp,sp,-48
2040a1f0:	02112623          	sw	ra,44(sp)
2040a1f4:	02812423          	sw	s0,40(sp)
2040a1f8:	03010413          	addi	s0,sp,48
2040a1fc:	fca42e23          	sw	a0,-36(s0)
2040a200:	fcb42c23          	sw	a1,-40(s0)
2040a204:	fcc42a23          	sw	a2,-44(s0)
  PageEntry* entry = tlb->find(tlb, data);
2040a208:	fdc42783          	lw	a5,-36(s0)
2040a20c:	0107a783          	lw	a5,16(a5)
2040a210:	fd842583          	lw	a1,-40(s0)
2040a214:	fdc42503          	lw	a0,-36(s0)
2040a218:	000780e7          	jalr	a5
2040a21c:	fea42623          	sw	a0,-20(s0)
  if (entry == 0) {
2040a220:	fec42783          	lw	a5,-20(s0)
2040a224:	08079463          	bnez	a5,2040a2ac <TLB_Set+0xc0>
    tlb->entries[tlb->num_pages].addr = data;
2040a228:	fdc42783          	lw	a5,-36(s0)
2040a22c:	0007a703          	lw	a4,0(a5)
2040a230:	fdc42783          	lw	a5,-36(s0)
2040a234:	0087a783          	lw	a5,8(a5)
2040a238:	00579793          	slli	a5,a5,0x5
2040a23c:	00f707b3          	add	a5,a4,a5
2040a240:	fd842703          	lw	a4,-40(s0)
2040a244:	00e7a023          	sw	a4,0(a5)
    tlb->entries[tlb->num_pages].page = *page;
2040a248:	fdc42783          	lw	a5,-36(s0)
2040a24c:	0007a703          	lw	a4,0(a5)
2040a250:	fdc42783          	lw	a5,-36(s0)
2040a254:	0087a783          	lw	a5,8(a5)
2040a258:	00579793          	slli	a5,a5,0x5
2040a25c:	00f707b3          	add	a5,a4,a5
2040a260:	fd442703          	lw	a4,-44(s0)
2040a264:	00072683          	lw	a3,0(a4)
2040a268:	00d7a423          	sw	a3,8(a5)
2040a26c:	00472683          	lw	a3,4(a4)
2040a270:	00d7a623          	sw	a3,12(a5)
2040a274:	00872683          	lw	a3,8(a4)
2040a278:	00d7a823          	sw	a3,16(a5)
2040a27c:	00c72683          	lw	a3,12(a4)
2040a280:	00d7aa23          	sw	a3,20(a5)
2040a284:	01072683          	lw	a3,16(a4)
2040a288:	00d7ac23          	sw	a3,24(a5)
2040a28c:	01472703          	lw	a4,20(a4)
2040a290:	00e7ae23          	sw	a4,28(a5)
    tlb->num_pages++;
2040a294:	fdc42783          	lw	a5,-36(s0)
2040a298:	0087a783          	lw	a5,8(a5)
2040a29c:	00178713          	addi	a4,a5,1
2040a2a0:	fdc42783          	lw	a5,-36(s0)
2040a2a4:	00e7a423          	sw	a4,8(a5)
  } else {
    entry->addr = data;
    entry->page = *page;
  }
}
2040a2a8:	0480006f          	j	2040a2f0 <TLB_Set+0x104>
    entry->addr = data;
2040a2ac:	fec42783          	lw	a5,-20(s0)
2040a2b0:	fd842703          	lw	a4,-40(s0)
2040a2b4:	00e7a023          	sw	a4,0(a5)
    entry->page = *page;
2040a2b8:	fec42783          	lw	a5,-20(s0)
2040a2bc:	fd442703          	lw	a4,-44(s0)
2040a2c0:	00072683          	lw	a3,0(a4)
2040a2c4:	00d7a423          	sw	a3,8(a5)
2040a2c8:	00472683          	lw	a3,4(a4)
2040a2cc:	00d7a623          	sw	a3,12(a5)
2040a2d0:	00872683          	lw	a3,8(a4)
2040a2d4:	00d7a823          	sw	a3,16(a5)
2040a2d8:	00c72683          	lw	a3,12(a4)
2040a2dc:	00d7aa23          	sw	a3,20(a5)
2040a2e0:	01072683          	lw	a3,16(a4)
2040a2e4:	00d7ac23          	sw	a3,24(a5)
2040a2e8:	01472703          	lw	a4,20(a4)
2040a2ec:	00e7ae23          	sw	a4,28(a5)
}
2040a2f0:	00000013          	nop
2040a2f4:	02c12083          	lw	ra,44(sp)
2040a2f8:	02812403          	lw	s0,40(sp)
2040a2fc:	03010113          	addi	sp,sp,48
2040a300:	00008067          	ret

2040a304 <TLB_Find>:

PageEntry* TLB_Find(TLB* tlb, uint8_t* data) {
2040a304:	fd010113          	addi	sp,sp,-48
2040a308:	02812623          	sw	s0,44(sp)
2040a30c:	03010413          	addi	s0,sp,48
2040a310:	fca42e23          	sw	a0,-36(s0)
2040a314:	fcb42c23          	sw	a1,-40(s0)
  PageEntry* entry = 0;
2040a318:	fe042623          	sw	zero,-20(s0)
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
2040a31c:	fe042423          	sw	zero,-24(s0)
2040a320:	04c0006f          	j	2040a36c <TLB_Find+0x68>
    if (tlb->entries[idx].addr == data) {
2040a324:	fdc42783          	lw	a5,-36(s0)
2040a328:	0007a703          	lw	a4,0(a5)
2040a32c:	fe842783          	lw	a5,-24(s0)
2040a330:	00579793          	slli	a5,a5,0x5
2040a334:	00f707b3          	add	a5,a4,a5
2040a338:	0007a783          	lw	a5,0(a5)
2040a33c:	fd842703          	lw	a4,-40(s0)
2040a340:	02f71063          	bne	a4,a5,2040a360 <TLB_Find+0x5c>
      entry = tlb->entries + idx;
2040a344:	fdc42783          	lw	a5,-36(s0)
2040a348:	0007a703          	lw	a4,0(a5)
2040a34c:	fe842783          	lw	a5,-24(s0)
2040a350:	00579793          	slli	a5,a5,0x5
2040a354:	00f707b3          	add	a5,a4,a5
2040a358:	fef42623          	sw	a5,-20(s0)
      break;
2040a35c:	0200006f          	j	2040a37c <TLB_Find+0x78>
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
2040a360:	fe842783          	lw	a5,-24(s0)
2040a364:	00178793          	addi	a5,a5,1
2040a368:	fef42423          	sw	a5,-24(s0)
2040a36c:	fdc42783          	lw	a5,-36(s0)
2040a370:	0087a783          	lw	a5,8(a5)
2040a374:	fe842703          	lw	a4,-24(s0)
2040a378:	faf766e3          	bltu	a4,a5,2040a324 <TLB_Find+0x20>
    }
  }
  return entry;
2040a37c:	fec42783          	lw	a5,-20(s0)
}
2040a380:	00078513          	mv	a0,a5
2040a384:	02c12403          	lw	s0,44(sp)
2040a388:	03010113          	addi	sp,sp,48
2040a38c:	00008067          	ret

2040a390 <MultiMap_LowerBound>:

IndexedEntry* MultiMap_LowerBound(struct MultiMap* map, uint32_t npage) {
2040a390:	fd010113          	addi	sp,sp,-48
2040a394:	02812623          	sw	s0,44(sp)
2040a398:	03010413          	addi	s0,sp,48
2040a39c:	fca42e23          	sw	a0,-36(s0)
2040a3a0:	fcb42c23          	sw	a1,-40(s0)
  IndexedEntry* entry = 0;
2040a3a4:	fe042623          	sw	zero,-20(s0)
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a3a8:	fe042423          	sw	zero,-24(s0)
2040a3ac:	0740006f          	j	2040a420 <MultiMap_LowerBound+0x90>
    if (map->entries[idx].index >= npage) {
2040a3b0:	fdc42783          	lw	a5,-36(s0)
2040a3b4:	0007a603          	lw	a2,0(a5)
2040a3b8:	fe842783          	lw	a5,-24(s0)
2040a3bc:	00579793          	slli	a5,a5,0x5
2040a3c0:	00f607b3          	add	a5,a2,a5
2040a3c4:	0047a803          	lw	a6,4(a5)
2040a3c8:	0007a783          	lw	a5,0(a5)
2040a3cc:	fd842603          	lw	a2,-40(s0)
2040a3d0:	00060693          	mv	a3,a2
2040a3d4:	00000713          	li	a4,0
2040a3d8:	00070593          	mv	a1,a4
2040a3dc:	00080613          	mv	a2,a6
2040a3e0:	02b64a63          	blt	a2,a1,2040a414 <MultiMap_LowerBound+0x84>
2040a3e4:	00070593          	mv	a1,a4
2040a3e8:	00080613          	mv	a2,a6
2040a3ec:	00c59663          	bne	a1,a2,2040a3f8 <MultiMap_LowerBound+0x68>
2040a3f0:	00068613          	mv	a2,a3
2040a3f4:	02c7e063          	bltu	a5,a2,2040a414 <MultiMap_LowerBound+0x84>
      entry = map->entries + idx;
2040a3f8:	fdc42783          	lw	a5,-36(s0)
2040a3fc:	0007a703          	lw	a4,0(a5)
2040a400:	fe842783          	lw	a5,-24(s0)
2040a404:	00579793          	slli	a5,a5,0x5
2040a408:	00f707b3          	add	a5,a4,a5
2040a40c:	fef42623          	sw	a5,-20(s0)
      break;
2040a410:	0200006f          	j	2040a430 <MultiMap_LowerBound+0xa0>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a414:	fe842783          	lw	a5,-24(s0)
2040a418:	00178793          	addi	a5,a5,1
2040a41c:	fef42423          	sw	a5,-24(s0)
2040a420:	fdc42783          	lw	a5,-36(s0)
2040a424:	0087a783          	lw	a5,8(a5)
2040a428:	fe842603          	lw	a2,-24(s0)
2040a42c:	f8f662e3          	bltu	a2,a5,2040a3b0 <MultiMap_LowerBound+0x20>
    }
  }
  return entry;
2040a430:	fec42783          	lw	a5,-20(s0)
}
2040a434:	00078513          	mv	a0,a5
2040a438:	02c12403          	lw	s0,44(sp)
2040a43c:	03010113          	addi	sp,sp,48
2040a440:	00008067          	ret

2040a444 <MultiMap_End>:

IndexedEntry* MultiMap_End(struct MultiMap* map) {
2040a444:	fd010113          	addi	sp,sp,-48
2040a448:	02812623          	sw	s0,44(sp)
2040a44c:	03010413          	addi	s0,sp,48
2040a450:	fca42e23          	sw	a0,-36(s0)
  IndexedEntry* entry = 0;
2040a454:	fe042623          	sw	zero,-20(s0)
  return entry;
2040a458:	fec42783          	lw	a5,-20(s0)
}
2040a45c:	00078513          	mv	a0,a5
2040a460:	02c12403          	lw	s0,44(sp)
2040a464:	03010113          	addi	sp,sp,48
2040a468:	00008067          	ret

2040a46c <MultiMap_Erase>:

void MultiMap_Erase(struct MultiMap* map, IndexedEntry* entry) {
2040a46c:	fd010113          	addi	sp,sp,-48
2040a470:	02812623          	sw	s0,44(sp)
2040a474:	03010413          	addi	s0,sp,48
2040a478:	fca42e23          	sw	a0,-36(s0)
2040a47c:	fcb42c23          	sw	a1,-40(s0)
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a480:	fe042623          	sw	zero,-20(s0)
2040a484:	0e40006f          	j	2040a568 <MultiMap_Erase+0xfc>
    if ((map->entries + idx) == entry) {
2040a488:	fdc42783          	lw	a5,-36(s0)
2040a48c:	0007a703          	lw	a4,0(a5)
2040a490:	fec42783          	lw	a5,-20(s0)
2040a494:	00579793          	slli	a5,a5,0x5
2040a498:	00f707b3          	add	a5,a4,a5
2040a49c:	fd842703          	lw	a4,-40(s0)
2040a4a0:	0af71e63          	bne	a4,a5,2040a55c <MultiMap_Erase+0xf0>
      // NOTE: do not use memcpy due to overlap.
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
2040a4a4:	fec42783          	lw	a5,-20(s0)
2040a4a8:	00178793          	addi	a5,a5,1
2040a4ac:	fef42423          	sw	a5,-24(s0)
2040a4b0:	0840006f          	j	2040a534 <MultiMap_Erase+0xc8>
        map->entries[src_idx - 1] = map->entries[src_idx];
2040a4b4:	fdc42783          	lw	a5,-36(s0)
2040a4b8:	0007a703          	lw	a4,0(a5)
2040a4bc:	fe842783          	lw	a5,-24(s0)
2040a4c0:	00579793          	slli	a5,a5,0x5
2040a4c4:	00f70733          	add	a4,a4,a5
2040a4c8:	fdc42783          	lw	a5,-36(s0)
2040a4cc:	0007a683          	lw	a3,0(a5)
2040a4d0:	fe842603          	lw	a2,-24(s0)
2040a4d4:	080007b7          	lui	a5,0x8000
2040a4d8:	fff78793          	addi	a5,a5,-1 # 7ffffff <__stack_size+0x7ffbfff>
2040a4dc:	00f607b3          	add	a5,a2,a5
2040a4e0:	00579793          	slli	a5,a5,0x5
2040a4e4:	00f687b3          	add	a5,a3,a5
2040a4e8:	00072303          	lw	t1,0(a4)
2040a4ec:	00472883          	lw	a7,4(a4)
2040a4f0:	00872803          	lw	a6,8(a4)
2040a4f4:	00c72503          	lw	a0,12(a4)
2040a4f8:	01072583          	lw	a1,16(a4)
2040a4fc:	01472603          	lw	a2,20(a4)
2040a500:	01872683          	lw	a3,24(a4)
2040a504:	01c72703          	lw	a4,28(a4)
2040a508:	0067a023          	sw	t1,0(a5)
2040a50c:	0117a223          	sw	a7,4(a5)
2040a510:	0107a423          	sw	a6,8(a5)
2040a514:	00a7a623          	sw	a0,12(a5)
2040a518:	00b7a823          	sw	a1,16(a5)
2040a51c:	00c7aa23          	sw	a2,20(a5)
2040a520:	00d7ac23          	sw	a3,24(a5)
2040a524:	00e7ae23          	sw	a4,28(a5)
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
2040a528:	fe842783          	lw	a5,-24(s0)
2040a52c:	00178793          	addi	a5,a5,1
2040a530:	fef42423          	sw	a5,-24(s0)
2040a534:	fdc42783          	lw	a5,-36(s0)
2040a538:	0087a783          	lw	a5,8(a5)
2040a53c:	fe842703          	lw	a4,-24(s0)
2040a540:	f6f76ae3          	bltu	a4,a5,2040a4b4 <MultiMap_Erase+0x48>
      }
      map->num_entries--;
2040a544:	fdc42783          	lw	a5,-36(s0)
2040a548:	0087a783          	lw	a5,8(a5)
2040a54c:	fff78713          	addi	a4,a5,-1
2040a550:	fdc42783          	lw	a5,-36(s0)
2040a554:	00e7a423          	sw	a4,8(a5)
      break;
2040a558:	0200006f          	j	2040a578 <MultiMap_Erase+0x10c>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
2040a55c:	fec42783          	lw	a5,-20(s0)
2040a560:	00178793          	addi	a5,a5,1
2040a564:	fef42623          	sw	a5,-20(s0)
2040a568:	fdc42783          	lw	a5,-36(s0)
2040a56c:	0087a783          	lw	a5,8(a5)
2040a570:	fec42703          	lw	a4,-20(s0)
2040a574:	f0f76ae3          	bltu	a4,a5,2040a488 <MultiMap_Erase+0x1c>
    }
  }
}
2040a578:	00000013          	nop
2040a57c:	02c12403          	lw	s0,44(sp)
2040a580:	03010113          	addi	sp,sp,48
2040a584:	00008067          	ret

2040a588 <MultiMap_Insert>:

void MultiMap_Insert(struct MultiMap* map, uint32_t npage, Page* p) {
2040a588:	fd010113          	addi	sp,sp,-48
2040a58c:	02112623          	sw	ra,44(sp)
2040a590:	02812423          	sw	s0,40(sp)
2040a594:	03010413          	addi	s0,sp,48
2040a598:	fca42e23          	sw	a0,-36(s0)
2040a59c:	fcb42c23          	sw	a1,-40(s0)
2040a5a0:	fcc42a23          	sw	a2,-44(s0)
  CHECK_LE(map->num_entries + 1, map->max_entries, "invalid number of free pages.");
2040a5a4:	fdc42783          	lw	a5,-36(s0)
2040a5a8:	0087a783          	lw	a5,8(a5)
2040a5ac:	00178713          	addi	a4,a5,1
2040a5b0:	fdc42783          	lw	a5,-36(s0)
2040a5b4:	0047a783          	lw	a5,4(a5)
2040a5b8:	02e7fa63          	bleu	a4,a5,2040a5ec <MultiMap_Insert+0x64>
2040a5bc:	00017717          	auipc	a4,0x17
2040a5c0:	a5470713          	addi	a4,a4,-1452 # 20421010 <graph_executor_registry_funcs+0x13c>
2040a5c4:	00017697          	auipc	a3,0x17
2040a5c8:	9b868693          	addi	a3,a3,-1608 # 20420f7c <graph_executor_registry_funcs+0xa8>
2040a5cc:	00017617          	auipc	a2,0x17
2040a5d0:	a5860613          	addi	a2,a2,-1448 # 20421024 <graph_executor_registry_funcs+0x150>
2040a5d4:	07000593          	li	a1,112
2040a5d8:	00017517          	auipc	a0,0x17
2040a5dc:	a6450513          	addi	a0,a0,-1436 # 2042103c <graph_executor_registry_funcs+0x168>
2040a5e0:	15d030ef          	jal	ra,2040df3c <TVMLogf>
2040a5e4:	50000513          	li	a0,1280
2040a5e8:	e94f60ef          	jal	ra,20400c7c <TVMPlatformAbort>
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
2040a5ec:	fdc42783          	lw	a5,-36(s0)
2040a5f0:	0087a783          	lw	a5,8(a5)
2040a5f4:	fef42623          	sw	a5,-20(s0)
2040a5f8:	0880006f          	j	2040a680 <MultiMap_Insert+0xf8>
    map->entries[map->num_entries].index = npage;
2040a5fc:	fdc42783          	lw	a5,-36(s0)
2040a600:	0007a703          	lw	a4,0(a5)
2040a604:	fdc42783          	lw	a5,-36(s0)
2040a608:	0087a783          	lw	a5,8(a5)
2040a60c:	00579793          	slli	a5,a5,0x5
2040a610:	00f707b3          	add	a5,a4,a5
2040a614:	fd842703          	lw	a4,-40(s0)
2040a618:	00070813          	mv	a6,a4
2040a61c:	00000893          	li	a7,0
2040a620:	0107a023          	sw	a6,0(a5)
2040a624:	0117a223          	sw	a7,4(a5)
    map->entries[map->num_entries].page = *p;
2040a628:	fdc42783          	lw	a5,-36(s0)
2040a62c:	0007a703          	lw	a4,0(a5)
2040a630:	fdc42783          	lw	a5,-36(s0)
2040a634:	0087a783          	lw	a5,8(a5)
2040a638:	00579793          	slli	a5,a5,0x5
2040a63c:	00f707b3          	add	a5,a4,a5
2040a640:	fd442703          	lw	a4,-44(s0)
2040a644:	00072683          	lw	a3,0(a4)
2040a648:	00d7a423          	sw	a3,8(a5)
2040a64c:	00472683          	lw	a3,4(a4)
2040a650:	00d7a623          	sw	a3,12(a5)
2040a654:	00872683          	lw	a3,8(a4)
2040a658:	00d7a823          	sw	a3,16(a5)
2040a65c:	00c72683          	lw	a3,12(a4)
2040a660:	00d7aa23          	sw	a3,20(a5)
2040a664:	01072683          	lw	a3,16(a4)
2040a668:	00d7ac23          	sw	a3,24(a5)
2040a66c:	01472703          	lw	a4,20(a4)
2040a670:	00e7ae23          	sw	a4,28(a5)
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
2040a674:	fec42783          	lw	a5,-20(s0)
2040a678:	00178793          	addi	a5,a5,1
2040a67c:	fef42623          	sw	a5,-20(s0)
2040a680:	fdc42783          	lw	a5,-36(s0)
2040a684:	0087a703          	lw	a4,8(a5)
2040a688:	fd842783          	lw	a5,-40(s0)
2040a68c:	00f707b3          	add	a5,a4,a5
2040a690:	fec42703          	lw	a4,-20(s0)
2040a694:	f6f764e3          	bltu	a4,a5,2040a5fc <MultiMap_Insert+0x74>
  }
  map->num_entries++;
2040a698:	fdc42783          	lw	a5,-36(s0)
2040a69c:	0087a783          	lw	a5,8(a5)
2040a6a0:	00178713          	addi	a4,a5,1
2040a6a4:	fdc42783          	lw	a5,-36(s0)
2040a6a8:	00e7a423          	sw	a4,8(a5)
}
2040a6ac:	00000013          	nop
2040a6b0:	02c12083          	lw	ra,44(sp)
2040a6b4:	02812403          	lw	s0,40(sp)
2040a6b8:	03010113          	addi	sp,sp,48
2040a6bc:	00008067          	ret

2040a6c0 <PageMemoryManager_Allocate>:
 * \brief Allocate memory from manager
 * \param size The size of memory
 * \return The virtual address
 */
tvm_crt_error_t PageMemoryManager_Allocate(MemoryManagerInterface* interface, size_t num_bytes,
                                           DLDevice dev, void** out_ptr) {
2040a6c0:	f7010113          	addi	sp,sp,-144
2040a6c4:	08112623          	sw	ra,140(sp)
2040a6c8:	08812423          	sw	s0,136(sp)
2040a6cc:	09010413          	addi	s0,sp,144
2040a6d0:	f8a42623          	sw	a0,-116(s0)
2040a6d4:	f8b42423          	sw	a1,-120(s0)
2040a6d8:	f8c42023          	sw	a2,-128(s0)
2040a6dc:	f8d42223          	sw	a3,-124(s0)
2040a6e0:	f6e42e23          	sw	a4,-132(s0)
  MemoryManager* mgr = (MemoryManager*)interface;
2040a6e4:	f8c42783          	lw	a5,-116(s0)
2040a6e8:	fef42623          	sw	a5,-20(s0)

  *out_ptr = 0;
2040a6ec:	f7c42783          	lw	a5,-132(s0)
2040a6f0:	0007a023          	sw	zero,0(a5)
  PageTable* ptable = &(mgr->ptable);
2040a6f4:	fec42783          	lw	a5,-20(s0)
2040a6f8:	00c78793          	addi	a5,a5,12
2040a6fc:	fef42423          	sw	a5,-24(s0)
  tvm_index_t npage = (num_bytes + ptable->page_size_bytes - 1) / ptable->page_size_bytes;
2040a700:	fe842783          	lw	a5,-24(s0)
2040a704:	0047a703          	lw	a4,4(a5)
2040a708:	f8842783          	lw	a5,-120(s0)
2040a70c:	00f707b3          	add	a5,a4,a5
2040a710:	fff78713          	addi	a4,a5,-1
2040a714:	fe842783          	lw	a5,-24(s0)
2040a718:	0047a783          	lw	a5,4(a5)
2040a71c:	00078593          	mv	a1,a5
2040a720:	00070513          	mv	a0,a4
2040a724:	588150ef          	jal	ra,2041fcac <__udivsi3>
2040a728:	00050793          	mv	a5,a0
2040a72c:	fef42023          	sw	a5,-32(s0)
2040a730:	fe042223          	sw	zero,-28(s0)

  MultiMap* free_map = &(mgr->free_map);
2040a734:	fec42783          	lw	a5,-20(s0)
2040a738:	03878793          	addi	a5,a5,56
2040a73c:	fcf42e23          	sw	a5,-36(s0)
  IndexedEntry* it = free_map->lower_bound(free_map, npage);
2040a740:	fdc42783          	lw	a5,-36(s0)
2040a744:	00c7a703          	lw	a4,12(a5)
2040a748:	fe042783          	lw	a5,-32(s0)
2040a74c:	00078593          	mv	a1,a5
2040a750:	fdc42503          	lw	a0,-36(s0)
2040a754:	000700e7          	jalr	a4
2040a758:	fca42c23          	sw	a0,-40(s0)
  tvm_index_t start = 0;
2040a75c:	00000793          	li	a5,0
2040a760:	00000813          	li	a6,0
2040a764:	fcf42823          	sw	a5,-48(s0)
2040a768:	fd042a23          	sw	a6,-44(s0)
  if (it != free_map->end(free_map)) {
2040a76c:	fdc42783          	lw	a5,-36(s0)
2040a770:	0107a783          	lw	a5,16(a5)
2040a774:	fdc42503          	lw	a0,-36(s0)
2040a778:	000780e7          	jalr	a5
2040a77c:	00050713          	mv	a4,a0
2040a780:	fd842783          	lw	a5,-40(s0)
2040a784:	06e78e63          	beq	a5,a4,2040a800 <PageMemoryManager_Allocate+0x140>
    Page p = it->page;
2040a788:	fd842783          	lw	a5,-40(s0)
2040a78c:	0087a703          	lw	a4,8(a5)
2040a790:	fae42823          	sw	a4,-80(s0)
2040a794:	00c7a703          	lw	a4,12(a5)
2040a798:	fae42a23          	sw	a4,-76(s0)
2040a79c:	0107a703          	lw	a4,16(a5)
2040a7a0:	fae42c23          	sw	a4,-72(s0)
2040a7a4:	0147a703          	lw	a4,20(a5)
2040a7a8:	fae42e23          	sw	a4,-68(s0)
2040a7ac:	0187a703          	lw	a4,24(a5)
2040a7b0:	fce42023          	sw	a4,-64(s0)
2040a7b4:	01c7a783          	lw	a5,28(a5)
2040a7b8:	fcf42223          	sw	a5,-60(s0)
    free_map->erase(free_map, it);
2040a7bc:	fdc42783          	lw	a5,-36(s0)
2040a7c0:	0147a783          	lw	a5,20(a5)
2040a7c4:	fd842583          	lw	a1,-40(s0)
2040a7c8:	fdc42503          	lw	a0,-36(s0)
2040a7cc:	000780e7          	jalr	a5
    *out_ptr = p.data;
2040a7d0:	fc042703          	lw	a4,-64(s0)
2040a7d4:	f7c42783          	lw	a5,-132(s0)
2040a7d8:	00e7a023          	sw	a4,0(a5)
    start = p.ptable_begin;
2040a7dc:	fb042783          	lw	a5,-80(s0)
2040a7e0:	fb442803          	lw	a6,-76(s0)
2040a7e4:	fcf42823          	sw	a5,-48(s0)
2040a7e8:	fd042a23          	sw	a6,-44(s0)
    npage = p.num_pages;
2040a7ec:	fb842783          	lw	a5,-72(s0)
2040a7f0:	fbc42803          	lw	a6,-68(s0)
2040a7f4:	fef42023          	sw	a5,-32(s0)
2040a7f8:	ff042223          	sw	a6,-28(s0)
2040a7fc:	0c00006f          	j	2040a8bc <PageMemoryManager_Allocate+0x1fc>
  } else {
    start = ptable->num_pages;
2040a800:	fe842783          	lw	a5,-24(s0)
2040a804:	0107a783          	lw	a5,16(a5)
2040a808:	fcf42823          	sw	a5,-48(s0)
2040a80c:	fc042a23          	sw	zero,-44(s0)
    if ((unsigned)(start + npage) > ptable->max_pages) {
2040a810:	fd042703          	lw	a4,-48(s0)
2040a814:	fe042783          	lw	a5,-32(s0)
2040a818:	00f70733          	add	a4,a4,a5
2040a81c:	fe842783          	lw	a5,-24(s0)
2040a820:	00c7a783          	lw	a5,12(a5)
2040a824:	00e7f663          	bleu	a4,a5,2040a830 <PageMemoryManager_Allocate+0x170>
#if TVM_CRT_DEBUG > 1
      TVMLogf("insufficient memory, start=%" PRId32 ", npage=%" PRId32 ", total=%" PRId32 " / %zu",
              (int32_t)start, (int32_t)npage, (int32_t)(start + npage), mgr->pmap.max_pages);
#endif
      return kTvmErrorPlatformNoMemory;
2040a828:	50300793          	li	a5,1283
2040a82c:	0a80006f          	j	2040a8d4 <PageMemoryManager_Allocate+0x214>
    }
    /* insert page entry */
    Page p = PageCreate(ptable->memory_pool, ptable->page_size_bytes, start, npage);
2040a830:	fe842783          	lw	a5,-24(s0)
2040a834:	0007a583          	lw	a1,0(a5)
2040a838:	fe842783          	lw	a5,-24(s0)
2040a83c:	0047a603          	lw	a2,4(a5)
2040a840:	f9840513          	addi	a0,s0,-104
2040a844:	fe042783          	lw	a5,-32(s0)
2040a848:	fe442803          	lw	a6,-28(s0)
2040a84c:	fd042683          	lw	a3,-48(s0)
2040a850:	fd442703          	lw	a4,-44(s0)
2040a854:	fd8ff0ef          	jal	ra,2040a02c <PageCreate>
    ptable->resize(ptable, start + npage, &p);
2040a858:	fe842783          	lw	a5,-24(s0)
2040a85c:	0147a683          	lw	a3,20(a5)
2040a860:	fd042703          	lw	a4,-48(s0)
2040a864:	fe042783          	lw	a5,-32(s0)
2040a868:	00f707b3          	add	a5,a4,a5
2040a86c:	f9840713          	addi	a4,s0,-104
2040a870:	00070613          	mv	a2,a4
2040a874:	00078593          	mv	a1,a5
2040a878:	fe842503          	lw	a0,-24(s0)
2040a87c:	000680e7          	jalr	a3
    *out_ptr = p.data;
2040a880:	fa842703          	lw	a4,-88(s0)
2040a884:	f7c42783          	lw	a5,-132(s0)
2040a888:	00e7a023          	sw	a4,0(a5)
    TLB* pmap = &(mgr->pmap);
2040a88c:	fec42783          	lw	a5,-20(s0)
2040a890:	02478793          	addi	a5,a5,36
2040a894:	fcf42623          	sw	a5,-52(s0)
    pmap->set(pmap, *out_ptr, &p);
2040a898:	fcc42783          	lw	a5,-52(s0)
2040a89c:	00c7a683          	lw	a3,12(a5)
2040a8a0:	f7c42783          	lw	a5,-132(s0)
2040a8a4:	0007a783          	lw	a5,0(a5)
2040a8a8:	f9840713          	addi	a4,s0,-104
2040a8ac:	00070613          	mv	a2,a4
2040a8b0:	00078593          	mv	a1,a5
2040a8b4:	fcc42503          	lw	a0,-52(s0)
2040a8b8:	000680e7          	jalr	a3
  }
  mgr->interface.vleak_size++;
2040a8bc:	fec42783          	lw	a5,-20(s0)
2040a8c0:	0087a783          	lw	a5,8(a5)
2040a8c4:	00178713          	addi	a4,a5,1
2040a8c8:	fec42783          	lw	a5,-20(s0)
2040a8cc:	00e7a423          	sw	a4,8(a5)
#if TVM_CRT_DEBUG > 1
  TVMLogf("allocate: addr=%p, start=%" PRId64 "/%zu, npage=%" PRId64 ", vleak=%d\n", data, start,
          ptable->max_pages, npage, mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
2040a8d0:	00000793          	li	a5,0
}
2040a8d4:	00078513          	mv	a0,a5
2040a8d8:	08c12083          	lw	ra,140(sp)
2040a8dc:	08812403          	lw	s0,136(sp)
2040a8e0:	09010113          	addi	sp,sp,144
2040a8e4:	00008067          	ret

2040a8e8 <PageMemoryManager_Realloc>:
 * \param ptr Pointer holding a pointer to the memory area to be reallocated
 * \param num_bytes The size of memory now required.
 * \return kTvmErrorNoError on success.
 */
tvm_crt_error_t PageMemoryManager_Realloc(MemoryManagerInterface* interface, void** ptr,
                                          tvm_index_t num_bytes) {
2040a8e8:	f5010113          	addi	sp,sp,-176
2040a8ec:	0a112623          	sw	ra,172(sp)
2040a8f0:	0a812423          	sw	s0,168(sp)
2040a8f4:	0b010413          	addi	s0,sp,176
2040a8f8:	f4a42e23          	sw	a0,-164(s0)
2040a8fc:	f4b42c23          	sw	a1,-168(s0)
2040a900:	f4c42823          	sw	a2,-176(s0)
2040a904:	f4d42a23          	sw	a3,-172(s0)
  MemoryManager* mgr = (MemoryManager*)interface;
2040a908:	f5c42783          	lw	a5,-164(s0)
2040a90c:	fef42423          	sw	a5,-24(s0)

  uint8_t* data = *((uint8_t**)ptr);  // NOLINT(*)
2040a910:	f5842783          	lw	a5,-168(s0)
2040a914:	0007a783          	lw	a5,0(a5)
2040a918:	fef42623          	sw	a5,-20(s0)
  PageTable* ptable = &(mgr->ptable);
2040a91c:	fe842783          	lw	a5,-24(s0)
2040a920:	00c78793          	addi	a5,a5,12
2040a924:	fef42223          	sw	a5,-28(s0)
  TLB* pmap = &(mgr->pmap);
2040a928:	fe842783          	lw	a5,-24(s0)
2040a92c:	02478793          	addi	a5,a5,36
2040a930:	fef42023          	sw	a5,-32(s0)
  MultiMap* free_map = &(mgr->free_map);
2040a934:	fe842783          	lw	a5,-24(s0)
2040a938:	03878793          	addi	a5,a5,56
2040a93c:	fcf42e23          	sw	a5,-36(s0)
  tvm_index_t start = 0;
2040a940:	00000793          	li	a5,0
2040a944:	00000813          	li	a6,0
2040a948:	fcf42823          	sw	a5,-48(s0)
2040a94c:	fd042a23          	sw	a6,-44(s0)
  tvm_index_t npage = (num_bytes + ptable->page_size_bytes - 1) / ptable->page_size_bytes;
2040a950:	fe442783          	lw	a5,-28(s0)
2040a954:	0047a783          	lw	a5,4(a5)
2040a958:	00078313          	mv	t1,a5
2040a95c:	00000393          	li	t2,0
2040a960:	f5042683          	lw	a3,-176(s0)
2040a964:	f5442703          	lw	a4,-172(s0)
2040a968:	00d307b3          	add	a5,t1,a3
2040a96c:	00078613          	mv	a2,a5
2040a970:	00663633          	sltu	a2,a2,t1
2040a974:	00e38833          	add	a6,t2,a4
2040a978:	01060733          	add	a4,a2,a6
2040a97c:	00070813          	mv	a6,a4
2040a980:	00078693          	mv	a3,a5
2040a984:	00080713          	mv	a4,a6
2040a988:	fff00593          	li	a1,-1
2040a98c:	fff00613          	li	a2,-1
2040a990:	00b687b3          	add	a5,a3,a1
2040a994:	00078513          	mv	a0,a5
2040a998:	00d53533          	sltu	a0,a0,a3
2040a99c:	00c70833          	add	a6,a4,a2
2040a9a0:	01050733          	add	a4,a0,a6
2040a9a4:	00070813          	mv	a6,a4
2040a9a8:	00078513          	mv	a0,a5
2040a9ac:	00080593          	mv	a1,a6
2040a9b0:	fe442783          	lw	a5,-28(s0)
2040a9b4:	0047a783          	lw	a5,4(a5)
2040a9b8:	00078e13          	mv	t3,a5
2040a9bc:	00000e93          	li	t4,0
2040a9c0:	000e0613          	mv	a2,t3
2040a9c4:	000e8693          	mv	a3,t4
2040a9c8:	430110ef          	jal	ra,2041bdf8 <__divdi3>
2040a9cc:	00050793          	mv	a5,a0
2040a9d0:	00058813          	mv	a6,a1
2040a9d4:	fcf42423          	sw	a5,-56(s0)
2040a9d8:	fd042623          	sw	a6,-52(s0)
  if (ptr) {
2040a9dc:	f5842783          	lw	a5,-168(s0)
2040a9e0:	26078263          	beqz	a5,2040ac44 <PageMemoryManager_Realloc+0x35c>
    // get page size for given pointer
    CHECK_NE(pmap->num_pages, 0, "invalid translation look-aside buffer.");
2040a9e4:	fe042783          	lw	a5,-32(s0)
2040a9e8:	0087a783          	lw	a5,8(a5)
2040a9ec:	02079a63          	bnez	a5,2040aa20 <PageMemoryManager_Realloc+0x138>
2040a9f0:	00016717          	auipc	a4,0x16
2040a9f4:	6b470713          	addi	a4,a4,1716 # 204210a4 <graph_executor_registry_funcs+0x1d0>
2040a9f8:	00016697          	auipc	a3,0x16
2040a9fc:	6b068693          	addi	a3,a3,1712 # 204210a8 <graph_executor_registry_funcs+0x1d4>
2040aa00:	00016617          	auipc	a2,0x16
2040aa04:	6ac60613          	addi	a2,a2,1708 # 204210ac <graph_executor_registry_funcs+0x1d8>
2040aa08:	0b800593          	li	a1,184
2040aa0c:	00016517          	auipc	a0,0x16
2040aa10:	6b050513          	addi	a0,a0,1712 # 204210bc <graph_executor_registry_funcs+0x1e8>
2040aa14:	528030ef          	jal	ra,2040df3c <TVMLogf>
2040aa18:	50000513          	li	a0,1280
2040aa1c:	a60f60ef          	jal	ra,20400c7c <TVMPlatformAbort>
    PageEntry* entry = pmap->find(pmap, (uint8_t*)ptr);  // NOLINT(*)
2040aa20:	fe042783          	lw	a5,-32(s0)
2040aa24:	0107a783          	lw	a5,16(a5)
2040aa28:	f5842583          	lw	a1,-168(s0)
2040aa2c:	fe042503          	lw	a0,-32(s0)
2040aa30:	000780e7          	jalr	a5
2040aa34:	faa42c23          	sw	a0,-72(s0)
    CHECK_NE(entry, 0, "no valid page entry found.");
2040aa38:	fb842783          	lw	a5,-72(s0)
2040aa3c:	02079a63          	bnez	a5,2040aa70 <PageMemoryManager_Realloc+0x188>
2040aa40:	00016717          	auipc	a4,0x16
2040aa44:	66470713          	addi	a4,a4,1636 # 204210a4 <graph_executor_registry_funcs+0x1d0>
2040aa48:	00016697          	auipc	a3,0x16
2040aa4c:	66068693          	addi	a3,a3,1632 # 204210a8 <graph_executor_registry_funcs+0x1d4>
2040aa50:	00016617          	auipc	a2,0x16
2040aa54:	6dc60613          	addi	a2,a2,1756 # 2042112c <graph_executor_registry_funcs+0x258>
2040aa58:	0ba00593          	li	a1,186
2040aa5c:	00016517          	auipc	a0,0x16
2040aa60:	6d850513          	addi	a0,a0,1752 # 20421134 <graph_executor_registry_funcs+0x260>
2040aa64:	4d8030ef          	jal	ra,2040df3c <TVMLogf>
2040aa68:	50000513          	li	a0,1280
2040aa6c:	a10f60ef          	jal	ra,20400c7c <TVMPlatformAbort>
    Page* pptr = &(entry->page);
2040aa70:	fb842783          	lw	a5,-72(s0)
2040aa74:	00878793          	addi	a5,a5,8
2040aa78:	faf42a23          	sw	a5,-76(s0)
    // if the page size is smaller than target page size,
    // try allocate new space
    if (pptr->num_pages < npage) {
2040aa7c:	fb442783          	lw	a5,-76(s0)
2040aa80:	00c7a803          	lw	a6,12(a5)
2040aa84:	0087a783          	lw	a5,8(a5)
2040aa88:	fcc42703          	lw	a4,-52(s0)
2040aa8c:	00080693          	mv	a3,a6
2040aa90:	00e6cc63          	blt	a3,a4,2040aaa8 <PageMemoryManager_Realloc+0x1c0>
2040aa94:	fcc42703          	lw	a4,-52(s0)
2040aa98:	00080693          	mv	a3,a6
2040aa9c:	18d71863          	bne	a4,a3,2040ac2c <PageMemoryManager_Realloc+0x344>
2040aaa0:	fc842703          	lw	a4,-56(s0)
2040aaa4:	18e7f463          	bleu	a4,a5,2040ac2c <PageMemoryManager_Realloc+0x344>
      // TODO(liangfu): found out whether we can extend current entry
      //
      // insert new page entry
      IndexedEntry* it = free_map->lower_bound(free_map, npage);
2040aaa8:	fdc42783          	lw	a5,-36(s0)
2040aaac:	00c7a703          	lw	a4,12(a5)
2040aab0:	fc842783          	lw	a5,-56(s0)
2040aab4:	00078593          	mv	a1,a5
2040aab8:	fdc42503          	lw	a0,-36(s0)
2040aabc:	000700e7          	jalr	a4
2040aac0:	faa42823          	sw	a0,-80(s0)
      if (it != free_map->end(free_map)) {
2040aac4:	fdc42783          	lw	a5,-36(s0)
2040aac8:	0107a783          	lw	a5,16(a5)
2040aacc:	fdc42503          	lw	a0,-36(s0)
2040aad0:	000780e7          	jalr	a5
2040aad4:	00050713          	mv	a4,a0
2040aad8:	fb042783          	lw	a5,-80(s0)
2040aadc:	04e78863          	beq	a5,a4,2040ab2c <PageMemoryManager_Realloc+0x244>
        data = it->page.data;
2040aae0:	fb042783          	lw	a5,-80(s0)
2040aae4:	0187a783          	lw	a5,24(a5)
2040aae8:	fef42623          	sw	a5,-20(s0)
        start = it->page.ptable_begin;
2040aaec:	fb042783          	lw	a5,-80(s0)
2040aaf0:	00c7a803          	lw	a6,12(a5)
2040aaf4:	0087a783          	lw	a5,8(a5)
2040aaf8:	fcf42823          	sw	a5,-48(s0)
2040aafc:	fd042a23          	sw	a6,-44(s0)
        npage = it->page.num_pages;
2040ab00:	fb042783          	lw	a5,-80(s0)
2040ab04:	0147a803          	lw	a6,20(a5)
2040ab08:	0107a783          	lw	a5,16(a5)
2040ab0c:	fcf42423          	sw	a5,-56(s0)
2040ab10:	fd042623          	sw	a6,-52(s0)
        free_map->erase(free_map, it);
2040ab14:	fdc42783          	lw	a5,-36(s0)
2040ab18:	0147a783          	lw	a5,20(a5)
2040ab1c:	fb042583          	lw	a1,-80(s0)
2040ab20:	fdc42503          	lw	a0,-36(s0)
2040ab24:	000780e7          	jalr	a5
2040ab28:	0a80006f          	j	2040abd0 <PageMemoryManager_Realloc+0x2e8>
      } else {
        start = ptable->num_pages;
2040ab2c:	fe442783          	lw	a5,-28(s0)
2040ab30:	0107a783          	lw	a5,16(a5)
2040ab34:	fcf42823          	sw	a5,-48(s0)
2040ab38:	fc042a23          	sw	zero,-44(s0)
        if ((unsigned)(start + npage) > ptable->max_pages) {
2040ab3c:	fd042703          	lw	a4,-48(s0)
2040ab40:	fc842783          	lw	a5,-56(s0)
2040ab44:	00f70733          	add	a4,a4,a5
2040ab48:	fe442783          	lw	a5,-28(s0)
2040ab4c:	00c7a783          	lw	a5,12(a5)
2040ab50:	00e7f663          	bleu	a4,a5,2040ab5c <PageMemoryManager_Realloc+0x274>
#if TVM_CRT_DEBUG > 1
          TVMLogf("insufficient memory, start=%" PRId64 ", npage=%" PRId64 ", total=%" PRId64 "",
                  start, npage, start + npage);
#endif
          return kTvmErrorPlatformNoMemory;
2040ab54:	50300793          	li	a5,1283
2040ab58:	2640006f          	j	2040adbc <PageMemoryManager_Realloc+0x4d4>
        }
        Page p = PageCreate(mgr->ptable.memory_pool, mgr->ptable.page_size_bytes, start, npage);
2040ab5c:	fe842783          	lw	a5,-24(s0)
2040ab60:	00c7a583          	lw	a1,12(a5)
2040ab64:	fe842783          	lw	a5,-24(s0)
2040ab68:	0107a603          	lw	a2,16(a5)
2040ab6c:	f9840513          	addi	a0,s0,-104
2040ab70:	fc842783          	lw	a5,-56(s0)
2040ab74:	fcc42803          	lw	a6,-52(s0)
2040ab78:	fd042683          	lw	a3,-48(s0)
2040ab7c:	fd442703          	lw	a4,-44(s0)
2040ab80:	cacff0ef          	jal	ra,2040a02c <PageCreate>
        ptable->resize(ptable, start + npage, &p);
2040ab84:	fe442783          	lw	a5,-28(s0)
2040ab88:	0147a683          	lw	a3,20(a5)
2040ab8c:	fd042703          	lw	a4,-48(s0)
2040ab90:	fc842783          	lw	a5,-56(s0)
2040ab94:	00f707b3          	add	a5,a4,a5
2040ab98:	f9840713          	addi	a4,s0,-104
2040ab9c:	00070613          	mv	a2,a4
2040aba0:	00078593          	mv	a1,a5
2040aba4:	fe442503          	lw	a0,-28(s0)
2040aba8:	000680e7          	jalr	a3
        data = p.data;
2040abac:	fa842783          	lw	a5,-88(s0)
2040abb0:	fef42623          	sw	a5,-20(s0)
        pmap->set(pmap, data, &p);
2040abb4:	fe042783          	lw	a5,-32(s0)
2040abb8:	00c7a703          	lw	a4,12(a5)
2040abbc:	f9840793          	addi	a5,s0,-104
2040abc0:	00078613          	mv	a2,a5
2040abc4:	fec42583          	lw	a1,-20(s0)
2040abc8:	fe042503          	lw	a0,-32(s0)
2040abcc:	000700e7          	jalr	a4
      }
      // copy previous data to the new entry
      memcpy(data, ptr, ptable->page_size_bytes * pptr->num_pages);
2040abd0:	fe442783          	lw	a5,-28(s0)
2040abd4:	0047a703          	lw	a4,4(a5)
2040abd8:	fb442783          	lw	a5,-76(s0)
2040abdc:	00c7a803          	lw	a6,12(a5)
2040abe0:	0087a783          	lw	a5,8(a5)
2040abe4:	00078593          	mv	a1,a5
2040abe8:	00070513          	mv	a0,a4
2040abec:	044150ef          	jal	ra,2041fc30 <__mulsi3>
2040abf0:	00050793          	mv	a5,a0
2040abf4:	00078613          	mv	a2,a5
2040abf8:	f5842583          	lw	a1,-168(s0)
2040abfc:	fec42503          	lw	a0,-20(s0)
2040ac00:	0d5080ef          	jal	ra,204134d4 <memcpy>
      // release memory
      free_map->insert(free_map, pptr->num_pages, pptr);
2040ac04:	fdc42783          	lw	a5,-36(s0)
2040ac08:	0187a703          	lw	a4,24(a5)
2040ac0c:	fb442783          	lw	a5,-76(s0)
2040ac10:	00c7a803          	lw	a6,12(a5)
2040ac14:	0087a783          	lw	a5,8(a5)
2040ac18:	fb442603          	lw	a2,-76(s0)
2040ac1c:	00078593          	mv	a1,a5
2040ac20:	fdc42503          	lw	a0,-36(s0)
2040ac24:	000700e7          	jalr	a4
2040ac28:	1900006f          	j	2040adb8 <PageMemoryManager_Realloc+0x4d0>
    } else {
      start = pptr->ptable_begin;
2040ac2c:	fb442783          	lw	a5,-76(s0)
2040ac30:	0047a803          	lw	a6,4(a5)
2040ac34:	0007a783          	lw	a5,0(a5)
2040ac38:	fcf42823          	sw	a5,-48(s0)
2040ac3c:	fd042a23          	sw	a6,-44(s0)
2040ac40:	1780006f          	j	2040adb8 <PageMemoryManager_Realloc+0x4d0>
    }
  } else {
    IndexedEntry* it = free_map->lower_bound(free_map, npage);
2040ac44:	fdc42783          	lw	a5,-36(s0)
2040ac48:	00c7a703          	lw	a4,12(a5)
2040ac4c:	fc842783          	lw	a5,-56(s0)
2040ac50:	00078593          	mv	a1,a5
2040ac54:	fdc42503          	lw	a0,-36(s0)
2040ac58:	000700e7          	jalr	a4
2040ac5c:	fca42223          	sw	a0,-60(s0)
    if (it != free_map->end(free_map)) {
2040ac60:	fdc42783          	lw	a5,-36(s0)
2040ac64:	0107a783          	lw	a5,16(a5)
2040ac68:	fdc42503          	lw	a0,-36(s0)
2040ac6c:	000780e7          	jalr	a5
2040ac70:	00050713          	mv	a4,a0
2040ac74:	fc442783          	lw	a5,-60(s0)
2040ac78:	06e78c63          	beq	a5,a4,2040acf0 <PageMemoryManager_Realloc+0x408>
      Page p = it->page;
2040ac7c:	fc442783          	lw	a5,-60(s0)
2040ac80:	0087a703          	lw	a4,8(a5)
2040ac84:	f8e42023          	sw	a4,-128(s0)
2040ac88:	00c7a703          	lw	a4,12(a5)
2040ac8c:	f8e42223          	sw	a4,-124(s0)
2040ac90:	0107a703          	lw	a4,16(a5)
2040ac94:	f8e42423          	sw	a4,-120(s0)
2040ac98:	0147a703          	lw	a4,20(a5)
2040ac9c:	f8e42623          	sw	a4,-116(s0)
2040aca0:	0187a703          	lw	a4,24(a5)
2040aca4:	f8e42823          	sw	a4,-112(s0)
2040aca8:	01c7a783          	lw	a5,28(a5)
2040acac:	f8f42a23          	sw	a5,-108(s0)
      free_map->erase(free_map, it);
2040acb0:	fdc42783          	lw	a5,-36(s0)
2040acb4:	0147a783          	lw	a5,20(a5)
2040acb8:	fc442583          	lw	a1,-60(s0)
2040acbc:	fdc42503          	lw	a0,-36(s0)
2040acc0:	000780e7          	jalr	a5
      data = p.data;
2040acc4:	f9042783          	lw	a5,-112(s0)
2040acc8:	fef42623          	sw	a5,-20(s0)
      start = p.ptable_begin;
2040accc:	f8042783          	lw	a5,-128(s0)
2040acd0:	f8442803          	lw	a6,-124(s0)
2040acd4:	fcf42823          	sw	a5,-48(s0)
2040acd8:	fd042a23          	sw	a6,-44(s0)
      npage = p.num_pages;
2040acdc:	f8842783          	lw	a5,-120(s0)
2040ace0:	f8c42803          	lw	a6,-116(s0)
2040ace4:	fcf42423          	sw	a5,-56(s0)
2040ace8:	fd042623          	sw	a6,-52(s0)
2040acec:	0cc0006f          	j	2040adb8 <PageMemoryManager_Realloc+0x4d0>
    } else {
      PageTable* ptable = &(mgr->ptable);
2040acf0:	fe842783          	lw	a5,-24(s0)
2040acf4:	00c78793          	addi	a5,a5,12
2040acf8:	fcf42023          	sw	a5,-64(s0)
      start = ptable->num_pages;
2040acfc:	fc042783          	lw	a5,-64(s0)
2040ad00:	0107a783          	lw	a5,16(a5)
2040ad04:	fcf42823          	sw	a5,-48(s0)
2040ad08:	fc042a23          	sw	zero,-44(s0)
      if ((unsigned)(start + npage) > ptable->max_pages) {
2040ad0c:	fd042703          	lw	a4,-48(s0)
2040ad10:	fc842783          	lw	a5,-56(s0)
2040ad14:	00f70733          	add	a4,a4,a5
2040ad18:	fc042783          	lw	a5,-64(s0)
2040ad1c:	00c7a783          	lw	a5,12(a5)
2040ad20:	08e7f263          	bleu	a4,a5,2040ada4 <PageMemoryManager_Realloc+0x4bc>
#if TVM_CRT_DEBUG > 1
        TVMLogf("insufficient memory, start=%" PRId64 ", npage=%" PRId64 ", total=%" PRId64 "",
                start, npage, start + npage);
#endif
        /* insert page entry */
        Page p = PageCreate(mgr->ptable.memory_pool, mgr->ptable.page_size_bytes, start, npage);
2040ad24:	fe842783          	lw	a5,-24(s0)
2040ad28:	00c7a583          	lw	a1,12(a5)
2040ad2c:	fe842783          	lw	a5,-24(s0)
2040ad30:	0107a603          	lw	a2,16(a5)
2040ad34:	f6840513          	addi	a0,s0,-152
2040ad38:	fc842783          	lw	a5,-56(s0)
2040ad3c:	fcc42803          	lw	a6,-52(s0)
2040ad40:	fd042683          	lw	a3,-48(s0)
2040ad44:	fd442703          	lw	a4,-44(s0)
2040ad48:	ae4ff0ef          	jal	ra,2040a02c <PageCreate>
        ptable->resize(ptable, start + npage, &p);
2040ad4c:	fc042783          	lw	a5,-64(s0)
2040ad50:	0147a683          	lw	a3,20(a5)
2040ad54:	fd042703          	lw	a4,-48(s0)
2040ad58:	fc842783          	lw	a5,-56(s0)
2040ad5c:	00f707b3          	add	a5,a4,a5
2040ad60:	f6840713          	addi	a4,s0,-152
2040ad64:	00070613          	mv	a2,a4
2040ad68:	00078593          	mv	a1,a5
2040ad6c:	fc042503          	lw	a0,-64(s0)
2040ad70:	000680e7          	jalr	a3
        data = p.data;
2040ad74:	f7842783          	lw	a5,-136(s0)
2040ad78:	fef42623          	sw	a5,-20(s0)
        TLB* pmap = &(mgr->pmap);
2040ad7c:	fe842783          	lw	a5,-24(s0)
2040ad80:	02478793          	addi	a5,a5,36
2040ad84:	faf42e23          	sw	a5,-68(s0)
        pmap->set(pmap, data, &p);
2040ad88:	fbc42783          	lw	a5,-68(s0)
2040ad8c:	00c7a703          	lw	a4,12(a5)
2040ad90:	f6840793          	addi	a5,s0,-152
2040ad94:	00078613          	mv	a2,a5
2040ad98:	fec42583          	lw	a1,-20(s0)
2040ad9c:	fbc42503          	lw	a0,-68(s0)
2040ada0:	000700e7          	jalr	a4
      }
      mgr->interface.vleak_size++;
2040ada4:	fe842783          	lw	a5,-24(s0)
2040ada8:	0087a783          	lw	a5,8(a5)
2040adac:	00178713          	addi	a4,a5,1
2040adb0:	fe842783          	lw	a5,-24(s0)
2040adb4:	00e7a423          	sw	a4,8(a5)
  }
#if TVM_CRT_DEBUG > 1
  TVMLogf("reallocate: addr=%p, start=%" PRId64 "/%zu, npage=%" PRId64 ", vleak=%d, size=%zu", data,
          start, mgr->ptable.max_pages, npage, mgr->interface.vleak_size, size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
2040adb8:	00000793          	li	a5,0
}
2040adbc:	00078513          	mv	a0,a5
2040adc0:	0ac12083          	lw	ra,172(sp)
2040adc4:	0a812403          	lw	s0,168(sp)
2040adc8:	0b010113          	addi	sp,sp,176
2040adcc:	00008067          	ret

2040add0 <PageMemoryManager_Free>:
 * \param interface Pointer to this structure.
 * \param ptr A pointer returned from TVMPlatformMemoryAllocate which should be free'd.
 * \param dev Execution device passed to TVMPlatformMemoryAllocate. Fixed to {kDLCPU, 0}.
 * \return kTvmErrorNoError if successful; a descriptive error code otherwise.
 */
tvm_crt_error_t PageMemoryManager_Free(MemoryManagerInterface* interface, void* ptr, DLDevice dev) {
2040add0:	fc010113          	addi	sp,sp,-64
2040add4:	02112e23          	sw	ra,60(sp)
2040add8:	02812c23          	sw	s0,56(sp)
2040addc:	04010413          	addi	s0,sp,64
2040ade0:	fca42623          	sw	a0,-52(s0)
2040ade4:	fcb42423          	sw	a1,-56(s0)
2040ade8:	fcc42023          	sw	a2,-64(s0)
2040adec:	fcd42223          	sw	a3,-60(s0)
  MemoryManager* mgr = (MemoryManager*)interface;
2040adf0:	fcc42783          	lw	a5,-52(s0)
2040adf4:	fef42623          	sw	a5,-20(s0)

  TLB* pmap = &(mgr->pmap);
2040adf8:	fec42783          	lw	a5,-20(s0)
2040adfc:	02478793          	addi	a5,a5,36
2040ae00:	fef42423          	sw	a5,-24(s0)
  CHECK_NE(pmap->num_pages, 0, "invalid translation look-aside buffer.");
2040ae04:	fe842783          	lw	a5,-24(s0)
2040ae08:	0087a783          	lw	a5,8(a5)
2040ae0c:	02079a63          	bnez	a5,2040ae40 <PageMemoryManager_Free+0x70>
2040ae10:	00016717          	auipc	a4,0x16
2040ae14:	29470713          	addi	a4,a4,660 # 204210a4 <graph_executor_registry_funcs+0x1d0>
2040ae18:	00016697          	auipc	a3,0x16
2040ae1c:	29068693          	addi	a3,a3,656 # 204210a8 <graph_executor_registry_funcs+0x1d4>
2040ae20:	00016617          	auipc	a2,0x16
2040ae24:	28c60613          	addi	a2,a2,652 # 204210ac <graph_executor_registry_funcs+0x1d8>
2040ae28:	10900593          	li	a1,265
2040ae2c:	00016517          	auipc	a0,0x16
2040ae30:	29050513          	addi	a0,a0,656 # 204210bc <graph_executor_registry_funcs+0x1e8>
2040ae34:	108030ef          	jal	ra,2040df3c <TVMLogf>
2040ae38:	50000513          	li	a0,1280
2040ae3c:	e41f50ef          	jal	ra,20400c7c <TVMPlatformAbort>
  PageEntry* entry = pmap->find(pmap, (uint8_t*)ptr);  // NOLINT(*)
2040ae40:	fe842783          	lw	a5,-24(s0)
2040ae44:	0107a783          	lw	a5,16(a5)
2040ae48:	fc842583          	lw	a1,-56(s0)
2040ae4c:	fe842503          	lw	a0,-24(s0)
2040ae50:	000780e7          	jalr	a5
2040ae54:	fea42223          	sw	a0,-28(s0)
  CHECK_NE(entry, 0, "no valid page entry found.");
2040ae58:	fe442783          	lw	a5,-28(s0)
2040ae5c:	02079a63          	bnez	a5,2040ae90 <PageMemoryManager_Free+0xc0>
2040ae60:	00016717          	auipc	a4,0x16
2040ae64:	24470713          	addi	a4,a4,580 # 204210a4 <graph_executor_registry_funcs+0x1d0>
2040ae68:	00016697          	auipc	a3,0x16
2040ae6c:	24068693          	addi	a3,a3,576 # 204210a8 <graph_executor_registry_funcs+0x1d4>
2040ae70:	00016617          	auipc	a2,0x16
2040ae74:	2bc60613          	addi	a2,a2,700 # 2042112c <graph_executor_registry_funcs+0x258>
2040ae78:	10b00593          	li	a1,267
2040ae7c:	00016517          	auipc	a0,0x16
2040ae80:	2b850513          	addi	a0,a0,696 # 20421134 <graph_executor_registry_funcs+0x260>
2040ae84:	0b8030ef          	jal	ra,2040df3c <TVMLogf>
2040ae88:	50000513          	li	a0,1280
2040ae8c:	df1f50ef          	jal	ra,20400c7c <TVMPlatformAbort>
  Page* p = &(entry->page);
2040ae90:	fe442783          	lw	a5,-28(s0)
2040ae94:	00878793          	addi	a5,a5,8
2040ae98:	fef42023          	sw	a5,-32(s0)
  MultiMap* free_map = &(mgr->free_map);
2040ae9c:	fec42783          	lw	a5,-20(s0)
2040aea0:	03878793          	addi	a5,a5,56
2040aea4:	fcf42e23          	sw	a5,-36(s0)
  free_map->insert(free_map, p->num_pages, p);
2040aea8:	fdc42783          	lw	a5,-36(s0)
2040aeac:	0187a703          	lw	a4,24(a5)
2040aeb0:	fe042783          	lw	a5,-32(s0)
2040aeb4:	00c7a803          	lw	a6,12(a5)
2040aeb8:	0087a783          	lw	a5,8(a5)
2040aebc:	fe042603          	lw	a2,-32(s0)
2040aec0:	00078593          	mv	a1,a5
2040aec4:	fdc42503          	lw	a0,-36(s0)
2040aec8:	000700e7          	jalr	a4
  mgr->interface.vleak_size--;
2040aecc:	fec42783          	lw	a5,-20(s0)
2040aed0:	0087a783          	lw	a5,8(a5)
2040aed4:	fff78713          	addi	a4,a5,-1
2040aed8:	fec42783          	lw	a5,-20(s0)
2040aedc:	00e7a423          	sw	a4,8(a5)
#if TVM_CRT_DEBUG > 1
  TVMLogf("release: addr=%p, start=%" PRId64 "/%zu, npage=%zu, vleak=%d", ptr,
          entry->page.ptable_begin, mgr->ptable.max_pages, entry->page.num_pages,
          mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
2040aee0:	00000793          	li	a5,0
}
2040aee4:	00078513          	mv	a0,a5
2040aee8:	03c12083          	lw	ra,60(sp)
2040aeec:	03812403          	lw	s0,56(sp)
2040aef0:	04010113          	addi	sp,sp,64
2040aef4:	00008067          	ret

2040aef8 <PageMemoryManagerCreate>:

tvm_crt_error_t PageMemoryManagerCreate(MemoryManagerInterface** interface, uint8_t* memory_pool,
                                        size_t memory_pool_size_bytes,
                                        size_t page_size_bytes_log2) {
2040aef8:	fc010113          	addi	sp,sp,-64
2040aefc:	02112e23          	sw	ra,60(sp)
2040af00:	02812c23          	sw	s0,56(sp)
2040af04:	04010413          	addi	s0,sp,64
2040af08:	fca42623          	sw	a0,-52(s0)
2040af0c:	fcb42423          	sw	a1,-56(s0)
2040af10:	fcc42223          	sw	a2,-60(s0)
2040af14:	fcd42023          	sw	a3,-64(s0)
  memset(memory_pool, 0, sizeof(memory_pool_size_bytes));
2040af18:	00400613          	li	a2,4
2040af1c:	00000593          	li	a1,0
2040af20:	fc842503          	lw	a0,-56(s0)
2040af24:	66e080ef          	jal	ra,20413592 <memset>

  // Allocate enough space for MAX_PAGES.
  size_t page_size_bytes = 1 << page_size_bytes_log2;
2040af28:	00100713          	li	a4,1
2040af2c:	fc042783          	lw	a5,-64(s0)
2040af30:	00f717b3          	sll	a5,a4,a5
2040af34:	fef42623          	sw	a5,-20(s0)
  size_t metadata_bytes_per_page = sizeof(Page) + sizeof(PageEntry) + sizeof(IndexedEntry);
2040af38:	05800793          	li	a5,88
2040af3c:	fef42423          	sw	a5,-24(s0)
  size_t bytes_needed_per_page = page_size_bytes + metadata_bytes_per_page;
2040af40:	fec42703          	lw	a4,-20(s0)
2040af44:	fe842783          	lw	a5,-24(s0)
2040af48:	00f707b3          	add	a5,a4,a5
2040af4c:	fef42223          	sw	a5,-28(s0)
  size_t num_pages = (memory_pool_size_bytes - sizeof(MemoryManager)) / bytes_needed_per_page;
2040af50:	fc442783          	lw	a5,-60(s0)
2040af54:	fac78793          	addi	a5,a5,-84
2040af58:	fe442583          	lw	a1,-28(s0)
2040af5c:	00078513          	mv	a0,a5
2040af60:	54d140ef          	jal	ra,2041fcac <__udivsi3>
2040af64:	00050793          	mv	a5,a0
2040af68:	fef42023          	sw	a5,-32(s0)

  uint8_t* metadata_cursor = memory_pool + (num_pages << page_size_bytes_log2);
2040af6c:	fe042703          	lw	a4,-32(s0)
2040af70:	fc042783          	lw	a5,-64(s0)
2040af74:	00f717b3          	sll	a5,a4,a5
2040af78:	fc842703          	lw	a4,-56(s0)
2040af7c:	00f707b3          	add	a5,a4,a5
2040af80:	fcf42e23          	sw	a5,-36(s0)
  MemoryManager* manager = (MemoryManager*)metadata_cursor;
2040af84:	fdc42783          	lw	a5,-36(s0)
2040af88:	fcf42c23          	sw	a5,-40(s0)
  *interface = &manager->interface;
2040af8c:	fd842703          	lw	a4,-40(s0)
2040af90:	fcc42783          	lw	a5,-52(s0)
2040af94:	00e7a023          	sw	a4,0(a5)
  /* handle MemoryManager member functions */
  manager->interface.Allocate = PageMemoryManager_Allocate;
2040af98:	fd842783          	lw	a5,-40(s0)
2040af9c:	fffff717          	auipc	a4,0xfffff
2040afa0:	72470713          	addi	a4,a4,1828 # 2040a6c0 <PageMemoryManager_Allocate>
2040afa4:	00e7a023          	sw	a4,0(a5)
  //  manager->Realloc = MemoryManager_Reallocate;
  manager->interface.Free = PageMemoryManager_Free;
2040afa8:	fd842783          	lw	a5,-40(s0)
2040afac:	00000717          	auipc	a4,0x0
2040afb0:	e2470713          	addi	a4,a4,-476 # 2040add0 <PageMemoryManager_Free>
2040afb4:	00e7a223          	sw	a4,4(a5)

  metadata_cursor += sizeof(MemoryManager);
2040afb8:	fdc42783          	lw	a5,-36(s0)
2040afbc:	05478793          	addi	a5,a5,84
2040afc0:	fcf42e23          	sw	a5,-36(s0)

  manager->interface.Allocate = PageMemoryManager_Allocate;
2040afc4:	fd842783          	lw	a5,-40(s0)
2040afc8:	fffff717          	auipc	a4,0xfffff
2040afcc:	6f870713          	addi	a4,a4,1784 # 2040a6c0 <PageMemoryManager_Allocate>
2040afd0:	00e7a023          	sw	a4,0(a5)
  manager->interface.Free = PageMemoryManager_Free;
2040afd4:	fd842783          	lw	a5,-40(s0)
2040afd8:	00000717          	auipc	a4,0x0
2040afdc:	df870713          	addi	a4,a4,-520 # 2040add0 <PageMemoryManager_Free>
2040afe0:	00e7a223          	sw	a4,4(a5)
  manager->ptable.memory_pool = memory_pool;
2040afe4:	fd842783          	lw	a5,-40(s0)
2040afe8:	fc842703          	lw	a4,-56(s0)
2040afec:	00e7a623          	sw	a4,12(a5)

  /* handle PageTable member functions */
  manager->ptable.page = (Page*)metadata_cursor;
2040aff0:	fd842783          	lw	a5,-40(s0)
2040aff4:	fdc42703          	lw	a4,-36(s0)
2040aff8:	00e7aa23          	sw	a4,20(a5)
  metadata_cursor += sizeof(Page) * num_pages;
2040affc:	fe042703          	lw	a4,-32(s0)
2040b000:	00070793          	mv	a5,a4
2040b004:	00179793          	slli	a5,a5,0x1
2040b008:	00e787b3          	add	a5,a5,a4
2040b00c:	00379793          	slli	a5,a5,0x3
2040b010:	00078713          	mv	a4,a5
2040b014:	fdc42783          	lw	a5,-36(s0)
2040b018:	00e787b3          	add	a5,a5,a4
2040b01c:	fcf42e23          	sw	a5,-36(s0)

  manager->ptable.page_size_bytes = (1 << page_size_bytes_log2);
2040b020:	00100713          	li	a4,1
2040b024:	fc042783          	lw	a5,-64(s0)
2040b028:	00f717b3          	sll	a5,a4,a5
2040b02c:	00078713          	mv	a4,a5
2040b030:	fd842783          	lw	a5,-40(s0)
2040b034:	00e7a823          	sw	a4,16(a5)
  manager->ptable.max_pages = num_pages;
2040b038:	fd842783          	lw	a5,-40(s0)
2040b03c:	fe042703          	lw	a4,-32(s0)
2040b040:	00e7ac23          	sw	a4,24(a5)
  manager->ptable.resize = PageTable_Resize;
2040b044:	fd842783          	lw	a5,-40(s0)
2040b048:	fffff717          	auipc	a4,0xfffff
2040b04c:	09c70713          	addi	a4,a4,156 # 2040a0e4 <PageTable_Resize>
2040b050:	02e7a023          	sw	a4,32(a5)

  /* handle TLB member functions */
  manager->pmap.entries = (PageEntry*)metadata_cursor;
2040b054:	fd842783          	lw	a5,-40(s0)
2040b058:	fdc42703          	lw	a4,-36(s0)
2040b05c:	02e7a223          	sw	a4,36(a5)
  metadata_cursor += sizeof(PageEntry) * num_pages;
2040b060:	fe042783          	lw	a5,-32(s0)
2040b064:	00579793          	slli	a5,a5,0x5
2040b068:	fdc42703          	lw	a4,-36(s0)
2040b06c:	00f707b3          	add	a5,a4,a5
2040b070:	fcf42e23          	sw	a5,-36(s0)
  manager->pmap.max_pages = num_pages;
2040b074:	fd842783          	lw	a5,-40(s0)
2040b078:	fe042703          	lw	a4,-32(s0)
2040b07c:	02e7a423          	sw	a4,40(a5)
  manager->pmap.num_pages = 0;
2040b080:	fd842783          	lw	a5,-40(s0)
2040b084:	0207a623          	sw	zero,44(a5)

  manager->pmap.set = TLB_Set;
2040b088:	fd842783          	lw	a5,-40(s0)
2040b08c:	fffff717          	auipc	a4,0xfffff
2040b090:	16070713          	addi	a4,a4,352 # 2040a1ec <TLB_Set>
2040b094:	02e7a823          	sw	a4,48(a5)
  manager->pmap.find = TLB_Find;
2040b098:	fd842783          	lw	a5,-40(s0)
2040b09c:	fffff717          	auipc	a4,0xfffff
2040b0a0:	26870713          	addi	a4,a4,616 # 2040a304 <TLB_Find>
2040b0a4:	02e7aa23          	sw	a4,52(a5)
  /* handle free_map member functions */
  manager->free_map.entries = (IndexedEntry*)metadata_cursor;
2040b0a8:	fd842783          	lw	a5,-40(s0)
2040b0ac:	fdc42703          	lw	a4,-36(s0)
2040b0b0:	02e7ac23          	sw	a4,56(a5)
  metadata_cursor += sizeof(IndexedEntry) * num_pages;
2040b0b4:	fe042783          	lw	a5,-32(s0)
2040b0b8:	00579793          	slli	a5,a5,0x5
2040b0bc:	fdc42703          	lw	a4,-36(s0)
2040b0c0:	00f707b3          	add	a5,a4,a5
2040b0c4:	fcf42e23          	sw	a5,-36(s0)
  manager->free_map.max_entries = num_pages;
2040b0c8:	fd842783          	lw	a5,-40(s0)
2040b0cc:	fe042703          	lw	a4,-32(s0)
2040b0d0:	02e7ae23          	sw	a4,60(a5)
  manager->free_map.lower_bound = MultiMap_LowerBound;
2040b0d4:	fd842783          	lw	a5,-40(s0)
2040b0d8:	fffff717          	auipc	a4,0xfffff
2040b0dc:	2b870713          	addi	a4,a4,696 # 2040a390 <MultiMap_LowerBound>
2040b0e0:	04e7a223          	sw	a4,68(a5)
  manager->free_map.end = MultiMap_End;
2040b0e4:	fd842783          	lw	a5,-40(s0)
2040b0e8:	fffff717          	auipc	a4,0xfffff
2040b0ec:	35c70713          	addi	a4,a4,860 # 2040a444 <MultiMap_End>
2040b0f0:	04e7a423          	sw	a4,72(a5)
  manager->free_map.erase = MultiMap_Erase;
2040b0f4:	fd842783          	lw	a5,-40(s0)
2040b0f8:	fffff717          	auipc	a4,0xfffff
2040b0fc:	37470713          	addi	a4,a4,884 # 2040a46c <MultiMap_Erase>
2040b100:	04e7a623          	sw	a4,76(a5)
  manager->free_map.insert = MultiMap_Insert;
2040b104:	fd842783          	lw	a5,-40(s0)
2040b108:	fffff717          	auipc	a4,0xfffff
2040b10c:	48070713          	addi	a4,a4,1152 # 2040a588 <MultiMap_Insert>
2040b110:	04e7a823          	sw	a4,80(a5)

  return kTvmErrorNoError;
2040b114:	00000793          	li	a5,0
}
2040b118:	00078513          	mv	a0,a5
2040b11c:	03c12083          	lw	ra,60(sp)
2040b120:	03812403          	lw	s0,56(sp)
2040b124:	04010113          	addi	sp,sp,64
2040b128:	00008067          	ret

2040b12c <StackMemoryManager_Allocate_Body>:
// LINT_C_FILE
#include <tvm/runtime/crt/stack_allocator.h>

tvm_crt_error_t StackMemoryManager_Allocate_Body(tvm_workspace_t* tvm_runtime_workspace,
                                                 int32_t nbytes, void** current_alloc,
                                                 uint8_t do_lifo_check) {
2040b12c:	fd010113          	addi	sp,sp,-48
2040b130:	02812623          	sw	s0,44(sp)
2040b134:	03010413          	addi	s0,sp,48
2040b138:	fca42e23          	sw	a0,-36(s0)
2040b13c:	fcb42c23          	sw	a1,-40(s0)
2040b140:	fcc42a23          	sw	a2,-44(s0)
2040b144:	00068793          	mv	a5,a3
2040b148:	fcf409a3          	sb	a5,-45(s0)
  // reserve bytes at the end of the allocation such that
  // next_alloc % TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES == 0.
  uint32_t offset_bytes =
      (TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES - nbytes) & (TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES - 1);
2040b14c:	fd842783          	lw	a5,-40(s0)
2040b150:	40f007b3          	neg	a5,a5
  uint32_t offset_bytes =
2040b154:	00f7f793          	andi	a5,a5,15
2040b158:	fef42423          	sw	a5,-24(s0)
  uint8_t* workspace_end = tvm_runtime_workspace->workspace + tvm_runtime_workspace->workspace_size;
2040b15c:	fdc42783          	lw	a5,-36(s0)
2040b160:	0047a703          	lw	a4,4(a5)
2040b164:	fdc42783          	lw	a5,-36(s0)
2040b168:	0087a783          	lw	a5,8(a5)
2040b16c:	00f707b3          	add	a5,a4,a5
2040b170:	fef42223          	sw	a5,-28(s0)
  if (tvm_runtime_workspace->next_alloc + nbytes + offset_bytes > workspace_end) {
2040b174:	fdc42783          	lw	a5,-36(s0)
2040b178:	0007a703          	lw	a4,0(a5)
2040b17c:	fd842683          	lw	a3,-40(s0)
2040b180:	fe842783          	lw	a5,-24(s0)
2040b184:	00f687b3          	add	a5,a3,a5
2040b188:	00f707b3          	add	a5,a4,a5
2040b18c:	fe442703          	lw	a4,-28(s0)
2040b190:	00f77663          	bleu	a5,a4,2040b19c <StackMemoryManager_Allocate_Body+0x70>
    return kTvmErrorPlatformNoMemory;
2040b194:	50300793          	li	a5,1283
2040b198:	0980006f          	j	2040b230 <StackMemoryManager_Allocate_Body+0x104>
  }
  (*current_alloc) = tvm_runtime_workspace->next_alloc;
2040b19c:	fdc42783          	lw	a5,-36(s0)
2040b1a0:	0007a703          	lw	a4,0(a5)
2040b1a4:	fd442783          	lw	a5,-44(s0)
2040b1a8:	00e7a023          	sw	a4,0(a5)
  uint8_t* next_alloc = tvm_runtime_workspace->next_alloc + nbytes + offset_bytes;
2040b1ac:	fdc42783          	lw	a5,-36(s0)
2040b1b0:	0007a703          	lw	a4,0(a5)
2040b1b4:	fd842683          	lw	a3,-40(s0)
2040b1b8:	fe842783          	lw	a5,-24(s0)
2040b1bc:	00f687b3          	add	a5,a3,a5
2040b1c0:	00f707b3          	add	a5,a4,a5
2040b1c4:	fef42623          	sw	a5,-20(s0)
  if (do_lifo_check != 0) {
2040b1c8:	fd344783          	lbu	a5,-45(s0)
2040b1cc:	04078a63          	beqz	a5,2040b220 <StackMemoryManager_Allocate_Body+0xf4>
    if (next_alloc + STACK_ALLOCATOR_TAG_SIZE_BYTES > workspace_end) {
2040b1d0:	fec42783          	lw	a5,-20(s0)
2040b1d4:	00478793          	addi	a5,a5,4
2040b1d8:	fe442703          	lw	a4,-28(s0)
2040b1dc:	00f77663          	bleu	a5,a4,2040b1e8 <StackMemoryManager_Allocate_Body+0xbc>
      return kTvmErrorPlatformNoMemory;
2040b1e0:	50300793          	li	a5,1283
2040b1e4:	04c0006f          	j	2040b230 <StackMemoryManager_Allocate_Body+0x104>
    }
    const uint32_t total_size = (nbytes + offset_bytes + STACK_ALLOCATOR_TAG_SIZE_BYTES);
2040b1e8:	fd842703          	lw	a4,-40(s0)
2040b1ec:	fe842783          	lw	a5,-24(s0)
2040b1f0:	00f707b3          	add	a5,a4,a5
2040b1f4:	00478793          	addi	a5,a5,4
2040b1f8:	fef42023          	sw	a5,-32(s0)
    *((uint32_t*)next_alloc) = total_size ^ STACK_ALLOCATOR_TAG;
2040b1fc:	fe042703          	lw	a4,-32(s0)
2040b200:	abcd17b7          	lui	a5,0xabcd1
2040b204:	23478793          	addi	a5,a5,564 # abcd1234 <pulp__FC+0xabcd1235>
2040b208:	00f74733          	xor	a4,a4,a5
2040b20c:	fec42783          	lw	a5,-20(s0)
2040b210:	00e7a023          	sw	a4,0(a5)
    next_alloc += STACK_ALLOCATOR_TAG_SIZE_BYTES;
2040b214:	fec42783          	lw	a5,-20(s0)
2040b218:	00478793          	addi	a5,a5,4
2040b21c:	fef42623          	sw	a5,-20(s0)
  }

  tvm_runtime_workspace->next_alloc = next_alloc;
2040b220:	fdc42783          	lw	a5,-36(s0)
2040b224:	fec42703          	lw	a4,-20(s0)
2040b228:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
2040b22c:	00000793          	li	a5,0
}
2040b230:	00078513          	mv	a0,a5
2040b234:	02c12403          	lw	s0,44(sp)
2040b238:	03010113          	addi	sp,sp,48
2040b23c:	00008067          	ret

2040b240 <StackMemoryManager_Allocate>:

tvm_crt_error_t StackMemoryManager_Allocate(tvm_workspace_t* tvm_runtime_workspace, int32_t nbytes,
                                            void** current_alloc) {
2040b240:	fd010113          	addi	sp,sp,-48
2040b244:	02112623          	sw	ra,44(sp)
2040b248:	02812423          	sw	s0,40(sp)
2040b24c:	03010413          	addi	s0,sp,48
2040b250:	fca42e23          	sw	a0,-36(s0)
2040b254:	fcb42c23          	sw	a1,-40(s0)
2040b258:	fcc42a23          	sw	a2,-44(s0)
  uint8_t do_lifo_check = 0;
2040b25c:	fe0407a3          	sb	zero,-17(s0)
#ifdef TVM_CRT_STACK_ALLOCATOR_ENABLE_LIFO_CHECK
  do_lifo_check = 1;
#endif
  return StackMemoryManager_Allocate_Body(tvm_runtime_workspace, nbytes, current_alloc,
2040b260:	fef44783          	lbu	a5,-17(s0)
2040b264:	00078693          	mv	a3,a5
2040b268:	fd442603          	lw	a2,-44(s0)
2040b26c:	fd842583          	lw	a1,-40(s0)
2040b270:	fdc42503          	lw	a0,-36(s0)
2040b274:	eb9ff0ef          	jal	ra,2040b12c <StackMemoryManager_Allocate_Body>
2040b278:	00050793          	mv	a5,a0
                                          do_lifo_check);
}
2040b27c:	00078513          	mv	a0,a5
2040b280:	02c12083          	lw	ra,44(sp)
2040b284:	02812403          	lw	s0,40(sp)
2040b288:	03010113          	addi	sp,sp,48
2040b28c:	00008067          	ret

2040b290 <StackMemoryManager_Free_Body>:

tvm_crt_error_t StackMemoryManager_Free_Body(tvm_workspace_t* tvm_runtime_workspace, void* ptr,
                                             uint8_t do_lifo_check) {
2040b290:	fd010113          	addi	sp,sp,-48
2040b294:	02812623          	sw	s0,44(sp)
2040b298:	03010413          	addi	s0,sp,48
2040b29c:	fca42e23          	sw	a0,-36(s0)
2040b2a0:	fcb42c23          	sw	a1,-40(s0)
2040b2a4:	00060793          	mv	a5,a2
2040b2a8:	fcf40ba3          	sb	a5,-41(s0)
  if (do_lifo_check != 0) {
2040b2ac:	fd744783          	lbu	a5,-41(s0)
2040b2b0:	04078a63          	beqz	a5,2040b304 <StackMemoryManager_Free_Body+0x74>
    uint32_t tag = *(((uint32_t*)tvm_runtime_workspace->next_alloc) - 1);
2040b2b4:	fdc42783          	lw	a5,-36(s0)
2040b2b8:	0007a783          	lw	a5,0(a5)
2040b2bc:	ffc7a783          	lw	a5,-4(a5)
2040b2c0:	fef42623          	sw	a5,-20(s0)
    uint32_t actual_size = (tvm_runtime_workspace->next_alloc - (uint8_t*)ptr);
2040b2c4:	fdc42783          	lw	a5,-36(s0)
2040b2c8:	0007a783          	lw	a5,0(a5)
2040b2cc:	00078713          	mv	a4,a5
2040b2d0:	fd842783          	lw	a5,-40(s0)
2040b2d4:	40f707b3          	sub	a5,a4,a5
2040b2d8:	fef42423          	sw	a5,-24(s0)
    uint32_t expected_size = tag ^ STACK_ALLOCATOR_TAG;
2040b2dc:	fec42703          	lw	a4,-20(s0)
2040b2e0:	abcd17b7          	lui	a5,0xabcd1
2040b2e4:	23478793          	addi	a5,a5,564 # abcd1234 <pulp__FC+0xabcd1235>
2040b2e8:	00f747b3          	xor	a5,a4,a5
2040b2ec:	fef42223          	sw	a5,-28(s0)
    if (expected_size != actual_size) {
2040b2f0:	fe442703          	lw	a4,-28(s0)
2040b2f4:	fe842783          	lw	a5,-24(s0)
2040b2f8:	00f70663          	beq	a4,a5,2040b304 <StackMemoryManager_Free_Body+0x74>
      return kTvmErrorPlatformStackAllocBadFree;
2040b2fc:	50500793          	li	a5,1285
2040b300:	0140006f          	j	2040b314 <StackMemoryManager_Free_Body+0x84>
    }
  }
  tvm_runtime_workspace->next_alloc = (uint8_t*)ptr;
2040b304:	fdc42783          	lw	a5,-36(s0)
2040b308:	fd842703          	lw	a4,-40(s0)
2040b30c:	00e7a023          	sw	a4,0(a5)
  return kTvmErrorNoError;
2040b310:	00000793          	li	a5,0
}
2040b314:	00078513          	mv	a0,a5
2040b318:	02c12403          	lw	s0,44(sp)
2040b31c:	03010113          	addi	sp,sp,48
2040b320:	00008067          	ret

2040b324 <StackMemoryManager_Free>:

tvm_crt_error_t StackMemoryManager_Free(tvm_workspace_t* tvm_runtime_workspace, void* ptr) {
2040b324:	fd010113          	addi	sp,sp,-48
2040b328:	02112623          	sw	ra,44(sp)
2040b32c:	02812423          	sw	s0,40(sp)
2040b330:	03010413          	addi	s0,sp,48
2040b334:	fca42e23          	sw	a0,-36(s0)
2040b338:	fcb42c23          	sw	a1,-40(s0)
  uint8_t do_lifo_check = 0;
2040b33c:	fe0407a3          	sb	zero,-17(s0)
#ifdef TVM_CRT_STACK_ALLOCATOR_ENABLE_LIFO_CHECK
  do_lifo_check = 1;
#endif
  return StackMemoryManager_Free_Body(tvm_runtime_workspace, ptr, do_lifo_check);
2040b340:	fef44783          	lbu	a5,-17(s0)
2040b344:	00078613          	mv	a2,a5
2040b348:	fd842583          	lw	a1,-40(s0)
2040b34c:	fdc42503          	lw	a0,-36(s0)
2040b350:	f41ff0ef          	jal	ra,2040b290 <StackMemoryManager_Free_Body>
2040b354:	00050793          	mv	a5,a0
}
2040b358:	00078513          	mv	a0,a5
2040b35c:	02c12083          	lw	ra,44(sp)
2040b360:	02812403          	lw	s0,40(sp)
2040b364:	03010113          	addi	sp,sp,48
2040b368:	00008067          	ret

2040b36c <StackMemoryManager_Init>:

tvm_crt_error_t StackMemoryManager_Init(tvm_workspace_t* tvm_runtime_workspace,
                                        uint8_t* g_aot_memory, size_t workspace_size) {
2040b36c:	fd010113          	addi	sp,sp,-48
2040b370:	02812623          	sw	s0,44(sp)
2040b374:	03010413          	addi	s0,sp,48
2040b378:	fca42e23          	sw	a0,-36(s0)
2040b37c:	fcb42c23          	sw	a1,-40(s0)
2040b380:	fcc42a23          	sw	a2,-44(s0)
  // We need to round up g_aot_memory in case it is not aligned to
  // TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES.
  uintptr_t unaligned_mask = TVM_RUNTIME_ALLOC_ALIGNMENT_BYTES - 1;
2040b384:	00f00793          	li	a5,15
2040b388:	fef42623          	sw	a5,-20(s0)
  uint8_t* memory_aligned =
      (uint8_t*)(((uintptr_t)g_aot_memory + unaligned_mask) & ~unaligned_mask);
2040b38c:	fd842703          	lw	a4,-40(s0)
2040b390:	fec42783          	lw	a5,-20(s0)
2040b394:	00f70733          	add	a4,a4,a5
2040b398:	fec42783          	lw	a5,-20(s0)
2040b39c:	fff7c793          	not	a5,a5
2040b3a0:	00f777b3          	and	a5,a4,a5
  uint8_t* memory_aligned =
2040b3a4:	fef42423          	sw	a5,-24(s0)
  uint32_t offset = (uintptr_t)(memory_aligned - g_aot_memory);
2040b3a8:	fe842703          	lw	a4,-24(s0)
2040b3ac:	fd842783          	lw	a5,-40(s0)
2040b3b0:	40f707b3          	sub	a5,a4,a5
2040b3b4:	fef42223          	sw	a5,-28(s0)

  tvm_runtime_workspace->next_alloc = memory_aligned;
2040b3b8:	fdc42783          	lw	a5,-36(s0)
2040b3bc:	fe842703          	lw	a4,-24(s0)
2040b3c0:	00e7a023          	sw	a4,0(a5)
  tvm_runtime_workspace->workspace = memory_aligned;
2040b3c4:	fdc42783          	lw	a5,-36(s0)
2040b3c8:	fe842703          	lw	a4,-24(s0)
2040b3cc:	00e7a223          	sw	a4,4(a5)
  tvm_runtime_workspace->workspace_size = workspace_size - offset;
2040b3d0:	fd442703          	lw	a4,-44(s0)
2040b3d4:	fe442783          	lw	a5,-28(s0)
2040b3d8:	40f70733          	sub	a4,a4,a5
2040b3dc:	fdc42783          	lw	a5,-36(s0)
2040b3e0:	00e7a423          	sw	a4,8(a5)
  return kTvmErrorNoError;
2040b3e4:	00000793          	li	a5,0
}
2040b3e8:	00078513          	mv	a0,a5
2040b3ec:	02c12403          	lw	s0,44(sp)
2040b3f0:	03010113          	addi	sp,sp,48
2040b3f4:	00008067          	ret

2040b3f8 <crc_xmodem>:
 *
 * The function crc_xmodem() performs a one-pass calculation of an X-Modem CRC
 * for a byte string that has been passed as a parameter.
 */

uint16_t crc_xmodem(const unsigned char* input_str, size_t num_bytes) {
2040b3f8:	fe010113          	addi	sp,sp,-32
2040b3fc:	00112e23          	sw	ra,28(sp)
2040b400:	00812c23          	sw	s0,24(sp)
2040b404:	02010413          	addi	s0,sp,32
2040b408:	fea42623          	sw	a0,-20(s0)
2040b40c:	feb42423          	sw	a1,-24(s0)
  return crc_ccitt_generic(input_str, num_bytes, CRC_START_XMODEM);
2040b410:	00000613          	li	a2,0
2040b414:	fe842583          	lw	a1,-24(s0)
2040b418:	fec42503          	lw	a0,-20(s0)
2040b41c:	0a4000ef          	jal	ra,2040b4c0 <crc_ccitt_generic>
2040b420:	00050793          	mv	a5,a0

} /* crc_xmodem */
2040b424:	00078513          	mv	a0,a5
2040b428:	01c12083          	lw	ra,28(sp)
2040b42c:	01812403          	lw	s0,24(sp)
2040b430:	02010113          	addi	sp,sp,32
2040b434:	00008067          	ret

2040b438 <crc_ccitt_1d0f>:
 * The function crc_ccitt_1d0f() performs a one-pass calculation of the CCITT
 * CRC for a byte string that has been passed as a parameter. The initial value
 * 0x1d0f is used for the CRC.
 */

uint16_t crc_ccitt_1d0f(const unsigned char* input_str, size_t num_bytes) {
2040b438:	fe010113          	addi	sp,sp,-32
2040b43c:	00112e23          	sw	ra,28(sp)
2040b440:	00812c23          	sw	s0,24(sp)
2040b444:	02010413          	addi	s0,sp,32
2040b448:	fea42623          	sw	a0,-20(s0)
2040b44c:	feb42423          	sw	a1,-24(s0)
  return crc_ccitt_generic(input_str, num_bytes, CRC_START_CCITT_1D0F);
2040b450:	000027b7          	lui	a5,0x2
2040b454:	d0f78613          	addi	a2,a5,-753 # 1d0f <__stack_size-0x22f1>
2040b458:	fe842583          	lw	a1,-24(s0)
2040b45c:	fec42503          	lw	a0,-20(s0)
2040b460:	060000ef          	jal	ra,2040b4c0 <crc_ccitt_generic>
2040b464:	00050793          	mv	a5,a0

} /* crc_ccitt_1d0f */
2040b468:	00078513          	mv	a0,a5
2040b46c:	01c12083          	lw	ra,28(sp)
2040b470:	01812403          	lw	s0,24(sp)
2040b474:	02010113          	addi	sp,sp,32
2040b478:	00008067          	ret

2040b47c <crc_ccitt_ffff>:
 * The function crc_ccitt_ffff() performs a one-pass calculation of the CCITT
 * CRC for a byte string that has been passed as a parameter. The initial value
 * 0xffff is used for the CRC.
 */

uint16_t crc_ccitt_ffff(const unsigned char* input_str, size_t num_bytes) {
2040b47c:	fe010113          	addi	sp,sp,-32
2040b480:	00112e23          	sw	ra,28(sp)
2040b484:	00812c23          	sw	s0,24(sp)
2040b488:	02010413          	addi	s0,sp,32
2040b48c:	fea42623          	sw	a0,-20(s0)
2040b490:	feb42423          	sw	a1,-24(s0)
  return crc_ccitt_generic(input_str, num_bytes, CRC_START_CCITT_FFFF);
2040b494:	000107b7          	lui	a5,0x10
2040b498:	fff78613          	addi	a2,a5,-1 # ffff <__stack_size+0xbfff>
2040b49c:	fe842583          	lw	a1,-24(s0)
2040b4a0:	fec42503          	lw	a0,-20(s0)
2040b4a4:	01c000ef          	jal	ra,2040b4c0 <crc_ccitt_generic>
2040b4a8:	00050793          	mv	a5,a0

} /* crc_ccitt_ffff */
2040b4ac:	00078513          	mv	a0,a5
2040b4b0:	01c12083          	lw	ra,28(sp)
2040b4b4:	01812403          	lw	s0,24(sp)
2040b4b8:	02010113          	addi	sp,sp,32
2040b4bc:	00008067          	ret

2040b4c0 <crc_ccitt_generic>:
 * algorithm for a one-pass calculation of the CRC for a byte string. The
 * function accepts an initial start value for the crc.
 */

static uint16_t crc_ccitt_generic(const unsigned char* input_str, size_t num_bytes,
                                  uint16_t start_value) {
2040b4c0:	fd010113          	addi	sp,sp,-48
2040b4c4:	02812623          	sw	s0,44(sp)
2040b4c8:	03010413          	addi	s0,sp,48
2040b4cc:	fca42e23          	sw	a0,-36(s0)
2040b4d0:	fcb42c23          	sw	a1,-40(s0)
2040b4d4:	00060793          	mv	a5,a2
2040b4d8:	fcf41b23          	sh	a5,-42(s0)
  uint16_t crc;
  const unsigned char* ptr;
  size_t a;

  crc = start_value;
2040b4dc:	fd645783          	lhu	a5,-42(s0)
2040b4e0:	fef41723          	sh	a5,-18(s0)
  ptr = input_str;
2040b4e4:	fdc42783          	lw	a5,-36(s0)
2040b4e8:	fef42423          	sw	a5,-24(s0)

  if (ptr != NULL)
2040b4ec:	fe842783          	lw	a5,-24(s0)
2040b4f0:	08078663          	beqz	a5,2040b57c <crc_ccitt_generic+0xbc>
    for (a = 0; a < num_bytes; a++) {
2040b4f4:	fe042223          	sw	zero,-28(s0)
2040b4f8:	0780006f          	j	2040b570 <crc_ccitt_generic+0xb0>
      crc = (crc << 8) ^ crc_tabccitt[((crc >> 8) ^ (uint16_t)*ptr++) & 0x00FF];
2040b4fc:	fee45783          	lhu	a5,-18(s0)
2040b500:	00879793          	slli	a5,a5,0x8
2040b504:	01079713          	slli	a4,a5,0x10
2040b508:	41075713          	srai	a4,a4,0x10
2040b50c:	fee45783          	lhu	a5,-18(s0)
2040b510:	0087d793          	srli	a5,a5,0x8
2040b514:	01079793          	slli	a5,a5,0x10
2040b518:	0107d793          	srli	a5,a5,0x10
2040b51c:	00078613          	mv	a2,a5
2040b520:	fe842783          	lw	a5,-24(s0)
2040b524:	00178693          	addi	a3,a5,1
2040b528:	fed42423          	sw	a3,-24(s0)
2040b52c:	0007c783          	lbu	a5,0(a5)
2040b530:	00f647b3          	xor	a5,a2,a5
2040b534:	0ff7f793          	andi	a5,a5,255
2040b538:	00016697          	auipc	a3,0x16
2040b53c:	c6068693          	addi	a3,a3,-928 # 20421198 <crc_tabccitt>
2040b540:	00179793          	slli	a5,a5,0x1
2040b544:	00f687b3          	add	a5,a3,a5
2040b548:	0007d783          	lhu	a5,0(a5)
2040b54c:	01079793          	slli	a5,a5,0x10
2040b550:	4107d793          	srai	a5,a5,0x10
2040b554:	00f747b3          	xor	a5,a4,a5
2040b558:	01079793          	slli	a5,a5,0x10
2040b55c:	4107d793          	srai	a5,a5,0x10
2040b560:	fef41723          	sh	a5,-18(s0)
    for (a = 0; a < num_bytes; a++) {
2040b564:	fe442783          	lw	a5,-28(s0)
2040b568:	00178793          	addi	a5,a5,1
2040b56c:	fef42223          	sw	a5,-28(s0)
2040b570:	fe442703          	lw	a4,-28(s0)
2040b574:	fd842783          	lw	a5,-40(s0)
2040b578:	f8f762e3          	bltu	a4,a5,2040b4fc <crc_ccitt_generic+0x3c>
    }

  return crc;
2040b57c:	fee45783          	lhu	a5,-18(s0)

} /* crc_ccitt_generic */
2040b580:	00078513          	mv	a0,a5
2040b584:	02c12403          	lw	s0,44(sp)
2040b588:	03010113          	addi	sp,sp,48
2040b58c:	00008067          	ret

2040b590 <update_crc_ccitt>:
 *
 * The function update_crc_ccitt() calculates a new CRC-CCITT value based on
 * the previous value of the CRC and the next byte of the data to be checked.
 */

uint16_t update_crc_ccitt(uint16_t crc, unsigned char c) {
2040b590:	fe010113          	addi	sp,sp,-32
2040b594:	00812e23          	sw	s0,28(sp)
2040b598:	02010413          	addi	s0,sp,32
2040b59c:	00050793          	mv	a5,a0
2040b5a0:	00058713          	mv	a4,a1
2040b5a4:	fef41723          	sh	a5,-18(s0)
2040b5a8:	00070793          	mv	a5,a4
2040b5ac:	fef406a3          	sb	a5,-19(s0)
  return (crc << 8) ^ crc_tabccitt[((crc >> 8) ^ (uint16_t)c) & 0x00FF];
2040b5b0:	fee45783          	lhu	a5,-18(s0)
2040b5b4:	00879793          	slli	a5,a5,0x8
2040b5b8:	01079713          	slli	a4,a5,0x10
2040b5bc:	41075713          	srai	a4,a4,0x10
2040b5c0:	fee45783          	lhu	a5,-18(s0)
2040b5c4:	0087d793          	srli	a5,a5,0x8
2040b5c8:	01079793          	slli	a5,a5,0x10
2040b5cc:	0107d793          	srli	a5,a5,0x10
2040b5d0:	00078693          	mv	a3,a5
2040b5d4:	fed44783          	lbu	a5,-19(s0)
2040b5d8:	00f6c7b3          	xor	a5,a3,a5
2040b5dc:	0ff7f793          	andi	a5,a5,255
2040b5e0:	00016697          	auipc	a3,0x16
2040b5e4:	bb868693          	addi	a3,a3,-1096 # 20421198 <crc_tabccitt>
2040b5e8:	00179793          	slli	a5,a5,0x1
2040b5ec:	00f687b3          	add	a5,a3,a5
2040b5f0:	0007d783          	lhu	a5,0(a5)
2040b5f4:	01079793          	slli	a5,a5,0x10
2040b5f8:	4107d793          	srai	a5,a5,0x10
2040b5fc:	00f747b3          	xor	a5,a4,a5
2040b600:	01079793          	slli	a5,a5,0x10
2040b604:	4107d793          	srai	a5,a5,0x10
2040b608:	01079793          	slli	a5,a5,0x10
2040b60c:	0107d793          	srli	a5,a5,0x10

} /* update_crc_ccitt */
2040b610:	00078513          	mv	a0,a5
2040b614:	01c12403          	lw	s0,28(sp)
2040b618:	02010113          	addi	sp,sp,32
2040b61c:	00008067          	ret

2040b620 <mtime_lo>:

extern int main(int argc, char** argv);
extern void trap_entry();

static unsigned long mtime_lo(void)
{
2040b620:	ff010113          	addi	sp,sp,-16
2040b624:	00812623          	sw	s0,12(sp)
2040b628:	01010413          	addi	s0,sp,16
  return *(volatile unsigned long *)(CLINT_CTRL_ADDR + CLINT_MTIME);
2040b62c:	0200c7b7          	lui	a5,0x200c
2040b630:	ff878793          	addi	a5,a5,-8 # 200bff8 <__stack_size+0x2007ff8>
2040b634:	0007a783          	lw	a5,0(a5)
}
2040b638:	00078513          	mv	a0,a5
2040b63c:	00c12403          	lw	s0,12(sp)
2040b640:	01010113          	addi	sp,sp,16
2040b644:	00008067          	ret

2040b648 <get_timer_value>:
}

#else /* __riscv32 */

uint64_t get_timer_value()
{
2040b648:	ff010113          	addi	sp,sp,-16
2040b64c:	00112623          	sw	ra,12(sp)
2040b650:	00812423          	sw	s0,8(sp)
2040b654:	01212223          	sw	s2,4(sp)
2040b658:	01312023          	sw	s3,0(sp)
2040b65c:	01010413          	addi	s0,sp,16
  return mtime_lo();
2040b660:	fc1ff0ef          	jal	ra,2040b620 <mtime_lo>
2040b664:	00050793          	mv	a5,a0
2040b668:	00078913          	mv	s2,a5
2040b66c:	00000993          	li	s3,0
2040b670:	00090793          	mv	a5,s2
2040b674:	00098813          	mv	a6,s3
}
2040b678:	00078513          	mv	a0,a5
2040b67c:	00080593          	mv	a1,a6
2040b680:	00c12083          	lw	ra,12(sp)
2040b684:	00812403          	lw	s0,8(sp)
2040b688:	00412903          	lw	s2,4(sp)
2040b68c:	00012983          	lw	s3,0(sp)
2040b690:	01010113          	addi	sp,sp,16
2040b694:	00008067          	ret

2040b698 <get_timer_freq>:

#endif

unsigned long get_timer_freq()
{
2040b698:	ff010113          	addi	sp,sp,-16
2040b69c:	00812623          	sw	s0,12(sp)
2040b6a0:	01010413          	addi	s0,sp,16
  return 32768;
2040b6a4:	000087b7          	lui	a5,0x8
}
2040b6a8:	00078513          	mv	a0,a5
2040b6ac:	00c12403          	lw	s0,12(sp)
2040b6b0:	01010113          	addi	sp,sp,16
2040b6b4:	00008067          	ret

2040b6b8 <use_hfrosc>:

static void use_hfrosc(int div, int trim)
{
2040b6b8:	fe010113          	addi	sp,sp,-32
2040b6bc:	00812e23          	sw	s0,28(sp)
2040b6c0:	02010413          	addi	s0,sp,32
2040b6c4:	fea42623          	sw	a0,-20(s0)
2040b6c8:	feb42423          	sw	a1,-24(s0)
  // Make sure the HFROSC is running at its default setting
  PRCI_REG(PRCI_HFROSCCFG) = (ROSC_DIV(div) | ROSC_TRIM(trim) | ROSC_EN(1));
2040b6cc:	fec42783          	lw	a5,-20(s0)
2040b6d0:	02f7f713          	andi	a4,a5,47
2040b6d4:	fe842783          	lw	a5,-24(s0)
2040b6d8:	01079693          	slli	a3,a5,0x10
2040b6dc:	001f07b7          	lui	a5,0x1f0
2040b6e0:	00f6f7b3          	and	a5,a3,a5
2040b6e4:	00f76733          	or	a4,a4,a5
2040b6e8:	400007b7          	lui	a5,0x40000
2040b6ec:	00f76733          	or	a4,a4,a5
2040b6f0:	100087b7          	lui	a5,0x10008
2040b6f4:	00e7a023          	sw	a4,0(a5) # 10008000 <__stack_size+0x10004000>
  while ((PRCI_REG(PRCI_HFROSCCFG) & ROSC_RDY(1)) == 0) ;
2040b6f8:	00000013          	nop
2040b6fc:	100087b7          	lui	a5,0x10008
2040b700:	0007a783          	lw	a5,0(a5) # 10008000 <__stack_size+0x10004000>
2040b704:	fe07dce3          	bgez	a5,2040b6fc <use_hfrosc+0x44>
  PRCI_REG(PRCI_PLLCFG) &= ~PLL_SEL(1);
2040b708:	100087b7          	lui	a5,0x10008
2040b70c:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b710:	0007a683          	lw	a3,0(a5)
2040b714:	100087b7          	lui	a5,0x10008
2040b718:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b71c:	ffff0737          	lui	a4,0xffff0
2040b720:	fff70713          	addi	a4,a4,-1 # fffeffff <pulp__FC+0xffff0000>
2040b724:	00e6f733          	and	a4,a3,a4
2040b728:	00e7a023          	sw	a4,0(a5)
}
2040b72c:	00000013          	nop
2040b730:	01c12403          	lw	s0,28(sp)
2040b734:	02010113          	addi	sp,sp,32
2040b738:	00008067          	ret

2040b73c <use_pll>:

static void use_pll(int refsel, int bypass, int r, int f, int q)
{
2040b73c:	fc010113          	addi	sp,sp,-64
2040b740:	02112e23          	sw	ra,60(sp)
2040b744:	02812c23          	sw	s0,56(sp)
2040b748:	04010413          	addi	s0,sp,64
2040b74c:	fca42e23          	sw	a0,-36(s0)
2040b750:	fcb42c23          	sw	a1,-40(s0)
2040b754:	fcc42a23          	sw	a2,-44(s0)
2040b758:	fcd42823          	sw	a3,-48(s0)
2040b75c:	fce42623          	sw	a4,-52(s0)
  // Ensure that we aren't running off the PLL before we mess with it.
  if (PRCI_REG(PRCI_PLLCFG) & PLL_SEL(1)) {
2040b760:	100087b7          	lui	a5,0x10008
2040b764:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b768:	0007a703          	lw	a4,0(a5)
2040b76c:	000107b7          	lui	a5,0x10
2040b770:	00f777b3          	and	a5,a4,a5
2040b774:	00078863          	beqz	a5,2040b784 <use_pll+0x48>
    // Make sure the HFROSC is running at its default setting
    use_hfrosc(4, 16);
2040b778:	01000593          	li	a1,16
2040b77c:	00400513          	li	a0,4
2040b780:	f39ff0ef          	jal	ra,2040b6b8 <use_hfrosc>
  }

  // Set PLL Source to be HFXOSC if available.
  uint32_t config_value = 0;
2040b784:	fe042623          	sw	zero,-20(s0)

  config_value |= PLL_REFSEL(refsel);
2040b788:	fdc42783          	lw	a5,-36(s0)
2040b78c:	01179793          	slli	a5,a5,0x11
2040b790:	00078713          	mv	a4,a5
2040b794:	000207b7          	lui	a5,0x20
2040b798:	00f777b3          	and	a5,a4,a5
2040b79c:	fec42703          	lw	a4,-20(s0)
2040b7a0:	00f767b3          	or	a5,a4,a5
2040b7a4:	fef42623          	sw	a5,-20(s0)

  if (bypass) {
2040b7a8:	fd842783          	lw	a5,-40(s0)
2040b7ac:	02078c63          	beqz	a5,2040b7e4 <use_pll+0xa8>
    // Bypass
    config_value |= PLL_BYPASS(1);
2040b7b0:	fec42703          	lw	a4,-20(s0)
2040b7b4:	000407b7          	lui	a5,0x40
2040b7b8:	00f767b3          	or	a5,a4,a5
2040b7bc:	fef42623          	sw	a5,-20(s0)

    PRCI_REG(PRCI_PLLCFG) = config_value;
2040b7c0:	100087b7          	lui	a5,0x10008
2040b7c4:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b7c8:	fec42703          	lw	a4,-20(s0)
2040b7cc:	00e7a023          	sw	a4,0(a5)

    // If we don't have an HFXTAL, this doesn't really matter.
    // Set our Final output divide to divide-by-1:
    PRCI_REG(PRCI_PLLDIV) = (PLL_FINAL_DIV_BY_1(1) | PLL_FINAL_DIV(0));
2040b7d0:	100087b7          	lui	a5,0x10008
2040b7d4:	00c78793          	addi	a5,a5,12 # 1000800c <__stack_size+0x1000400c>
2040b7d8:	10000713          	li	a4,256
2040b7dc:	00e7a023          	sw	a4,0(a5)
2040b7e0:	0ec0006f          	j	2040b8cc <use_pll+0x190>
    // (which is quite likely) we need to
    // set the QSPI clock divider appropriately
    // before boosting the clock frequency.

    // Div = f_sck/2
    SPI0_REG(SPI_REG_SCKDIV) = 8;
2040b7e4:	100147b7          	lui	a5,0x10014
2040b7e8:	00800713          	li	a4,8
2040b7ec:	00e7a023          	sw	a4,0(a5) # 10014000 <__stack_size+0x10010000>
    // (Legal values of f_REF are 6-48MHz)

    // Set DIVR to divide-by-2 to get 8MHz frequency
    // (legal values of f_R are 6-12 MHz)

    config_value |= PLL_BYPASS(1);
2040b7f0:	fec42703          	lw	a4,-20(s0)
2040b7f4:	000407b7          	lui	a5,0x40
2040b7f8:	00f767b3          	or	a5,a4,a5
2040b7fc:	fef42623          	sw	a5,-20(s0)
    config_value |= PLL_R(r);
2040b800:	fd442783          	lw	a5,-44(s0)
2040b804:	0077f793          	andi	a5,a5,7
2040b808:	fec42703          	lw	a4,-20(s0)
2040b80c:	00f767b3          	or	a5,a4,a5
2040b810:	fef42623          	sw	a5,-20(s0)

    // Set DIVF to get 512Mhz frequncy
    // There is an implied multiply-by-2, 16Mhz.
    // So need to write 32-1
    // (legal values of f_F are 384-768 MHz)
    config_value |= PLL_F(f);
2040b814:	fd042783          	lw	a5,-48(s0)
2040b818:	00479793          	slli	a5,a5,0x4
2040b81c:	3f07f793          	andi	a5,a5,1008
2040b820:	fec42703          	lw	a4,-20(s0)
2040b824:	00f767b3          	or	a5,a4,a5
2040b828:	fef42623          	sw	a5,-20(s0)

    // Set DIVQ to divide-by-2 to get 256 MHz frequency
    // (legal values of f_Q are 50-400Mhz)
    config_value |= PLL_Q(q);
2040b82c:	fcc42783          	lw	a5,-52(s0)
2040b830:	00a79793          	slli	a5,a5,0xa
2040b834:	00078713          	mv	a4,a5
2040b838:	000017b7          	lui	a5,0x1
2040b83c:	c0078793          	addi	a5,a5,-1024 # c00 <__stack_size-0x3400>
2040b840:	00f777b3          	and	a5,a4,a5
2040b844:	fec42703          	lw	a4,-20(s0)
2040b848:	00f767b3          	or	a5,a4,a5
2040b84c:	fef42623          	sw	a5,-20(s0)

    // Set our Final output divide to divide-by-1:
    PRCI_REG(PRCI_PLLDIV) = (PLL_FINAL_DIV_BY_1(1) | PLL_FINAL_DIV(0));
2040b850:	100087b7          	lui	a5,0x10008
2040b854:	00c78793          	addi	a5,a5,12 # 1000800c <__stack_size+0x1000400c>
2040b858:	10000713          	li	a4,256
2040b85c:	00e7a023          	sw	a4,0(a5)

    PRCI_REG(PRCI_PLLCFG) = config_value;
2040b860:	100087b7          	lui	a5,0x10008
2040b864:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b868:	fec42703          	lw	a4,-20(s0)
2040b86c:	00e7a023          	sw	a4,0(a5)

    // Un-Bypass the PLL.
    PRCI_REG(PRCI_PLLCFG) &= ~PLL_BYPASS(1);
2040b870:	100087b7          	lui	a5,0x10008
2040b874:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b878:	0007a683          	lw	a3,0(a5)
2040b87c:	100087b7          	lui	a5,0x10008
2040b880:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b884:	fffc0737          	lui	a4,0xfffc0
2040b888:	fff70713          	addi	a4,a4,-1 # fffbffff <pulp__FC+0xfffc0000>
2040b88c:	00e6f733          	and	a4,a3,a4
2040b890:	00e7a023          	sw	a4,0(a5)
    // Wait for PLL Lock
    // Note that the Lock signal can be glitchy.
    // Need to wait 100 us
    // RTC is running at 32kHz.
    // So wait 4 ticks of RTC.
    uint32_t now = mtime_lo();
2040b894:	d8dff0ef          	jal	ra,2040b620 <mtime_lo>
2040b898:	fea42423          	sw	a0,-24(s0)
    while (mtime_lo() - now < 4) ;
2040b89c:	00000013          	nop
2040b8a0:	d81ff0ef          	jal	ra,2040b620 <mtime_lo>
2040b8a4:	00050713          	mv	a4,a0
2040b8a8:	fe842783          	lw	a5,-24(s0)
2040b8ac:	40f70733          	sub	a4,a4,a5
2040b8b0:	00300793          	li	a5,3
2040b8b4:	fee7f6e3          	bleu	a4,a5,2040b8a0 <use_pll+0x164>

    // Now it is safe to check for PLL Lock
    while ((PRCI_REG(PRCI_PLLCFG) & PLL_LOCK(1)) == 0) ;
2040b8b8:	00000013          	nop
2040b8bc:	100087b7          	lui	a5,0x10008
2040b8c0:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b8c4:	0007a783          	lw	a5,0(a5)
2040b8c8:	fe07dae3          	bgez	a5,2040b8bc <use_pll+0x180>
  }

  // Switch over to PLL Clock source
  PRCI_REG(PRCI_PLLCFG) |= PLL_SEL(1);
2040b8cc:	100087b7          	lui	a5,0x10008
2040b8d0:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b8d4:	0007a683          	lw	a3,0(a5)
2040b8d8:	100087b7          	lui	a5,0x10008
2040b8dc:	00878793          	addi	a5,a5,8 # 10008008 <__stack_size+0x10004008>
2040b8e0:	00010737          	lui	a4,0x10
2040b8e4:	00e6e733          	or	a4,a3,a4
2040b8e8:	00e7a023          	sw	a4,0(a5)
}
2040b8ec:	00000013          	nop
2040b8f0:	03c12083          	lw	ra,60(sp)
2040b8f4:	03812403          	lw	s0,56(sp)
2040b8f8:	04010113          	addi	sp,sp,64
2040b8fc:	00008067          	ret

2040b900 <use_default_clocks>:

static void use_default_clocks()
{
2040b900:	ff010113          	addi	sp,sp,-16
2040b904:	00112623          	sw	ra,12(sp)
2040b908:	00812423          	sw	s0,8(sp)
2040b90c:	01010413          	addi	s0,sp,16
  // Turn off the LFROSC
  AON_REG(AON_LFROSC) &= ~ROSC_EN(1);
2040b910:	100007b7          	lui	a5,0x10000
2040b914:	07078793          	addi	a5,a5,112 # 10000070 <__stack_size+0xfffc070>
2040b918:	0007a683          	lw	a3,0(a5)
2040b91c:	100007b7          	lui	a5,0x10000
2040b920:	07078793          	addi	a5,a5,112 # 10000070 <__stack_size+0xfffc070>
2040b924:	c0000737          	lui	a4,0xc0000
2040b928:	fff70713          	addi	a4,a4,-1 # bfffffff <pulp__FC+0xc0000000>
2040b92c:	00e6f733          	and	a4,a3,a4
2040b930:	00e7a023          	sw	a4,0(a5)

  // Use HFROSC
  use_hfrosc(4, 16);
2040b934:	01000593          	li	a1,16
2040b938:	00400513          	li	a0,4
2040b93c:	d7dff0ef          	jal	ra,2040b6b8 <use_hfrosc>
}
2040b940:	00000013          	nop
2040b944:	00c12083          	lw	ra,12(sp)
2040b948:	00812403          	lw	s0,8(sp)
2040b94c:	01010113          	addi	sp,sp,16
2040b950:	00008067          	ret

2040b954 <measure_cpu_freq>:

static unsigned long __attribute__((noinline)) measure_cpu_freq(size_t n)
{
2040b954:	fc010113          	addi	sp,sp,-64
2040b958:	02112e23          	sw	ra,60(sp)
2040b95c:	02812c23          	sw	s0,56(sp)
2040b960:	02912a23          	sw	s1,52(sp)
2040b964:	04010413          	addi	s0,sp,64
2040b968:	fca42623          	sw	a0,-52(s0)
  unsigned long start_mtime, delta_mtime;
  unsigned long mtime_freq = get_timer_freq();
2040b96c:	d2dff0ef          	jal	ra,2040b698 <get_timer_freq>
2040b970:	fea42623          	sw	a0,-20(s0)

  // Don't start measuruing until we see an mtime tick
  unsigned long tmp = mtime_lo();
2040b974:	cadff0ef          	jal	ra,2040b620 <mtime_lo>
2040b978:	fea42423          	sw	a0,-24(s0)
  do {
    start_mtime = mtime_lo();
2040b97c:	ca5ff0ef          	jal	ra,2040b620 <mtime_lo>
2040b980:	fea42223          	sw	a0,-28(s0)
  } while (start_mtime == tmp);
2040b984:	fe442703          	lw	a4,-28(s0)
2040b988:	fe842783          	lw	a5,-24(s0)
2040b98c:	fef708e3          	beq	a4,a5,2040b97c <measure_cpu_freq+0x28>

  unsigned long start_mcycle = read_csr(mcycle);
2040b990:	b00027f3          	csrr	a5,0xb00
2040b994:	fef42023          	sw	a5,-32(s0)
2040b998:	fe042783          	lw	a5,-32(s0)
2040b99c:	fcf42e23          	sw	a5,-36(s0)

  do {
    delta_mtime = mtime_lo() - start_mtime;
2040b9a0:	c81ff0ef          	jal	ra,2040b620 <mtime_lo>
2040b9a4:	00050713          	mv	a4,a0
2040b9a8:	fe442783          	lw	a5,-28(s0)
2040b9ac:	40f707b3          	sub	a5,a4,a5
2040b9b0:	fcf42c23          	sw	a5,-40(s0)
  } while (delta_mtime < n);
2040b9b4:	fd842703          	lw	a4,-40(s0)
2040b9b8:	fcc42783          	lw	a5,-52(s0)
2040b9bc:	fef762e3          	bltu	a4,a5,2040b9a0 <measure_cpu_freq+0x4c>

  unsigned long delta_mcycle = read_csr(mcycle) - start_mcycle;
2040b9c0:	b00027f3          	csrr	a5,0xb00
2040b9c4:	fcf42a23          	sw	a5,-44(s0)
2040b9c8:	fd442703          	lw	a4,-44(s0)
2040b9cc:	fdc42783          	lw	a5,-36(s0)
2040b9d0:	40f707b3          	sub	a5,a4,a5
2040b9d4:	fcf42823          	sw	a5,-48(s0)

  return (delta_mcycle / delta_mtime) * mtime_freq
2040b9d8:	fd842583          	lw	a1,-40(s0)
2040b9dc:	fd042503          	lw	a0,-48(s0)
2040b9e0:	2cc140ef          	jal	ra,2041fcac <__udivsi3>
2040b9e4:	00050793          	mv	a5,a0
2040b9e8:	fec42583          	lw	a1,-20(s0)
2040b9ec:	00078513          	mv	a0,a5
2040b9f0:	240140ef          	jal	ra,2041fc30 <__mulsi3>
2040b9f4:	00050793          	mv	a5,a0
2040b9f8:	00078493          	mv	s1,a5
         + ((delta_mcycle % delta_mtime) * mtime_freq) / delta_mtime;
2040b9fc:	fd042783          	lw	a5,-48(s0)
2040ba00:	fd842583          	lw	a1,-40(s0)
2040ba04:	00078513          	mv	a0,a5
2040ba08:	2d0140ef          	jal	ra,2041fcd8 <__umodsi3>
2040ba0c:	00050793          	mv	a5,a0
2040ba10:	fec42583          	lw	a1,-20(s0)
2040ba14:	00078513          	mv	a0,a5
2040ba18:	218140ef          	jal	ra,2041fc30 <__mulsi3>
2040ba1c:	00050793          	mv	a5,a0
2040ba20:	fd842583          	lw	a1,-40(s0)
2040ba24:	00078513          	mv	a0,a5
2040ba28:	284140ef          	jal	ra,2041fcac <__udivsi3>
2040ba2c:	00050793          	mv	a5,a0
2040ba30:	00f487b3          	add	a5,s1,a5
}
2040ba34:	00078513          	mv	a0,a5
2040ba38:	03c12083          	lw	ra,60(sp)
2040ba3c:	03812403          	lw	s0,56(sp)
2040ba40:	03412483          	lw	s1,52(sp)
2040ba44:	04010113          	addi	sp,sp,64
2040ba48:	00008067          	ret

2040ba4c <get_cpu_freq>:

unsigned long get_cpu_freq()
{
2040ba4c:	ff010113          	addi	sp,sp,-16
2040ba50:	00112623          	sw	ra,12(sp)
2040ba54:	00812423          	sw	s0,8(sp)
2040ba58:	01010413          	addi	s0,sp,16
  static uint32_t cpu_freq;

  if (!cpu_freq) {
2040ba5c:	5fbf5797          	auipc	a5,0x5fbf5
2040ba60:	45078793          	addi	a5,a5,1104 # 80000eac <cpu_freq.2755>
2040ba64:	0007a783          	lw	a5,0(a5)
2040ba68:	02079263          	bnez	a5,2040ba8c <get_cpu_freq+0x40>
    // warm up I$
    measure_cpu_freq(1);
2040ba6c:	00100513          	li	a0,1
2040ba70:	ee5ff0ef          	jal	ra,2040b954 <measure_cpu_freq>
    // measure for real
    cpu_freq = measure_cpu_freq(10);
2040ba74:	00a00513          	li	a0,10
2040ba78:	eddff0ef          	jal	ra,2040b954 <measure_cpu_freq>
2040ba7c:	00050713          	mv	a4,a0
2040ba80:	5fbf5797          	auipc	a5,0x5fbf5
2040ba84:	42c78793          	addi	a5,a5,1068 # 80000eac <cpu_freq.2755>
2040ba88:	00e7a023          	sw	a4,0(a5)
  }

  return cpu_freq;
2040ba8c:	5fbf5797          	auipc	a5,0x5fbf5
2040ba90:	42078793          	addi	a5,a5,1056 # 80000eac <cpu_freq.2755>
2040ba94:	0007a783          	lw	a5,0(a5)
}
2040ba98:	00078513          	mv	a0,a5
2040ba9c:	00c12083          	lw	ra,12(sp)
2040baa0:	00812403          	lw	s0,8(sp)
2040baa4:	01010113          	addi	sp,sp,16
2040baa8:	00008067          	ret

2040baac <uart_init>:

static void uart_init(size_t baud_rate)
{
2040baac:	fe010113          	addi	sp,sp,-32
2040bab0:	00112e23          	sw	ra,28(sp)
2040bab4:	00812c23          	sw	s0,24(sp)
2040bab8:	02010413          	addi	s0,sp,32
2040babc:	fea42623          	sw	a0,-20(s0)
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART0_MASK;
2040bac0:	100127b7          	lui	a5,0x10012
2040bac4:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1000e03c>
2040bac8:	0007a683          	lw	a3,0(a5)
2040bacc:	100127b7          	lui	a5,0x10012
2040bad0:	03c78793          	addi	a5,a5,60 # 1001203c <__stack_size+0x1000e03c>
2040bad4:	fffd0737          	lui	a4,0xfffd0
2040bad8:	fff70713          	addi	a4,a4,-1 # fffcffff <pulp__FC+0xfffd0000>
2040badc:	00e6f733          	and	a4,a3,a4
2040bae0:	00e7a023          	sw	a4,0(a5)
  GPIO_REG(GPIO_IOF_EN) |= IOF0_UART0_MASK;
2040bae4:	100127b7          	lui	a5,0x10012
2040bae8:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x1000e038>
2040baec:	0007a683          	lw	a3,0(a5)
2040baf0:	100127b7          	lui	a5,0x10012
2040baf4:	03878793          	addi	a5,a5,56 # 10012038 <__stack_size+0x1000e038>
2040baf8:	00030737          	lui	a4,0x30
2040bafc:	00e6e733          	or	a4,a3,a4
2040bb00:	00e7a023          	sw	a4,0(a5)
  UART0_REG(UART_REG_DIV) = get_cpu_freq() / baud_rate - 1;
2040bb04:	f49ff0ef          	jal	ra,2040ba4c <get_cpu_freq>
2040bb08:	00050793          	mv	a5,a0
2040bb0c:	fec42583          	lw	a1,-20(s0)
2040bb10:	00078513          	mv	a0,a5
2040bb14:	198140ef          	jal	ra,2041fcac <__udivsi3>
2040bb18:	00050793          	mv	a5,a0
2040bb1c:	00078713          	mv	a4,a5
2040bb20:	100137b7          	lui	a5,0x10013
2040bb24:	01878793          	addi	a5,a5,24 # 10013018 <__stack_size+0x1000f018>
2040bb28:	fff70713          	addi	a4,a4,-1 # 2ffff <__stack_size+0x2bfff>
2040bb2c:	00e7a023          	sw	a4,0(a5)
  UART0_REG(UART_REG_TXCTRL) |= UART_TXEN;
2040bb30:	100137b7          	lui	a5,0x10013
2040bb34:	00878793          	addi	a5,a5,8 # 10013008 <__stack_size+0x1000f008>
2040bb38:	0007a703          	lw	a4,0(a5)
2040bb3c:	100137b7          	lui	a5,0x10013
2040bb40:	00878793          	addi	a5,a5,8 # 10013008 <__stack_size+0x1000f008>
2040bb44:	00176713          	ori	a4,a4,1
2040bb48:	00e7a023          	sw	a4,0(a5)
}
2040bb4c:	00000013          	nop
2040bb50:	01c12083          	lw	ra,28(sp)
2040bb54:	01812403          	lw	s0,24(sp)
2040bb58:	02010113          	addi	sp,sp,32
2040bb5c:	00008067          	ret

2040bb60 <handle_trap>:
#ifdef USE_M_TIME
extern void handle_m_time_interrupt();
#endif

uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
2040bb60:	fe010113          	addi	sp,sp,-32
2040bb64:	00112e23          	sw	ra,28(sp)
2040bb68:	00812c23          	sw	s0,24(sp)
2040bb6c:	02010413          	addi	s0,sp,32
2040bb70:	fea42623          	sw	a0,-20(s0)
2040bb74:	feb42423          	sw	a1,-24(s0)
  } else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == IRQ_M_TIMER)){
    handle_m_time_interrupt();
#endif
  }
  else {
    write(1, "trap\n", 5);
2040bb78:	00500613          	li	a2,5
2040bb7c:	00016597          	auipc	a1,0x16
2040bb80:	81c58593          	addi	a1,a1,-2020 # 20421398 <crc_tabccitt+0x200>
2040bb84:	00100513          	li	a0,1
2040bb88:	329060ef          	jal	ra,204126b0 <__wrap_write>
    _exit(1 + mcause);
2040bb8c:	fec42783          	lw	a5,-20(s0)
2040bb90:	00178793          	addi	a5,a5,1
2040bb94:	00078513          	mv	a0,a5
2040bb98:	4d5060ef          	jal	ra,2041286c <__wrap_exit>

2040bb9c <_init>:
  }
  return epc;
}

void _init()
{
2040bb9c:	fe010113          	addi	sp,sp,-32
2040bba0:	00112e23          	sw	ra,28(sp)
2040bba4:	00812c23          	sw	s0,24(sp)
2040bba8:	02010413          	addi	s0,sp,32

  #ifndef NO_INIT
  use_default_clocks();
2040bbac:	d55ff0ef          	jal	ra,2040b900 <use_default_clocks>
  use_pll(0, 0, 1, 31, 1);
2040bbb0:	00100713          	li	a4,1
2040bbb4:	01f00693          	li	a3,31
2040bbb8:	00100613          	li	a2,1
2040bbbc:	00000593          	li	a1,0
2040bbc0:	00000513          	li	a0,0
2040bbc4:	b79ff0ef          	jal	ra,2040b73c <use_pll>
  uart_init(115200);
2040bbc8:	0001c7b7          	lui	a5,0x1c
2040bbcc:	20078513          	addi	a0,a5,512 # 1c200 <__stack_size+0x18200>
2040bbd0:	eddff0ef          	jal	ra,2040baac <uart_init>

  printf("core freq at %lu Hz\n", get_cpu_freq());
2040bbd4:	e79ff0ef          	jal	ra,2040ba4c <get_cpu_freq>
2040bbd8:	00050793          	mv	a5,a0
2040bbdc:	00078593          	mv	a1,a5
2040bbe0:	00015517          	auipc	a0,0x15
2040bbe4:	7c050513          	addi	a0,a0,1984 # 204213a0 <crc_tabccitt+0x208>
2040bbe8:	4ec070ef          	jal	ra,204130d4 <__wrap_printf>

  write_csr(mtvec, &trap_entry);
2040bbec:	ffff4797          	auipc	a5,0xffff4
2040bbf0:	4b078793          	addi	a5,a5,1200 # 2040009c <trap_entry>
2040bbf4:	30579073          	csrw	mtvec,a5
  if (read_csr(misa) & (1 << ('F' - 'A'))) { // if F extension is present
2040bbf8:	301027f3          	csrr	a5,0x301
2040bbfc:	fef42623          	sw	a5,-20(s0)
2040bc00:	fec42783          	lw	a5,-20(s0)
2040bc04:	0207f793          	andi	a5,a5,32
2040bc08:	00078863          	beqz	a5,2040bc18 <_init+0x7c>
    write_csr(mstatus, MSTATUS_FS); // allow FPU instructions without trapping
2040bc0c:	000067b7          	lui	a5,0x6
2040bc10:	30079073          	csrw	mstatus,a5
    write_csr(fcsr, 0); // initialize rounding mode, undefined at reset
2040bc14:	00305073          	csrwi	0x3,0
  }
  #endif

}
2040bc18:	00000013          	nop
2040bc1c:	01c12083          	lw	ra,28(sp)
2040bc20:	01812403          	lw	s0,24(sp)
2040bc24:	02010113          	addi	sp,sp,32
2040bc28:	00008067          	ret

2040bc2c <_fini>:

void _fini()
{
2040bc2c:	ff010113          	addi	sp,sp,-16
2040bc30:	00812623          	sw	s0,12(sp)
2040bc34:	01010413          	addi	s0,sp,16
}
2040bc38:	00000013          	nop
2040bc3c:	00c12403          	lw	s0,12(sp)
2040bc40:	01010113          	addi	sp,sp,16
2040bc44:	00008067          	ret

2040bc48 <_ZdlPvj>:
void operator delete(void*, unsigned int){
2040bc48:	fe010113          	addi	sp,sp,-32
2040bc4c:	00812e23          	sw	s0,28(sp)
2040bc50:	02010413          	addi	s0,sp,32
2040bc54:	fea42623          	sw	a0,-20(s0)
2040bc58:	feb42423          	sw	a1,-24(s0)

2040bc5c:	00000013          	nop
2040bc60:	01c12403          	lw	s0,28(sp)
2040bc64:	02010113          	addi	sp,sp,32
2040bc68:	00008067          	ret

2040bc6c <_ZN3tvm7runtime9micro_rpc11FrameBuffer5WriteEPKhj>:

namespace tvm {
namespace runtime {
namespace micro_rpc {

size_t FrameBuffer::Write(const uint8_t* data, size_t data_size_bytes) {
2040bc6c:	fd010113          	addi	sp,sp,-48
2040bc70:	02112623          	sw	ra,44(sp)
2040bc74:	02812423          	sw	s0,40(sp)
2040bc78:	03010413          	addi	s0,sp,48
2040bc7c:	fca42e23          	sw	a0,-36(s0)
2040bc80:	fcb42c23          	sw	a1,-40(s0)
2040bc84:	fcc42a23          	sw	a2,-44(s0)
  size_t num_bytes_available = capacity_ - num_valid_bytes_;
2040bc88:	fdc42783          	lw	a5,-36(s0)
2040bc8c:	0047a703          	lw	a4,4(a5) # 6004 <__stack_size+0x2004>
2040bc90:	fdc42783          	lw	a5,-36(s0)
2040bc94:	0087a783          	lw	a5,8(a5)
2040bc98:	40f707b3          	sub	a5,a4,a5
2040bc9c:	fef42423          	sw	a5,-24(s0)
  size_t num_bytes_to_copy = data_size_bytes;
2040bca0:	fd442783          	lw	a5,-44(s0)
2040bca4:	fef42623          	sw	a5,-20(s0)
  if (num_bytes_available < num_bytes_to_copy) {
2040bca8:	fe842703          	lw	a4,-24(s0)
2040bcac:	fec42783          	lw	a5,-20(s0)
2040bcb0:	00f77663          	bleu	a5,a4,2040bcbc <_ZN3tvm7runtime9micro_rpc11FrameBuffer5WriteEPKhj+0x50>
    num_bytes_to_copy = num_bytes_available;
2040bcb4:	fe842783          	lw	a5,-24(s0)
2040bcb8:	fef42623          	sw	a5,-20(s0)
  }

  memcpy(&data_[num_valid_bytes_], data, num_bytes_to_copy);
2040bcbc:	fdc42783          	lw	a5,-36(s0)
2040bcc0:	0007a703          	lw	a4,0(a5)
2040bcc4:	fdc42783          	lw	a5,-36(s0)
2040bcc8:	0087a783          	lw	a5,8(a5)
2040bccc:	00f707b3          	add	a5,a4,a5
2040bcd0:	fec42603          	lw	a2,-20(s0)
2040bcd4:	fd842583          	lw	a1,-40(s0)
2040bcd8:	00078513          	mv	a0,a5
2040bcdc:	7f8070ef          	jal	ra,204134d4 <memcpy>
  num_valid_bytes_ += num_bytes_to_copy;
2040bce0:	fdc42783          	lw	a5,-36(s0)
2040bce4:	0087a703          	lw	a4,8(a5)
2040bce8:	fec42783          	lw	a5,-20(s0)
2040bcec:	00f70733          	add	a4,a4,a5
2040bcf0:	fdc42783          	lw	a5,-36(s0)
2040bcf4:	00e7a423          	sw	a4,8(a5)
  return num_bytes_to_copy;
2040bcf8:	fec42783          	lw	a5,-20(s0)
}
2040bcfc:	00078513          	mv	a0,a5
2040bd00:	02c12083          	lw	ra,44(sp)
2040bd04:	02812403          	lw	s0,40(sp)
2040bd08:	03010113          	addi	sp,sp,48
2040bd0c:	00008067          	ret

2040bd10 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>:

size_t FrameBuffer::Read(uint8_t* data, size_t data_size_bytes) {
2040bd10:	fd010113          	addi	sp,sp,-48
2040bd14:	02112623          	sw	ra,44(sp)
2040bd18:	02812423          	sw	s0,40(sp)
2040bd1c:	03010413          	addi	s0,sp,48
2040bd20:	fca42e23          	sw	a0,-36(s0)
2040bd24:	fcb42c23          	sw	a1,-40(s0)
2040bd28:	fcc42a23          	sw	a2,-44(s0)
  size_t num_bytes_to_copy = data_size_bytes;
2040bd2c:	fd442783          	lw	a5,-44(s0)
2040bd30:	fef42623          	sw	a5,-20(s0)
  size_t num_bytes_available = num_valid_bytes_ - read_cursor_;
2040bd34:	fdc42783          	lw	a5,-36(s0)
2040bd38:	0087a703          	lw	a4,8(a5)
2040bd3c:	fdc42783          	lw	a5,-36(s0)
2040bd40:	00c7a783          	lw	a5,12(a5)
2040bd44:	40f707b3          	sub	a5,a4,a5
2040bd48:	fef42423          	sw	a5,-24(s0)
  if (num_bytes_available < num_bytes_to_copy) {
2040bd4c:	fe842703          	lw	a4,-24(s0)
2040bd50:	fec42783          	lw	a5,-20(s0)
2040bd54:	00f77663          	bleu	a5,a4,2040bd60 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj+0x50>
    num_bytes_to_copy = num_bytes_available;
2040bd58:	fe842783          	lw	a5,-24(s0)
2040bd5c:	fef42623          	sw	a5,-20(s0)
  }

  memcpy(data, &data_[read_cursor_], num_bytes_to_copy);
2040bd60:	fdc42783          	lw	a5,-36(s0)
2040bd64:	0007a703          	lw	a4,0(a5)
2040bd68:	fdc42783          	lw	a5,-36(s0)
2040bd6c:	00c7a783          	lw	a5,12(a5)
2040bd70:	00f707b3          	add	a5,a4,a5
2040bd74:	fec42603          	lw	a2,-20(s0)
2040bd78:	00078593          	mv	a1,a5
2040bd7c:	fd842503          	lw	a0,-40(s0)
2040bd80:	754070ef          	jal	ra,204134d4 <memcpy>
  read_cursor_ += num_bytes_to_copy;
2040bd84:	fdc42783          	lw	a5,-36(s0)
2040bd88:	00c7a703          	lw	a4,12(a5)
2040bd8c:	fec42783          	lw	a5,-20(s0)
2040bd90:	00f70733          	add	a4,a4,a5
2040bd94:	fdc42783          	lw	a5,-36(s0)
2040bd98:	00e7a623          	sw	a4,12(a5)
  return num_bytes_to_copy;
2040bd9c:	fec42783          	lw	a5,-20(s0)
}
2040bda0:	00078513          	mv	a0,a5
2040bda4:	02c12083          	lw	ra,44(sp)
2040bda8:	02812403          	lw	s0,40(sp)
2040bdac:	03010113          	addi	sp,sp,48
2040bdb0:	00008067          	ret

2040bdb4 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5ClearEv>:

void FrameBuffer::Clear() {
2040bdb4:	fe010113          	addi	sp,sp,-32
2040bdb8:	00812e23          	sw	s0,28(sp)
2040bdbc:	02010413          	addi	s0,sp,32
2040bdc0:	fea42623          	sw	a0,-20(s0)
  num_valid_bytes_ = 0;
2040bdc4:	fec42783          	lw	a5,-20(s0)
2040bdc8:	0007a423          	sw	zero,8(a5)
  read_cursor_ = 0;
2040bdcc:	fec42783          	lw	a5,-20(s0)
2040bdd0:	0007a623          	sw	zero,12(a5)
}
2040bdd4:	00000013          	nop
2040bdd8:	01c12403          	lw	s0,28(sp)
2040bddc:	02010113          	addi	sp,sp,32
2040bde0:	00008067          	ret

2040bde4 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>:

namespace tvm {
namespace runtime {
namespace micro_rpc {

uint16_t crc16_compute(const uint8_t* data, size_t data_size_bytes, uint16_t* previous_crc) {
2040bde4:	fd010113          	addi	sp,sp,-48
2040bde8:	02112623          	sw	ra,44(sp)
2040bdec:	02812423          	sw	s0,40(sp)
2040bdf0:	03010413          	addi	s0,sp,48
2040bdf4:	fca42e23          	sw	a0,-36(s0)
2040bdf8:	fcb42c23          	sw	a1,-40(s0)
2040bdfc:	fcc42a23          	sw	a2,-44(s0)
  uint16_t crc = (previous_crc != nullptr ? *previous_crc : 0xffff);
2040be00:	fd442783          	lw	a5,-44(s0)
2040be04:	00078863          	beqz	a5,2040be14 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x30>
2040be08:	fd442783          	lw	a5,-44(s0)
2040be0c:	0007d783          	lhu	a5,0(a5)
2040be10:	00c0006f          	j	2040be1c <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x38>
2040be14:	000107b7          	lui	a5,0x10
2040be18:	fff78793          	addi	a5,a5,-1 # ffff <__stack_size+0xbfff>
2040be1c:	fef41723          	sh	a5,-18(s0)
  for (size_t i = 0; i < data_size_bytes; ++i) {
2040be20:	fe042423          	sw	zero,-24(s0)
2040be24:	fe842703          	lw	a4,-24(s0)
2040be28:	fd842783          	lw	a5,-40(s0)
2040be2c:	02f77e63          	bleu	a5,a4,2040be68 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x84>
    crc = update_crc_ccitt(crc, data[i]);
2040be30:	fdc42703          	lw	a4,-36(s0)
2040be34:	fe842783          	lw	a5,-24(s0)
2040be38:	00f707b3          	add	a5,a4,a5
2040be3c:	0007c703          	lbu	a4,0(a5)
2040be40:	fee45783          	lhu	a5,-18(s0)
2040be44:	00070593          	mv	a1,a4
2040be48:	00078513          	mv	a0,a5
2040be4c:	f44ff0ef          	jal	ra,2040b590 <update_crc_ccitt>
2040be50:	00050793          	mv	a5,a0
2040be54:	fef41723          	sh	a5,-18(s0)
  for (size_t i = 0; i < data_size_bytes; ++i) {
2040be58:	fe842783          	lw	a5,-24(s0)
2040be5c:	00178793          	addi	a5,a5,1
2040be60:	fef42423          	sw	a5,-24(s0)
2040be64:	fc1ff06f          	j	2040be24 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt+0x40>
  }

  return crc;
2040be68:	fee45783          	lhu	a5,-18(s0)
}
2040be6c:	00078513          	mv	a0,a5
2040be70:	02c12083          	lw	ra,44(sp)
2040be74:	02812403          	lw	s0,40(sp)
2040be78:	03010113          	addi	sp,sp,48
2040be7c:	00008067          	ret

2040be80 <_ZN3tvm7runtime9micro_rpc8Unframer5ResetEv>:
template <typename E>
static constexpr uint8_t to_integral(E e) {
  return static_cast<uint8_t>(e);
}

void Unframer::Reset() {
2040be80:	fe010113          	addi	sp,sp,-32
2040be84:	00812e23          	sw	s0,28(sp)
2040be88:	02010413          	addi	s0,sp,32
2040be8c:	fea42623          	sw	a0,-20(s0)
  state_ = State::kFindPacketStart;
2040be90:	fec42783          	lw	a5,-20(s0)
2040be94:	00078223          	sb	zero,4(a5)
  saw_escape_start_ = false;
2040be98:	fec42783          	lw	a5,-20(s0)
2040be9c:	00078823          	sb	zero,16(a5)
  num_buffer_bytes_valid_ = 0;
2040bea0:	fec42783          	lw	a5,-20(s0)
2040bea4:	0807aa23          	sw	zero,148(a5)
}
2040bea8:	00000013          	nop
2040beac:	01c12403          	lw	s0,28(sp)
2040beb0:	02010113          	addi	sp,sp,32
2040beb4:	00008067          	ret

2040beb8 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv>:

size_t Unframer::BytesNeeded() {
2040beb8:	fd010113          	addi	sp,sp,-48
2040bebc:	02112623          	sw	ra,44(sp)
2040bec0:	02812423          	sw	s0,40(sp)
2040bec4:	03010413          	addi	s0,sp,48
2040bec8:	fca42e23          	sw	a0,-36(s0)
  size_t bytes_needed = 0;
2040becc:	fe042623          	sw	zero,-20(s0)
  switch (state_) {
2040bed0:	fdc42783          	lw	a5,-36(s0)
2040bed4:	0047c783          	lbu	a5,4(a5)
2040bed8:	00100713          	li	a4,1
2040bedc:	02e78463          	beq	a5,a4,2040bf04 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x4c>
2040bee0:	00100713          	li	a4,1
2040bee4:	00e7ec63          	bltu	a5,a4,2040befc <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x44>
2040bee8:	00200713          	li	a4,2
2040beec:	02e78263          	beq	a5,a4,2040bf10 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x58>
2040bef0:	00300713          	li	a4,3
2040bef4:	02e78463          	beq	a5,a4,2040bf1c <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x64>
2040bef8:	0300006f          	j	2040bf28 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x70>
    case State::kFindPacketStart:
      return 1;
2040befc:	00100793          	li	a5,1
2040bf00:	0740006f          	j	2040bf74 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xbc>
    case State::kFindPacketLength:
      bytes_needed = PacketFieldSizeBytes::kPayloadLength;
2040bf04:	00400793          	li	a5,4
2040bf08:	fef42623          	sw	a5,-20(s0)
      break;
2040bf0c:	03c0006f          	j	2040bf48 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x90>
    case State::kFindPacketCrc:
      return num_payload_bytes_remaining_;
2040bf10:	fdc42783          	lw	a5,-36(s0)
2040bf14:	0987a783          	lw	a5,152(a5)
2040bf18:	05c0006f          	j	2040bf74 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xbc>
    case State::kFindCrcEnd:
      bytes_needed = PacketFieldSizeBytes::kCrc;
2040bf1c:	00200793          	li	a5,2
2040bf20:	fef42623          	sw	a5,-20(s0)
      break;
2040bf24:	0240006f          	j	2040bf48 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0x90>
    default:
      CHECK(false);
2040bf28:	00015617          	auipc	a2,0x15
2040bf2c:	49060613          	addi	a2,a2,1168 # 204213b8 <crc_tabccitt+0x220>
2040bf30:	05300593          	li	a1,83
2040bf34:	00015517          	auipc	a0,0x15
2040bf38:	48c50513          	addi	a0,a0,1164 # 204213c0 <crc_tabccitt+0x228>
2040bf3c:	000020ef          	jal	ra,2040df3c <TVMLogf>
2040bf40:	50000513          	li	a0,1280
2040bf44:	d39f40ef          	jal	ra,20400c7c <TVMPlatformAbort>
  }

  return bytes_needed > num_buffer_bytes_valid_ ? bytes_needed - num_buffer_bytes_valid_ : 0;
2040bf48:	fdc42783          	lw	a5,-36(s0)
2040bf4c:	0947a783          	lw	a5,148(a5)
2040bf50:	fec42703          	lw	a4,-20(s0)
2040bf54:	00e7fc63          	bleu	a4,a5,2040bf6c <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xb4>
2040bf58:	fdc42783          	lw	a5,-36(s0)
2040bf5c:	0947a783          	lw	a5,148(a5)
2040bf60:	fec42703          	lw	a4,-20(s0)
2040bf64:	40f707b3          	sub	a5,a4,a5
2040bf68:	0080006f          	j	2040bf70 <_ZN3tvm7runtime9micro_rpc8Unframer11BytesNeededEv+0xb8>
2040bf6c:	00000793          	li	a5,0
2040bf70:	00000013          	nop
}
2040bf74:	00078513          	mv	a0,a5
2040bf78:	02c12083          	lw	ra,44(sp)
2040bf7c:	02812403          	lw	s0,40(sp)
2040bf80:	03010113          	addi	sp,sp,48
2040bf84:	00008067          	ret

2040bf88 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj>:

tvm_crt_error_t Unframer::Write(const uint8_t* data, size_t data_size_bytes,
                                size_t* bytes_consumed) {
2040bf88:	fd010113          	addi	sp,sp,-48
2040bf8c:	02112623          	sw	ra,44(sp)
2040bf90:	02812423          	sw	s0,40(sp)
2040bf94:	02912223          	sw	s1,36(sp)
2040bf98:	03010413          	addi	s0,sp,48
2040bf9c:	fca42e23          	sw	a0,-36(s0)
2040bfa0:	fcb42c23          	sw	a1,-40(s0)
2040bfa4:	fcc42a23          	sw	a2,-44(s0)
2040bfa8:	fcd42823          	sw	a3,-48(s0)
  tvm_crt_error_t return_code = kTvmErrorNoError;
2040bfac:	fe042623          	sw	zero,-20(s0)
  input_ = data;
2040bfb0:	fdc42783          	lw	a5,-36(s0)
2040bfb4:	fd842703          	lw	a4,-40(s0)
2040bfb8:	00e7a423          	sw	a4,8(a5)
  input_size_bytes_ = data_size_bytes;
2040bfbc:	fdc42783          	lw	a5,-36(s0)
2040bfc0:	fd442703          	lw	a4,-44(s0)
2040bfc4:	00e7a623          	sw	a4,12(a5)

  while (return_code == kTvmErrorNoError && input_size_bytes_ > 0) {
2040bfc8:	fec42783          	lw	a5,-20(s0)
2040bfcc:	0c079a63          	bnez	a5,2040c0a0 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x118>
2040bfd0:	fdc42783          	lw	a5,-36(s0)
2040bfd4:	00c7a783          	lw	a5,12(a5)
2040bfd8:	0c078463          	beqz	a5,2040c0a0 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x118>
    TVM_UNFRAMER_DEBUG_LOG("state: %02x size 0x%02zx", to_integral(state_), input_size_bytes_);
2040bfdc:	5fbf5797          	auipc	a5,0x5fbf5
2040bfe0:	a5c78793          	addi	a5,a5,-1444 # 80000a38 <_impure_ptr>
2040bfe4:	0007a783          	lw	a5,0(a5)
2040bfe8:	00c7a483          	lw	s1,12(a5)
2040bfec:	fdc42783          	lw	a5,-36(s0)
2040bff0:	0047c783          	lbu	a5,4(a5)
2040bff4:	00078513          	mv	a0,a5
2040bff8:	6f1000ef          	jal	ra,2040cee8 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_8Unframer5StateEEEhT_>
2040bffc:	00050793          	mv	a5,a0
2040c000:	00078713          	mv	a4,a5
2040c004:	fdc42783          	lw	a5,-36(s0)
2040c008:	00c7a783          	lw	a5,12(a5)
2040c00c:	00078693          	mv	a3,a5
2040c010:	00070613          	mv	a2,a4
2040c014:	00015597          	auipc	a1,0x15
2040c018:	3f858593          	addi	a1,a1,1016 # 2042140c <crc_tabccitt+0x274>
2040c01c:	00048513          	mv	a0,s1
2040c020:	2ce070ef          	jal	ra,204132ee <fprintf>
    switch (state_) {
2040c024:	fdc42783          	lw	a5,-36(s0)
2040c028:	0047c783          	lbu	a5,4(a5)
2040c02c:	00100713          	li	a4,1
2040c030:	02e78863          	beq	a5,a4,2040c060 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xd8>
2040c034:	00100713          	li	a4,1
2040c038:	00e7ec63          	bltu	a5,a4,2040c050 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xc8>
2040c03c:	00200713          	li	a4,2
2040c040:	02e78863          	beq	a5,a4,2040c070 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xe8>
2040c044:	00300713          	li	a4,3
2040c048:	02e78c63          	beq	a5,a4,2040c080 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0xf8>
2040c04c:	0440006f          	j	2040c090 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x108>
      case State::kFindPacketStart:
        return_code = FindPacketStart();
2040c050:	fdc42503          	lw	a0,-36(s0)
2040c054:	0d0000ef          	jal	ra,2040c124 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv>
2040c058:	fea42623          	sw	a0,-20(s0)
        break;
2040c05c:	0400006f          	j	2040c09c <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x114>
      case State::kFindPacketLength:
        return_code = FindPacketLength();
2040c060:	fdc42503          	lw	a0,-36(s0)
2040c064:	580000ef          	jal	ra,2040c5e4 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv>
2040c068:	fea42623          	sw	a0,-20(s0)
        break;
2040c06c:	0300006f          	j	2040c09c <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x114>
      case State::kFindPacketCrc:
        return_code = FindPacketCrc();
2040c070:	fdc42503          	lw	a0,-36(s0)
2040c074:	638000ef          	jal	ra,2040c6ac <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv>
2040c078:	fea42623          	sw	a0,-20(s0)
        break;
2040c07c:	0200006f          	j	2040c09c <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x114>
      case State::kFindCrcEnd:
        return_code = FindCrcEnd();
2040c080:	fdc42503          	lw	a0,-36(s0)
2040c084:	7f8000ef          	jal	ra,2040c87c <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv>
2040c088:	fea42623          	sw	a0,-20(s0)
        break;
2040c08c:	0100006f          	j	2040c09c <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x114>
      default:
        return_code = kTvmErrorFramingInvalidState;
2040c090:	20000793          	li	a5,512
2040c094:	fef42623          	sw	a5,-20(s0)
        break;
2040c098:	00000013          	nop
  while (return_code == kTvmErrorNoError && input_size_bytes_ > 0) {
2040c09c:	f2dff06f          	j	2040bfc8 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x40>
    }
  }

  *bytes_consumed = data_size_bytes - input_size_bytes_;
2040c0a0:	fdc42783          	lw	a5,-36(s0)
2040c0a4:	00c7a783          	lw	a5,12(a5)
2040c0a8:	fd442703          	lw	a4,-44(s0)
2040c0ac:	40f70733          	sub	a4,a4,a5
2040c0b0:	fd042783          	lw	a5,-48(s0)
2040c0b4:	00e7a023          	sw	a4,0(a5)
  input_ = nullptr;
2040c0b8:	fdc42783          	lw	a5,-36(s0)
2040c0bc:	0007a423          	sw	zero,8(a5)
  input_size_bytes_ = 0;
2040c0c0:	fdc42783          	lw	a5,-36(s0)
2040c0c4:	0007a623          	sw	zero,12(a5)

  if (return_code != kTvmErrorNoError) {
2040c0c8:	fec42783          	lw	a5,-20(s0)
2040c0cc:	00078a63          	beqz	a5,2040c0e0 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj+0x158>
    state_ = State::kFindPacketStart;
2040c0d0:	fdc42783          	lw	a5,-36(s0)
2040c0d4:	00078223          	sb	zero,4(a5)
    ClearBuffer();
2040c0d8:	fdc42503          	lw	a0,-36(s0)
2040c0dc:	4e0000ef          	jal	ra,2040c5bc <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  }

  return return_code;
2040c0e0:	fec42783          	lw	a5,-20(s0)
}
2040c0e4:	00078513          	mv	a0,a5
2040c0e8:	02c12083          	lw	ra,44(sp)
2040c0ec:	02812403          	lw	s0,40(sp)
2040c0f0:	02412483          	lw	s1,36(sp)
2040c0f4:	03010113          	addi	sp,sp,48
2040c0f8:	00008067          	ret

2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>:
static constexpr uint8_t to_integral(E e) {
2040c0fc:	fe010113          	addi	sp,sp,-32
2040c100:	00812e23          	sw	s0,28(sp)
2040c104:	02010413          	addi	s0,sp,32
2040c108:	00050793          	mv	a5,a0
2040c10c:	fef407a3          	sb	a5,-17(s0)
  return static_cast<uint8_t>(e);
2040c110:	fef44783          	lbu	a5,-17(s0)
}
2040c114:	00078513          	mv	a0,a5
2040c118:	01c12403          	lw	s0,28(sp)
2040c11c:	02010113          	addi	sp,sp,32
2040c120:	00008067          	ret

2040c124 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv>:

tvm_crt_error_t Unframer::FindPacketStart() {
2040c124:	fd010113          	addi	sp,sp,-48
2040c128:	02112623          	sw	ra,44(sp)
2040c12c:	02812423          	sw	s0,40(sp)
2040c130:	02912223          	sw	s1,36(sp)
2040c134:	03010413          	addi	s0,sp,48
2040c138:	fca42e23          	sw	a0,-36(s0)
  size_t i;
  for (i = 0; i < input_size_bytes_; ++i) {
2040c13c:	fe042623          	sw	zero,-20(s0)
2040c140:	fdc42783          	lw	a5,-36(s0)
2040c144:	00c7a783          	lw	a5,12(a5)
2040c148:	fec42703          	lw	a4,-20(s0)
2040c14c:	0ef77c63          	bleu	a5,a4,2040c244 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x120>
    if (input_[i] == to_integral(Escape::kEscapeStart)) {
2040c150:	fdc42783          	lw	a5,-36(s0)
2040c154:	0087a703          	lw	a4,8(a5)
2040c158:	fec42783          	lw	a5,-20(s0)
2040c15c:	00f707b3          	add	a5,a4,a5
2040c160:	0007c483          	lbu	s1,0(a5)
2040c164:	0ff00513          	li	a0,255
2040c168:	f95ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c16c:	00050793          	mv	a5,a0
2040c170:	40f487b3          	sub	a5,s1,a5
2040c174:	0017b793          	seqz	a5,a5
2040c178:	0ff7f793          	andi	a5,a5,255
2040c17c:	00078a63          	beqz	a5,2040c190 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x6c>
      saw_escape_start_ = true;
2040c180:	fdc42783          	lw	a5,-36(s0)
2040c184:	00100713          	li	a4,1
2040c188:	00e78823          	sb	a4,16(a5)
2040c18c:	0a80006f          	j	2040c234 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x110>
    } else if (input_[i] == to_integral(Escape::kPacketStart) && saw_escape_start_) {
2040c190:	fdc42783          	lw	a5,-36(s0)
2040c194:	0087a703          	lw	a4,8(a5)
2040c198:	fec42783          	lw	a5,-20(s0)
2040c19c:	00f707b3          	add	a5,a4,a5
2040c1a0:	0007c483          	lbu	s1,0(a5)
2040c1a4:	0fd00513          	li	a0,253
2040c1a8:	f55ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c1ac:	00050793          	mv	a5,a0
2040c1b0:	00f49c63          	bne	s1,a5,2040c1c8 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0xa4>
2040c1b4:	fdc42783          	lw	a5,-36(s0)
2040c1b8:	0107c783          	lbu	a5,16(a5)
2040c1bc:	00078663          	beqz	a5,2040c1c8 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0xa4>
2040c1c0:	00100793          	li	a5,1
2040c1c4:	0080006f          	j	2040c1cc <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0xa8>
2040c1c8:	00000793          	li	a5,0
2040c1cc:	06078063          	beqz	a5,2040c22c <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x108>
      uint8_t packet_start_sequence[2]{to_integral(Escape::kEscapeStart),
2040c1d0:	fff00793          	li	a5,-1
2040c1d4:	fef40423          	sb	a5,-24(s0)
2040c1d8:	ffd00793          	li	a5,-3
2040c1dc:	fef404a3          	sb	a5,-23(s0)
                                       to_integral(Escape::kPacketStart)};
      crc_ = crc16_compute(packet_start_sequence, sizeof(packet_start_sequence), nullptr);
2040c1e0:	fe840793          	addi	a5,s0,-24
2040c1e4:	00000613          	li	a2,0
2040c1e8:	00200593          	li	a1,2
2040c1ec:	00078513          	mv	a0,a5
2040c1f0:	bf5ff0ef          	jal	ra,2040bde4 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040c1f4:	00050793          	mv	a5,a0
2040c1f8:	00078713          	mv	a4,a5
2040c1fc:	fdc42783          	lw	a5,-36(s0)
2040c200:	08e79e23          	sh	a4,156(a5)
      saw_escape_start_ = false;
2040c204:	fdc42783          	lw	a5,-36(s0)
2040c208:	00078823          	sb	zero,16(a5)
      state_ = State::kFindPacketLength;
2040c20c:	fdc42783          	lw	a5,-36(s0)
2040c210:	00100713          	li	a4,1
2040c214:	00e78223          	sb	a4,4(a5)
      i++;
2040c218:	fec42783          	lw	a5,-20(s0)
2040c21c:	00178793          	addi	a5,a5,1
2040c220:	fef42623          	sw	a5,-20(s0)
      break;
2040c224:	00000013          	nop
2040c228:	01c0006f          	j	2040c244 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x120>
    } else {
      saw_escape_start_ = false;
2040c22c:	fdc42783          	lw	a5,-36(s0)
2040c230:	00078823          	sb	zero,16(a5)
  for (i = 0; i < input_size_bytes_; ++i) {
2040c234:	fec42783          	lw	a5,-20(s0)
2040c238:	00178793          	addi	a5,a5,1
2040c23c:	fef42623          	sw	a5,-20(s0)
2040c240:	f01ff06f          	j	2040c140 <_ZN3tvm7runtime9micro_rpc8Unframer15FindPacketStartEv+0x1c>
    }
  }

  input_ += i;
2040c244:	fdc42783          	lw	a5,-36(s0)
2040c248:	0087a703          	lw	a4,8(a5)
2040c24c:	fec42783          	lw	a5,-20(s0)
2040c250:	00f70733          	add	a4,a4,a5
2040c254:	fdc42783          	lw	a5,-36(s0)
2040c258:	00e7a423          	sw	a4,8(a5)
  input_size_bytes_ -= i;
2040c25c:	fdc42783          	lw	a5,-36(s0)
2040c260:	00c7a703          	lw	a4,12(a5)
2040c264:	fec42783          	lw	a5,-20(s0)
2040c268:	40f70733          	sub	a4,a4,a5
2040c26c:	fdc42783          	lw	a5,-36(s0)
2040c270:	00e7a623          	sw	a4,12(a5)


  printf("End - Find packet start %d\n", input_size_bytes_);
2040c274:	fdc42783          	lw	a5,-36(s0)
2040c278:	00c7a783          	lw	a5,12(a5)
2040c27c:	00078593          	mv	a1,a5
2040c280:	00015517          	auipc	a0,0x15
2040c284:	1bc50513          	addi	a0,a0,444 # 2042143c <crc_tabccitt+0x2a4>
2040c288:	64d060ef          	jal	ra,204130d4 <__wrap_printf>

  return kTvmErrorNoError;
2040c28c:	00000793          	li	a5,0
}
2040c290:	00078513          	mv	a0,a5
2040c294:	02c12083          	lw	ra,44(sp)
2040c298:	02812403          	lw	s0,40(sp)
2040c29c:	02412483          	lw	s1,36(sp)
2040c2a0:	03010113          	addi	sp,sp,48
2040c2a4:	00008067          	ret

2040c2a8 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb>:

tvm_crt_error_t Unframer::ConsumeInput(uint8_t* buffer, size_t buffer_size_bytes,
                                       size_t* bytes_filled, bool update_crc) {
2040c2a8:	fc010113          	addi	sp,sp,-64
2040c2ac:	02112e23          	sw	ra,60(sp)
2040c2b0:	02812c23          	sw	s0,56(sp)
2040c2b4:	04010413          	addi	s0,sp,64
2040c2b8:	fca42e23          	sw	a0,-36(s0)
2040c2bc:	fcb42c23          	sw	a1,-40(s0)
2040c2c0:	fcc42a23          	sw	a2,-44(s0)
2040c2c4:	fcd42823          	sw	a3,-48(s0)
2040c2c8:	00070793          	mv	a5,a4
2040c2cc:	fcf407a3          	sb	a5,-49(s0)
  CHECK(*bytes_filled < buffer_size_bytes);
2040c2d0:	fd042783          	lw	a5,-48(s0)
2040c2d4:	0007a783          	lw	a5,0(a5)
2040c2d8:	fd442703          	lw	a4,-44(s0)
2040c2dc:	02e7e263          	bltu	a5,a4,2040c300 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x58>
2040c2e0:	00015617          	auipc	a2,0x15
2040c2e4:	17860613          	addi	a2,a2,376 # 20421458 <crc_tabccitt+0x2c0>
2040c2e8:	09d00593          	li	a1,157
2040c2ec:	00015517          	auipc	a0,0x15
2040c2f0:	0d450513          	addi	a0,a0,212 # 204213c0 <crc_tabccitt+0x228>
2040c2f4:	449010ef          	jal	ra,2040df3c <TVMLogf>
2040c2f8:	50000513          	li	a0,1280
2040c2fc:	981f40ef          	jal	ra,20400c7c <TVMPlatformAbort>
  tvm_crt_error_t to_return = kTvmErrorNoError;
2040c300:	fe042623          	sw	zero,-20(s0)
  size_t i;
  for (i = 0; i < input_size_bytes_; ++i) {
2040c304:	fe042423          	sw	zero,-24(s0)
2040c308:	fdc42783          	lw	a5,-36(s0)
2040c30c:	00c7a783          	lw	a5,12(a5)
2040c310:	fe842703          	lw	a4,-24(s0)
2040c314:	18f77c63          	bleu	a5,a4,2040c4ac <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
    uint8_t c = input_[i];
2040c318:	fdc42783          	lw	a5,-36(s0)
2040c31c:	0087a703          	lw	a4,8(a5)
2040c320:	fe842783          	lw	a5,-24(s0)
2040c324:	00f707b3          	add	a5,a4,a5
2040c328:	0007c783          	lbu	a5,0(a5)
2040c32c:	fef403a3          	sb	a5,-25(s0)
    if (saw_escape_start_) {
2040c330:	fdc42783          	lw	a5,-36(s0)
2040c334:	0107c783          	lbu	a5,16(a5)
2040c338:	0c078c63          	beqz	a5,2040c410 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x168>
      saw_escape_start_ = false;
2040c33c:	fdc42783          	lw	a5,-36(s0)
2040c340:	00078823          	sb	zero,16(a5)
      if (c == to_integral(Escape::kPacketStart)) {
2040c344:	0fd00513          	li	a0,253
2040c348:	db5ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c34c:	00050793          	mv	a5,a0
2040c350:	00078713          	mv	a4,a5
2040c354:	fe744783          	lbu	a5,-25(s0)
2040c358:	40e787b3          	sub	a5,a5,a4
2040c35c:	0017b793          	seqz	a5,a5
2040c360:	0ff7f793          	andi	a5,a5,255
2040c364:	04078663          	beqz	a5,2040c3b0 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x108>
        // When the start packet sequence is seen, abort unframing the current packet. Since the
        // escape byte has already been parsed, update the CRC include only the escape byte. This
        // readies the unframer to consume the kPacketStart byte on the next Write() call.
        uint8_t escape_start = to_integral(Escape::kEscapeStart);
2040c368:	fff00793          	li	a5,-1
2040c36c:	fef40323          	sb	a5,-26(s0)
        crc_ = crc16_compute(&escape_start, 1, nullptr);
2040c370:	fe640793          	addi	a5,s0,-26
2040c374:	00000613          	li	a2,0
2040c378:	00100593          	li	a1,1
2040c37c:	00078513          	mv	a0,a5
2040c380:	a65ff0ef          	jal	ra,2040bde4 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040c384:	00050793          	mv	a5,a0
2040c388:	00078713          	mv	a4,a5
2040c38c:	fdc42783          	lw	a5,-36(s0)
2040c390:	08e79e23          	sh	a4,156(a5)
        to_return = kTvmErrorFramingShortPacket;
2040c394:	20100793          	li	a5,513
2040c398:	fef42623          	sw	a5,-20(s0)
        saw_escape_start_ = true;
2040c39c:	fdc42783          	lw	a5,-36(s0)
2040c3a0:	00100713          	li	a4,1
2040c3a4:	00e78823          	sb	a4,16(a5)

        break;
2040c3a8:	00000013          	nop
2040c3ac:	1000006f          	j	2040c4ac <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
      } else if (c == to_integral(Escape::kEscapeNop)) {
2040c3b0:	0fe00513          	li	a0,254
2040c3b4:	d49ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c3b8:	00050793          	mv	a5,a0
2040c3bc:	00078713          	mv	a4,a5
2040c3c0:	fe744783          	lbu	a5,-25(s0)
2040c3c4:	40e787b3          	sub	a5,a5,a4
2040c3c8:	0017b793          	seqz	a5,a5
2040c3cc:	0ff7f793          	andi	a5,a5,255
2040c3d0:	0c079463          	bnez	a5,2040c498 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1f0>
        continue;
      } else if (c == to_integral(Escape::kEscapeStart)) {
2040c3d4:	0ff00513          	li	a0,255
2040c3d8:	d25ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c3dc:	00050793          	mv	a5,a0
2040c3e0:	00078713          	mv	a4,a5
2040c3e4:	fe744783          	lbu	a5,-25(s0)
2040c3e8:	40e787b3          	sub	a5,a5,a4
2040c3ec:	0017b793          	seqz	a5,a5
2040c3f0:	0ff7f793          	andi	a5,a5,255
2040c3f4:	04079c63          	bnez	a5,2040c44c <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1a4>
        // do nothing (allow character to be printed)
      } else {
        // Invalid escape sequence.
        to_return = kTvmErrorFramingInvalidEscape;
2040c3f8:	20200793          	li	a5,514
2040c3fc:	fef42623          	sw	a5,-20(s0)
        i++;
2040c400:	fe842783          	lw	a5,-24(s0)
2040c404:	00178793          	addi	a5,a5,1
2040c408:	fef42423          	sw	a5,-24(s0)
        break;
2040c40c:	0a00006f          	j	2040c4ac <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
      }
    } else if (c == to_integral(Escape::kEscapeStart)) {
2040c410:	0ff00513          	li	a0,255
2040c414:	ce9ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040c418:	00050793          	mv	a5,a0
2040c41c:	00078713          	mv	a4,a5
2040c420:	fe744783          	lbu	a5,-25(s0)
2040c424:	40e787b3          	sub	a5,a5,a4
2040c428:	0017b793          	seqz	a5,a5
2040c42c:	0ff7f793          	andi	a5,a5,255
2040c430:	00078a63          	beqz	a5,2040c444 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x19c>
      saw_escape_start_ = true;
2040c434:	fdc42783          	lw	a5,-36(s0)
2040c438:	00100713          	li	a4,1
2040c43c:	00e78823          	sb	a4,16(a5)
      continue;
2040c440:	05c0006f          	j	2040c49c <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1f4>
    } else {
      saw_escape_start_ = false;
2040c444:	fdc42783          	lw	a5,-36(s0)
2040c448:	00078823          	sb	zero,16(a5)
    }

    buffer[*bytes_filled] = c;
2040c44c:	fd042783          	lw	a5,-48(s0)
2040c450:	0007a783          	lw	a5,0(a5)
2040c454:	fd842703          	lw	a4,-40(s0)
2040c458:	00f707b3          	add	a5,a4,a5
2040c45c:	fe744703          	lbu	a4,-25(s0)
2040c460:	00e78023          	sb	a4,0(a5)
    (*bytes_filled)++;
2040c464:	fd042783          	lw	a5,-48(s0)
2040c468:	0007a783          	lw	a5,0(a5)
2040c46c:	00178713          	addi	a4,a5,1
2040c470:	fd042783          	lw	a5,-48(s0)
2040c474:	00e7a023          	sw	a4,0(a5)
    if (*bytes_filled == buffer_size_bytes) {
2040c478:	fd042783          	lw	a5,-48(s0)
2040c47c:	0007a783          	lw	a5,0(a5)
2040c480:	fd442703          	lw	a4,-44(s0)
2040c484:	00f71c63          	bne	a4,a5,2040c49c <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x1f4>
      i++;
2040c488:	fe842783          	lw	a5,-24(s0)
2040c48c:	00178793          	addi	a5,a5,1
2040c490:	fef42423          	sw	a5,-24(s0)
      break;
2040c494:	0180006f          	j	2040c4ac <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x204>
        continue;
2040c498:	00000013          	nop
  for (i = 0; i < input_size_bytes_; ++i) {
2040c49c:	fe842783          	lw	a5,-24(s0)
2040c4a0:	00178793          	addi	a5,a5,1
2040c4a4:	fef42423          	sw	a5,-24(s0)
2040c4a8:	e61ff06f          	j	2040c308 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x60>
    }
  }

  if (update_crc) {
2040c4ac:	fcf44783          	lbu	a5,-49(s0)
2040c4b0:	02078a63          	beqz	a5,2040c4e4 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb+0x23c>
    crc_ = crc16_compute(input_, i, &crc_);
2040c4b4:	fdc42783          	lw	a5,-36(s0)
2040c4b8:	0087a703          	lw	a4,8(a5)
2040c4bc:	fdc42783          	lw	a5,-36(s0)
2040c4c0:	09c78793          	addi	a5,a5,156
2040c4c4:	00078613          	mv	a2,a5
2040c4c8:	fe842583          	lw	a1,-24(s0)
2040c4cc:	00070513          	mv	a0,a4
2040c4d0:	915ff0ef          	jal	ra,2040bde4 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040c4d4:	00050793          	mv	a5,a0
2040c4d8:	00078713          	mv	a4,a5
2040c4dc:	fdc42783          	lw	a5,-36(s0)
2040c4e0:	08e79e23          	sh	a4,156(a5)
  }

  input_ += i;
2040c4e4:	fdc42783          	lw	a5,-36(s0)
2040c4e8:	0087a703          	lw	a4,8(a5)
2040c4ec:	fe842783          	lw	a5,-24(s0)
2040c4f0:	00f70733          	add	a4,a4,a5
2040c4f4:	fdc42783          	lw	a5,-36(s0)
2040c4f8:	00e7a423          	sw	a4,8(a5)
  input_size_bytes_ -= i;
2040c4fc:	fdc42783          	lw	a5,-36(s0)
2040c500:	00c7a703          	lw	a4,12(a5)
2040c504:	fe842783          	lw	a5,-24(s0)
2040c508:	40f70733          	sub	a4,a4,a5
2040c50c:	fdc42783          	lw	a5,-36(s0)
2040c510:	00e7a623          	sw	a4,12(a5)
  return to_return;
2040c514:	fec42783          	lw	a5,-20(s0)
}
2040c518:	00078513          	mv	a0,a5
2040c51c:	03c12083          	lw	ra,60(sp)
2040c520:	03812403          	lw	s0,56(sp)
2040c524:	04010113          	addi	sp,sp,64
2040c528:	00008067          	ret

2040c52c <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>:

tvm_crt_error_t Unframer::AddToBuffer(size_t buffer_full_bytes, bool update_crc) {
2040c52c:	fe010113          	addi	sp,sp,-32
2040c530:	00112e23          	sw	ra,28(sp)
2040c534:	00812c23          	sw	s0,24(sp)
2040c538:	02010413          	addi	s0,sp,32
2040c53c:	fea42623          	sw	a0,-20(s0)
2040c540:	feb42423          	sw	a1,-24(s0)
2040c544:	00060793          	mv	a5,a2
2040c548:	fef403a3          	sb	a5,-25(s0)
  CHECK(!IsBufferFull(buffer_full_bytes));
2040c54c:	fe842583          	lw	a1,-24(s0)
2040c550:	fec42503          	lw	a0,-20(s0)
2040c554:	1bd000ef          	jal	ra,2040cf10 <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>
2040c558:	00050793          	mv	a5,a0
2040c55c:	02078263          	beqz	a5,2040c580 <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb+0x54>
2040c560:	00015617          	auipc	a2,0x15
2040c564:	f1c60613          	addi	a2,a2,-228 # 2042147c <crc_tabccitt+0x2e4>
2040c568:	0d100593          	li	a1,209
2040c56c:	00015517          	auipc	a0,0x15
2040c570:	e5450513          	addi	a0,a0,-428 # 204213c0 <crc_tabccitt+0x228>
2040c574:	1c9010ef          	jal	ra,2040df3c <TVMLogf>
2040c578:	50000513          	li	a0,1280
2040c57c:	f00f40ef          	jal	ra,20400c7c <TVMPlatformAbort>
  return ConsumeInput(buffer_, buffer_full_bytes, &num_buffer_bytes_valid_, update_crc);
2040c580:	fec42783          	lw	a5,-20(s0)
2040c584:	01178593          	addi	a1,a5,17
2040c588:	fec42783          	lw	a5,-20(s0)
2040c58c:	09478793          	addi	a5,a5,148
2040c590:	fe744703          	lbu	a4,-25(s0)
2040c594:	00078693          	mv	a3,a5
2040c598:	fe842603          	lw	a2,-24(s0)
2040c59c:	fec42503          	lw	a0,-20(s0)
2040c5a0:	d09ff0ef          	jal	ra,2040c2a8 <_ZN3tvm7runtime9micro_rpc8Unframer12ConsumeInputEPhjPjb>
2040c5a4:	00050793          	mv	a5,a0
}
2040c5a8:	00078513          	mv	a0,a5
2040c5ac:	01c12083          	lw	ra,28(sp)
2040c5b0:	01812403          	lw	s0,24(sp)
2040c5b4:	02010113          	addi	sp,sp,32
2040c5b8:	00008067          	ret

2040c5bc <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>:

void Unframer::ClearBuffer() { num_buffer_bytes_valid_ = 0; }
2040c5bc:	fe010113          	addi	sp,sp,-32
2040c5c0:	00812e23          	sw	s0,28(sp)
2040c5c4:	02010413          	addi	s0,sp,32
2040c5c8:	fea42623          	sw	a0,-20(s0)
2040c5cc:	fec42783          	lw	a5,-20(s0)
2040c5d0:	0807aa23          	sw	zero,148(a5)
2040c5d4:	00000013          	nop
2040c5d8:	01c12403          	lw	s0,28(sp)
2040c5dc:	02010113          	addi	sp,sp,32
2040c5e0:	00008067          	ret

2040c5e4 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv>:

tvm_crt_error_t Unframer::FindPacketLength() {
2040c5e4:	fd010113          	addi	sp,sp,-48
2040c5e8:	02112623          	sw	ra,44(sp)
2040c5ec:	02812423          	sw	s0,40(sp)
2040c5f0:	03010413          	addi	s0,sp,48
2040c5f4:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t to_return = AddToBuffer(PacketFieldSizeBytes::kPayloadLength, true);
2040c5f8:	00100613          	li	a2,1
2040c5fc:	00400593          	li	a1,4
2040c600:	fdc42503          	lw	a0,-36(s0)
2040c604:	f29ff0ef          	jal	ra,2040c52c <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>
2040c608:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c60c:	fec42783          	lw	a5,-20(s0)
2040c610:	00078663          	beqz	a5,2040c61c <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0x38>
    return to_return;
2040c614:	fec42783          	lw	a5,-20(s0)
2040c618:	0800006f          	j	2040c698 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0xb4>
  }

  if (!IsBufferFull(PacketFieldSizeBytes::kPayloadLength)) {
2040c61c:	00400593          	li	a1,4
2040c620:	fdc42503          	lw	a0,-36(s0)
2040c624:	0ed000ef          	jal	ra,2040cf10 <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>
2040c628:	00050793          	mv	a5,a0
2040c62c:	0017c793          	xori	a5,a5,1
2040c630:	0ff7f793          	andi	a5,a5,255
2040c634:	00078663          	beqz	a5,2040c640 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0x5c>
    return to_return;
2040c638:	fec42783          	lw	a5,-20(s0)
2040c63c:	05c0006f          	j	2040c698 <_ZN3tvm7runtime9micro_rpc8Unframer16FindPacketLengthEv+0xb4>
  }

  num_payload_bytes_remaining_ = *reinterpret_cast<uint32_t*>(buffer_);
2040c640:	fdc42783          	lw	a5,-36(s0)
2040c644:	01178793          	addi	a5,a5,17
2040c648:	0007a703          	lw	a4,0(a5)
2040c64c:	fdc42783          	lw	a5,-36(s0)
2040c650:	08e7ac23          	sw	a4,152(a5)
  TVM_UNFRAMER_DEBUG_LOG("payload length: 0x%zx", num_payload_bytes_remaining_);
2040c654:	5fbf4797          	auipc	a5,0x5fbf4
2040c658:	3e478793          	addi	a5,a5,996 # 80000a38 <_impure_ptr>
2040c65c:	0007a783          	lw	a5,0(a5)
2040c660:	00c7a703          	lw	a4,12(a5)
2040c664:	fdc42783          	lw	a5,-36(s0)
2040c668:	0987a783          	lw	a5,152(a5)
2040c66c:	00078613          	mv	a2,a5
2040c670:	00015597          	auipc	a1,0x15
2040c674:	e3058593          	addi	a1,a1,-464 # 204214a0 <crc_tabccitt+0x308>
2040c678:	00070513          	mv	a0,a4
2040c67c:	473060ef          	jal	ra,204132ee <fprintf>
  ClearBuffer();
2040c680:	fdc42503          	lw	a0,-36(s0)
2040c684:	f39ff0ef          	jal	ra,2040c5bc <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  state_ = State::kFindPacketCrc;
2040c688:	fdc42783          	lw	a5,-36(s0)
2040c68c:	00200713          	li	a4,2
2040c690:	00e78223          	sb	a4,4(a5)
  return to_return;
2040c694:	fec42783          	lw	a5,-20(s0)
}
2040c698:	00078513          	mv	a0,a5
2040c69c:	02c12083          	lw	ra,44(sp)
2040c6a0:	02812403          	lw	s0,40(sp)
2040c6a4:	03010113          	addi	sp,sp,48
2040c6a8:	00008067          	ret

2040c6ac <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv>:

tvm_crt_error_t Unframer::FindPacketCrc() {
2040c6ac:	fb010113          	addi	sp,sp,-80
2040c6b0:	04112623          	sw	ra,76(sp)
2040c6b4:	04812423          	sw	s0,72(sp)
2040c6b8:	05010413          	addi	s0,sp,80
2040c6bc:	faa42e23          	sw	a0,-68(s0)
  //  CHECK(num_buffer_bytes_valid_ == 0);
  while (num_payload_bytes_remaining_ > 0) {
2040c6c0:	fbc42783          	lw	a5,-68(s0)
2040c6c4:	0987a783          	lw	a5,152(a5)
2040c6c8:	18078263          	beqz	a5,2040c84c <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1a0>
    size_t num_bytes_to_buffer = num_payload_bytes_remaining_;
2040c6cc:	fbc42783          	lw	a5,-68(s0)
2040c6d0:	0987a783          	lw	a5,152(a5)
2040c6d4:	fef42623          	sw	a5,-20(s0)
    if (num_bytes_to_buffer > sizeof(buffer_)) {
2040c6d8:	fec42703          	lw	a4,-20(s0)
2040c6dc:	08000793          	li	a5,128
2040c6e0:	00e7f663          	bleu	a4,a5,2040c6ec <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x40>
      num_bytes_to_buffer = sizeof(buffer_);
2040c6e4:	08000793          	li	a5,128
2040c6e8:	fef42623          	sw	a5,-20(s0)
    }

    // remember in case we need to rewind due to WriteAll() error.
    size_t prev_input_size_bytes = input_size_bytes_;
2040c6ec:	fbc42783          	lw	a5,-68(s0)
2040c6f0:	00c7a783          	lw	a5,12(a5)
2040c6f4:	fef42223          	sw	a5,-28(s0)
    size_t prev_num_buffer_bytes_valid = num_buffer_bytes_valid_;
2040c6f8:	fbc42783          	lw	a5,-68(s0)
2040c6fc:	0947a783          	lw	a5,148(a5)
2040c700:	fef42023          	sw	a5,-32(s0)
    {
      tvm_crt_error_t to_return = AddToBuffer(num_bytes_to_buffer, true);
2040c704:	00100613          	li	a2,1
2040c708:	fec42583          	lw	a1,-20(s0)
2040c70c:	fbc42503          	lw	a0,-68(s0)
2040c710:	e1dff0ef          	jal	ra,2040c52c <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>
2040c714:	fca42e23          	sw	a0,-36(s0)
      if (to_return != kTvmErrorNoError) {
2040c718:	fdc42783          	lw	a5,-36(s0)
2040c71c:	00078663          	beqz	a5,2040c728 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x7c>
        return to_return;
2040c720:	fdc42783          	lw	a5,-36(s0)
2040c724:	1440006f          	j	2040c868 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1bc>
      }
    }

    if (prev_num_buffer_bytes_valid == num_buffer_bytes_valid_) {
2040c728:	fbc42783          	lw	a5,-68(s0)
2040c72c:	0947a783          	lw	a5,148(a5)
2040c730:	fe042703          	lw	a4,-32(s0)
2040c734:	00f71663          	bne	a4,a5,2040c740 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x94>
      // Return if no bytes were consumed from the input.
      return kTvmErrorNoError;
2040c738:	00000793          	li	a5,0
2040c73c:	12c0006f          	j	2040c868 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1bc>
    }

    {
      size_t bytes_consumed;
      tvm_crt_error_t to_return =
          stream_->WriteAll(buffer_, num_buffer_bytes_valid_, &bytes_consumed);
2040c740:	fbc42783          	lw	a5,-68(s0)
2040c744:	0007a703          	lw	a4,0(a5)
2040c748:	fbc42783          	lw	a5,-68(s0)
2040c74c:	01178593          	addi	a1,a5,17
2040c750:	fbc42783          	lw	a5,-68(s0)
2040c754:	0947a783          	lw	a5,148(a5)
2040c758:	fcc40693          	addi	a3,s0,-52
2040c75c:	00078613          	mv	a2,a5
2040c760:	00070513          	mv	a0,a4
2040c764:	594010ef          	jal	ra,2040dcf8 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj>
2040c768:	fca42c23          	sw	a0,-40(s0)
      num_payload_bytes_remaining_ -= bytes_consumed;
2040c76c:	fbc42783          	lw	a5,-68(s0)
2040c770:	0987a703          	lw	a4,152(a5)
2040c774:	fcc42783          	lw	a5,-52(s0)
2040c778:	40f70733          	sub	a4,a4,a5
2040c77c:	fbc42783          	lw	a5,-68(s0)
2040c780:	08e7ac23          	sw	a4,152(a5)
      if (to_return != kTvmErrorNoError) {
2040c784:	fd842783          	lw	a5,-40(s0)
2040c788:	0a078c63          	beqz	a5,2040c840 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x194>
        // rewind input, skipping escape bytes.
        size_t buffer_bytes_consumed;
        const uint8_t* input = input_ - (prev_input_size_bytes - input_size_bytes_);
2040c78c:	fbc42783          	lw	a5,-68(s0)
2040c790:	0087a703          	lw	a4,8(a5)
2040c794:	fbc42783          	lw	a5,-68(s0)
2040c798:	00c7a683          	lw	a3,12(a5)
2040c79c:	fe442783          	lw	a5,-28(s0)
2040c7a0:	40f687b3          	sub	a5,a3,a5
2040c7a4:	00f707b3          	add	a5,a4,a5
2040c7a8:	fcf42a23          	sw	a5,-44(s0)
        for (buffer_bytes_consumed = 0; bytes_consumed > 0; ++buffer_bytes_consumed) {
2040c7ac:	fe042423          	sw	zero,-24(s0)
2040c7b0:	fcc42783          	lw	a5,-52(s0)
2040c7b4:	02078c63          	beqz	a5,2040c7ec <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x140>
          if (input[buffer_bytes_consumed] != uint8_t(Escape::kEscapeStart)) {
2040c7b8:	fd442703          	lw	a4,-44(s0)
2040c7bc:	fe842783          	lw	a5,-24(s0)
2040c7c0:	00f707b3          	add	a5,a4,a5
2040c7c4:	0007c703          	lbu	a4,0(a5)
2040c7c8:	0ff00793          	li	a5,255
2040c7cc:	00f70863          	beq	a4,a5,2040c7dc <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x130>
            bytes_consumed--;
2040c7d0:	fcc42783          	lw	a5,-52(s0)
2040c7d4:	fff78793          	addi	a5,a5,-1
2040c7d8:	fcf42623          	sw	a5,-52(s0)
        for (buffer_bytes_consumed = 0; bytes_consumed > 0; ++buffer_bytes_consumed) {
2040c7dc:	fe842783          	lw	a5,-24(s0)
2040c7e0:	00178793          	addi	a5,a5,1
2040c7e4:	fef42423          	sw	a5,-24(s0)
2040c7e8:	fc9ff06f          	j	2040c7b0 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x104>
          }
        }

        size_t bytes_to_rewind = prev_input_size_bytes - buffer_bytes_consumed;
2040c7ec:	fe442703          	lw	a4,-28(s0)
2040c7f0:	fe842783          	lw	a5,-24(s0)
2040c7f4:	40f707b3          	sub	a5,a4,a5
2040c7f8:	fcf42823          	sw	a5,-48(s0)
        input_ -= bytes_to_rewind;
2040c7fc:	fbc42783          	lw	a5,-68(s0)
2040c800:	0087a703          	lw	a4,8(a5)
2040c804:	fd042783          	lw	a5,-48(s0)
2040c808:	40f007b3          	neg	a5,a5
2040c80c:	00f70733          	add	a4,a4,a5
2040c810:	fbc42783          	lw	a5,-68(s0)
2040c814:	00e7a423          	sw	a4,8(a5)
        input_size_bytes_ += bytes_to_rewind;
2040c818:	fbc42783          	lw	a5,-68(s0)
2040c81c:	00c7a703          	lw	a4,12(a5)
2040c820:	fd042783          	lw	a5,-48(s0)
2040c824:	00f70733          	add	a4,a4,a5
2040c828:	fbc42783          	lw	a5,-68(s0)
2040c82c:	00e7a623          	sw	a4,12(a5)

        // must not have seen escape, since AddToBuffer won't stop in the middle.
        saw_escape_start_ = false;
2040c830:	fbc42783          	lw	a5,-68(s0)
2040c834:	00078823          	sb	zero,16(a5)

        return to_return;
2040c838:	fd842783          	lw	a5,-40(s0)
2040c83c:	02c0006f          	j	2040c868 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1bc>
      }
    }

    ClearBuffer();
2040c840:	fbc42503          	lw	a0,-68(s0)
2040c844:	d79ff0ef          	jal	ra,2040c5bc <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  while (num_payload_bytes_remaining_ > 0) {
2040c848:	e79ff06f          	j	2040c6c0 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x14>
  }

  if (num_payload_bytes_remaining_ == 0) {
2040c84c:	fbc42783          	lw	a5,-68(s0)
2040c850:	0987a783          	lw	a5,152(a5)
2040c854:	00079863          	bnez	a5,2040c864 <_ZN3tvm7runtime9micro_rpc8Unframer13FindPacketCrcEv+0x1b8>
    state_ = State::kFindCrcEnd;
2040c858:	fbc42783          	lw	a5,-68(s0)
2040c85c:	00300713          	li	a4,3
2040c860:	00e78223          	sb	a4,4(a5)
  }

  return kTvmErrorNoError;
2040c864:	00000793          	li	a5,0
}
2040c868:	00078513          	mv	a0,a5
2040c86c:	04c12083          	lw	ra,76(sp)
2040c870:	04812403          	lw	s0,72(sp)
2040c874:	05010113          	addi	sp,sp,80
2040c878:	00008067          	ret

2040c87c <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv>:

tvm_crt_error_t Unframer::FindCrcEnd() {
2040c87c:	fd010113          	addi	sp,sp,-48
2040c880:	02112623          	sw	ra,44(sp)
2040c884:	02812423          	sw	s0,40(sp)
2040c888:	03010413          	addi	s0,sp,48
2040c88c:	fca42e23          	sw	a0,-36(s0)
  tvm_crt_error_t to_return = AddToBuffer(PacketFieldSizeBytes::kCrc, false);
2040c890:	00000613          	li	a2,0
2040c894:	00200593          	li	a1,2
2040c898:	fdc42503          	lw	a0,-36(s0)
2040c89c:	c91ff0ef          	jal	ra,2040c52c <_ZN3tvm7runtime9micro_rpc8Unframer11AddToBufferEjb>
2040c8a0:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c8a4:	fec42783          	lw	a5,-20(s0)
2040c8a8:	00078663          	beqz	a5,2040c8b4 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0x38>
    return to_return;
2040c8ac:	fec42783          	lw	a5,-20(s0)
2040c8b0:	0840006f          	j	2040c934 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0xb8>
  }

  if (!IsBufferFull(PacketFieldSizeBytes::kCrc)) {
2040c8b4:	00200593          	li	a1,2
2040c8b8:	fdc42503          	lw	a0,-36(s0)
2040c8bc:	654000ef          	jal	ra,2040cf10 <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>
2040c8c0:	00050793          	mv	a5,a0
2040c8c4:	0017c793          	xori	a5,a5,1
2040c8c8:	0ff7f793          	andi	a5,a5,255
2040c8cc:	00078663          	beqz	a5,2040c8d8 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0x5c>
    return kTvmErrorNoError;
2040c8d0:	00000793          	li	a5,0
2040c8d4:	0600006f          	j	2040c934 <_ZN3tvm7runtime9micro_rpc8Unframer10FindCrcEndEv+0xb8>
  }

  // TODO(areusch): Handle endianness.
  stream_->PacketDone(crc_ == *reinterpret_cast<uint16_t*>(buffer_));
2040c8d8:	fdc42783          	lw	a5,-36(s0)
2040c8dc:	0007a683          	lw	a3,0(a5)
2040c8e0:	fdc42783          	lw	a5,-36(s0)
2040c8e4:	0007a783          	lw	a5,0(a5)
2040c8e8:	0007a783          	lw	a5,0(a5)
2040c8ec:	00c78793          	addi	a5,a5,12
2040c8f0:	0007a603          	lw	a2,0(a5)
2040c8f4:	fdc42783          	lw	a5,-36(s0)
2040c8f8:	09c7d703          	lhu	a4,156(a5)
2040c8fc:	fdc42783          	lw	a5,-36(s0)
2040c900:	01178793          	addi	a5,a5,17
2040c904:	0007d783          	lhu	a5,0(a5)
2040c908:	40f707b3          	sub	a5,a4,a5
2040c90c:	0017b793          	seqz	a5,a5
2040c910:	0ff7f793          	andi	a5,a5,255
2040c914:	00078593          	mv	a1,a5
2040c918:	00068513          	mv	a0,a3
2040c91c:	000600e7          	jalr	a2
  ClearBuffer();
2040c920:	fdc42503          	lw	a0,-36(s0)
2040c924:	c99ff0ef          	jal	ra,2040c5bc <_ZN3tvm7runtime9micro_rpc8Unframer11ClearBufferEv>
  state_ = State::kFindPacketStart;
2040c928:	fdc42783          	lw	a5,-36(s0)
2040c92c:	00078223          	sb	zero,4(a5)
  return kTvmErrorNoError;
2040c930:	00000793          	li	a5,0
}
2040c934:	00078513          	mv	a0,a5
2040c938:	02c12083          	lw	ra,44(sp)
2040c93c:	02812403          	lw	s0,40(sp)
2040c940:	03010113          	addi	sp,sp,48
2040c944:	00008067          	ret

2040c948 <_ZN3tvm7runtime9micro_rpc6Framer5ResetEv>:

void Framer::Reset() { state_ = State::kReset; }
2040c948:	fe010113          	addi	sp,sp,-32
2040c94c:	00812e23          	sw	s0,28(sp)
2040c950:	02010413          	addi	s0,sp,32
2040c954:	fea42623          	sw	a0,-20(s0)
2040c958:	fec42783          	lw	a5,-20(s0)
2040c95c:	00078223          	sb	zero,4(a5)
2040c960:	00000013          	nop
2040c964:	01c12403          	lw	s0,28(sp)
2040c968:	02010113          	addi	sp,sp,32
2040c96c:	00008067          	ret

2040c970 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj>:

tvm_crt_error_t Framer::Write(const uint8_t* payload, size_t payload_size_bytes) {
2040c970:	fd010113          	addi	sp,sp,-48
2040c974:	02112623          	sw	ra,44(sp)
2040c978:	02812423          	sw	s0,40(sp)
2040c97c:	03010413          	addi	s0,sp,48
2040c980:	fca42e23          	sw	a0,-36(s0)
2040c984:	fcb42c23          	sw	a1,-40(s0)
2040c988:	fcc42a23          	sw	a2,-44(s0)
  tvm_crt_error_t to_return;
  to_return = StartPacket(payload_size_bytes);
2040c98c:	fd442583          	lw	a1,-44(s0)
2040c990:	fdc42503          	lw	a0,-36(s0)
2040c994:	060000ef          	jal	ra,2040c9f4 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj>
2040c998:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040c99c:	fec42783          	lw	a5,-20(s0)
2040c9a0:	00078663          	beqz	a5,2040c9ac <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x3c>
    return to_return;
2040c9a4:	fec42783          	lw	a5,-20(s0)
2040c9a8:	0380006f          	j	2040c9e0 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x70>
  }

  to_return = WritePayloadChunk(payload, payload_size_bytes);
2040c9ac:	fd442603          	lw	a2,-44(s0)
2040c9b0:	fd842583          	lw	a1,-40(s0)
2040c9b4:	fdc42503          	lw	a0,-36(s0)
2040c9b8:	398000ef          	jal	ra,2040cd50 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>
2040c9bc:	fea42623          	sw	a0,-20(s0)
  if (to_return != 0) {
2040c9c0:	fec42783          	lw	a5,-20(s0)
2040c9c4:	00078663          	beqz	a5,2040c9d0 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x60>
    return to_return;
2040c9c8:	fec42783          	lw	a5,-20(s0)
2040c9cc:	0140006f          	j	2040c9e0 <_ZN3tvm7runtime9micro_rpc6Framer5WriteEPKhj+0x70>
  }

  to_return = FinishPacket();
2040c9d0:	fdc42503          	lw	a0,-36(s0)
2040c9d4:	450000ef          	jal	ra,2040ce24 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>
2040c9d8:	fea42623          	sw	a0,-20(s0)
  return to_return;
2040c9dc:	fec42783          	lw	a5,-20(s0)
}
2040c9e0:	00078513          	mv	a0,a5
2040c9e4:	02c12083          	lw	ra,44(sp)
2040c9e8:	02812403          	lw	s0,40(sp)
2040c9ec:	03010113          	addi	sp,sp,48
2040c9f0:	00008067          	ret

2040c9f4 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj>:

tvm_crt_error_t Framer::StartPacket(size_t payload_size_bytes) {
2040c9f4:	fc010113          	addi	sp,sp,-64
2040c9f8:	02112e23          	sw	ra,60(sp)
2040c9fc:	02812c23          	sw	s0,56(sp)
2040ca00:	04010413          	addi	s0,sp,64
2040ca04:	fca42623          	sw	a0,-52(s0)
2040ca08:	fcb42423          	sw	a1,-56(s0)
  uint8_t packet_header[sizeof(uint32_t)];
  size_t ptr = 0;
2040ca0c:	fe042623          	sw	zero,-20(s0)
  if (state_ == State::kReset) {
2040ca10:	fcc42783          	lw	a5,-52(s0)
2040ca14:	0047c783          	lbu	a5,4(a5)
2040ca18:	06079263          	bnez	a5,2040ca7c <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x88>
    packet_header[ptr] = to_integral(Escape::kEscapeNop);
2040ca1c:	0fe00513          	li	a0,254
2040ca20:	edcff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040ca24:	00050793          	mv	a5,a0
2040ca28:	00078713          	mv	a4,a5
2040ca2c:	fec42783          	lw	a5,-20(s0)
2040ca30:	ff040693          	addi	a3,s0,-16
2040ca34:	00f687b3          	add	a5,a3,a5
2040ca38:	fee78823          	sb	a4,-16(a5)
    ptr++;
2040ca3c:	fec42783          	lw	a5,-20(s0)
2040ca40:	00178793          	addi	a5,a5,1
2040ca44:	fef42623          	sw	a5,-20(s0)
    tvm_crt_error_t to_return =
        WriteAndCrc(packet_header, ptr, false /* escape */, false /* update_crc */);
2040ca48:	fe040793          	addi	a5,s0,-32
2040ca4c:	00000713          	li	a4,0
2040ca50:	00000693          	li	a3,0
2040ca54:	fec42603          	lw	a2,-20(s0)
2040ca58:	00078593          	mv	a1,a5
2040ca5c:	fcc42503          	lw	a0,-52(s0)
2040ca60:	110000ef          	jal	ra,2040cb70 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040ca64:	fea42423          	sw	a0,-24(s0)
    if (to_return != kTvmErrorNoError) {
2040ca68:	fe842783          	lw	a5,-24(s0)
2040ca6c:	00078663          	beqz	a5,2040ca78 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x84>
      return to_return;
2040ca70:	fe842783          	lw	a5,-24(s0)
2040ca74:	0e80006f          	j	2040cb5c <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x168>
    }

    ptr = 0;
2040ca78:	fe042623          	sw	zero,-20(s0)
  }

  packet_header[ptr] = to_integral(Escape::kEscapeStart);
2040ca7c:	0ff00513          	li	a0,255
2040ca80:	e7cff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040ca84:	00050793          	mv	a5,a0
2040ca88:	00078713          	mv	a4,a5
2040ca8c:	fec42783          	lw	a5,-20(s0)
2040ca90:	ff040693          	addi	a3,s0,-16
2040ca94:	00f687b3          	add	a5,a3,a5
2040ca98:	fee78823          	sb	a4,-16(a5)
  ptr++;
2040ca9c:	fec42783          	lw	a5,-20(s0)
2040caa0:	00178793          	addi	a5,a5,1
2040caa4:	fef42623          	sw	a5,-20(s0)
  packet_header[ptr] = to_integral(Escape::kPacketStart);
2040caa8:	0fd00513          	li	a0,253
2040caac:	e50ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040cab0:	00050793          	mv	a5,a0
2040cab4:	00078713          	mv	a4,a5
2040cab8:	fec42783          	lw	a5,-20(s0)
2040cabc:	ff040693          	addi	a3,s0,-16
2040cac0:	00f687b3          	add	a5,a3,a5
2040cac4:	fee78823          	sb	a4,-16(a5)
  ptr++;
2040cac8:	fec42783          	lw	a5,-20(s0)
2040cacc:	00178793          	addi	a5,a5,1
2040cad0:	fef42623          	sw	a5,-20(s0)

  crc_ = 0xffff;
2040cad4:	fcc42783          	lw	a5,-52(s0)
2040cad8:	fff00713          	li	a4,-1
2040cadc:	00e79623          	sh	a4,12(a5)
  tvm_crt_error_t to_return =
      WriteAndCrc(packet_header, ptr, false /* escape */, true /* update_crc */);
2040cae0:	fe040793          	addi	a5,s0,-32
2040cae4:	00100713          	li	a4,1
2040cae8:	00000693          	li	a3,0
2040caec:	fec42603          	lw	a2,-20(s0)
2040caf0:	00078593          	mv	a1,a5
2040caf4:	fcc42503          	lw	a0,-52(s0)
2040caf8:	078000ef          	jal	ra,2040cb70 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040cafc:	fea42223          	sw	a0,-28(s0)
  if (to_return != kTvmErrorNoError) {
2040cb00:	fe442783          	lw	a5,-28(s0)
2040cb04:	00078663          	beqz	a5,2040cb10 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x11c>
    return to_return;
2040cb08:	fe442783          	lw	a5,-28(s0)
2040cb0c:	0500006f          	j	2040cb5c <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x168>
  }

  uint32_t payload_size_wire = payload_size_bytes;
2040cb10:	fc842783          	lw	a5,-56(s0)
2040cb14:	fcf42e23          	sw	a5,-36(s0)
  to_return = WriteAndCrc(reinterpret_cast<uint8_t*>(&payload_size_wire), sizeof(payload_size_wire),
2040cb18:	fdc40793          	addi	a5,s0,-36
2040cb1c:	00100713          	li	a4,1
2040cb20:	00100693          	li	a3,1
2040cb24:	00400613          	li	a2,4
2040cb28:	00078593          	mv	a1,a5
2040cb2c:	fcc42503          	lw	a0,-52(s0)
2040cb30:	040000ef          	jal	ra,2040cb70 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040cb34:	fea42223          	sw	a0,-28(s0)
                          true /* escape */, true /* update_crc */);
  if (to_return == kTvmErrorNoError) {
2040cb38:	fe442783          	lw	a5,-28(s0)
2040cb3c:	00079e63          	bnez	a5,2040cb58 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj+0x164>
    state_ = State::kTransmitPacketPayload;
2040cb40:	fcc42783          	lw	a5,-52(s0)
2040cb44:	00200713          	li	a4,2
2040cb48:	00e78223          	sb	a4,4(a5)
    num_payload_bytes_remaining_ = payload_size_bytes;
2040cb4c:	fcc42783          	lw	a5,-52(s0)
2040cb50:	fc842703          	lw	a4,-56(s0)
2040cb54:	00e7a423          	sw	a4,8(a5)
  }

  return to_return;
2040cb58:	fe442783          	lw	a5,-28(s0)
}
2040cb5c:	00078513          	mv	a0,a5
2040cb60:	03c12083          	lw	ra,60(sp)
2040cb64:	03812403          	lw	s0,56(sp)
2040cb68:	04010113          	addi	sp,sp,64
2040cb6c:	00008067          	ret

2040cb70 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>:

tvm_crt_error_t Framer::WriteAndCrc(const uint8_t* data, size_t data_size_bytes, bool escape,
                                    bool update_crc) {
2040cb70:	f4010113          	addi	sp,sp,-192
2040cb74:	0a112e23          	sw	ra,188(sp)
2040cb78:	0a812c23          	sw	s0,184(sp)
2040cb7c:	0c010413          	addi	s0,sp,192
2040cb80:	f4a42623          	sw	a0,-180(s0)
2040cb84:	f4b42423          	sw	a1,-184(s0)
2040cb88:	f4c42223          	sw	a2,-188(s0)
2040cb8c:	00068793          	mv	a5,a3
2040cb90:	f4f401a3          	sb	a5,-189(s0)
2040cb94:	00070793          	mv	a5,a4
2040cb98:	f4f40123          	sb	a5,-190(s0)

  while (data_size_bytes > 0) {
2040cb9c:	f4442783          	lw	a5,-188(s0)
2040cba0:	18078c63          	beqz	a5,2040cd38 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x1c8>
    uint8_t buffer[kMaxStackBufferSizeBytes];
    size_t buffer_ptr = 0;
2040cba4:	fe042623          	sw	zero,-20(s0)
    size_t i;
    for (i = 0; i < data_size_bytes && buffer_ptr != kMaxStackBufferSizeBytes; ++i) {
2040cba8:	fe042423          	sw	zero,-24(s0)
2040cbac:	fe842703          	lw	a4,-24(s0)
2040cbb0:	f4442783          	lw	a5,-188(s0)
2040cbb4:	0ef77c63          	bleu	a5,a4,2040ccac <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x13c>
2040cbb8:	fec42703          	lw	a4,-20(s0)
2040cbbc:	08000793          	li	a5,128
2040cbc0:	0ef70663          	beq	a4,a5,2040ccac <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x13c>
      uint8_t c = data[i];
2040cbc4:	f4842703          	lw	a4,-184(s0)
2040cbc8:	fe842783          	lw	a5,-24(s0)
2040cbcc:	00f707b3          	add	a5,a4,a5
2040cbd0:	0007c783          	lbu	a5,0(a5)
2040cbd4:	fef403a3          	sb	a5,-25(s0)
      if (!escape || c != to_integral(Escape::kEscapeStart)) {
2040cbd8:	f4344783          	lbu	a5,-189(s0)
2040cbdc:	0017c793          	xori	a5,a5,1
2040cbe0:	0ff7f793          	andi	a5,a5,255
2040cbe4:	00079e63          	bnez	a5,2040cc00 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x90>
2040cbe8:	0ff00513          	li	a0,255
2040cbec:	d10ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040cbf0:	00050793          	mv	a5,a0
2040cbf4:	00078713          	mv	a4,a5
2040cbf8:	fe744783          	lbu	a5,-25(s0)
2040cbfc:	00e78663          	beq	a5,a4,2040cc08 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x98>
2040cc00:	00100793          	li	a5,1
2040cc04:	0080006f          	j	2040cc0c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x9c>
2040cc08:	00000793          	li	a5,0
2040cc0c:	02078463          	beqz	a5,2040cc34 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0xc4>
        buffer[buffer_ptr] = c;
2040cc10:	fec42783          	lw	a5,-20(s0)
2040cc14:	ff040693          	addi	a3,s0,-16
2040cc18:	00f687b3          	add	a5,a3,a5
2040cc1c:	fe744703          	lbu	a4,-25(s0)
2040cc20:	f6e78623          	sb	a4,-148(a5)
        buffer_ptr++;
2040cc24:	fec42783          	lw	a5,-20(s0)
2040cc28:	00178793          	addi	a5,a5,1
2040cc2c:	fef42623          	sw	a5,-20(s0)
        continue;
2040cc30:	0680006f          	j	2040cc98 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x128>
      }

      if (buffer_ptr == kMaxStackBufferSizeBytes - 1) {
2040cc34:	fec42703          	lw	a4,-20(s0)
2040cc38:	07f00793          	li	a5,127
2040cc3c:	06f70663          	beq	a4,a5,2040cca8 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x138>
        break;
      }

      buffer[buffer_ptr] = to_integral(Escape::kEscapeStart);
2040cc40:	0ff00513          	li	a0,255
2040cc44:	cb8ff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040cc48:	00050793          	mv	a5,a0
2040cc4c:	00078713          	mv	a4,a5
2040cc50:	fec42783          	lw	a5,-20(s0)
2040cc54:	ff040693          	addi	a3,s0,-16
2040cc58:	00f687b3          	add	a5,a3,a5
2040cc5c:	f6e78623          	sb	a4,-148(a5)
      buffer_ptr++;
2040cc60:	fec42783          	lw	a5,-20(s0)
2040cc64:	00178793          	addi	a5,a5,1
2040cc68:	fef42623          	sw	a5,-20(s0)

      buffer[buffer_ptr] = to_integral(Escape::kEscapeStart);
2040cc6c:	0ff00513          	li	a0,255
2040cc70:	c8cff0ef          	jal	ra,2040c0fc <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_6EscapeEEEhT_>
2040cc74:	00050793          	mv	a5,a0
2040cc78:	00078713          	mv	a4,a5
2040cc7c:	fec42783          	lw	a5,-20(s0)
2040cc80:	ff040693          	addi	a3,s0,-16
2040cc84:	00f687b3          	add	a5,a3,a5
2040cc88:	f6e78623          	sb	a4,-148(a5)
      buffer_ptr++;
2040cc8c:	fec42783          	lw	a5,-20(s0)
2040cc90:	00178793          	addi	a5,a5,1
2040cc94:	fef42623          	sw	a5,-20(s0)
    for (i = 0; i < data_size_bytes && buffer_ptr != kMaxStackBufferSizeBytes; ++i) {
2040cc98:	fe842783          	lw	a5,-24(s0)
2040cc9c:	00178793          	addi	a5,a5,1
2040cca0:	fef42423          	sw	a5,-24(s0)
2040cca4:	f09ff06f          	j	2040cbac <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x3c>
        break;
2040cca8:	00000013          	nop
    }


    size_t bytes_consumed;
    tvm_crt_error_t to_return = stream_->WriteAll(buffer, buffer_ptr, &bytes_consumed);
2040ccac:	f4c42783          	lw	a5,-180(s0)
2040ccb0:	0007a783          	lw	a5,0(a5)
2040ccb4:	fdc40693          	addi	a3,s0,-36
2040ccb8:	f5c40713          	addi	a4,s0,-164
2040ccbc:	fec42603          	lw	a2,-20(s0)
2040ccc0:	00070593          	mv	a1,a4
2040ccc4:	00078513          	mv	a0,a5
2040ccc8:	030010ef          	jal	ra,2040dcf8 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj>
2040cccc:	fea42023          	sw	a0,-32(s0)
    if (to_return != kTvmErrorNoError) {
2040ccd0:	fe042783          	lw	a5,-32(s0)
2040ccd4:	00078663          	beqz	a5,2040cce0 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x170>
      return to_return;
2040ccd8:	fe042783          	lw	a5,-32(s0)
2040ccdc:	0600006f          	j	2040cd3c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x1cc>
    }

    if (update_crc) {
2040cce0:	f4244783          	lbu	a5,-190(s0)
2040cce4:	02078863          	beqz	a5,2040cd14 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x1a4>
      crc_ = crc16_compute(buffer, buffer_ptr, &crc_);
2040cce8:	f4c42783          	lw	a5,-180(s0)
2040ccec:	00c78713          	addi	a4,a5,12
2040ccf0:	f5c40793          	addi	a5,s0,-164
2040ccf4:	00070613          	mv	a2,a4
2040ccf8:	fec42583          	lw	a1,-20(s0)
2040ccfc:	00078513          	mv	a0,a5
2040cd00:	8e4ff0ef          	jal	ra,2040bde4 <_ZN3tvm7runtime9micro_rpc13crc16_computeEPKhjPt>
2040cd04:	00050793          	mv	a5,a0
2040cd08:	00078713          	mv	a4,a5
2040cd0c:	f4c42783          	lw	a5,-180(s0)
2040cd10:	00e79623          	sh	a4,12(a5)
    }

    data_size_bytes -= i;
2040cd14:	f4442703          	lw	a4,-188(s0)
2040cd18:	fe842783          	lw	a5,-24(s0)
2040cd1c:	40f707b3          	sub	a5,a4,a5
2040cd20:	f4f42223          	sw	a5,-188(s0)
    data += i;
2040cd24:	f4842703          	lw	a4,-184(s0)
2040cd28:	fe842783          	lw	a5,-24(s0)
2040cd2c:	00f707b3          	add	a5,a4,a5
2040cd30:	f4f42423          	sw	a5,-184(s0)
  while (data_size_bytes > 0) {
2040cd34:	e69ff06f          	j	2040cb9c <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb+0x2c>
  }

  return kTvmErrorNoError;
2040cd38:	00000793          	li	a5,0
}
2040cd3c:	00078513          	mv	a0,a5
2040cd40:	0bc12083          	lw	ra,188(sp)
2040cd44:	0b812403          	lw	s0,184(sp)
2040cd48:	0c010113          	addi	sp,sp,192
2040cd4c:	00008067          	ret

2040cd50 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>:

tvm_crt_error_t Framer::WritePayloadChunk(const uint8_t* payload_chunk,
                                          size_t payload_chunk_size_bytes) {
2040cd50:	fd010113          	addi	sp,sp,-48
2040cd54:	02112623          	sw	ra,44(sp)
2040cd58:	02812423          	sw	s0,40(sp)
2040cd5c:	03010413          	addi	s0,sp,48
2040cd60:	fca42e23          	sw	a0,-36(s0)
2040cd64:	fcb42c23          	sw	a1,-40(s0)
2040cd68:	fcc42a23          	sw	a2,-44(s0)
  if (state_ != State::kTransmitPacketPayload) {
2040cd6c:	fdc42783          	lw	a5,-36(s0)
2040cd70:	0047c703          	lbu	a4,4(a5)
2040cd74:	00200793          	li	a5,2
2040cd78:	00f70663          	beq	a4,a5,2040cd84 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x34>
    return kTvmErrorFramingInvalidState;
2040cd7c:	20000793          	li	a5,512
2040cd80:	0900006f          	j	2040ce10 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0xc0>
  } else if (payload_chunk_size_bytes > num_payload_bytes_remaining_) {
2040cd84:	fdc42783          	lw	a5,-36(s0)
2040cd88:	0087a783          	lw	a5,8(a5)
2040cd8c:	fd442703          	lw	a4,-44(s0)
2040cd90:	00e7f663          	bleu	a4,a5,2040cd9c <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0x4c>
    return kTvmErrorFramingPayloadOverflow;
2040cd94:	20300793          	li	a5,515
2040cd98:	0780006f          	j	2040ce10 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0xc0>
  }

  TVM_FRAMER_DEBUG_LOG("write payload chunk: %" PRIuMAX " bytes", payload_chunk_size_bytes);
2040cd9c:	5fbf4797          	auipc	a5,0x5fbf4
2040cda0:	c9c78793          	addi	a5,a5,-868 # 80000a38 <_impure_ptr>
2040cda4:	0007a783          	lw	a5,0(a5)
2040cda8:	00c7a783          	lw	a5,12(a5)
2040cdac:	fd442603          	lw	a2,-44(s0)
2040cdb0:	00014597          	auipc	a1,0x14
2040cdb4:	71c58593          	addi	a1,a1,1820 # 204214cc <crc_tabccitt+0x334>
2040cdb8:	00078513          	mv	a0,a5
2040cdbc:	532060ef          	jal	ra,204132ee <fprintf>
  tvm_crt_error_t to_return = WriteAndCrc(payload_chunk, payload_chunk_size_bytes,
                                          true /* escape */, true /* update_crc */);
2040cdc0:	00100713          	li	a4,1
2040cdc4:	00100693          	li	a3,1
2040cdc8:	fd442603          	lw	a2,-44(s0)
2040cdcc:	fd842583          	lw	a1,-40(s0)
2040cdd0:	fdc42503          	lw	a0,-36(s0)
2040cdd4:	d9dff0ef          	jal	ra,2040cb70 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040cdd8:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040cddc:	fec42783          	lw	a5,-20(s0)
2040cde0:	00078a63          	beqz	a5,2040cdf4 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0xa4>
    state_ = State::kReset;
2040cde4:	fdc42783          	lw	a5,-36(s0)
2040cde8:	00078223          	sb	zero,4(a5)
    return to_return;
2040cdec:	fec42783          	lw	a5,-20(s0)
2040cdf0:	0200006f          	j	2040ce10 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj+0xc0>
  }

  num_payload_bytes_remaining_ -= payload_chunk_size_bytes;
2040cdf4:	fdc42783          	lw	a5,-36(s0)
2040cdf8:	0087a703          	lw	a4,8(a5)
2040cdfc:	fd442783          	lw	a5,-44(s0)
2040ce00:	40f70733          	sub	a4,a4,a5
2040ce04:	fdc42783          	lw	a5,-36(s0)
2040ce08:	00e7a423          	sw	a4,8(a5)
  return kTvmErrorNoError;
2040ce0c:	00000793          	li	a5,0
}
2040ce10:	00078513          	mv	a0,a5
2040ce14:	02c12083          	lw	ra,44(sp)
2040ce18:	02812403          	lw	s0,40(sp)
2040ce1c:	03010113          	addi	sp,sp,48
2040ce20:	00008067          	ret

2040ce24 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>:

tvm_crt_error_t Framer::FinishPacket() {
2040ce24:	fd010113          	addi	sp,sp,-48
2040ce28:	02112623          	sw	ra,44(sp)
2040ce2c:	02812423          	sw	s0,40(sp)
2040ce30:	03010413          	addi	s0,sp,48
2040ce34:	fca42e23          	sw	a0,-36(s0)
  if (state_ != State::kTransmitPacketPayload) {
2040ce38:	fdc42783          	lw	a5,-36(s0)
2040ce3c:	0047c703          	lbu	a4,4(a5)
2040ce40:	00200793          	li	a5,2
2040ce44:	00f70663          	beq	a4,a5,2040ce50 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x2c>
    return kTvmErrorFramingInvalidState;
2040ce48:	20000793          	li	a5,512
2040ce4c:	0880006f          	j	2040ced4 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0xb0>
  } else if (num_payload_bytes_remaining_ != 0) {
2040ce50:	fdc42783          	lw	a5,-36(s0)
2040ce54:	0087a783          	lw	a5,8(a5)
2040ce58:	00078663          	beqz	a5,2040ce64 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0x40>
    return kTvmErrorFramingPayloadIncomplete;
2040ce5c:	20400793          	li	a5,516
2040ce60:	0740006f          	j	2040ced4 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0xb0>
  }

  tvm_crt_error_t to_return = WriteAndCrc(reinterpret_cast<uint8_t*>(&crc_), sizeof(crc_),
2040ce64:	fdc42783          	lw	a5,-36(s0)
2040ce68:	00c78793          	addi	a5,a5,12
                                          true /* escape */, false /* update_crc */);
2040ce6c:	00000713          	li	a4,0
2040ce70:	00100693          	li	a3,1
2040ce74:	00200613          	li	a2,2
2040ce78:	00078593          	mv	a1,a5
2040ce7c:	fdc42503          	lw	a0,-36(s0)
2040ce80:	cf1ff0ef          	jal	ra,2040cb70 <_ZN3tvm7runtime9micro_rpc6Framer11WriteAndCrcEPKhjbb>
2040ce84:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040ce88:	fec42783          	lw	a5,-20(s0)
2040ce8c:	02078c63          	beqz	a5,2040cec4 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0xa0>
    TVM_FRAMER_DEBUG_LOG("write and crc returned: %02x", to_return);
2040ce90:	5fbf4797          	auipc	a5,0x5fbf4
2040ce94:	ba878793          	addi	a5,a5,-1112 # 80000a38 <_impure_ptr>
2040ce98:	0007a783          	lw	a5,0(a5)
2040ce9c:	00c7a783          	lw	a5,12(a5)
2040cea0:	fec42703          	lw	a4,-20(s0)
2040cea4:	00070613          	mv	a2,a4
2040cea8:	00014597          	auipc	a1,0x14
2040ceac:	65858593          	addi	a1,a1,1624 # 20421500 <crc_tabccitt+0x368>
2040ceb0:	00078513          	mv	a0,a5
2040ceb4:	43a060ef          	jal	ra,204132ee <fprintf>
    state_ = State::kReset;
2040ceb8:	fdc42783          	lw	a5,-36(s0)
2040cebc:	00078223          	sb	zero,4(a5)
2040cec0:	0100006f          	j	2040ced0 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv+0xac>
  } else {
    state_ = State::kIdle;
2040cec4:	fdc42783          	lw	a5,-36(s0)
2040cec8:	00100713          	li	a4,1
2040cecc:	00e78223          	sb	a4,4(a5)
  }
  return to_return;
2040ced0:	fec42783          	lw	a5,-20(s0)
}
2040ced4:	00078513          	mv	a0,a5
2040ced8:	02c12083          	lw	ra,44(sp)
2040cedc:	02812403          	lw	s0,40(sp)
2040cee0:	03010113          	addi	sp,sp,48
2040cee4:	00008067          	ret

2040cee8 <_ZN3tvm7runtime9micro_rpcL11to_integralINS1_8Unframer5StateEEEhT_>:
static constexpr uint8_t to_integral(E e) {
2040cee8:	fe010113          	addi	sp,sp,-32
2040ceec:	00812e23          	sw	s0,28(sp)
2040cef0:	02010413          	addi	s0,sp,32
2040cef4:	00050793          	mv	a5,a0
2040cef8:	fef407a3          	sb	a5,-17(s0)
  return static_cast<uint8_t>(e);
2040cefc:	fef44783          	lbu	a5,-17(s0)
}
2040cf00:	00078513          	mv	a0,a5
2040cf04:	01c12403          	lw	s0,28(sp)
2040cf08:	02010113          	addi	sp,sp,32
2040cf0c:	00008067          	ret

2040cf10 <_ZN3tvm7runtime9micro_rpc8Unframer12IsBufferFullEj>:
  tvm_crt_error_t FindPacketStart();
  tvm_crt_error_t FindPacketLength();
  tvm_crt_error_t FindPacketCrc();
  tvm_crt_error_t FindCrcEnd();

  bool IsBufferFull(size_t buffer_full_bytes) {
2040cf10:	fe010113          	addi	sp,sp,-32
2040cf14:	00812e23          	sw	s0,28(sp)
2040cf18:	02010413          	addi	s0,sp,32
2040cf1c:	fea42623          	sw	a0,-20(s0)
2040cf20:	feb42423          	sw	a1,-24(s0)
    return num_buffer_bytes_valid_ >= buffer_full_bytes;
2040cf24:	fec42783          	lw	a5,-20(s0)
2040cf28:	0947a783          	lw	a5,148(a5)
2040cf2c:	fe842703          	lw	a4,-24(s0)
2040cf30:	00e7b7b3          	sltu	a5,a5,a4
2040cf34:	0017c793          	xori	a5,a5,1
2040cf38:	0ff7f793          	andi	a5,a5,255
  }
2040cf3c:	00078513          	mv	a0,a5
2040cf40:	01c12403          	lw	s0,28(sp)
2040cf44:	02010113          	addi	sp,sp,32
2040cf48:	00008067          	ret

2040cf4c <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv>:

struct microtvm_session_start_payload_t {
  uint8_t version;
};

void Session::RegenerateNonce() {
2040cf4c:	fe010113          	addi	sp,sp,-32
2040cf50:	00812e23          	sw	s0,28(sp)
2040cf54:	02010413          	addi	s0,sp,32
2040cf58:	fea42623          	sw	a0,-20(s0)
  local_nonce_ = (((local_nonce_ << 5) | (local_nonce_ >> 5)) + 1);
2040cf5c:	fec42783          	lw	a5,-20(s0)
2040cf60:	0007c783          	lbu	a5,0(a5)
2040cf64:	00579793          	slli	a5,a5,0x5
2040cf68:	01879713          	slli	a4,a5,0x18
2040cf6c:	41875713          	srai	a4,a4,0x18
2040cf70:	fec42783          	lw	a5,-20(s0)
2040cf74:	0007c783          	lbu	a5,0(a5)
2040cf78:	4057d793          	srai	a5,a5,0x5
2040cf7c:	01879793          	slli	a5,a5,0x18
2040cf80:	4187d793          	srai	a5,a5,0x18
2040cf84:	00f767b3          	or	a5,a4,a5
2040cf88:	01879793          	slli	a5,a5,0x18
2040cf8c:	4187d793          	srai	a5,a5,0x18
2040cf90:	0ff7f793          	andi	a5,a5,255
2040cf94:	00178793          	addi	a5,a5,1
2040cf98:	0ff7f713          	andi	a4,a5,255
2040cf9c:	fec42783          	lw	a5,-20(s0)
2040cfa0:	00e78023          	sb	a4,0(a5)

  if (local_nonce_ == kInvalidNonce) {
2040cfa4:	fec42783          	lw	a5,-20(s0)
2040cfa8:	0007c783          	lbu	a5,0(a5)
2040cfac:	00079e63          	bnez	a5,2040cfc8 <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv+0x7c>
    local_nonce_++;
2040cfb0:	fec42783          	lw	a5,-20(s0)
2040cfb4:	0007c783          	lbu	a5,0(a5)
2040cfb8:	00178793          	addi	a5,a5,1
2040cfbc:	0ff7f713          	andi	a4,a5,255
2040cfc0:	fec42783          	lw	a5,-20(s0)
2040cfc4:	00e78023          	sb	a4,0(a5)
  }
}
2040cfc8:	00000013          	nop
2040cfcc:	01c12403          	lw	s0,28(sp)
2040cfd0:	02010113          	addi	sp,sp,32
2040cfd4:	00008067          	ret

2040cfd8 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>:

tvm_crt_error_t Session::SendInternal(MessageType message_type, const uint8_t* message_data,
                                      size_t message_size_bytes) {
2040cfd8:	fd010113          	addi	sp,sp,-48
2040cfdc:	02112623          	sw	ra,44(sp)
2040cfe0:	02812423          	sw	s0,40(sp)
2040cfe4:	03010413          	addi	s0,sp,48
2040cfe8:	fca42e23          	sw	a0,-36(s0)
2040cfec:	00058793          	mv	a5,a1
2040cff0:	fcc42a23          	sw	a2,-44(s0)
2040cff4:	fcd42823          	sw	a3,-48(s0)
2040cff8:	fcf40da3          	sb	a5,-37(s0)

  tvm_crt_error_t to_return = StartMessage(message_type, message_size_bytes);
2040cffc:	fdb44783          	lbu	a5,-37(s0)
2040d000:	fd042603          	lw	a2,-48(s0)
2040d004:	00078593          	mv	a1,a5
2040d008:	fdc42503          	lw	a0,-36(s0)
2040d00c:	06c000ef          	jal	ra,2040d078 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj>
2040d010:	fea42623          	sw	a0,-20(s0)
  if (to_return != kTvmErrorNoError) {
2040d014:	fec42783          	lw	a5,-20(s0)
2040d018:	00078663          	beqz	a5,2040d024 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x4c>
    return to_return;
2040d01c:	fec42783          	lw	a5,-20(s0)
2040d020:	0440006f          	j	2040d064 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x8c>
  }

  if (message_size_bytes > 0) {
2040d024:	fd042783          	lw	a5,-48(s0)
2040d028:	02078463          	beqz	a5,2040d050 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x78>
    to_return = SendBodyChunk(message_data, message_size_bytes);
2040d02c:	fd042603          	lw	a2,-48(s0)
2040d030:	fd442583          	lw	a1,-44(s0)
2040d034:	fdc42503          	lw	a0,-36(s0)
2040d038:	0e8000ef          	jal	ra,2040d120 <_ZN3tvm7runtime9micro_rpc7Session13SendBodyChunkEPKhj>
2040d03c:	fea42623          	sw	a0,-20(s0)
    if (to_return != kTvmErrorNoError) {
2040d040:	fec42783          	lw	a5,-20(s0)
2040d044:	00078663          	beqz	a5,2040d050 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x78>
      return to_return;
2040d048:	fec42783          	lw	a5,-20(s0)
2040d04c:	0180006f          	j	2040d064 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj+0x8c>
    }
  }
  return framer_->FinishPacket();
2040d050:	fdc42783          	lw	a5,-36(s0)
2040d054:	0107a783          	lw	a5,16(a5)
2040d058:	00078513          	mv	a0,a5
2040d05c:	dc9ff0ef          	jal	ra,2040ce24 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>
2040d060:	00050793          	mv	a5,a0
}
2040d064:	00078513          	mv	a0,a5
2040d068:	02c12083          	lw	ra,44(sp)
2040d06c:	02812403          	lw	s0,40(sp)
2040d070:	03010113          	addi	sp,sp,48
2040d074:	00008067          	ret

2040d078 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj>:


tvm_crt_error_t Session::StartMessage(MessageType message_type, size_t message_size_bytes) {
2040d078:	fd010113          	addi	sp,sp,-48
2040d07c:	02112623          	sw	ra,44(sp)
2040d080:	02812423          	sw	s0,40(sp)
2040d084:	03010413          	addi	s0,sp,48
2040d088:	fca42e23          	sw	a0,-36(s0)
2040d08c:	00058793          	mv	a5,a1
2040d090:	fcc42a23          	sw	a2,-44(s0)
2040d094:	fcf40da3          	sb	a5,-37(s0)

  SessionHeader header{session_id_, message_type};
2040d098:	fdc42783          	lw	a5,-36(s0)
2040d09c:	0027d783          	lhu	a5,2(a5)
2040d0a0:	fef41423          	sh	a5,-24(s0)
2040d0a4:	fdb44783          	lbu	a5,-37(s0)
2040d0a8:	fef40523          	sb	a5,-22(s0)
  if (message_type == MessageType::kLog) {
2040d0ac:	fdb44703          	lbu	a4,-37(s0)
2040d0b0:	00300793          	li	a5,3
2040d0b4:	00f71463          	bne	a4,a5,2040d0bc <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj+0x44>
    header.session_id = 0;
2040d0b8:	fe041423          	sh	zero,-24(s0)
  }

  tvm_crt_error_t to_return = framer_->StartPacket(message_size_bytes + sizeof(SessionHeader));
2040d0bc:	fdc42783          	lw	a5,-36(s0)
2040d0c0:	0107a703          	lw	a4,16(a5)
2040d0c4:	fd442783          	lw	a5,-44(s0)
2040d0c8:	00378793          	addi	a5,a5,3
2040d0cc:	00078593          	mv	a1,a5
2040d0d0:	00070513          	mv	a0,a4
2040d0d4:	921ff0ef          	jal	ra,2040c9f4 <_ZN3tvm7runtime9micro_rpc6Framer11StartPacketEj>
2040d0d8:	fea42623          	sw	a0,-20(s0)
  if (to_return != 0) {
2040d0dc:	fec42783          	lw	a5,-20(s0)
2040d0e0:	00078663          	beqz	a5,2040d0ec <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj+0x74>
    return to_return;
2040d0e4:	fec42783          	lw	a5,-20(s0)
2040d0e8:	0240006f          	j	2040d10c <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj+0x94>
  }

  return framer_->WritePayloadChunk(reinterpret_cast<uint8_t*>(&header), sizeof(SessionHeader));
2040d0ec:	fdc42783          	lw	a5,-36(s0)
2040d0f0:	0107a783          	lw	a5,16(a5)
2040d0f4:	fe840713          	addi	a4,s0,-24
2040d0f8:	00300613          	li	a2,3
2040d0fc:	00070593          	mv	a1,a4
2040d100:	00078513          	mv	a0,a5
2040d104:	c4dff0ef          	jal	ra,2040cd50 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>
2040d108:	00050793          	mv	a5,a0
}
2040d10c:	00078513          	mv	a0,a5
2040d110:	02c12083          	lw	ra,44(sp)
2040d114:	02812403          	lw	s0,40(sp)
2040d118:	03010113          	addi	sp,sp,48
2040d11c:	00008067          	ret

2040d120 <_ZN3tvm7runtime9micro_rpc7Session13SendBodyChunkEPKhj>:

tvm_crt_error_t Session::SendBodyChunk(const uint8_t* chunk, size_t chunk_size_bytes) {
2040d120:	fe010113          	addi	sp,sp,-32
2040d124:	00112e23          	sw	ra,28(sp)
2040d128:	00812c23          	sw	s0,24(sp)
2040d12c:	02010413          	addi	s0,sp,32
2040d130:	fea42623          	sw	a0,-20(s0)
2040d134:	feb42423          	sw	a1,-24(s0)
2040d138:	fec42223          	sw	a2,-28(s0)
  return framer_->WritePayloadChunk(chunk, chunk_size_bytes);
2040d13c:	fec42783          	lw	a5,-20(s0)
2040d140:	0107a783          	lw	a5,16(a5)
2040d144:	fe442603          	lw	a2,-28(s0)
2040d148:	fe842583          	lw	a1,-24(s0)
2040d14c:	00078513          	mv	a0,a5
2040d150:	c01ff0ef          	jal	ra,2040cd50 <_ZN3tvm7runtime9micro_rpc6Framer17WritePayloadChunkEPKhj>
2040d154:	00050793          	mv	a5,a0
}
2040d158:	00078513          	mv	a0,a5
2040d15c:	01c12083          	lw	ra,28(sp)
2040d160:	01812403          	lw	s0,24(sp)
2040d164:	02010113          	addi	sp,sp,32
2040d168:	00008067          	ret

2040d16c <_ZN3tvm7runtime9micro_rpc7Session13FinishMessageEv>:

tvm_crt_error_t Session::FinishMessage() { return framer_->FinishPacket(); }
2040d16c:	fe010113          	addi	sp,sp,-32
2040d170:	00112e23          	sw	ra,28(sp)
2040d174:	00812c23          	sw	s0,24(sp)
2040d178:	02010413          	addi	s0,sp,32
2040d17c:	fea42623          	sw	a0,-20(s0)
2040d180:	fec42783          	lw	a5,-20(s0)
2040d184:	0107a783          	lw	a5,16(a5)
2040d188:	00078513          	mv	a0,a5
2040d18c:	c99ff0ef          	jal	ra,2040ce24 <_ZN3tvm7runtime9micro_rpc6Framer12FinishPacketEv>
2040d190:	00050793          	mv	a5,a0
2040d194:	00078513          	mv	a0,a5
2040d198:	01c12083          	lw	ra,28(sp)
2040d19c:	01812403          	lw	s0,24(sp)
2040d1a0:	02010113          	addi	sp,sp,32
2040d1a4:	00008067          	ret

2040d1a8 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv>:

tvm_crt_error_t Session::StartSession() {
2040d1a8:	fd010113          	addi	sp,sp,-48
2040d1ac:	02112623          	sw	ra,44(sp)
2040d1b0:	02812423          	sw	s0,40(sp)
2040d1b4:	03010413          	addi	s0,sp,48
2040d1b8:	fca42e23          	sw	a0,-36(s0)
  CHECK_NE(state_, State::kReset, "must call Initialize");
2040d1bc:	fdc42783          	lw	a5,-36(s0)
2040d1c0:	0047c783          	lbu	a5,4(a5)
2040d1c4:	02079a63          	bnez	a5,2040d1f8 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv+0x50>
2040d1c8:	00014717          	auipc	a4,0x14
2040d1cc:	36870713          	addi	a4,a4,872 # 20421530 <crc_tabccitt+0x398>
2040d1d0:	00014697          	auipc	a3,0x14
2040d1d4:	37068693          	addi	a3,a3,880 # 20421540 <crc_tabccitt+0x3a8>
2040d1d8:	00014617          	auipc	a2,0x14
2040d1dc:	36c60613          	addi	a2,a2,876 # 20421544 <crc_tabccitt+0x3ac>
2040d1e0:	05600593          	li	a1,86
2040d1e4:	00014517          	auipc	a0,0x14
2040d1e8:	36850513          	addi	a0,a0,872 # 2042154c <crc_tabccitt+0x3b4>
2040d1ec:	551000ef          	jal	ra,2040df3c <TVMLogf>
2040d1f0:	50000513          	li	a0,1280
2040d1f4:	a89f30ef          	jal	ra,20400c7c <TVMPlatformAbort>

  RegenerateNonce();
2040d1f8:	fdc42503          	lw	a0,-36(s0)
2040d1fc:	d51ff0ef          	jal	ra,2040cf4c <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv>
  SetSessionId(local_nonce_, 0);
2040d200:	fdc42783          	lw	a5,-36(s0)
2040d204:	0007c783          	lbu	a5,0(a5)
2040d208:	00000613          	li	a2,0
2040d20c:	00078593          	mv	a1,a5
2040d210:	fdc42503          	lw	a0,-36(s0)
2040d214:	1a5000ef          	jal	ra,2040dbb8 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
  microtvm_session_start_payload_t payload = {Session::kVersion};
2040d218:	00100793          	li	a5,1
2040d21c:	fef40423          	sb	a5,-24(s0)
  tvm_crt_error_t to_return = SendInternal(MessageType::kStartSessionInit,
                                           reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d220:	fe840793          	addi	a5,s0,-24
2040d224:	00100693          	li	a3,1
2040d228:	00078613          	mv	a2,a5
2040d22c:	00000593          	li	a1,0
2040d230:	fdc42503          	lw	a0,-36(s0)
2040d234:	da5ff0ef          	jal	ra,2040cfd8 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040d238:	fea42623          	sw	a0,-20(s0)
  if (to_return == 0) {
2040d23c:	fec42783          	lw	a5,-20(s0)
2040d240:	00079863          	bnez	a5,2040d250 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv+0xa8>
    state_ = State::kStartSessionSent;
2040d244:	fdc42783          	lw	a5,-36(s0)
2040d248:	00200713          	li	a4,2
2040d24c:	00e78223          	sb	a4,4(a5)
  }

  return to_return;
2040d250:	fec42783          	lw	a5,-20(s0)
}
2040d254:	00078513          	mv	a0,a5
2040d258:	02c12083          	lw	ra,44(sp)
2040d25c:	02812403          	lw	s0,40(sp)
2040d260:	03010113          	addi	sp,sp,48
2040d264:	00008067          	ret

2040d268 <_ZN3tvm7runtime9micro_rpc7Session10InitializeEh>:

tvm_crt_error_t Session::Initialize(uint8_t initial_session_nonce) {
2040d268:	fe010113          	addi	sp,sp,-32
2040d26c:	00112e23          	sw	ra,28(sp)
2040d270:	00812c23          	sw	s0,24(sp)
2040d274:	02010413          	addi	s0,sp,32
2040d278:	fea42623          	sw	a0,-20(s0)
2040d27c:	00058793          	mv	a5,a1
2040d280:	fef405a3          	sb	a5,-21(s0)
  local_nonce_ = initial_session_nonce;
2040d284:	fec42783          	lw	a5,-20(s0)
2040d288:	feb44703          	lbu	a4,-21(s0)
2040d28c:	00e78023          	sb	a4,0(a5)
  return TerminateSession();
2040d290:	fec42503          	lw	a0,-20(s0)
2040d294:	01c000ef          	jal	ra,2040d2b0 <_ZN3tvm7runtime9micro_rpc7Session16TerminateSessionEv>
2040d298:	00050793          	mv	a5,a0
}
2040d29c:	00078513          	mv	a0,a5
2040d2a0:	01c12083          	lw	ra,28(sp)
2040d2a4:	01812403          	lw	s0,24(sp)
2040d2a8:	02010113          	addi	sp,sp,32
2040d2ac:	00008067          	ret

2040d2b0 <_ZN3tvm7runtime9micro_rpc7Session16TerminateSessionEv>:

tvm_crt_error_t Session::TerminateSession() {
2040d2b0:	fe010113          	addi	sp,sp,-32
2040d2b4:	00112e23          	sw	ra,28(sp)
2040d2b8:	00812c23          	sw	s0,24(sp)
2040d2bc:	02010413          	addi	s0,sp,32
2040d2c0:	fea42623          	sw	a0,-20(s0)
  SetSessionId(0, 0);
2040d2c4:	00000613          	li	a2,0
2040d2c8:	00000593          	li	a1,0
2040d2cc:	fec42503          	lw	a0,-20(s0)
2040d2d0:	0e9000ef          	jal	ra,2040dbb8 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
  state_ = State::kNoSessionEstablished;
2040d2d4:	fec42783          	lw	a5,-20(s0)
2040d2d8:	00100713          	li	a4,1
2040d2dc:	00e78223          	sb	a4,4(a5)
  return SendInternal(MessageType::kTerminateSession, nullptr, 0);
2040d2e0:	00000693          	li	a3,0
2040d2e4:	00000613          	li	a2,0
2040d2e8:	00200593          	li	a1,2
2040d2ec:	fec42503          	lw	a0,-20(s0)
2040d2f0:	ce9ff0ef          	jal	ra,2040cfd8 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040d2f4:	00050793          	mv	a5,a0
}
2040d2f8:	00078513          	mv	a0,a5
2040d2fc:	01c12083          	lw	ra,28(sp)
2040d300:	01812403          	lw	s0,24(sp)
2040d304:	02010113          	addi	sp,sp,32
2040d308:	00008067          	ret

2040d30c <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj>:

tvm_crt_error_t Session::SendMessage(MessageType message_type, const uint8_t* message_data,
                                     size_t message_size_bytes) {
2040d30c:	fe010113          	addi	sp,sp,-32
2040d310:	00112e23          	sw	ra,28(sp)
2040d314:	00812c23          	sw	s0,24(sp)
2040d318:	02010413          	addi	s0,sp,32
2040d31c:	fea42623          	sw	a0,-20(s0)
2040d320:	00058793          	mv	a5,a1
2040d324:	fec42223          	sw	a2,-28(s0)
2040d328:	fed42023          	sw	a3,-32(s0)
2040d32c:	fef405a3          	sb	a5,-21(s0)
  if (state_ != State::kSessionEstablished && message_type != MessageType::kLog) {
2040d330:	fec42783          	lw	a5,-20(s0)
2040d334:	0047c703          	lbu	a4,4(a5)
2040d338:	00300793          	li	a5,3
2040d33c:	00f70c63          	beq	a4,a5,2040d354 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj+0x48>
2040d340:	feb44703          	lbu	a4,-21(s0)
2040d344:	00300793          	li	a5,3
2040d348:	00f70663          	beq	a4,a5,2040d354 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj+0x48>
    return kTvmErrorSessionInvalidState;
2040d34c:	40000793          	li	a5,1024
2040d350:	0200006f          	j	2040d370 <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj+0x64>
  }

  return SendInternal(message_type, message_data, message_size_bytes);
2040d354:	feb44783          	lbu	a5,-21(s0)
2040d358:	fe042683          	lw	a3,-32(s0)
2040d35c:	fe442603          	lw	a2,-28(s0)
2040d360:	00078593          	mv	a1,a5
2040d364:	fec42503          	lw	a0,-20(s0)
2040d368:	c71ff0ef          	jal	ra,2040cfd8 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040d36c:	00050793          	mv	a5,a0
}
2040d370:	00078513          	mv	a0,a5
2040d374:	01c12083          	lw	ra,28(sp)
2040d378:	01812403          	lw	s0,24(sp)
2040d37c:	02010113          	addi	sp,sp,32
2040d380:	00008067          	ret

2040d384 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj>:

ssize_t Session::SessionReceiver::Write(const uint8_t* data, size_t data_size_bytes) {
2040d384:	fd010113          	addi	sp,sp,-48
2040d388:	02112623          	sw	ra,44(sp)
2040d38c:	02812423          	sw	s0,40(sp)
2040d390:	03010413          	addi	s0,sp,48
2040d394:	fca42e23          	sw	a0,-36(s0)
2040d398:	fcb42c23          	sw	a1,-40(s0)
2040d39c:	fcc42a23          	sw	a2,-44(s0)
  if (session_->receive_buffer_has_complete_message_) {
2040d3a0:	fdc42783          	lw	a5,-36(s0)
2040d3a4:	0047a783          	lw	a5,4(a5)
2040d3a8:	0187c783          	lbu	a5,24(a5)
2040d3ac:	00078663          	beqz	a5,2040d3b8 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x34>
    return kTvmErrorSessionReceiveBufferBusy;
2040d3b0:	40100793          	li	a5,1025
2040d3b4:	03c0006f          	j	2040d3f0 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x6c>
  }

  size_t bytes_written = session_->receive_buffer_->Write(data, data_size_bytes);
2040d3b8:	fdc42783          	lw	a5,-36(s0)
2040d3bc:	0047a783          	lw	a5,4(a5)
2040d3c0:	0147a783          	lw	a5,20(a5)
2040d3c4:	fd442603          	lw	a2,-44(s0)
2040d3c8:	fd842583          	lw	a1,-40(s0)
2040d3cc:	00078513          	mv	a0,a5
2040d3d0:	89dfe0ef          	jal	ra,2040bc6c <_ZN3tvm7runtime9micro_rpc11FrameBuffer5WriteEPKhj>
2040d3d4:	fea42623          	sw	a0,-20(s0)
  if (bytes_written != data_size_bytes) {
2040d3d8:	fec42703          	lw	a4,-20(s0)
2040d3dc:	fd442783          	lw	a5,-44(s0)
2040d3e0:	00f70663          	beq	a4,a5,2040d3ec <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x68>
    return kTvmErrorSessionReceiveBufferShortWrite;
2040d3e4:	40200793          	li	a5,1026
2040d3e8:	0080006f          	j	2040d3f0 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver5WriteEPKhj+0x6c>
  }

  return bytes_written;
2040d3ec:	fec42783          	lw	a5,-20(s0)
}
2040d3f0:	00078513          	mv	a0,a5
2040d3f4:	02c12083          	lw	ra,44(sp)
2040d3f8:	02812403          	lw	s0,40(sp)
2040d3fc:	03010113          	addi	sp,sp,48
2040d400:	00008067          	ret

2040d404 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb>:

void Session::SessionReceiver::PacketDone(bool is_valid) {
2040d404:	fd010113          	addi	sp,sp,-48
2040d408:	02112623          	sw	ra,44(sp)
2040d40c:	02812423          	sw	s0,40(sp)
2040d410:	03010413          	addi	s0,sp,48
2040d414:	fca42e23          	sw	a0,-36(s0)
2040d418:	00058793          	mv	a5,a1
2040d41c:	fcf40da3          	sb	a5,-37(s0)
  if (!is_valid) {
2040d420:	fdb44783          	lbu	a5,-37(s0)
2040d424:	0017c793          	xori	a5,a5,1
2040d428:	0ff7f793          	andi	a5,a5,255
2040d42c:	1c079263          	bnez	a5,2040d5f0 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1ec>
    return;
  }

  SessionHeader header;
  int bytes_read =
      session_->receive_buffer_->Read(reinterpret_cast<uint8_t*>(&header), sizeof(header));
2040d430:	fdc42783          	lw	a5,-36(s0)
2040d434:	0047a783          	lw	a5,4(a5)
2040d438:	0147a783          	lw	a5,20(a5)
2040d43c:	fe840713          	addi	a4,s0,-24
2040d440:	00300613          	li	a2,3
2040d444:	00070593          	mv	a1,a4
2040d448:	00078513          	mv	a0,a5
2040d44c:	8c5fe0ef          	jal	ra,2040bd10 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040d450:	00050793          	mv	a5,a0
2040d454:	fef42623          	sw	a5,-20(s0)
  if (bytes_read != sizeof(header)) {
2040d458:	fec42703          	lw	a4,-20(s0)
2040d45c:	00300793          	li	a5,3
2040d460:	18f71c63          	bne	a4,a5,2040d5f8 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1f4>
    return;
  }
  session_->receive_buffer_has_complete_message_ = true;
2040d464:	fdc42783          	lw	a5,-36(s0)
2040d468:	0047a783          	lw	a5,4(a5)
2040d46c:	00100713          	li	a4,1
2040d470:	00e78c23          	sb	a4,24(a5)

  switch (header.message_type) {
2040d474:	fea44783          	lbu	a5,-22(s0)
2040d478:	00100713          	li	a4,1
2040d47c:	04e78463          	beq	a5,a4,2040d4c4 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0xc0>
2040d480:	00100713          	li	a4,1
2040d484:	00e7ec63          	bltu	a5,a4,2040d49c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x98>
2040d488:	00200713          	li	a4,2
2040d48c:	06e78063          	beq	a5,a4,2040d4ec <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0xe8>
2040d490:	00300713          	li	a4,3
2040d494:	08e78e63          	beq	a5,a4,2040d530 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x12c>
2040d498:	0f00006f          	j	2040d588 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x184>
    case MessageType::kStartSessionInit:
      session_->ProcessStartSessionInit(header);
2040d49c:	fdc42783          	lw	a5,-36(s0)
2040d4a0:	0047a783          	lw	a5,4(a5)
2040d4a4:	fe840713          	addi	a4,s0,-24
2040d4a8:	00070593          	mv	a1,a4
2040d4ac:	00078513          	mv	a0,a5
2040d4b0:	284000ef          	jal	ra,2040d734 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE>
      session_->receive_buffer_has_complete_message_ = false;
2040d4b4:	fdc42783          	lw	a5,-36(s0)
2040d4b8:	0047a783          	lw	a5,4(a5)
2040d4bc:	00078c23          	sb	zero,24(a5)
      break;
2040d4c0:	14c0006f          	j	2040d60c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    case MessageType::kStartSessionReply:
      session_->ProcessStartSessionReply(header);
2040d4c4:	fdc42783          	lw	a5,-36(s0)
2040d4c8:	0047a783          	lw	a5,4(a5)
2040d4cc:	fe840713          	addi	a4,s0,-24
2040d4d0:	00070593          	mv	a1,a4
2040d4d4:	00078513          	mv	a0,a5
2040d4d8:	3d0000ef          	jal	ra,2040d8a8 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE>
      session_->receive_buffer_has_complete_message_ = false;
2040d4dc:	fdc42783          	lw	a5,-36(s0)
2040d4e0:	0047a783          	lw	a5,4(a5)
2040d4e4:	00078c23          	sb	zero,24(a5)
      break;
2040d4e8:	1240006f          	j	2040d60c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    case MessageType::kTerminateSession:
      if (session_->state_ == State::kSessionEstablished) {
2040d4ec:	fdc42783          	lw	a5,-36(s0)
2040d4f0:	0047a783          	lw	a5,4(a5)
2040d4f4:	0047c703          	lbu	a4,4(a5)
2040d4f8:	00300793          	li	a5,3
2040d4fc:	02f71263          	bne	a4,a5,2040d520 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x11c>
        session_->state_ = State::kNoSessionEstablished;
2040d500:	fdc42783          	lw	a5,-36(s0)
2040d504:	0047a783          	lw	a5,4(a5)
2040d508:	00100713          	li	a4,1
2040d50c:	00e78223          	sb	a4,4(a5)
        session_->OnSessionTerminatedMessage();
2040d510:	fdc42783          	lw	a5,-36(s0)
2040d514:	0047a783          	lw	a5,4(a5)
2040d518:	00078513          	mv	a0,a5
2040d51c:	5bc000ef          	jal	ra,2040dad8 <_ZN3tvm7runtime9micro_rpc7Session26OnSessionTerminatedMessageEv>
      }
      session_->receive_buffer_has_complete_message_ = false;
2040d520:	fdc42783          	lw	a5,-36(s0)
2040d524:	0047a783          	lw	a5,4(a5)
2040d528:	00078c23          	sb	zero,24(a5)
      break;
2040d52c:	0e00006f          	j	2040d60c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    case MessageType::kLog:
      if (header.session_id == 0 || header.session_id == session_->session_id_) {
2040d530:	fe845783          	lhu	a5,-24(s0)
2040d534:	00078c63          	beqz	a5,2040d54c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x148>
2040d538:	fe845703          	lhu	a4,-24(s0)
2040d53c:	fdc42783          	lw	a5,-36(s0)
2040d540:	0047a783          	lw	a5,4(a5)
2040d544:	0027d783          	lhu	a5,2(a5)
2040d548:	0af71c63          	bne	a4,a5,2040d600 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1fc>
        // Special case for log messages: session id can be 0.
        session_->message_received_func_(session_->message_received_func_context_,
2040d54c:	fdc42783          	lw	a5,-36(s0)
2040d550:	0047a783          	lw	a5,4(a5)
2040d554:	01c7a803          	lw	a6,28(a5)
2040d558:	fdc42783          	lw	a5,-36(s0)
2040d55c:	0047a783          	lw	a5,4(a5)
2040d560:	0207a703          	lw	a4,32(a5)
2040d564:	fea44683          	lbu	a3,-22(s0)
                                         header.message_type, session_->receive_buffer_);
2040d568:	fdc42783          	lw	a5,-36(s0)
2040d56c:	0047a783          	lw	a5,4(a5)
        session_->message_received_func_(session_->message_received_func_context_,
2040d570:	0147a783          	lw	a5,20(a5)
2040d574:	00078613          	mv	a2,a5
2040d578:	00068593          	mv	a1,a3
2040d57c:	00070513          	mv	a0,a4
2040d580:	000800e7          	jalr	a6
      }
      break;
2040d584:	07c0006f          	j	2040d600 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x1fc>
    default:
      if (session_->state_ == State::kSessionEstablished &&
2040d588:	fdc42783          	lw	a5,-36(s0)
2040d58c:	0047a783          	lw	a5,4(a5)
2040d590:	0047c703          	lbu	a4,4(a5)
2040d594:	00300793          	li	a5,3
2040d598:	06f71863          	bne	a4,a5,2040d608 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x204>
          header.session_id == session_->session_id_) {
2040d59c:	fe845703          	lhu	a4,-24(s0)
2040d5a0:	fdc42783          	lw	a5,-36(s0)
2040d5a4:	0047a783          	lw	a5,4(a5)
2040d5a8:	0027d783          	lhu	a5,2(a5)
      if (session_->state_ == State::kSessionEstablished &&
2040d5ac:	04f71e63          	bne	a4,a5,2040d608 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x204>
        session_->message_received_func_(session_->message_received_func_context_,
2040d5b0:	fdc42783          	lw	a5,-36(s0)
2040d5b4:	0047a783          	lw	a5,4(a5)
2040d5b8:	01c7a803          	lw	a6,28(a5)
2040d5bc:	fdc42783          	lw	a5,-36(s0)
2040d5c0:	0047a783          	lw	a5,4(a5)
2040d5c4:	0207a703          	lw	a4,32(a5)
2040d5c8:	fea44683          	lbu	a3,-22(s0)
                                         header.message_type, session_->receive_buffer_);
2040d5cc:	fdc42783          	lw	a5,-36(s0)
2040d5d0:	0047a783          	lw	a5,4(a5)
        session_->message_received_func_(session_->message_received_func_context_,
2040d5d4:	0147a783          	lw	a5,20(a5)
2040d5d8:	00078613          	mv	a2,a5
2040d5dc:	00068593          	mv	a1,a3
2040d5e0:	00070513          	mv	a0,a4
2040d5e4:	000800e7          	jalr	a6
      }
      break;
2040d5e8:	00000013          	nop
2040d5ec:	01c0006f          	j	2040d608 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x204>
    return;
2040d5f0:	00000013          	nop
2040d5f4:	0180006f          	j	2040d60c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
    return;
2040d5f8:	00000013          	nop
2040d5fc:	0100006f          	j	2040d60c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
      break;
2040d600:	00000013          	nop
2040d604:	0080006f          	j	2040d60c <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiver10PacketDoneEb+0x208>
      break;
2040d608:	00000013          	nop
  }
}
2040d60c:	02c12083          	lw	ra,44(sp)
2040d610:	02812403          	lw	s0,40(sp)
2040d614:	03010113          	addi	sp,sp,48
2040d618:	00008067          	ret

2040d61c <_ZN3tvm7runtime9micro_rpc7Session18ClearReceiveBufferEv>:

void Session::ClearReceiveBuffer() {
2040d61c:	fe010113          	addi	sp,sp,-32
2040d620:	00112e23          	sw	ra,28(sp)
2040d624:	00812c23          	sw	s0,24(sp)
2040d628:	02010413          	addi	s0,sp,32
2040d62c:	fea42623          	sw	a0,-20(s0)
  receive_buffer_has_complete_message_ = false;
2040d630:	fec42783          	lw	a5,-20(s0)
2040d634:	00078c23          	sb	zero,24(a5)
  receive_buffer_->Clear();
2040d638:	fec42783          	lw	a5,-20(s0)
2040d63c:	0147a783          	lw	a5,20(a5)
2040d640:	00078513          	mv	a0,a5
2040d644:	f70fe0ef          	jal	ra,2040bdb4 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5ClearEv>
}
2040d648:	00000013          	nop
2040d64c:	01c12083          	lw	ra,28(sp)
2040d650:	01812403          	lw	s0,24(sp)
2040d654:	02010113          	addi	sp,sp,32
2040d658:	00008067          	ret

2040d65c <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>:

void Session::SendSessionStartReply(const SessionHeader& header) {
2040d65c:	fd010113          	addi	sp,sp,-48
2040d660:	02112623          	sw	ra,44(sp)
2040d664:	02812423          	sw	s0,40(sp)
2040d668:	03010413          	addi	s0,sp,48
2040d66c:	fca42e23          	sw	a0,-36(s0)
2040d670:	fcb42c23          	sw	a1,-40(s0)
  RegenerateNonce();
2040d674:	fdc42503          	lw	a0,-36(s0)
2040d678:	8d5ff0ef          	jal	ra,2040cf4c <_ZN3tvm7runtime9micro_rpc7Session15RegenerateNonceEv>
  SetSessionId(InitiatorNonce(header.session_id), local_nonce_);
2040d67c:	fd842783          	lw	a5,-40(s0)
2040d680:	0007d783          	lhu	a5,0(a5)
2040d684:	00078593          	mv	a1,a5
2040d688:	fdc42503          	lw	a0,-36(s0)
2040d68c:	598000ef          	jal	ra,2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d690:	00050793          	mv	a5,a0
2040d694:	00078713          	mv	a4,a5
2040d698:	fdc42783          	lw	a5,-36(s0)
2040d69c:	0007c783          	lbu	a5,0(a5)
2040d6a0:	00078613          	mv	a2,a5
2040d6a4:	00070593          	mv	a1,a4
2040d6a8:	fdc42503          	lw	a0,-36(s0)
2040d6ac:	50c000ef          	jal	ra,2040dbb8 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
  microtvm_session_start_payload_t payload = {Session::kVersion};
2040d6b0:	00100793          	li	a5,1
2040d6b4:	fef40423          	sb	a5,-24(s0)
  tvm_crt_error_t to_return = SendInternal(MessageType::kStartSessionReply,
                                           reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d6b8:	fe840793          	addi	a5,s0,-24
2040d6bc:	00100693          	li	a3,1
2040d6c0:	00078613          	mv	a2,a5
2040d6c4:	00100593          	li	a1,1
2040d6c8:	fdc42503          	lw	a0,-36(s0)
2040d6cc:	90dff0ef          	jal	ra,2040cfd8 <_ZN3tvm7runtime9micro_rpc7Session12SendInternalENS1_11MessageTypeEPKhj>
2040d6d0:	fea42623          	sw	a0,-20(s0)
  state_ = State::kSessionEstablished;
2040d6d4:	fdc42783          	lw	a5,-36(s0)
2040d6d8:	00300713          	li	a4,3
2040d6dc:	00e78223          	sb	a4,4(a5)
  CHECK_EQ(to_return, kTvmErrorNoError, "SendSessionStartReply");
2040d6e0:	fec42783          	lw	a5,-20(s0)
2040d6e4:	02078a63          	beqz	a5,2040d718 <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE+0xbc>
2040d6e8:	00014717          	auipc	a4,0x14
2040d6ec:	ecc70713          	addi	a4,a4,-308 # 204215b4 <crc_tabccitt+0x41c>
2040d6f0:	00014697          	auipc	a3,0x14
2040d6f4:	ed868693          	addi	a3,a3,-296 # 204215c8 <crc_tabccitt+0x430>
2040d6f8:	00014617          	auipc	a2,0x14
2040d6fc:	ed460613          	addi	a2,a2,-300 # 204215cc <crc_tabccitt+0x434>
2040d700:	0bf00593          	li	a1,191
2040d704:	00014517          	auipc	a0,0x14
2040d708:	ed450513          	addi	a0,a0,-300 # 204215d8 <crc_tabccitt+0x440>
2040d70c:	031000ef          	jal	ra,2040df3c <TVMLogf>
2040d710:	50000513          	li	a0,1280
2040d714:	d68f30ef          	jal	ra,20400c7c <TVMPlatformAbort>
  OnSessionEstablishedMessage();
2040d718:	fdc42503          	lw	a0,-36(s0)
2040d71c:	374000ef          	jal	ra,2040da90 <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>
}
2040d720:	00000013          	nop
2040d724:	02c12083          	lw	ra,44(sp)
2040d728:	02812403          	lw	s0,40(sp)
2040d72c:	03010113          	addi	sp,sp,48
2040d730:	00008067          	ret

2040d734 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE>:

void Session::ProcessStartSessionInit(const SessionHeader& header) {
2040d734:	fd010113          	addi	sp,sp,-48
2040d738:	02112623          	sw	ra,44(sp)
2040d73c:	02812423          	sw	s0,40(sp)
2040d740:	03010413          	addi	s0,sp,48
2040d744:	fca42e23          	sw	a0,-36(s0)
2040d748:	fcb42c23          	sw	a1,-40(s0)
  if (InitiatorNonce(header.session_id) == kInvalidNonce) {
2040d74c:	fd842783          	lw	a5,-40(s0)
2040d750:	0007d783          	lhu	a5,0(a5)
2040d754:	00078593          	mv	a1,a5
2040d758:	fdc42503          	lw	a0,-36(s0)
2040d75c:	4c8000ef          	jal	ra,2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d760:	00050793          	mv	a5,a0
2040d764:	0017b793          	seqz	a5,a5
2040d768:	0ff7f793          	andi	a5,a5,255
2040d76c:	10079c63          	bnez	a5,2040d884 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x150>
    return;
  }

  microtvm_session_start_payload_t payload;
  int bytes_read = receive_buffer_->Read(reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d770:	fdc42783          	lw	a5,-36(s0)
2040d774:	0147a783          	lw	a5,20(a5)
2040d778:	fe840713          	addi	a4,s0,-24
2040d77c:	00100613          	li	a2,1
2040d780:	00070593          	mv	a1,a4
2040d784:	00078513          	mv	a0,a5
2040d788:	d88fe0ef          	jal	ra,2040bd10 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040d78c:	00050793          	mv	a5,a0
2040d790:	fef42623          	sw	a5,-20(s0)
  if (bytes_read != sizeof(payload)) {
2040d794:	fec42703          	lw	a4,-20(s0)
2040d798:	00100793          	li	a5,1
2040d79c:	0ef71863          	bne	a4,a5,2040d88c <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x158>
    return;
  }

  switch (state_) {
2040d7a0:	fdc42783          	lw	a5,-36(s0)
2040d7a4:	0047c783          	lbu	a5,4(a5)
2040d7a8:	00200713          	li	a4,2
2040d7ac:	02e78463          	beq	a5,a4,2040d7d4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0xa0>
2040d7b0:	00200713          	li	a4,2
2040d7b4:	00e7e863          	bltu	a5,a4,2040d7c4 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x90>
2040d7b8:	00300713          	li	a4,3
2040d7bc:	0ae78263          	beq	a5,a4,2040d860 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x12c>
2040d7c0:	0b80006f          	j	2040d878 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x144>
    case State::kReset:
    case State::kNoSessionEstablished:
      // Normal case: received a StartSession packet from reset.
      SendSessionStartReply(header);
2040d7c4:	fd842583          	lw	a1,-40(s0)
2040d7c8:	fdc42503          	lw	a0,-36(s0)
2040d7cc:	e91ff0ef          	jal	ra,2040d65c <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
      break;
2040d7d0:	0c80006f          	j	2040d898 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>

    case State::kStartSessionSent:
      // When two StartSessionInit packets sent simultaneously: lowest nonce wins; ties retry.
      if (InitiatorNonce(header.session_id) < local_nonce_) {
2040d7d4:	fd842783          	lw	a5,-40(s0)
2040d7d8:	0007d783          	lhu	a5,0(a5)
2040d7dc:	00078593          	mv	a1,a5
2040d7e0:	fdc42503          	lw	a0,-36(s0)
2040d7e4:	440000ef          	jal	ra,2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d7e8:	00050793          	mv	a5,a0
2040d7ec:	00078713          	mv	a4,a5
2040d7f0:	fdc42783          	lw	a5,-36(s0)
2040d7f4:	0007c783          	lbu	a5,0(a5)
2040d7f8:	00f737b3          	sltu	a5,a4,a5
2040d7fc:	0ff7f793          	andi	a5,a5,255
2040d800:	02078063          	beqz	a5,2040d820 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0xec>
        if (payload.version == Session::kVersion) {
2040d804:	fe844703          	lbu	a4,-24(s0)
2040d808:	00100793          	li	a5,1
2040d80c:	08f71463          	bne	a4,a5,2040d894 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>
          SendSessionStartReply(header);
2040d810:	fd842583          	lw	a1,-40(s0)
2040d814:	fdc42503          	lw	a0,-36(s0)
2040d818:	e45ff0ef          	jal	ra,2040d65c <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
        }
      } else if (InitiatorNonce(header.session_id) == local_nonce_) {
        StartSession();
      }

      break;
2040d81c:	0780006f          	j	2040d894 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>
      } else if (InitiatorNonce(header.session_id) == local_nonce_) {
2040d820:	fd842783          	lw	a5,-40(s0)
2040d824:	0007d783          	lhu	a5,0(a5)
2040d828:	00078593          	mv	a1,a5
2040d82c:	fdc42503          	lw	a0,-36(s0)
2040d830:	3f4000ef          	jal	ra,2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d834:	00050793          	mv	a5,a0
2040d838:	00078713          	mv	a4,a5
2040d83c:	fdc42783          	lw	a5,-36(s0)
2040d840:	0007c783          	lbu	a5,0(a5)
2040d844:	40f707b3          	sub	a5,a4,a5
2040d848:	0017b793          	seqz	a5,a5
2040d84c:	0ff7f793          	andi	a5,a5,255
2040d850:	04078263          	beqz	a5,2040d894 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>
        StartSession();
2040d854:	fdc42503          	lw	a0,-36(s0)
2040d858:	951ff0ef          	jal	ra,2040d1a8 <_ZN3tvm7runtime9micro_rpc7Session12StartSessionEv>
      break;
2040d85c:	0380006f          	j	2040d894 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x160>

    case State::kSessionEstablished:
      SendSessionStartReply(header);
2040d860:	fd842583          	lw	a1,-40(s0)
2040d864:	fdc42503          	lw	a0,-36(s0)
2040d868:	df5ff0ef          	jal	ra,2040d65c <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
      OnSessionEstablishedMessage();
2040d86c:	fdc42503          	lw	a0,-36(s0)
2040d870:	220000ef          	jal	ra,2040da90 <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>
      break;
2040d874:	0240006f          	j	2040d898 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>

    default:
      state_ = State::kReset;
2040d878:	fdc42783          	lw	a5,-36(s0)
2040d87c:	00078223          	sb	zero,4(a5)
2040d880:	0180006f          	j	2040d898 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>
    return;
2040d884:	00000013          	nop
2040d888:	0100006f          	j	2040d898 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>
    return;
2040d88c:	00000013          	nop
2040d890:	0080006f          	j	2040d898 <_ZN3tvm7runtime9micro_rpc7Session23ProcessStartSessionInitERKNS1_13SessionHeaderE+0x164>
      break;
2040d894:	00000013          	nop
  }
}
2040d898:	02c12083          	lw	ra,44(sp)
2040d89c:	02812403          	lw	s0,40(sp)
2040d8a0:	03010113          	addi	sp,sp,48
2040d8a4:	00008067          	ret

2040d8a8 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE>:

void Session::ProcessStartSessionReply(const SessionHeader& header) {
2040d8a8:	fd010113          	addi	sp,sp,-48
2040d8ac:	02112623          	sw	ra,44(sp)
2040d8b0:	02812423          	sw	s0,40(sp)
2040d8b4:	02912223          	sw	s1,36(sp)
2040d8b8:	03010413          	addi	s0,sp,48
2040d8bc:	fca42e23          	sw	a0,-36(s0)
2040d8c0:	fcb42c23          	sw	a1,-40(s0)
  if (ResponderNonce(header.session_id) == kInvalidNonce) {
2040d8c4:	fd842783          	lw	a5,-40(s0)
2040d8c8:	0007d783          	lhu	a5,0(a5)
2040d8cc:	00078593          	mv	a1,a5
2040d8d0:	fdc42503          	lw	a0,-36(s0)
2040d8d4:	380000ef          	jal	ra,2040dc54 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>
2040d8d8:	00050793          	mv	a5,a0
2040d8dc:	0017b793          	seqz	a5,a5
2040d8e0:	0ff7f793          	andi	a5,a5,255
2040d8e4:	16079e63          	bnez	a5,2040da60 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1b8>
    return;
  }

  microtvm_session_start_payload_t payload;
  int bytes_read = receive_buffer_->Read(reinterpret_cast<uint8_t*>(&payload), sizeof(payload));
2040d8e8:	fdc42783          	lw	a5,-36(s0)
2040d8ec:	0147a783          	lw	a5,20(a5)
2040d8f0:	fe840713          	addi	a4,s0,-24
2040d8f4:	00100613          	li	a2,1
2040d8f8:	00070593          	mv	a1,a4
2040d8fc:	00078513          	mv	a0,a5
2040d900:	c10fe0ef          	jal	ra,2040bd10 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040d904:	00050793          	mv	a5,a0
2040d908:	fef42623          	sw	a5,-20(s0)
  if (bytes_read != sizeof(payload)) {
2040d90c:	fec42703          	lw	a4,-20(s0)
2040d910:	00100793          	li	a5,1
2040d914:	14f71a63          	bne	a4,a5,2040da68 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1c0>
    return;
  }

  switch (state_) {
2040d918:	fdc42783          	lw	a5,-36(s0)
2040d91c:	0047c783          	lbu	a5,4(a5)
2040d920:	00200713          	li	a4,2
2040d924:	00e78c63          	beq	a5,a4,2040d93c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x94>
2040d928:	00200713          	li	a4,2
2040d92c:	14e7e263          	bltu	a5,a4,2040da70 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1c8>
2040d930:	00300713          	li	a4,3
2040d934:	08e78a63          	beq	a5,a4,2040d9c8 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x120>
2040d938:	1440006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
    case State::kReset:
    case State::kNoSessionEstablished:
      break;
    case State::kStartSessionSent:
      if (InitiatorNonce(header.session_id) == local_nonce_ &&
2040d93c:	fd842783          	lw	a5,-40(s0)
2040d940:	0007d783          	lhu	a5,0(a5)
2040d944:	00078593          	mv	a1,a5
2040d948:	fdc42503          	lw	a0,-36(s0)
2040d94c:	2d8000ef          	jal	ra,2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d950:	00050793          	mv	a5,a0
2040d954:	00078713          	mv	a4,a5
2040d958:	fdc42783          	lw	a5,-36(s0)
2040d95c:	0007c783          	lbu	a5,0(a5)
2040d960:	00f71c63          	bne	a4,a5,2040d978 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0xd0>
          payload.version == Session::kVersion) {
2040d964:	fe844703          	lbu	a4,-24(s0)
      if (InitiatorNonce(header.session_id) == local_nonce_ &&
2040d968:	00100793          	li	a5,1
2040d96c:	00f71663          	bne	a4,a5,2040d978 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0xd0>
2040d970:	00100793          	li	a5,1
2040d974:	0080006f          	j	2040d97c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0xd4>
2040d978:	00000793          	li	a5,0
2040d97c:	0e078e63          	beqz	a5,2040da78 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d0>
        SetSessionId(local_nonce_, ResponderNonce(header.session_id));
2040d980:	fdc42783          	lw	a5,-36(s0)
2040d984:	0007c483          	lbu	s1,0(a5)
2040d988:	fd842783          	lw	a5,-40(s0)
2040d98c:	0007d783          	lhu	a5,0(a5)
2040d990:	00078593          	mv	a1,a5
2040d994:	fdc42503          	lw	a0,-36(s0)
2040d998:	2bc000ef          	jal	ra,2040dc54 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>
2040d99c:	00050793          	mv	a5,a0
2040d9a0:	00078613          	mv	a2,a5
2040d9a4:	00048593          	mv	a1,s1
2040d9a8:	fdc42503          	lw	a0,-36(s0)
2040d9ac:	20c000ef          	jal	ra,2040dbb8 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
        state_ = State::kSessionEstablished;
2040d9b0:	fdc42783          	lw	a5,-36(s0)
2040d9b4:	00300713          	li	a4,3
2040d9b8:	00e78223          	sb	a4,4(a5)
        OnSessionEstablishedMessage();
2040d9bc:	fdc42503          	lw	a0,-36(s0)
2040d9c0:	0d0000ef          	jal	ra,2040da90 <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>
      }
      break;
2040d9c4:	0b40006f          	j	2040da78 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d0>
    case State::kSessionEstablished:
      if (InitiatorNonce(header.session_id) != kInvalidNonce &&
2040d9c8:	fd842783          	lw	a5,-40(s0)
2040d9cc:	0007d783          	lhu	a5,0(a5)
2040d9d0:	00078593          	mv	a1,a5
2040d9d4:	fdc42503          	lw	a0,-36(s0)
2040d9d8:	24c000ef          	jal	ra,2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>
2040d9dc:	00050793          	mv	a5,a0
2040d9e0:	02078463          	beqz	a5,2040da08 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x160>
          ResponderNonce(header.session_id) == kInvalidNonce) {
2040d9e4:	fd842783          	lw	a5,-40(s0)
2040d9e8:	0007d783          	lhu	a5,0(a5)
2040d9ec:	00078593          	mv	a1,a5
2040d9f0:	fdc42503          	lw	a0,-36(s0)
2040d9f4:	260000ef          	jal	ra,2040dc54 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>
2040d9f8:	00050793          	mv	a5,a0
      if (InitiatorNonce(header.session_id) != kInvalidNonce &&
2040d9fc:	00079663          	bnez	a5,2040da08 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x160>
2040da00:	00100793          	li	a5,1
2040da04:	0080006f          	j	2040da0c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x164>
2040da08:	00000793          	li	a5,0
2040da0c:	04078263          	beqz	a5,2040da50 <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1a8>
        if (payload.version == Session::kVersion) {
2040da10:	fe844703          	lbu	a4,-24(s0)
2040da14:	00100793          	li	a5,1
2040da18:	00f71a63          	bne	a4,a5,2040da2c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x184>
          SendSessionStartReply(header);
2040da1c:	fd842583          	lw	a1,-40(s0)
2040da20:	fdc42503          	lw	a0,-36(s0)
2040da24:	c39ff0ef          	jal	ra,2040d65c <_ZN3tvm7runtime9micro_rpc7Session21SendSessionStartReplyERKNS1_13SessionHeaderE>
          state_ = State::kReset;
        }
      } else {
        state_ = State::kReset;
      }
      break;
2040da28:	0540006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
          SetSessionId(local_nonce_, 0);
2040da2c:	fdc42783          	lw	a5,-36(s0)
2040da30:	0007c783          	lbu	a5,0(a5)
2040da34:	00000613          	li	a2,0
2040da38:	00078593          	mv	a1,a5
2040da3c:	fdc42503          	lw	a0,-36(s0)
2040da40:	178000ef          	jal	ra,2040dbb8 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>
          state_ = State::kReset;
2040da44:	fdc42783          	lw	a5,-36(s0)
2040da48:	00078223          	sb	zero,4(a5)
      break;
2040da4c:	0300006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
        state_ = State::kReset;
2040da50:	fdc42783          	lw	a5,-36(s0)
2040da54:	00078223          	sb	zero,4(a5)
      break;
2040da58:	00000013          	nop
2040da5c:	0200006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
    return;
2040da60:	00000013          	nop
2040da64:	0180006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
    return;
2040da68:	00000013          	nop
2040da6c:	0100006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
      break;
2040da70:	00000013          	nop
2040da74:	0080006f          	j	2040da7c <_ZN3tvm7runtime9micro_rpc7Session24ProcessStartSessionReplyERKNS1_13SessionHeaderE+0x1d4>
      break;
2040da78:	00000013          	nop
  }
}
2040da7c:	02c12083          	lw	ra,44(sp)
2040da80:	02812403          	lw	s0,40(sp)
2040da84:	02412483          	lw	s1,36(sp)
2040da88:	03010113          	addi	sp,sp,48
2040da8c:	00008067          	ret

2040da90 <_ZN3tvm7runtime9micro_rpc7Session27OnSessionEstablishedMessageEv>:

void Session::OnSessionEstablishedMessage() {
2040da90:	fe010113          	addi	sp,sp,-32
2040da94:	00112e23          	sw	ra,28(sp)
2040da98:	00812c23          	sw	s0,24(sp)
2040da9c:	02010413          	addi	s0,sp,32
2040daa0:	fea42623          	sw	a0,-20(s0)
  message_received_func_(message_received_func_context_, MessageType::kStartSessionReply, NULL);
2040daa4:	fec42783          	lw	a5,-20(s0)
2040daa8:	01c7a703          	lw	a4,28(a5)
2040daac:	fec42783          	lw	a5,-20(s0)
2040dab0:	0207a783          	lw	a5,32(a5)
2040dab4:	00000613          	li	a2,0
2040dab8:	00100593          	li	a1,1
2040dabc:	00078513          	mv	a0,a5
2040dac0:	000700e7          	jalr	a4
}
2040dac4:	00000013          	nop
2040dac8:	01c12083          	lw	ra,28(sp)
2040dacc:	01812403          	lw	s0,24(sp)
2040dad0:	02010113          	addi	sp,sp,32
2040dad4:	00008067          	ret

2040dad8 <_ZN3tvm7runtime9micro_rpc7Session26OnSessionTerminatedMessageEv>:

void Session::OnSessionTerminatedMessage() {
2040dad8:	fe010113          	addi	sp,sp,-32
2040dadc:	00112e23          	sw	ra,28(sp)
2040dae0:	00812c23          	sw	s0,24(sp)
2040dae4:	02010413          	addi	s0,sp,32
2040dae8:	fea42623          	sw	a0,-20(s0)
  message_received_func_(message_received_func_context_, MessageType::kTerminateSession, NULL);
2040daec:	fec42783          	lw	a5,-20(s0)
2040daf0:	01c7a703          	lw	a4,28(a5)
2040daf4:	fec42783          	lw	a5,-20(s0)
2040daf8:	0207a783          	lw	a5,32(a5)
2040dafc:	00000613          	li	a2,0
2040db00:	00200593          	li	a1,2
2040db04:	00078513          	mv	a0,a5
2040db08:	000700e7          	jalr	a4
}
2040db0c:	00000013          	nop
2040db10:	01c12083          	lw	ra,28(sp)
2040db14:	01812403          	lw	s0,24(sp)
2040db18:	02010113          	addi	sp,sp,32
2040db1c:	00008067          	ret

2040db20 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD1Ev>:

 private:
  class SessionReceiver : public WriteStream {
   public:
    explicit SessionReceiver(Session* session) : session_{session} {}
    virtual ~SessionReceiver() {}
2040db20:	fe010113          	addi	sp,sp,-32
2040db24:	00112e23          	sw	ra,28(sp)
2040db28:	00812c23          	sw	s0,24(sp)
2040db2c:	02010413          	addi	s0,sp,32
2040db30:	fea42623          	sw	a0,-20(s0)
2040db34:	00014717          	auipc	a4,0x14
2040db38:	b1470713          	addi	a4,a4,-1260 # 20421648 <_ZTVN3tvm7runtime9micro_rpc7Session15SessionReceiverE+0x8>
2040db3c:	fec42783          	lw	a5,-20(s0)
2040db40:	00e7a023          	sw	a4,0(a5)
2040db44:	fec42783          	lw	a5,-20(s0)
2040db48:	00078513          	mv	a0,a5
2040db4c:	144000ef          	jal	ra,2040dc90 <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>
2040db50:	00000013          	nop
2040db54:	01c12083          	lw	ra,28(sp)
2040db58:	01812403          	lw	s0,24(sp)
2040db5c:	02010113          	addi	sp,sp,32
2040db60:	00008067          	ret

2040db64 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD0Ev>:
2040db64:	fe010113          	addi	sp,sp,-32
2040db68:	00112e23          	sw	ra,28(sp)
2040db6c:	00812c23          	sw	s0,24(sp)
2040db70:	02010413          	addi	s0,sp,32
2040db74:	fea42623          	sw	a0,-20(s0)
2040db78:	fec42503          	lw	a0,-20(s0)
2040db7c:	fa5ff0ef          	jal	ra,2040db20 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD1Ev>
2040db80:	fec42503          	lw	a0,-20(s0)
2040db84:	014000ef          	jal	ra,2040db98 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverdlEPv>
2040db88:	01c12083          	lw	ra,28(sp)
2040db8c:	01812403          	lw	s0,24(sp)
2040db90:	02010113          	addi	sp,sp,32
2040db94:	00008067          	ret

2040db98 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverdlEPv>:

    ssize_t Write(const uint8_t* data, size_t data_size_bytes) override;
    void PacketDone(bool is_valid) override;

   private:
    void operator delete(void*) noexcept {}  // NOLINT(readability/casting)
2040db98:	fe010113          	addi	sp,sp,-32
2040db9c:	00812e23          	sw	s0,28(sp)
2040dba0:	02010413          	addi	s0,sp,32
2040dba4:	fea42623          	sw	a0,-20(s0)
2040dba8:	00000013          	nop
2040dbac:	01c12403          	lw	s0,28(sp)
2040dbb0:	02010113          	addi	sp,sp,32
2040dbb4:	00008067          	ret

2040dbb8 <_ZN3tvm7runtime9micro_rpc7Session12SetSessionIdEhh>:

  void OnSessionEstablishedMessage();

  void OnSessionTerminatedMessage();

  void SetSessionId(uint8_t initiator_nonce, uint8_t responder_nonce) {
2040dbb8:	fe010113          	addi	sp,sp,-32
2040dbbc:	00812e23          	sw	s0,28(sp)
2040dbc0:	02010413          	addi	s0,sp,32
2040dbc4:	fea42623          	sw	a0,-20(s0)
2040dbc8:	00058793          	mv	a5,a1
2040dbcc:	00060713          	mv	a4,a2
2040dbd0:	fef405a3          	sb	a5,-21(s0)
2040dbd4:	00070793          	mv	a5,a4
2040dbd8:	fef40523          	sb	a5,-22(s0)
    session_id_ = initiator_nonce | (((uint16_t)responder_nonce) << 8);
2040dbdc:	feb44783          	lbu	a5,-21(s0)
2040dbe0:	01079713          	slli	a4,a5,0x10
2040dbe4:	41075713          	srai	a4,a4,0x10
2040dbe8:	fea44783          	lbu	a5,-22(s0)
2040dbec:	00879793          	slli	a5,a5,0x8
2040dbf0:	01079793          	slli	a5,a5,0x10
2040dbf4:	4107d793          	srai	a5,a5,0x10
2040dbf8:	00f767b3          	or	a5,a4,a5
2040dbfc:	01079793          	slli	a5,a5,0x10
2040dc00:	4107d793          	srai	a5,a5,0x10
2040dc04:	01079713          	slli	a4,a5,0x10
2040dc08:	01075713          	srli	a4,a4,0x10
2040dc0c:	fec42783          	lw	a5,-20(s0)
2040dc10:	00e79123          	sh	a4,2(a5)
  }
2040dc14:	00000013          	nop
2040dc18:	01c12403          	lw	s0,28(sp)
2040dc1c:	02010113          	addi	sp,sp,32
2040dc20:	00008067          	ret

2040dc24 <_ZN3tvm7runtime9micro_rpc7Session14InitiatorNonceEt>:

  uint8_t InitiatorNonce(uint16_t session_id) { return session_id & 0xff; }
2040dc24:	fe010113          	addi	sp,sp,-32
2040dc28:	00812e23          	sw	s0,28(sp)
2040dc2c:	02010413          	addi	s0,sp,32
2040dc30:	fea42623          	sw	a0,-20(s0)
2040dc34:	00058793          	mv	a5,a1
2040dc38:	fef41523          	sh	a5,-22(s0)
2040dc3c:	fea45783          	lhu	a5,-22(s0)
2040dc40:	0ff7f793          	andi	a5,a5,255
2040dc44:	00078513          	mv	a0,a5
2040dc48:	01c12403          	lw	s0,28(sp)
2040dc4c:	02010113          	addi	sp,sp,32
2040dc50:	00008067          	ret

2040dc54 <_ZN3tvm7runtime9micro_rpc7Session14ResponderNonceEt>:

  uint8_t ResponderNonce(uint16_t session_id) { return (session_id >> 8) & 0xff; }
2040dc54:	fe010113          	addi	sp,sp,-32
2040dc58:	00812e23          	sw	s0,28(sp)
2040dc5c:	02010413          	addi	s0,sp,32
2040dc60:	fea42623          	sw	a0,-20(s0)
2040dc64:	00058793          	mv	a5,a1
2040dc68:	fef41523          	sh	a5,-22(s0)
2040dc6c:	fea45783          	lhu	a5,-22(s0)
2040dc70:	0087d793          	srli	a5,a5,0x8
2040dc74:	01079793          	slli	a5,a5,0x10
2040dc78:	0107d793          	srli	a5,a5,0x10
2040dc7c:	0ff7f793          	andi	a5,a5,255
2040dc80:	00078513          	mv	a0,a5
2040dc84:	01c12403          	lw	s0,28(sp)
2040dc88:	02010113          	addi	sp,sp,32
2040dc8c:	00008067          	ret

2040dc90 <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>:

namespace tvm {
namespace runtime {
namespace micro_rpc {

WriteStream::~WriteStream() {}
2040dc90:	fe010113          	addi	sp,sp,-32
2040dc94:	00812e23          	sw	s0,28(sp)
2040dc98:	02010413          	addi	s0,sp,32
2040dc9c:	fea42623          	sw	a0,-20(s0)
2040dca0:	00014717          	auipc	a4,0x14
2040dca4:	9c070713          	addi	a4,a4,-1600 # 20421660 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x8>
2040dca8:	fec42783          	lw	a5,-20(s0)
2040dcac:	00e7a023          	sw	a4,0(a5)
2040dcb0:	00000013          	nop
2040dcb4:	01c12403          	lw	s0,28(sp)
2040dcb8:	02010113          	addi	sp,sp,32
2040dcbc:	00008067          	ret

2040dcc0 <_ZN3tvm7runtime9micro_rpc11WriteStreamD0Ev>:
2040dcc0:	fe010113          	addi	sp,sp,-32
2040dcc4:	00112e23          	sw	ra,28(sp)
2040dcc8:	00812c23          	sw	s0,24(sp)
2040dccc:	02010413          	addi	s0,sp,32
2040dcd0:	fea42623          	sw	a0,-20(s0)
2040dcd4:	fec42503          	lw	a0,-20(s0)
2040dcd8:	fb9ff0ef          	jal	ra,2040dc90 <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>
2040dcdc:	00400593          	li	a1,4
2040dce0:	fec42503          	lw	a0,-20(s0)
2040dce4:	f65fd0ef          	jal	ra,2040bc48 <_ZdlPvj>
2040dce8:	01c12083          	lw	ra,28(sp)
2040dcec:	01812403          	lw	s0,24(sp)
2040dcf0:	02010113          	addi	sp,sp,32
2040dcf4:	00008067          	ret

2040dcf8 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj>:

tvm_crt_error_t WriteStream::WriteAll(uint8_t* data, size_t data_size_bytes,
                                      size_t* bytes_consumed) {
2040dcf8:	fd010113          	addi	sp,sp,-48
2040dcfc:	02112623          	sw	ra,44(sp)
2040dd00:	02812423          	sw	s0,40(sp)
2040dd04:	03010413          	addi	s0,sp,48
2040dd08:	fca42e23          	sw	a0,-36(s0)
2040dd0c:	fcb42c23          	sw	a1,-40(s0)
2040dd10:	fcc42a23          	sw	a2,-44(s0)
2040dd14:	fcd42823          	sw	a3,-48(s0)
  *bytes_consumed = 0;
2040dd18:	fd042783          	lw	a5,-48(s0)
2040dd1c:	0007a023          	sw	zero,0(a5)
  while (data_size_bytes > 0) {
2040dd20:	fd442783          	lw	a5,-44(s0)
2040dd24:	0a078063          	beqz	a5,2040ddc4 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xcc>
    ssize_t to_return = Write(data, data_size_bytes);
2040dd28:	fdc42783          	lw	a5,-36(s0)
2040dd2c:	0007a783          	lw	a5,0(a5)
2040dd30:	00878793          	addi	a5,a5,8
2040dd34:	0007a783          	lw	a5,0(a5)
2040dd38:	fd442603          	lw	a2,-44(s0)
2040dd3c:	fd842583          	lw	a1,-40(s0)
2040dd40:	fdc42503          	lw	a0,-36(s0)
2040dd44:	000780e7          	jalr	a5
2040dd48:	fea42623          	sw	a0,-20(s0)
    if (to_return == 0) {
2040dd4c:	fec42783          	lw	a5,-20(s0)
2040dd50:	00079663          	bnez	a5,2040dd5c <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x64>
      return kTvmErrorWriteStreamShortWrite;
2040dd54:	30000793          	li	a5,768
2040dd58:	0700006f          	j	2040ddc8 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xd0>
    } else if (to_return < 0) {
2040dd5c:	fec42783          	lw	a5,-20(s0)
2040dd60:	0007d663          	bgez	a5,2040dd6c <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x74>
      return (tvm_crt_error_t)to_return;
2040dd64:	fec42783          	lw	a5,-20(s0)
2040dd68:	0600006f          	j	2040ddc8 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xd0>
    } else if (to_return > 0 && (static_cast<size_t>(to_return)) > data_size_bytes) {
2040dd6c:	fec42783          	lw	a5,-20(s0)
2040dd70:	00f05c63          	blez	a5,2040dd88 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x90>
2040dd74:	fec42783          	lw	a5,-20(s0)
2040dd78:	fd442703          	lw	a4,-44(s0)
2040dd7c:	00f77663          	bleu	a5,a4,2040dd88 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x90>
      return kTvmErrorWriteStreamLongWrite;
2040dd80:	30100793          	li	a5,769
2040dd84:	0440006f          	j	2040ddc8 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0xd0>
    }

    data += to_return;
2040dd88:	fec42783          	lw	a5,-20(s0)
2040dd8c:	fd842703          	lw	a4,-40(s0)
2040dd90:	00f707b3          	add	a5,a4,a5
2040dd94:	fcf42c23          	sw	a5,-40(s0)
    data_size_bytes -= to_return;
2040dd98:	fec42783          	lw	a5,-20(s0)
2040dd9c:	fd442703          	lw	a4,-44(s0)
2040dda0:	40f707b3          	sub	a5,a4,a5
2040dda4:	fcf42a23          	sw	a5,-44(s0)
    *bytes_consumed += to_return;
2040dda8:	fd042783          	lw	a5,-48(s0)
2040ddac:	0007a703          	lw	a4,0(a5)
2040ddb0:	fec42783          	lw	a5,-20(s0)
2040ddb4:	00f70733          	add	a4,a4,a5
2040ddb8:	fd042783          	lw	a5,-48(s0)
2040ddbc:	00e7a023          	sw	a4,0(a5)
  while (data_size_bytes > 0) {
2040ddc0:	f61ff06f          	j	2040dd20 <_ZN3tvm7runtime9micro_rpc11WriteStream8WriteAllEPhjPj+0x28>
  }

  return kTvmErrorNoError;
2040ddc4:	00000793          	li	a5,0
}
2040ddc8:	00078513          	mv	a0,a5
2040ddcc:	02c12083          	lw	ra,44(sp)
2040ddd0:	02812403          	lw	s0,40(sp)
2040ddd4:	03010113          	addi	sp,sp,48
2040ddd8:	00008067          	ret

2040dddc <_ZnajPv>:
    void operator delete(void*) noexcept {}  // NOLINT(readability/casting)
2040dddc:	fe010113          	addi	sp,sp,-32
2040dde0:	00812e23          	sw	s0,28(sp)
2040dde4:	02010413          	addi	s0,sp,32
2040dde8:	fea42623          	sw	a0,-20(s0)
2040ddec:	feb42423          	sw	a1,-24(s0)
2040ddf0:	fe842783          	lw	a5,-24(s0)
2040ddf4:	00078513          	mv	a0,a5
2040ddf8:	01c12403          	lw	s0,28(sp)
2040ddfc:	02010113          	addi	sp,sp,32
2040de00:	00008067          	ret

2040de04 <MicroTVMRpcServerInit>:
2040de04:	fc010113          	addi	sp,sp,-64
2040de08:	02112e23          	sw	ra,60(sp)
2040de0c:	02812c23          	sw	s0,56(sp)
2040de10:	02912a23          	sw	s1,52(sp)
2040de14:	04010413          	addi	s0,sp,64
2040de18:	fca42623          	sw	a0,-52(s0)
2040de1c:	fcb42423          	sw	a1,-56(s0)
2040de20:	5fbf3797          	auipc	a5,0x5fbf3
2040de24:	09078793          	addi	a5,a5,144 # 80000eb0 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_112g_write_funcE>
2040de28:	fcc42703          	lw	a4,-52(s0)
2040de2c:	00e7a023          	sw	a4,0(a5)
2040de30:	5fbf3797          	auipc	a5,0x5fbf3
2040de34:	08478793          	addi	a5,a5,132 # 80000eb4 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_116g_write_func_ctxE>
2040de38:	fc842703          	lw	a4,-56(s0)
2040de3c:	00e7a023          	sw	a4,0(a5)
2040de40:	c08f40ef          	jal	ra,20402248 <TVMInitializeRuntime>
2040de44:	fea42623          	sw	a0,-20(s0)
2040de48:	fec42783          	lw	a5,-20(s0)
2040de4c:	00078663          	beqz	a5,2040de58 <MicroTVMRpcServerInit+0x54>
2040de50:	fec42503          	lw	a0,-20(s0)
2040de54:	e29f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
2040de58:	00100793          	li	a5,1
2040de5c:	fcf42e23          	sw	a5,-36(s0)
2040de60:	fe042023          	sw	zero,-32(s0)
2040de64:	fd840793          	addi	a5,s0,-40
2040de68:	00078693          	mv	a3,a5
2040de6c:	fdc42583          	lw	a1,-36(s0)
2040de70:	fe042603          	lw	a2,-32(s0)
2040de74:	00002537          	lui	a0,0x2
2040de78:	ea9f20ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
2040de7c:	fea42623          	sw	a0,-20(s0)
2040de80:	fec42783          	lw	a5,-20(s0)
2040de84:	00078663          	beqz	a5,2040de90 <MicroTVMRpcServerInit+0x8c>
2040de88:	fec42503          	lw	a0,-20(s0)
2040de8c:	df1f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
2040de90:	fd842783          	lw	a5,-40(s0)
2040de94:	00078593          	mv	a1,a5
2040de98:	00002537          	lui	a0,0x2
2040de9c:	f41ff0ef          	jal	ra,2040dddc <_ZnajPv>
2040dea0:	fea42423          	sw	a0,-24(s0)
2040dea4:	fd440793          	addi	a5,s0,-44
2040dea8:	00078693          	mv	a3,a5
2040deac:	fdc42583          	lw	a1,-36(s0)
2040deb0:	fe042603          	lw	a2,-32(s0)
2040deb4:	10c00513          	li	a0,268
2040deb8:	e69f20ef          	jal	ra,20400d20 <TVMPlatformMemoryAllocate>
2040debc:	fea42623          	sw	a0,-20(s0)
2040dec0:	fec42783          	lw	a5,-20(s0)
2040dec4:	00078663          	beqz	a5,2040ded0 <MicroTVMRpcServerInit+0xcc>
2040dec8:	fec42503          	lw	a0,-20(s0)
2040decc:	db1f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
2040ded0:	fd442783          	lw	a5,-44(s0)
2040ded4:	00078593          	mv	a1,a5
2040ded8:	10c00513          	li	a0,268
2040dedc:	179000ef          	jal	ra,2040e854 <_ZN3tvm7runtime9micro_rpc14MicroRPCServernwEjPv>
2040dee0:	00050493          	mv	s1,a0
2040dee4:	fc842703          	lw	a4,-56(s0)
2040dee8:	fcc42683          	lw	a3,-52(s0)
2040deec:	00002637          	lui	a2,0x2
2040def0:	fe842583          	lw	a1,-24(s0)
2040def4:	00048513          	mv	a0,s1
2040def8:	041000ef          	jal	ra,2040e738 <_ZN3tvm7runtime9micro_rpc14MicroRPCServerC1EPhjPFiPvPKhjES4_>
2040defc:	fe942223          	sw	s1,-28(s0)
2040df00:	5fbf3797          	auipc	a5,0x5fbf3
2040df04:	fb878793          	addi	a5,a5,-72 # 80000eb8 <_ZL12g_rpc_server>
2040df08:	fe442703          	lw	a4,-28(s0)
2040df0c:	00e7a023          	sw	a4,0(a5)
2040df10:	fe442503          	lw	a0,-28(s0)
2040df14:	169000ef          	jal	ra,2040e87c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv>
2040df18:	5fbf3797          	auipc	a5,0x5fbf3
2040df1c:	fa078793          	addi	a5,a5,-96 # 80000eb8 <_ZL12g_rpc_server>
2040df20:	0007a783          	lw	a5,0(a5)
2040df24:	00078513          	mv	a0,a5
2040df28:	03c12083          	lw	ra,60(sp)
2040df2c:	03812403          	lw	s0,56(sp)
2040df30:	03412483          	lw	s1,52(sp)
2040df34:	04010113          	addi	sp,sp,64
2040df38:	00008067          	ret

2040df3c <TVMLogf>:
2040df3c:	e7010113          	addi	sp,sp,-400
2040df40:	16112623          	sw	ra,364(sp)
2040df44:	16812423          	sw	s0,360(sp)
2040df48:	17010413          	addi	s0,sp,368
2040df4c:	e8a42e23          	sw	a0,-356(s0)
2040df50:	00b42223          	sw	a1,4(s0)
2040df54:	00c42423          	sw	a2,8(s0)
2040df58:	00d42623          	sw	a3,12(s0)
2040df5c:	00e42823          	sw	a4,16(s0)
2040df60:	00f42a23          	sw	a5,20(s0)
2040df64:	01042c23          	sw	a6,24(s0)
2040df68:	01142e23          	sw	a7,28(s0)
2040df6c:	02040793          	addi	a5,s0,32
2040df70:	fe478793          	addi	a5,a5,-28
2040df74:	fef42223          	sw	a5,-28(s0)
2040df78:	fe442703          	lw	a4,-28(s0)
2040df7c:	ee440793          	addi	a5,s0,-284
2040df80:	00070693          	mv	a3,a4
2040df84:	e9c42603          	lw	a2,-356(s0)
2040df88:	10000593          	li	a1,256
2040df8c:	00078513          	mv	a0,a5
2040df90:	ca1f20ef          	jal	ra,20400c30 <TVMPlatformFormatMessage>
2040df94:	fea42623          	sw	a0,-20(s0)
2040df98:	fec42783          	lw	a5,-20(s0)
2040df9c:	04078063          	beqz	a5,2040dfdc <TVMLogf+0xa0>
2040dfa0:	fec42783          	lw	a5,-20(s0)
2040dfa4:	fff78793          	addi	a5,a5,-1
2040dfa8:	ff040713          	addi	a4,s0,-16
2040dfac:	00f707b3          	add	a5,a4,a5
2040dfb0:	ef47c703          	lbu	a4,-268(a5)
2040dfb4:	00a00793          	li	a5,10
2040dfb8:	02f71263          	bne	a4,a5,2040dfdc <TVMLogf+0xa0>
2040dfbc:	fec42783          	lw	a5,-20(s0)
2040dfc0:	fff78793          	addi	a5,a5,-1
2040dfc4:	ff040713          	addi	a4,s0,-16
2040dfc8:	00f707b3          	add	a5,a4,a5
2040dfcc:	ee078a23          	sb	zero,-268(a5)
2040dfd0:	fec42783          	lw	a5,-20(s0)
2040dfd4:	fff78793          	addi	a5,a5,-1
2040dfd8:	fef42623          	sw	a5,-20(s0)
2040dfdc:	5fbf3797          	auipc	a5,0x5fbf3
2040dfe0:	edc78793          	addi	a5,a5,-292 # 80000eb8 <_ZL12g_rpc_server>
2040dfe4:	0007a783          	lw	a5,0(a5)
2040dfe8:	02078463          	beqz	a5,2040e010 <TVMLogf+0xd4>
2040dfec:	5fbf3797          	auipc	a5,0x5fbf3
2040dff0:	ecc78793          	addi	a5,a5,-308 # 80000eb8 <_ZL12g_rpc_server>
2040dff4:	0007a783          	lw	a5,0(a5)
2040dff8:	ee440713          	addi	a4,s0,-284
2040dffc:	fec42603          	lw	a2,-20(s0)
2040e000:	00070593          	mv	a1,a4
2040e004:	00078513          	mv	a0,a5
2040e008:	235000ef          	jal	ra,2040ea3c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer3LogEPKhj>
2040e00c:	0880006f          	j	2040e094 <TVMLogf+0x158>
2040e010:	ee040793          	addi	a5,s0,-288
2040e014:	00078513          	mv	a0,a5
2040e018:	588000ef          	jal	ra,2040e5a0 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamC1Ev>
2040e01c:	ee040713          	addi	a4,s0,-288
2040e020:	ed040793          	addi	a5,s0,-304
2040e024:	00070593          	mv	a1,a4
2040e028:	00078513          	mv	a0,a5
2040e02c:	160000ef          	jal	ra,2040e18c <_ZN3tvm7runtime9micro_rpc6FramerC1EPNS1_11WriteStreamE>
2040e030:	ed040593          	addi	a1,s0,-304
2040e034:	eac40793          	addi	a5,s0,-340
2040e038:	00000713          	li	a4,0
2040e03c:	00000693          	li	a3,0
2040e040:	00000613          	li	a2,0
2040e044:	00078513          	mv	a0,a5
2040e048:	184000ef          	jal	ra,2040e1cc <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_>
2040e04c:	ee440713          	addi	a4,s0,-284
2040e050:	eac40793          	addi	a5,s0,-340
2040e054:	fec42683          	lw	a3,-20(s0)
2040e058:	00070613          	mv	a2,a4
2040e05c:	00300593          	li	a1,3
2040e060:	00078513          	mv	a0,a5
2040e064:	aa8ff0ef          	jal	ra,2040d30c <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj>
2040e068:	fea42423          	sw	a0,-24(s0)
2040e06c:	fe842783          	lw	a5,-24(s0)
2040e070:	00078663          	beqz	a5,2040e07c <TVMLogf+0x140>
2040e074:	fe842503          	lw	a0,-24(s0)
2040e078:	c05f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
2040e07c:	eac40793          	addi	a5,s0,-340
2040e080:	00078513          	mv	a0,a5
2040e084:	67c000ef          	jal	ra,2040e700 <_ZN3tvm7runtime9micro_rpc7SessionD1Ev>
2040e088:	ee040793          	addi	a5,s0,-288
2040e08c:	00078513          	mv	a0,a5
2040e090:	554000ef          	jal	ra,2040e5e4 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD1Ev>
2040e094:	00000013          	nop
2040e098:	16c12083          	lw	ra,364(sp)
2040e09c:	16812403          	lw	s0,360(sp)
2040e0a0:	19010113          	addi	sp,sp,400
2040e0a4:	00008067          	ret

2040e0a8 <MicroTVMRpcServerLoop>:
2040e0a8:	fd010113          	addi	sp,sp,-48
2040e0ac:	02112623          	sw	ra,44(sp)
2040e0b0:	02812423          	sw	s0,40(sp)
2040e0b4:	03010413          	addi	s0,sp,48
2040e0b8:	fca42e23          	sw	a0,-36(s0)
2040e0bc:	fcb42c23          	sw	a1,-40(s0)
2040e0c0:	fcc42a23          	sw	a2,-44(s0)
2040e0c4:	fdc42783          	lw	a5,-36(s0)
2040e0c8:	fef42623          	sw	a5,-20(s0)
2040e0cc:	fd442603          	lw	a2,-44(s0)
2040e0d0:	fd842583          	lw	a1,-40(s0)
2040e0d4:	fec42503          	lw	a0,-20(s0)
2040e0d8:	075000ef          	jal	ra,2040e94c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj>
2040e0dc:	00050793          	mv	a5,a0
2040e0e0:	00078513          	mv	a0,a5
2040e0e4:	02c12083          	lw	ra,44(sp)
2040e0e8:	02812403          	lw	s0,40(sp)
2040e0ec:	03010113          	addi	sp,sp,48
2040e0f0:	00008067          	ret

2040e0f4 <_ZN3tvm7runtime9micro_rpc11FrameBufferC1EPhj>:
2040e0f4:	fe010113          	addi	sp,sp,-32
2040e0f8:	00812e23          	sw	s0,28(sp)
2040e0fc:	02010413          	addi	s0,sp,32
2040e100:	fea42623          	sw	a0,-20(s0)
2040e104:	feb42423          	sw	a1,-24(s0)
2040e108:	fec42223          	sw	a2,-28(s0)
2040e10c:	fec42783          	lw	a5,-20(s0)
2040e110:	fe842703          	lw	a4,-24(s0)
2040e114:	00e7a023          	sw	a4,0(a5)
2040e118:	fec42783          	lw	a5,-20(s0)
2040e11c:	fe442703          	lw	a4,-28(s0)
2040e120:	00e7a223          	sw	a4,4(a5)
2040e124:	fec42783          	lw	a5,-20(s0)
2040e128:	0007a423          	sw	zero,8(a5)
2040e12c:	fec42783          	lw	a5,-20(s0)
2040e130:	0007a623          	sw	zero,12(a5)
2040e134:	00000013          	nop
2040e138:	01c12403          	lw	s0,28(sp)
2040e13c:	02010113          	addi	sp,sp,32
2040e140:	00008067          	ret

2040e144 <_ZN3tvm7runtime9micro_rpc8UnframerC1EPNS1_11WriteStreamE>:
2040e144:	fe010113          	addi	sp,sp,-32
2040e148:	00812e23          	sw	s0,28(sp)
2040e14c:	02010413          	addi	s0,sp,32
2040e150:	fea42623          	sw	a0,-20(s0)
2040e154:	feb42423          	sw	a1,-24(s0)
2040e158:	fec42783          	lw	a5,-20(s0)
2040e15c:	fe842703          	lw	a4,-24(s0)
2040e160:	00e7a023          	sw	a4,0(a5)
2040e164:	fec42783          	lw	a5,-20(s0)
2040e168:	00078223          	sb	zero,4(a5)
2040e16c:	fec42783          	lw	a5,-20(s0)
2040e170:	00078823          	sb	zero,16(a5)
2040e174:	fec42783          	lw	a5,-20(s0)
2040e178:	0807aa23          	sw	zero,148(a5)
2040e17c:	00000013          	nop
2040e180:	01c12403          	lw	s0,28(sp)
2040e184:	02010113          	addi	sp,sp,32
2040e188:	00008067          	ret

2040e18c <_ZN3tvm7runtime9micro_rpc6FramerC1EPNS1_11WriteStreamE>:
2040e18c:	fe010113          	addi	sp,sp,-32
2040e190:	00812e23          	sw	s0,28(sp)
2040e194:	02010413          	addi	s0,sp,32
2040e198:	fea42623          	sw	a0,-20(s0)
2040e19c:	feb42423          	sw	a1,-24(s0)
2040e1a0:	fec42783          	lw	a5,-20(s0)
2040e1a4:	fe842703          	lw	a4,-24(s0)
2040e1a8:	00e7a023          	sw	a4,0(a5)
2040e1ac:	fec42783          	lw	a5,-20(s0)
2040e1b0:	00078223          	sb	zero,4(a5)
2040e1b4:	fec42783          	lw	a5,-20(s0)
2040e1b8:	0007a423          	sw	zero,8(a5)
2040e1bc:	00000013          	nop
2040e1c0:	01c12403          	lw	s0,28(sp)
2040e1c4:	02010113          	addi	sp,sp,32
2040e1c8:	00008067          	ret

2040e1cc <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_>:
2040e1cc:	fd010113          	addi	sp,sp,-48
2040e1d0:	02112623          	sw	ra,44(sp)
2040e1d4:	02812423          	sw	s0,40(sp)
2040e1d8:	03010413          	addi	s0,sp,48
2040e1dc:	fea42623          	sw	a0,-20(s0)
2040e1e0:	feb42423          	sw	a1,-24(s0)
2040e1e4:	fec42223          	sw	a2,-28(s0)
2040e1e8:	fed42023          	sw	a3,-32(s0)
2040e1ec:	fce42e23          	sw	a4,-36(s0)
2040e1f0:	fec42783          	lw	a5,-20(s0)
2040e1f4:	00078023          	sb	zero,0(a5)
2040e1f8:	fec42783          	lw	a5,-20(s0)
2040e1fc:	00079123          	sh	zero,2(a5)
2040e200:	fec42783          	lw	a5,-20(s0)
2040e204:	00078223          	sb	zero,4(a5)
2040e208:	fec42783          	lw	a5,-20(s0)
2040e20c:	00878793          	addi	a5,a5,8
2040e210:	fec42583          	lw	a1,-20(s0)
2040e214:	00078513          	mv	a0,a5
2040e218:	0c4000ef          	jal	ra,2040e2dc <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverC1EPS2_>
2040e21c:	fec42783          	lw	a5,-20(s0)
2040e220:	fe842703          	lw	a4,-24(s0)
2040e224:	00e7a823          	sw	a4,16(a5)
2040e228:	fec42783          	lw	a5,-20(s0)
2040e22c:	fe442703          	lw	a4,-28(s0)
2040e230:	00e7aa23          	sw	a4,20(a5)
2040e234:	fec42783          	lw	a5,-20(s0)
2040e238:	00078c23          	sb	zero,24(a5)
2040e23c:	fec42783          	lw	a5,-20(s0)
2040e240:	fe042703          	lw	a4,-32(s0)
2040e244:	00e7ae23          	sw	a4,28(a5)
2040e248:	fec42783          	lw	a5,-20(s0)
2040e24c:	fdc42703          	lw	a4,-36(s0)
2040e250:	02e7a023          	sw	a4,32(a5)
2040e254:	fec42783          	lw	a5,-20(s0)
2040e258:	0147a783          	lw	a5,20(a5)
2040e25c:	00078a63          	beqz	a5,2040e270 <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_+0xa4>
2040e260:	fec42783          	lw	a5,-20(s0)
2040e264:	0147a783          	lw	a5,20(a5)
2040e268:	00078513          	mv	a0,a5
2040e26c:	b49fd0ef          	jal	ra,2040bdb4 <_ZN3tvm7runtime9micro_rpc11FrameBuffer5ClearEv>
2040e270:	00000013          	nop
2040e274:	02c12083          	lw	ra,44(sp)
2040e278:	02812403          	lw	s0,40(sp)
2040e27c:	03010113          	addi	sp,sp,48
2040e280:	00008067          	ret

2040e284 <_ZN3tvm7runtime9micro_rpc7Session8ReceiverEv>:
2040e284:	fe010113          	addi	sp,sp,-32
2040e288:	00812e23          	sw	s0,28(sp)
2040e28c:	02010413          	addi	s0,sp,32
2040e290:	fea42623          	sw	a0,-20(s0)
2040e294:	fec42783          	lw	a5,-20(s0)
2040e298:	00878793          	addi	a5,a5,8
2040e29c:	00078513          	mv	a0,a5
2040e2a0:	01c12403          	lw	s0,28(sp)
2040e2a4:	02010113          	addi	sp,sp,32
2040e2a8:	00008067          	ret

2040e2ac <_ZN3tvm7runtime9micro_rpc11WriteStreamC1Ev>:
2040e2ac:	fe010113          	addi	sp,sp,-32
2040e2b0:	00812e23          	sw	s0,28(sp)
2040e2b4:	02010413          	addi	s0,sp,32
2040e2b8:	fea42623          	sw	a0,-20(s0)
2040e2bc:	00013717          	auipc	a4,0x13
2040e2c0:	3a470713          	addi	a4,a4,932 # 20421660 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x8>
2040e2c4:	fec42783          	lw	a5,-20(s0)
2040e2c8:	00e7a023          	sw	a4,0(a5)
2040e2cc:	00000013          	nop
2040e2d0:	01c12403          	lw	s0,28(sp)
2040e2d4:	02010113          	addi	sp,sp,32
2040e2d8:	00008067          	ret

2040e2dc <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverC1EPS2_>:
2040e2dc:	fe010113          	addi	sp,sp,-32
2040e2e0:	00112e23          	sw	ra,28(sp)
2040e2e4:	00812c23          	sw	s0,24(sp)
2040e2e8:	02010413          	addi	s0,sp,32
2040e2ec:	fea42623          	sw	a0,-20(s0)
2040e2f0:	feb42423          	sw	a1,-24(s0)
2040e2f4:	fec42783          	lw	a5,-20(s0)
2040e2f8:	00078513          	mv	a0,a5
2040e2fc:	fb1ff0ef          	jal	ra,2040e2ac <_ZN3tvm7runtime9micro_rpc11WriteStreamC1Ev>
2040e300:	00013717          	auipc	a4,0x13
2040e304:	34870713          	addi	a4,a4,840 # 20421648 <_ZTVN3tvm7runtime9micro_rpc7Session15SessionReceiverE+0x8>
2040e308:	fec42783          	lw	a5,-20(s0)
2040e30c:	00e7a023          	sw	a4,0(a5)
2040e310:	fec42783          	lw	a5,-20(s0)
2040e314:	fe842703          	lw	a4,-24(s0)
2040e318:	00e7a223          	sw	a4,4(a5)
2040e31c:	00000013          	nop
2040e320:	01c12083          	lw	ra,28(sp)
2040e324:	01812403          	lw	s0,24(sp)
2040e328:	02010113          	addi	sp,sp,32
2040e32c:	00008067          	ret

2040e330 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>:
  /*!
   * \return the length of the str.
   * \param str the string.
   * \return The length.
   */
  static uint64_t StrLength(const char* str) {
2040e330:	fd010113          	addi	sp,sp,-48
2040e334:	02812623          	sw	s0,44(sp)
2040e338:	03010413          	addi	s0,sp,48
2040e33c:	fca42e23          	sw	a0,-36(s0)
    uint64_t len = 0;
2040e340:	00000793          	li	a5,0
2040e344:	00000813          	li	a6,0
2040e348:	fef42423          	sw	a5,-24(s0)
2040e34c:	ff042623          	sw	a6,-20(s0)
    while (str[len] != '\0') ++len;
2040e350:	fe842783          	lw	a5,-24(s0)
2040e354:	fdc42703          	lw	a4,-36(s0)
2040e358:	00f707b3          	add	a5,a4,a5
2040e35c:	0007c783          	lbu	a5,0(a5)
2040e360:	02078c63          	beqz	a5,2040e398 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc+0x68>
2040e364:	fe842683          	lw	a3,-24(s0)
2040e368:	fec42703          	lw	a4,-20(s0)
2040e36c:	00100593          	li	a1,1
2040e370:	00000613          	li	a2,0
2040e374:	00b687b3          	add	a5,a3,a1
2040e378:	00078513          	mv	a0,a5
2040e37c:	00d53533          	sltu	a0,a0,a3
2040e380:	00c70833          	add	a6,a4,a2
2040e384:	01050733          	add	a4,a0,a6
2040e388:	00070813          	mv	a6,a4
2040e38c:	fef42423          	sw	a5,-24(s0)
2040e390:	ff042623          	sw	a6,-20(s0)
2040e394:	fbdff06f          	j	2040e350 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc+0x20>
    return len;
2040e398:	fe842783          	lw	a5,-24(s0)
2040e39c:	fec42803          	lw	a6,-20(s0)
  }
2040e3a0:	00078513          	mv	a0,a5
2040e3a4:	00080593          	mv	a1,a6
2040e3a8:	02c12403          	lw	s0,44(sp)
2040e3ac:	03010113          	addi	sp,sp,48
2040e3b0:	00008067          	ret

2040e3b4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandlerC1EPNS1_7SessionEPNS1_11FrameBufferE>:
namespace runtime {
namespace micro_rpc {

class MicroIOHandler {
 public:
  MicroIOHandler(Session* session, FrameBuffer* receive_buffer)
2040e3b4:	fe010113          	addi	sp,sp,-32
2040e3b8:	00812e23          	sw	s0,28(sp)
2040e3bc:	02010413          	addi	s0,sp,32
2040e3c0:	fea42623          	sw	a0,-20(s0)
2040e3c4:	feb42423          	sw	a1,-24(s0)
2040e3c8:	fec42223          	sw	a2,-28(s0)
      : session_{session}, receive_buffer_{receive_buffer} {}
2040e3cc:	fec42783          	lw	a5,-20(s0)
2040e3d0:	fe842703          	lw	a4,-24(s0)
2040e3d4:	00e7a023          	sw	a4,0(a5)
2040e3d8:	fec42783          	lw	a5,-20(s0)
2040e3dc:	fe442703          	lw	a4,-28(s0)
2040e3e0:	00e7a223          	sw	a4,4(a5)
2040e3e4:	00000013          	nop
2040e3e8:	01c12403          	lw	s0,28(sp)
2040e3ec:	02010113          	addi	sp,sp,32
2040e3f0:	00008067          	ret

2040e3f4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>:

  void MessageStart(size_t message_size_bytes) {
2040e3f4:	fe010113          	addi	sp,sp,-32
2040e3f8:	00112e23          	sw	ra,28(sp)
2040e3fc:	00812c23          	sw	s0,24(sp)
2040e400:	02010413          	addi	s0,sp,32
2040e404:	fea42623          	sw	a0,-20(s0)
2040e408:	feb42423          	sw	a1,-24(s0)
    session_->StartMessage(MessageType::kNormal, message_size_bytes + 8);
2040e40c:	fec42783          	lw	a5,-20(s0)
2040e410:	0007a703          	lw	a4,0(a5)
2040e414:	fe842783          	lw	a5,-24(s0)
2040e418:	00878793          	addi	a5,a5,8
2040e41c:	00078613          	mv	a2,a5
2040e420:	01000593          	li	a1,16
2040e424:	00070513          	mv	a0,a4
2040e428:	c51fe0ef          	jal	ra,2040d078 <_ZN3tvm7runtime9micro_rpc7Session12StartMessageENS1_11MessageTypeEj>
  }
2040e42c:	00000013          	nop
2040e430:	01c12083          	lw	ra,28(sp)
2040e434:	01812403          	lw	s0,24(sp)
2040e438:	02010113          	addi	sp,sp,32
2040e43c:	00008067          	ret

2040e440 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj>:

  ssize_t PosixWrite(const uint8_t* buf, size_t buf_size_bytes) {
2040e440:	fd010113          	addi	sp,sp,-48
2040e444:	02112623          	sw	ra,44(sp)
2040e448:	02812423          	sw	s0,40(sp)
2040e44c:	03010413          	addi	s0,sp,48
2040e450:	fca42e23          	sw	a0,-36(s0)
2040e454:	fcb42c23          	sw	a1,-40(s0)
2040e458:	fcc42a23          	sw	a2,-44(s0)
    int to_return = session_->SendBodyChunk(buf, buf_size_bytes);
2040e45c:	fdc42783          	lw	a5,-36(s0)
2040e460:	0007a783          	lw	a5,0(a5)
2040e464:	fd442603          	lw	a2,-44(s0)
2040e468:	fd842583          	lw	a1,-40(s0)
2040e46c:	00078513          	mv	a0,a5
2040e470:	cb1fe0ef          	jal	ra,2040d120 <_ZN3tvm7runtime9micro_rpc7Session13SendBodyChunkEPKhj>
2040e474:	00050793          	mv	a5,a0
2040e478:	fef42623          	sw	a5,-20(s0)
    if (to_return < 0) {
2040e47c:	fec42783          	lw	a5,-20(s0)
2040e480:	0007d663          	bgez	a5,2040e48c <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj+0x4c>
      return to_return;
2040e484:	fec42783          	lw	a5,-20(s0)
2040e488:	0080006f          	j	2040e490 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj+0x50>
    }
    return buf_size_bytes;
2040e48c:	fd442783          	lw	a5,-44(s0)
  }
2040e490:	00078513          	mv	a0,a5
2040e494:	02c12083          	lw	ra,44(sp)
2040e498:	02812403          	lw	s0,40(sp)
2040e49c:	03010113          	addi	sp,sp,48
2040e4a0:	00008067          	ret

2040e4a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>:

  void MessageDone() { CHECK_EQ(session_->FinishMessage(), kTvmErrorNoError, "FinishMessage"); }
2040e4a4:	fe010113          	addi	sp,sp,-32
2040e4a8:	00112e23          	sw	ra,28(sp)
2040e4ac:	00812c23          	sw	s0,24(sp)
2040e4b0:	02010413          	addi	s0,sp,32
2040e4b4:	fea42623          	sw	a0,-20(s0)
2040e4b8:	fec42783          	lw	a5,-20(s0)
2040e4bc:	0007a783          	lw	a5,0(a5)
2040e4c0:	00078513          	mv	a0,a5
2040e4c4:	ca9fe0ef          	jal	ra,2040d16c <_ZN3tvm7runtime9micro_rpc7Session13FinishMessageEv>
2040e4c8:	00050793          	mv	a5,a0
2040e4cc:	00f037b3          	snez	a5,a5
2040e4d0:	0ff7f793          	andi	a5,a5,255
2040e4d4:	02078a63          	beqz	a5,2040e508 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv+0x64>
2040e4d8:	00013717          	auipc	a4,0x13
2040e4dc:	1a070713          	addi	a4,a4,416 # 20421678 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x20>
2040e4e0:	00013697          	auipc	a3,0x13
2040e4e4:	1ac68693          	addi	a3,a3,428 # 2042168c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x34>
2040e4e8:	00013617          	auipc	a2,0x13
2040e4ec:	1a860613          	addi	a2,a2,424 # 20421690 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x38>
2040e4f0:	04600593          	li	a1,70
2040e4f4:	00013517          	auipc	a0,0x13
2040e4f8:	1b850513          	addi	a0,a0,440 # 204216ac <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x54>
2040e4fc:	a41ff0ef          	jal	ra,2040df3c <TVMLogf>
2040e500:	50000513          	li	a0,1280
2040e504:	f78f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
2040e508:	00000013          	nop
2040e50c:	01c12083          	lw	ra,28(sp)
2040e510:	01812403          	lw	s0,24(sp)
2040e514:	02010113          	addi	sp,sp,32
2040e518:	00008067          	ret

2040e51c <_ZN3tvm7runtime9micro_rpc14MicroIOHandler9PosixReadEPhj>:

  ssize_t PosixRead(uint8_t* buf, size_t buf_size_bytes) {
2040e51c:	fe010113          	addi	sp,sp,-32
2040e520:	00112e23          	sw	ra,28(sp)
2040e524:	00812c23          	sw	s0,24(sp)
2040e528:	02010413          	addi	s0,sp,32
2040e52c:	fea42623          	sw	a0,-20(s0)
2040e530:	feb42423          	sw	a1,-24(s0)
2040e534:	fec42223          	sw	a2,-28(s0)
    return receive_buffer_->Read(buf, buf_size_bytes);
2040e538:	fec42783          	lw	a5,-20(s0)
2040e53c:	0047a783          	lw	a5,4(a5)
2040e540:	fe442603          	lw	a2,-28(s0)
2040e544:	fe842583          	lw	a1,-24(s0)
2040e548:	00078513          	mv	a0,a5
2040e54c:	fc4fd0ef          	jal	ra,2040bd10 <_ZN3tvm7runtime9micro_rpc11FrameBuffer4ReadEPhj>
2040e550:	00050793          	mv	a5,a0
  }
2040e554:	00078513          	mv	a0,a5
2040e558:	01c12083          	lw	ra,28(sp)
2040e55c:	01812403          	lw	s0,24(sp)
2040e560:	02010113          	addi	sp,sp,32
2040e564:	00008067          	ret

2040e568 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler5CloseEv>:

  void Close() {}
2040e568:	fe010113          	addi	sp,sp,-32
2040e56c:	00812e23          	sw	s0,28(sp)
2040e570:	02010413          	addi	s0,sp,32
2040e574:	fea42623          	sw	a0,-20(s0)
2040e578:	00000013          	nop
2040e57c:	01c12403          	lw	s0,28(sp)
2040e580:	02010113          	addi	sp,sp,32
2040e584:	00008067          	ret

2040e588 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>:

  void Exit(int code) {
2040e588:	fe010113          	addi	sp,sp,-32
2040e58c:	00812e23          	sw	s0,28(sp)
2040e590:	02010413          	addi	s0,sp,32
2040e594:	fea42623          	sw	a0,-20(s0)
2040e598:	feb42423          	sw	a1,-24(s0)
    for (;;) {
2040e59c:	0000006f          	j	2040e59c <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi+0x14>

2040e5a0 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamC1Ev>:
void* g_write_func_ctx = nullptr;
}  // namespace

class SerialWriteStream : public WriteStream {
 public:
  SerialWriteStream() {}
2040e5a0:	fe010113          	addi	sp,sp,-32
2040e5a4:	00112e23          	sw	ra,28(sp)
2040e5a8:	00812c23          	sw	s0,24(sp)
2040e5ac:	02010413          	addi	s0,sp,32
2040e5b0:	fea42623          	sw	a0,-20(s0)
2040e5b4:	fec42783          	lw	a5,-20(s0)
2040e5b8:	00078513          	mv	a0,a5
2040e5bc:	cf1ff0ef          	jal	ra,2040e2ac <_ZN3tvm7runtime9micro_rpc11WriteStreamC1Ev>
2040e5c0:	00013717          	auipc	a4,0x13
2040e5c4:	39c70713          	addi	a4,a4,924 # 2042195c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x8>
2040e5c8:	fec42783          	lw	a5,-20(s0)
2040e5cc:	00e7a023          	sw	a4,0(a5)
2040e5d0:	00000013          	nop
2040e5d4:	01c12083          	lw	ra,28(sp)
2040e5d8:	01812403          	lw	s0,24(sp)
2040e5dc:	02010113          	addi	sp,sp,32
2040e5e0:	00008067          	ret

2040e5e4 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD1Ev>:
  virtual ~SerialWriteStream() {}
2040e5e4:	fe010113          	addi	sp,sp,-32
2040e5e8:	00112e23          	sw	ra,28(sp)
2040e5ec:	00812c23          	sw	s0,24(sp)
2040e5f0:	02010413          	addi	s0,sp,32
2040e5f4:	fea42623          	sw	a0,-20(s0)
2040e5f8:	00013717          	auipc	a4,0x13
2040e5fc:	36470713          	addi	a4,a4,868 # 2042195c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x8>
2040e600:	fec42783          	lw	a5,-20(s0)
2040e604:	00e7a023          	sw	a4,0(a5)
2040e608:	fec42783          	lw	a5,-20(s0)
2040e60c:	00078513          	mv	a0,a5
2040e610:	e80ff0ef          	jal	ra,2040dc90 <_ZN3tvm7runtime9micro_rpc11WriteStreamD1Ev>
2040e614:	00000013          	nop
2040e618:	01c12083          	lw	ra,28(sp)
2040e61c:	01812403          	lw	s0,24(sp)
2040e620:	02010113          	addi	sp,sp,32
2040e624:	00008067          	ret

2040e628 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD0Ev>:
2040e628:	fe010113          	addi	sp,sp,-32
2040e62c:	00112e23          	sw	ra,28(sp)
2040e630:	00812c23          	sw	s0,24(sp)
2040e634:	02010413          	addi	s0,sp,32
2040e638:	fea42623          	sw	a0,-20(s0)
2040e63c:	fec42503          	lw	a0,-20(s0)
2040e640:	fa5ff0ef          	jal	ra,2040e5e4 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamD1Ev>
2040e644:	fec42503          	lw	a0,-20(s0)
2040e648:	098000ef          	jal	ra,2040e6e0 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamdlEPv>
2040e64c:	01c12083          	lw	ra,28(sp)
2040e650:	01812403          	lw	s0,24(sp)
2040e654:	02010113          	addi	sp,sp,32
2040e658:	00008067          	ret

2040e65c <_ZN3tvm7runtime9micro_rpc17SerialWriteStream5WriteEPKhj>:

  ssize_t Write(const uint8_t* data, size_t data_size_bytes) override {
2040e65c:	fe010113          	addi	sp,sp,-32
2040e660:	00112e23          	sw	ra,28(sp)
2040e664:	00812c23          	sw	s0,24(sp)
2040e668:	02010413          	addi	s0,sp,32
2040e66c:	fea42623          	sw	a0,-20(s0)
2040e670:	feb42423          	sw	a1,-24(s0)
2040e674:	fec42223          	sw	a2,-28(s0)
    return g_write_func(g_write_func_ctx, data, data_size_bytes);
2040e678:	5fbf3797          	auipc	a5,0x5fbf3
2040e67c:	83878793          	addi	a5,a5,-1992 # 80000eb0 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_112g_write_funcE>
2040e680:	0007a703          	lw	a4,0(a5)
2040e684:	5fbf3797          	auipc	a5,0x5fbf3
2040e688:	83078793          	addi	a5,a5,-2000 # 80000eb4 <_ZN3tvm7runtime9micro_rpc12_GLOBAL__N_116g_write_func_ctxE>
2040e68c:	0007a783          	lw	a5,0(a5)
2040e690:	fe442603          	lw	a2,-28(s0)
2040e694:	fe842583          	lw	a1,-24(s0)
2040e698:	00078513          	mv	a0,a5
2040e69c:	000700e7          	jalr	a4
2040e6a0:	00050793          	mv	a5,a0
  }
2040e6a4:	00078513          	mv	a0,a5
2040e6a8:	01c12083          	lw	ra,28(sp)
2040e6ac:	01812403          	lw	s0,24(sp)
2040e6b0:	02010113          	addi	sp,sp,32
2040e6b4:	00008067          	ret

2040e6b8 <_ZN3tvm7runtime9micro_rpc17SerialWriteStream10PacketDoneEb>:

  void PacketDone(bool is_valid) override {}
2040e6b8:	fe010113          	addi	sp,sp,-32
2040e6bc:	00812e23          	sw	s0,28(sp)
2040e6c0:	02010413          	addi	s0,sp,32
2040e6c4:	fea42623          	sw	a0,-20(s0)
2040e6c8:	00058793          	mv	a5,a1
2040e6cc:	fef405a3          	sb	a5,-21(s0)
2040e6d0:	00000013          	nop
2040e6d4:	01c12403          	lw	s0,28(sp)
2040e6d8:	02010113          	addi	sp,sp,32
2040e6dc:	00008067          	ret

2040e6e0 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamdlEPv>:

 private:
  void operator delete(void*) noexcept {}  // NOLINT(readability/casting)
2040e6e0:	fe010113          	addi	sp,sp,-32
2040e6e4:	00812e23          	sw	s0,28(sp)
2040e6e8:	02010413          	addi	s0,sp,32
2040e6ec:	fea42623          	sw	a0,-20(s0)
2040e6f0:	00000013          	nop
2040e6f4:	01c12403          	lw	s0,28(sp)
2040e6f8:	02010113          	addi	sp,sp,32
2040e6fc:	00008067          	ret

2040e700 <_ZN3tvm7runtime9micro_rpc7SessionD1Ev>:
class Session {
2040e700:	fe010113          	addi	sp,sp,-32
2040e704:	00112e23          	sw	ra,28(sp)
2040e708:	00812c23          	sw	s0,24(sp)
2040e70c:	02010413          	addi	s0,sp,32
2040e710:	fea42623          	sw	a0,-20(s0)
2040e714:	fec42783          	lw	a5,-20(s0)
2040e718:	00878793          	addi	a5,a5,8
2040e71c:	00078513          	mv	a0,a5
2040e720:	c00ff0ef          	jal	ra,2040db20 <_ZN3tvm7runtime9micro_rpc7Session15SessionReceiverD1Ev>
2040e724:	00000013          	nop
2040e728:	01c12083          	lw	ra,28(sp)
2040e72c:	01812403          	lw	s0,24(sp)
2040e730:	02010113          	addi	sp,sp,32
2040e734:	00008067          	ret

2040e738 <_ZN3tvm7runtime9micro_rpc14MicroRPCServerC1EPhjPFiPvPKhjES4_>:
};

class MicroRPCServer {
 public:
  MicroRPCServer(uint8_t* receive_storage, size_t receive_storage_size_bytes,
2040e738:	fd010113          	addi	sp,sp,-48
2040e73c:	02112623          	sw	ra,44(sp)
2040e740:	02812423          	sw	s0,40(sp)
2040e744:	02912223          	sw	s1,36(sp)
2040e748:	03010413          	addi	s0,sp,48
2040e74c:	fea42623          	sw	a0,-20(s0)
2040e750:	feb42423          	sw	a1,-24(s0)
2040e754:	fec42223          	sw	a2,-28(s0)
2040e758:	fed42023          	sw	a3,-32(s0)
2040e75c:	fce42e23          	sw	a4,-36(s0)
        framer_{&send_stream_},
        session_{&framer_, &receive_buffer_, &HandleCompleteMessageCb, this},
        io_{&session_, &receive_buffer_},
        unframer_{session_.Receiver()},
        rpc_server_{&io_},
        is_running_{true} {}
2040e760:	fec42783          	lw	a5,-20(s0)
2040e764:	fe442603          	lw	a2,-28(s0)
2040e768:	fe842583          	lw	a1,-24(s0)
2040e76c:	00078513          	mv	a0,a5
2040e770:	985ff0ef          	jal	ra,2040e0f4 <_ZN3tvm7runtime9micro_rpc11FrameBufferC1EPhj>
2040e774:	fec42783          	lw	a5,-20(s0)
2040e778:	01078793          	addi	a5,a5,16
2040e77c:	00078513          	mv	a0,a5
2040e780:	e21ff0ef          	jal	ra,2040e5a0 <_ZN3tvm7runtime9micro_rpc17SerialWriteStreamC1Ev>
2040e784:	fec42783          	lw	a5,-20(s0)
2040e788:	01478713          	addi	a4,a5,20
2040e78c:	fec42783          	lw	a5,-20(s0)
2040e790:	01078793          	addi	a5,a5,16
2040e794:	00078593          	mv	a1,a5
2040e798:	00070513          	mv	a0,a4
2040e79c:	9f1ff0ef          	jal	ra,2040e18c <_ZN3tvm7runtime9micro_rpc6FramerC1EPNS1_11WriteStreamE>
2040e7a0:	fec42783          	lw	a5,-20(s0)
2040e7a4:	02478513          	addi	a0,a5,36
2040e7a8:	fec42783          	lw	a5,-20(s0)
2040e7ac:	01478793          	addi	a5,a5,20
2040e7b0:	fec42603          	lw	a2,-20(s0)
2040e7b4:	fec42703          	lw	a4,-20(s0)
2040e7b8:	00000697          	auipc	a3,0x0
2040e7bc:	35868693          	addi	a3,a3,856 # 2040eb10 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer23HandleCompleteMessageCbEPvNS1_11MessageTypeEPNS1_11FrameBufferE>
2040e7c0:	00078593          	mv	a1,a5
2040e7c4:	a09ff0ef          	jal	ra,2040e1cc <_ZN3tvm7runtime9micro_rpc7SessionC1EPNS1_6FramerEPNS1_11FrameBufferEPFvPvNS1_11MessageTypeES6_ES7_>
2040e7c8:	fec42783          	lw	a5,-20(s0)
2040e7cc:	04878713          	addi	a4,a5,72
2040e7d0:	fec42783          	lw	a5,-20(s0)
2040e7d4:	02478793          	addi	a5,a5,36
2040e7d8:	fec42683          	lw	a3,-20(s0)
2040e7dc:	00068613          	mv	a2,a3
2040e7e0:	00078593          	mv	a1,a5
2040e7e4:	00070513          	mv	a0,a4
2040e7e8:	bcdff0ef          	jal	ra,2040e3b4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandlerC1EPNS1_7SessionEPNS1_11FrameBufferE>
2040e7ec:	fec42783          	lw	a5,-20(s0)
2040e7f0:	05078493          	addi	s1,a5,80
2040e7f4:	fec42783          	lw	a5,-20(s0)
2040e7f8:	02478793          	addi	a5,a5,36
2040e7fc:	00078513          	mv	a0,a5
2040e800:	a85ff0ef          	jal	ra,2040e284 <_ZN3tvm7runtime9micro_rpc7Session8ReceiverEv>
2040e804:	00050793          	mv	a5,a0
2040e808:	00078593          	mv	a1,a5
2040e80c:	00048513          	mv	a0,s1
2040e810:	935ff0ef          	jal	ra,2040e144 <_ZN3tvm7runtime9micro_rpc8UnframerC1EPNS1_11WriteStreamE>
2040e814:	fec42783          	lw	a5,-20(s0)
2040e818:	0f078713          	addi	a4,a5,240
2040e81c:	fec42783          	lw	a5,-20(s0)
2040e820:	04878793          	addi	a5,a5,72
2040e824:	00078593          	mv	a1,a5
2040e828:	00070513          	mv	a0,a4
2040e82c:	32c000ef          	jal	ra,2040eb58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEC1EPS3_>
2040e830:	fec42783          	lw	a5,-20(s0)
2040e834:	00100713          	li	a4,1
2040e838:	10e78423          	sb	a4,264(a5)
2040e83c:	00000013          	nop
2040e840:	02c12083          	lw	ra,44(sp)
2040e844:	02812403          	lw	s0,40(sp)
2040e848:	02412483          	lw	s1,36(sp)
2040e84c:	03010113          	addi	sp,sp,48
2040e850:	00008067          	ret

2040e854 <_ZN3tvm7runtime9micro_rpc14MicroRPCServernwEjPv>:

  void* operator new(size_t count, void* ptr) { return ptr; }
2040e854:	fe010113          	addi	sp,sp,-32
2040e858:	00812e23          	sw	s0,28(sp)
2040e85c:	02010413          	addi	s0,sp,32
2040e860:	fea42623          	sw	a0,-20(s0)
2040e864:	feb42423          	sw	a1,-24(s0)
2040e868:	fe842783          	lw	a5,-24(s0)
2040e86c:	00078513          	mv	a0,a5
2040e870:	01c12403          	lw	s0,28(sp)
2040e874:	02010113          	addi	sp,sp,32
2040e878:	00008067          	ret

2040e87c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv>:

  void Initialize() {
2040e87c:	fd010113          	addi	sp,sp,-48
2040e880:	02112623          	sw	ra,44(sp)
2040e884:	02812423          	sw	s0,40(sp)
2040e888:	03010413          	addi	s0,sp,48
2040e88c:	fca42e23          	sw	a0,-36(s0)
    uint8_t initial_session_nonce = Session::kInvalidNonce;
2040e890:	fe0405a3          	sb	zero,-21(s0)
    tvm_crt_error_t error =
        TVMPlatformGenerateRandom(&initial_session_nonce, sizeof(initial_session_nonce));
2040e894:	feb40793          	addi	a5,s0,-21
2040e898:	00100593          	li	a1,1
2040e89c:	00078513          	mv	a0,a5
2040e8a0:	c08f20ef          	jal	ra,20400ca8 <TVMPlatformGenerateRandom>
2040e8a4:	fea42623          	sw	a0,-20(s0)
    CHECK_EQ(kTvmErrorNoError, error, "generating random session id");
2040e8a8:	fec42783          	lw	a5,-20(s0)
2040e8ac:	02078a63          	beqz	a5,2040e8e0 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv+0x64>
2040e8b0:	00013717          	auipc	a4,0x13
2040e8b4:	e6070713          	addi	a4,a4,-416 # 20421710 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0xb8>
2040e8b8:	00013697          	auipc	a3,0x13
2040e8bc:	dd468693          	addi	a3,a3,-556 # 2042168c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x34>
2040e8c0:	00013617          	auipc	a2,0x13
2040e8c4:	db860613          	addi	a2,a2,-584 # 20421678 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x20>
2040e8c8:	07f00593          	li	a1,127
2040e8cc:	00013517          	auipc	a0,0x13
2040e8d0:	e4c50513          	addi	a0,a0,-436 # 20421718 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0xc0>
2040e8d4:	e68ff0ef          	jal	ra,2040df3c <TVMLogf>
2040e8d8:	50000513          	li	a0,1280
2040e8dc:	ba0f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
    CHECK_EQ(kTvmErrorNoError, session_.Initialize(initial_session_nonce), "rpc server init");
2040e8e0:	fdc42783          	lw	a5,-36(s0)
2040e8e4:	02478793          	addi	a5,a5,36
2040e8e8:	feb44703          	lbu	a4,-21(s0)
2040e8ec:	00070593          	mv	a1,a4
2040e8f0:	00078513          	mv	a0,a5
2040e8f4:	975fe0ef          	jal	ra,2040d268 <_ZN3tvm7runtime9micro_rpc7Session10InitializeEh>
2040e8f8:	00050793          	mv	a5,a0
2040e8fc:	00f037b3          	snez	a5,a5
2040e900:	0ff7f793          	andi	a5,a5,255
2040e904:	02078a63          	beqz	a5,2040e938 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer10InitializeEv+0xbc>
2040e908:	00013717          	auipc	a4,0x13
2040e90c:	e8070713          	addi	a4,a4,-384 # 20421788 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x130>
2040e910:	00013697          	auipc	a3,0x13
2040e914:	d7c68693          	addi	a3,a3,-644 # 2042168c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x34>
2040e918:	00013617          	auipc	a2,0x13
2040e91c:	d6060613          	addi	a2,a2,-672 # 20421678 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x20>
2040e920:	08000593          	li	a1,128
2040e924:	00013517          	auipc	a0,0x13
2040e928:	e9050513          	addi	a0,a0,-368 # 204217b4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x15c>
2040e92c:	e10ff0ef          	jal	ra,2040df3c <TVMLogf>
2040e930:	50000513          	li	a0,1280
2040e934:	b48f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
  }
2040e938:	00000013          	nop
2040e93c:	02c12083          	lw	ra,44(sp)
2040e940:	02812403          	lw	s0,40(sp)
2040e944:	03010113          	addi	sp,sp,48
2040e948:	00008067          	ret

2040e94c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj>:
   *     data to process. On return, updated to point past data that has been consumed.
   * \param new_data_size_bytes Points to the number of valid bytes in `new_data`. On return,
   *     updated to the number of unprocessed bytes remaining in `new_data` (usually 0).
   * \return an error code indicating the outcome of the processing loop.
   */
  tvm_crt_error_t Loop(uint8_t** new_data, size_t* new_data_size_bytes) {
2040e94c:	fd010113          	addi	sp,sp,-48
2040e950:	02112623          	sw	ra,44(sp)
2040e954:	02812423          	sw	s0,40(sp)
2040e958:	03010413          	addi	s0,sp,48
2040e95c:	fca42e23          	sw	a0,-36(s0)
2040e960:	fcb42c23          	sw	a1,-40(s0)
2040e964:	fcc42a23          	sw	a2,-44(s0)
    if (!is_running_) {
2040e968:	fdc42783          	lw	a5,-36(s0)
2040e96c:	1087c783          	lbu	a5,264(a5)
2040e970:	0017c793          	xori	a5,a5,1
2040e974:	0ff7f793          	andi	a5,a5,255
2040e978:	00078663          	beqz	a5,2040e984 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0x38>
      return kTvmErrorPlatformShutdown;
2040e97c:	50200793          	li	a5,1282
2040e980:	0a80006f          	j	2040ea28 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xdc>
    }

    tvm_crt_error_t err = kTvmErrorNoError;
2040e984:	fe042623          	sw	zero,-20(s0)
    if (new_data != nullptr && new_data_size_bytes != nullptr && *new_data_size_bytes > 0) {
2040e988:	fd842783          	lw	a5,-40(s0)
2040e98c:	06078a63          	beqz	a5,2040ea00 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xb4>
2040e990:	fd442783          	lw	a5,-44(s0)
2040e994:	06078663          	beqz	a5,2040ea00 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xb4>
2040e998:	fd442783          	lw	a5,-44(s0)
2040e99c:	0007a783          	lw	a5,0(a5)
2040e9a0:	06078063          	beqz	a5,2040ea00 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xb4>
      size_t bytes_consumed;
      err = unframer_.Write(*new_data, *new_data_size_bytes, &bytes_consumed);
2040e9a4:	fdc42783          	lw	a5,-36(s0)
2040e9a8:	05078713          	addi	a4,a5,80
2040e9ac:	fd842783          	lw	a5,-40(s0)
2040e9b0:	0007a583          	lw	a1,0(a5)
2040e9b4:	fd442783          	lw	a5,-44(s0)
2040e9b8:	0007a783          	lw	a5,0(a5)
2040e9bc:	fe840693          	addi	a3,s0,-24
2040e9c0:	00078613          	mv	a2,a5
2040e9c4:	00070513          	mv	a0,a4
2040e9c8:	dc0fd0ef          	jal	ra,2040bf88 <_ZN3tvm7runtime9micro_rpc8Unframer5WriteEPKhjPj>
2040e9cc:	fea42623          	sw	a0,-20(s0)
      *new_data += bytes_consumed;
2040e9d0:	fd842783          	lw	a5,-40(s0)
2040e9d4:	0007a703          	lw	a4,0(a5)
2040e9d8:	fe842783          	lw	a5,-24(s0)
2040e9dc:	00f70733          	add	a4,a4,a5
2040e9e0:	fd842783          	lw	a5,-40(s0)
2040e9e4:	00e7a023          	sw	a4,0(a5)
      *new_data_size_bytes -= bytes_consumed;
2040e9e8:	fd442783          	lw	a5,-44(s0)
2040e9ec:	0007a703          	lw	a4,0(a5)
2040e9f0:	fe842783          	lw	a5,-24(s0)
2040e9f4:	40f70733          	sub	a4,a4,a5
2040e9f8:	fd442783          	lw	a5,-44(s0)
2040e9fc:	00e7a023          	sw	a4,0(a5)
    }

    if (err == kTvmErrorNoError && !is_running_) {
2040ea00:	fec42783          	lw	a5,-20(s0)
2040ea04:	02079063          	bnez	a5,2040ea24 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xd8>
2040ea08:	fdc42783          	lw	a5,-36(s0)
2040ea0c:	1087c783          	lbu	a5,264(a5)
2040ea10:	0017c793          	xori	a5,a5,1
2040ea14:	0ff7f793          	andi	a5,a5,255
2040ea18:	00078663          	beqz	a5,2040ea24 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer4LoopEPPhPj+0xd8>
      err = kTvmErrorPlatformShutdown;
2040ea1c:	50200793          	li	a5,1282
2040ea20:	fef42623          	sw	a5,-20(s0)
    }

    return err;
2040ea24:	fec42783          	lw	a5,-20(s0)
  }
2040ea28:	00078513          	mv	a0,a5
2040ea2c:	02c12083          	lw	ra,44(sp)
2040ea30:	02812403          	lw	s0,40(sp)
2040ea34:	03010113          	addi	sp,sp,48
2040ea38:	00008067          	ret

2040ea3c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer3LogEPKhj>:

  void Log(const uint8_t* message, size_t message_size_bytes) {
2040ea3c:	fd010113          	addi	sp,sp,-48
2040ea40:	02112623          	sw	ra,44(sp)
2040ea44:	02812423          	sw	s0,40(sp)
2040ea48:	03010413          	addi	s0,sp,48
2040ea4c:	fca42e23          	sw	a0,-36(s0)
2040ea50:	fcb42c23          	sw	a1,-40(s0)
2040ea54:	fcc42a23          	sw	a2,-44(s0)
    tvm_crt_error_t to_return =
        session_.SendMessage(MessageType::kLog, message, message_size_bytes);
2040ea58:	fdc42783          	lw	a5,-36(s0)
2040ea5c:	02478793          	addi	a5,a5,36
2040ea60:	fd442683          	lw	a3,-44(s0)
2040ea64:	fd842603          	lw	a2,-40(s0)
2040ea68:	00300593          	li	a1,3
2040ea6c:	00078513          	mv	a0,a5
2040ea70:	89dfe0ef          	jal	ra,2040d30c <_ZN3tvm7runtime9micro_rpc7Session11SendMessageENS1_11MessageTypeEPKhj>
2040ea74:	fea42623          	sw	a0,-20(s0)
    if (to_return != 0) {
2040ea78:	fec42783          	lw	a5,-20(s0)
2040ea7c:	00078663          	beqz	a5,2040ea88 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer3LogEPKhj+0x4c>
      TVMPlatformAbort(to_return);
2040ea80:	fec42503          	lw	a0,-20(s0)
2040ea84:	9f8f20ef          	jal	ra,20400c7c <TVMPlatformAbort>
    }
  }
2040ea88:	00000013          	nop
2040ea8c:	02c12083          	lw	ra,44(sp)
2040ea90:	02812403          	lw	s0,40(sp)
2040ea94:	03010113          	addi	sp,sp,48
2040ea98:	00008067          	ret

2040ea9c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE>:
  Unframer unframer_;
  MinRPCServer<MicroIOHandler> rpc_server_;

  bool is_running_;

  void HandleCompleteMessage(MessageType message_type, FrameBuffer* buf) {
2040ea9c:	fe010113          	addi	sp,sp,-32
2040eaa0:	00112e23          	sw	ra,28(sp)
2040eaa4:	00812c23          	sw	s0,24(sp)
2040eaa8:	02010413          	addi	s0,sp,32
2040eaac:	fea42623          	sw	a0,-20(s0)
2040eab0:	00058793          	mv	a5,a1
2040eab4:	fec42223          	sw	a2,-28(s0)
2040eab8:	fef405a3          	sb	a5,-21(s0)
    if (message_type != MessageType::kNormal) {
2040eabc:	feb44703          	lbu	a4,-21(s0)
2040eac0:	01000793          	li	a5,16
2040eac4:	02f71c63          	bne	a4,a5,2040eafc <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE+0x60>
      return;
    }

    is_running_ = rpc_server_.ProcessOnePacket();
2040eac8:	fec42783          	lw	a5,-20(s0)
2040eacc:	0f078793          	addi	a5,a5,240
2040ead0:	00078513          	mv	a0,a5
2040ead4:	0f4000ef          	jal	ra,2040ebc8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv>
2040ead8:	00050793          	mv	a5,a0
2040eadc:	00078713          	mv	a4,a5
2040eae0:	fec42783          	lw	a5,-20(s0)
2040eae4:	10e78423          	sb	a4,264(a5)
    session_.ClearReceiveBuffer();
2040eae8:	fec42783          	lw	a5,-20(s0)
2040eaec:	02478793          	addi	a5,a5,36
2040eaf0:	00078513          	mv	a0,a5
2040eaf4:	b29fe0ef          	jal	ra,2040d61c <_ZN3tvm7runtime9micro_rpc7Session18ClearReceiveBufferEv>
2040eaf8:	0080006f          	j	2040eb00 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE+0x64>
      return;
2040eafc:	00000013          	nop
  }
2040eb00:	01c12083          	lw	ra,28(sp)
2040eb04:	01812403          	lw	s0,24(sp)
2040eb08:	02010113          	addi	sp,sp,32
2040eb0c:	00008067          	ret

2040eb10 <_ZN3tvm7runtime9micro_rpc14MicroRPCServer23HandleCompleteMessageCbEPvNS1_11MessageTypeEPNS1_11FrameBufferE>:

  static void HandleCompleteMessageCb(void* context, MessageType message_type, FrameBuffer* buf) {
2040eb10:	fe010113          	addi	sp,sp,-32
2040eb14:	00112e23          	sw	ra,28(sp)
2040eb18:	00812c23          	sw	s0,24(sp)
2040eb1c:	02010413          	addi	s0,sp,32
2040eb20:	fea42623          	sw	a0,-20(s0)
2040eb24:	00058793          	mv	a5,a1
2040eb28:	fec42223          	sw	a2,-28(s0)
2040eb2c:	fef405a3          	sb	a5,-21(s0)
    static_cast<MicroRPCServer*>(context)->HandleCompleteMessage(message_type, buf);
2040eb30:	feb44783          	lbu	a5,-21(s0)
2040eb34:	fe442603          	lw	a2,-28(s0)
2040eb38:	00078593          	mv	a1,a5
2040eb3c:	fec42503          	lw	a0,-20(s0)
2040eb40:	f5dff0ef          	jal	ra,2040ea9c <_ZN3tvm7runtime9micro_rpc14MicroRPCServer21HandleCompleteMessageENS1_11MessageTypeEPNS1_11FrameBufferE>
  }
2040eb44:	00000013          	nop
2040eb48:	01c12083          	lw	ra,28(sp)
2040eb4c:	01812403          	lw	s0,24(sp)
2040eb50:	02010113          	addi	sp,sp,32
2040eb54:	00008067          	ret

2040eb58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEC1EPS3_>:

  /*!
   * \brief Constructor.
   * \param io The IO handler.
   */
  explicit MinRPCServer(TIOHandler* io) : io_(io), arena_(PageAllocator(io)) {}
2040eb58:	fd010113          	addi	sp,sp,-48
2040eb5c:	02112623          	sw	ra,44(sp)
2040eb60:	02812423          	sw	s0,40(sp)
2040eb64:	02912223          	sw	s1,36(sp)
2040eb68:	03010413          	addi	s0,sp,48
2040eb6c:	fca42e23          	sw	a0,-36(s0)
2040eb70:	fcb42c23          	sw	a1,-40(s0)
2040eb74:	fdc42783          	lw	a5,-36(s0)
2040eb78:	fd842703          	lw	a4,-40(s0)
2040eb7c:	00e7a023          	sw	a4,0(a5)
2040eb80:	fdc42783          	lw	a5,-36(s0)
2040eb84:	00478493          	addi	s1,a5,4
2040eb88:	fec40793          	addi	a5,s0,-20
2040eb8c:	fd842583          	lw	a1,-40(s0)
2040eb90:	00078513          	mv	a0,a5
2040eb94:	164000ef          	jal	ra,2040ecf8 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEEC1EPS4_>
2040eb98:	fec42583          	lw	a1,-20(s0)
2040eb9c:	00048513          	mv	a0,s1
2040eba0:	188000ef          	jal	ra,2040ed28 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEEC1ES7_>
2040eba4:	fdc42783          	lw	a5,-36(s0)
2040eba8:	00100713          	li	a4,1
2040ebac:	00e78a23          	sb	a4,20(a5)
2040ebb0:	00000013          	nop
2040ebb4:	02c12083          	lw	ra,44(sp)
2040ebb8:	02812403          	lw	s0,40(sp)
2040ebbc:	02412483          	lw	s1,36(sp)
2040ebc0:	03010113          	addi	sp,sp,48
2040ebc4:	00008067          	ret

2040ebc8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv>:
  /*! \brief Process a single request.
   *
   * \return true when the server should continue processing requests. false when it should be
   *  shutdown.
   */
  bool ProcessOnePacket() {
2040ebc8:	fd010113          	addi	sp,sp,-48
2040ebcc:	02112623          	sw	ra,44(sp)
2040ebd0:	02812423          	sw	s0,40(sp)
2040ebd4:	03010413          	addi	s0,sp,48
2040ebd8:	fca42e23          	sw	a0,-36(s0)
    RPCCode code;
    uint64_t packet_len;

    arena_.RecycleAll();
2040ebdc:	fdc42783          	lw	a5,-36(s0)
2040ebe0:	00478793          	addi	a5,a5,4
2040ebe4:	00078513          	mv	a0,a5
2040ebe8:	218000ef          	jal	ra,2040ee00 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10RecycleAllEv>
    allow_clean_shutdown_ = true;
2040ebec:	fdc42783          	lw	a5,-36(s0)
2040ebf0:	00100713          	li	a4,1
2040ebf4:	00e78a23          	sb	a4,20(a5)

    this->Read(&packet_len);
2040ebf8:	fe040793          	addi	a5,s0,-32
2040ebfc:	00078593          	mv	a1,a5
2040ec00:	fdc42503          	lw	a0,-36(s0)
2040ec04:	270000ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    if (packet_len == 0) return true;
2040ec08:	fe042683          	lw	a3,-32(s0)
2040ec0c:	fe442703          	lw	a4,-28(s0)
2040ec10:	00068793          	mv	a5,a3
2040ec14:	00e7e7b3          	or	a5,a5,a4
2040ec18:	00079663          	bnez	a5,2040ec24 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x5c>
2040ec1c:	00100793          	li	a5,1
2040ec20:	0c40006f          	j	2040ece4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x11c>
    this->Read(&code);
2040ec24:	fec40793          	addi	a5,s0,-20
2040ec28:	00078593          	mv	a1,a5
2040ec2c:	fdc42503          	lw	a0,-36(s0)
2040ec30:	280000ef          	jal	ra,2040eeb0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadINS0_7RPCCodeEEEvPT_>

    allow_clean_shutdown_ = false;
2040ec34:	fdc42783          	lw	a5,-36(s0)
2040ec38:	00078a23          	sb	zero,20(a5)

    if (code >= RPCCode::kSyscallCodeStart) {
2040ec3c:	fec42703          	lw	a4,-20(s0)
2040ec40:	00800793          	li	a5,8
2040ec44:	00e7dc63          	ble	a4,a5,2040ec5c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x94>
      this->HandleSyscallFunc(code);
2040ec48:	fec42783          	lw	a5,-20(s0)
2040ec4c:	00078593          	mv	a1,a5
2040ec50:	fdc42503          	lw	a0,-36(s0)
2040ec54:	298000ef          	jal	ra,2040eeec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE>
2040ec58:	0880006f          	j	2040ece0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
    } else {
      switch (code) {
2040ec5c:	fec42783          	lw	a5,-20(s0)
2040ec60:	00700713          	li	a4,7
2040ec64:	06f76463          	bltu	a4,a5,2040eccc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x104>
2040ec68:	00279713          	slli	a4,a5,0x2
2040ec6c:	00013797          	auipc	a5,0x13
2040ec70:	bf478793          	addi	a5,a5,-1036 # 20421860 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x208>
2040ec74:	00f707b3          	add	a5,a4,a5
2040ec78:	0007a703          	lw	a4,0(a5)
2040ec7c:	00013797          	auipc	a5,0x13
2040ec80:	be478793          	addi	a5,a5,-1052 # 20421860 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x208>
2040ec84:	00f707b3          	add	a5,a4,a5
2040ec88:	00078067          	jr	a5
        case RPCCode::kCallFunc: {
          HandleNormalCallFunc();
2040ec8c:	fdc42503          	lw	a0,-36(s0)
2040ec90:	454000ef          	jal	ra,2040f0e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv>
          break;
2040ec94:	04c0006f          	j	2040ece0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kInitServer: {
          HandleInitServer();
2040ec98:	fdc42503          	lw	a0,-36(s0)
2040ec9c:	5fc000ef          	jal	ra,2040f298 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16HandleInitServerEv>
          break;
2040eca0:	0400006f          	j	2040ece0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kCopyFromRemote: {
          HandleCopyFromRemote();
2040eca4:	fdc42503          	lw	a0,-36(s0)
2040eca8:	698000ef          	jal	ra,2040f340 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv>
          break;
2040ecac:	0340006f          	j	2040ece0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kCopyToRemote: {
          HandleCopyToRemote();
2040ecb0:	fdc42503          	lw	a0,-36(s0)
2040ecb4:	12d000ef          	jal	ra,2040f5e0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv>
          break;
2040ecb8:	0280006f          	j	2040ece0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x118>
        }
        case RPCCode::kShutdown: {
          this->Shutdown();
2040ecbc:	fdc42503          	lw	a0,-36(s0)
2040ecc0:	355000ef          	jal	ra,2040f814 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE8ShutdownEv>
          return false;
2040ecc4:	00000793          	li	a5,0
2040ecc8:	01c0006f          	j	2040ece4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16ProcessOnePacketEv+0x11c>
        }
        default: {
          this->ThrowError(RPCServerStatus::kUnknownRPCCode);
2040eccc:	00000613          	li	a2,0
2040ecd0:	00600593          	li	a1,6
2040ecd4:	fdc42503          	lw	a0,-36(s0)
2040ecd8:	385000ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
2040ecdc:	00000013          	nop
        }
      }
    }

    return true;
2040ece0:	00100793          	li	a5,1
  }
2040ece4:	00078513          	mv	a0,a5
2040ece8:	02c12083          	lw	ra,44(sp)
2040ecec:	02812403          	lw	s0,40(sp)
2040ecf0:	03010113          	addi	sp,sp,48
2040ecf4:	00008067          	ret

2040ecf8 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEEC1EPS4_>:
template <typename TIOHandler>
class PageAllocator {
 public:
  using ArenaPageHeader = tvm::support::ArenaPageHeader;

  explicit PageAllocator(TIOHandler* io) : io_(io) {}
2040ecf8:	fe010113          	addi	sp,sp,-32
2040ecfc:	00812e23          	sw	s0,28(sp)
2040ed00:	02010413          	addi	s0,sp,32
2040ed04:	fea42623          	sw	a0,-20(s0)
2040ed08:	feb42423          	sw	a1,-24(s0)
2040ed0c:	fec42783          	lw	a5,-20(s0)
2040ed10:	fe842703          	lw	a4,-24(s0)
2040ed14:	00e7a023          	sw	a4,0(a5)
2040ed18:	00000013          	nop
2040ed1c:	01c12403          	lw	s0,28(sp)
2040ed20:	02010113          	addi	sp,sp,32
2040ed24:	00008067          	ret

2040ed28 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEEC1ES7_>:
 *  chunk and frees them all only during destruction.
 */
template <typename PageAllocator>
class GenericArena {
 public:
  explicit GenericArena(PageAllocator alloc = PageAllocator()) : alloc_(alloc) {
2040ed28:	fe010113          	addi	sp,sp,-32
2040ed2c:	00112e23          	sw	ra,28(sp)
2040ed30:	00812c23          	sw	s0,24(sp)
2040ed34:	02010413          	addi	s0,sp,32
2040ed38:	fea42623          	sw	a0,-20(s0)
2040ed3c:	feb42423          	sw	a1,-24(s0)
2040ed40:	fec42783          	lw	a5,-20(s0)
2040ed44:	fe842703          	lw	a4,-24(s0)
2040ed48:	00e7a023          	sw	a4,0(a5)
2040ed4c:	fec42783          	lw	a5,-20(s0)
2040ed50:	0007a223          	sw	zero,4(a5)
2040ed54:	fec42783          	lw	a5,-20(s0)
2040ed58:	0007a423          	sw	zero,8(a5)
2040ed5c:	fec42783          	lw	a5,-20(s0)
2040ed60:	0007a623          	sw	zero,12(a5)
    // eagerly allocate the first page.
    head_ = tail_ = alloc_.allocate(1);
2040ed64:	fec42783          	lw	a5,-20(s0)
2040ed68:	00100593          	li	a1,1
2040ed6c:	00078513          	mv	a0,a5
2040ed70:	331000ef          	jal	ra,2040f8a0 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj>
2040ed74:	00050713          	mv	a4,a0
2040ed78:	fec42783          	lw	a5,-20(s0)
2040ed7c:	00e7a423          	sw	a4,8(a5)
2040ed80:	fec42783          	lw	a5,-20(s0)
2040ed84:	0087a703          	lw	a4,8(a5)
2040ed88:	fec42783          	lw	a5,-20(s0)
2040ed8c:	00e7a223          	sw	a4,4(a5)
    head_->next = nullptr;
2040ed90:	fec42783          	lw	a5,-20(s0)
2040ed94:	0047a783          	lw	a5,4(a5)
2040ed98:	0007a023          	sw	zero,0(a5)
  }
2040ed9c:	00000013          	nop
2040eda0:	01c12083          	lw	ra,28(sp)
2040eda4:	01812403          	lw	s0,24(sp)
2040eda8:	02010113          	addi	sp,sp,32
2040edac:	00008067          	ret

2040edb0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE7FreeAllEv>:
#if TVM_ARENA_HAS_DESTRUCTOR
  ~GenericArena() { this->FreeAll(); }
#endif

  /*! \brief Free all pages. */
  void FreeAll() {
2040edb0:	fe010113          	addi	sp,sp,-32
2040edb4:	00112e23          	sw	ra,28(sp)
2040edb8:	00812c23          	sw	s0,24(sp)
2040edbc:	02010413          	addi	s0,sp,32
2040edc0:	fea42623          	sw	a0,-20(s0)
    FreePageList(&head_);
2040edc4:	fec42783          	lw	a5,-20(s0)
2040edc8:	00478793          	addi	a5,a5,4
2040edcc:	00078593          	mv	a1,a5
2040edd0:	fec42503          	lw	a0,-20(s0)
2040edd4:	3ad000ef          	jal	ra,2040f980 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE>
    FreePageList(&free_list_);
2040edd8:	fec42783          	lw	a5,-20(s0)
2040eddc:	00c78793          	addi	a5,a5,12
2040ede0:	00078593          	mv	a1,a5
2040ede4:	fec42503          	lw	a0,-20(s0)
2040ede8:	399000ef          	jal	ra,2040f980 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE>
  }
2040edec:	00000013          	nop
2040edf0:	01c12083          	lw	ra,28(sp)
2040edf4:	01812403          	lw	s0,24(sp)
2040edf8:	02010113          	addi	sp,sp,32
2040edfc:	00008067          	ret

2040ee00 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10RecycleAllEv>:
  /*! \brief Recycle all the pages in the arena */
  void RecycleAll() {
2040ee00:	fe010113          	addi	sp,sp,-32
2040ee04:	00812e23          	sw	s0,28(sp)
2040ee08:	02010413          	addi	s0,sp,32
2040ee0c:	fea42623          	sw	a0,-20(s0)
    // put all the current list to the free list.
    tail_->next = free_list_;
2040ee10:	fec42783          	lw	a5,-20(s0)
2040ee14:	0087a783          	lw	a5,8(a5)
2040ee18:	fec42703          	lw	a4,-20(s0)
2040ee1c:	00c72703          	lw	a4,12(a4)
2040ee20:	00e7a023          	sw	a4,0(a5)
    // allocate the first in the free list to head
    free_list_ = head_->next;
2040ee24:	fec42783          	lw	a5,-20(s0)
2040ee28:	0047a783          	lw	a5,4(a5)
2040ee2c:	0007a703          	lw	a4,0(a5)
2040ee30:	fec42783          	lw	a5,-20(s0)
2040ee34:	00e7a623          	sw	a4,12(a5)
    head_->next = nullptr;
2040ee38:	fec42783          	lw	a5,-20(s0)
2040ee3c:	0047a783          	lw	a5,4(a5)
2040ee40:	0007a023          	sw	zero,0(a5)
    // Reset the head.
    head_->offset = sizeof(ArenaPageHeader);
2040ee44:	fec42783          	lw	a5,-20(s0)
2040ee48:	0047a783          	lw	a5,4(a5)
2040ee4c:	00c00713          	li	a4,12
2040ee50:	00e7a423          	sw	a4,8(a5)
    tail_ = head_;
2040ee54:	fec42783          	lw	a5,-20(s0)
2040ee58:	0047a703          	lw	a4,4(a5)
2040ee5c:	fec42783          	lw	a5,-20(s0)
2040ee60:	00e7a423          	sw	a4,8(a5)
  }
2040ee64:	00000013          	nop
2040ee68:	01c12403          	lw	s0,28(sp)
2040ee6c:	02010113          	addi	sp,sp,32
2040ee70:	00008067          	ret

2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>:
  void Read(T* data) {
2040ee74:	fe010113          	addi	sp,sp,-32
2040ee78:	00112e23          	sw	ra,28(sp)
2040ee7c:	00812c23          	sw	s0,24(sp)
2040ee80:	02010413          	addi	s0,sp,32
2040ee84:	fea42623          	sw	a0,-20(s0)
2040ee88:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
2040ee8c:	00800613          	li	a2,8
2040ee90:	fe842583          	lw	a1,-24(s0)
2040ee94:	fec42503          	lw	a0,-20(s0)
2040ee98:	355000ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2040ee9c:	00000013          	nop
2040eea0:	01c12083          	lw	ra,28(sp)
2040eea4:	01812403          	lw	s0,24(sp)
2040eea8:	02010113          	addi	sp,sp,32
2040eeac:	00008067          	ret

2040eeb0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadINS0_7RPCCodeEEEvPT_>:
  void Read(T* data) {
2040eeb0:	fe010113          	addi	sp,sp,-32
2040eeb4:	00112e23          	sw	ra,28(sp)
2040eeb8:	00812c23          	sw	s0,24(sp)
2040eebc:	02010413          	addi	s0,sp,32
2040eec0:	fea42623          	sw	a0,-20(s0)
2040eec4:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
2040eec8:	00400613          	li	a2,4
2040eecc:	fe842583          	lw	a1,-24(s0)
2040eed0:	fec42503          	lw	a0,-20(s0)
2040eed4:	319000ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2040eed8:	00000013          	nop
2040eedc:	01c12083          	lw	ra,28(sp)
2040eee0:	01812403          	lw	s0,24(sp)
2040eee4:	02010113          	addi	sp,sp,32
2040eee8:	00008067          	ret

2040eeec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE>:
  void HandleSyscallFunc(RPCCode code) {
2040eeec:	fd010113          	addi	sp,sp,-48
2040eef0:	02112623          	sw	ra,44(sp)
2040eef4:	02812423          	sw	s0,40(sp)
2040eef8:	03010413          	addi	s0,sp,48
2040eefc:	fca42e23          	sw	a0,-36(s0)
2040ef00:	fcb42c23          	sw	a1,-40(s0)
    RecvPackedSeq(&values, &tcodes, &num_args);
2040ef04:	fe440693          	addi	a3,s0,-28
2040ef08:	fe840713          	addi	a4,s0,-24
2040ef0c:	fec40793          	addi	a5,s0,-20
2040ef10:	00070613          	mv	a2,a4
2040ef14:	00078593          	mv	a1,a5
2040ef18:	fdc42503          	lw	a0,-36(s0)
2040ef1c:	3c5000ef          	jal	ra,2040fae0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>
    switch (code) {
2040ef20:	fd842783          	lw	a5,-40(s0)
2040ef24:	ff778793          	addi	a5,a5,-9
2040ef28:	00b00713          	li	a4,11
2040ef2c:	18f76863          	bltu	a4,a5,2040f0bc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1d0>
2040ef30:	00279713          	slli	a4,a5,0x2
2040ef34:	00013797          	auipc	a5,0x13
2040ef38:	94c78793          	addi	a5,a5,-1716 # 20421880 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x228>
2040ef3c:	00f707b3          	add	a5,a4,a5
2040ef40:	0007a703          	lw	a4,0(a5)
2040ef44:	00013797          	auipc	a5,0x13
2040ef48:	93c78793          	addi	a5,a5,-1732 # 20421880 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x228>
2040ef4c:	00f707b3          	add	a5,a4,a5
2040ef50:	00078067          	jr	a5
        this->SyscallFreeHandle(values, tcodes, num_args);
2040ef54:	fec42783          	lw	a5,-20(s0)
2040ef58:	fe842703          	lw	a4,-24(s0)
2040ef5c:	fe442683          	lw	a3,-28(s0)
2040ef60:	00070613          	mv	a2,a4
2040ef64:	00078593          	mv	a1,a5
2040ef68:	fdc42503          	lw	a0,-36(s0)
2040ef6c:	3bd000ef          	jal	ra,2040fb28 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii>
        break;
2040ef70:	1600006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallGetGlobalFunc(values, tcodes, num_args);
2040ef74:	fec42783          	lw	a5,-20(s0)
2040ef78:	fe842703          	lw	a4,-24(s0)
2040ef7c:	fe442683          	lw	a3,-28(s0)
2040ef80:	00070613          	mv	a2,a4
2040ef84:	00078593          	mv	a1,a5
2040ef88:	fdc42503          	lw	a0,-36(s0)
2040ef8c:	4e5000ef          	jal	ra,2040fc70 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii>
        break;
2040ef90:	1400006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->ReturnException("SetDevice not supported");
2040ef94:	00013597          	auipc	a1,0x13
2040ef98:	88458593          	addi	a1,a1,-1916 # 20421818 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x1c0>
2040ef9c:	fdc42503          	lw	a0,-36(s0)
2040efa0:	581000ef          	jal	ra,2040fd20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
        break;
2040efa4:	12c0006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->ReturnException("GetAttr not supported");
2040efa8:	00013597          	auipc	a1,0x13
2040efac:	88858593          	addi	a1,a1,-1912 # 20421830 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x1d8>
2040efb0:	fdc42503          	lw	a0,-36(s0)
2040efb4:	56d000ef          	jal	ra,2040fd20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
        break;
2040efb8:	1180006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevAllocData(values, tcodes, num_args);
2040efbc:	fec42783          	lw	a5,-20(s0)
2040efc0:	fe842703          	lw	a4,-24(s0)
2040efc4:	fe442683          	lw	a3,-28(s0)
2040efc8:	00070613          	mv	a2,a4
2040efcc:	00078593          	mv	a1,a5
2040efd0:	fdc42503          	lw	a0,-36(s0)
2040efd4:	585000ef          	jal	ra,2040fd58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii>
        break;
2040efd8:	0f80006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevAllocDataWithScope(values, tcodes, num_args);
2040efdc:	fec42783          	lw	a5,-20(s0)
2040efe0:	fe842703          	lw	a4,-24(s0)
2040efe4:	fe442683          	lw	a3,-28(s0)
2040efe8:	00070613          	mv	a2,a4
2040efec:	00078593          	mv	a1,a5
2040eff0:	fdc42503          	lw	a0,-36(s0)
2040eff4:	6d1000ef          	jal	ra,2040fec4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii>
        break;
2040eff8:	0d80006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevFreeData(values, tcodes, num_args);
2040effc:	fec42783          	lw	a5,-20(s0)
2040f000:	fe842703          	lw	a4,-24(s0)
2040f004:	fe442683          	lw	a3,-28(s0)
2040f008:	00070613          	mv	a2,a4
2040f00c:	00078593          	mv	a1,a5
2040f010:	fdc42503          	lw	a0,-36(s0)
2040f014:	7ed000ef          	jal	ra,20410000 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii>
        break;
2040f018:	0b80006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevCreateStream(values, tcodes, num_args);
2040f01c:	fec42783          	lw	a5,-20(s0)
2040f020:	fe842703          	lw	a4,-24(s0)
2040f024:	fe442683          	lw	a3,-28(s0)
2040f028:	00070613          	mv	a2,a4
2040f02c:	00078593          	mv	a1,a5
2040f030:	fdc42503          	lw	a0,-36(s0)
2040f034:	0b4010ef          	jal	ra,204100e8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii>
        break;
2040f038:	0980006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevFreeStream(values, tcodes, num_args);
2040f03c:	fec42783          	lw	a5,-20(s0)
2040f040:	fe842703          	lw	a4,-24(s0)
2040f044:	fe442683          	lw	a3,-28(s0)
2040f048:	00070613          	mv	a2,a4
2040f04c:	00078593          	mv	a1,a5
2040f050:	fdc42503          	lw	a0,-36(s0)
2040f054:	160010ef          	jal	ra,204101b4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii>
        break;
2040f058:	0780006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevStreamSync(values, tcodes, num_args);
2040f05c:	fec42783          	lw	a5,-20(s0)
2040f060:	fe842703          	lw	a4,-24(s0)
2040f064:	fe442683          	lw	a3,-28(s0)
2040f068:	00070613          	mv	a2,a4
2040f06c:	00078593          	mv	a1,a5
2040f070:	fdc42503          	lw	a0,-36(s0)
2040f074:	234010ef          	jal	ra,204102a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii>
        break;
2040f078:	0580006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallDevSetStream(values, tcodes, num_args);
2040f07c:	fec42783          	lw	a5,-20(s0)
2040f080:	fe842703          	lw	a4,-24(s0)
2040f084:	fe442683          	lw	a3,-28(s0)
2040f088:	00070613          	mv	a2,a4
2040f08c:	00078593          	mv	a1,a5
2040f090:	fdc42503          	lw	a0,-36(s0)
2040f094:	308010ef          	jal	ra,2041039c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii>
        break;
2040f098:	0380006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->SyscallCopyAmongRemote(values, tcodes, num_args);
2040f09c:	fec42783          	lw	a5,-20(s0)
2040f0a0:	fe842703          	lw	a4,-24(s0)
2040f0a4:	fe442683          	lw	a3,-28(s0)
2040f0a8:	00070613          	mv	a2,a4
2040f0ac:	00078593          	mv	a1,a5
2040f0b0:	fdc42503          	lw	a0,-36(s0)
2040f0b4:	3dc010ef          	jal	ra,20410490 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii>
        break;
2040f0b8:	0180006f          	j	2040f0d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17HandleSyscallFuncENS0_7RPCCodeE+0x1e4>
        this->ReturnException("Syscall not recognized");
2040f0bc:	00012597          	auipc	a1,0x12
2040f0c0:	78c58593          	addi	a1,a1,1932 # 20421848 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x1f0>
2040f0c4:	fdc42503          	lw	a0,-36(s0)
2040f0c8:	459000ef          	jal	ra,2040fd20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
        break;
2040f0cc:	00000013          	nop
  }
2040f0d0:	00000013          	nop
2040f0d4:	02c12083          	lw	ra,44(sp)
2040f0d8:	02812403          	lw	s0,40(sp)
2040f0dc:	03010113          	addi	sp,sp,48
2040f0e0:	00008067          	ret

2040f0e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv>:
  void HandleNormalCallFunc() {
2040f0e4:	f9010113          	addi	sp,sp,-112
2040f0e8:	06112623          	sw	ra,108(sp)
2040f0ec:	06812423          	sw	s0,104(sp)
2040f0f0:	07212223          	sw	s2,100(sp)
2040f0f4:	07312023          	sw	s3,96(sp)
2040f0f8:	07010413          	addi	s0,sp,112
2040f0fc:	f8a42e23          	sw	a0,-100(s0)
    this->Read(&call_handle);
2040f100:	fe040793          	addi	a5,s0,-32
2040f104:	00078593          	mv	a1,a5
2040f108:	f9c42503          	lw	a0,-100(s0)
2040f10c:	d69ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    RecvPackedSeq(&values, &tcodes, &num_args);
2040f110:	fd440693          	addi	a3,s0,-44
2040f114:	fd840713          	addi	a4,s0,-40
2040f118:	fdc40793          	addi	a5,s0,-36
2040f11c:	00070613          	mv	a2,a4
2040f120:	00078593          	mv	a1,a5
2040f124:	f9c42503          	lw	a0,-100(s0)
2040f128:	1b9000ef          	jal	ra,2040fae0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>
    int call_ecode = TVMFuncCall(reinterpret_cast<void*>(call_handle), values, tcodes, num_args,
2040f12c:	fe042783          	lw	a5,-32(s0)
2040f130:	fe442803          	lw	a6,-28(s0)
2040f134:	00078813          	mv	a6,a5
2040f138:	fdc42583          	lw	a1,-36(s0)
2040f13c:	fd842603          	lw	a2,-40(s0)
2040f140:	fd442683          	lw	a3,-44(s0)
2040f144:	fac40793          	addi	a5,s0,-84
2040f148:	00478513          	addi	a0,a5,4
2040f14c:	fb840793          	addi	a5,s0,-72
2040f150:	00878713          	addi	a4,a5,8
2040f154:	00050793          	mv	a5,a0
2040f158:	00080513          	mv	a0,a6
2040f15c:	bbdf20ef          	jal	ra,20401d18 <TVMFuncCall>
2040f160:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040f164:	fec42783          	lw	a5,-20(s0)
2040f168:	10079663          	bnez	a5,2040f274 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x190>
      int rv_tcode = ret_tcode[1];
2040f16c:	fb042783          	lw	a5,-80(s0)
2040f170:	fef42423          	sw	a5,-24(s0)
      ret_tcode[0] = kDLInt;
2040f174:	fa042623          	sw	zero,-84(s0)
      ret_value[0].v_int64 = rv_tcode;
2040f178:	fe842783          	lw	a5,-24(s0)
2040f17c:	00078913          	mv	s2,a5
2040f180:	41f7d793          	srai	a5,a5,0x1f
2040f184:	00078993          	mv	s3,a5
2040f188:	fb242c23          	sw	s2,-72(s0)
2040f18c:	fb342e23          	sw	s3,-68(s0)
      if (rv_tcode == kTVMNDArrayHandle) {
2040f190:	fe842703          	lw	a4,-24(s0)
2040f194:	00d00793          	li	a5,13
2040f198:	02f71e63          	bne	a4,a5,2040f1d4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0xf0>
        ret_tcode[1] = kTVMDLTensorHandle;
2040f19c:	00700793          	li	a5,7
2040f1a0:	faf42823          	sw	a5,-80(s0)
        ret_value[2].v_handle = ret_value[1].v_handle;
2040f1a4:	fc042783          	lw	a5,-64(s0)
2040f1a8:	fcf42423          	sw	a5,-56(s0)
        ret_tcode[2] = kTVMOpaqueHandle;
2040f1ac:	00300793          	li	a5,3
2040f1b0:	faf42a23          	sw	a5,-76(s0)
        this->ReturnPackedSeq(ret_value, ret_tcode, 3);
2040f1b4:	fac40713          	addi	a4,s0,-84
2040f1b8:	fb840793          	addi	a5,s0,-72
2040f1bc:	00300693          	li	a3,3
2040f1c0:	00070613          	mv	a2,a4
2040f1c4:	00078593          	mv	a1,a5
2040f1c8:	f9c42503          	lw	a0,-100(s0)
2040f1cc:	3d8010ef          	jal	ra,204105a4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
  }
2040f1d0:	0ac0006f          	j	2040f27c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
      } else if (rv_tcode == kTVMBytes) {
2040f1d4:	fe842703          	lw	a4,-24(s0)
2040f1d8:	00c00793          	li	a5,12
2040f1dc:	02f71c63          	bne	a4,a5,2040f214 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x130>
        ret_tcode[1] = kTVMBytes;
2040f1e0:	00c00793          	li	a5,12
2040f1e4:	faf42823          	sw	a5,-80(s0)
        this->ReturnPackedSeq(ret_value, ret_tcode, 2);
2040f1e8:	fac40713          	addi	a4,s0,-84
2040f1ec:	fb840793          	addi	a5,s0,-72
2040f1f0:	00200693          	li	a3,2
2040f1f4:	00070613          	mv	a2,a4
2040f1f8:	00078593          	mv	a1,a5
2040f1fc:	f9c42503          	lw	a0,-100(s0)
2040f200:	3a4010ef          	jal	ra,204105a4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
        TVMByteArrayFree(reinterpret_cast<TVMByteArray*>(ret_value[1].v_handle));  // NOLINT(*)
2040f204:	fc042783          	lw	a5,-64(s0)
2040f208:	00078513          	mv	a0,a5
2040f20c:	a95f20ef          	jal	ra,20401ca0 <TVMByteArrayFree>
  }
2040f210:	06c0006f          	j	2040f27c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
      } else if (rv_tcode == kTVMPackedFuncHandle || rv_tcode == kTVMModuleHandle) {
2040f214:	fe842703          	lw	a4,-24(s0)
2040f218:	00a00793          	li	a5,10
2040f21c:	00f70863          	beq	a4,a5,2040f22c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x148>
2040f220:	fe842703          	lw	a4,-24(s0)
2040f224:	00900793          	li	a5,9
2040f228:	02f71663          	bne	a4,a5,2040f254 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x170>
        ret_tcode[1] = kTVMOpaqueHandle;
2040f22c:	00300793          	li	a5,3
2040f230:	faf42823          	sw	a5,-80(s0)
        this->ReturnPackedSeq(ret_value, ret_tcode, 2);
2040f234:	fac40713          	addi	a4,s0,-84
2040f238:	fb840793          	addi	a5,s0,-72
2040f23c:	00200693          	li	a3,2
2040f240:	00070613          	mv	a2,a4
2040f244:	00078593          	mv	a1,a5
2040f248:	f9c42503          	lw	a0,-100(s0)
2040f24c:	358010ef          	jal	ra,204105a4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
  }
2040f250:	02c0006f          	j	2040f27c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
        this->ReturnPackedSeq(ret_value, ret_tcode, 2);
2040f254:	fac40713          	addi	a4,s0,-84
2040f258:	fb840793          	addi	a5,s0,-72
2040f25c:	00200693          	li	a3,2
2040f260:	00070613          	mv	a2,a4
2040f264:	00078593          	mv	a1,a5
2040f268:	f9c42503          	lw	a0,-100(s0)
2040f26c:	338010ef          	jal	ra,204105a4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>
  }
2040f270:	00c0006f          	j	2040f27c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleNormalCallFuncEv+0x198>
      this->ReturnLastTVMError();
2040f274:	f9c42503          	lw	a0,-100(s0)
2040f278:	374010ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f27c:	00000013          	nop
2040f280:	06c12083          	lw	ra,108(sp)
2040f284:	06812403          	lw	s0,104(sp)
2040f288:	06412903          	lw	s2,100(sp)
2040f28c:	06012983          	lw	s3,96(sp)
2040f290:	07010113          	addi	sp,sp,112
2040f294:	00008067          	ret

2040f298 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16HandleInitServerEv>:
  void HandleInitServer() {
2040f298:	fc010113          	addi	sp,sp,-64
2040f29c:	02112e23          	sw	ra,60(sp)
2040f2a0:	02812c23          	sw	s0,56(sp)
2040f2a4:	04010413          	addi	s0,sp,64
2040f2a8:	fca42623          	sw	a0,-52(s0)
    this->Read(&len);
2040f2ac:	fe040793          	addi	a5,s0,-32
2040f2b0:	00078593          	mv	a1,a5
2040f2b4:	fcc42503          	lw	a0,-52(s0)
2040f2b8:	bbdff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    char* proto_ver = this->ArenaAlloc<char>(len + 1);
2040f2bc:	fe042783          	lw	a5,-32(s0)
2040f2c0:	fe442803          	lw	a6,-28(s0)
2040f2c4:	00178793          	addi	a5,a5,1
2040f2c8:	00078593          	mv	a1,a5
2040f2cc:	fcc42503          	lw	a0,-52(s0)
2040f2d0:	358010ef          	jal	ra,20410628 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>
2040f2d4:	fea42623          	sw	a0,-20(s0)
    this->ReadArray(proto_ver, len);
2040f2d8:	fe042783          	lw	a5,-32(s0)
2040f2dc:	fe442803          	lw	a6,-28(s0)
2040f2e0:	00078613          	mv	a2,a5
2040f2e4:	fec42583          	lw	a1,-20(s0)
2040f2e8:	fcc42503          	lw	a0,-52(s0)
2040f2ec:	380010ef          	jal	ra,2041066c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>
    RecvPackedSeq(&values, &tcodes, &num_args);
2040f2f0:	fd440693          	addi	a3,s0,-44
2040f2f4:	fd840713          	addi	a4,s0,-40
2040f2f8:	fdc40793          	addi	a5,s0,-36
2040f2fc:	00070613          	mv	a2,a4
2040f300:	00078593          	mv	a1,a5
2040f304:	fcc42503          	lw	a0,-52(s0)
2040f308:	7d8000ef          	jal	ra,2040fae0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>
    MINRPC_CHECK(num_args == 0);
2040f30c:	fd442783          	lw	a5,-44(s0)
2040f310:	00078a63          	beqz	a5,2040f324 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE16HandleInitServerEv+0x8c>
2040f314:	00000613          	li	a2,0
2040f318:	00900593          	li	a1,9
2040f31c:	fcc42503          	lw	a0,-52(s0)
2040f320:	53c000ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    this->ReturnVoid();
2040f324:	fcc42503          	lw	a0,-52(s0)
2040f328:	380010ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040f32c:	00000013          	nop
2040f330:	03c12083          	lw	ra,60(sp)
2040f334:	03812403          	lw	s0,56(sp)
2040f338:	04010113          	addi	sp,sp,64
2040f33c:	00008067          	ret

2040f340 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv>:
  void HandleCopyFromRemote() {
2040f340:	f8010113          	addi	sp,sp,-128
2040f344:	06112e23          	sw	ra,124(sp)
2040f348:	06812c23          	sw	s0,120(sp)
2040f34c:	08010413          	addi	s0,sp,128
2040f350:	f8a42623          	sw	a0,-116(s0)
    DLTensor* arr = this->ArenaAlloc<DLTensor>(1);
2040f354:	00100593          	li	a1,1
2040f358:	f8c42503          	lw	a0,-116(s0)
2040f35c:	408010ef          	jal	ra,20410764 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>
2040f360:	fea42223          	sw	a0,-28(s0)
    this->Read(&data_handle);
2040f364:	fd840793          	addi	a5,s0,-40
2040f368:	00078593          	mv	a1,a5
2040f36c:	f8c42503          	lw	a0,-116(s0)
2040f370:	b05ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    arr->data = reinterpret_cast<void*>(data_handle);
2040f374:	fd842783          	lw	a5,-40(s0)
2040f378:	fdc42803          	lw	a6,-36(s0)
2040f37c:	00078713          	mv	a4,a5
2040f380:	fe442783          	lw	a5,-28(s0)
2040f384:	00e7a023          	sw	a4,0(a5)
    this->Read(&(arr->device));
2040f388:	fe442783          	lw	a5,-28(s0)
2040f38c:	00478793          	addi	a5,a5,4
2040f390:	00078593          	mv	a1,a5
2040f394:	f8c42503          	lw	a0,-116(s0)
2040f398:	410010ef          	jal	ra,204107a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
    this->Read(&(arr->ndim));
2040f39c:	fe442783          	lw	a5,-28(s0)
2040f3a0:	00c78793          	addi	a5,a5,12
2040f3a4:	00078593          	mv	a1,a5
2040f3a8:	f8c42503          	lw	a0,-116(s0)
2040f3ac:	438010ef          	jal	ra,204107e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    this->Read(&(arr->dtype));
2040f3b0:	fe442783          	lw	a5,-28(s0)
2040f3b4:	01078793          	addi	a5,a5,16
2040f3b8:	00078593          	mv	a1,a5
2040f3bc:	f8c42503          	lw	a0,-116(s0)
2040f3c0:	460010ef          	jal	ra,20410820 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
    arr->shape = this->ArenaAlloc<int64_t>(arr->ndim);
2040f3c4:	fe442783          	lw	a5,-28(s0)
2040f3c8:	00c7a783          	lw	a5,12(a5)
2040f3cc:	00078593          	mv	a1,a5
2040f3d0:	f8c42503          	lw	a0,-116(s0)
2040f3d4:	488010ef          	jal	ra,2041085c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>
2040f3d8:	00050713          	mv	a4,a0
2040f3dc:	fe442783          	lw	a5,-28(s0)
2040f3e0:	00e7aa23          	sw	a4,20(a5)
    this->ReadArray(arr->shape, arr->ndim);
2040f3e4:	fe442783          	lw	a5,-28(s0)
2040f3e8:	0147a703          	lw	a4,20(a5)
2040f3ec:	fe442783          	lw	a5,-28(s0)
2040f3f0:	00c7a783          	lw	a5,12(a5)
2040f3f4:	00078613          	mv	a2,a5
2040f3f8:	00070593          	mv	a1,a4
2040f3fc:	f8c42503          	lw	a0,-116(s0)
2040f400:	4a0010ef          	jal	ra,204108a0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>
    arr->strides = nullptr;
2040f404:	fe442783          	lw	a5,-28(s0)
2040f408:	0007ac23          	sw	zero,24(a5)
    this->Read(&(arr->byte_offset));
2040f40c:	fe442783          	lw	a5,-28(s0)
2040f410:	02078793          	addi	a5,a5,32
2040f414:	00078593          	mv	a1,a5
2040f418:	f8c42503          	lw	a0,-116(s0)
2040f41c:	a59ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    this->Read(&num_bytes);
2040f420:	fd040793          	addi	a5,s0,-48
2040f424:	00078593          	mv	a1,a5
2040f428:	f8c42503          	lw	a0,-116(s0)
2040f42c:	a49ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    int call_ecode = 0;
2040f430:	fe042423          	sw	zero,-24(s0)
    if (arr->device.device_type == kDLCPU) {
2040f434:	fe442783          	lw	a5,-28(s0)
2040f438:	0047a703          	lw	a4,4(a5)
2040f43c:	00100793          	li	a5,1
2040f440:	02f71463          	bne	a4,a5,2040f468 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x128>
      data_ptr = reinterpret_cast<uint8_t*>(data_handle) + arr->byte_offset;
2040f444:	fe442783          	lw	a5,-28(s0)
2040f448:	0247a803          	lw	a6,36(a5)
2040f44c:	0207a783          	lw	a5,32(a5)
2040f450:	00078713          	mv	a4,a5
2040f454:	fd842783          	lw	a5,-40(s0)
2040f458:	fdc42803          	lw	a6,-36(s0)
2040f45c:	00f707b3          	add	a5,a4,a5
2040f460:	fef42623          	sw	a5,-20(s0)
2040f464:	0b00006f          	j	2040f514 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x1d4>
      data_ptr = this->ArenaAlloc<uint8_t>(num_bytes);
2040f468:	fd042783          	lw	a5,-48(s0)
2040f46c:	fd442803          	lw	a6,-44(s0)
2040f470:	00078593          	mv	a1,a5
2040f474:	f8c42503          	lw	a0,-116(s0)
2040f478:	46c010ef          	jal	ra,204108e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIhEEPT_i>
2040f47c:	fea42623          	sw	a0,-20(s0)
      temp.data = reinterpret_cast<void*>(data_ptr);
2040f480:	fec42783          	lw	a5,-20(s0)
2040f484:	f8f42c23          	sw	a5,-104(s0)
      temp.device = DLDevice{kDLCPU, 0};
2040f488:	00100793          	li	a5,1
2040f48c:	f8f42e23          	sw	a5,-100(s0)
2040f490:	fa042023          	sw	zero,-96(s0)
      temp.ndim = arr->ndim;
2040f494:	fe442783          	lw	a5,-28(s0)
2040f498:	00c7a783          	lw	a5,12(a5)
2040f49c:	faf42223          	sw	a5,-92(s0)
      temp.dtype = arr->dtype;
2040f4a0:	fe442783          	lw	a5,-28(s0)
2040f4a4:	0107a783          	lw	a5,16(a5)
2040f4a8:	faf42423          	sw	a5,-88(s0)
      temp.shape = arr->shape;
2040f4ac:	fe442783          	lw	a5,-28(s0)
2040f4b0:	0147a783          	lw	a5,20(a5)
2040f4b4:	faf42623          	sw	a5,-84(s0)
      temp.strides = nullptr;
2040f4b8:	fa042823          	sw	zero,-80(s0)
      temp.byte_offset = 0;
2040f4bc:	00000793          	li	a5,0
2040f4c0:	00000813          	li	a6,0
2040f4c4:	faf42c23          	sw	a5,-72(s0)
2040f4c8:	fb042e23          	sw	a6,-68(s0)
      call_ecode = TVMDeviceCopyDataFromTo(arr, &temp, nullptr);
2040f4cc:	f9840793          	addi	a5,s0,-104
2040f4d0:	00000613          	li	a2,0
2040f4d4:	00078593          	mv	a1,a5
2040f4d8:	fe442503          	lw	a0,-28(s0)
2040f4dc:	940f20ef          	jal	ra,2040161c <TVMDeviceCopyDataFromTo>
2040f4e0:	fea42423          	sw	a0,-24(s0)
      if (call_ecode == 0) {
2040f4e4:	fe842783          	lw	a5,-24(s0)
2040f4e8:	02079663          	bnez	a5,2040f514 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x1d4>
        call_ecode = TVMSynchronize(arr->device.device_type, arr->device.device_id, nullptr);
2040f4ec:	fe442783          	lw	a5,-28(s0)
2040f4f0:	0047a783          	lw	a5,4(a5)
2040f4f4:	00078713          	mv	a4,a5
2040f4f8:	fe442783          	lw	a5,-28(s0)
2040f4fc:	0087a783          	lw	a5,8(a5)
2040f500:	00000613          	li	a2,0
2040f504:	00078593          	mv	a1,a5
2040f508:	00070513          	mv	a0,a4
2040f50c:	af4f20ef          	jal	ra,20401800 <TVMSynchronize>
2040f510:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2040f514:	fe842783          	lw	a5,-24(s0)
2040f518:	0a079663          	bnez	a5,2040f5c4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x284>
      RPCCode code = RPCCode::kCopyAck;
2040f51c:	00800793          	li	a5,8
2040f520:	fcf42623          	sw	a5,-52(s0)
      uint64_t packet_nbytes = sizeof(code) + num_bytes;
2040f524:	fd042783          	lw	a5,-48(s0)
2040f528:	fd442803          	lw	a6,-44(s0)
2040f52c:	00400593          	li	a1,4
2040f530:	00000613          	li	a2,0
2040f534:	00b786b3          	add	a3,a5,a1
2040f538:	00068513          	mv	a0,a3
2040f53c:	00f53533          	sltu	a0,a0,a5
2040f540:	00c80733          	add	a4,a6,a2
2040f544:	00e507b3          	add	a5,a0,a4
2040f548:	00078713          	mv	a4,a5
2040f54c:	00068793          	mv	a5,a3
2040f550:	00070813          	mv	a6,a4
2040f554:	fcf42023          	sw	a5,-64(s0)
2040f558:	fd042223          	sw	a6,-60(s0)
      io_->MessageStart(packet_nbytes);
2040f55c:	f8c42783          	lw	a5,-116(s0)
2040f560:	0007a703          	lw	a4,0(a5)
2040f564:	fc042783          	lw	a5,-64(s0)
2040f568:	fc442803          	lw	a6,-60(s0)
2040f56c:	00078593          	mv	a1,a5
2040f570:	00070513          	mv	a0,a4
2040f574:	e81fe0ef          	jal	ra,2040e3f4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
      this->Write(packet_nbytes);
2040f578:	fc040793          	addi	a5,s0,-64
2040f57c:	00078593          	mv	a1,a5
2040f580:	f8c42503          	lw	a0,-116(s0)
2040f584:	3a4010ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
      this->Write(code);
2040f588:	fcc40793          	addi	a5,s0,-52
2040f58c:	00078593          	mv	a1,a5
2040f590:	f8c42503          	lw	a0,-116(s0)
2040f594:	3cc010ef          	jal	ra,20410960 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
      this->WriteArray(data_ptr, num_bytes);
2040f598:	fd042783          	lw	a5,-48(s0)
2040f59c:	fd442803          	lw	a6,-44(s0)
2040f5a0:	00078613          	mv	a2,a5
2040f5a4:	fec42583          	lw	a1,-20(s0)
2040f5a8:	f8c42503          	lw	a0,-116(s0)
2040f5ac:	3ec010ef          	jal	ra,20410998 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIhEEvPT_j>
      io_->MessageDone();
2040f5b0:	f8c42783          	lw	a5,-116(s0)
2040f5b4:	0007a783          	lw	a5,0(a5)
2040f5b8:	00078513          	mv	a0,a5
2040f5bc:	ee9fe0ef          	jal	ra,2040e4a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
  }
2040f5c0:	00c0006f          	j	2040f5cc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20HandleCopyFromRemoteEv+0x28c>
      this->ReturnLastTVMError();
2040f5c4:	f8c42503          	lw	a0,-116(s0)
2040f5c8:	024010ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f5cc:	00000013          	nop
2040f5d0:	07c12083          	lw	ra,124(sp)
2040f5d4:	07812403          	lw	s0,120(sp)
2040f5d8:	08010113          	addi	sp,sp,128
2040f5dc:	00008067          	ret

2040f5e0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv>:
  void HandleCopyToRemote() {
2040f5e0:	f9010113          	addi	sp,sp,-112
2040f5e4:	06112623          	sw	ra,108(sp)
2040f5e8:	06812423          	sw	s0,104(sp)
2040f5ec:	07010413          	addi	s0,sp,112
2040f5f0:	f8a42e23          	sw	a0,-100(s0)
    DLTensor* arr = this->ArenaAlloc<DLTensor>(1);
2040f5f4:	00100593          	li	a1,1
2040f5f8:	f9c42503          	lw	a0,-100(s0)
2040f5fc:	168010ef          	jal	ra,20410764 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>
2040f600:	fea42423          	sw	a0,-24(s0)
    this->Read(&data_handle);
2040f604:	fd840793          	addi	a5,s0,-40
2040f608:	00078593          	mv	a1,a5
2040f60c:	f9c42503          	lw	a0,-100(s0)
2040f610:	865ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    arr->data = reinterpret_cast<void*>(data_handle);
2040f614:	fd842783          	lw	a5,-40(s0)
2040f618:	fdc42803          	lw	a6,-36(s0)
2040f61c:	00078713          	mv	a4,a5
2040f620:	fe842783          	lw	a5,-24(s0)
2040f624:	00e7a023          	sw	a4,0(a5)
    this->Read(&(arr->device));
2040f628:	fe842783          	lw	a5,-24(s0)
2040f62c:	00478793          	addi	a5,a5,4
2040f630:	00078593          	mv	a1,a5
2040f634:	f9c42503          	lw	a0,-100(s0)
2040f638:	170010ef          	jal	ra,204107a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
    this->Read(&(arr->ndim));
2040f63c:	fe842783          	lw	a5,-24(s0)
2040f640:	00c78793          	addi	a5,a5,12
2040f644:	00078593          	mv	a1,a5
2040f648:	f9c42503          	lw	a0,-100(s0)
2040f64c:	198010ef          	jal	ra,204107e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    this->Read(&(arr->dtype));
2040f650:	fe842783          	lw	a5,-24(s0)
2040f654:	01078793          	addi	a5,a5,16
2040f658:	00078593          	mv	a1,a5
2040f65c:	f9c42503          	lw	a0,-100(s0)
2040f660:	1c0010ef          	jal	ra,20410820 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
    arr->shape = this->ArenaAlloc<int64_t>(arr->ndim);
2040f664:	fe842783          	lw	a5,-24(s0)
2040f668:	00c7a783          	lw	a5,12(a5)
2040f66c:	00078593          	mv	a1,a5
2040f670:	f9c42503          	lw	a0,-100(s0)
2040f674:	1e8010ef          	jal	ra,2041085c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>
2040f678:	00050713          	mv	a4,a0
2040f67c:	fe842783          	lw	a5,-24(s0)
2040f680:	00e7aa23          	sw	a4,20(a5)
    this->ReadArray(arr->shape, arr->ndim);
2040f684:	fe842783          	lw	a5,-24(s0)
2040f688:	0147a703          	lw	a4,20(a5)
2040f68c:	fe842783          	lw	a5,-24(s0)
2040f690:	00c7a783          	lw	a5,12(a5)
2040f694:	00078613          	mv	a2,a5
2040f698:	00070593          	mv	a1,a4
2040f69c:	f9c42503          	lw	a0,-100(s0)
2040f6a0:	200010ef          	jal	ra,204108a0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>
    arr->strides = nullptr;
2040f6a4:	fe842783          	lw	a5,-24(s0)
2040f6a8:	0007ac23          	sw	zero,24(a5)
    this->Read(&(arr->byte_offset));
2040f6ac:	fe842783          	lw	a5,-24(s0)
2040f6b0:	02078793          	addi	a5,a5,32
2040f6b4:	00078593          	mv	a1,a5
2040f6b8:	f9c42503          	lw	a0,-100(s0)
2040f6bc:	fb8ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    this->Read(&num_bytes);
2040f6c0:	fd040793          	addi	a5,s0,-48
2040f6c4:	00078593          	mv	a1,a5
2040f6c8:	f9c42503          	lw	a0,-100(s0)
2040f6cc:	fa8ff0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    int call_ecode = 0;
2040f6d0:	fe042623          	sw	zero,-20(s0)
    if (arr->device.device_type == kDLCPU) {
2040f6d4:	fe842783          	lw	a5,-24(s0)
2040f6d8:	0047a703          	lw	a4,4(a5)
2040f6dc:	00100793          	li	a5,1
2040f6e0:	04f71063          	bne	a4,a5,2040f720 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x140>
      uint8_t* dptr = reinterpret_cast<uint8_t*>(data_handle) + arr->byte_offset;
2040f6e4:	fe842783          	lw	a5,-24(s0)
2040f6e8:	0247a803          	lw	a6,36(a5)
2040f6ec:	0207a783          	lw	a5,32(a5)
2040f6f0:	00078713          	mv	a4,a5
2040f6f4:	fd842783          	lw	a5,-40(s0)
2040f6f8:	fdc42803          	lw	a6,-36(s0)
2040f6fc:	00f707b3          	add	a5,a4,a5
2040f700:	fef42023          	sw	a5,-32(s0)
      this->ReadArray(dptr, num_bytes);
2040f704:	fd042783          	lw	a5,-48(s0)
2040f708:	fd442803          	lw	a6,-44(s0)
2040f70c:	00078613          	mv	a2,a5
2040f710:	fe042583          	lw	a1,-32(s0)
2040f714:	f9c42503          	lw	a0,-100(s0)
2040f718:	2bc010ef          	jal	ra,204109d4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIhEEvPT_j>
2040f71c:	0c80006f          	j	2040f7e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x204>
      uint8_t* temp_data = this->ArenaAlloc<uint8_t>(num_bytes);
2040f720:	fd042783          	lw	a5,-48(s0)
2040f724:	fd442803          	lw	a6,-44(s0)
2040f728:	00078593          	mv	a1,a5
2040f72c:	f9c42503          	lw	a0,-100(s0)
2040f730:	1b4010ef          	jal	ra,204108e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIhEEPT_i>
2040f734:	fea42223          	sw	a0,-28(s0)
      this->ReadArray(temp_data, num_bytes);
2040f738:	fd042783          	lw	a5,-48(s0)
2040f73c:	fd442803          	lw	a6,-44(s0)
2040f740:	00078613          	mv	a2,a5
2040f744:	fe442583          	lw	a1,-28(s0)
2040f748:	f9c42503          	lw	a0,-100(s0)
2040f74c:	288010ef          	jal	ra,204109d4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIhEEvPT_j>
      temp.data = temp_data;
2040f750:	fe442783          	lw	a5,-28(s0)
2040f754:	faf42423          	sw	a5,-88(s0)
      temp.device = DLDevice{kDLCPU, 0};
2040f758:	00100793          	li	a5,1
2040f75c:	faf42623          	sw	a5,-84(s0)
2040f760:	fa042823          	sw	zero,-80(s0)
      temp.ndim = arr->ndim;
2040f764:	fe842783          	lw	a5,-24(s0)
2040f768:	00c7a783          	lw	a5,12(a5)
2040f76c:	faf42a23          	sw	a5,-76(s0)
      temp.dtype = arr->dtype;
2040f770:	fe842783          	lw	a5,-24(s0)
2040f774:	0107a783          	lw	a5,16(a5)
2040f778:	faf42c23          	sw	a5,-72(s0)
      temp.shape = arr->shape;
2040f77c:	fe842783          	lw	a5,-24(s0)
2040f780:	0147a783          	lw	a5,20(a5)
2040f784:	faf42e23          	sw	a5,-68(s0)
      temp.strides = nullptr;
2040f788:	fc042023          	sw	zero,-64(s0)
      temp.byte_offset = 0;
2040f78c:	00000793          	li	a5,0
2040f790:	00000813          	li	a6,0
2040f794:	fcf42423          	sw	a5,-56(s0)
2040f798:	fd042623          	sw	a6,-52(s0)
      call_ecode = TVMDeviceCopyDataFromTo(&temp, arr, nullptr);
2040f79c:	fa840793          	addi	a5,s0,-88
2040f7a0:	00000613          	li	a2,0
2040f7a4:	fe842583          	lw	a1,-24(s0)
2040f7a8:	00078513          	mv	a0,a5
2040f7ac:	e71f10ef          	jal	ra,2040161c <TVMDeviceCopyDataFromTo>
2040f7b0:	fea42623          	sw	a0,-20(s0)
      if (call_ecode == 0) {
2040f7b4:	fec42783          	lw	a5,-20(s0)
2040f7b8:	02079663          	bnez	a5,2040f7e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x204>
        call_ecode = TVMSynchronize(arr->device.device_type, arr->device.device_id, nullptr);
2040f7bc:	fe842783          	lw	a5,-24(s0)
2040f7c0:	0047a783          	lw	a5,4(a5)
2040f7c4:	00078713          	mv	a4,a5
2040f7c8:	fe842783          	lw	a5,-24(s0)
2040f7cc:	0087a783          	lw	a5,8(a5)
2040f7d0:	00000613          	li	a2,0
2040f7d4:	00078593          	mv	a1,a5
2040f7d8:	00070513          	mv	a0,a4
2040f7dc:	824f20ef          	jal	ra,20401800 <TVMSynchronize>
2040f7e0:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040f7e4:	fec42783          	lw	a5,-20(s0)
2040f7e8:	00079863          	bnez	a5,2040f7f8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x218>
      this->ReturnVoid();
2040f7ec:	f9c42503          	lw	a0,-100(s0)
2040f7f0:	6b9000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040f7f4:	00c0006f          	j	2040f800 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18HandleCopyToRemoteEv+0x220>
      this->ReturnLastTVMError();
2040f7f8:	f9c42503          	lw	a0,-100(s0)
2040f7fc:	5f1000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040f800:	00000013          	nop
2040f804:	06c12083          	lw	ra,108(sp)
2040f808:	06812403          	lw	s0,104(sp)
2040f80c:	07010113          	addi	sp,sp,112
2040f810:	00008067          	ret

2040f814 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE8ShutdownEv>:
  void Shutdown() {
2040f814:	fe010113          	addi	sp,sp,-32
2040f818:	00112e23          	sw	ra,28(sp)
2040f81c:	00812c23          	sw	s0,24(sp)
2040f820:	02010413          	addi	s0,sp,32
2040f824:	fea42623          	sw	a0,-20(s0)
    arena_.FreeAll();
2040f828:	fec42783          	lw	a5,-20(s0)
2040f82c:	00478793          	addi	a5,a5,4
2040f830:	00078513          	mv	a0,a5
2040f834:	d7cff0ef          	jal	ra,2040edb0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE7FreeAllEv>
    io_->Close();
2040f838:	fec42783          	lw	a5,-20(s0)
2040f83c:	0007a783          	lw	a5,0(a5)
2040f840:	00078513          	mv	a0,a5
2040f844:	d25fe0ef          	jal	ra,2040e568 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler5CloseEv>
  }
2040f848:	00000013          	nop
2040f84c:	01c12083          	lw	ra,28(sp)
2040f850:	01812403          	lw	s0,24(sp)
2040f854:	02010113          	addi	sp,sp,32
2040f858:	00008067          	ret

2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>:
  void ThrowError(RPCServerStatus code, RPCCode info = RPCCode::kNone) {
2040f85c:	fe010113          	addi	sp,sp,-32
2040f860:	00112e23          	sw	ra,28(sp)
2040f864:	00812c23          	sw	s0,24(sp)
2040f868:	02010413          	addi	s0,sp,32
2040f86c:	fea42623          	sw	a0,-20(s0)
2040f870:	feb42423          	sw	a1,-24(s0)
2040f874:	fec42223          	sw	a2,-28(s0)
    io_->Exit(static_cast<int>(code));
2040f878:	fec42783          	lw	a5,-20(s0)
2040f87c:	0007a783          	lw	a5,0(a5)
2040f880:	fe842583          	lw	a1,-24(s0)
2040f884:	00078513          	mv	a0,a5
2040f888:	d01fe0ef          	jal	ra,2040e588 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
  }
2040f88c:	00000013          	nop
2040f890:	01c12083          	lw	ra,28(sp)
2040f894:	01812403          	lw	s0,24(sp)
2040f898:	02010113          	addi	sp,sp,32
2040f89c:	00008067          	ret

2040f8a0 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj>:

  ArenaPageHeader* allocate(size_t min_size) {
2040f8a0:	fd010113          	addi	sp,sp,-48
2040f8a4:	02112623          	sw	ra,44(sp)
2040f8a8:	02812423          	sw	s0,40(sp)
2040f8ac:	03010413          	addi	s0,sp,48
2040f8b0:	fca42e23          	sw	a0,-36(s0)
2040f8b4:	fcb42c23          	sw	a1,-40(s0)
    size_t npages = ((min_size + kPageSize - 1) / kPageSize);
2040f8b8:	fd842783          	lw	a5,-40(s0)
2040f8bc:	7ff78793          	addi	a5,a5,2047
2040f8c0:	00b7d793          	srli	a5,a5,0xb
2040f8c4:	fef42623          	sw	a5,-20(s0)
    void* data;

    if (TVMDeviceAllocDataSpace(DLDevice{kDLCPU, 0}, npages * kPageSize, kPageAlign,
2040f8c8:	00100813          	li	a6,1
2040f8cc:	00000893          	li	a7,0
2040f8d0:	fec42783          	lw	a5,-20(s0)
2040f8d4:	00b79613          	slli	a2,a5,0xb
2040f8d8:	f0077793          	andi	a5,a4,-256
2040f8dc:	00078713          	mv	a4,a5
2040f8e0:	ffff07b7          	lui	a5,0xffff0
2040f8e4:	0ff78793          	addi	a5,a5,255 # ffff00ff <pulp__FC+0xffff0100>
2040f8e8:	00f777b3          	and	a5,a4,a5
2040f8ec:	1007e793          	ori	a5,a5,256
2040f8f0:	00078713          	mv	a4,a5
2040f8f4:	000107b7          	lui	a5,0x10
2040f8f8:	fff78793          	addi	a5,a5,-1 # ffff <__stack_size+0xbfff>
2040f8fc:	00f77733          	and	a4,a4,a5
2040f900:	000107b7          	lui	a5,0x10
2040f904:	00f767b3          	or	a5,a4,a5
2040f908:	00078713          	mv	a4,a5
2040f90c:	fe440793          	addi	a5,s0,-28
2040f910:	00800693          	li	a3,8
2040f914:	00080513          	mv	a0,a6
2040f918:	00088593          	mv	a1,a7
2040f91c:	9f1f10ef          	jal	ra,2040130c <TVMDeviceAllocDataSpace>
2040f920:	00050793          	mv	a5,a0
                                DLDataType{kDLInt, 1, 1}, &data) != 0) {
2040f924:	00f037b3          	snez	a5,a5
2040f928:	0ff7f793          	andi	a5,a5,255
    if (TVMDeviceAllocDataSpace(DLDevice{kDLCPU, 0}, npages * kPageSize, kPageAlign,
2040f92c:	00078c63          	beqz	a5,2040f944 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj+0xa4>
      io_->Exit(static_cast<int>(RPCServerStatus::kAllocError));
2040f930:	fdc42783          	lw	a5,-36(s0)
2040f934:	0007a783          	lw	a5,0(a5) # 10000 <__stack_size+0xc000>
2040f938:	00c00593          	li	a1,12
2040f93c:	00078513          	mv	a0,a5
2040f940:	c49fe0ef          	jal	ra,2040e588 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
    }

    ArenaPageHeader* header = static_cast<ArenaPageHeader*>(data);
2040f944:	fe442783          	lw	a5,-28(s0)
2040f948:	fef42423          	sw	a5,-24(s0)
    header->size = npages * kPageSize;
2040f94c:	fec42783          	lw	a5,-20(s0)
2040f950:	00b79713          	slli	a4,a5,0xb
2040f954:	fe842783          	lw	a5,-24(s0)
2040f958:	00e7a223          	sw	a4,4(a5)
    header->offset = sizeof(ArenaPageHeader);
2040f95c:	fe842783          	lw	a5,-24(s0)
2040f960:	00c00713          	li	a4,12
2040f964:	00e7a423          	sw	a4,8(a5)
    return header;
2040f968:	fe842783          	lw	a5,-24(s0)
  }
2040f96c:	00078513          	mv	a0,a5
2040f970:	02c12083          	lw	ra,44(sp)
2040f974:	02812403          	lw	s0,40(sp)
2040f978:	03010113          	addi	sp,sp,48
2040f97c:	00008067          	ret

2040f980 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE>:
  }
  /*!
   * \brief Free all the pages in the list.
   * \param ptr The head ptr.
   */
  void FreePageList(ArenaPageHeader** ptr) {
2040f980:	fd010113          	addi	sp,sp,-48
2040f984:	02112623          	sw	ra,44(sp)
2040f988:	02812423          	sw	s0,40(sp)
2040f98c:	03010413          	addi	s0,sp,48
2040f990:	fca42e23          	sw	a0,-36(s0)
2040f994:	fcb42c23          	sw	a1,-40(s0)
    // delete all the allocated pages.
    while (ptr[0] != nullptr) {
2040f998:	fd842783          	lw	a5,-40(s0)
2040f99c:	0007a783          	lw	a5,0(a5)
2040f9a0:	02078c63          	beqz	a5,2040f9d8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE+0x58>
      ArenaPageHeader* temp = ptr[0];
2040f9a4:	fd842783          	lw	a5,-40(s0)
2040f9a8:	0007a783          	lw	a5,0(a5)
2040f9ac:	fef42623          	sw	a5,-20(s0)
      ptr[0] = ptr[0]->next;
2040f9b0:	fd842783          	lw	a5,-40(s0)
2040f9b4:	0007a783          	lw	a5,0(a5)
2040f9b8:	0007a703          	lw	a4,0(a5)
2040f9bc:	fd842783          	lw	a5,-40(s0)
2040f9c0:	00e7a023          	sw	a4,0(a5)
      alloc_.deallocate(temp);
2040f9c4:	fdc42783          	lw	a5,-36(s0)
2040f9c8:	fec42583          	lw	a1,-20(s0)
2040f9cc:	00078513          	mv	a0,a5
2040f9d0:	040010ef          	jal	ra,20410a10 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE10deallocateEPNS_7support15ArenaPageHeaderE>
    while (ptr[0] != nullptr) {
2040f9d4:	fc5ff06f          	j	2040f998 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE12FreePageListEPPNS0_15ArenaPageHeaderE+0x18>
    }
  }
2040f9d8:	00000013          	nop
2040f9dc:	02c12083          	lw	ra,44(sp)
2040f9e0:	02812403          	lw	s0,40(sp)
2040f9e4:	03010113          	addi	sp,sp,48
2040f9e8:	00008067          	ret

2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>:
  void ReadRawBytes(void* data, size_t size) {
2040f9ec:	fd010113          	addi	sp,sp,-48
2040f9f0:	02112623          	sw	ra,44(sp)
2040f9f4:	02812423          	sw	s0,40(sp)
2040f9f8:	03010413          	addi	s0,sp,48
2040f9fc:	fca42e23          	sw	a0,-36(s0)
2040fa00:	fcb42c23          	sw	a1,-40(s0)
2040fa04:	fcc42a23          	sw	a2,-44(s0)
    uint8_t* buf = reinterpret_cast<uint8_t*>(data);
2040fa08:	fd842783          	lw	a5,-40(s0)
2040fa0c:	fef42623          	sw	a5,-20(s0)
    size_t ndone = 0;
2040fa10:	fe042423          	sw	zero,-24(s0)
    while (ndone < size) {
2040fa14:	fe842703          	lw	a4,-24(s0)
2040fa18:	fd442783          	lw	a5,-44(s0)
2040fa1c:	0af77863          	bleu	a5,a4,2040facc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xe0>
      ssize_t ret = io_->PosixRead(buf, size - ndone);
2040fa20:	fdc42783          	lw	a5,-36(s0)
2040fa24:	0007a683          	lw	a3,0(a5)
2040fa28:	fd442703          	lw	a4,-44(s0)
2040fa2c:	fe842783          	lw	a5,-24(s0)
2040fa30:	40f707b3          	sub	a5,a4,a5
2040fa34:	00078613          	mv	a2,a5
2040fa38:	fec42583          	lw	a1,-20(s0)
2040fa3c:	00068513          	mv	a0,a3
2040fa40:	addfe0ef          	jal	ra,2040e51c <_ZN3tvm7runtime9micro_rpc14MicroIOHandler9PosixReadEPhj>
2040fa44:	fea42223          	sw	a0,-28(s0)
      if (ret == 0) {
2040fa48:	fe442783          	lw	a5,-28(s0)
2040fa4c:	04079063          	bnez	a5,2040fa8c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xa0>
        if (allow_clean_shutdown_) {
2040fa50:	fdc42783          	lw	a5,-36(s0)
2040fa54:	0147c783          	lbu	a5,20(a5)
2040fa58:	02078263          	beqz	a5,2040fa7c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0x90>
          this->Shutdown();
2040fa5c:	fdc42503          	lw	a0,-36(s0)
2040fa60:	db5ff0ef          	jal	ra,2040f814 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE8ShutdownEv>
          io_->Exit(0);
2040fa64:	fdc42783          	lw	a5,-36(s0)
2040fa68:	0007a783          	lw	a5,0(a5)
2040fa6c:	00000593          	li	a1,0
2040fa70:	00078513          	mv	a0,a5
2040fa74:	b15fe0ef          	jal	ra,2040e588 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
2040fa78:	0140006f          	j	2040fa8c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xa0>
          this->ThrowError(RPCServerStatus::kReadError);
2040fa7c:	00000613          	li	a2,0
2040fa80:	00a00593          	li	a1,10
2040fa84:	fdc42503          	lw	a0,-36(s0)
2040fa88:	dd5ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      if (ret == -1) {
2040fa8c:	fe442703          	lw	a4,-28(s0)
2040fa90:	fff00793          	li	a5,-1
2040fa94:	00f71a63          	bne	a4,a5,2040faa8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0xbc>
        this->ThrowError(RPCServerStatus::kReadError);
2040fa98:	00000613          	li	a2,0
2040fa9c:	00a00593          	li	a1,10
2040faa0:	fdc42503          	lw	a0,-36(s0)
2040faa4:	db9ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      ndone += ret;
2040faa8:	fe442783          	lw	a5,-28(s0)
2040faac:	fe842703          	lw	a4,-24(s0)
2040fab0:	00f707b3          	add	a5,a4,a5
2040fab4:	fef42423          	sw	a5,-24(s0)
      buf += ret;
2040fab8:	fe442783          	lw	a5,-28(s0)
2040fabc:	fec42703          	lw	a4,-20(s0)
2040fac0:	00f707b3          	add	a5,a4,a5
2040fac4:	fef42623          	sw	a5,-20(s0)
    while (ndone < size) {
2040fac8:	f4dff06f          	j	2040fa14 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj+0x28>
  }
2040facc:	00000013          	nop
2040fad0:	02c12083          	lw	ra,44(sp)
2040fad4:	02812403          	lw	s0,40(sp)
2040fad8:	03010113          	addi	sp,sp,48
2040fadc:	00008067          	ret

2040fae0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13RecvPackedSeqEPP8TVMValuePPiSA_>:
  void RecvPackedSeq(TVMValue** out_values, int** out_tcodes, int* out_num_args) {
2040fae0:	fe010113          	addi	sp,sp,-32
2040fae4:	00112e23          	sw	ra,28(sp)
2040fae8:	00812c23          	sw	s0,24(sp)
2040faec:	02010413          	addi	s0,sp,32
2040faf0:	fea42623          	sw	a0,-20(s0)
2040faf4:	feb42423          	sw	a1,-24(s0)
2040faf8:	fec42223          	sw	a2,-28(s0)
2040fafc:	fed42023          	sw	a3,-32(s0)
    RPCReference::RecvPackedSeq(out_values, out_tcodes, out_num_args, this);
2040fb00:	fec42683          	lw	a3,-20(s0)
2040fb04:	fe042603          	lw	a2,-32(s0)
2040fb08:	fe442583          	lw	a1,-28(s0)
2040fb0c:	fe842503          	lw	a0,-24(s0)
2040fb10:	769000ef          	jal	ra,20410a78 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_>
  }
2040fb14:	00000013          	nop
2040fb18:	01c12083          	lw	ra,28(sp)
2040fb1c:	01812403          	lw	s0,24(sp)
2040fb20:	02010113          	addi	sp,sp,32
2040fb24:	00008067          	ret

2040fb28 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii>:
  void SyscallFreeHandle(TVMValue* values, int* tcodes, int num_args) {
2040fb28:	fd010113          	addi	sp,sp,-48
2040fb2c:	02112623          	sw	ra,44(sp)
2040fb30:	02812423          	sw	s0,40(sp)
2040fb34:	03010413          	addi	s0,sp,48
2040fb38:	fca42e23          	sw	a0,-36(s0)
2040fb3c:	fcb42c23          	sw	a1,-40(s0)
2040fb40:	fcc42a23          	sw	a2,-44(s0)
2040fb44:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fb48:	fd042703          	lw	a4,-48(s0)
2040fb4c:	00200793          	li	a5,2
2040fb50:	00f70a63          	beq	a4,a5,2040fb64 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x3c>
2040fb54:	00000613          	li	a2,0
2040fb58:	00900593          	li	a1,9
2040fb5c:	fdc42503          	lw	a0,-36(s0)
2040fb60:	cfdff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMOpaqueHandle);
2040fb64:	fd442783          	lw	a5,-44(s0)
2040fb68:	0007a703          	lw	a4,0(a5)
2040fb6c:	00300793          	li	a5,3
2040fb70:	00f70a63          	beq	a4,a5,2040fb84 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x5c>
2040fb74:	00000613          	li	a2,0
2040fb78:	00900593          	li	a1,9
2040fb7c:	fdc42503          	lw	a0,-36(s0)
2040fb80:	cddff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kDLInt);
2040fb84:	fd442783          	lw	a5,-44(s0)
2040fb88:	00478793          	addi	a5,a5,4
2040fb8c:	0007a783          	lw	a5,0(a5)
2040fb90:	00078a63          	beqz	a5,2040fba4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x7c>
2040fb94:	00000613          	li	a2,0
2040fb98:	00900593          	li	a1,9
2040fb9c:	fdc42503          	lw	a0,-36(s0)
2040fba0:	cbdff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    void* handle = values[0].v_handle;
2040fba4:	fd842783          	lw	a5,-40(s0)
2040fba8:	0007a783          	lw	a5,0(a5)
2040fbac:	fef42423          	sw	a5,-24(s0)
    int64_t type_code = values[1].v_int64;
2040fbb0:	fd842783          	lw	a5,-40(s0)
2040fbb4:	00878793          	addi	a5,a5,8
2040fbb8:	0047a803          	lw	a6,4(a5)
2040fbbc:	0007a783          	lw	a5,0(a5)
2040fbc0:	fef42023          	sw	a5,-32(s0)
2040fbc4:	ff042223          	sw	a6,-28(s0)
    if (type_code == kTVMNDArrayHandle) {
2040fbc8:	fe042703          	lw	a4,-32(s0)
2040fbcc:	00d00793          	li	a5,13
2040fbd0:	00f71e63          	bne	a4,a5,2040fbec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xc4>
2040fbd4:	fe442783          	lw	a5,-28(s0)
2040fbd8:	00079a63          	bnez	a5,2040fbec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xc4>
      call_ecode = TVMArrayFree(static_cast<TVMArrayHandle>(handle));
2040fbdc:	fe842503          	lw	a0,-24(s0)
2040fbe0:	ed4f10ef          	jal	ra,204012b4 <TVMArrayFree>
2040fbe4:	fea42623          	sw	a0,-20(s0)
2040fbe8:	0580006f          	j	2040fc40 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x118>
    } else if (type_code == kTVMPackedFuncHandle) {
2040fbec:	fe042703          	lw	a4,-32(s0)
2040fbf0:	00a00793          	li	a5,10
2040fbf4:	00f71e63          	bne	a4,a5,2040fc10 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xe8>
2040fbf8:	fe442783          	lw	a5,-28(s0)
2040fbfc:	00079a63          	bnez	a5,2040fc10 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xe8>
      call_ecode = TVMFuncFree(handle);
2040fc00:	fe842503          	lw	a0,-24(s0)
2040fc04:	dccf20ef          	jal	ra,204021d0 <TVMFuncFree>
2040fc08:	fea42623          	sw	a0,-20(s0)
2040fc0c:	0340006f          	j	2040fc40 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x118>
      MINRPC_CHECK(type_code == kTVMModuleHandle);
2040fc10:	fe042703          	lw	a4,-32(s0)
2040fc14:	00900793          	li	a5,9
2040fc18:	00f71663          	bne	a4,a5,2040fc24 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0xfc>
2040fc1c:	fe442783          	lw	a5,-28(s0)
2040fc20:	00078a63          	beqz	a5,2040fc34 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x10c>
2040fc24:	00000613          	li	a2,0
2040fc28:	00900593          	li	a1,9
2040fc2c:	fdc42503          	lw	a0,-36(s0)
2040fc30:	c2dff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      call_ecode = TVMModFree(handle);
2040fc34:	fe842503          	lw	a0,-24(s0)
2040fc38:	dcdf10ef          	jal	ra,20401a04 <TVMModFree>
2040fc3c:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040fc40:	fec42783          	lw	a5,-20(s0)
2040fc44:	00079863          	bnez	a5,2040fc54 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x12c>
      this->ReturnVoid();
2040fc48:	fdc42503          	lw	a0,-36(s0)
2040fc4c:	25d000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2040fc50:	00c0006f          	j	2040fc5c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE17SyscallFreeHandleEP8TVMValuePii+0x134>
      this->ReturnLastTVMError();
2040fc54:	fdc42503          	lw	a0,-36(s0)
2040fc58:	195000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fc5c:	00000013          	nop
2040fc60:	02c12083          	lw	ra,44(sp)
2040fc64:	02812403          	lw	s0,40(sp)
2040fc68:	03010113          	addi	sp,sp,48
2040fc6c:	00008067          	ret

2040fc70 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii>:
  void SyscallGetGlobalFunc(TVMValue* values, int* tcodes, int num_args) {
2040fc70:	fd010113          	addi	sp,sp,-48
2040fc74:	02112623          	sw	ra,44(sp)
2040fc78:	02812423          	sw	s0,40(sp)
2040fc7c:	03010413          	addi	s0,sp,48
2040fc80:	fca42e23          	sw	a0,-36(s0)
2040fc84:	fcb42c23          	sw	a1,-40(s0)
2040fc88:	fcc42a23          	sw	a2,-44(s0)
2040fc8c:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 1);
2040fc90:	fd042703          	lw	a4,-48(s0)
2040fc94:	00100793          	li	a5,1
2040fc98:	00f70a63          	beq	a4,a5,2040fcac <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x3c>
2040fc9c:	00000613          	li	a2,0
2040fca0:	00900593          	li	a1,9
2040fca4:	fdc42503          	lw	a0,-36(s0)
2040fca8:	bb5ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMStr);
2040fcac:	fd442783          	lw	a5,-44(s0)
2040fcb0:	0007a703          	lw	a4,0(a5)
2040fcb4:	00b00793          	li	a5,11
2040fcb8:	00f70a63          	beq	a4,a5,2040fccc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x5c>
2040fcbc:	00000613          	li	a2,0
2040fcc0:	00900593          	li	a1,9
2040fcc4:	fdc42503          	lw	a0,-36(s0)
2040fcc8:	b95ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    int call_ecode = TVMFuncGetGlobal(values[0].v_str, &handle);
2040fccc:	fd842783          	lw	a5,-40(s0)
2040fcd0:	0007a783          	lw	a5,0(a5)
2040fcd4:	fe840713          	addi	a4,s0,-24
2040fcd8:	00070593          	mv	a1,a4
2040fcdc:	00078513          	mv	a0,a5
2040fce0:	a28f20ef          	jal	ra,20401f08 <TVMFuncGetGlobal>
2040fce4:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2040fce8:	fec42783          	lw	a5,-20(s0)
2040fcec:	00079c63          	bnez	a5,2040fd04 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x94>
      this->ReturnHandle(handle);
2040fcf0:	fe842783          	lw	a5,-24(s0)
2040fcf4:	00078593          	mv	a1,a5
2040fcf8:	fdc42503          	lw	a0,-36(s0)
2040fcfc:	058010ef          	jal	ra,20410d54 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040fd00:	00c0006f          	j	2040fd0c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallGetGlobalFuncEP8TVMValuePii+0x9c>
      this->ReturnLastTVMError();
2040fd04:	fdc42503          	lw	a0,-36(s0)
2040fd08:	0e5000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040fd0c:	00000013          	nop
2040fd10:	02c12083          	lw	ra,44(sp)
2040fd14:	02812403          	lw	s0,40(sp)
2040fd18:	03010113          	addi	sp,sp,48
2040fd1c:	00008067          	ret

2040fd20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>:
  void ReturnException(const char* msg) { RPCReference::ReturnException(msg, this); }
2040fd20:	fe010113          	addi	sp,sp,-32
2040fd24:	00112e23          	sw	ra,28(sp)
2040fd28:	00812c23          	sw	s0,24(sp)
2040fd2c:	02010413          	addi	s0,sp,32
2040fd30:	fea42623          	sw	a0,-20(s0)
2040fd34:	feb42423          	sw	a1,-24(s0)
2040fd38:	fec42583          	lw	a1,-20(s0)
2040fd3c:	fe842503          	lw	a0,-24(s0)
2040fd40:	0fc010ef          	jal	ra,20410e3c <_ZN3tvm7runtime12RPCReference15ReturnExceptionINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPKcPT_>
2040fd44:	00000013          	nop
2040fd48:	01c12083          	lw	ra,28(sp)
2040fd4c:	01812403          	lw	s0,24(sp)
2040fd50:	02010113          	addi	sp,sp,32
2040fd54:	00008067          	ret

2040fd58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii>:
  void SyscallDevAllocData(TVMValue* values, int* tcodes, int num_args) {
2040fd58:	fb010113          	addi	sp,sp,-80
2040fd5c:	04112623          	sw	ra,76(sp)
2040fd60:	04812423          	sw	s0,72(sp)
2040fd64:	05010413          	addi	s0,sp,80
2040fd68:	faa42e23          	sw	a0,-68(s0)
2040fd6c:	fab42c23          	sw	a1,-72(s0)
2040fd70:	fac42a23          	sw	a2,-76(s0)
2040fd74:	fad42823          	sw	a3,-80(s0)
    MINRPC_CHECK(num_args == 4);
2040fd78:	fb042703          	lw	a4,-80(s0)
2040fd7c:	00400793          	li	a5,4
2040fd80:	00f70a63          	beq	a4,a5,2040fd94 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x3c>
2040fd84:	00000613          	li	a2,0
2040fd88:	00900593          	li	a1,9
2040fd8c:	fbc42503          	lw	a0,-68(s0)
2040fd90:	acdff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2040fd94:	fb442783          	lw	a5,-76(s0)
2040fd98:	0007a703          	lw	a4,0(a5)
2040fd9c:	00600793          	li	a5,6
2040fda0:	00f70a63          	beq	a4,a5,2040fdb4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x5c>
2040fda4:	00000613          	li	a2,0
2040fda8:	00900593          	li	a1,9
2040fdac:	fbc42503          	lw	a0,-68(s0)
2040fdb0:	aadff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kDLInt);
2040fdb4:	fb442783          	lw	a5,-76(s0)
2040fdb8:	00478793          	addi	a5,a5,4
2040fdbc:	0007a783          	lw	a5,0(a5)
2040fdc0:	00078a63          	beqz	a5,2040fdd4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x7c>
2040fdc4:	00000613          	li	a2,0
2040fdc8:	00900593          	li	a1,9
2040fdcc:	fbc42503          	lw	a0,-68(s0)
2040fdd0:	a8dff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[2] == kDLInt);
2040fdd4:	fb442783          	lw	a5,-76(s0)
2040fdd8:	00878793          	addi	a5,a5,8
2040fddc:	0007a783          	lw	a5,0(a5)
2040fde0:	00078a63          	beqz	a5,2040fdf4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x9c>
2040fde4:	00000613          	li	a2,0
2040fde8:	00900593          	li	a1,9
2040fdec:	fbc42503          	lw	a0,-68(s0)
2040fdf0:	a6dff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[3] == kTVMDataType);
2040fdf4:	fb442783          	lw	a5,-76(s0)
2040fdf8:	00c78793          	addi	a5,a5,12
2040fdfc:	0007a703          	lw	a4,0(a5)
2040fe00:	00500793          	li	a5,5
2040fe04:	00f70a63          	beq	a4,a5,2040fe18 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0xc0>
2040fe08:	00000613          	li	a2,0
2040fe0c:	00900593          	li	a1,9
2040fe10:	fbc42503          	lw	a0,-68(s0)
2040fe14:	a49ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2040fe18:	fb842783          	lw	a5,-72(s0)
2040fe1c:	0047a803          	lw	a6,4(a5)
2040fe20:	0007a783          	lw	a5,0(a5)
2040fe24:	fcf42a23          	sw	a5,-44(s0)
2040fe28:	fd042c23          	sw	a6,-40(s0)
    int64_t nbytes = values[1].v_int64;
2040fe2c:	fb842783          	lw	a5,-72(s0)
2040fe30:	00878793          	addi	a5,a5,8
2040fe34:	0047a803          	lw	a6,4(a5)
2040fe38:	0007a783          	lw	a5,0(a5)
2040fe3c:	fef42423          	sw	a5,-24(s0)
2040fe40:	ff042623          	sw	a6,-20(s0)
    int64_t alignment = values[2].v_int64;
2040fe44:	fb842783          	lw	a5,-72(s0)
2040fe48:	01078793          	addi	a5,a5,16
2040fe4c:	0047a803          	lw	a6,4(a5)
2040fe50:	0007a783          	lw	a5,0(a5)
2040fe54:	fef42023          	sw	a5,-32(s0)
2040fe58:	ff042223          	sw	a6,-28(s0)
    DLDataType type_hint = values[3].v_type;
2040fe5c:	fb842783          	lw	a5,-72(s0)
2040fe60:	01878793          	addi	a5,a5,24
2040fe64:	0007a783          	lw	a5,0(a5)
2040fe68:	fcf42823          	sw	a5,-48(s0)
    int call_ecode = TVMDeviceAllocDataSpace(dev, nbytes, alignment, type_hint, &handle);
2040fe6c:	fe842603          	lw	a2,-24(s0)
2040fe70:	fe042683          	lw	a3,-32(s0)
2040fe74:	fcc40793          	addi	a5,s0,-52
2040fe78:	fd042703          	lw	a4,-48(s0)
2040fe7c:	fd442503          	lw	a0,-44(s0)
2040fe80:	fd842583          	lw	a1,-40(s0)
2040fe84:	c88f10ef          	jal	ra,2040130c <TVMDeviceAllocDataSpace>
2040fe88:	fca42e23          	sw	a0,-36(s0)
    if (call_ecode == 0) {
2040fe8c:	fdc42783          	lw	a5,-36(s0)
2040fe90:	00079c63          	bnez	a5,2040fea8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x150>
      this->ReturnHandle(handle);
2040fe94:	fcc42783          	lw	a5,-52(s0)
2040fe98:	00078593          	mv	a1,a5
2040fe9c:	fbc42503          	lw	a0,-68(s0)
2040fea0:	6b5000ef          	jal	ra,20410d54 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040fea4:	00c0006f          	j	2040feb0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevAllocDataEP8TVMValuePii+0x158>
      this->ReturnLastTVMError();
2040fea8:	fbc42503          	lw	a0,-68(s0)
2040feac:	740000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040feb0:	00000013          	nop
2040feb4:	04c12083          	lw	ra,76(sp)
2040feb8:	04812403          	lw	s0,72(sp)
2040febc:	05010113          	addi	sp,sp,80
2040fec0:	00008067          	ret

2040fec4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii>:
  void SyscallDevAllocDataWithScope(TVMValue* values, int* tcodes, int num_args) {
2040fec4:	fd010113          	addi	sp,sp,-48
2040fec8:	02112623          	sw	ra,44(sp)
2040fecc:	02812423          	sw	s0,40(sp)
2040fed0:	03010413          	addi	s0,sp,48
2040fed4:	fca42e23          	sw	a0,-36(s0)
2040fed8:	fcb42c23          	sw	a1,-40(s0)
2040fedc:	fcc42a23          	sw	a2,-44(s0)
2040fee0:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
2040fee4:	fd042703          	lw	a4,-48(s0)
2040fee8:	00200793          	li	a5,2
2040feec:	00f70a63          	beq	a4,a5,2040ff00 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x3c>
2040fef0:	00000613          	li	a2,0
2040fef4:	00900593          	li	a1,9
2040fef8:	fdc42503          	lw	a0,-36(s0)
2040fefc:	961ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMDLTensorHandle);
2040ff00:	fd442783          	lw	a5,-44(s0)
2040ff04:	0007a703          	lw	a4,0(a5)
2040ff08:	00700793          	li	a5,7
2040ff0c:	00f70a63          	beq	a4,a5,2040ff20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x5c>
2040ff10:	00000613          	li	a2,0
2040ff14:	00900593          	li	a1,9
2040ff18:	fdc42503          	lw	a0,-36(s0)
2040ff1c:	941ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMNullptr || tcodes[1] == kTVMStr);
2040ff20:	fd442783          	lw	a5,-44(s0)
2040ff24:	00478793          	addi	a5,a5,4
2040ff28:	0007a703          	lw	a4,0(a5)
2040ff2c:	00400793          	li	a5,4
2040ff30:	02f70463          	beq	a4,a5,2040ff58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x94>
2040ff34:	fd442783          	lw	a5,-44(s0)
2040ff38:	00478793          	addi	a5,a5,4
2040ff3c:	0007a703          	lw	a4,0(a5)
2040ff40:	00b00793          	li	a5,11
2040ff44:	00f70a63          	beq	a4,a5,2040ff58 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x94>
2040ff48:	00000613          	li	a2,0
2040ff4c:	00900593          	li	a1,9
2040ff50:	fdc42503          	lw	a0,-36(s0)
2040ff54:	909ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLTensor* arr = reinterpret_cast<DLTensor*>(values[0].v_handle);
2040ff58:	fd842783          	lw	a5,-40(s0)
2040ff5c:	0007a783          	lw	a5,0(a5)
2040ff60:	fef42623          	sw	a5,-20(s0)
    const char* mem_scope = (tcodes[1] == kTVMNullptr ? nullptr : values[1].v_str);
2040ff64:	fd442783          	lw	a5,-44(s0)
2040ff68:	00478793          	addi	a5,a5,4
2040ff6c:	0007a703          	lw	a4,0(a5)
2040ff70:	00400793          	li	a5,4
2040ff74:	00f70a63          	beq	a4,a5,2040ff88 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0xc4>
2040ff78:	fd842783          	lw	a5,-40(s0)
2040ff7c:	00878793          	addi	a5,a5,8
2040ff80:	0007a783          	lw	a5,0(a5)
2040ff84:	0080006f          	j	2040ff8c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0xc8>
2040ff88:	00000793          	li	a5,0
2040ff8c:	fef42423          	sw	a5,-24(s0)
    int call_ecode = TVMDeviceAllocDataSpaceWithScope(arr->device, arr->ndim, arr->shape,
2040ff90:	fec42783          	lw	a5,-20(s0)
2040ff94:	00c7a603          	lw	a2,12(a5)
2040ff98:	fec42783          	lw	a5,-20(s0)
2040ff9c:	0147a683          	lw	a3,20(a5)
2040ffa0:	fe040793          	addi	a5,s0,-32
2040ffa4:	fec42703          	lw	a4,-20(s0)
2040ffa8:	fec42583          	lw	a1,-20(s0)
2040ffac:	00078813          	mv	a6,a5
2040ffb0:	fe842783          	lw	a5,-24(s0)
2040ffb4:	01072703          	lw	a4,16(a4)
2040ffb8:	0045a503          	lw	a0,4(a1)
2040ffbc:	0085a583          	lw	a1,8(a1)
2040ffc0:	be0f10ef          	jal	ra,204013a0 <TVMDeviceAllocDataSpaceWithScope>
2040ffc4:	fea42223          	sw	a0,-28(s0)
    if (call_ecode == 0) {
2040ffc8:	fe442783          	lw	a5,-28(s0)
2040ffcc:	00079c63          	bnez	a5,2040ffe4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x120>
      this->ReturnHandle(handle);
2040ffd0:	fe042783          	lw	a5,-32(s0)
2040ffd4:	00078593          	mv	a1,a5
2040ffd8:	fdc42503          	lw	a0,-36(s0)
2040ffdc:	579000ef          	jal	ra,20410d54 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
2040ffe0:	00c0006f          	j	2040ffec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE28SyscallDevAllocDataWithScopeEP8TVMValuePii+0x128>
      this->ReturnLastTVMError();
2040ffe4:	fdc42503          	lw	a0,-36(s0)
2040ffe8:	604000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2040ffec:	00000013          	nop
2040fff0:	02c12083          	lw	ra,44(sp)
2040fff4:	02812403          	lw	s0,40(sp)
2040fff8:	03010113          	addi	sp,sp,48
2040fffc:	00008067          	ret

20410000 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii>:
  void SyscallDevFreeData(TVMValue* values, int* tcodes, int num_args) {
20410000:	fd010113          	addi	sp,sp,-48
20410004:	02112623          	sw	ra,44(sp)
20410008:	02812423          	sw	s0,40(sp)
2041000c:	03010413          	addi	s0,sp,48
20410010:	fca42e23          	sw	a0,-36(s0)
20410014:	fcb42c23          	sw	a1,-40(s0)
20410018:	fcc42a23          	sw	a2,-44(s0)
2041001c:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
20410020:	fd042703          	lw	a4,-48(s0)
20410024:	00200793          	li	a5,2
20410028:	00f70a63          	beq	a4,a5,2041003c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0x3c>
2041002c:	00000613          	li	a2,0
20410030:	00900593          	li	a1,9
20410034:	fdc42503          	lw	a0,-36(s0)
20410038:	825ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
2041003c:	fd442783          	lw	a5,-44(s0)
20410040:	0007a703          	lw	a4,0(a5)
20410044:	00600793          	li	a5,6
20410048:	00f70a63          	beq	a4,a5,2041005c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0x5c>
2041004c:	00000613          	li	a2,0
20410050:	00900593          	li	a1,9
20410054:	fdc42503          	lw	a0,-36(s0)
20410058:	805ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
2041005c:	fd442783          	lw	a5,-44(s0)
20410060:	00478793          	addi	a5,a5,4
20410064:	0007a703          	lw	a4,0(a5)
20410068:	00300793          	li	a5,3
2041006c:	00f70a63          	beq	a4,a5,20410080 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0x80>
20410070:	00000613          	li	a2,0
20410074:	00900593          	li	a1,9
20410078:	fdc42503          	lw	a0,-36(s0)
2041007c:	fe0ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
20410080:	fd842783          	lw	a5,-40(s0)
20410084:	0047a803          	lw	a6,4(a5)
20410088:	0007a783          	lw	a5,0(a5)
2041008c:	fef42023          	sw	a5,-32(s0)
20410090:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
20410094:	fd842783          	lw	a5,-40(s0)
20410098:	00878793          	addi	a5,a5,8
2041009c:	0007a783          	lw	a5,0(a5)
204100a0:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMDeviceFreeDataSpace(dev, handle);
204100a4:	fec42603          	lw	a2,-20(s0)
204100a8:	fe042503          	lw	a0,-32(s0)
204100ac:	fe442583          	lw	a1,-28(s0)
204100b0:	c2cf10ef          	jal	ra,204014dc <TVMDeviceFreeDataSpace>
204100b4:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
204100b8:	fe842783          	lw	a5,-24(s0)
204100bc:	00079863          	bnez	a5,204100cc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0xcc>
      this->ReturnVoid();
204100c0:	fdc42503          	lw	a0,-36(s0)
204100c4:	5e4000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
204100c8:	00c0006f          	j	204100d4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18SyscallDevFreeDataEP8TVMValuePii+0xd4>
      this->ReturnLastTVMError();
204100cc:	fdc42503          	lw	a0,-36(s0)
204100d0:	51c000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
204100d4:	00000013          	nop
204100d8:	02c12083          	lw	ra,44(sp)
204100dc:	02812403          	lw	s0,40(sp)
204100e0:	03010113          	addi	sp,sp,48
204100e4:	00008067          	ret

204100e8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii>:
  void SyscallDevCreateStream(TVMValue* values, int* tcodes, int num_args) {
204100e8:	fd010113          	addi	sp,sp,-48
204100ec:	02112623          	sw	ra,44(sp)
204100f0:	02812423          	sw	s0,40(sp)
204100f4:	03010413          	addi	s0,sp,48
204100f8:	fca42e23          	sw	a0,-36(s0)
204100fc:	fcb42c23          	sw	a1,-40(s0)
20410100:	fcc42a23          	sw	a2,-44(s0)
20410104:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 1);
20410108:	fd042703          	lw	a4,-48(s0)
2041010c:	00100793          	li	a5,1
20410110:	00f70a63          	beq	a4,a5,20410124 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0x3c>
20410114:	00000613          	li	a2,0
20410118:	00900593          	li	a1,9
2041011c:	fdc42503          	lw	a0,-36(s0)
20410120:	f3cff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
20410124:	fd442783          	lw	a5,-44(s0)
20410128:	0007a703          	lw	a4,0(a5)
2041012c:	00600793          	li	a5,6
20410130:	00f70a63          	beq	a4,a5,20410144 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0x5c>
20410134:	00000613          	li	a2,0
20410138:	00900593          	li	a1,9
2041013c:	fdc42503          	lw	a0,-36(s0)
20410140:	f1cff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
20410144:	fd842783          	lw	a5,-40(s0)
20410148:	0047a803          	lw	a6,4(a5)
2041014c:	0007a783          	lw	a5,0(a5)
20410150:	fef42223          	sw	a5,-28(s0)
20410154:	ff042423          	sw	a6,-24(s0)
    int call_ecode = TVMStreamCreate(dev.device_type, dev.device_id, &handle);
20410158:	fe442783          	lw	a5,-28(s0)
2041015c:	00078693          	mv	a3,a5
20410160:	fe842783          	lw	a5,-24(s0)
20410164:	fe040713          	addi	a4,s0,-32
20410168:	00070613          	mv	a2,a4
2041016c:	00078593          	mv	a1,a5
20410170:	00068513          	mv	a0,a3
20410174:	e04f10ef          	jal	ra,20401778 <TVMStreamCreate>
20410178:	fea42623          	sw	a0,-20(s0)
    if (call_ecode == 0) {
2041017c:	fec42783          	lw	a5,-20(s0)
20410180:	00079c63          	bnez	a5,20410198 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0xb0>
      this->ReturnHandle(handle);
20410184:	fe042783          	lw	a5,-32(s0)
20410188:	00078593          	mv	a1,a5
2041018c:	fdc42503          	lw	a0,-36(s0)
20410190:	3c5000ef          	jal	ra,20410d54 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>
  }
20410194:	00c0006f          	j	204101a0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallDevCreateStreamEP8TVMValuePii+0xb8>
      this->ReturnLastTVMError();
20410198:	fdc42503          	lw	a0,-36(s0)
2041019c:	450000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
204101a0:	00000013          	nop
204101a4:	02c12083          	lw	ra,44(sp)
204101a8:	02812403          	lw	s0,40(sp)
204101ac:	03010113          	addi	sp,sp,48
204101b0:	00008067          	ret

204101b4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii>:
  void SyscallDevFreeStream(TVMValue* values, int* tcodes, int num_args) {
204101b4:	fd010113          	addi	sp,sp,-48
204101b8:	02112623          	sw	ra,44(sp)
204101bc:	02812423          	sw	s0,40(sp)
204101c0:	03010413          	addi	s0,sp,48
204101c4:	fca42e23          	sw	a0,-36(s0)
204101c8:	fcb42c23          	sw	a1,-40(s0)
204101cc:	fcc42a23          	sw	a2,-44(s0)
204101d0:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
204101d4:	fd042703          	lw	a4,-48(s0)
204101d8:	00200793          	li	a5,2
204101dc:	00f70a63          	beq	a4,a5,204101f0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0x3c>
204101e0:	00000613          	li	a2,0
204101e4:	00900593          	li	a1,9
204101e8:	fdc42503          	lw	a0,-36(s0)
204101ec:	e70ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
204101f0:	fd442783          	lw	a5,-44(s0)
204101f4:	0007a703          	lw	a4,0(a5)
204101f8:	00600793          	li	a5,6
204101fc:	00f70a63          	beq	a4,a5,20410210 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0x5c>
20410200:	00000613          	li	a2,0
20410204:	00900593          	li	a1,9
20410208:	fdc42503          	lw	a0,-36(s0)
2041020c:	e50ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
20410210:	fd442783          	lw	a5,-44(s0)
20410214:	00478793          	addi	a5,a5,4
20410218:	0007a703          	lw	a4,0(a5)
2041021c:	00300793          	li	a5,3
20410220:	00f70a63          	beq	a4,a5,20410234 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0x80>
20410224:	00000613          	li	a2,0
20410228:	00900593          	li	a1,9
2041022c:	fdc42503          	lw	a0,-36(s0)
20410230:	e2cff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
20410234:	fd842783          	lw	a5,-40(s0)
20410238:	0047a803          	lw	a6,4(a5)
2041023c:	0007a783          	lw	a5,0(a5)
20410240:	fef42023          	sw	a5,-32(s0)
20410244:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
20410248:	fd842783          	lw	a5,-40(s0)
2041024c:	00878793          	addi	a5,a5,8
20410250:	0007a783          	lw	a5,0(a5)
20410254:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMStreamFree(dev.device_type, dev.device_id, handle);
20410258:	fe042783          	lw	a5,-32(s0)
2041025c:	00078713          	mv	a4,a5
20410260:	fe442783          	lw	a5,-28(s0)
20410264:	fec42603          	lw	a2,-20(s0)
20410268:	00078593          	mv	a1,a5
2041026c:	00070513          	mv	a0,a4
20410270:	d38f10ef          	jal	ra,204017a8 <TVMStreamFree>
20410274:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
20410278:	fe842783          	lw	a5,-24(s0)
2041027c:	00079863          	bnez	a5,2041028c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0xd8>
      this->ReturnVoid();
20410280:	fdc42503          	lw	a0,-36(s0)
20410284:	424000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
20410288:	00c0006f          	j	20410294 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevFreeStreamEP8TVMValuePii+0xe0>
      this->ReturnLastTVMError();
2041028c:	fdc42503          	lw	a0,-36(s0)
20410290:	35c000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
20410294:	00000013          	nop
20410298:	02c12083          	lw	ra,44(sp)
2041029c:	02812403          	lw	s0,40(sp)
204102a0:	03010113          	addi	sp,sp,48
204102a4:	00008067          	ret

204102a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii>:
  void SyscallDevStreamSync(TVMValue* values, int* tcodes, int num_args) {
204102a8:	fd010113          	addi	sp,sp,-48
204102ac:	02112623          	sw	ra,44(sp)
204102b0:	02812423          	sw	s0,40(sp)
204102b4:	03010413          	addi	s0,sp,48
204102b8:	fca42e23          	sw	a0,-36(s0)
204102bc:	fcb42c23          	sw	a1,-40(s0)
204102c0:	fcc42a23          	sw	a2,-44(s0)
204102c4:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
204102c8:	fd042703          	lw	a4,-48(s0)
204102cc:	00200793          	li	a5,2
204102d0:	00f70a63          	beq	a4,a5,204102e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0x3c>
204102d4:	00000613          	li	a2,0
204102d8:	00900593          	li	a1,9
204102dc:	fdc42503          	lw	a0,-36(s0)
204102e0:	d7cff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
204102e4:	fd442783          	lw	a5,-44(s0)
204102e8:	0007a703          	lw	a4,0(a5)
204102ec:	00600793          	li	a5,6
204102f0:	00f70a63          	beq	a4,a5,20410304 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0x5c>
204102f4:	00000613          	li	a2,0
204102f8:	00900593          	li	a1,9
204102fc:	fdc42503          	lw	a0,-36(s0)
20410300:	d5cff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
20410304:	fd442783          	lw	a5,-44(s0)
20410308:	00478793          	addi	a5,a5,4
2041030c:	0007a703          	lw	a4,0(a5)
20410310:	00300793          	li	a5,3
20410314:	00f70a63          	beq	a4,a5,20410328 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0x80>
20410318:	00000613          	li	a2,0
2041031c:	00900593          	li	a1,9
20410320:	fdc42503          	lw	a0,-36(s0)
20410324:	d38ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
20410328:	fd842783          	lw	a5,-40(s0)
2041032c:	0047a803          	lw	a6,4(a5)
20410330:	0007a783          	lw	a5,0(a5)
20410334:	fef42023          	sw	a5,-32(s0)
20410338:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
2041033c:	fd842783          	lw	a5,-40(s0)
20410340:	00878793          	addi	a5,a5,8
20410344:	0007a783          	lw	a5,0(a5)
20410348:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMSynchronize(dev.device_type, dev.device_id, handle);
2041034c:	fe042783          	lw	a5,-32(s0)
20410350:	00078713          	mv	a4,a5
20410354:	fe442783          	lw	a5,-28(s0)
20410358:	fec42603          	lw	a2,-20(s0)
2041035c:	00078593          	mv	a1,a5
20410360:	00070513          	mv	a0,a4
20410364:	c9cf10ef          	jal	ra,20401800 <TVMSynchronize>
20410368:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
2041036c:	fe842783          	lw	a5,-24(s0)
20410370:	00079863          	bnez	a5,20410380 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0xd8>
      this->ReturnVoid();
20410374:	fdc42503          	lw	a0,-36(s0)
20410378:	330000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
2041037c:	00c0006f          	j	20410388 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE20SyscallDevStreamSyncEP8TVMValuePii+0xe0>
      this->ReturnLastTVMError();
20410380:	fdc42503          	lw	a0,-36(s0)
20410384:	268000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
20410388:	00000013          	nop
2041038c:	02c12083          	lw	ra,44(sp)
20410390:	02812403          	lw	s0,40(sp)
20410394:	03010113          	addi	sp,sp,48
20410398:	00008067          	ret

2041039c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii>:
  void SyscallDevSetStream(TVMValue* values, int* tcodes, int num_args) {
2041039c:	fd010113          	addi	sp,sp,-48
204103a0:	02112623          	sw	ra,44(sp)
204103a4:	02812423          	sw	s0,40(sp)
204103a8:	03010413          	addi	s0,sp,48
204103ac:	fca42e23          	sw	a0,-36(s0)
204103b0:	fcb42c23          	sw	a1,-40(s0)
204103b4:	fcc42a23          	sw	a2,-44(s0)
204103b8:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 2);
204103bc:	fd042703          	lw	a4,-48(s0)
204103c0:	00200793          	li	a5,2
204103c4:	00f70a63          	beq	a4,a5,204103d8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0x3c>
204103c8:	00000613          	li	a2,0
204103cc:	00900593          	li	a1,9
204103d0:	fdc42503          	lw	a0,-36(s0)
204103d4:	c88ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kDLDevice);
204103d8:	fd442783          	lw	a5,-44(s0)
204103dc:	0007a703          	lw	a4,0(a5)
204103e0:	00600793          	li	a5,6
204103e4:	00f70a63          	beq	a4,a5,204103f8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0x5c>
204103e8:	00000613          	li	a2,0
204103ec:	00900593          	li	a1,9
204103f0:	fdc42503          	lw	a0,-36(s0)
204103f4:	c68ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMOpaqueHandle);
204103f8:	fd442783          	lw	a5,-44(s0)
204103fc:	00478793          	addi	a5,a5,4
20410400:	0007a703          	lw	a4,0(a5)
20410404:	00300793          	li	a5,3
20410408:	00f70a63          	beq	a4,a5,2041041c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0x80>
2041040c:	00000613          	li	a2,0
20410410:	00900593          	li	a1,9
20410414:	fdc42503          	lw	a0,-36(s0)
20410418:	c44ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    DLDevice dev = values[0].v_device;
2041041c:	fd842783          	lw	a5,-40(s0)
20410420:	0047a803          	lw	a6,4(a5)
20410424:	0007a783          	lw	a5,0(a5)
20410428:	fef42023          	sw	a5,-32(s0)
2041042c:	ff042223          	sw	a6,-28(s0)
    void* handle = values[1].v_handle;
20410430:	fd842783          	lw	a5,-40(s0)
20410434:	00878793          	addi	a5,a5,8
20410438:	0007a783          	lw	a5,0(a5)
2041043c:	fef42623          	sw	a5,-20(s0)
    int call_ecode = TVMSetStream(dev.device_type, dev.device_id, handle);
20410440:	fe042783          	lw	a5,-32(s0)
20410444:	00078713          	mv	a4,a5
20410448:	fe442783          	lw	a5,-28(s0)
2041044c:	fec42603          	lw	a2,-20(s0)
20410450:	00078593          	mv	a1,a5
20410454:	00070513          	mv	a0,a4
20410458:	b7cf10ef          	jal	ra,204017d4 <TVMSetStream>
2041045c:	fea42423          	sw	a0,-24(s0)
    if (call_ecode == 0) {
20410460:	fe842783          	lw	a5,-24(s0)
20410464:	00079863          	bnez	a5,20410474 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0xd8>
      this->ReturnVoid();
20410468:	fdc42503          	lw	a0,-36(s0)
2041046c:	23c000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
20410470:	00c0006f          	j	2041047c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE19SyscallDevSetStreamEP8TVMValuePii+0xe0>
      this->ReturnLastTVMError();
20410474:	fdc42503          	lw	a0,-36(s0)
20410478:	174000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
2041047c:	00000013          	nop
20410480:	02c12083          	lw	ra,44(sp)
20410484:	02812403          	lw	s0,40(sp)
20410488:	03010113          	addi	sp,sp,48
2041048c:	00008067          	ret

20410490 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii>:
  void SyscallCopyAmongRemote(TVMValue* values, int* tcodes, int num_args) {
20410490:	fd010113          	addi	sp,sp,-48
20410494:	02112623          	sw	ra,44(sp)
20410498:	02812423          	sw	s0,40(sp)
2041049c:	03010413          	addi	s0,sp,48
204104a0:	fca42e23          	sw	a0,-36(s0)
204104a4:	fcb42c23          	sw	a1,-40(s0)
204104a8:	fcc42a23          	sw	a2,-44(s0)
204104ac:	fcd42823          	sw	a3,-48(s0)
    MINRPC_CHECK(num_args == 3);
204104b0:	fd042703          	lw	a4,-48(s0)
204104b4:	00300793          	li	a5,3
204104b8:	00f70a63          	beq	a4,a5,204104cc <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x3c>
204104bc:	00000613          	li	a2,0
204104c0:	00900593          	li	a1,9
204104c4:	fdc42503          	lw	a0,-36(s0)
204104c8:	b94ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[0] == kTVMDLTensorHandle);
204104cc:	fd442783          	lw	a5,-44(s0)
204104d0:	0007a703          	lw	a4,0(a5)
204104d4:	00700793          	li	a5,7
204104d8:	00f70a63          	beq	a4,a5,204104ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x5c>
204104dc:	00000613          	li	a2,0
204104e0:	00900593          	li	a1,9
204104e4:	fdc42503          	lw	a0,-36(s0)
204104e8:	b74ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[1] == kTVMDLTensorHandle);
204104ec:	fd442783          	lw	a5,-44(s0)
204104f0:	00478793          	addi	a5,a5,4
204104f4:	0007a703          	lw	a4,0(a5)
204104f8:	00700793          	li	a5,7
204104fc:	00f70a63          	beq	a4,a5,20410510 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x80>
20410500:	00000613          	li	a2,0
20410504:	00900593          	li	a1,9
20410508:	fdc42503          	lw	a0,-36(s0)
2041050c:	b50ff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    MINRPC_CHECK(tcodes[2] == kTVMOpaqueHandle);
20410510:	fd442783          	lw	a5,-44(s0)
20410514:	00878793          	addi	a5,a5,8
20410518:	0007a703          	lw	a4,0(a5)
2041051c:	00300793          	li	a5,3
20410520:	00f70a63          	beq	a4,a5,20410534 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0xa4>
20410524:	00000613          	li	a2,0
20410528:	00900593          	li	a1,9
2041052c:	fdc42503          	lw	a0,-36(s0)
20410530:	b2cff0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    void* from = values[0].v_handle;
20410534:	fd842783          	lw	a5,-40(s0)
20410538:	0007a783          	lw	a5,0(a5)
2041053c:	fef42623          	sw	a5,-20(s0)
    void* to = values[1].v_handle;
20410540:	fd842783          	lw	a5,-40(s0)
20410544:	00878793          	addi	a5,a5,8
20410548:	0007a783          	lw	a5,0(a5)
2041054c:	fef42423          	sw	a5,-24(s0)
    TVMStreamHandle stream = values[2].v_handle;
20410550:	fd842783          	lw	a5,-40(s0)
20410554:	01078793          	addi	a5,a5,16
20410558:	0007a783          	lw	a5,0(a5)
2041055c:	fef42223          	sw	a5,-28(s0)
    int call_ecode = TVMDeviceCopyDataFromTo(reinterpret_cast<DLTensor*>(from),
20410560:	fe442603          	lw	a2,-28(s0)
20410564:	fe842583          	lw	a1,-24(s0)
20410568:	fec42503          	lw	a0,-20(s0)
2041056c:	8b0f10ef          	jal	ra,2040161c <TVMDeviceCopyDataFromTo>
20410570:	fea42023          	sw	a0,-32(s0)
    if (call_ecode == 0) {
20410574:	fe042783          	lw	a5,-32(s0)
20410578:	00079863          	bnez	a5,20410588 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0xf8>
      this->ReturnVoid();
2041057c:	fdc42503          	lw	a0,-36(s0)
20410580:	128000ef          	jal	ra,204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>
  }
20410584:	00c0006f          	j	20410590 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE22SyscallCopyAmongRemoteEP8TVMValuePii+0x100>
      this->ReturnLastTVMError();
20410588:	fdc42503          	lw	a0,-36(s0)
2041058c:	060000ef          	jal	ra,204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>
  }
20410590:	00000013          	nop
20410594:	02c12083          	lw	ra,44(sp)
20410598:	02812403          	lw	s0,40(sp)
2041059c:	03010113          	addi	sp,sp,48
204105a0:	00008067          	ret

204105a4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnPackedSeqEPK8TVMValuePKii>:
  void ReturnPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args) {
204105a4:	fe010113          	addi	sp,sp,-32
204105a8:	00112e23          	sw	ra,28(sp)
204105ac:	00812c23          	sw	s0,24(sp)
204105b0:	02010413          	addi	s0,sp,32
204105b4:	fea42623          	sw	a0,-20(s0)
204105b8:	feb42423          	sw	a1,-24(s0)
204105bc:	fec42223          	sw	a2,-28(s0)
204105c0:	fed42023          	sw	a3,-32(s0)
    RPCReference::ReturnPackedSeq(arg_values, type_codes, num_args, this);
204105c4:	fec42683          	lw	a3,-20(s0)
204105c8:	fe042603          	lw	a2,-32(s0)
204105cc:	fe442583          	lw	a1,-28(s0)
204105d0:	fe842503          	lw	a0,-24(s0)
204105d4:	185000ef          	jal	ra,20410f58 <_ZN3tvm7runtime12RPCReference15ReturnPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiiPT_>
  }
204105d8:	00000013          	nop
204105dc:	01c12083          	lw	ra,28(sp)
204105e0:	01812403          	lw	s0,24(sp)
204105e4:	02010113          	addi	sp,sp,32
204105e8:	00008067          	ret

204105ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE18ReturnLastTVMErrorEv>:
  void ReturnLastTVMError() { this->ReturnException(TVMGetLastError()); }
204105ec:	fe010113          	addi	sp,sp,-32
204105f0:	00112e23          	sw	ra,28(sp)
204105f4:	00812c23          	sw	s0,24(sp)
204105f8:	02010413          	addi	s0,sp,32
204105fc:	fea42623          	sw	a0,-20(s0)
20410600:	bbdf00ef          	jal	ra,204011bc <TVMGetLastError>
20410604:	00050793          	mv	a5,a0
20410608:	00078593          	mv	a1,a5
2041060c:	fec42503          	lw	a0,-20(s0)
20410610:	f10ff0ef          	jal	ra,2040fd20 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE15ReturnExceptionEPKc>
20410614:	00000013          	nop
20410618:	01c12083          	lw	ra,28(sp)
2041061c:	01812403          	lw	s0,24(sp)
20410620:	02010113          	addi	sp,sp,32
20410624:	00008067          	ret

20410628 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>:
  T* ArenaAlloc(int count) {
20410628:	fe010113          	addi	sp,sp,-32
2041062c:	00112e23          	sw	ra,28(sp)
20410630:	00812c23          	sw	s0,24(sp)
20410634:	02010413          	addi	s0,sp,32
20410638:	fea42623          	sw	a0,-20(s0)
2041063c:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410640:	fec42783          	lw	a5,-20(s0)
20410644:	00478793          	addi	a5,a5,4
20410648:	fe842583          	lw	a1,-24(s0)
2041064c:	00078513          	mv	a0,a5
20410650:	1e5000ef          	jal	ra,20411034 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IcEEPT_i>
20410654:	00050793          	mv	a5,a0
  }
20410658:	00078513          	mv	a0,a5
2041065c:	01c12083          	lw	ra,28(sp)
20410660:	01812403          	lw	s0,24(sp)
20410664:	02010113          	addi	sp,sp,32
20410668:	00008067          	ret

2041066c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>:
  void ReadArray(T* data, size_t count) {
2041066c:	fe010113          	addi	sp,sp,-32
20410670:	00112e23          	sw	ra,28(sp)
20410674:	00812c23          	sw	s0,24(sp)
20410678:	02010413          	addi	s0,sp,32
2041067c:	fea42623          	sw	a0,-20(s0)
20410680:	feb42423          	sw	a1,-24(s0)
20410684:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
20410688:	fe442603          	lw	a2,-28(s0)
2041068c:	fe842583          	lw	a1,-24(s0)
20410690:	fec42503          	lw	a0,-20(s0)
20410694:	b58ff0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410698:	01c12083          	lw	ra,28(sp)
2041069c:	01812403          	lw	s0,24(sp)
204106a0:	02010113          	addi	sp,sp,32
204106a4:	00008067          	ret

204106a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ReturnVoidEv>:
  void ReturnVoid() {
204106a8:	fc010113          	addi	sp,sp,-64
204106ac:	02112e23          	sw	ra,60(sp)
204106b0:	02812c23          	sw	s0,56(sp)
204106b4:	04010413          	addi	s0,sp,64
204106b8:	fca42623          	sw	a0,-52(s0)
    int32_t num_args = 1;
204106bc:	00100793          	li	a5,1
204106c0:	fef42623          	sw	a5,-20(s0)
    int32_t tcode = kTVMNullptr;
204106c4:	00400793          	li	a5,4
204106c8:	fef42423          	sw	a5,-24(s0)
    RPCCode code = RPCCode::kReturn;
204106cc:	00400793          	li	a5,4
204106d0:	fef42223          	sw	a5,-28(s0)
    uint64_t packet_nbytes = sizeof(code) + sizeof(num_args) + sizeof(tcode);
204106d4:	00c00793          	li	a5,12
204106d8:	00000813          	li	a6,0
204106dc:	fcf42c23          	sw	a5,-40(s0)
204106e0:	fd042e23          	sw	a6,-36(s0)
    io_->MessageStart(packet_nbytes);
204106e4:	fcc42783          	lw	a5,-52(s0)
204106e8:	0007a703          	lw	a4,0(a5)
204106ec:	fd842783          	lw	a5,-40(s0)
204106f0:	fdc42803          	lw	a6,-36(s0)
204106f4:	00078593          	mv	a1,a5
204106f8:	00070513          	mv	a0,a4
204106fc:	cf9fd0ef          	jal	ra,2040e3f4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
    this->Write(packet_nbytes);
20410700:	fd840793          	addi	a5,s0,-40
20410704:	00078593          	mv	a1,a5
20410708:	fcc42503          	lw	a0,-52(s0)
2041070c:	21c000ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    this->Write(code);
20410710:	fe440793          	addi	a5,s0,-28
20410714:	00078593          	mv	a1,a5
20410718:	fcc42503          	lw	a0,-52(s0)
2041071c:	244000ef          	jal	ra,20410960 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    this->Write(num_args);
20410720:	fec40793          	addi	a5,s0,-20
20410724:	00078593          	mv	a1,a5
20410728:	fcc42503          	lw	a0,-52(s0)
2041072c:	14d000ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    this->Write(tcode);
20410730:	fe840793          	addi	a5,s0,-24
20410734:	00078593          	mv	a1,a5
20410738:	fcc42503          	lw	a0,-52(s0)
2041073c:	13d000ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    io_->MessageDone();
20410740:	fcc42783          	lw	a5,-52(s0)
20410744:	0007a783          	lw	a5,0(a5)
20410748:	00078513          	mv	a0,a5
2041074c:	d59fd0ef          	jal	ra,2040e4a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
  }
20410750:	00000013          	nop
20410754:	03c12083          	lw	ra,60(sp)
20410758:	03812403          	lw	s0,56(sp)
2041075c:	04010113          	addi	sp,sp,64
20410760:	00008067          	ret

20410764 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>:
  T* ArenaAlloc(int count) {
20410764:	fe010113          	addi	sp,sp,-32
20410768:	00112e23          	sw	ra,28(sp)
2041076c:	00812c23          	sw	s0,24(sp)
20410770:	02010413          	addi	s0,sp,32
20410774:	fea42623          	sw	a0,-20(s0)
20410778:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
2041077c:	fec42783          	lw	a5,-20(s0)
20410780:	00478793          	addi	a5,a5,4
20410784:	fe842583          	lw	a1,-24(s0)
20410788:	00078513          	mv	a0,a5
2041078c:	125000ef          	jal	ra,204110b0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8DLTensorEEPT_i>
20410790:	00050793          	mv	a5,a0
  }
20410794:	00078513          	mv	a0,a5
20410798:	01c12083          	lw	ra,28(sp)
2041079c:	01812403          	lw	s0,24(sp)
204107a0:	02010113          	addi	sp,sp,32
204107a4:	00008067          	ret

204107a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>:
  void Read(T* data) {
204107a8:	fe010113          	addi	sp,sp,-32
204107ac:	00112e23          	sw	ra,28(sp)
204107b0:	00812c23          	sw	s0,24(sp)
204107b4:	02010413          	addi	s0,sp,32
204107b8:	fea42623          	sw	a0,-20(s0)
204107bc:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
204107c0:	00800613          	li	a2,8
204107c4:	fe842583          	lw	a1,-24(s0)
204107c8:	fec42503          	lw	a0,-20(s0)
204107cc:	a20ff0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
204107d0:	00000013          	nop
204107d4:	01c12083          	lw	ra,28(sp)
204107d8:	01812403          	lw	s0,24(sp)
204107dc:	02010113          	addi	sp,sp,32
204107e0:	00008067          	ret

204107e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>:
  void Read(T* data) {
204107e4:	fe010113          	addi	sp,sp,-32
204107e8:	00112e23          	sw	ra,28(sp)
204107ec:	00812c23          	sw	s0,24(sp)
204107f0:	02010413          	addi	s0,sp,32
204107f4:	fea42623          	sw	a0,-20(s0)
204107f8:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
204107fc:	00400613          	li	a2,4
20410800:	fe842583          	lw	a1,-24(s0)
20410804:	fec42503          	lw	a0,-20(s0)
20410808:	9e4ff0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2041080c:	00000013          	nop
20410810:	01c12083          	lw	ra,28(sp)
20410814:	01812403          	lw	s0,24(sp)
20410818:	02010113          	addi	sp,sp,32
2041081c:	00008067          	ret

20410820 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>:
  void Read(T* data) {
20410820:	fe010113          	addi	sp,sp,-32
20410824:	00112e23          	sw	ra,28(sp)
20410828:	00812c23          	sw	s0,24(sp)
2041082c:	02010413          	addi	s0,sp,32
20410830:	fea42623          	sw	a0,-20(s0)
20410834:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
20410838:	00400613          	li	a2,4
2041083c:	fe842583          	lw	a1,-24(s0)
20410840:	fec42503          	lw	a0,-20(s0)
20410844:	9a8ff0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410848:	00000013          	nop
2041084c:	01c12083          	lw	ra,28(sp)
20410850:	01812403          	lw	s0,24(sp)
20410854:	02010113          	addi	sp,sp,32
20410858:	00008067          	ret

2041085c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>:
  T* ArenaAlloc(int count) {
2041085c:	fe010113          	addi	sp,sp,-32
20410860:	00112e23          	sw	ra,28(sp)
20410864:	00812c23          	sw	s0,24(sp)
20410868:	02010413          	addi	s0,sp,32
2041086c:	fea42623          	sw	a0,-20(s0)
20410870:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20410874:	fec42783          	lw	a5,-20(s0)
20410878:	00478793          	addi	a5,a5,4
2041087c:	fe842583          	lw	a1,-24(s0)
20410880:	00078513          	mv	a0,a5
20410884:	081000ef          	jal	ra,20411104 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IxEEPT_i>
20410888:	00050793          	mv	a5,a0
  }
2041088c:	00078513          	mv	a0,a5
20410890:	01c12083          	lw	ra,28(sp)
20410894:	01812403          	lw	s0,24(sp)
20410898:	02010113          	addi	sp,sp,32
2041089c:	00008067          	ret

204108a0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>:
  void ReadArray(T* data, size_t count) {
204108a0:	fe010113          	addi	sp,sp,-32
204108a4:	00112e23          	sw	ra,28(sp)
204108a8:	00812c23          	sw	s0,24(sp)
204108ac:	02010413          	addi	s0,sp,32
204108b0:	fea42623          	sw	a0,-20(s0)
204108b4:	feb42423          	sw	a1,-24(s0)
204108b8:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
204108bc:	fe442783          	lw	a5,-28(s0)
204108c0:	00379793          	slli	a5,a5,0x3
204108c4:	00078613          	mv	a2,a5
204108c8:	fe842583          	lw	a1,-24(s0)
204108cc:	fec42503          	lw	a0,-20(s0)
204108d0:	91cff0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
204108d4:	01c12083          	lw	ra,28(sp)
204108d8:	01812403          	lw	s0,24(sp)
204108dc:	02010113          	addi	sp,sp,32
204108e0:	00008067          	ret

204108e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIhEEPT_i>:
  T* ArenaAlloc(int count) {
204108e4:	fe010113          	addi	sp,sp,-32
204108e8:	00112e23          	sw	ra,28(sp)
204108ec:	00812c23          	sw	s0,24(sp)
204108f0:	02010413          	addi	s0,sp,32
204108f4:	fea42623          	sw	a0,-20(s0)
204108f8:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
204108fc:	fec42783          	lw	a5,-20(s0)
20410900:	00478793          	addi	a5,a5,4
20410904:	fe842583          	lw	a1,-24(s0)
20410908:	00078513          	mv	a0,a5
2041090c:	041000ef          	jal	ra,2041114c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IhEEPT_i>
20410910:	00050793          	mv	a5,a0
  }
20410914:	00078513          	mv	a0,a5
20410918:	01c12083          	lw	ra,28(sp)
2041091c:	01812403          	lw	s0,24(sp)
20410920:	02010113          	addi	sp,sp,32
20410924:	00008067          	ret

20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>:
  void Write(const T& data) {
20410928:	fe010113          	addi	sp,sp,-32
2041092c:	00112e23          	sw	ra,28(sp)
20410930:	00812c23          	sw	s0,24(sp)
20410934:	02010413          	addi	s0,sp,32
20410938:	fea42623          	sw	a0,-20(s0)
2041093c:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20410940:	00800613          	li	a2,8
20410944:	fe842583          	lw	a1,-24(s0)
20410948:	fec42503          	lw	a0,-20(s0)
2041094c:	045000ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20410950:	01c12083          	lw	ra,28(sp)
20410954:	01812403          	lw	s0,24(sp)
20410958:	02010113          	addi	sp,sp,32
2041095c:	00008067          	ret

20410960 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>:
  void Write(const T& data) {
20410960:	fe010113          	addi	sp,sp,-32
20410964:	00112e23          	sw	ra,28(sp)
20410968:	00812c23          	sw	s0,24(sp)
2041096c:	02010413          	addi	s0,sp,32
20410970:	fea42623          	sw	a0,-20(s0)
20410974:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20410978:	00400613          	li	a2,4
2041097c:	fe842583          	lw	a1,-24(s0)
20410980:	fec42503          	lw	a0,-20(s0)
20410984:	00d000ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20410988:	01c12083          	lw	ra,28(sp)
2041098c:	01812403          	lw	s0,24(sp)
20410990:	02010113          	addi	sp,sp,32
20410994:	00008067          	ret

20410998 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIhEEvPT_j>:
  void WriteArray(T* data, size_t count) {
20410998:	fe010113          	addi	sp,sp,-32
2041099c:	00112e23          	sw	ra,28(sp)
204109a0:	00812c23          	sw	s0,24(sp)
204109a4:	02010413          	addi	s0,sp,32
204109a8:	fea42623          	sw	a0,-20(s0)
204109ac:	feb42423          	sw	a1,-24(s0)
204109b0:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
204109b4:	fe442603          	lw	a2,-28(s0)
204109b8:	fe842583          	lw	a1,-24(s0)
204109bc:	fec42503          	lw	a0,-20(s0)
204109c0:	7d0000ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
204109c4:	01c12083          	lw	ra,28(sp)
204109c8:	01812403          	lw	s0,24(sp)
204109cc:	02010113          	addi	sp,sp,32
204109d0:	00008067          	ret

204109d4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIhEEvPT_j>:
  void ReadArray(T* data, size_t count) {
204109d4:	fe010113          	addi	sp,sp,-32
204109d8:	00112e23          	sw	ra,28(sp)
204109dc:	00812c23          	sw	s0,24(sp)
204109e0:	02010413          	addi	s0,sp,32
204109e4:	fea42623          	sw	a0,-20(s0)
204109e8:	feb42423          	sw	a1,-24(s0)
204109ec:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
204109f0:	fe442603          	lw	a2,-28(s0)
204109f4:	fe842583          	lw	a1,-24(s0)
204109f8:	fec42503          	lw	a0,-20(s0)
204109fc:	ff1fe0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20410a00:	01c12083          	lw	ra,28(sp)
20410a04:	01812403          	lw	s0,24(sp)
20410a08:	02010113          	addi	sp,sp,32
20410a0c:	00008067          	ret

20410a10 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE10deallocateEPNS_7support15ArenaPageHeaderE>:

  void deallocate(ArenaPageHeader* page) {
20410a10:	fe010113          	addi	sp,sp,-32
20410a14:	00112e23          	sw	ra,28(sp)
20410a18:	00812c23          	sw	s0,24(sp)
20410a1c:	02010413          	addi	s0,sp,32
20410a20:	fea42623          	sw	a0,-20(s0)
20410a24:	feb42423          	sw	a1,-24(s0)
    if (TVMDeviceFreeDataSpace(DLDevice{kDLCPU, 0}, page) != 0) {
20410a28:	00100793          	li	a5,1
20410a2c:	00000813          	li	a6,0
20410a30:	fe842603          	lw	a2,-24(s0)
20410a34:	00078513          	mv	a0,a5
20410a38:	00080593          	mv	a1,a6
20410a3c:	aa1f00ef          	jal	ra,204014dc <TVMDeviceFreeDataSpace>
20410a40:	00050793          	mv	a5,a0
20410a44:	00f037b3          	snez	a5,a5
20410a48:	0ff7f793          	andi	a5,a5,255
20410a4c:	00078c63          	beqz	a5,20410a64 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE10deallocateEPNS_7support15ArenaPageHeaderE+0x54>
      io_->Exit(static_cast<int>(RPCServerStatus::kAllocError));
20410a50:	fec42783          	lw	a5,-20(s0)
20410a54:	0007a783          	lw	a5,0(a5)
20410a58:	00c00593          	li	a1,12
20410a5c:	00078513          	mv	a0,a5
20410a60:	b29fd0ef          	jal	ra,2040e588 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler4ExitEi>
    }
  }
20410a64:	00000013          	nop
20410a68:	01c12083          	lw	ra,28(sp)
20410a6c:	01812403          	lw	s0,24(sp)
20410a70:	02010113          	addi	sp,sp,32
20410a74:	00008067          	ret

20410a78 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_>:
   * \param channel The communication channel handler.
   * \tparam TChannel The type of the communication channel.
   * \note The temporary space are populated via an arena inside channel.
   */
  template <typename TChannel>
  static void RecvPackedSeq(TVMValue** out_values, int** out_tcodes, int* out_num_args,
20410a78:	fa010113          	addi	sp,sp,-96
20410a7c:	04112e23          	sw	ra,92(sp)
20410a80:	04812c23          	sw	s0,88(sp)
20410a84:	06010413          	addi	s0,sp,96
20410a88:	faa42623          	sw	a0,-84(s0)
20410a8c:	fab42423          	sw	a1,-88(s0)
20410a90:	fac42223          	sw	a2,-92(s0)
20410a94:	fad42023          	sw	a3,-96(s0)
                            TChannel* channel) {
    // receive number of args
    int num_args;
    channel->Read(&num_args);
20410a98:	fd040793          	addi	a5,s0,-48
20410a9c:	00078593          	mv	a1,a5
20410aa0:	fa042503          	lw	a0,-96(s0)
20410aa4:	d41ff0ef          	jal	ra,204107e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    *out_num_args = num_args;
20410aa8:	fd042703          	lw	a4,-48(s0)
20410aac:	fa442783          	lw	a5,-92(s0)
20410ab0:	00e7a023          	sw	a4,0(a5)

    if (num_args == 0) {
20410ab4:	fd042783          	lw	a5,-48(s0)
20410ab8:	00079c63          	bnez	a5,20410ad0 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x58>
      *out_values = nullptr;
20410abc:	fac42783          	lw	a5,-84(s0)
20410ac0:	0007a023          	sw	zero,0(a5)
      *out_tcodes = nullptr;
20410ac4:	fa842783          	lw	a5,-88(s0)
20410ac8:	0007a023          	sw	zero,0(a5)
20410acc:	2780006f          	j	20410d44 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2cc>
      return;
    }

    TVMValue* values = channel->template ArenaAlloc<TVMValue>(num_args);
20410ad0:	fd042783          	lw	a5,-48(s0)
20410ad4:	00078593          	mv	a1,a5
20410ad8:	fa042503          	lw	a0,-96(s0)
20410adc:	76c000ef          	jal	ra,20411248 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8TVMValueEEPT_i>
20410ae0:	fea42423          	sw	a0,-24(s0)
    int* tcodes = channel->template ArenaAlloc<int>(num_args);
20410ae4:	fd042783          	lw	a5,-48(s0)
20410ae8:	00078593          	mv	a1,a5
20410aec:	fa042503          	lw	a0,-96(s0)
20410af0:	79c000ef          	jal	ra,2041128c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIiEEPT_i>
20410af4:	fea42223          	sw	a0,-28(s0)
    *out_values = values;
20410af8:	fac42783          	lw	a5,-84(s0)
20410afc:	fe842703          	lw	a4,-24(s0)
20410b00:	00e7a023          	sw	a4,0(a5)
    *out_tcodes = tcodes;
20410b04:	fa842783          	lw	a5,-88(s0)
20410b08:	fe442703          	lw	a4,-28(s0)
20410b0c:	00e7a023          	sw	a4,0(a5)

    // receive type code.
    channel->ReadArray(tcodes, num_args);
20410b10:	fd042783          	lw	a5,-48(s0)
20410b14:	00078613          	mv	a2,a5
20410b18:	fe442583          	lw	a1,-28(s0)
20410b1c:	fa042503          	lw	a0,-96(s0)
20410b20:	7b0000ef          	jal	ra,204112d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIiEEvPT_j>

    // receive arguments
    for (int i = 0; i < num_args; ++i) {
20410b24:	fe042623          	sw	zero,-20(s0)
20410b28:	fd042783          	lw	a5,-48(s0)
20410b2c:	fec42703          	lw	a4,-20(s0)
20410b30:	20f75a63          	ble	a5,a4,20410d44 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2cc>
      auto& value = values[i];
20410b34:	fec42783          	lw	a5,-20(s0)
20410b38:	00379793          	slli	a5,a5,0x3
20410b3c:	fe842703          	lw	a4,-24(s0)
20410b40:	00f707b3          	add	a5,a4,a5
20410b44:	fef42023          	sw	a5,-32(s0)
      switch (tcodes[i]) {
20410b48:	fec42783          	lw	a5,-20(s0)
20410b4c:	00279793          	slli	a5,a5,0x2
20410b50:	fe442703          	lw	a4,-28(s0)
20410b54:	00f707b3          	add	a5,a4,a5
20410b58:	0007a783          	lw	a5,0(a5)
20410b5c:	00c00713          	li	a4,12
20410b60:	1cf76063          	bltu	a4,a5,20410d20 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2a8>
20410b64:	00279713          	slli	a4,a5,0x2
20410b68:	00011797          	auipc	a5,0x11
20410b6c:	d4878793          	addi	a5,a5,-696 # 204218b0 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x258>
20410b70:	00f707b3          	add	a5,a4,a5
20410b74:	0007a703          	lw	a4,0(a5)
20410b78:	00011797          	auipc	a5,0x11
20410b7c:	d3878793          	addi	a5,a5,-712 # 204218b0 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x258>
20410b80:	00f707b3          	add	a5,a4,a5
20410b84:	00078067          	jr	a5
        case kDLInt:
        case kDLUInt:
        case kDLFloat: {
          channel->template Read<int64_t>(&(value.v_int64));
20410b88:	fe042783          	lw	a5,-32(s0)
20410b8c:	00078593          	mv	a1,a5
20410b90:	fa042503          	lw	a0,-96(s0)
20410b94:	780000ef          	jal	ra,20411314 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIxEEvPT_>
          break;
20410b98:	19c0006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMDataType: {
          channel->Read(&(value.v_type));
20410b9c:	fe042783          	lw	a5,-32(s0)
20410ba0:	00078593          	mv	a1,a5
20410ba4:	fa042503          	lw	a0,-96(s0)
20410ba8:	c79ff0ef          	jal	ra,20410820 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
          int32_t padding = 0;
20410bac:	fc042623          	sw	zero,-52(s0)
          channel->template Read<int32_t>(&padding);
20410bb0:	fcc40793          	addi	a5,s0,-52
20410bb4:	00078593          	mv	a1,a5
20410bb8:	fa042503          	lw	a0,-96(s0)
20410bbc:	794000ef          	jal	ra,20411350 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIlEEvPT_>
          break;
20410bc0:	00000013          	nop
20410bc4:	1700006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kDLDevice: {
          channel->Read(&(value.v_device));
20410bc8:	fe042783          	lw	a5,-32(s0)
20410bcc:	00078593          	mv	a1,a5
20410bd0:	fa042503          	lw	a0,-96(s0)
20410bd4:	bd5ff0ef          	jal	ra,204107a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
          break;
20410bd8:	15c0006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        case kTVMPackedFuncHandle:
        case kTVMModuleHandle:
        case kTVMOpaqueHandle: {
          // always send handle in 64 bit.
          uint64_t handle;
          channel->Read(&handle);
20410bdc:	fc040793          	addi	a5,s0,-64
20410be0:	00078593          	mv	a1,a5
20410be4:	fa042503          	lw	a0,-96(s0)
20410be8:	a8cfe0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
          value.v_handle = reinterpret_cast<void*>(handle);
20410bec:	fc042783          	lw	a5,-64(s0)
20410bf0:	fc442803          	lw	a6,-60(s0)
20410bf4:	00078713          	mv	a4,a5
20410bf8:	fe042783          	lw	a5,-32(s0)
20410bfc:	00e7a023          	sw	a4,0(a5)
          break;
20410c00:	00000013          	nop
20410c04:	1300006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMNullptr: {
          value.v_handle = nullptr;
20410c08:	fe042783          	lw	a5,-32(s0)
20410c0c:	0007a023          	sw	zero,0(a5)
          break;
20410c10:	1240006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMStr: {
          uint64_t len;
          channel->Read(&len);
20410c14:	fb840793          	addi	a5,s0,-72
20410c18:	00078593          	mv	a1,a5
20410c1c:	fa042503          	lw	a0,-96(s0)
20410c20:	a54fe0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
          char* str = channel->template ArenaAlloc<char>(len + 1);
20410c24:	fb842783          	lw	a5,-72(s0)
20410c28:	fbc42803          	lw	a6,-68(s0)
20410c2c:	00178793          	addi	a5,a5,1
20410c30:	00078593          	mv	a1,a5
20410c34:	fa042503          	lw	a0,-96(s0)
20410c38:	9f1ff0ef          	jal	ra,20410628 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>
20410c3c:	fca42a23          	sw	a0,-44(s0)
          str[len] = '\0';
20410c40:	fb842783          	lw	a5,-72(s0)
20410c44:	fbc42803          	lw	a6,-68(s0)
20410c48:	00078713          	mv	a4,a5
20410c4c:	fd442783          	lw	a5,-44(s0)
20410c50:	00e787b3          	add	a5,a5,a4
20410c54:	00078023          	sb	zero,0(a5)
          channel->ReadArray(str, len);
20410c58:	fb842783          	lw	a5,-72(s0)
20410c5c:	fbc42803          	lw	a6,-68(s0)
20410c60:	00078613          	mv	a2,a5
20410c64:	fd442583          	lw	a1,-44(s0)
20410c68:	fa042503          	lw	a0,-96(s0)
20410c6c:	a01ff0ef          	jal	ra,2041066c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>
          value.v_str = str;
20410c70:	fe042783          	lw	a5,-32(s0)
20410c74:	fd442703          	lw	a4,-44(s0)
20410c78:	00e7a023          	sw	a4,0(a5)
          break;
20410c7c:	00000013          	nop
20410c80:	0b40006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMBytes: {
          uint64_t len;
          channel->Read(&len);
20410c84:	fb040793          	addi	a5,s0,-80
20410c88:	00078593          	mv	a1,a5
20410c8c:	fa042503          	lw	a0,-96(s0)
20410c90:	9e4fe0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
          TVMByteArray* arr = channel->template ArenaAlloc<TVMByteArray>(1);
20410c94:	00100593          	li	a1,1
20410c98:	fa042503          	lw	a0,-96(s0)
20410c9c:	6f0000ef          	jal	ra,2041138c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI12TVMByteArrayEEPT_i>
20410ca0:	fca42e23          	sw	a0,-36(s0)
          char* data = channel->template ArenaAlloc<char>(len);
20410ca4:	fb042783          	lw	a5,-80(s0)
20410ca8:	fb442803          	lw	a6,-76(s0)
20410cac:	00078593          	mv	a1,a5
20410cb0:	fa042503          	lw	a0,-96(s0)
20410cb4:	975ff0ef          	jal	ra,20410628 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIcEEPT_i>
20410cb8:	fca42c23          	sw	a0,-40(s0)
          arr->size = len;
20410cbc:	fb042783          	lw	a5,-80(s0)
20410cc0:	fb442803          	lw	a6,-76(s0)
20410cc4:	00078713          	mv	a4,a5
20410cc8:	fdc42783          	lw	a5,-36(s0)
20410ccc:	00e7a223          	sw	a4,4(a5)
          arr->data = data;
20410cd0:	fdc42783          	lw	a5,-36(s0)
20410cd4:	fd842703          	lw	a4,-40(s0)
20410cd8:	00e7a023          	sw	a4,0(a5)
          channel->ReadArray(data, len);
20410cdc:	fb042783          	lw	a5,-80(s0)
20410ce0:	fb442803          	lw	a6,-76(s0)
20410ce4:	00078613          	mv	a2,a5
20410ce8:	fd842583          	lw	a1,-40(s0)
20410cec:	fa042503          	lw	a0,-96(s0)
20410cf0:	97dff0ef          	jal	ra,2041066c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIcEEvPT_j>
          value.v_handle = arr;
20410cf4:	fe042783          	lw	a5,-32(s0)
20410cf8:	fdc42703          	lw	a4,-36(s0)
20410cfc:	00e7a023          	sw	a4,0(a5)
          break;
20410d00:	00000013          	nop
20410d04:	0300006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        case kTVMDLTensorHandle: {
          value.v_handle = ReceiveDLTensor(channel);
20410d08:	fa042503          	lw	a0,-96(s0)
20410d0c:	6c4000ef          	jal	ra,204113d0 <_ZN3tvm7runtime12RPCReference15ReceiveDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEP8DLTensorT_>
20410d10:	00050713          	mv	a4,a0
20410d14:	fe042783          	lw	a5,-32(s0)
20410d18:	00e7a023          	sw	a4,0(a5)
          break;
20410d1c:	0180006f          	j	20410d34 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0x2bc>
        }
        default: {
          channel->ThrowError(RPCServerStatus::kUnknownTypeCode);
20410d20:	00000613          	li	a2,0
20410d24:	00500593          	li	a1,5
20410d28:	fa042503          	lw	a0,-96(s0)
20410d2c:	b31fe0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
20410d30:	00000013          	nop
    for (int i = 0; i < num_args; ++i) {
20410d34:	fec42783          	lw	a5,-20(s0)
20410d38:	00178793          	addi	a5,a5,1
20410d3c:	fef42623          	sw	a5,-20(s0)
20410d40:	de9ff06f          	j	20410b28 <_ZN3tvm7runtime12RPCReference13RecvPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPP8TVMValuePPiSC_PT_+0xb0>
        }
      }
    }
  }
20410d44:	05c12083          	lw	ra,92(sp)
20410d48:	05812403          	lw	s0,88(sp)
20410d4c:	06010113          	addi	sp,sp,96
20410d50:	00008067          	ret

20410d54 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReturnHandleEPv>:
  void ReturnHandle(void* handle) {
20410d54:	fc010113          	addi	sp,sp,-64
20410d58:	02112e23          	sw	ra,60(sp)
20410d5c:	02812c23          	sw	s0,56(sp)
20410d60:	04010413          	addi	s0,sp,64
20410d64:	fca42623          	sw	a0,-52(s0)
20410d68:	fcb42423          	sw	a1,-56(s0)
    int32_t num_args = 1;
20410d6c:	00100713          	li	a4,1
20410d70:	fee42623          	sw	a4,-20(s0)
    int32_t tcode = kTVMOpaqueHandle;
20410d74:	00300713          	li	a4,3
20410d78:	fee42423          	sw	a4,-24(s0)
    RPCCode code = RPCCode::kReturn;
20410d7c:	00400713          	li	a4,4
20410d80:	fee42223          	sw	a4,-28(s0)
    uint64_t encode_handle = reinterpret_cast<uint64_t>(handle);
20410d84:	fc842703          	lw	a4,-56(s0)
20410d88:	00070793          	mv	a5,a4
20410d8c:	41f75713          	srai	a4,a4,0x1f
20410d90:	00070813          	mv	a6,a4
20410d94:	fcf42c23          	sw	a5,-40(s0)
20410d98:	fd042e23          	sw	a6,-36(s0)
    uint64_t packet_nbytes =
20410d9c:	01400793          	li	a5,20
20410da0:	00000813          	li	a6,0
20410da4:	fcf42823          	sw	a5,-48(s0)
20410da8:	fd042a23          	sw	a6,-44(s0)
    io_->MessageStart(packet_nbytes);
20410dac:	fcc42783          	lw	a5,-52(s0)
20410db0:	0007a703          	lw	a4,0(a5)
20410db4:	fd042783          	lw	a5,-48(s0)
20410db8:	fd442803          	lw	a6,-44(s0)
20410dbc:	00078593          	mv	a1,a5
20410dc0:	00070513          	mv	a0,a4
20410dc4:	e30fd0ef          	jal	ra,2040e3f4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
    this->Write(packet_nbytes);
20410dc8:	fd040793          	addi	a5,s0,-48
20410dcc:	00078593          	mv	a1,a5
20410dd0:	fcc42503          	lw	a0,-52(s0)
20410dd4:	b55ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    this->Write(code);
20410dd8:	fe440793          	addi	a5,s0,-28
20410ddc:	00078593          	mv	a1,a5
20410de0:	fcc42503          	lw	a0,-52(s0)
20410de4:	b7dff0ef          	jal	ra,20410960 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    this->Write(num_args);
20410de8:	fec40793          	addi	a5,s0,-20
20410dec:	00078593          	mv	a1,a5
20410df0:	fcc42503          	lw	a0,-52(s0)
20410df4:	284000ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    this->Write(tcode);
20410df8:	fe840793          	addi	a5,s0,-24
20410dfc:	00078593          	mv	a1,a5
20410e00:	fcc42503          	lw	a0,-52(s0)
20410e04:	274000ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    this->Write(encode_handle);
20410e08:	fd840793          	addi	a5,s0,-40
20410e0c:	00078593          	mv	a1,a5
20410e10:	fcc42503          	lw	a0,-52(s0)
20410e14:	b15ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    io_->MessageDone();
20410e18:	fcc42783          	lw	a5,-52(s0)
20410e1c:	0007a783          	lw	a5,0(a5)
20410e20:	00078513          	mv	a0,a5
20410e24:	e80fd0ef          	jal	ra,2040e4a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
  }
20410e28:	00000013          	nop
20410e2c:	03c12083          	lw	ra,60(sp)
20410e30:	03812403          	lw	s0,56(sp)
20410e34:	04010113          	addi	sp,sp,64
20410e38:	00008067          	ret

20410e3c <_ZN3tvm7runtime12RPCReference15ReturnExceptionINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPKcPT_>:
   * \param msg The error message.
   * \param channel The communication channel handler.
   * \tparam TChannel The type of the communication channel.
   */
  template <typename TChannel>
  static void ReturnException(const char* msg, TChannel* channel) {
20410e3c:	fc010113          	addi	sp,sp,-64
20410e40:	02112e23          	sw	ra,60(sp)
20410e44:	02812c23          	sw	s0,56(sp)
20410e48:	04010413          	addi	s0,sp,64
20410e4c:	fca42623          	sw	a0,-52(s0)
20410e50:	fcb42423          	sw	a1,-56(s0)
    RPCCode code = RPCCode::kException;
20410e54:	00500793          	li	a5,5
20410e58:	fef42623          	sw	a5,-20(s0)
    int32_t num_args = 1;
20410e5c:	00100793          	li	a5,1
20410e60:	fef42423          	sw	a5,-24(s0)
    int32_t tcode = kTVMStr;
20410e64:	00b00793          	li	a5,11
20410e68:	fef42223          	sw	a5,-28(s0)
    uint64_t len = StrLength(msg);
20410e6c:	fcc42503          	lw	a0,-52(s0)
20410e70:	cc0fd0ef          	jal	ra,2040e330 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>
20410e74:	00050793          	mv	a5,a0
20410e78:	00058813          	mv	a6,a1
20410e7c:	fcf42c23          	sw	a5,-40(s0)
20410e80:	fd042e23          	sw	a6,-36(s0)

    uint64_t packet_nbytes = sizeof(code) + sizeof(num_args) + sizeof(tcode) + sizeof(len) + len;
20410e84:	fd842783          	lw	a5,-40(s0)
20410e88:	fdc42803          	lw	a6,-36(s0)
20410e8c:	01400593          	li	a1,20
20410e90:	00000613          	li	a2,0
20410e94:	00b786b3          	add	a3,a5,a1
20410e98:	00068513          	mv	a0,a3
20410e9c:	00f53533          	sltu	a0,a0,a5
20410ea0:	00c80733          	add	a4,a6,a2
20410ea4:	00e507b3          	add	a5,a0,a4
20410ea8:	00078713          	mv	a4,a5
20410eac:	00068793          	mv	a5,a3
20410eb0:	00070813          	mv	a6,a4
20410eb4:	fcf42823          	sw	a5,-48(s0)
20410eb8:	fd042a23          	sw	a6,-44(s0)

    channel->MessageStart(packet_nbytes);
20410ebc:	fd042783          	lw	a5,-48(s0)
20410ec0:	fd442803          	lw	a6,-44(s0)
20410ec4:	00078593          	mv	a1,a5
20410ec8:	00080613          	mv	a2,a6
20410ecc:	fc842503          	lw	a0,-56(s0)
20410ed0:	600000ef          	jal	ra,204114d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12MessageStartEy>
    channel->Write(packet_nbytes);
20410ed4:	fd040793          	addi	a5,s0,-48
20410ed8:	00078593          	mv	a1,a5
20410edc:	fc842503          	lw	a0,-56(s0)
20410ee0:	a49ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->Write(code);
20410ee4:	fec40793          	addi	a5,s0,-20
20410ee8:	00078593          	mv	a1,a5
20410eec:	fc842503          	lw	a0,-56(s0)
20410ef0:	a71ff0ef          	jal	ra,20410960 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    channel->Write(num_args);
20410ef4:	fe840793          	addi	a5,s0,-24
20410ef8:	00078593          	mv	a1,a5
20410efc:	fc842503          	lw	a0,-56(s0)
20410f00:	178000ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    channel->Write(tcode);
20410f04:	fe440793          	addi	a5,s0,-28
20410f08:	00078593          	mv	a1,a5
20410f0c:	fc842503          	lw	a0,-56(s0)
20410f10:	168000ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
    channel->Write(len);
20410f14:	fd840793          	addi	a5,s0,-40
20410f18:	00078593          	mv	a1,a5
20410f1c:	fc842503          	lw	a0,-56(s0)
20410f20:	a09ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->WriteArray(msg, len);
20410f24:	fd842783          	lw	a5,-40(s0)
20410f28:	fdc42803          	lw	a6,-36(s0)
20410f2c:	00078613          	mv	a2,a5
20410f30:	fcc42583          	lw	a1,-52(s0)
20410f34:	fc842503          	lw	a0,-56(s0)
20410f38:	5e0000ef          	jal	ra,20411518 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>
    channel->MessageDone();
20410f3c:	fc842503          	lw	a0,-56(s0)
20410f40:	614000ef          	jal	ra,20411554 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE11MessageDoneEv>
  }
20410f44:	00000013          	nop
20410f48:	03c12083          	lw	ra,60(sp)
20410f4c:	03812403          	lw	s0,56(sp)
20410f50:	04010113          	addi	sp,sp,64
20410f54:	00008067          	ret

20410f58 <_ZN3tvm7runtime12RPCReference15ReturnPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiiPT_>:
   * \param msg The error message.
   * \param channel The communication channel handler.
   * \tparam TChannel The type of the communication channel.
   */
  template <typename TChannel>
  static void ReturnPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args,
20410f58:	fd010113          	addi	sp,sp,-48
20410f5c:	02112623          	sw	ra,44(sp)
20410f60:	02812423          	sw	s0,40(sp)
20410f64:	03010413          	addi	s0,sp,48
20410f68:	fca42e23          	sw	a0,-36(s0)
20410f6c:	fcb42c23          	sw	a1,-40(s0)
20410f70:	fcc42a23          	sw	a2,-44(s0)
20410f74:	fcd42823          	sw	a3,-48(s0)
                              TChannel* channel) {
    RPCCode code = RPCCode::kReturn;
20410f78:	00400793          	li	a5,4
20410f7c:	fef42623          	sw	a5,-20(s0)

    uint64_t packet_nbytes =
        sizeof(code) + PackedSeqGetNumBytes(arg_values, type_codes, num_args, false, channel);
20410f80:	fd042703          	lw	a4,-48(s0)
20410f84:	00000693          	li	a3,0
20410f88:	fd442603          	lw	a2,-44(s0)
20410f8c:	fd842583          	lw	a1,-40(s0)
20410f90:	fdc42503          	lw	a0,-36(s0)
20410f94:	5f8000ef          	jal	ra,2041158c <_ZN3tvm7runtime12RPCReference20PackedSeqGetNumBytesINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEyPK8TVMValuePKiibPT_>
20410f98:	00050693          	mv	a3,a0
20410f9c:	00058713          	mv	a4,a1
20410fa0:	00400593          	li	a1,4
20410fa4:	00000613          	li	a2,0
20410fa8:	00b687b3          	add	a5,a3,a1
20410fac:	00078513          	mv	a0,a5
20410fb0:	00d53533          	sltu	a0,a0,a3
20410fb4:	00c70833          	add	a6,a4,a2
20410fb8:	01050733          	add	a4,a0,a6
20410fbc:	00070813          	mv	a6,a4
    uint64_t packet_nbytes =
20410fc0:	fef42023          	sw	a5,-32(s0)
20410fc4:	ff042223          	sw	a6,-28(s0)

    channel->MessageStart(packet_nbytes);
20410fc8:	fe042783          	lw	a5,-32(s0)
20410fcc:	fe442803          	lw	a6,-28(s0)
20410fd0:	00078593          	mv	a1,a5
20410fd4:	00080613          	mv	a2,a6
20410fd8:	fd042503          	lw	a0,-48(s0)
20410fdc:	4f4000ef          	jal	ra,204114d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12MessageStartEy>
    channel->Write(packet_nbytes);
20410fe0:	fe040793          	addi	a5,s0,-32
20410fe4:	00078593          	mv	a1,a5
20410fe8:	fd042503          	lw	a0,-48(s0)
20410fec:	93dff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->Write(code);
20410ff0:	fec40793          	addi	a5,s0,-20
20410ff4:	00078593          	mv	a1,a5
20410ff8:	fd042503          	lw	a0,-48(s0)
20410ffc:	965ff0ef          	jal	ra,20410960 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteINS0_7RPCCodeEEEvRKT_>
    SendPackedSeq(arg_values, type_codes, num_args, false, channel);
20411000:	fd042703          	lw	a4,-48(s0)
20411004:	00000693          	li	a3,0
20411008:	fd442603          	lw	a2,-44(s0)
2041100c:	fd842583          	lw	a1,-40(s0)
20411010:	fdc42503          	lw	a0,-36(s0)
20411014:	5f8000ef          	jal	ra,2041160c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_>
    channel->MessageDone();
20411018:	fd042503          	lw	a0,-48(s0)
2041101c:	538000ef          	jal	ra,20411554 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE11MessageDoneEv>
  }
20411020:	00000013          	nop
20411024:	02c12083          	lw	ra,44(sp)
20411028:	02812403          	lw	s0,40(sp)
2041102c:	03010113          	addi	sp,sp,48
20411030:	00008067          	ret

20411034 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IcEEPT_i>:
  T* allocate_(int count = 1) {
20411034:	fe010113          	addi	sp,sp,-32
20411038:	00112e23          	sw	ra,28(sp)
2041103c:	00812c23          	sw	s0,24(sp)
20411040:	02010413          	addi	s0,sp,32
20411044:	fea42623          	sw	a0,-20(s0)
20411048:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
2041104c:	fe842783          	lw	a5,-24(s0)
20411050:	00100613          	li	a2,1
20411054:	00078593          	mv	a1,a5
20411058:	fec42503          	lw	a0,-20(s0)
2041105c:	09d000ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20411060:	00050793          	mv	a5,a0
  }
20411064:	00078513          	mv	a0,a5
20411068:	01c12083          	lw	ra,28(sp)
2041106c:	01812403          	lw	s0,24(sp)
20411070:	02010113          	addi	sp,sp,32
20411074:	00008067          	ret

20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>:
  void Write(const T& data) {
20411078:	fe010113          	addi	sp,sp,-32
2041107c:	00112e23          	sw	ra,28(sp)
20411080:	00812c23          	sw	s0,24(sp)
20411084:	02010413          	addi	s0,sp,32
20411088:	fea42623          	sw	a0,-20(s0)
2041108c:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411090:	00400613          	li	a2,4
20411094:	fe842583          	lw	a1,-24(s0)
20411098:	fec42503          	lw	a0,-20(s0)
2041109c:	0f4000ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
204110a0:	01c12083          	lw	ra,28(sp)
204110a4:	01812403          	lw	s0,24(sp)
204110a8:	02010113          	addi	sp,sp,32
204110ac:	00008067          	ret

204110b0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8DLTensorEEPT_i>:
  T* allocate_(int count = 1) {
204110b0:	fe010113          	addi	sp,sp,-32
204110b4:	00112e23          	sw	ra,28(sp)
204110b8:	00812c23          	sw	s0,24(sp)
204110bc:	02010413          	addi	s0,sp,32
204110c0:	fea42623          	sw	a0,-20(s0)
204110c4:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
204110c8:	fe842703          	lw	a4,-24(s0)
204110cc:	00070793          	mv	a5,a4
204110d0:	00279793          	slli	a5,a5,0x2
204110d4:	00e787b3          	add	a5,a5,a4
204110d8:	00379793          	slli	a5,a5,0x3
204110dc:	00800613          	li	a2,8
204110e0:	00078593          	mv	a1,a5
204110e4:	fec42503          	lw	a0,-20(s0)
204110e8:	011000ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
204110ec:	00050793          	mv	a5,a0
  }
204110f0:	00078513          	mv	a0,a5
204110f4:	01c12083          	lw	ra,28(sp)
204110f8:	01812403          	lw	s0,24(sp)
204110fc:	02010113          	addi	sp,sp,32
20411100:	00008067          	ret

20411104 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IxEEPT_i>:
  T* allocate_(int count = 1) {
20411104:	fe010113          	addi	sp,sp,-32
20411108:	00112e23          	sw	ra,28(sp)
2041110c:	00812c23          	sw	s0,24(sp)
20411110:	02010413          	addi	s0,sp,32
20411114:	fea42623          	sw	a0,-20(s0)
20411118:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
2041111c:	fe842783          	lw	a5,-24(s0)
20411120:	00379793          	slli	a5,a5,0x3
20411124:	00800613          	li	a2,8
20411128:	00078593          	mv	a1,a5
2041112c:	fec42503          	lw	a0,-20(s0)
20411130:	7c8000ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20411134:	00050793          	mv	a5,a0
  }
20411138:	00078513          	mv	a0,a5
2041113c:	01c12083          	lw	ra,28(sp)
20411140:	01812403          	lw	s0,24(sp)
20411144:	02010113          	addi	sp,sp,32
20411148:	00008067          	ret

2041114c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IhEEPT_i>:
  T* allocate_(int count = 1) {
2041114c:	fe010113          	addi	sp,sp,-32
20411150:	00112e23          	sw	ra,28(sp)
20411154:	00812c23          	sw	s0,24(sp)
20411158:	02010413          	addi	s0,sp,32
2041115c:	fea42623          	sw	a0,-20(s0)
20411160:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20411164:	fe842783          	lw	a5,-24(s0)
20411168:	00100613          	li	a2,1
2041116c:	00078593          	mv	a1,a5
20411170:	fec42503          	lw	a0,-20(s0)
20411174:	784000ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20411178:	00050793          	mv	a5,a0
  }
2041117c:	00078513          	mv	a0,a5
20411180:	01c12083          	lw	ra,28(sp)
20411184:	01812403          	lw	s0,24(sp)
20411188:	02010113          	addi	sp,sp,32
2041118c:	00008067          	ret

20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>:
  void WriteRawBytes(const void* data, size_t size) {
20411190:	fd010113          	addi	sp,sp,-48
20411194:	02112623          	sw	ra,44(sp)
20411198:	02812423          	sw	s0,40(sp)
2041119c:	03010413          	addi	s0,sp,48
204111a0:	fca42e23          	sw	a0,-36(s0)
204111a4:	fcb42c23          	sw	a1,-40(s0)
204111a8:	fcc42a23          	sw	a2,-44(s0)
    const uint8_t* buf = reinterpret_cast<const uint8_t*>(data);
204111ac:	fd842783          	lw	a5,-40(s0)
204111b0:	fef42623          	sw	a5,-20(s0)
    size_t ndone = 0;
204111b4:	fe042423          	sw	zero,-24(s0)
    while (ndone < size) {
204111b8:	fe842703          	lw	a4,-24(s0)
204111bc:	fd442783          	lw	a5,-44(s0)
204111c0:	06f77a63          	bleu	a5,a4,20411234 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0xa4>
      ssize_t ret = io_->PosixWrite(buf, size - ndone);
204111c4:	fdc42783          	lw	a5,-36(s0)
204111c8:	0007a683          	lw	a3,0(a5)
204111cc:	fd442703          	lw	a4,-44(s0)
204111d0:	fe842783          	lw	a5,-24(s0)
204111d4:	40f707b3          	sub	a5,a4,a5
204111d8:	00078613          	mv	a2,a5
204111dc:	fec42583          	lw	a1,-20(s0)
204111e0:	00068513          	mv	a0,a3
204111e4:	a5cfd0ef          	jal	ra,2040e440 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler10PosixWriteEPKhj>
204111e8:	fea42223          	sw	a0,-28(s0)
      if (ret == 0 || ret == -1) {
204111ec:	fe442783          	lw	a5,-28(s0)
204111f0:	00078863          	beqz	a5,20411200 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0x70>
204111f4:	fe442703          	lw	a4,-28(s0)
204111f8:	fff00793          	li	a5,-1
204111fc:	00f71a63          	bne	a4,a5,20411210 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0x80>
        this->ThrowError(RPCServerStatus::kWriteError);
20411200:	00000613          	li	a2,0
20411204:	00b00593          	li	a1,11
20411208:	fdc42503          	lw	a0,-36(s0)
2041120c:	e50fe0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
      buf += ret;
20411210:	fe442783          	lw	a5,-28(s0)
20411214:	fec42703          	lw	a4,-20(s0)
20411218:	00f707b3          	add	a5,a4,a5
2041121c:	fef42623          	sw	a5,-20(s0)
      ndone += ret;
20411220:	fe442783          	lw	a5,-28(s0)
20411224:	fe842703          	lw	a4,-24(s0)
20411228:	00f707b3          	add	a5,a4,a5
2041122c:	fef42423          	sw	a5,-24(s0)
    while (ndone < size) {
20411230:	f89ff06f          	j	204111b8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj+0x28>
  }
20411234:	00000013          	nop
20411238:	02c12083          	lw	ra,44(sp)
2041123c:	02812403          	lw	s0,40(sp)
20411240:	03010113          	addi	sp,sp,48
20411244:	00008067          	ret

20411248 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8TVMValueEEPT_i>:
  T* ArenaAlloc(int count) {
20411248:	fe010113          	addi	sp,sp,-32
2041124c:	00112e23          	sw	ra,28(sp)
20411250:	00812c23          	sw	s0,24(sp)
20411254:	02010413          	addi	s0,sp,32
20411258:	fea42623          	sw	a0,-20(s0)
2041125c:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
20411260:	fec42783          	lw	a5,-20(s0)
20411264:	00478793          	addi	a5,a5,4
20411268:	fe842583          	lw	a1,-24(s0)
2041126c:	00078513          	mv	a0,a5
20411270:	7e0000ef          	jal	ra,20411a50 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8TVMValueEEPT_i>
20411274:	00050793          	mv	a5,a0
  }
20411278:	00078513          	mv	a0,a5
2041127c:	01c12083          	lw	ra,28(sp)
20411280:	01812403          	lw	s0,24(sp)
20411284:	02010113          	addi	sp,sp,32
20411288:	00008067          	ret

2041128c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIiEEPT_i>:
  T* ArenaAlloc(int count) {
2041128c:	fe010113          	addi	sp,sp,-32
20411290:	00112e23          	sw	ra,28(sp)
20411294:	00812c23          	sw	s0,24(sp)
20411298:	02010413          	addi	s0,sp,32
2041129c:	fea42623          	sw	a0,-20(s0)
204112a0:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
204112a4:	fec42783          	lw	a5,-20(s0)
204112a8:	00478793          	addi	a5,a5,4
204112ac:	fe842583          	lw	a1,-24(s0)
204112b0:	00078513          	mv	a0,a5
204112b4:	7e4000ef          	jal	ra,20411a98 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IiEEPT_i>
204112b8:	00050793          	mv	a5,a0
  }
204112bc:	00078513          	mv	a0,a5
204112c0:	01c12083          	lw	ra,28(sp)
204112c4:	01812403          	lw	s0,24(sp)
204112c8:	02010113          	addi	sp,sp,32
204112cc:	00008067          	ret

204112d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIiEEvPT_j>:
  void ReadArray(T* data, size_t count) {
204112d0:	fe010113          	addi	sp,sp,-32
204112d4:	00112e23          	sw	ra,28(sp)
204112d8:	00812c23          	sw	s0,24(sp)
204112dc:	02010413          	addi	s0,sp,32
204112e0:	fea42623          	sw	a0,-20(s0)
204112e4:	feb42423          	sw	a1,-24(s0)
204112e8:	fec42223          	sw	a2,-28(s0)
    return this->ReadRawBytes(data, sizeof(T) * count);
204112ec:	fe442783          	lw	a5,-28(s0)
204112f0:	00279793          	slli	a5,a5,0x2
204112f4:	00078613          	mv	a2,a5
204112f8:	fe842583          	lw	a1,-24(s0)
204112fc:	fec42503          	lw	a0,-20(s0)
20411300:	eecfe0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20411304:	01c12083          	lw	ra,28(sp)
20411308:	01812403          	lw	s0,24(sp)
2041130c:	02010113          	addi	sp,sp,32
20411310:	00008067          	ret

20411314 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIxEEvPT_>:
  void Read(T* data) {
20411314:	fe010113          	addi	sp,sp,-32
20411318:	00112e23          	sw	ra,28(sp)
2041131c:	00812c23          	sw	s0,24(sp)
20411320:	02010413          	addi	s0,sp,32
20411324:	fea42623          	sw	a0,-20(s0)
20411328:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
2041132c:	00800613          	li	a2,8
20411330:	fe842583          	lw	a1,-24(s0)
20411334:	fec42503          	lw	a0,-20(s0)
20411338:	eb4fe0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
2041133c:	00000013          	nop
20411340:	01c12083          	lw	ra,28(sp)
20411344:	01812403          	lw	s0,24(sp)
20411348:	02010113          	addi	sp,sp,32
2041134c:	00008067          	ret

20411350 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIlEEvPT_>:
  void Read(T* data) {
20411350:	fe010113          	addi	sp,sp,-32
20411354:	00112e23          	sw	ra,28(sp)
20411358:	00812c23          	sw	s0,24(sp)
2041135c:	02010413          	addi	s0,sp,32
20411360:	fea42623          	sw	a0,-20(s0)
20411364:	feb42423          	sw	a1,-24(s0)
    this->ReadRawBytes(data, sizeof(T));
20411368:	00400613          	li	a2,4
2041136c:	fe842583          	lw	a1,-24(s0)
20411370:	fec42503          	lw	a0,-20(s0)
20411374:	e78fe0ef          	jal	ra,2040f9ec <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12ReadRawBytesEPvj>
  }
20411378:	00000013          	nop
2041137c:	01c12083          	lw	ra,28(sp)
20411380:	01812403          	lw	s0,24(sp)
20411384:	02010113          	addi	sp,sp,32
20411388:	00008067          	ret

2041138c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI12TVMByteArrayEEPT_i>:
  T* ArenaAlloc(int count) {
2041138c:	fe010113          	addi	sp,sp,-32
20411390:	00112e23          	sw	ra,28(sp)
20411394:	00812c23          	sw	s0,24(sp)
20411398:	02010413          	addi	s0,sp,32
2041139c:	fea42623          	sw	a0,-20(s0)
204113a0:	feb42423          	sw	a1,-24(s0)
    return arena_.template allocate_<T>(count);
204113a4:	fec42783          	lw	a5,-20(s0)
204113a8:	00478793          	addi	a5,a5,4
204113ac:	fe842583          	lw	a1,-24(s0)
204113b0:	00078513          	mv	a0,a5
204113b4:	72c000ef          	jal	ra,20411ae0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I12TVMByteArrayEEPT_i>
204113b8:	00050793          	mv	a5,a0
  }
204113bc:	00078513          	mv	a0,a5
204113c0:	01c12083          	lw	ra,28(sp)
204113c4:	01812403          	lw	s0,24(sp)
204113c8:	02010113          	addi	sp,sp,32
204113cc:	00008067          	ret

204113d0 <_ZN3tvm7runtime12RPCReference15ReceiveDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEP8DLTensorT_>:
  static DLTensor* ReceiveDLTensor(TChannelPtr channel) {
204113d0:	fd010113          	addi	sp,sp,-48
204113d4:	02112623          	sw	ra,44(sp)
204113d8:	02812423          	sw	s0,40(sp)
204113dc:	03010413          	addi	s0,sp,48
204113e0:	fca42e23          	sw	a0,-36(s0)
    channel->Read(&handle);
204113e4:	fe040793          	addi	a5,s0,-32
204113e8:	00078593          	mv	a1,a5
204113ec:	fdc42503          	lw	a0,-36(s0)
204113f0:	a85fd0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    DLTensor* arr = channel->template ArenaAlloc<DLTensor>(1);
204113f4:	00100593          	li	a1,1
204113f8:	fdc42503          	lw	a0,-36(s0)
204113fc:	b68ff0ef          	jal	ra,20410764 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocI8DLTensorEEPT_i>
20411400:	fea42623          	sw	a0,-20(s0)
    DLTensor& tensor = *arr;
20411404:	fec42783          	lw	a5,-20(s0)
20411408:	fef42423          	sw	a5,-24(s0)
    tensor.data = reinterpret_cast<void*>(handle);
2041140c:	fe042783          	lw	a5,-32(s0)
20411410:	fe442803          	lw	a6,-28(s0)
20411414:	00078713          	mv	a4,a5
20411418:	fe842783          	lw	a5,-24(s0)
2041141c:	00e7a023          	sw	a4,0(a5)
    channel->Read(&(tensor.device));
20411420:	fe842783          	lw	a5,-24(s0)
20411424:	00478793          	addi	a5,a5,4
20411428:	00078593          	mv	a1,a5
2041142c:	fdc42503          	lw	a0,-36(s0)
20411430:	b78ff0ef          	jal	ra,204107a8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI8DLDeviceEEvPT_>
    channel->Read(&(tensor.ndim));
20411434:	fe842783          	lw	a5,-24(s0)
20411438:	00c78793          	addi	a5,a5,12
2041143c:	00078593          	mv	a1,a5
20411440:	fdc42503          	lw	a0,-36(s0)
20411444:	ba0ff0ef          	jal	ra,204107e4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIiEEvPT_>
    channel->Read(&(tensor.dtype));
20411448:	fe842783          	lw	a5,-24(s0)
2041144c:	01078793          	addi	a5,a5,16
20411450:	00078593          	mv	a1,a5
20411454:	fdc42503          	lw	a0,-36(s0)
20411458:	bc8ff0ef          	jal	ra,20410820 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadI10DLDataTypeEEvPT_>
    tensor.shape = channel->template ArenaAlloc<int64_t>(tensor.ndim);
2041145c:	fe842783          	lw	a5,-24(s0)
20411460:	00c7a783          	lw	a5,12(a5)
20411464:	00078593          	mv	a1,a5
20411468:	fdc42503          	lw	a0,-36(s0)
2041146c:	bf0ff0ef          	jal	ra,2041085c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ArenaAllocIxEEPT_i>
20411470:	00050713          	mv	a4,a0
20411474:	fe842783          	lw	a5,-24(s0)
20411478:	00e7aa23          	sw	a4,20(a5)
    channel->ReadArray(tensor.shape, tensor.ndim);
2041147c:	fe842783          	lw	a5,-24(s0)
20411480:	0147a703          	lw	a4,20(a5)
20411484:	fe842783          	lw	a5,-24(s0)
20411488:	00c7a783          	lw	a5,12(a5)
2041148c:	00078613          	mv	a2,a5
20411490:	00070593          	mv	a1,a4
20411494:	fdc42503          	lw	a0,-36(s0)
20411498:	c08ff0ef          	jal	ra,204108a0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE9ReadArrayIxEEvPT_j>
    tensor.strides = nullptr;
2041149c:	fe842783          	lw	a5,-24(s0)
204114a0:	0007ac23          	sw	zero,24(a5)
    channel->Read(&(tensor.byte_offset));
204114a4:	fe842783          	lw	a5,-24(s0)
204114a8:	02078793          	addi	a5,a5,32
204114ac:	00078593          	mv	a1,a5
204114b0:	fdc42503          	lw	a0,-36(s0)
204114b4:	9c1fd0ef          	jal	ra,2040ee74 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE4ReadIyEEvPT_>
    return arr;
204114b8:	fec42783          	lw	a5,-20(s0)
  }
204114bc:	00078513          	mv	a0,a5
204114c0:	02c12083          	lw	ra,44(sp)
204114c4:	02812403          	lw	s0,40(sp)
204114c8:	03010113          	addi	sp,sp,48
204114cc:	00008067          	ret

204114d0 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE12MessageStartEy>:
  void MessageStart(uint64_t packet_nbytes) { io_->MessageStart(packet_nbytes); }
204114d0:	fe010113          	addi	sp,sp,-32
204114d4:	00112e23          	sw	ra,28(sp)
204114d8:	00812c23          	sw	s0,24(sp)
204114dc:	02010413          	addi	s0,sp,32
204114e0:	fea42623          	sw	a0,-20(s0)
204114e4:	feb42023          	sw	a1,-32(s0)
204114e8:	fec42223          	sw	a2,-28(s0)
204114ec:	fec42783          	lw	a5,-20(s0)
204114f0:	0007a783          	lw	a5,0(a5)
204114f4:	fe042703          	lw	a4,-32(s0)
204114f8:	00070593          	mv	a1,a4
204114fc:	00078513          	mv	a0,a5
20411500:	ef5fc0ef          	jal	ra,2040e3f4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler12MessageStartEj>
20411504:	00000013          	nop
20411508:	01c12083          	lw	ra,28(sp)
2041150c:	01812403          	lw	s0,24(sp)
20411510:	02010113          	addi	sp,sp,32
20411514:	00008067          	ret

20411518 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>:
  void WriteArray(T* data, size_t count) {
20411518:	fe010113          	addi	sp,sp,-32
2041151c:	00112e23          	sw	ra,28(sp)
20411520:	00812c23          	sw	s0,24(sp)
20411524:	02010413          	addi	s0,sp,32
20411528:	fea42623          	sw	a0,-20(s0)
2041152c:	feb42423          	sw	a1,-24(s0)
20411530:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
20411534:	fe442603          	lw	a2,-28(s0)
20411538:	fe842583          	lw	a1,-24(s0)
2041153c:	fec42503          	lw	a0,-20(s0)
20411540:	c51ff0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411544:	01c12083          	lw	ra,28(sp)
20411548:	01812403          	lw	s0,24(sp)
2041154c:	02010113          	addi	sp,sp,32
20411550:	00008067          	ret

20411554 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE11MessageDoneEv>:
  void MessageDone() { io_->MessageDone(); }
20411554:	fe010113          	addi	sp,sp,-32
20411558:	00112e23          	sw	ra,28(sp)
2041155c:	00812c23          	sw	s0,24(sp)
20411560:	02010413          	addi	s0,sp,32
20411564:	fea42623          	sw	a0,-20(s0)
20411568:	fec42783          	lw	a5,-20(s0)
2041156c:	0007a783          	lw	a5,0(a5)
20411570:	00078513          	mv	a0,a5
20411574:	f31fc0ef          	jal	ra,2040e4a4 <_ZN3tvm7runtime9micro_rpc14MicroIOHandler11MessageDoneEv>
20411578:	00000013          	nop
2041157c:	01c12083          	lw	ra,28(sp)
20411580:	01812403          	lw	s0,24(sp)
20411584:	02010113          	addi	sp,sp,32
20411588:	00008067          	ret

2041158c <_ZN3tvm7runtime12RPCReference20PackedSeqGetNumBytesINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEyPK8TVMValuePKiibPT_>:
  static uint64_t PackedSeqGetNumBytes(const TVMValue* arg_values, const int* type_codes,
2041158c:	fc010113          	addi	sp,sp,-64
20411590:	02112e23          	sw	ra,60(sp)
20411594:	02812c23          	sw	s0,56(sp)
20411598:	04010413          	addi	s0,sp,64
2041159c:	fca42e23          	sw	a0,-36(s0)
204115a0:	fcb42c23          	sw	a1,-40(s0)
204115a4:	fcc42a23          	sw	a2,-44(s0)
204115a8:	00068793          	mv	a5,a3
204115ac:	fce42623          	sw	a4,-52(s0)
204115b0:	fcf409a3          	sb	a5,-45(s0)
    PackedSeqNumBytesGetter<TChannel> getter(channel);
204115b4:	fe040793          	addi	a5,s0,-32
204115b8:	fcc42583          	lw	a1,-52(s0)
204115bc:	00078513          	mv	a0,a5
204115c0:	568000ef          	jal	ra,20411b28 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEC1EPS8_>
    SendPackedSeq(arg_values, type_codes, num_args, client_mode, &getter);
204115c4:	fe040713          	addi	a4,s0,-32
204115c8:	fd344783          	lbu	a5,-45(s0)
204115cc:	00078693          	mv	a3,a5
204115d0:	fd442603          	lw	a2,-44(s0)
204115d4:	fd842583          	lw	a1,-40(s0)
204115d8:	fdc42503          	lw	a0,-36(s0)
204115dc:	590000ef          	jal	ra,20411b6c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_>
    return getter.num_bytes();
204115e0:	fe040793          	addi	a5,s0,-32
204115e4:	00078513          	mv	a0,a5
204115e8:	065000ef          	jal	ra,20411e4c <_ZNK3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE9num_bytesEv>
204115ec:	00050793          	mv	a5,a0
204115f0:	00058813          	mv	a6,a1
  }
204115f4:	00078513          	mv	a0,a5
204115f8:	00080593          	mv	a1,a6
204115fc:	03c12083          	lw	ra,60(sp)
20411600:	03812403          	lw	s0,56(sp)
20411604:	04010113          	addi	sp,sp,64
20411608:	00008067          	ret

2041160c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_>:
  static void SendPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args,
2041160c:	f7010113          	addi	sp,sp,-144
20411610:	08112623          	sw	ra,140(sp)
20411614:	08812423          	sw	s0,136(sp)
20411618:	09212223          	sw	s2,132(sp)
2041161c:	09312023          	sw	s3,128(sp)
20411620:	07412e23          	sw	s4,124(sp)
20411624:	07512c23          	sw	s5,120(sp)
20411628:	07612a23          	sw	s6,116(sp)
2041162c:	07712823          	sw	s7,112(sp)
20411630:	09010413          	addi	s0,sp,144
20411634:	f8a42623          	sw	a0,-116(s0)
20411638:	f8b42423          	sw	a1,-120(s0)
2041163c:	f8c42223          	sw	a2,-124(s0)
20411640:	00068793          	mv	a5,a3
20411644:	f6e42e23          	sw	a4,-132(s0)
20411648:	f8f401a3          	sb	a5,-125(s0)
    channel->Write(num_args);
2041164c:	f8440793          	addi	a5,s0,-124
20411650:	00078593          	mv	a1,a5
20411654:	f7c42503          	lw	a0,-132(s0)
20411658:	025000ef          	jal	ra,20411e7c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIiEEvRKT_>
    channel->WriteArray(type_codes, num_args);
2041165c:	f8442783          	lw	a5,-124(s0)
20411660:	00078613          	mv	a2,a5
20411664:	f8842583          	lw	a1,-120(s0)
20411668:	f7c42503          	lw	a0,-132(s0)
2041166c:	049000ef          	jal	ra,20411eb4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKiEEvPT_j>
    for (int i = 0; i < num_args; ++i) {
20411670:	fc042e23          	sw	zero,-36(s0)
20411674:	f8442783          	lw	a5,-124(s0)
20411678:	fdc42703          	lw	a4,-36(s0)
2041167c:	24f75863          	ble	a5,a4,204118cc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2c0>
      int tcode = type_codes[i];
20411680:	fdc42783          	lw	a5,-36(s0)
20411684:	00279793          	slli	a5,a5,0x2
20411688:	f8842703          	lw	a4,-120(s0)
2041168c:	00f707b3          	add	a5,a4,a5
20411690:	0007a783          	lw	a5,0(a5)
20411694:	fcf42c23          	sw	a5,-40(s0)
      TVMValue value = arg_values[i];
20411698:	fdc42783          	lw	a5,-36(s0)
2041169c:	00379793          	slli	a5,a5,0x3
204116a0:	f8c42703          	lw	a4,-116(s0)
204116a4:	00f707b3          	add	a5,a4,a5
204116a8:	0047a803          	lw	a6,4(a5)
204116ac:	0007a783          	lw	a5,0(a5)
204116b0:	fcf42023          	sw	a5,-64(s0)
204116b4:	fd042223          	sw	a6,-60(s0)
      switch (tcode) {
204116b8:	fd842703          	lw	a4,-40(s0)
204116bc:	00d00793          	li	a5,13
204116c0:	1ee7e263          	bltu	a5,a4,204118a4 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x298>
204116c4:	fd842783          	lw	a5,-40(s0)
204116c8:	00279713          	slli	a4,a5,0x2
204116cc:	00010797          	auipc	a5,0x10
204116d0:	21878793          	addi	a5,a5,536 # 204218e4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x28c>
204116d4:	00f707b3          	add	a5,a4,a5
204116d8:	0007a703          	lw	a4,0(a5)
204116dc:	00010797          	auipc	a5,0x10
204116e0:	20878793          	addi	a5,a5,520 # 204218e4 <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x28c>
204116e4:	00f707b3          	add	a5,a4,a5
204116e8:	00078067          	jr	a5
          channel->template Write<int64_t>(value.v_int64);
204116ec:	fc040793          	addi	a5,s0,-64
204116f0:	00078593          	mv	a1,a5
204116f4:	f7c42503          	lw	a0,-132(s0)
204116f8:	001000ef          	jal	ra,20411ef8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIxEEvRKT_>
          break;
204116fc:	1c00006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->Write(value.v_type);
20411700:	fc040793          	addi	a5,s0,-64
20411704:	00078593          	mv	a1,a5
20411708:	f7c42503          	lw	a0,-132(s0)
2041170c:	025000ef          	jal	ra,20411f30 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI10DLDataTypeEEvRKT_>
          int32_t padding = 0;
20411710:	fa042e23          	sw	zero,-68(s0)
          channel->template Write<int32_t>(padding);
20411714:	fbc40793          	addi	a5,s0,-68
20411718:	00078593          	mv	a1,a5
2041171c:	f7c42503          	lw	a0,-132(s0)
20411720:	959ff0ef          	jal	ra,20411078 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIlEEvRKT_>
          break;
20411724:	00000013          	nop
20411728:	1940006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->Write(value.v_device);
2041172c:	fc040793          	addi	a5,s0,-64
20411730:	00078593          	mv	a1,a5
20411734:	f7c42503          	lw	a0,-132(s0)
20411738:	031000ef          	jal	ra,20411f68 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI8DLDeviceEEvRKT_>
          break;
2041173c:	1800006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          if (!client_mode) {
20411740:	f8344783          	lbu	a5,-125(s0)
20411744:	0017c793          	xori	a5,a5,1
20411748:	0ff7f793          	andi	a5,a5,255
2041174c:	00078a63          	beqz	a5,20411760 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x154>
            channel->ThrowError(RPCServerStatus::kInvalidTypeCodeObject);
20411750:	00000613          	li	a2,0
20411754:	00100593          	li	a1,1
20411758:	f7c42503          	lw	a0,-132(s0)
2041175c:	900fe0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
20411760:	fc042783          	lw	a5,-64(s0)
20411764:	00078913          	mv	s2,a5
20411768:	41f7d793          	srai	a5,a5,0x1f
2041176c:	00078993          	mv	s3,a5
20411770:	fb242823          	sw	s2,-80(s0)
20411774:	fb342a23          	sw	s3,-76(s0)
          channel->Write(handle);
20411778:	fb040793          	addi	a5,s0,-80
2041177c:	00078593          	mv	a1,a5
20411780:	f7c42503          	lw	a0,-132(s0)
20411784:	9a4ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          break;
20411788:	00000013          	nop
2041178c:	1300006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
20411790:	fc042783          	lw	a5,-64(s0)
20411794:	00078a13          	mv	s4,a5
20411798:	41f7d793          	srai	a5,a5,0x1f
2041179c:	00078a93          	mv	s5,a5
204117a0:	fb442423          	sw	s4,-88(s0)
204117a4:	fb542623          	sw	s5,-84(s0)
          channel->Write(handle);
204117a8:	fa840793          	addi	a5,s0,-88
204117ac:	00078593          	mv	a1,a5
204117b0:	f7c42503          	lw	a0,-132(s0)
204117b4:	974ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          break;
204117b8:	00000013          	nop
204117bc:	1000006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->ThrowError(RPCServerStatus::kInvalidTypeCodeNDArray);
204117c0:	00000613          	li	a2,0
204117c4:	00200593          	li	a1,2
204117c8:	f7c42503          	lw	a0,-132(s0)
204117cc:	890fe0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
204117d0:	0ec0006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          DLTensor* arr = static_cast<DLTensor*>(value.v_handle);
204117d4:	fc042783          	lw	a5,-64(s0)
204117d8:	fcf42623          	sw	a5,-52(s0)
          SendDLTensor(channel, arr);
204117dc:	fcc42583          	lw	a1,-52(s0)
204117e0:	f7c42503          	lw	a0,-132(s0)
204117e4:	7bc000ef          	jal	ra,20411fa0 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvT_P8DLTensor>
          break;
204117e8:	0d40006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          const char* s = value.v_str;
204117ec:	fc042783          	lw	a5,-64(s0)
204117f0:	fcf42823          	sw	a5,-48(s0)
          uint64_t len = StrLength(s);
204117f4:	fd042503          	lw	a0,-48(s0)
204117f8:	b39fc0ef          	jal	ra,2040e330 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>
204117fc:	00050793          	mv	a5,a0
20411800:	00058813          	mv	a6,a1
20411804:	faf42023          	sw	a5,-96(s0)
20411808:	fb042223          	sw	a6,-92(s0)
          channel->Write(len);
2041180c:	fa040793          	addi	a5,s0,-96
20411810:	00078593          	mv	a1,a5
20411814:	f7c42503          	lw	a0,-132(s0)
20411818:	910ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          channel->WriteArray(s, len);
2041181c:	fa042783          	lw	a5,-96(s0)
20411820:	fa442803          	lw	a6,-92(s0)
20411824:	00078613          	mv	a2,a5
20411828:	fd042583          	lw	a1,-48(s0)
2041182c:	f7c42503          	lw	a0,-132(s0)
20411830:	ce9ff0ef          	jal	ra,20411518 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>
          break;
20411834:	00000013          	nop
20411838:	0840006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          TVMByteArray* bytes = static_cast<TVMByteArray*>(arg_values[i].v_handle);
2041183c:	fdc42783          	lw	a5,-36(s0)
20411840:	00379793          	slli	a5,a5,0x3
20411844:	f8c42703          	lw	a4,-116(s0)
20411848:	00f707b3          	add	a5,a4,a5
2041184c:	0007a783          	lw	a5,0(a5)
20411850:	fcf42a23          	sw	a5,-44(s0)
          uint64_t len = bytes->size;
20411854:	fd442783          	lw	a5,-44(s0)
20411858:	0047a783          	lw	a5,4(a5)
2041185c:	00078b13          	mv	s6,a5
20411860:	00000b93          	li	s7,0
20411864:	f9642c23          	sw	s6,-104(s0)
20411868:	f9742e23          	sw	s7,-100(s0)
          channel->Write(len);
2041186c:	f9840793          	addi	a5,s0,-104
20411870:	00078593          	mv	a1,a5
20411874:	f7c42503          	lw	a0,-132(s0)
20411878:	8b0ff0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
          channel->WriteArray(bytes->data, len);
2041187c:	fd442783          	lw	a5,-44(s0)
20411880:	0007a703          	lw	a4,0(a5)
20411884:	f9842783          	lw	a5,-104(s0)
20411888:	f9c42803          	lw	a6,-100(s0)
2041188c:	00078613          	mv	a2,a5
20411890:	00070593          	mv	a1,a4
20411894:	f7c42503          	lw	a0,-132(s0)
20411898:	c81ff0ef          	jal	ra,20411518 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKcEEvPT_j>
          break;
2041189c:	00000013          	nop
204118a0:	01c0006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          channel->ThrowError(RPCServerStatus::kUnknownTypeCode);
204118a4:	00000613          	li	a2,0
204118a8:	00500593          	li	a1,5
204118ac:	f7c42503          	lw	a0,-132(s0)
204118b0:	fadfd0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
          break;
204118b4:	0080006f          	j	204118bc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x2b0>
          break;
204118b8:	00000013          	nop
    for (int i = 0; i < num_args; ++i) {
204118bc:	fdc42783          	lw	a5,-36(s0)
204118c0:	00178793          	addi	a5,a5,1
204118c4:	fcf42e23          	sw	a5,-36(s0)
204118c8:	dadff06f          	j	20411674 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvPK8TVMValuePKiibPT_+0x68>
  }
204118cc:	00000013          	nop
204118d0:	08c12083          	lw	ra,140(sp)
204118d4:	08812403          	lw	s0,136(sp)
204118d8:	08412903          	lw	s2,132(sp)
204118dc:	08012983          	lw	s3,128(sp)
204118e0:	07c12a03          	lw	s4,124(sp)
204118e4:	07812a83          	lw	s5,120(sp)
204118e8:	07412b03          	lw	s6,116(sp)
204118ec:	07012b83          	lw	s7,112(sp)
204118f0:	09010113          	addi	sp,sp,144
204118f4:	00008067          	ret

204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>:
  void* Alloc(size_t size, size_t align) {
204118f8:	fd010113          	addi	sp,sp,-48
204118fc:	02112623          	sw	ra,44(sp)
20411900:	02812423          	sw	s0,40(sp)
20411904:	03010413          	addi	s0,sp,48
20411908:	fca42e23          	sw	a0,-36(s0)
2041190c:	fcb42c23          	sw	a1,-40(s0)
20411910:	fcc42a23          	sw	a2,-44(s0)
    size_t offset = UpperAlign(head_->offset, align);
20411914:	fdc42783          	lw	a5,-36(s0)
20411918:	0047a783          	lw	a5,4(a5)
2041191c:	0087a783          	lw	a5,8(a5)
20411920:	fd442603          	lw	a2,-44(s0)
20411924:	00078593          	mv	a1,a5
20411928:	fdc42503          	lw	a0,-36(s0)
2041192c:	768000ef          	jal	ra,20412094 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10UpperAlignEjj>
20411930:	fea42423          	sw	a0,-24(s0)
    if (offset + size <= head_->size) {
20411934:	fe842703          	lw	a4,-24(s0)
20411938:	fd842783          	lw	a5,-40(s0)
2041193c:	00f70733          	add	a4,a4,a5
20411940:	fdc42783          	lw	a5,-36(s0)
20411944:	0047a783          	lw	a5,4(a5)
20411948:	0047a783          	lw	a5,4(a5)
2041194c:	02e7e863          	bltu	a5,a4,2041197c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0x84>
      head_->offset = offset + size;
20411950:	fdc42783          	lw	a5,-36(s0)
20411954:	0047a783          	lw	a5,4(a5)
20411958:	fe842683          	lw	a3,-24(s0)
2041195c:	fd842703          	lw	a4,-40(s0)
20411960:	00e68733          	add	a4,a3,a4
20411964:	00e7a423          	sw	a4,8(a5)
      return reinterpret_cast<char*>(head_) + offset;
20411968:	fdc42783          	lw	a5,-36(s0)
2041196c:	0047a703          	lw	a4,4(a5)
20411970:	fe842783          	lw	a5,-24(s0)
20411974:	00f707b3          	add	a5,a4,a5
20411978:	0c40006f          	j	20411a3c <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0x144>
      offset = UpperAlign(sizeof(ArenaPageHeader), align);
2041197c:	fd442603          	lw	a2,-44(s0)
20411980:	00c00593          	li	a1,12
20411984:	fdc42503          	lw	a0,-36(s0)
20411988:	70c000ef          	jal	ra,20412094 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10UpperAlignEjj>
2041198c:	fea42423          	sw	a0,-24(s0)
      if (free_list_ != nullptr && offset + size <= free_list_->size) {
20411990:	fdc42783          	lw	a5,-36(s0)
20411994:	00c7a783          	lw	a5,12(a5)
20411998:	04078263          	beqz	a5,204119dc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0xe4>
2041199c:	fe842703          	lw	a4,-24(s0)
204119a0:	fd842783          	lw	a5,-40(s0)
204119a4:	00f70733          	add	a4,a4,a5
204119a8:	fdc42783          	lw	a5,-36(s0)
204119ac:	00c7a783          	lw	a5,12(a5)
204119b0:	0047a783          	lw	a5,4(a5)
204119b4:	02e7e463          	bltu	a5,a4,204119dc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0xe4>
        new_head = free_list_;
204119b8:	fdc42783          	lw	a5,-36(s0)
204119bc:	00c7a783          	lw	a5,12(a5)
204119c0:	fef42623          	sw	a5,-20(s0)
        free_list_ = free_list_->next;
204119c4:	fdc42783          	lw	a5,-36(s0)
204119c8:	00c7a783          	lw	a5,12(a5)
204119cc:	0007a703          	lw	a4,0(a5)
204119d0:	fdc42783          	lw	a5,-36(s0)
204119d4:	00e7a623          	sw	a4,12(a5)
204119d8:	0240006f          	j	204119fc <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj+0x104>
        new_head = alloc_.allocate(offset + size);
204119dc:	fdc42683          	lw	a3,-36(s0)
204119e0:	fe842703          	lw	a4,-24(s0)
204119e4:	fd842783          	lw	a5,-40(s0)
204119e8:	00f707b3          	add	a5,a4,a5
204119ec:	00078593          	mv	a1,a5
204119f0:	00068513          	mv	a0,a3
204119f4:	eadfd0ef          	jal	ra,2040f8a0 <_ZN3tvm7runtime6detail13PageAllocatorINS0_9micro_rpc14MicroIOHandlerEE8allocateEj>
204119f8:	fea42623          	sw	a0,-20(s0)
      new_head->next = head_;
204119fc:	fdc42783          	lw	a5,-36(s0)
20411a00:	0047a703          	lw	a4,4(a5)
20411a04:	fec42783          	lw	a5,-20(s0)
20411a08:	00e7a023          	sw	a4,0(a5)
      new_head->offset = offset + size;
20411a0c:	fe842703          	lw	a4,-24(s0)
20411a10:	fd842783          	lw	a5,-40(s0)
20411a14:	00f70733          	add	a4,a4,a5
20411a18:	fec42783          	lw	a5,-20(s0)
20411a1c:	00e7a423          	sw	a4,8(a5)
      head_ = new_head;
20411a20:	fdc42783          	lw	a5,-36(s0)
20411a24:	fec42703          	lw	a4,-20(s0)
20411a28:	00e7a223          	sw	a4,4(a5)
      return reinterpret_cast<char*>(head_) + offset;
20411a2c:	fdc42783          	lw	a5,-36(s0)
20411a30:	0047a703          	lw	a4,4(a5)
20411a34:	fe842783          	lw	a5,-24(s0)
20411a38:	00f707b3          	add	a5,a4,a5
  }
20411a3c:	00078513          	mv	a0,a5
20411a40:	02c12083          	lw	ra,44(sp)
20411a44:	02812403          	lw	s0,40(sp)
20411a48:	03010113          	addi	sp,sp,48
20411a4c:	00008067          	ret

20411a50 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I8TVMValueEEPT_i>:
  T* allocate_(int count = 1) {
20411a50:	fe010113          	addi	sp,sp,-32
20411a54:	00112e23          	sw	ra,28(sp)
20411a58:	00812c23          	sw	s0,24(sp)
20411a5c:	02010413          	addi	s0,sp,32
20411a60:	fea42623          	sw	a0,-20(s0)
20411a64:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20411a68:	fe842783          	lw	a5,-24(s0)
20411a6c:	00379793          	slli	a5,a5,0x3
20411a70:	00800613          	li	a2,8
20411a74:	00078593          	mv	a1,a5
20411a78:	fec42503          	lw	a0,-20(s0)
20411a7c:	e7dff0ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20411a80:	00050793          	mv	a5,a0
  }
20411a84:	00078513          	mv	a0,a5
20411a88:	01c12083          	lw	ra,28(sp)
20411a8c:	01812403          	lw	s0,24(sp)
20411a90:	02010113          	addi	sp,sp,32
20411a94:	00008067          	ret

20411a98 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_IiEEPT_i>:
  T* allocate_(int count = 1) {
20411a98:	fe010113          	addi	sp,sp,-32
20411a9c:	00112e23          	sw	ra,28(sp)
20411aa0:	00812c23          	sw	s0,24(sp)
20411aa4:	02010413          	addi	s0,sp,32
20411aa8:	fea42623          	sw	a0,-20(s0)
20411aac:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20411ab0:	fe842783          	lw	a5,-24(s0)
20411ab4:	00279793          	slli	a5,a5,0x2
20411ab8:	00400613          	li	a2,4
20411abc:	00078593          	mv	a1,a5
20411ac0:	fec42503          	lw	a0,-20(s0)
20411ac4:	e35ff0ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20411ac8:	00050793          	mv	a5,a0
  }
20411acc:	00078513          	mv	a0,a5
20411ad0:	01c12083          	lw	ra,28(sp)
20411ad4:	01812403          	lw	s0,24(sp)
20411ad8:	02010113          	addi	sp,sp,32
20411adc:	00008067          	ret

20411ae0 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE9allocate_I12TVMByteArrayEEPT_i>:
  T* allocate_(int count = 1) {
20411ae0:	fe010113          	addi	sp,sp,-32
20411ae4:	00112e23          	sw	ra,28(sp)
20411ae8:	00812c23          	sw	s0,24(sp)
20411aec:	02010413          	addi	s0,sp,32
20411af0:	fea42623          	sw	a0,-20(s0)
20411af4:	feb42423          	sw	a1,-24(s0)
    return static_cast<T*>(Alloc(sizeof(T) * count, alignof(T)));
20411af8:	fe842783          	lw	a5,-24(s0)
20411afc:	00379793          	slli	a5,a5,0x3
20411b00:	00400613          	li	a2,4
20411b04:	00078593          	mv	a1,a5
20411b08:	fec42503          	lw	a0,-20(s0)
20411b0c:	dedff0ef          	jal	ra,204118f8 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE5AllocEjj>
20411b10:	00050793          	mv	a5,a0
  }
20411b14:	00078513          	mv	a0,a5
20411b18:	01c12083          	lw	ra,28(sp)
20411b1c:	01812403          	lw	s0,24(sp)
20411b20:	02010113          	addi	sp,sp,32
20411b24:	00008067          	ret

20411b28 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEC1EPS8_>:
    explicit PackedSeqNumBytesGetter(TChannel* channel) : channel_(channel) {}
20411b28:	fe010113          	addi	sp,sp,-32
20411b2c:	00812e23          	sw	s0,28(sp)
20411b30:	02010413          	addi	s0,sp,32
20411b34:	fea42623          	sw	a0,-20(s0)
20411b38:	feb42423          	sw	a1,-24(s0)
20411b3c:	fec42783          	lw	a5,-20(s0)
20411b40:	fe842703          	lw	a4,-24(s0)
20411b44:	00e7a023          	sw	a4,0(a5)
20411b48:	fec42783          	lw	a5,-20(s0)
20411b4c:	00000693          	li	a3,0
20411b50:	00000713          	li	a4,0
20411b54:	00d7a423          	sw	a3,8(a5)
20411b58:	00e7a623          	sw	a4,12(a5)
20411b5c:	00000013          	nop
20411b60:	01c12403          	lw	s0,28(sp)
20411b64:	02010113          	addi	sp,sp,32
20411b68:	00008067          	ret

20411b6c <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_>:
  static void SendPackedSeq(const TVMValue* arg_values, const int* type_codes, int num_args,
20411b6c:	f7010113          	addi	sp,sp,-144
20411b70:	08112623          	sw	ra,140(sp)
20411b74:	08812423          	sw	s0,136(sp)
20411b78:	09212223          	sw	s2,132(sp)
20411b7c:	09312023          	sw	s3,128(sp)
20411b80:	07412e23          	sw	s4,124(sp)
20411b84:	07512c23          	sw	s5,120(sp)
20411b88:	07612a23          	sw	s6,116(sp)
20411b8c:	07712823          	sw	s7,112(sp)
20411b90:	09010413          	addi	s0,sp,144
20411b94:	f8a42623          	sw	a0,-116(s0)
20411b98:	f8b42423          	sw	a1,-120(s0)
20411b9c:	f8c42223          	sw	a2,-124(s0)
20411ba0:	00068793          	mv	a5,a3
20411ba4:	f6e42e23          	sw	a4,-132(s0)
20411ba8:	f8f401a3          	sb	a5,-125(s0)
    channel->Write(num_args);
20411bac:	f8440793          	addi	a5,s0,-124
20411bb0:	00078593          	mv	a1,a5
20411bb4:	f7c42503          	lw	a0,-132(s0)
20411bb8:	548000ef          	jal	ra,20412100 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIiEEvRKT_>
    channel->WriteArray(type_codes, num_args);
20411bbc:	f8442783          	lw	a5,-124(s0)
20411bc0:	00078613          	mv	a2,a5
20411bc4:	f8842583          	lw	a1,-120(s0)
20411bc8:	f7c42503          	lw	a0,-132(s0)
20411bcc:	598000ef          	jal	ra,20412164 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIiEEvPKT_j>
    for (int i = 0; i < num_args; ++i) {
20411bd0:	fc042e23          	sw	zero,-36(s0)
20411bd4:	f8442783          	lw	a5,-124(s0)
20411bd8:	fdc42703          	lw	a4,-36(s0)
20411bdc:	24f75263          	ble	a5,a4,20411e20 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2b4>
      int tcode = type_codes[i];
20411be0:	fdc42783          	lw	a5,-36(s0)
20411be4:	00279793          	slli	a5,a5,0x2
20411be8:	f8842703          	lw	a4,-120(s0)
20411bec:	00f707b3          	add	a5,a4,a5
20411bf0:	0007a783          	lw	a5,0(a5)
20411bf4:	fcf42c23          	sw	a5,-40(s0)
      TVMValue value = arg_values[i];
20411bf8:	fdc42783          	lw	a5,-36(s0)
20411bfc:	00379793          	slli	a5,a5,0x3
20411c00:	f8c42703          	lw	a4,-116(s0)
20411c04:	00f707b3          	add	a5,a4,a5
20411c08:	0047a803          	lw	a6,4(a5)
20411c0c:	0007a783          	lw	a5,0(a5)
20411c10:	fcf42023          	sw	a5,-64(s0)
20411c14:	fd042223          	sw	a6,-60(s0)
      switch (tcode) {
20411c18:	fd842703          	lw	a4,-40(s0)
20411c1c:	00d00793          	li	a5,13
20411c20:	1ce7ee63          	bltu	a5,a4,20411dfc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x290>
20411c24:	fd842783          	lw	a5,-40(s0)
20411c28:	00279713          	slli	a4,a5,0x2
20411c2c:	00010797          	auipc	a5,0x10
20411c30:	cf078793          	addi	a5,a5,-784 # 2042191c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x2c4>
20411c34:	00f707b3          	add	a5,a4,a5
20411c38:	0007a703          	lw	a4,0(a5)
20411c3c:	00010797          	auipc	a5,0x10
20411c40:	ce078793          	addi	a5,a5,-800 # 2042191c <_ZTVN3tvm7runtime9micro_rpc11WriteStreamE+0x2c4>
20411c44:	00f707b3          	add	a5,a4,a5
20411c48:	00078067          	jr	a5
          channel->template Write<int64_t>(value.v_int64);
20411c4c:	fc040793          	addi	a5,s0,-64
20411c50:	00078593          	mv	a1,a5
20411c54:	f7c42503          	lw	a0,-132(s0)
20411c58:	57c000ef          	jal	ra,204121d4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIxEEvRKT_>
          break;
20411c5c:	1b40006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->Write(value.v_type);
20411c60:	fc040793          	addi	a5,s0,-64
20411c64:	00078593          	mv	a1,a5
20411c68:	f7c42503          	lw	a0,-132(s0)
20411c6c:	5cc000ef          	jal	ra,20412238 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI10DLDataTypeEEvRKT_>
          int32_t padding = 0;
20411c70:	fa042e23          	sw	zero,-68(s0)
          channel->template Write<int32_t>(padding);
20411c74:	fbc40793          	addi	a5,s0,-68
20411c78:	00078593          	mv	a1,a5
20411c7c:	f7c42503          	lw	a0,-132(s0)
20411c80:	61c000ef          	jal	ra,2041229c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIlEEvRKT_>
          break;
20411c84:	00000013          	nop
20411c88:	1880006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->Write(value.v_device);
20411c8c:	fc040793          	addi	a5,s0,-64
20411c90:	00078593          	mv	a1,a5
20411c94:	f7c42503          	lw	a0,-132(s0)
20411c98:	668000ef          	jal	ra,20412300 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI8DLDeviceEEvRKT_>
          break;
20411c9c:	1740006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          if (!client_mode) {
20411ca0:	f8344783          	lbu	a5,-125(s0)
20411ca4:	0017c793          	xori	a5,a5,1
20411ca8:	0ff7f793          	andi	a5,a5,255
20411cac:	00078863          	beqz	a5,20411cbc <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x150>
            channel->ThrowError(RPCServerStatus::kInvalidTypeCodeObject);
20411cb0:	00100593          	li	a1,1
20411cb4:	f7c42503          	lw	a0,-132(s0)
20411cb8:	6ac000ef          	jal	ra,20412364 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
20411cbc:	fc042783          	lw	a5,-64(s0)
20411cc0:	00078913          	mv	s2,a5
20411cc4:	41f7d793          	srai	a5,a5,0x1f
20411cc8:	00078993          	mv	s3,a5
20411ccc:	fb242823          	sw	s2,-80(s0)
20411cd0:	fb342a23          	sw	s3,-76(s0)
          channel->Write(handle);
20411cd4:	fb040793          	addi	a5,s0,-80
20411cd8:	00078593          	mv	a1,a5
20411cdc:	f7c42503          	lw	a0,-132(s0)
20411ce0:	6c8000ef          	jal	ra,204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          break;
20411ce4:	00000013          	nop
20411ce8:	1280006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          uint64_t handle = reinterpret_cast<uint64_t>(value.v_handle);
20411cec:	fc042783          	lw	a5,-64(s0)
20411cf0:	00078a13          	mv	s4,a5
20411cf4:	41f7d793          	srai	a5,a5,0x1f
20411cf8:	00078a93          	mv	s5,a5
20411cfc:	fb442423          	sw	s4,-88(s0)
20411d00:	fb542623          	sw	s5,-84(s0)
          channel->Write(handle);
20411d04:	fa840793          	addi	a5,s0,-88
20411d08:	00078593          	mv	a1,a5
20411d0c:	f7c42503          	lw	a0,-132(s0)
20411d10:	698000ef          	jal	ra,204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          break;
20411d14:	00000013          	nop
20411d18:	0f80006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->ThrowError(RPCServerStatus::kInvalidTypeCodeNDArray);
20411d1c:	00200593          	li	a1,2
20411d20:	f7c42503          	lw	a0,-132(s0)
20411d24:	640000ef          	jal	ra,20412364 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
          break;
20411d28:	0e80006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          DLTensor* arr = static_cast<DLTensor*>(value.v_handle);
20411d2c:	fc042783          	lw	a5,-64(s0)
20411d30:	fcf42623          	sw	a5,-52(s0)
          SendDLTensor(channel, arr);
20411d34:	fcc42583          	lw	a1,-52(s0)
20411d38:	f7c42503          	lw	a0,-132(s0)
20411d3c:	6d0000ef          	jal	ra,2041240c <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvT_P8DLTensor>
          break;
20411d40:	0d00006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          const char* s = value.v_str;
20411d44:	fc042783          	lw	a5,-64(s0)
20411d48:	fcf42823          	sw	a5,-48(s0)
          uint64_t len = StrLength(s);
20411d4c:	fd042503          	lw	a0,-48(s0)
20411d50:	de0fc0ef          	jal	ra,2040e330 <_ZN3tvm7runtime12RPCReference9StrLengthEPKc>
20411d54:	00050793          	mv	a5,a0
20411d58:	00058813          	mv	a6,a1
20411d5c:	faf42023          	sw	a5,-96(s0)
20411d60:	fb042223          	sw	a6,-92(s0)
          channel->Write(len);
20411d64:	fa040793          	addi	a5,s0,-96
20411d68:	00078593          	mv	a1,a5
20411d6c:	f7c42503          	lw	a0,-132(s0)
20411d70:	638000ef          	jal	ra,204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          channel->WriteArray(s, len);
20411d74:	fa042783          	lw	a5,-96(s0)
20411d78:	fa442803          	lw	a6,-92(s0)
20411d7c:	00078613          	mv	a2,a5
20411d80:	fd042583          	lw	a1,-48(s0)
20411d84:	f7c42503          	lw	a0,-132(s0)
20411d88:	774000ef          	jal	ra,204124fc <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIcEEvPKT_j>
          break;
20411d8c:	00000013          	nop
20411d90:	0800006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          TVMByteArray* bytes = static_cast<TVMByteArray*>(arg_values[i].v_handle);
20411d94:	fdc42783          	lw	a5,-36(s0)
20411d98:	00379793          	slli	a5,a5,0x3
20411d9c:	f8c42703          	lw	a4,-116(s0)
20411da0:	00f707b3          	add	a5,a4,a5
20411da4:	0007a783          	lw	a5,0(a5)
20411da8:	fcf42a23          	sw	a5,-44(s0)
          uint64_t len = bytes->size;
20411dac:	fd442783          	lw	a5,-44(s0)
20411db0:	0047a783          	lw	a5,4(a5)
20411db4:	00078b13          	mv	s6,a5
20411db8:	00000b93          	li	s7,0
20411dbc:	f9642c23          	sw	s6,-104(s0)
20411dc0:	f9742e23          	sw	s7,-100(s0)
          channel->Write(len);
20411dc4:	f9840793          	addi	a5,s0,-104
20411dc8:	00078593          	mv	a1,a5
20411dcc:	f7c42503          	lw	a0,-132(s0)
20411dd0:	5d8000ef          	jal	ra,204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
          channel->WriteArray(bytes->data, len);
20411dd4:	fd442783          	lw	a5,-44(s0)
20411dd8:	0007a703          	lw	a4,0(a5)
20411ddc:	f9842783          	lw	a5,-104(s0)
20411de0:	f9c42803          	lw	a6,-100(s0)
20411de4:	00078613          	mv	a2,a5
20411de8:	00070593          	mv	a1,a4
20411dec:	f7c42503          	lw	a0,-132(s0)
20411df0:	70c000ef          	jal	ra,204124fc <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIcEEvPKT_j>
          break;
20411df4:	00000013          	nop
20411df8:	0180006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          channel->ThrowError(RPCServerStatus::kUnknownTypeCode);
20411dfc:	00500593          	li	a1,5
20411e00:	f7c42503          	lw	a0,-132(s0)
20411e04:	560000ef          	jal	ra,20412364 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
          break;
20411e08:	0080006f          	j	20411e10 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x2a4>
          break;
20411e0c:	00000013          	nop
    for (int i = 0; i < num_args; ++i) {
20411e10:	fdc42783          	lw	a5,-36(s0)
20411e14:	00178793          	addi	a5,a5,1
20411e18:	fcf42e23          	sw	a5,-36(s0)
20411e1c:	db9ff06f          	j	20411bd4 <_ZN3tvm7runtime12RPCReference13SendPackedSeqINS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvPK8TVMValuePKiibPT_+0x68>
  }
20411e20:	00000013          	nop
20411e24:	08c12083          	lw	ra,140(sp)
20411e28:	08812403          	lw	s0,136(sp)
20411e2c:	08412903          	lw	s2,132(sp)
20411e30:	08012983          	lw	s3,128(sp)
20411e34:	07c12a03          	lw	s4,124(sp)
20411e38:	07812a83          	lw	s5,120(sp)
20411e3c:	07412b03          	lw	s6,116(sp)
20411e40:	07012b83          	lw	s7,112(sp)
20411e44:	09010113          	addi	sp,sp,144
20411e48:	00008067          	ret

20411e4c <_ZNK3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE9num_bytesEv>:
    uint64_t num_bytes() const { return num_bytes_; }
20411e4c:	fe010113          	addi	sp,sp,-32
20411e50:	00812e23          	sw	s0,28(sp)
20411e54:	02010413          	addi	s0,sp,32
20411e58:	fea42623          	sw	a0,-20(s0)
20411e5c:	fec42783          	lw	a5,-20(s0)
20411e60:	00c7a803          	lw	a6,12(a5)
20411e64:	0087a783          	lw	a5,8(a5)
20411e68:	00078513          	mv	a0,a5
20411e6c:	00080593          	mv	a1,a6
20411e70:	01c12403          	lw	s0,28(sp)
20411e74:	02010113          	addi	sp,sp,32
20411e78:	00008067          	ret

20411e7c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIiEEvRKT_>:
  void Write(const T& data) {
20411e7c:	fe010113          	addi	sp,sp,-32
20411e80:	00112e23          	sw	ra,28(sp)
20411e84:	00812c23          	sw	s0,24(sp)
20411e88:	02010413          	addi	s0,sp,32
20411e8c:	fea42623          	sw	a0,-20(s0)
20411e90:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411e94:	00400613          	li	a2,4
20411e98:	fe842583          	lw	a1,-24(s0)
20411e9c:	fec42503          	lw	a0,-20(s0)
20411ea0:	af0ff0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411ea4:	01c12083          	lw	ra,28(sp)
20411ea8:	01812403          	lw	s0,24(sp)
20411eac:	02010113          	addi	sp,sp,32
20411eb0:	00008067          	ret

20411eb4 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIKiEEvPT_j>:
  void WriteArray(T* data, size_t count) {
20411eb4:	fe010113          	addi	sp,sp,-32
20411eb8:	00112e23          	sw	ra,28(sp)
20411ebc:	00812c23          	sw	s0,24(sp)
20411ec0:	02010413          	addi	s0,sp,32
20411ec4:	fea42623          	sw	a0,-20(s0)
20411ec8:	feb42423          	sw	a1,-24(s0)
20411ecc:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
20411ed0:	fe442783          	lw	a5,-28(s0)
20411ed4:	00279793          	slli	a5,a5,0x2
20411ed8:	00078613          	mv	a2,a5
20411edc:	fe842583          	lw	a1,-24(s0)
20411ee0:	fec42503          	lw	a0,-20(s0)
20411ee4:	aacff0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411ee8:	01c12083          	lw	ra,28(sp)
20411eec:	01812403          	lw	s0,24(sp)
20411ef0:	02010113          	addi	sp,sp,32
20411ef4:	00008067          	ret

20411ef8 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIxEEvRKT_>:
  void Write(const T& data) {
20411ef8:	fe010113          	addi	sp,sp,-32
20411efc:	00112e23          	sw	ra,28(sp)
20411f00:	00812c23          	sw	s0,24(sp)
20411f04:	02010413          	addi	s0,sp,32
20411f08:	fea42623          	sw	a0,-20(s0)
20411f0c:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411f10:	00800613          	li	a2,8
20411f14:	fe842583          	lw	a1,-24(s0)
20411f18:	fec42503          	lw	a0,-20(s0)
20411f1c:	a74ff0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411f20:	01c12083          	lw	ra,28(sp)
20411f24:	01812403          	lw	s0,24(sp)
20411f28:	02010113          	addi	sp,sp,32
20411f2c:	00008067          	ret

20411f30 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI10DLDataTypeEEvRKT_>:
  void Write(const T& data) {
20411f30:	fe010113          	addi	sp,sp,-32
20411f34:	00112e23          	sw	ra,28(sp)
20411f38:	00812c23          	sw	s0,24(sp)
20411f3c:	02010413          	addi	s0,sp,32
20411f40:	fea42623          	sw	a0,-20(s0)
20411f44:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411f48:	00400613          	li	a2,4
20411f4c:	fe842583          	lw	a1,-24(s0)
20411f50:	fec42503          	lw	a0,-20(s0)
20411f54:	a3cff0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411f58:	01c12083          	lw	ra,28(sp)
20411f5c:	01812403          	lw	s0,24(sp)
20411f60:	02010113          	addi	sp,sp,32
20411f64:	00008067          	ret

20411f68 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI8DLDeviceEEvRKT_>:
  void Write(const T& data) {
20411f68:	fe010113          	addi	sp,sp,-32
20411f6c:	00112e23          	sw	ra,28(sp)
20411f70:	00812c23          	sw	s0,24(sp)
20411f74:	02010413          	addi	s0,sp,32
20411f78:	fea42623          	sw	a0,-20(s0)
20411f7c:	feb42423          	sw	a1,-24(s0)
    return this->WriteRawBytes(&data, sizeof(T));
20411f80:	00800613          	li	a2,8
20411f84:	fe842583          	lw	a1,-24(s0)
20411f88:	fec42503          	lw	a0,-20(s0)
20411f8c:	a04ff0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
20411f90:	01c12083          	lw	ra,28(sp)
20411f94:	01812403          	lw	s0,24(sp)
20411f98:	02010113          	addi	sp,sp,32
20411f9c:	00008067          	ret

20411fa0 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvT_P8DLTensor>:
  static void SendDLTensor(TChannelPtr channel, DLTensor* arr) {
20411fa0:	fd010113          	addi	sp,sp,-48
20411fa4:	02112623          	sw	ra,44(sp)
20411fa8:	02812423          	sw	s0,40(sp)
20411fac:	03010413          	addi	s0,sp,48
20411fb0:	fca42e23          	sw	a0,-36(s0)
20411fb4:	fcb42c23          	sw	a1,-40(s0)
    dev = arr->device;
20411fb8:	fd842783          	lw	a5,-40(s0)
20411fbc:	0087a803          	lw	a6,8(a5)
20411fc0:	0047a783          	lw	a5,4(a5)
20411fc4:	fef42423          	sw	a5,-24(s0)
20411fc8:	ff042623          	sw	a6,-20(s0)
    data = reinterpret_cast<uint64_t>(arr->data);
20411fcc:	fd842783          	lw	a5,-40(s0)
20411fd0:	0007a783          	lw	a5,0(a5)
20411fd4:	00078693          	mv	a3,a5
20411fd8:	41f7d793          	srai	a5,a5,0x1f
20411fdc:	00078713          	mv	a4,a5
20411fe0:	fed42023          	sw	a3,-32(s0)
20411fe4:	fee42223          	sw	a4,-28(s0)
    channel->Write(data);
20411fe8:	fe040793          	addi	a5,s0,-32
20411fec:	00078593          	mv	a1,a5
20411ff0:	fdc42503          	lw	a0,-36(s0)
20411ff4:	935fe0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    channel->Write(dev);
20411ff8:	fe840793          	addi	a5,s0,-24
20411ffc:	00078593          	mv	a1,a5
20412000:	fdc42503          	lw	a0,-36(s0)
20412004:	f65ff0ef          	jal	ra,20411f68 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI8DLDeviceEEvRKT_>
    channel->Write(arr->ndim);
20412008:	fd842783          	lw	a5,-40(s0)
2041200c:	00c78793          	addi	a5,a5,12
20412010:	00078593          	mv	a1,a5
20412014:	fdc42503          	lw	a0,-36(s0)
20412018:	e65ff0ef          	jal	ra,20411e7c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIiEEvRKT_>
    channel->Write(arr->dtype);
2041201c:	fd842783          	lw	a5,-40(s0)
20412020:	01078793          	addi	a5,a5,16
20412024:	00078593          	mv	a1,a5
20412028:	fdc42503          	lw	a0,-36(s0)
2041202c:	f05ff0ef          	jal	ra,20411f30 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteI10DLDataTypeEEvRKT_>
    channel->WriteArray(arr->shape, arr->ndim);
20412030:	fd842783          	lw	a5,-40(s0)
20412034:	0147a703          	lw	a4,20(a5)
20412038:	fd842783          	lw	a5,-40(s0)
2041203c:	00c7a783          	lw	a5,12(a5)
20412040:	00078613          	mv	a2,a5
20412044:	00070593          	mv	a1,a4
20412048:	fdc42503          	lw	a0,-36(s0)
2041204c:	51c000ef          	jal	ra,20412568 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIxEEvPT_j>
    if (arr->strides != nullptr) {
20412050:	fd842783          	lw	a5,-40(s0)
20412054:	0187a783          	lw	a5,24(a5)
20412058:	00078a63          	beqz	a5,2041206c <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEvT_P8DLTensor+0xcc>
      channel->ThrowError(RPCServerStatus::kInvalidDLTensorFieldStride);
2041205c:	00000613          	li	a2,0
20412060:	00300593          	li	a1,3
20412064:	fdc42503          	lw	a0,-36(s0)
20412068:	ff4fd0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
    channel->Write(arr->byte_offset);
2041206c:	fd842783          	lw	a5,-40(s0)
20412070:	02078793          	addi	a5,a5,32
20412074:	00078593          	mv	a1,a5
20412078:	fdc42503          	lw	a0,-36(s0)
2041207c:	8adfe0ef          	jal	ra,20410928 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE5WriteIyEEvRKT_>
    return;
20412080:	00000013          	nop
  }
20412084:	02c12083          	lw	ra,44(sp)
20412088:	02812403          	lw	s0,40(sp)
2041208c:	03010113          	addi	sp,sp,48
20412090:	00008067          	ret

20412094 <_ZN3tvm7support12GenericArenaINS_7runtime6detail13PageAllocatorINS2_9micro_rpc14MicroIOHandlerEEEE10UpperAlignEjj>:
  size_t UpperAlign(size_t offset, size_t align) {
20412094:	fe010113          	addi	sp,sp,-32
20412098:	00112e23          	sw	ra,28(sp)
2041209c:	00812c23          	sw	s0,24(sp)
204120a0:	02010413          	addi	s0,sp,32
204120a4:	fea42623          	sw	a0,-20(s0)
204120a8:	feb42423          	sw	a1,-24(s0)
204120ac:	fec42223          	sw	a2,-28(s0)
    return offset + (align - (offset % align)) % align;
204120b0:	fe842783          	lw	a5,-24(s0)
204120b4:	fe442583          	lw	a1,-28(s0)
204120b8:	00078513          	mv	a0,a5
204120bc:	41d0d0ef          	jal	ra,2041fcd8 <__umodsi3>
204120c0:	00050793          	mv	a5,a0
204120c4:	00078713          	mv	a4,a5
204120c8:	fe442783          	lw	a5,-28(s0)
204120cc:	40e787b3          	sub	a5,a5,a4
204120d0:	fe442583          	lw	a1,-28(s0)
204120d4:	00078513          	mv	a0,a5
204120d8:	4010d0ef          	jal	ra,2041fcd8 <__umodsi3>
204120dc:	00050793          	mv	a5,a0
204120e0:	00078713          	mv	a4,a5
204120e4:	fe842783          	lw	a5,-24(s0)
204120e8:	00f707b3          	add	a5,a4,a5
  }
204120ec:	00078513          	mv	a0,a5
204120f0:	01c12083          	lw	ra,28(sp)
204120f4:	01812403          	lw	s0,24(sp)
204120f8:	02010113          	addi	sp,sp,32
204120fc:	00008067          	ret

20412100 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIiEEvRKT_>:
    void Write(const T& value) {
20412100:	fe010113          	addi	sp,sp,-32
20412104:	00812e23          	sw	s0,28(sp)
20412108:	02010413          	addi	s0,sp,32
2041210c:	fea42623          	sw	a0,-20(s0)
20412110:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20412114:	fec42783          	lw	a5,-20(s0)
20412118:	00c7a803          	lw	a6,12(a5)
2041211c:	0087a783          	lw	a5,8(a5)
20412120:	00400593          	li	a1,4
20412124:	00000613          	li	a2,0
20412128:	00b786b3          	add	a3,a5,a1
2041212c:	00068513          	mv	a0,a3
20412130:	00f53533          	sltu	a0,a0,a5
20412134:	00c80733          	add	a4,a6,a2
20412138:	00e507b3          	add	a5,a0,a4
2041213c:	00078713          	mv	a4,a5
20412140:	00068793          	mv	a5,a3
20412144:	00070813          	mv	a6,a4
20412148:	fec42703          	lw	a4,-20(s0)
2041214c:	00f72423          	sw	a5,8(a4)
20412150:	01072623          	sw	a6,12(a4)
    }
20412154:	00000013          	nop
20412158:	01c12403          	lw	s0,28(sp)
2041215c:	02010113          	addi	sp,sp,32
20412160:	00008067          	ret

20412164 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIiEEvPKT_j>:
    void WriteArray(const T* value, size_t num) {
20412164:	fe010113          	addi	sp,sp,-32
20412168:	00812e23          	sw	s0,28(sp)
2041216c:	02010413          	addi	s0,sp,32
20412170:	fea42623          	sw	a0,-20(s0)
20412174:	feb42423          	sw	a1,-24(s0)
20412178:	fec42223          	sw	a2,-28(s0)
      num_bytes_ += sizeof(T) * num;
2041217c:	fec42783          	lw	a5,-20(s0)
20412180:	00c7a803          	lw	a6,12(a5)
20412184:	0087a783          	lw	a5,8(a5)
20412188:	fe442703          	lw	a4,-28(s0)
2041218c:	00271713          	slli	a4,a4,0x2
20412190:	00070313          	mv	t1,a4
20412194:	00000393          	li	t2,0
20412198:	006786b3          	add	a3,a5,t1
2041219c:	00068613          	mv	a2,a3
204121a0:	00f63633          	sltu	a2,a2,a5
204121a4:	00780733          	add	a4,a6,t2
204121a8:	00e607b3          	add	a5,a2,a4
204121ac:	00078713          	mv	a4,a5
204121b0:	00068793          	mv	a5,a3
204121b4:	00070813          	mv	a6,a4
204121b8:	fec42703          	lw	a4,-20(s0)
204121bc:	00f72423          	sw	a5,8(a4)
204121c0:	01072623          	sw	a6,12(a4)
    }
204121c4:	00000013          	nop
204121c8:	01c12403          	lw	s0,28(sp)
204121cc:	02010113          	addi	sp,sp,32
204121d0:	00008067          	ret

204121d4 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIxEEvRKT_>:
    void Write(const T& value) {
204121d4:	fe010113          	addi	sp,sp,-32
204121d8:	00812e23          	sw	s0,28(sp)
204121dc:	02010413          	addi	s0,sp,32
204121e0:	fea42623          	sw	a0,-20(s0)
204121e4:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
204121e8:	fec42783          	lw	a5,-20(s0)
204121ec:	00c7a803          	lw	a6,12(a5)
204121f0:	0087a783          	lw	a5,8(a5)
204121f4:	00800593          	li	a1,8
204121f8:	00000613          	li	a2,0
204121fc:	00b786b3          	add	a3,a5,a1
20412200:	00068513          	mv	a0,a3
20412204:	00f53533          	sltu	a0,a0,a5
20412208:	00c80733          	add	a4,a6,a2
2041220c:	00e507b3          	add	a5,a0,a4
20412210:	00078713          	mv	a4,a5
20412214:	00068793          	mv	a5,a3
20412218:	00070813          	mv	a6,a4
2041221c:	fec42703          	lw	a4,-20(s0)
20412220:	00f72423          	sw	a5,8(a4)
20412224:	01072623          	sw	a6,12(a4)
    }
20412228:	00000013          	nop
2041222c:	01c12403          	lw	s0,28(sp)
20412230:	02010113          	addi	sp,sp,32
20412234:	00008067          	ret

20412238 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI10DLDataTypeEEvRKT_>:
    void Write(const T& value) {
20412238:	fe010113          	addi	sp,sp,-32
2041223c:	00812e23          	sw	s0,28(sp)
20412240:	02010413          	addi	s0,sp,32
20412244:	fea42623          	sw	a0,-20(s0)
20412248:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
2041224c:	fec42783          	lw	a5,-20(s0)
20412250:	00c7a803          	lw	a6,12(a5)
20412254:	0087a783          	lw	a5,8(a5)
20412258:	00400593          	li	a1,4
2041225c:	00000613          	li	a2,0
20412260:	00b786b3          	add	a3,a5,a1
20412264:	00068513          	mv	a0,a3
20412268:	00f53533          	sltu	a0,a0,a5
2041226c:	00c80733          	add	a4,a6,a2
20412270:	00e507b3          	add	a5,a0,a4
20412274:	00078713          	mv	a4,a5
20412278:	00068793          	mv	a5,a3
2041227c:	00070813          	mv	a6,a4
20412280:	fec42703          	lw	a4,-20(s0)
20412284:	00f72423          	sw	a5,8(a4)
20412288:	01072623          	sw	a6,12(a4)
    }
2041228c:	00000013          	nop
20412290:	01c12403          	lw	s0,28(sp)
20412294:	02010113          	addi	sp,sp,32
20412298:	00008067          	ret

2041229c <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIlEEvRKT_>:
    void Write(const T& value) {
2041229c:	fe010113          	addi	sp,sp,-32
204122a0:	00812e23          	sw	s0,28(sp)
204122a4:	02010413          	addi	s0,sp,32
204122a8:	fea42623          	sw	a0,-20(s0)
204122ac:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
204122b0:	fec42783          	lw	a5,-20(s0)
204122b4:	00c7a803          	lw	a6,12(a5)
204122b8:	0087a783          	lw	a5,8(a5)
204122bc:	00400593          	li	a1,4
204122c0:	00000613          	li	a2,0
204122c4:	00b786b3          	add	a3,a5,a1
204122c8:	00068513          	mv	a0,a3
204122cc:	00f53533          	sltu	a0,a0,a5
204122d0:	00c80733          	add	a4,a6,a2
204122d4:	00e507b3          	add	a5,a0,a4
204122d8:	00078713          	mv	a4,a5
204122dc:	00068793          	mv	a5,a3
204122e0:	00070813          	mv	a6,a4
204122e4:	fec42703          	lw	a4,-20(s0)
204122e8:	00f72423          	sw	a5,8(a4)
204122ec:	01072623          	sw	a6,12(a4)
    }
204122f0:	00000013          	nop
204122f4:	01c12403          	lw	s0,28(sp)
204122f8:	02010113          	addi	sp,sp,32
204122fc:	00008067          	ret

20412300 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI8DLDeviceEEvRKT_>:
    void Write(const T& value) {
20412300:	fe010113          	addi	sp,sp,-32
20412304:	00812e23          	sw	s0,28(sp)
20412308:	02010413          	addi	s0,sp,32
2041230c:	fea42623          	sw	a0,-20(s0)
20412310:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
20412314:	fec42783          	lw	a5,-20(s0)
20412318:	00c7a803          	lw	a6,12(a5)
2041231c:	0087a783          	lw	a5,8(a5)
20412320:	00800593          	li	a1,8
20412324:	00000613          	li	a2,0
20412328:	00b786b3          	add	a3,a5,a1
2041232c:	00068513          	mv	a0,a3
20412330:	00f53533          	sltu	a0,a0,a5
20412334:	00c80733          	add	a4,a6,a2
20412338:	00e507b3          	add	a5,a0,a4
2041233c:	00078713          	mv	a4,a5
20412340:	00068793          	mv	a5,a3
20412344:	00070813          	mv	a6,a4
20412348:	fec42703          	lw	a4,-20(s0)
2041234c:	00f72423          	sw	a5,8(a4)
20412350:	01072623          	sw	a6,12(a4)
    }
20412354:	00000013          	nop
20412358:	01c12403          	lw	s0,28(sp)
2041235c:	02010113          	addi	sp,sp,32
20412360:	00008067          	ret

20412364 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>:
    void ThrowError(RPCServerStatus status) { channel_->ThrowError(status); }
20412364:	fe010113          	addi	sp,sp,-32
20412368:	00112e23          	sw	ra,28(sp)
2041236c:	00812c23          	sw	s0,24(sp)
20412370:	02010413          	addi	s0,sp,32
20412374:	fea42623          	sw	a0,-20(s0)
20412378:	feb42423          	sw	a1,-24(s0)
2041237c:	fec42783          	lw	a5,-20(s0)
20412380:	0007a783          	lw	a5,0(a5)
20412384:	00000613          	li	a2,0
20412388:	fe842583          	lw	a1,-24(s0)
2041238c:	00078513          	mv	a0,a5
20412390:	cccfd0ef          	jal	ra,2040f85c <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10ThrowErrorENS0_15RPCServerStatusENS0_7RPCCodeE>
20412394:	00000013          	nop
20412398:	01c12083          	lw	ra,28(sp)
2041239c:	01812403          	lw	s0,24(sp)
204123a0:	02010113          	addi	sp,sp,32
204123a4:	00008067          	ret

204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>:
    void Write(const T& value) {
204123a8:	fe010113          	addi	sp,sp,-32
204123ac:	00812e23          	sw	s0,28(sp)
204123b0:	02010413          	addi	s0,sp,32
204123b4:	fea42623          	sw	a0,-20(s0)
204123b8:	feb42423          	sw	a1,-24(s0)
      num_bytes_ += sizeof(T);
204123bc:	fec42783          	lw	a5,-20(s0)
204123c0:	00c7a803          	lw	a6,12(a5)
204123c4:	0087a783          	lw	a5,8(a5)
204123c8:	00800593          	li	a1,8
204123cc:	00000613          	li	a2,0
204123d0:	00b786b3          	add	a3,a5,a1
204123d4:	00068513          	mv	a0,a3
204123d8:	00f53533          	sltu	a0,a0,a5
204123dc:	00c80733          	add	a4,a6,a2
204123e0:	00e507b3          	add	a5,a0,a4
204123e4:	00078713          	mv	a4,a5
204123e8:	00068793          	mv	a5,a3
204123ec:	00070813          	mv	a6,a4
204123f0:	fec42703          	lw	a4,-20(s0)
204123f4:	00f72423          	sw	a5,8(a4)
204123f8:	01072623          	sw	a6,12(a4)
    }
204123fc:	00000013          	nop
20412400:	01c12403          	lw	s0,28(sp)
20412404:	02010113          	addi	sp,sp,32
20412408:	00008067          	ret

2041240c <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvT_P8DLTensor>:
  static void SendDLTensor(TChannelPtr channel, DLTensor* arr) {
2041240c:	fd010113          	addi	sp,sp,-48
20412410:	02112623          	sw	ra,44(sp)
20412414:	02812423          	sw	s0,40(sp)
20412418:	03010413          	addi	s0,sp,48
2041241c:	fca42e23          	sw	a0,-36(s0)
20412420:	fcb42c23          	sw	a1,-40(s0)
    dev = arr->device;
20412424:	fd842783          	lw	a5,-40(s0)
20412428:	0087a803          	lw	a6,8(a5)
2041242c:	0047a783          	lw	a5,4(a5)
20412430:	fef42423          	sw	a5,-24(s0)
20412434:	ff042623          	sw	a6,-20(s0)
    data = reinterpret_cast<uint64_t>(arr->data);
20412438:	fd842783          	lw	a5,-40(s0)
2041243c:	0007a783          	lw	a5,0(a5)
20412440:	00078693          	mv	a3,a5
20412444:	41f7d793          	srai	a5,a5,0x1f
20412448:	00078713          	mv	a4,a5
2041244c:	fed42023          	sw	a3,-32(s0)
20412450:	fee42223          	sw	a4,-28(s0)
    channel->Write(data);
20412454:	fe040793          	addi	a5,s0,-32
20412458:	00078593          	mv	a1,a5
2041245c:	fdc42503          	lw	a0,-36(s0)
20412460:	f49ff0ef          	jal	ra,204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
    channel->Write(dev);
20412464:	fe840793          	addi	a5,s0,-24
20412468:	00078593          	mv	a1,a5
2041246c:	fdc42503          	lw	a0,-36(s0)
20412470:	e91ff0ef          	jal	ra,20412300 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI8DLDeviceEEvRKT_>
    channel->Write(arr->ndim);
20412474:	fd842783          	lw	a5,-40(s0)
20412478:	00c78793          	addi	a5,a5,12
2041247c:	00078593          	mv	a1,a5
20412480:	fdc42503          	lw	a0,-36(s0)
20412484:	c7dff0ef          	jal	ra,20412100 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIiEEvRKT_>
    channel->Write(arr->dtype);
20412488:	fd842783          	lw	a5,-40(s0)
2041248c:	01078793          	addi	a5,a5,16
20412490:	00078593          	mv	a1,a5
20412494:	fdc42503          	lw	a0,-36(s0)
20412498:	da1ff0ef          	jal	ra,20412238 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteI10DLDataTypeEEvRKT_>
    channel->WriteArray(arr->shape, arr->ndim);
2041249c:	fd842783          	lw	a5,-40(s0)
204124a0:	0147a703          	lw	a4,20(a5)
204124a4:	fd842783          	lw	a5,-40(s0)
204124a8:	00c7a783          	lw	a5,12(a5)
204124ac:	00078613          	mv	a2,a5
204124b0:	00070593          	mv	a1,a4
204124b4:	fdc42503          	lw	a0,-36(s0)
204124b8:	0f4000ef          	jal	ra,204125ac <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIxEEvPKT_j>
    if (arr->strides != nullptr) {
204124bc:	fd842783          	lw	a5,-40(s0)
204124c0:	0187a783          	lw	a5,24(a5)
204124c4:	00078863          	beqz	a5,204124d4 <_ZN3tvm7runtime12RPCReference12SendDLTensorIPNS1_23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEEEEEvT_P8DLTensor+0xc8>
      channel->ThrowError(RPCServerStatus::kInvalidDLTensorFieldStride);
204124c8:	00300593          	li	a1,3
204124cc:	fdc42503          	lw	a0,-36(s0)
204124d0:	e95ff0ef          	jal	ra,20412364 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10ThrowErrorENS0_15RPCServerStatusE>
    channel->Write(arr->byte_offset);
204124d4:	fd842783          	lw	a5,-40(s0)
204124d8:	02078793          	addi	a5,a5,32
204124dc:	00078593          	mv	a1,a5
204124e0:	fdc42503          	lw	a0,-36(s0)
204124e4:	ec5ff0ef          	jal	ra,204123a8 <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE5WriteIyEEvRKT_>
    return;
204124e8:	00000013          	nop
  }
204124ec:	02c12083          	lw	ra,44(sp)
204124f0:	02812403          	lw	s0,40(sp)
204124f4:	03010113          	addi	sp,sp,48
204124f8:	00008067          	ret

204124fc <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIcEEvPKT_j>:
    void WriteArray(const T* value, size_t num) {
204124fc:	fe010113          	addi	sp,sp,-32
20412500:	00812e23          	sw	s0,28(sp)
20412504:	02010413          	addi	s0,sp,32
20412508:	fea42623          	sw	a0,-20(s0)
2041250c:	feb42423          	sw	a1,-24(s0)
20412510:	fec42223          	sw	a2,-28(s0)
      num_bytes_ += sizeof(T) * num;
20412514:	fec42783          	lw	a5,-20(s0)
20412518:	00c7a803          	lw	a6,12(a5)
2041251c:	0087a783          	lw	a5,8(a5)
20412520:	fe442703          	lw	a4,-28(s0)
20412524:	00070313          	mv	t1,a4
20412528:	00000393          	li	t2,0
2041252c:	006786b3          	add	a3,a5,t1
20412530:	00068613          	mv	a2,a3
20412534:	00f63633          	sltu	a2,a2,a5
20412538:	00780733          	add	a4,a6,t2
2041253c:	00e607b3          	add	a5,a2,a4
20412540:	00078713          	mv	a4,a5
20412544:	00068793          	mv	a5,a3
20412548:	00070813          	mv	a6,a4
2041254c:	fec42703          	lw	a4,-20(s0)
20412550:	00f72423          	sw	a5,8(a4)
20412554:	01072623          	sw	a6,12(a4)
    }
20412558:	00000013          	nop
2041255c:	01c12403          	lw	s0,28(sp)
20412560:	02010113          	addi	sp,sp,32
20412564:	00008067          	ret

20412568 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE10WriteArrayIxEEvPT_j>:
  void WriteArray(T* data, size_t count) {
20412568:	fe010113          	addi	sp,sp,-32
2041256c:	00112e23          	sw	ra,28(sp)
20412570:	00812c23          	sw	s0,24(sp)
20412574:	02010413          	addi	s0,sp,32
20412578:	fea42623          	sw	a0,-20(s0)
2041257c:	feb42423          	sw	a1,-24(s0)
20412580:	fec42223          	sw	a2,-28(s0)
    return this->WriteRawBytes(data, sizeof(T) * count);
20412584:	fe442783          	lw	a5,-28(s0)
20412588:	00379793          	slli	a5,a5,0x3
2041258c:	00078613          	mv	a2,a5
20412590:	fe842583          	lw	a1,-24(s0)
20412594:	fec42503          	lw	a0,-20(s0)
20412598:	bf9fe0ef          	jal	ra,20411190 <_ZN3tvm7runtime12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEE13WriteRawBytesEPKvj>
  }
2041259c:	01c12083          	lw	ra,28(sp)
204125a0:	01812403          	lw	s0,24(sp)
204125a4:	02010113          	addi	sp,sp,32
204125a8:	00008067          	ret

204125ac <_ZN3tvm7runtime12RPCReference23PackedSeqNumBytesGetterINS0_12MinRPCServerINS0_9micro_rpc14MicroIOHandlerENS0_6detail13PageAllocatorEEEE10WriteArrayIxEEvPKT_j>:
    void WriteArray(const T* value, size_t num) {
204125ac:	fe010113          	addi	sp,sp,-32
204125b0:	00812e23          	sw	s0,28(sp)
204125b4:	02010413          	addi	s0,sp,32
204125b8:	fea42623          	sw	a0,-20(s0)
204125bc:	feb42423          	sw	a1,-24(s0)
204125c0:	fec42223          	sw	a2,-28(s0)
      num_bytes_ += sizeof(T) * num;
204125c4:	fec42783          	lw	a5,-20(s0)
204125c8:	00c7a803          	lw	a6,12(a5)
204125cc:	0087a783          	lw	a5,8(a5)
204125d0:	fe442703          	lw	a4,-28(s0)
204125d4:	00371713          	slli	a4,a4,0x3
204125d8:	00070313          	mv	t1,a4
204125dc:	00000393          	li	t2,0
204125e0:	006786b3          	add	a3,a5,t1
204125e4:	00068613          	mv	a2,a3
204125e8:	00f63633          	sltu	a2,a2,a5
204125ec:	00780733          	add	a4,a6,t2
204125f0:	00e607b3          	add	a5,a2,a4
204125f4:	00078713          	mv	a4,a5
204125f8:	00068793          	mv	a5,a3
204125fc:	00070813          	mv	a6,a4
20412600:	fec42703          	lw	a4,-20(s0)
20412604:	00f72423          	sw	a5,8(a4)
20412608:	01072623          	sw	a6,12(a4)
    }
2041260c:	00000013          	nop
20412610:	01c12403          	lw	s0,28(sp)
20412614:	02010113          	addi	sp,sp,32
20412618:	00008067          	ret

2041261c <__wrap_malloc>:

/* These functions are intended for embedded RV32 systems and are
   obviously incorrect in general. */

void* __wrap_malloc(unsigned long sz)
{
2041261c:	fd010113          	addi	sp,sp,-48
20412620:	02112623          	sw	ra,44(sp)
20412624:	02812423          	sw	s0,40(sp)
20412628:	03010413          	addi	s0,sp,48
2041262c:	fca42e23          	sw	a0,-36(s0)
  extern void* sbrk(long);
  void* res = sbrk(sz);
20412630:	fdc42783          	lw	a5,-36(s0)
20412634:	00078513          	mv	a0,a5
20412638:	194000ef          	jal	ra,204127cc <__wrap_sbrk>
2041263c:	fea42623          	sw	a0,-20(s0)
  if ((long)res == -1)
20412640:	fec42703          	lw	a4,-20(s0)
20412644:	fff00793          	li	a5,-1
20412648:	00f71663          	bne	a4,a5,20412654 <__wrap_malloc+0x38>
    return 0;
2041264c:	00000793          	li	a5,0
20412650:	0080006f          	j	20412658 <__wrap_malloc+0x3c>
  return res;
20412654:	fec42783          	lw	a5,-20(s0)
}
20412658:	00078513          	mv	a0,a5
2041265c:	02c12083          	lw	ra,44(sp)
20412660:	02812403          	lw	s0,40(sp)
20412664:	03010113          	addi	sp,sp,48
20412668:	00008067          	ret

2041266c <__wrap_free>:

void __wrap_free(void* ptr)
{
2041266c:	fe010113          	addi	sp,sp,-32
20412670:	00812e23          	sw	s0,28(sp)
20412674:	02010413          	addi	s0,sp,32
20412678:	fea42623          	sw	a0,-20(s0)
}
2041267c:	00000013          	nop
20412680:	01c12403          	lw	s0,28(sp)
20412684:	02010113          	addi	sp,sp,32
20412688:	00008067          	ret

2041268c <_stub>:
/* See LICENSE of license details. */
#ifndef _SIFIVE_SYS_STUB_H
#define _SIFIVE_SYS_STUB_H

static inline int _stub(int err)
{
2041268c:	fe010113          	addi	sp,sp,-32
20412690:	00812e23          	sw	s0,28(sp)
20412694:	02010413          	addi	s0,sp,32
20412698:	fea42623          	sw	a0,-20(s0)
  return -1;
2041269c:	fff00793          	li	a5,-1
}
204126a0:	00078513          	mv	a0,a5
204126a4:	01c12403          	lw	s0,28(sp)
204126a8:	02010113          	addi	sp,sp,32
204126ac:	00008067          	ret

204126b0 <__wrap_write>:
#include "platform.h"
#include "stub.h"
#include "weak_under_alias.h"

ssize_t __wrap_write(int fd, const void* ptr, size_t len)
{
204126b0:	fd010113          	addi	sp,sp,-48
204126b4:	02112623          	sw	ra,44(sp)
204126b8:	02812423          	sw	s0,40(sp)
204126bc:	03010413          	addi	s0,sp,48
204126c0:	fca42e23          	sw	a0,-36(s0)
204126c4:	fcb42c23          	sw	a1,-40(s0)
204126c8:	fcc42a23          	sw	a2,-44(s0)
  const uint8_t * current = (const char *)ptr;
204126cc:	fd842783          	lw	a5,-40(s0)
204126d0:	fef42423          	sw	a5,-24(s0)

  if (isatty(fd)) {
204126d4:	fdc42503          	lw	a0,-36(s0)
204126d8:	0b0000ef          	jal	ra,20412788 <__wrap_isatty>
204126dc:	00050793          	mv	a5,a0
204126e0:	08078463          	beqz	a5,20412768 <__wrap_write+0xb8>
    for (size_t jj = 0; jj < len; jj++) {
204126e4:	fe042623          	sw	zero,-20(s0)
204126e8:	06c0006f          	j	20412754 <__wrap_write+0xa4>
      while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
204126ec:	00000013          	nop
204126f0:	100137b7          	lui	a5,0x10013
204126f4:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x1000f000>
204126f8:	fe07cce3          	bltz	a5,204126f0 <__wrap_write+0x40>
      UART0_REG(UART_REG_TXFIFO) = current[jj];
204126fc:	fe842703          	lw	a4,-24(s0)
20412700:	fec42783          	lw	a5,-20(s0)
20412704:	00f707b3          	add	a5,a4,a5
20412708:	0007c703          	lbu	a4,0(a5)
2041270c:	100137b7          	lui	a5,0x10013
20412710:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x1000f000>

      if (current[jj] == '\n') {
20412714:	fe842703          	lw	a4,-24(s0)
20412718:	fec42783          	lw	a5,-20(s0)
2041271c:	00f707b3          	add	a5,a4,a5
20412720:	0007c703          	lbu	a4,0(a5)
20412724:	00a00793          	li	a5,10
20412728:	02f71063          	bne	a4,a5,20412748 <__wrap_write+0x98>
        while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
2041272c:	00000013          	nop
20412730:	100137b7          	lui	a5,0x10013
20412734:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x1000f000>
20412738:	fe07cce3          	bltz	a5,20412730 <__wrap_write+0x80>
        UART0_REG(UART_REG_TXFIFO) = '\r';
2041273c:	100137b7          	lui	a5,0x10013
20412740:	00d00713          	li	a4,13
20412744:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x1000f000>
    for (size_t jj = 0; jj < len; jj++) {
20412748:	fec42783          	lw	a5,-20(s0)
2041274c:	00178793          	addi	a5,a5,1
20412750:	fef42623          	sw	a5,-20(s0)
20412754:	fec42703          	lw	a4,-20(s0)
20412758:	fd442783          	lw	a5,-44(s0)
2041275c:	f8f768e3          	bltu	a4,a5,204126ec <__wrap_write+0x3c>
      }
    }
    return len;
20412760:	fd442783          	lw	a5,-44(s0)
20412764:	0100006f          	j	20412774 <__wrap_write+0xc4>
  }

  return _stub(EBADF);
20412768:	00900513          	li	a0,9
2041276c:	f21ff0ef          	jal	ra,2041268c <_stub>
20412770:	00050793          	mv	a5,a0
}
20412774:	00078513          	mv	a0,a5
20412778:	02c12083          	lw	ra,44(sp)
2041277c:	02812403          	lw	s0,40(sp)
20412780:	03010113          	addi	sp,sp,48
20412784:	00008067          	ret

20412788 <__wrap_isatty>:

#include <unistd.h>
#include "weak_under_alias.h"

int __wrap_isatty(int fd)
{
20412788:	fe010113          	addi	sp,sp,-32
2041278c:	00812e23          	sw	s0,28(sp)
20412790:	02010413          	addi	s0,sp,32
20412794:	fea42623          	sw	a0,-20(s0)
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
20412798:	fec42703          	lw	a4,-20(s0)
2041279c:	00100793          	li	a5,1
204127a0:	00f70863          	beq	a4,a5,204127b0 <__wrap_isatty+0x28>
204127a4:	fec42703          	lw	a4,-20(s0)
204127a8:	00200793          	li	a5,2
204127ac:	00f71663          	bne	a4,a5,204127b8 <__wrap_isatty+0x30>
    return 1;
204127b0:	00100793          	li	a5,1
204127b4:	0080006f          	j	204127bc <__wrap_isatty+0x34>

  return 0;
204127b8:	00000793          	li	a5,0
}
204127bc:	00078513          	mv	a0,a5
204127c0:	01c12403          	lw	s0,28(sp)
204127c4:	02010113          	addi	sp,sp,32
204127c8:	00008067          	ret

204127cc <__wrap_sbrk>:

#include <stddef.h>
#include "weak_under_alias.h"

void *__wrap_sbrk(ptrdiff_t incr)
{
204127cc:	fe010113          	addi	sp,sp,-32
204127d0:	00812e23          	sw	s0,28(sp)
204127d4:	02010413          	addi	s0,sp,32
204127d8:	fea42623          	sw	a0,-20(s0)
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
204127dc:	5fbee797          	auipc	a5,0x5fbee
204127e0:	25478793          	addi	a5,a5,596 # 80000a30 <curbrk.1393>
204127e4:	0007a703          	lw	a4,0(a5)
204127e8:	fec42783          	lw	a5,-20(s0)
204127ec:	00f70733          	add	a4,a4,a5
204127f0:	5fbee797          	auipc	a5,0x5fbee
204127f4:	71078793          	addi	a5,a5,1808 # 80000f00 <_end>
204127f8:	02f76263          	bltu	a4,a5,2041281c <__wrap_sbrk+0x50>
204127fc:	5fbee797          	auipc	a5,0x5fbee
20412800:	23478793          	addi	a5,a5,564 # 80000a30 <curbrk.1393>
20412804:	0007a703          	lw	a4,0(a5)
20412808:	fec42783          	lw	a5,-20(s0)
2041280c:	00f70733          	add	a4,a4,a5
20412810:	60be9797          	auipc	a5,0x60be9
20412814:	7f078793          	addi	a5,a5,2032 # 80ffc000 <_heap_end>
20412818:	00e7f663          	bleu	a4,a5,20412824 <__wrap_sbrk+0x58>
    return NULL - 1;
2041281c:	fff00793          	li	a5,-1
20412820:	03c0006f          	j	2041285c <__wrap_sbrk+0x90>

  curbrk += incr;
20412824:	5fbee797          	auipc	a5,0x5fbee
20412828:	20c78793          	addi	a5,a5,524 # 80000a30 <curbrk.1393>
2041282c:	0007a703          	lw	a4,0(a5)
20412830:	fec42783          	lw	a5,-20(s0)
20412834:	00f70733          	add	a4,a4,a5
20412838:	5fbee797          	auipc	a5,0x5fbee
2041283c:	1f878793          	addi	a5,a5,504 # 80000a30 <curbrk.1393>
20412840:	00e7a023          	sw	a4,0(a5)
  return curbrk - incr;
20412844:	5fbee797          	auipc	a5,0x5fbee
20412848:	1ec78793          	addi	a5,a5,492 # 80000a30 <curbrk.1393>
2041284c:	0007a703          	lw	a4,0(a5)
20412850:	fec42783          	lw	a5,-20(s0)
20412854:	40f007b3          	neg	a5,a5
20412858:	00f707b3          	add	a5,a4,a5
}
2041285c:	00078513          	mv	a0,a5
20412860:	01c12403          	lw	s0,28(sp)
20412864:	02010113          	addi	sp,sp,32
20412868:	00008067          	ret

2041286c <__wrap_exit>:
#include <unistd.h>
#include "platform.h"
#include "weak_under_alias.h"

void __wrap_exit(int code)
{
2041286c:	fc010113          	addi	sp,sp,-64
20412870:	02112e23          	sw	ra,60(sp)
20412874:	02812c23          	sw	s0,56(sp)
20412878:	04010413          	addi	s0,sp,64
2041287c:	fca42623          	sw	a0,-52(s0)
  const char message[] = "\nProgam has exited with code:";
20412880:	0000f797          	auipc	a5,0xf
20412884:	0f078793          	addi	a5,a5,240 # 20421970 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1c>
20412888:	0007a883          	lw	a7,0(a5)
2041288c:	0047a803          	lw	a6,4(a5)
20412890:	0087a503          	lw	a0,8(a5)
20412894:	00c7a583          	lw	a1,12(a5)
20412898:	0107a603          	lw	a2,16(a5)
2041289c:	0147a683          	lw	a3,20(a5)
204128a0:	0187a703          	lw	a4,24(a5)
204128a4:	fd142823          	sw	a7,-48(s0)
204128a8:	fd042a23          	sw	a6,-44(s0)
204128ac:	fca42c23          	sw	a0,-40(s0)
204128b0:	fcb42e23          	sw	a1,-36(s0)
204128b4:	fec42023          	sw	a2,-32(s0)
204128b8:	fed42223          	sw	a3,-28(s0)
204128bc:	fee42423          	sw	a4,-24(s0)
204128c0:	01c7d783          	lhu	a5,28(a5)
204128c4:	fef41623          	sh	a5,-20(s0)

  write(STDERR_FILENO, message, sizeof(message) - 1);
204128c8:	fd040793          	addi	a5,s0,-48
204128cc:	01d00613          	li	a2,29
204128d0:	00078593          	mv	a1,a5
204128d4:	00200513          	li	a0,2
204128d8:	dd9ff0ef          	jal	ra,204126b0 <__wrap_write>
  write_hex(STDERR_FILENO, code);
204128dc:	fcc42783          	lw	a5,-52(s0)
204128e0:	00078593          	mv	a1,a5
204128e4:	00200513          	li	a0,2
204128e8:	0a8000ef          	jal	ra,20412990 <write_hex>
  write(STDERR_FILENO, "\n", 1);
204128ec:	00100613          	li	a2,1
204128f0:	0000f597          	auipc	a1,0xf
204128f4:	07c58593          	addi	a1,a1,124 # 2042196c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x18>
204128f8:	00200513          	li	a0,2
204128fc:	db5ff0ef          	jal	ra,204126b0 <__wrap_write>

  for (;;);
20412900:	0000006f          	j	20412900 <__wrap_exit+0x94>

20412904 <__wrap_puts>:
#include "platform.h"
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_puts(const char *s)
{
20412904:	fe010113          	addi	sp,sp,-32
20412908:	00812e23          	sw	s0,28(sp)
2041290c:	02010413          	addi	s0,sp,32
20412910:	fea42623          	sw	a0,-20(s0)
  while (*s != '\0') {
20412914:	05c0006f          	j	20412970 <__wrap_puts+0x6c>
    while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
20412918:	00000013          	nop
2041291c:	100137b7          	lui	a5,0x10013
20412920:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x1000f000>
20412924:	fe07cce3          	bltz	a5,2041291c <__wrap_puts+0x18>
    UART0_REG(UART_REG_TXFIFO) = *s;
20412928:	fec42783          	lw	a5,-20(s0)
2041292c:	0007c703          	lbu	a4,0(a5)
20412930:	100137b7          	lui	a5,0x10013
20412934:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x1000f000>

    if (*s == '\n') {
20412938:	fec42783          	lw	a5,-20(s0)
2041293c:	0007c703          	lbu	a4,0(a5)
20412940:	00a00793          	li	a5,10
20412944:	02f71063          	bne	a4,a5,20412964 <__wrap_puts+0x60>
      while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
20412948:	00000013          	nop
2041294c:	100137b7          	lui	a5,0x10013
20412950:	0007a783          	lw	a5,0(a5) # 10013000 <__stack_size+0x1000f000>
20412954:	fe07cce3          	bltz	a5,2041294c <__wrap_puts+0x48>
      UART0_REG(UART_REG_TXFIFO) = '\r';
20412958:	100137b7          	lui	a5,0x10013
2041295c:	00d00713          	li	a4,13
20412960:	00e7a023          	sw	a4,0(a5) # 10013000 <__stack_size+0x1000f000>
    }

    ++s;
20412964:	fec42783          	lw	a5,-20(s0)
20412968:	00178793          	addi	a5,a5,1
2041296c:	fef42623          	sw	a5,-20(s0)
  while (*s != '\0') {
20412970:	fec42783          	lw	a5,-20(s0)
20412974:	0007c783          	lbu	a5,0(a5)
20412978:	fa0790e3          	bnez	a5,20412918 <__wrap_puts+0x14>
  }

  return 0;
2041297c:	00000793          	li	a5,0
}
20412980:	00078513          	mv	a0,a5
20412984:	01c12403          	lw	s0,28(sp)
20412988:	02010113          	addi	sp,sp,32
2041298c:	00008067          	ret

20412990 <write_hex>:
#include <stdint.h>
#include <unistd.h>
#include "platform.h"

void write_hex(int fd, unsigned long int hex)
{
20412990:	fd010113          	addi	sp,sp,-48
20412994:	02112623          	sw	ra,44(sp)
20412998:	02812423          	sw	s0,40(sp)
2041299c:	03010413          	addi	s0,sp,48
204129a0:	fca42e23          	sw	a0,-36(s0)
204129a4:	fcb42c23          	sw	a1,-40(s0)
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
204129a8:	00200613          	li	a2,2
204129ac:	0000f597          	auipc	a1,0xf
204129b0:	fe458593          	addi	a1,a1,-28 # 20421990 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x3c>
204129b4:	fdc42503          	lw	a0,-36(s0)
204129b8:	cf9ff0ef          	jal	ra,204126b0 <__wrap_write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
204129bc:	00800793          	li	a5,8
204129c0:	fef407a3          	sb	a5,-17(s0)
204129c4:	0880006f          	j	20412a4c <write_hex+0xbc>
    jj = ii - 1;
204129c8:	fef44783          	lbu	a5,-17(s0)
204129cc:	fff78793          	addi	a5,a5,-1
204129d0:	fef40723          	sb	a5,-18(s0)
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
204129d4:	fee44783          	lbu	a5,-18(s0)
204129d8:	00279793          	slli	a5,a5,0x2
204129dc:	00f00713          	li	a4,15
204129e0:	00f717b3          	sll	a5,a4,a5
204129e4:	00078713          	mv	a4,a5
204129e8:	fd842783          	lw	a5,-40(s0)
204129ec:	00f77733          	and	a4,a4,a5
204129f0:	fee44783          	lbu	a5,-18(s0)
204129f4:	00279793          	slli	a5,a5,0x2
204129f8:	00f757b3          	srl	a5,a4,a5
204129fc:	fef406a3          	sb	a5,-19(s0)
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
20412a00:	fed44703          	lbu	a4,-19(s0)
20412a04:	00900793          	li	a5,9
20412a08:	00e7ea63          	bltu	a5,a4,20412a1c <write_hex+0x8c>
20412a0c:	fed44783          	lbu	a5,-19(s0)
20412a10:	03078793          	addi	a5,a5,48
20412a14:	0ff7f793          	andi	a5,a5,255
20412a18:	0100006f          	j	20412a28 <write_hex+0x98>
20412a1c:	fed44783          	lbu	a5,-19(s0)
20412a20:	03778793          	addi	a5,a5,55
20412a24:	0ff7f793          	andi	a5,a5,255
20412a28:	fef40623          	sb	a5,-20(s0)
    write(fd, &towrite, 1);
20412a2c:	fec40793          	addi	a5,s0,-20
20412a30:	00100613          	li	a2,1
20412a34:	00078593          	mv	a1,a5
20412a38:	fdc42503          	lw	a0,-36(s0)
20412a3c:	c75ff0ef          	jal	ra,204126b0 <__wrap_write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
20412a40:	fef44783          	lbu	a5,-17(s0)
20412a44:	fff78793          	addi	a5,a5,-1
20412a48:	fef407a3          	sb	a5,-17(s0)
20412a4c:	fef44783          	lbu	a5,-17(s0)
20412a50:	f6079ce3          	bnez	a5,204129c8 <write_hex+0x38>
  }
}
20412a54:	00000013          	nop
20412a58:	02c12083          	lw	ra,44(sp)
20412a5c:	02812403          	lw	s0,40(sp)
20412a60:	03010113          	addi	sp,sp,48
20412a64:	00008067          	ret

20412a68 <putchar>:
#include <string.h>
#include <unistd.h>

#undef putchar
int putchar(int ch)
{
20412a68:	fe010113          	addi	sp,sp,-32
20412a6c:	00112e23          	sw	ra,28(sp)
20412a70:	00812c23          	sw	s0,24(sp)
20412a74:	02010413          	addi	s0,sp,32
20412a78:	fea42623          	sw	a0,-20(s0)
  return write(STDOUT_FILENO, &ch, 1) == 1 ? ch : -1;
20412a7c:	fec40793          	addi	a5,s0,-20
20412a80:	00100613          	li	a2,1
20412a84:	00078593          	mv	a1,a5
20412a88:	00100513          	li	a0,1
20412a8c:	c25ff0ef          	jal	ra,204126b0 <__wrap_write>
20412a90:	00050713          	mv	a4,a0
20412a94:	00100793          	li	a5,1
20412a98:	00f71663          	bne	a4,a5,20412aa4 <putchar+0x3c>
20412a9c:	fec42783          	lw	a5,-20(s0)
20412aa0:	0080006f          	j	20412aa8 <putchar+0x40>
20412aa4:	fff00793          	li	a5,-1
}
20412aa8:	00078513          	mv	a0,a5
20412aac:	01c12083          	lw	ra,28(sp)
20412ab0:	01812403          	lw	s0,24(sp)
20412ab4:	02010113          	addi	sp,sp,32
20412ab8:	00008067          	ret

20412abc <sprintf_putch>:

static void sprintf_putch(int ch, void** data)
{
20412abc:	fd010113          	addi	sp,sp,-48
20412ac0:	02812623          	sw	s0,44(sp)
20412ac4:	03010413          	addi	s0,sp,48
20412ac8:	fca42e23          	sw	a0,-36(s0)
20412acc:	fcb42c23          	sw	a1,-40(s0)
  char** pstr = (char**)data;
20412ad0:	fd842783          	lw	a5,-40(s0)
20412ad4:	fef42623          	sw	a5,-20(s0)
  **pstr = ch;
20412ad8:	fec42783          	lw	a5,-20(s0)
20412adc:	0007a783          	lw	a5,0(a5)
20412ae0:	fdc42703          	lw	a4,-36(s0)
20412ae4:	0ff77713          	andi	a4,a4,255
20412ae8:	00e78023          	sb	a4,0(a5)
  (*pstr)++;
20412aec:	fec42783          	lw	a5,-20(s0)
20412af0:	0007a783          	lw	a5,0(a5)
20412af4:	00178713          	addi	a4,a5,1
20412af8:	fec42783          	lw	a5,-20(s0)
20412afc:	00e7a023          	sw	a4,0(a5)
}
20412b00:	00000013          	nop
20412b04:	02c12403          	lw	s0,44(sp)
20412b08:	03010113          	addi	sp,sp,48
20412b0c:	00008067          	ret

20412b10 <getuint>:

static unsigned long getuint(va_list *ap, int lflag)
{
20412b10:	fe010113          	addi	sp,sp,-32
20412b14:	00812e23          	sw	s0,28(sp)
20412b18:	02010413          	addi	s0,sp,32
20412b1c:	fea42623          	sw	a0,-20(s0)
20412b20:	feb42423          	sw	a1,-24(s0)
  if (lflag)
20412b24:	fe842783          	lw	a5,-24(s0)
20412b28:	02078063          	beqz	a5,20412b48 <getuint+0x38>
    return va_arg(*ap, unsigned long);
20412b2c:	fec42783          	lw	a5,-20(s0)
20412b30:	0007a783          	lw	a5,0(a5)
20412b34:	00478693          	addi	a3,a5,4
20412b38:	fec42703          	lw	a4,-20(s0)
20412b3c:	00d72023          	sw	a3,0(a4)
20412b40:	0007a783          	lw	a5,0(a5)
20412b44:	01c0006f          	j	20412b60 <getuint+0x50>
  else
    return va_arg(*ap, unsigned int);
20412b48:	fec42783          	lw	a5,-20(s0)
20412b4c:	0007a783          	lw	a5,0(a5)
20412b50:	00478693          	addi	a3,a5,4
20412b54:	fec42703          	lw	a4,-20(s0)
20412b58:	00d72023          	sw	a3,0(a4)
20412b5c:	0007a783          	lw	a5,0(a5)
}
20412b60:	00078513          	mv	a0,a5
20412b64:	01c12403          	lw	s0,28(sp)
20412b68:	02010113          	addi	sp,sp,32
20412b6c:	00008067          	ret

20412b70 <getint>:

static long getint(va_list *ap, int lflag)
{
20412b70:	fe010113          	addi	sp,sp,-32
20412b74:	00812e23          	sw	s0,28(sp)
20412b78:	02010413          	addi	s0,sp,32
20412b7c:	fea42623          	sw	a0,-20(s0)
20412b80:	feb42423          	sw	a1,-24(s0)
  if (lflag)
20412b84:	fe842783          	lw	a5,-24(s0)
20412b88:	02078063          	beqz	a5,20412ba8 <getint+0x38>
    return va_arg(*ap, long);
20412b8c:	fec42783          	lw	a5,-20(s0)
20412b90:	0007a783          	lw	a5,0(a5)
20412b94:	00478693          	addi	a3,a5,4
20412b98:	fec42703          	lw	a4,-20(s0)
20412b9c:	00d72023          	sw	a3,0(a4)
20412ba0:	0007a783          	lw	a5,0(a5)
20412ba4:	01c0006f          	j	20412bc0 <getint+0x50>
  else
    return va_arg(*ap, int);
20412ba8:	fec42783          	lw	a5,-20(s0)
20412bac:	0007a783          	lw	a5,0(a5)
20412bb0:	00478693          	addi	a3,a5,4
20412bb4:	fec42703          	lw	a4,-20(s0)
20412bb8:	00d72023          	sw	a3,0(a4)
20412bbc:	0007a783          	lw	a5,0(a5)
}
20412bc0:	00078513          	mv	a0,a5
20412bc4:	01c12403          	lw	s0,28(sp)
20412bc8:	02010113          	addi	sp,sp,32
20412bcc:	00008067          	ret

20412bd0 <printnum>:

static inline void printnum(void (*putch)(int, void**), void **putdat,
                    unsigned long num, unsigned base, int width, int padc)
{
20412bd0:	f4010113          	addi	sp,sp,-192
20412bd4:	0a112e23          	sw	ra,188(sp)
20412bd8:	0a812c23          	sw	s0,184(sp)
20412bdc:	0a912a23          	sw	s1,180(sp)
20412be0:	0c010413          	addi	s0,sp,192
20412be4:	f4a42e23          	sw	a0,-164(s0)
20412be8:	f4b42c23          	sw	a1,-168(s0)
20412bec:	f4c42a23          	sw	a2,-172(s0)
20412bf0:	f4d42823          	sw	a3,-176(s0)
20412bf4:	f4e42623          	sw	a4,-180(s0)
20412bf8:	f4f42423          	sw	a5,-184(s0)
  unsigned digs[sizeof(num)*8];
  int pos = 0;
20412bfc:	fe042623          	sw	zero,-20(s0)

  while (1)
  {
    digs[pos++] = num % base;
20412c00:	fec42483          	lw	s1,-20(s0)
20412c04:	00148793          	addi	a5,s1,1
20412c08:	fef42623          	sw	a5,-20(s0)
20412c0c:	f5442783          	lw	a5,-172(s0)
20412c10:	f5042583          	lw	a1,-176(s0)
20412c14:	00078513          	mv	a0,a5
20412c18:	0c00d0ef          	jal	ra,2041fcd8 <__umodsi3>
20412c1c:	00050793          	mv	a5,a0
20412c20:	00078713          	mv	a4,a5
20412c24:	00249793          	slli	a5,s1,0x2
20412c28:	ff040693          	addi	a3,s0,-16
20412c2c:	00f687b3          	add	a5,a3,a5
20412c30:	f6e7ae23          	sw	a4,-132(a5)
    if (num < base)
20412c34:	f5442703          	lw	a4,-172(s0)
20412c38:	f5042783          	lw	a5,-176(s0)
20412c3c:	00f76e63          	bltu	a4,a5,20412c58 <printnum+0x88>
      break;
    num /= base;
20412c40:	f5042583          	lw	a1,-176(s0)
20412c44:	f5442503          	lw	a0,-172(s0)
20412c48:	0640d0ef          	jal	ra,2041fcac <__udivsi3>
20412c4c:	00050793          	mv	a5,a0
20412c50:	f4f42a23          	sw	a5,-172(s0)
    digs[pos++] = num % base;
20412c54:	fadff06f          	j	20412c00 <printnum+0x30>
      break;
20412c58:	00000013          	nop
  }

  while (width-- > pos)
20412c5c:	0140006f          	j	20412c70 <printnum+0xa0>
    putch(padc, putdat);
20412c60:	f5c42783          	lw	a5,-164(s0)
20412c64:	f5842583          	lw	a1,-168(s0)
20412c68:	f4842503          	lw	a0,-184(s0)
20412c6c:	000780e7          	jalr	a5
  while (width-- > pos)
20412c70:	f4c42783          	lw	a5,-180(s0)
20412c74:	fff78713          	addi	a4,a5,-1
20412c78:	f4e42623          	sw	a4,-180(s0)
20412c7c:	fec42703          	lw	a4,-20(s0)
20412c80:	fef740e3          	blt	a4,a5,20412c60 <printnum+0x90>

  while (pos-- > 0)
20412c84:	0540006f          	j	20412cd8 <printnum+0x108>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
20412c88:	fec42783          	lw	a5,-20(s0)
20412c8c:	00279793          	slli	a5,a5,0x2
20412c90:	ff040713          	addi	a4,s0,-16
20412c94:	00f707b3          	add	a5,a4,a5
20412c98:	f7c7a703          	lw	a4,-132(a5)
20412c9c:	fec42783          	lw	a5,-20(s0)
20412ca0:	00279793          	slli	a5,a5,0x2
20412ca4:	ff040693          	addi	a3,s0,-16
20412ca8:	00f687b3          	add	a5,a3,a5
20412cac:	f7c7a683          	lw	a3,-132(a5)
20412cb0:	00900793          	li	a5,9
20412cb4:	00d7f663          	bleu	a3,a5,20412cc0 <printnum+0xf0>
20412cb8:	05700793          	li	a5,87
20412cbc:	0080006f          	j	20412cc4 <printnum+0xf4>
20412cc0:	03000793          	li	a5,48
20412cc4:	00e787b3          	add	a5,a5,a4
20412cc8:	f5c42703          	lw	a4,-164(s0)
20412ccc:	f5842583          	lw	a1,-168(s0)
20412cd0:	00078513          	mv	a0,a5
20412cd4:	000700e7          	jalr	a4
  while (pos-- > 0)
20412cd8:	fec42783          	lw	a5,-20(s0)
20412cdc:	fff78713          	addi	a4,a5,-1
20412ce0:	fee42623          	sw	a4,-20(s0)
20412ce4:	faf042e3          	bgtz	a5,20412c88 <printnum+0xb8>
}
20412ce8:	00000013          	nop
20412cec:	0bc12083          	lw	ra,188(sp)
20412cf0:	0b812403          	lw	s0,184(sp)
20412cf4:	0b412483          	lw	s1,180(sp)
20412cf8:	0c010113          	addi	sp,sp,192
20412cfc:	00008067          	ret

20412d00 <vprintfmt>:
  for (char* p = buf; p < pbuf; p++)
    putch(*p, putdat);
}
*/
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
{
20412d00:	fc010113          	addi	sp,sp,-64
20412d04:	02112e23          	sw	ra,60(sp)
20412d08:	02812c23          	sw	s0,56(sp)
20412d0c:	02912a23          	sw	s1,52(sp)
20412d10:	03212823          	sw	s2,48(sp)
20412d14:	04010413          	addi	s0,sp,64
20412d18:	fca42623          	sw	a0,-52(s0)
20412d1c:	fcb42423          	sw	a1,-56(s0)
20412d20:	fcc42223          	sw	a2,-60(s0)
20412d24:	fcd42023          	sw	a3,-64(s0)
  unsigned long num;
  int base, lflag, width, precision, altflag;
  char padc;

  while (1) {
    while ((ch = *(unsigned char *) fmt) != '%') {
20412d28:	0240006f          	j	20412d4c <vprintfmt+0x4c>
      if (ch == '\0')
20412d2c:	38048663          	beqz	s1,204130b8 <vprintfmt+0x3b8>
        return;
      fmt++;
20412d30:	fc442783          	lw	a5,-60(s0)
20412d34:	00178793          	addi	a5,a5,1
20412d38:	fcf42223          	sw	a5,-60(s0)
      putch(ch, putdat);
20412d3c:	fcc42783          	lw	a5,-52(s0)
20412d40:	fc842583          	lw	a1,-56(s0)
20412d44:	00048513          	mv	a0,s1
20412d48:	000780e7          	jalr	a5
    while ((ch = *(unsigned char *) fmt) != '%') {
20412d4c:	fc442783          	lw	a5,-60(s0)
20412d50:	0007c783          	lbu	a5,0(a5)
20412d54:	00078493          	mv	s1,a5
20412d58:	02500793          	li	a5,37
20412d5c:	fcf498e3          	bne	s1,a5,20412d2c <vprintfmt+0x2c>
    }
    fmt++;
20412d60:	fc442783          	lw	a5,-60(s0)
20412d64:	00178793          	addi	a5,a5,1
20412d68:	fcf42223          	sw	a5,-60(s0)

    // Process a %-escape sequence
    last_fmt = fmt;
20412d6c:	fc442783          	lw	a5,-60(s0)
20412d70:	fcf42a23          	sw	a5,-44(s0)
    padc = ' ';
20412d74:	02000793          	li	a5,32
20412d78:	fcf40da3          	sb	a5,-37(s0)
    width = -1;
20412d7c:	fff00793          	li	a5,-1
20412d80:	fef42023          	sw	a5,-32(s0)
    precision = -1;
20412d84:	fff00793          	li	a5,-1
20412d88:	fcf42e23          	sw	a5,-36(s0)
    lflag = 0;
20412d8c:	fe042223          	sw	zero,-28(s0)
    altflag = 0;
20412d90:	fc042823          	sw	zero,-48(s0)
  reswitch:
    switch (ch = *(unsigned char *) fmt++) {
20412d94:	fc442783          	lw	a5,-60(s0)
20412d98:	00178713          	addi	a4,a5,1
20412d9c:	fce42223          	sw	a4,-60(s0)
20412da0:	0007c783          	lbu	a5,0(a5)
20412da4:	00078493          	mv	s1,a5
20412da8:	fdd48793          	addi	a5,s1,-35
20412dac:	05500713          	li	a4,85
20412db0:	2ef76263          	bltu	a4,a5,20413094 <vprintfmt+0x394>
20412db4:	00279713          	slli	a4,a5,0x2
20412db8:	0000f797          	auipc	a5,0xf
20412dbc:	be478793          	addi	a5,a5,-1052 # 2042199c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x48>
20412dc0:	00f707b3          	add	a5,a4,a5
20412dc4:	0007a703          	lw	a4,0(a5)
20412dc8:	0000f797          	auipc	a5,0xf
20412dcc:	bd478793          	addi	a5,a5,-1068 # 2042199c <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x48>
20412dd0:	00f707b3          	add	a5,a4,a5
20412dd4:	00078067          	jr	a5

    // flag to pad on the right
    case '-':
      padc = '-';
20412dd8:	02d00793          	li	a5,45
20412ddc:	fcf40da3          	sb	a5,-37(s0)
      goto reswitch;
20412de0:	fb5ff06f          	j	20412d94 <vprintfmt+0x94>

    // flag to pad with 0's instead of spaces
    case '0':
      padc = '0';
20412de4:	03000793          	li	a5,48
20412de8:	fcf40da3          	sb	a5,-37(s0)
      goto reswitch;
20412dec:	fa9ff06f          	j	20412d94 <vprintfmt+0x94>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      for (precision = 0; ; ++fmt) {
20412df0:	fc042e23          	sw	zero,-36(s0)
        precision = precision * 10 + ch - '0';
20412df4:	fdc42703          	lw	a4,-36(s0)
20412df8:	00070793          	mv	a5,a4
20412dfc:	00279793          	slli	a5,a5,0x2
20412e00:	00e787b3          	add	a5,a5,a4
20412e04:	00179793          	slli	a5,a5,0x1
20412e08:	00f487b3          	add	a5,s1,a5
20412e0c:	fd078793          	addi	a5,a5,-48
20412e10:	fcf42e23          	sw	a5,-36(s0)
        ch = *fmt;
20412e14:	fc442783          	lw	a5,-60(s0)
20412e18:	0007c783          	lbu	a5,0(a5)
20412e1c:	00078493          	mv	s1,a5
        if (ch < '0' || ch > '9')
20412e20:	02f00793          	li	a5,47
20412e24:	0497d863          	ble	s1,a5,20412e74 <vprintfmt+0x174>
20412e28:	03900793          	li	a5,57
20412e2c:	0497c463          	blt	a5,s1,20412e74 <vprintfmt+0x174>
      for (precision = 0; ; ++fmt) {
20412e30:	fc442783          	lw	a5,-60(s0)
20412e34:	00178793          	addi	a5,a5,1
20412e38:	fcf42223          	sw	a5,-60(s0)
        precision = precision * 10 + ch - '0';
20412e3c:	fb9ff06f          	j	20412df4 <vprintfmt+0xf4>
          break;
      }
      goto process_precision;

    case '*':
      precision = va_arg(ap, int);
20412e40:	fc042783          	lw	a5,-64(s0)
20412e44:	00478713          	addi	a4,a5,4
20412e48:	fce42023          	sw	a4,-64(s0)
20412e4c:	0007a783          	lw	a5,0(a5)
20412e50:	fcf42e23          	sw	a5,-36(s0)
      goto process_precision;
20412e54:	0240006f          	j	20412e78 <vprintfmt+0x178>

    case '.':
      if (width < 0)
20412e58:	fe042783          	lw	a5,-32(s0)
20412e5c:	f207dce3          	bgez	a5,20412d94 <vprintfmt+0x94>
        width = 0;
20412e60:	fe042023          	sw	zero,-32(s0)
      goto reswitch;
20412e64:	f31ff06f          	j	20412d94 <vprintfmt+0x94>

    case '#':
      altflag = 1;
20412e68:	00100793          	li	a5,1
20412e6c:	fcf42823          	sw	a5,-48(s0)
      goto reswitch;
20412e70:	f25ff06f          	j	20412d94 <vprintfmt+0x94>
      goto process_precision;
20412e74:	00000013          	nop

    process_precision:
      if (width < 0)
20412e78:	fe042783          	lw	a5,-32(s0)
20412e7c:	f007dce3          	bgez	a5,20412d94 <vprintfmt+0x94>
        width = precision, precision = -1;
20412e80:	fdc42783          	lw	a5,-36(s0)
20412e84:	fef42023          	sw	a5,-32(s0)
20412e88:	fff00793          	li	a5,-1
20412e8c:	fcf42e23          	sw	a5,-36(s0)
      goto reswitch;
20412e90:	f05ff06f          	j	20412d94 <vprintfmt+0x94>

    // long flag
    case 'l':
      if (lflag)
20412e94:	fe442783          	lw	a5,-28(s0)
20412e98:	1e079c63          	bnez	a5,20413090 <vprintfmt+0x390>
        goto bad;
      goto reswitch;
20412e9c:	ef9ff06f          	j	20412d94 <vprintfmt+0x94>

    // character
    case 'c':
      putch(va_arg(ap, int), putdat);
20412ea0:	fc042783          	lw	a5,-64(s0)
20412ea4:	00478713          	addi	a4,a5,4
20412ea8:	fce42023          	sw	a4,-64(s0)
20412eac:	0007a783          	lw	a5,0(a5)
20412eb0:	fcc42703          	lw	a4,-52(s0)
20412eb4:	fc842583          	lw	a1,-56(s0)
20412eb8:	00078513          	mv	a0,a5
20412ebc:	000700e7          	jalr	a4
      break;
20412ec0:	1f40006f          	j	204130b4 <vprintfmt+0x3b4>
      //print_double(putch, putdat, va_arg(ap, double), width, precision);
      break;

    // string
    case 's':
      if ((p = va_arg(ap, char *)) == NULL)
20412ec4:	fc042783          	lw	a5,-64(s0)
20412ec8:	00478713          	addi	a4,a5,4
20412ecc:	fce42023          	sw	a4,-64(s0)
20412ed0:	0007a903          	lw	s2,0(a5)
20412ed4:	00091663          	bnez	s2,20412ee0 <vprintfmt+0x1e0>
        p = "(null)";
20412ed8:	0000f917          	auipc	s2,0xf
20412edc:	abc90913          	addi	s2,s2,-1348 # 20421994 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x40>
      if (width > 0 && padc != '-')
20412ee0:	fe042783          	lw	a5,-32(s0)
20412ee4:	08f05063          	blez	a5,20412f64 <vprintfmt+0x264>
20412ee8:	fdb44703          	lbu	a4,-37(s0)
20412eec:	02d00793          	li	a5,45
20412ef0:	06f70a63          	beq	a4,a5,20412f64 <vprintfmt+0x264>
        for (width -= strnlen(p, precision); width > 0; width--)
20412ef4:	fdc42783          	lw	a5,-36(s0)
20412ef8:	00078593          	mv	a1,a5
20412efc:	00090513          	mv	a0,s2
20412f00:	199000ef          	jal	ra,20413898 <strnlen>
20412f04:	00050713          	mv	a4,a0
20412f08:	fe042783          	lw	a5,-32(s0)
20412f0c:	40e787b3          	sub	a5,a5,a4
20412f10:	fef42023          	sw	a5,-32(s0)
20412f14:	0240006f          	j	20412f38 <vprintfmt+0x238>
          putch(padc, putdat);
20412f18:	fdb44783          	lbu	a5,-37(s0)
20412f1c:	fcc42703          	lw	a4,-52(s0)
20412f20:	fc842583          	lw	a1,-56(s0)
20412f24:	00078513          	mv	a0,a5
20412f28:	000700e7          	jalr	a4
        for (width -= strnlen(p, precision); width > 0; width--)
20412f2c:	fe042783          	lw	a5,-32(s0)
20412f30:	fff78793          	addi	a5,a5,-1
20412f34:	fef42023          	sw	a5,-32(s0)
20412f38:	fe042783          	lw	a5,-32(s0)
20412f3c:	fcf04ee3          	bgtz	a5,20412f18 <vprintfmt+0x218>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
20412f40:	0240006f          	j	20412f64 <vprintfmt+0x264>
        putch(ch, putdat);
20412f44:	fcc42783          	lw	a5,-52(s0)
20412f48:	fc842583          	lw	a1,-56(s0)
20412f4c:	00048513          	mv	a0,s1
20412f50:	000780e7          	jalr	a5
        p++;
20412f54:	00190913          	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
20412f58:	fe042783          	lw	a5,-32(s0)
20412f5c:	fff78793          	addi	a5,a5,-1
20412f60:	fef42023          	sw	a5,-32(s0)
20412f64:	00094783          	lbu	a5,0(s2)
20412f68:	00078493          	mv	s1,a5
20412f6c:	04048063          	beqz	s1,20412fac <vprintfmt+0x2ac>
20412f70:	fdc42783          	lw	a5,-36(s0)
20412f74:	fc07c8e3          	bltz	a5,20412f44 <vprintfmt+0x244>
20412f78:	fdc42783          	lw	a5,-36(s0)
20412f7c:	fff78793          	addi	a5,a5,-1
20412f80:	fcf42e23          	sw	a5,-36(s0)
20412f84:	fdc42783          	lw	a5,-36(s0)
20412f88:	fa07dee3          	bgez	a5,20412f44 <vprintfmt+0x244>
      }
      for (; width > 0; width--)
20412f8c:	0200006f          	j	20412fac <vprintfmt+0x2ac>
        putch(' ', putdat);
20412f90:	fcc42783          	lw	a5,-52(s0)
20412f94:	fc842583          	lw	a1,-56(s0)
20412f98:	02000513          	li	a0,32
20412f9c:	000780e7          	jalr	a5
      for (; width > 0; width--)
20412fa0:	fe042783          	lw	a5,-32(s0)
20412fa4:	fff78793          	addi	a5,a5,-1
20412fa8:	fef42023          	sw	a5,-32(s0)
20412fac:	fe042783          	lw	a5,-32(s0)
20412fb0:	fef040e3          	bgtz	a5,20412f90 <vprintfmt+0x290>
      break;
20412fb4:	1000006f          	j	204130b4 <vprintfmt+0x3b4>

    // (signed) decimal
    case 'd':
      num = getint(&ap, lflag);
20412fb8:	fc040793          	addi	a5,s0,-64
20412fbc:	fe442583          	lw	a1,-28(s0)
20412fc0:	00078513          	mv	a0,a5
20412fc4:	badff0ef          	jal	ra,20412b70 <getint>
20412fc8:	00050793          	mv	a5,a0
20412fcc:	fef42623          	sw	a5,-20(s0)
      if ((long) num < 0) {
20412fd0:	fec42783          	lw	a5,-20(s0)
20412fd4:	0207d063          	bgez	a5,20412ff4 <vprintfmt+0x2f4>
        putch('-', putdat);
20412fd8:	fcc42783          	lw	a5,-52(s0)
20412fdc:	fc842583          	lw	a1,-56(s0)
20412fe0:	02d00513          	li	a0,45
20412fe4:	000780e7          	jalr	a5
        num = -(long) num;
20412fe8:	fec42783          	lw	a5,-20(s0)
20412fec:	40f007b3          	neg	a5,a5
20412ff0:	fef42623          	sw	a5,-20(s0)
      }
      base = 10;
20412ff4:	00a00793          	li	a5,10
20412ff8:	fef42423          	sw	a5,-24(s0)
      goto signed_number;
20412ffc:	0600006f          	j	2041305c <vprintfmt+0x35c>

    // unsigned decimal
    case 'u':
      base = 10;
20413000:	00a00793          	li	a5,10
20413004:	fef42423          	sw	a5,-24(s0)
      goto unsigned_number;
20413008:	0400006f          	j	20413048 <vprintfmt+0x348>

    // (unsigned) octal
    case 'o':
      // should do something with padding so it's always 3 octits
      base = 8;
2041300c:	00800793          	li	a5,8
20413010:	fef42423          	sw	a5,-24(s0)
      goto unsigned_number;
20413014:	0340006f          	j	20413048 <vprintfmt+0x348>

    // pointer
    case 'p':
      lflag = 1;
20413018:	00100793          	li	a5,1
2041301c:	fef42223          	sw	a5,-28(s0)
      putch('0', putdat);
20413020:	fcc42783          	lw	a5,-52(s0)
20413024:	fc842583          	lw	a1,-56(s0)
20413028:	03000513          	li	a0,48
2041302c:	000780e7          	jalr	a5
      putch('x', putdat);
20413030:	fcc42783          	lw	a5,-52(s0)
20413034:	fc842583          	lw	a1,-56(s0)
20413038:	07800513          	li	a0,120
2041303c:	000780e7          	jalr	a5
      /* fall through to 'x' */

    // (unsigned) hexadecimal
    case 'x':
      base = 16;
20413040:	01000793          	li	a5,16
20413044:	fef42423          	sw	a5,-24(s0)
    unsigned_number:
      num = getuint(&ap, lflag);
20413048:	fc040793          	addi	a5,s0,-64
2041304c:	fe442583          	lw	a1,-28(s0)
20413050:	00078513          	mv	a0,a5
20413054:	abdff0ef          	jal	ra,20412b10 <getuint>
20413058:	fea42623          	sw	a0,-20(s0)
    signed_number:
      printnum(putch, putdat, num, base, width, padc);
2041305c:	fe842683          	lw	a3,-24(s0)
20413060:	fdb44783          	lbu	a5,-37(s0)
20413064:	fe042703          	lw	a4,-32(s0)
20413068:	fec42603          	lw	a2,-20(s0)
2041306c:	fc842583          	lw	a1,-56(s0)
20413070:	fcc42503          	lw	a0,-52(s0)
20413074:	b5dff0ef          	jal	ra,20412bd0 <printnum>
      break;
20413078:	03c0006f          	j	204130b4 <vprintfmt+0x3b4>

    // escaped '%' character
    case '%':
      putch(ch, putdat);
2041307c:	fcc42783          	lw	a5,-52(s0)
20413080:	fc842583          	lw	a1,-56(s0)
20413084:	00048513          	mv	a0,s1
20413088:	000780e7          	jalr	a5
      break;
2041308c:	0280006f          	j	204130b4 <vprintfmt+0x3b4>
        goto bad;
20413090:	00000013          	nop

    // unrecognized escape sequence - just print it literally
    default:
    bad:
      putch('%', putdat);
20413094:	fcc42783          	lw	a5,-52(s0)
20413098:	fc842583          	lw	a1,-56(s0)
2041309c:	02500513          	li	a0,37
204130a0:	000780e7          	jalr	a5
      fmt = last_fmt;
204130a4:	fd442783          	lw	a5,-44(s0)
204130a8:	fcf42223          	sw	a5,-60(s0)
      break;
204130ac:	0080006f          	j	204130b4 <vprintfmt+0x3b4>
      break;
204130b0:	00000013          	nop
    while ((ch = *(unsigned char *) fmt) != '%') {
204130b4:	c99ff06f          	j	20412d4c <vprintfmt+0x4c>
        return;
204130b8:	00000013          	nop
    }
  }
}
204130bc:	03c12083          	lw	ra,60(sp)
204130c0:	03812403          	lw	s0,56(sp)
204130c4:	03412483          	lw	s1,52(sp)
204130c8:	03012903          	lw	s2,48(sp)
204130cc:	04010113          	addi	sp,sp,64
204130d0:	00008067          	ret

204130d4 <__wrap_printf>:

int __wrap_printf(const char* fmt, ...)
{
204130d4:	fb010113          	addi	sp,sp,-80
204130d8:	02112623          	sw	ra,44(sp)
204130dc:	02812423          	sw	s0,40(sp)
204130e0:	03010413          	addi	s0,sp,48
204130e4:	fca42e23          	sw	a0,-36(s0)
204130e8:	00b42223          	sw	a1,4(s0)
204130ec:	00c42423          	sw	a2,8(s0)
204130f0:	00d42623          	sw	a3,12(s0)
204130f4:	00e42823          	sw	a4,16(s0)
204130f8:	00f42a23          	sw	a5,20(s0)
204130fc:	01042c23          	sw	a6,24(s0)
20413100:	01142e23          	sw	a7,28(s0)
  va_list ap;
  va_start(ap, fmt);
20413104:	02040793          	addi	a5,s0,32
20413108:	fe478793          	addi	a5,a5,-28
2041310c:	fef42623          	sw	a5,-20(s0)

  vprintfmt((void*)putchar, 0, fmt, ap);
20413110:	fec42783          	lw	a5,-20(s0)
20413114:	00078693          	mv	a3,a5
20413118:	fdc42603          	lw	a2,-36(s0)
2041311c:	00000593          	li	a1,0
20413120:	00000517          	auipc	a0,0x0
20413124:	94850513          	addi	a0,a0,-1720 # 20412a68 <putchar>
20413128:	bd9ff0ef          	jal	ra,20412d00 <vprintfmt>

  va_end(ap);
  return 0; // incorrect return value, but who cares, anyway?
2041312c:	00000793          	li	a5,0
}
20413130:	00078513          	mv	a0,a5
20413134:	02c12083          	lw	ra,44(sp)
20413138:	02812403          	lw	s0,40(sp)
2041313c:	05010113          	addi	sp,sp,80
20413140:	00008067          	ret

20413144 <__wrap_sprintf>:

int __wrap_sprintf(char* str, const char* fmt, ...)
{
20413144:	fb010113          	addi	sp,sp,-80
20413148:	02112623          	sw	ra,44(sp)
2041314c:	02812423          	sw	s0,40(sp)
20413150:	03010413          	addi	s0,sp,48
20413154:	fca42e23          	sw	a0,-36(s0)
20413158:	fcb42c23          	sw	a1,-40(s0)
2041315c:	00c42423          	sw	a2,8(s0)
20413160:	00d42623          	sw	a3,12(s0)
20413164:	00e42823          	sw	a4,16(s0)
20413168:	00f42a23          	sw	a5,20(s0)
2041316c:	01042c23          	sw	a6,24(s0)
20413170:	01142e23          	sw	a7,28(s0)
  va_list ap;
  char* str0 = str;
20413174:	fdc42783          	lw	a5,-36(s0)
20413178:	fef42623          	sw	a5,-20(s0)
  va_start(ap, fmt);
2041317c:	02040793          	addi	a5,s0,32
20413180:	fe878793          	addi	a5,a5,-24
20413184:	fef42423          	sw	a5,-24(s0)

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
20413188:	fe842703          	lw	a4,-24(s0)
2041318c:	fdc40793          	addi	a5,s0,-36
20413190:	00070693          	mv	a3,a4
20413194:	fd842603          	lw	a2,-40(s0)
20413198:	00078593          	mv	a1,a5
2041319c:	00000517          	auipc	a0,0x0
204131a0:	92050513          	addi	a0,a0,-1760 # 20412abc <sprintf_putch>
204131a4:	b5dff0ef          	jal	ra,20412d00 <vprintfmt>
  *str = 0;
204131a8:	fdc42783          	lw	a5,-36(s0)
204131ac:	00078023          	sb	zero,0(a5)

  va_end(ap);
  return str - str0;
204131b0:	fdc42783          	lw	a5,-36(s0)
204131b4:	00078713          	mv	a4,a5
204131b8:	fec42783          	lw	a5,-20(s0)
204131bc:	40f707b3          	sub	a5,a4,a5
}
204131c0:	00078513          	mv	a0,a5
204131c4:	02c12083          	lw	ra,44(sp)
204131c8:	02812403          	lw	s0,40(sp)
204131cc:	05010113          	addi	sp,sp,80
204131d0:	00008067          	ret

204131d4 <__assert_func>:
204131d4:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
204131d8:	1141                	addi	sp,sp,-16
204131da:	8832                	mv	a6,a2
204131dc:	c606                	sw	ra,12(sp)
204131de:	88aa                	mv	a7,a0
204131e0:	872e                	mv	a4,a1
204131e2:	8636                	mv	a2,a3
204131e4:	47c8                	lw	a0,12(a5)
204131e6:	00080e63          	beqz	a6,20413202 <__assert_func+0x2e>
204131ea:	204227b7          	lui	a5,0x20422
204131ee:	af478793          	addi	a5,a5,-1292 # 20421af4 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1a0>
204131f2:	204225b7          	lui	a1,0x20422
204131f6:	86c6                	mv	a3,a7
204131f8:	b0458593          	addi	a1,a1,-1276 # 20421b04 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1b0>
204131fc:	2845                	jal	204132ac <fiprintf>
204131fe:	292040ef          	jal	ra,20417490 <abort>
20413202:	20422837          	lui	a6,0x20422
20413206:	b0080793          	addi	a5,a6,-1280 # 20421b00 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1ac>
2041320a:	b0080813          	addi	a6,a6,-1280
2041320e:	b7d5                	j	204131f2 <__assert_func+0x1e>

20413210 <__assert>:
20413210:	1141                	addi	sp,sp,-16
20413212:	86b2                	mv	a3,a2
20413214:	4601                	li	a2,0
20413216:	c606                	sw	ra,12(sp)
20413218:	3f75                	jal	204131d4 <__assert_func>

2041321a <atexit>:
2041321a:	85aa                	mv	a1,a0
2041321c:	4681                	li	a3,0
2041321e:	4601                	li	a2,0
20413220:	4501                	li	a0,0
20413222:	27e0406f          	j	204174a0 <__register_exitproc>

20413226 <exit>:
20413226:	1141                	addi	sp,sp,-16
20413228:	4581                	li	a1,0
2041322a:	c422                	sw	s0,8(sp)
2041322c:	c606                	sw	ra,12(sp)
2041322e:	842a                	mv	s0,a0
20413230:	2d0040ef          	jal	ra,20417500 <__call_exitprocs>
20413234:	8941a503          	lw	a0,-1900(gp) # 80000a34 <_global_impure_ptr>
20413238:	5d5c                	lw	a5,60(a0)
2041323a:	c391                	beqz	a5,2041323e <exit+0x18>
2041323c:	9782                	jalr	a5
2041323e:	8522                	mv	a0,s0
20413240:	e2cff0ef          	jal	ra,2041286c <__wrap_exit>

20413244 <__libc_fini_array>:
20413244:	1101                	addi	sp,sp,-32
20413246:	204237b7          	lui	a5,0x20423
2041324a:	20423737          	lui	a4,0x20423
2041324e:	cc22                	sw	s0,24(sp)
20413250:	8bc70713          	addi	a4,a4,-1860 # 204228bc <__fini_array_end>
20413254:	8bc78413          	addi	s0,a5,-1860 # 204228bc <__fini_array_end>
20413258:	8c19                	sub	s0,s0,a4
2041325a:	ca26                	sw	s1,20(sp)
2041325c:	c84a                	sw	s2,16(sp)
2041325e:	c64e                	sw	s3,12(sp)
20413260:	ce06                	sw	ra,28(sp)
20413262:	8409                	srai	s0,s0,0x2
20413264:	4481                	li	s1,0
20413266:	8bc78913          	addi	s2,a5,-1860
2041326a:	59f1                	li	s3,-4
2041326c:	00941a63          	bne	s0,s1,20413280 <__libc_fini_array+0x3c>
20413270:	4462                	lw	s0,24(sp)
20413272:	40f2                	lw	ra,28(sp)
20413274:	44d2                	lw	s1,20(sp)
20413276:	4942                	lw	s2,16(sp)
20413278:	49b2                	lw	s3,12(sp)
2041327a:	6105                	addi	sp,sp,32
2041327c:	9b1f806f          	j	2040bc2c <_fini>
20413280:	033487b3          	mul	a5,s1,s3
20413284:	0485                	addi	s1,s1,1
20413286:	97ca                	add	a5,a5,s2
20413288:	ffc7a783          	lw	a5,-4(a5)
2041328c:	9782                	jalr	a5
2041328e:	bff9                	j	2041326c <__libc_fini_array+0x28>

20413290 <_fiprintf_r>:
20413290:	7139                	addi	sp,sp,-64
20413292:	d636                	sw	a3,44(sp)
20413294:	1074                	addi	a3,sp,44
20413296:	ce06                	sw	ra,28(sp)
20413298:	d83a                	sw	a4,48(sp)
2041329a:	da3e                	sw	a5,52(sp)
2041329c:	dc42                	sw	a6,56(sp)
2041329e:	de46                	sw	a7,60(sp)
204132a0:	c636                	sw	a3,12(sp)
204132a2:	7e5010ef          	jal	ra,20415286 <_vfiprintf_r>
204132a6:	40f2                	lw	ra,28(sp)
204132a8:	6121                	addi	sp,sp,64
204132aa:	8082                	ret

204132ac <fiprintf>:
204132ac:	7139                	addi	sp,sp,-64
204132ae:	da3e                	sw	a5,52(sp)
204132b0:	d432                	sw	a2,40(sp)
204132b2:	862e                	mv	a2,a1
204132b4:	85aa                	mv	a1,a0
204132b6:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
204132ba:	d636                	sw	a3,44(sp)
204132bc:	1034                	addi	a3,sp,40
204132be:	ce06                	sw	ra,28(sp)
204132c0:	d83a                	sw	a4,48(sp)
204132c2:	dc42                	sw	a6,56(sp)
204132c4:	de46                	sw	a7,60(sp)
204132c6:	c636                	sw	a3,12(sp)
204132c8:	7bf010ef          	jal	ra,20415286 <_vfiprintf_r>
204132cc:	40f2                	lw	ra,28(sp)
204132ce:	6121                	addi	sp,sp,64
204132d0:	8082                	ret

204132d2 <_fprintf_r>:
204132d2:	7139                	addi	sp,sp,-64
204132d4:	d636                	sw	a3,44(sp)
204132d6:	1074                	addi	a3,sp,44
204132d8:	ce06                	sw	ra,28(sp)
204132da:	d83a                	sw	a4,48(sp)
204132dc:	da3e                	sw	a5,52(sp)
204132de:	dc42                	sw	a6,56(sp)
204132e0:	de46                	sw	a7,60(sp)
204132e2:	c636                	sw	a3,12(sp)
204132e4:	11b020ef          	jal	ra,20415bfe <_vfprintf_r>
204132e8:	40f2                	lw	ra,28(sp)
204132ea:	6121                	addi	sp,sp,64
204132ec:	8082                	ret

204132ee <fprintf>:
204132ee:	7139                	addi	sp,sp,-64
204132f0:	da3e                	sw	a5,52(sp)
204132f2:	d432                	sw	a2,40(sp)
204132f4:	862e                	mv	a2,a1
204132f6:	85aa                	mv	a1,a0
204132f8:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
204132fc:	d636                	sw	a3,44(sp)
204132fe:	1034                	addi	a3,sp,40
20413300:	ce06                	sw	ra,28(sp)
20413302:	d83a                	sw	a4,48(sp)
20413304:	dc42                	sw	a6,56(sp)
20413306:	de46                	sw	a7,60(sp)
20413308:	c636                	sw	a3,12(sp)
2041330a:	0f5020ef          	jal	ra,20415bfe <_vfprintf_r>
2041330e:	40f2                	lw	ra,28(sp)
20413310:	6121                	addi	sp,sp,64
20413312:	8082                	ret

20413314 <_fwrite_r>:
20413314:	715d                	addi	sp,sp,-80
20413316:	c4a2                	sw	s0,72(sp)
20413318:	02c68433          	mul	s0,a3,a2
2041331c:	087c                	addi	a5,sp,28
2041331e:	d23e                	sw	a5,36(sp)
20413320:	4785                	li	a5,1
20413322:	c2a6                	sw	s1,68(sp)
20413324:	c0ca                	sw	s2,64(sp)
20413326:	de4e                	sw	s3,60(sp)
20413328:	c686                	sw	ra,76(sp)
2041332a:	ce2e                	sw	a1,28(sp)
2041332c:	d43e                	sw	a5,40(sp)
2041332e:	d022                	sw	s0,32(sp)
20413330:	d622                	sw	s0,44(sp)
20413332:	892a                	mv	s2,a0
20413334:	89b2                	mv	s3,a2
20413336:	84b6                	mv	s1,a3
20413338:	c519                	beqz	a0,20413346 <_fwrite_r+0x32>
2041333a:	5d1c                	lw	a5,56(a0)
2041333c:	e789                	bnez	a5,20413346 <_fwrite_r+0x32>
2041333e:	c63a                	sw	a4,12(sp)
20413340:	4d8040ef          	jal	ra,20417818 <__sinit>
20413344:	4732                	lw	a4,12(sp)
20413346:	00c71783          	lh	a5,12(a4)
2041334a:	01279693          	slli	a3,a5,0x12
2041334e:	0006cb63          	bltz	a3,20413364 <_fwrite_r+0x50>
20413352:	6609                	lui	a2,0x2
20413354:	5374                	lw	a3,100(a4)
20413356:	8fd1                	or	a5,a5,a2
20413358:	00f71623          	sh	a5,12(a4)
2041335c:	77f9                	lui	a5,0xffffe
2041335e:	17fd                	addi	a5,a5,-1
20413360:	8ff5                	and	a5,a5,a3
20413362:	d37c                	sw	a5,100(a4)
20413364:	1050                	addi	a2,sp,36
20413366:	85ba                	mv	a1,a4
20413368:	854a                	mv	a0,s2
2041336a:	125040ef          	jal	ra,20417c8e <__sfvwrite_r>
2041336e:	c509                	beqz	a0,20413378 <_fwrite_r+0x64>
20413370:	56b2                	lw	a3,44(sp)
20413372:	8c15                	sub	s0,s0,a3
20413374:	033454b3          	divu	s1,s0,s3
20413378:	40b6                	lw	ra,76(sp)
2041337a:	4426                	lw	s0,72(sp)
2041337c:	8526                	mv	a0,s1
2041337e:	4906                	lw	s2,64(sp)
20413380:	4496                	lw	s1,68(sp)
20413382:	59f2                	lw	s3,60(sp)
20413384:	6161                	addi	sp,sp,80
20413386:	8082                	ret

20413388 <fwrite>:
20413388:	8736                	mv	a4,a3
2041338a:	86b2                	mv	a3,a2
2041338c:	862e                	mv	a2,a1
2041338e:	85aa                	mv	a1,a0
20413390:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20413394:	b741                	j	20413314 <_fwrite_r>

20413396 <__libc_init_array>:
20413396:	1141                	addi	sp,sp,-16
20413398:	c422                	sw	s0,8(sp)
2041339a:	c226                	sw	s1,4(sp)
2041339c:	20423437          	lui	s0,0x20423
204133a0:	204234b7          	lui	s1,0x20423
204133a4:	8bc48793          	addi	a5,s1,-1860 # 204228bc <__fini_array_end>
204133a8:	8bc40413          	addi	s0,s0,-1860 # 204228bc <__fini_array_end>
204133ac:	8c1d                	sub	s0,s0,a5
204133ae:	c04a                	sw	s2,0(sp)
204133b0:	c606                	sw	ra,12(sp)
204133b2:	8409                	srai	s0,s0,0x2
204133b4:	8bc48493          	addi	s1,s1,-1860
204133b8:	4901                	li	s2,0
204133ba:	02891963          	bne	s2,s0,204133ec <__libc_init_array+0x56>
204133be:	204234b7          	lui	s1,0x20423
204133c2:	fdaf80ef          	jal	ra,2040bb9c <_init>
204133c6:	20423437          	lui	s0,0x20423
204133ca:	8bc48793          	addi	a5,s1,-1860 # 204228bc <__fini_array_end>
204133ce:	8bc40413          	addi	s0,s0,-1860 # 204228bc <__fini_array_end>
204133d2:	8c1d                	sub	s0,s0,a5
204133d4:	8409                	srai	s0,s0,0x2
204133d6:	8bc48493          	addi	s1,s1,-1860
204133da:	4901                	li	s2,0
204133dc:	00891d63          	bne	s2,s0,204133f6 <__libc_init_array+0x60>
204133e0:	40b2                	lw	ra,12(sp)
204133e2:	4422                	lw	s0,8(sp)
204133e4:	4492                	lw	s1,4(sp)
204133e6:	4902                	lw	s2,0(sp)
204133e8:	0141                	addi	sp,sp,16
204133ea:	8082                	ret
204133ec:	409c                	lw	a5,0(s1)
204133ee:	0905                	addi	s2,s2,1
204133f0:	0491                	addi	s1,s1,4
204133f2:	9782                	jalr	a5
204133f4:	b7d9                	j	204133ba <__libc_init_array+0x24>
204133f6:	409c                	lw	a5,0(s1)
204133f8:	0905                	addi	s2,s2,1
204133fa:	0491                	addi	s1,s1,4
204133fc:	9782                	jalr	a5
204133fe:	bff9                	j	204133dc <__libc_init_array+0x46>

20413400 <_setlocale_r>:
20413400:	1141                	addi	sp,sp,-16
20413402:	c226                	sw	s1,4(sp)
20413404:	c606                	sw	ra,12(sp)
20413406:	c422                	sw	s0,8(sp)
20413408:	204224b7          	lui	s1,0x20422
2041340c:	c615                	beqz	a2,20413438 <_setlocale_r+0x38>
2041340e:	204225b7          	lui	a1,0x20422
20413412:	b3858593          	addi	a1,a1,-1224 # 20421b38 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1e4>
20413416:	8532                	mv	a0,a2
20413418:	8432                	mv	s0,a2
2041341a:	2cd5                	jal	2041370e <strcmp>
2041341c:	cd11                	beqz	a0,20413438 <_setlocale_r+0x38>
2041341e:	b3448593          	addi	a1,s1,-1228 # 20421b34 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1e0>
20413422:	8522                	mv	a0,s0
20413424:	24ed                	jal	2041370e <strcmp>
20413426:	c909                	beqz	a0,20413438 <_setlocale_r+0x38>
20413428:	204225b7          	lui	a1,0x20422
2041342c:	b0058593          	addi	a1,a1,-1280 # 20421b00 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1ac>
20413430:	8522                	mv	a0,s0
20413432:	2cf1                	jal	2041370e <strcmp>
20413434:	4781                	li	a5,0
20413436:	e119                	bnez	a0,2041343c <_setlocale_r+0x3c>
20413438:	b3448793          	addi	a5,s1,-1228
2041343c:	40b2                	lw	ra,12(sp)
2041343e:	4422                	lw	s0,8(sp)
20413440:	4492                	lw	s1,4(sp)
20413442:	853e                	mv	a0,a5
20413444:	0141                	addi	sp,sp,16
20413446:	8082                	ret

20413448 <__locale_mb_cur_max>:
20413448:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
2041344c:	5bdc                	lw	a5,52(a5)
2041344e:	e789                	bnez	a5,20413458 <__locale_mb_cur_max+0x10>
20413450:	800007b7          	lui	a5,0x80000
20413454:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20413458:	1287c503          	lbu	a0,296(a5)
2041345c:	8082                	ret

2041345e <__locale_ctype_ptr_l>:
2041345e:	0ec52503          	lw	a0,236(a0)
20413462:	8082                	ret

20413464 <__locale_ctype_ptr>:
20413464:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413468:	5bdc                	lw	a5,52(a5)
2041346a:	e789                	bnez	a5,20413474 <__locale_ctype_ptr+0x10>
2041346c:	800007b7          	lui	a5,0x80000
20413470:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20413474:	0ec7a503          	lw	a0,236(a5)
20413478:	8082                	ret

2041347a <setlocale>:
2041347a:	862e                	mv	a2,a1
2041347c:	85aa                	mv	a1,a0
2041347e:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20413482:	bfbd                	j	20413400 <_setlocale_r>

20413484 <_mbtowc_r>:
20413484:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413488:	5bdc                	lw	a5,52(a5)
2041348a:	e789                	bnez	a5,20413494 <_mbtowc_r+0x10>
2041348c:	800007b7          	lui	a5,0x80000
20413490:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20413494:	0e47a303          	lw	t1,228(a5)
20413498:	8302                	jr	t1

2041349a <__ascii_mbtowc>:
2041349a:	e185                	bnez	a1,204134ba <__ascii_mbtowc+0x20>
2041349c:	1141                	addi	sp,sp,-16
2041349e:	006c                	addi	a1,sp,12
204134a0:	4501                	li	a0,0
204134a2:	ca11                	beqz	a2,204134b6 <__ascii_mbtowc+0x1c>
204134a4:	5579                	li	a0,-2
204134a6:	ca81                	beqz	a3,204134b6 <__ascii_mbtowc+0x1c>
204134a8:	00064783          	lbu	a5,0(a2) # 2000 <__stack_size-0x2000>
204134ac:	c19c                	sw	a5,0(a1)
204134ae:	00064503          	lbu	a0,0(a2)
204134b2:	00a03533          	snez	a0,a0
204134b6:	0141                	addi	sp,sp,16
204134b8:	8082                	ret
204134ba:	4501                	li	a0,0
204134bc:	ca19                	beqz	a2,204134d2 <__ascii_mbtowc+0x38>
204134be:	5579                	li	a0,-2
204134c0:	ca89                	beqz	a3,204134d2 <__ascii_mbtowc+0x38>
204134c2:	00064783          	lbu	a5,0(a2)
204134c6:	c19c                	sw	a5,0(a1)
204134c8:	00064503          	lbu	a0,0(a2)
204134cc:	00a03533          	snez	a0,a0
204134d0:	8082                	ret
204134d2:	8082                	ret

204134d4 <memcpy>:
204134d4:	00a5c7b3          	xor	a5,a1,a0
204134d8:	8b8d                	andi	a5,a5,3
204134da:	00c50733          	add	a4,a0,a2
204134de:	e781                	bnez	a5,204134e6 <memcpy+0x12>
204134e0:	478d                	li	a5,3
204134e2:	00c7ef63          	bltu	a5,a2,20413500 <memcpy+0x2c>
204134e6:	87aa                	mv	a5,a0
204134e8:	00e56963          	bltu	a0,a4,204134fa <memcpy+0x26>
204134ec:	8082                	ret
204134ee:	0005c683          	lbu	a3,0(a1)
204134f2:	0785                	addi	a5,a5,1
204134f4:	0585                	addi	a1,a1,1
204134f6:	fed78fa3          	sb	a3,-1(a5)
204134fa:	fee7eae3          	bltu	a5,a4,204134ee <memcpy+0x1a>
204134fe:	8082                	ret
20413500:	00357793          	andi	a5,a0,3
20413504:	ebbd                	bnez	a5,2041357a <memcpy+0xa6>
20413506:	87aa                	mv	a5,a0
20413508:	ffc77693          	andi	a3,a4,-4
2041350c:	fe068613          	addi	a2,a3,-32
20413510:	06c7fc63          	bleu	a2,a5,20413588 <memcpy+0xb4>
20413514:	0005a383          	lw	t2,0(a1)
20413518:	0045a283          	lw	t0,4(a1)
2041351c:	0085af83          	lw	t6,8(a1)
20413520:	00c5af03          	lw	t5,12(a1)
20413524:	0105ae83          	lw	t4,16(a1)
20413528:	0145ae03          	lw	t3,20(a1)
2041352c:	0185a303          	lw	t1,24(a1)
20413530:	01c5a883          	lw	a7,28(a1)
20413534:	02458593          	addi	a1,a1,36
20413538:	02478793          	addi	a5,a5,36
2041353c:	ffc5a803          	lw	a6,-4(a1)
20413540:	fc77ae23          	sw	t2,-36(a5)
20413544:	fe57a023          	sw	t0,-32(a5)
20413548:	fff7a223          	sw	t6,-28(a5)
2041354c:	ffe7a423          	sw	t5,-24(a5)
20413550:	ffd7a623          	sw	t4,-20(a5)
20413554:	ffc7a823          	sw	t3,-16(a5)
20413558:	fe67aa23          	sw	t1,-12(a5)
2041355c:	ff17ac23          	sw	a7,-8(a5)
20413560:	ff07ae23          	sw	a6,-4(a5)
20413564:	b775                	j	20413510 <memcpy+0x3c>
20413566:	0005c683          	lbu	a3,0(a1)
2041356a:	0785                	addi	a5,a5,1
2041356c:	0585                	addi	a1,a1,1
2041356e:	fed78fa3          	sb	a3,-1(a5)
20413572:	0037f693          	andi	a3,a5,3
20413576:	fae5                	bnez	a3,20413566 <memcpy+0x92>
20413578:	bf41                	j	20413508 <memcpy+0x34>
2041357a:	87aa                	mv	a5,a0
2041357c:	bfdd                	j	20413572 <memcpy+0x9e>
2041357e:	4190                	lw	a2,0(a1)
20413580:	0791                	addi	a5,a5,4
20413582:	0591                	addi	a1,a1,4
20413584:	fec7ae23          	sw	a2,-4(a5)
20413588:	fed7ebe3          	bltu	a5,a3,2041357e <memcpy+0xaa>
2041358c:	f6e7e7e3          	bltu	a5,a4,204134fa <memcpy+0x26>
20413590:	8082                	ret

20413592 <memset>:
20413592:	483d                	li	a6,15
20413594:	872a                	mv	a4,a0
20413596:	02c87363          	bleu	a2,a6,204135bc <memset+0x2a>
2041359a:	00f77793          	andi	a5,a4,15
2041359e:	efbd                	bnez	a5,2041361c <memset+0x8a>
204135a0:	e5ad                	bnez	a1,2041360a <memset+0x78>
204135a2:	ff067693          	andi	a3,a2,-16
204135a6:	8a3d                	andi	a2,a2,15
204135a8:	96ba                	add	a3,a3,a4
204135aa:	c30c                	sw	a1,0(a4)
204135ac:	c34c                	sw	a1,4(a4)
204135ae:	c70c                	sw	a1,8(a4)
204135b0:	c74c                	sw	a1,12(a4)
204135b2:	0741                	addi	a4,a4,16
204135b4:	fed76be3          	bltu	a4,a3,204135aa <memset+0x18>
204135b8:	e211                	bnez	a2,204135bc <memset+0x2a>
204135ba:	8082                	ret
204135bc:	40c806b3          	sub	a3,a6,a2
204135c0:	068a                	slli	a3,a3,0x2
204135c2:	00000297          	auipc	t0,0x0
204135c6:	9696                	add	a3,a3,t0
204135c8:	00a68067          	jr	10(a3)
204135cc:	00b70723          	sb	a1,14(a4)
204135d0:	00b706a3          	sb	a1,13(a4)
204135d4:	00b70623          	sb	a1,12(a4)
204135d8:	00b705a3          	sb	a1,11(a4)
204135dc:	00b70523          	sb	a1,10(a4)
204135e0:	00b704a3          	sb	a1,9(a4)
204135e4:	00b70423          	sb	a1,8(a4)
204135e8:	00b703a3          	sb	a1,7(a4)
204135ec:	00b70323          	sb	a1,6(a4)
204135f0:	00b702a3          	sb	a1,5(a4)
204135f4:	00b70223          	sb	a1,4(a4)
204135f8:	00b701a3          	sb	a1,3(a4)
204135fc:	00b70123          	sb	a1,2(a4)
20413600:	00b700a3          	sb	a1,1(a4)
20413604:	00b70023          	sb	a1,0(a4)
20413608:	8082                	ret
2041360a:	0ff5f593          	andi	a1,a1,255
2041360e:	00859693          	slli	a3,a1,0x8
20413612:	8dd5                	or	a1,a1,a3
20413614:	01059693          	slli	a3,a1,0x10
20413618:	8dd5                	or	a1,a1,a3
2041361a:	b761                	j	204135a2 <memset+0x10>
2041361c:	00279693          	slli	a3,a5,0x2
20413620:	00000297          	auipc	t0,0x0
20413624:	9696                	add	a3,a3,t0
20413626:	8286                	mv	t0,ra
20413628:	fa8680e7          	jalr	-88(a3)
2041362c:	8096                	mv	ra,t0
2041362e:	17c1                	addi	a5,a5,-16
20413630:	8f1d                	sub	a4,a4,a5
20413632:	963e                	add	a2,a2,a5
20413634:	f8c874e3          	bleu	a2,a6,204135bc <memset+0x2a>
20413638:	b7a5                	j	204135a0 <memset+0xe>

2041363a <_snprintf_r>:
2041363a:	7175                	addi	sp,sp,-144
2041363c:	de86                	sw	ra,124(sp)
2041363e:	dca2                	sw	s0,120(sp)
20413640:	daa6                	sw	s1,116(sp)
20413642:	c13a                	sw	a4,128(sp)
20413644:	c33e                	sw	a5,132(sp)
20413646:	c542                	sw	a6,136(sp)
20413648:	c746                	sw	a7,140(sp)
2041364a:	00065b63          	bgez	a2,20413660 <_snprintf_r+0x26>
2041364e:	08b00793          	li	a5,139
20413652:	c11c                	sw	a5,0(a0)
20413654:	557d                	li	a0,-1
20413656:	50f6                	lw	ra,124(sp)
20413658:	5466                	lw	s0,120(sp)
2041365a:	54d6                	lw	s1,116(sp)
2041365c:	6149                	addi	sp,sp,144
2041365e:	8082                	ret
20413660:	20800793          	li	a5,520
20413664:	00f11a23          	sh	a5,20(sp)
20413668:	c42e                	sw	a1,8(sp)
2041366a:	cc2e                	sw	a1,24(sp)
2041366c:	8432                	mv	s0,a2
2041366e:	4781                	li	a5,0
20413670:	c219                	beqz	a2,20413676 <_snprintf_r+0x3c>
20413672:	fff60793          	addi	a5,a2,-1
20413676:	8636                	mv	a2,a3
20413678:	c83e                	sw	a5,16(sp)
2041367a:	ce3e                	sw	a5,28(sp)
2041367c:	0114                	addi	a3,sp,128
2041367e:	57fd                	li	a5,-1
20413680:	002c                	addi	a1,sp,8
20413682:	00f11b23          	sh	a5,22(sp)
20413686:	84aa                	mv	s1,a0
20413688:	c236                	sw	a3,4(sp)
2041368a:	2b21                	jal	20413ba2 <_svfprintf_r>
2041368c:	57fd                	li	a5,-1
2041368e:	00f55563          	ble	a5,a0,20413698 <_snprintf_r+0x5e>
20413692:	08b00793          	li	a5,139
20413696:	c09c                	sw	a5,0(s1)
20413698:	dc5d                	beqz	s0,20413656 <_snprintf_r+0x1c>
2041369a:	47a2                	lw	a5,8(sp)
2041369c:	00078023          	sb	zero,0(a5)
204136a0:	bf5d                	j	20413656 <_snprintf_r+0x1c>

204136a2 <snprintf>:
204136a2:	7135                	addi	sp,sp,-160
204136a4:	daa6                	sw	s1,116(sp)
204136a6:	cb3e                	sw	a5,148(sp)
204136a8:	de86                	sw	ra,124(sp)
204136aa:	dca2                	sw	s0,120(sp)
204136ac:	c736                	sw	a3,140(sp)
204136ae:	c93a                	sw	a4,144(sp)
204136b0:	cd42                	sw	a6,152(sp)
204136b2:	cf46                	sw	a7,156(sp)
204136b4:	8981a483          	lw	s1,-1896(gp) # 80000a38 <_impure_ptr>
204136b8:	0005db63          	bgez	a1,204136ce <snprintf+0x2c>
204136bc:	08b00793          	li	a5,139
204136c0:	c09c                	sw	a5,0(s1)
204136c2:	557d                	li	a0,-1
204136c4:	50f6                	lw	ra,124(sp)
204136c6:	5466                	lw	s0,120(sp)
204136c8:	54d6                	lw	s1,116(sp)
204136ca:	610d                	addi	sp,sp,160
204136cc:	8082                	ret
204136ce:	20800793          	li	a5,520
204136d2:	00f11a23          	sh	a5,20(sp)
204136d6:	c42a                	sw	a0,8(sp)
204136d8:	cc2a                	sw	a0,24(sp)
204136da:	4781                	li	a5,0
204136dc:	c199                	beqz	a1,204136e2 <snprintf+0x40>
204136de:	fff58793          	addi	a5,a1,-1
204136e2:	c83e                	sw	a5,16(sp)
204136e4:	ce3e                	sw	a5,28(sp)
204136e6:	0174                	addi	a3,sp,140
204136e8:	57fd                	li	a5,-1
204136ea:	842e                	mv	s0,a1
204136ec:	8526                	mv	a0,s1
204136ee:	002c                	addi	a1,sp,8
204136f0:	00f11b23          	sh	a5,22(sp)
204136f4:	c236                	sw	a3,4(sp)
204136f6:	2175                	jal	20413ba2 <_svfprintf_r>
204136f8:	57fd                	li	a5,-1
204136fa:	00f55563          	ble	a5,a0,20413704 <snprintf+0x62>
204136fe:	08b00793          	li	a5,139
20413702:	c09c                	sw	a5,0(s1)
20413704:	d061                	beqz	s0,204136c4 <snprintf+0x22>
20413706:	47a2                	lw	a5,8(sp)
20413708:	00078023          	sb	zero,0(a5)
2041370c:	bf65                	j	204136c4 <snprintf+0x22>

2041370e <strcmp>:
2041370e:	00b56733          	or	a4,a0,a1
20413712:	53fd                	li	t2,-1
20413714:	8b0d                	andi	a4,a4,3
20413716:	e779                	bnez	a4,204137e4 <strcmp+0xd6>
20413718:	7f7f8e37          	lui	t3,0x7f7f8
2041371c:	f7fe0e13          	addi	t3,t3,-129 # 7f7f7f7f <__fini_array_end+0x5f3d56c3>
20413720:	4110                	lw	a2,0(a0)
20413722:	4194                	lw	a3,0(a1)
20413724:	01c672b3          	and	t0,a2,t3
20413728:	01c66333          	or	t1,a2,t3
2041372c:	92f2                	add	t0,t0,t3
2041372e:	0062e2b3          	or	t0,t0,t1
20413732:	0c729763          	bne	t0,t2,20413800 <strcmp+0xf2>
20413736:	06d61863          	bne	a2,a3,204137a6 <strcmp+0x98>
2041373a:	4150                	lw	a2,4(a0)
2041373c:	41d4                	lw	a3,4(a1)
2041373e:	01c672b3          	and	t0,a2,t3
20413742:	01c66333          	or	t1,a2,t3
20413746:	92f2                	add	t0,t0,t3
20413748:	0062e2b3          	or	t0,t0,t1
2041374c:	0a729863          	bne	t0,t2,204137fc <strcmp+0xee>
20413750:	04d61b63          	bne	a2,a3,204137a6 <strcmp+0x98>
20413754:	4510                	lw	a2,8(a0)
20413756:	4594                	lw	a3,8(a1)
20413758:	01c672b3          	and	t0,a2,t3
2041375c:	01c66333          	or	t1,a2,t3
20413760:	92f2                	add	t0,t0,t3
20413762:	0062e2b3          	or	t0,t0,t1
20413766:	0a729163          	bne	t0,t2,20413808 <strcmp+0xfa>
2041376a:	02d61e63          	bne	a2,a3,204137a6 <strcmp+0x98>
2041376e:	4550                	lw	a2,12(a0)
20413770:	45d4                	lw	a3,12(a1)
20413772:	01c672b3          	and	t0,a2,t3
20413776:	01c66333          	or	t1,a2,t3
2041377a:	92f2                	add	t0,t0,t3
2041377c:	0062e2b3          	or	t0,t0,t1
20413780:	08729a63          	bne	t0,t2,20413814 <strcmp+0x106>
20413784:	02d61163          	bne	a2,a3,204137a6 <strcmp+0x98>
20413788:	4910                	lw	a2,16(a0)
2041378a:	4994                	lw	a3,16(a1)
2041378c:	01c672b3          	and	t0,a2,t3
20413790:	01c66333          	or	t1,a2,t3
20413794:	92f2                	add	t0,t0,t3
20413796:	0062e2b3          	or	t0,t0,t1
2041379a:	08729363          	bne	t0,t2,20413820 <strcmp+0x112>
2041379e:	0551                	addi	a0,a0,20
204137a0:	05d1                	addi	a1,a1,20
204137a2:	f6d60fe3          	beq	a2,a3,20413720 <strcmp+0x12>
204137a6:	01061713          	slli	a4,a2,0x10
204137aa:	01069793          	slli	a5,a3,0x10
204137ae:	00f71c63          	bne	a4,a5,204137c6 <strcmp+0xb8>
204137b2:	01065713          	srli	a4,a2,0x10
204137b6:	0106d793          	srli	a5,a3,0x10
204137ba:	40f70533          	sub	a0,a4,a5
204137be:	0ff57593          	andi	a1,a0,255
204137c2:	e991                	bnez	a1,204137d6 <strcmp+0xc8>
204137c4:	8082                	ret
204137c6:	8341                	srli	a4,a4,0x10
204137c8:	83c1                	srli	a5,a5,0x10
204137ca:	40f70533          	sub	a0,a4,a5
204137ce:	0ff57593          	andi	a1,a0,255
204137d2:	e191                	bnez	a1,204137d6 <strcmp+0xc8>
204137d4:	8082                	ret
204137d6:	0ff77713          	andi	a4,a4,255
204137da:	0ff7f793          	andi	a5,a5,255
204137de:	40f70533          	sub	a0,a4,a5
204137e2:	8082                	ret
204137e4:	00054603          	lbu	a2,0(a0)
204137e8:	0005c683          	lbu	a3,0(a1)
204137ec:	0505                	addi	a0,a0,1
204137ee:	0585                	addi	a1,a1,1
204137f0:	00d61363          	bne	a2,a3,204137f6 <strcmp+0xe8>
204137f4:	fa65                	bnez	a2,204137e4 <strcmp+0xd6>
204137f6:	40d60533          	sub	a0,a2,a3
204137fa:	8082                	ret
204137fc:	0511                	addi	a0,a0,4
204137fe:	0591                	addi	a1,a1,4
20413800:	fed612e3          	bne	a2,a3,204137e4 <strcmp+0xd6>
20413804:	4501                	li	a0,0
20413806:	8082                	ret
20413808:	0521                	addi	a0,a0,8
2041380a:	05a1                	addi	a1,a1,8
2041380c:	fcd61ce3          	bne	a2,a3,204137e4 <strcmp+0xd6>
20413810:	4501                	li	a0,0
20413812:	8082                	ret
20413814:	0531                	addi	a0,a0,12
20413816:	05b1                	addi	a1,a1,12
20413818:	fcd616e3          	bne	a2,a3,204137e4 <strcmp+0xd6>
2041381c:	4501                	li	a0,0
2041381e:	8082                	ret
20413820:	0541                	addi	a0,a0,16
20413822:	05c1                	addi	a1,a1,16
20413824:	fcd610e3          	bne	a2,a3,204137e4 <strcmp+0xd6>
20413828:	4501                	li	a0,0
2041382a:	8082                	ret

2041382c <strlen>:
2041382c:	87aa                	mv	a5,a0
2041382e:	0785                	addi	a5,a5,1
20413830:	fff7c703          	lbu	a4,-1(a5)
20413834:	ff6d                	bnez	a4,2041382e <strlen+0x2>
20413836:	40a78533          	sub	a0,a5,a0
2041383a:	157d                	addi	a0,a0,-1
2041383c:	8082                	ret

2041383e <strncmp>:
2041383e:	c21d                	beqz	a2,20413864 <strncmp+0x26>
20413840:	00150713          	addi	a4,a0,1
20413844:	9532                	add	a0,a0,a2
20413846:	fff74783          	lbu	a5,-1(a4)
2041384a:	0005c683          	lbu	a3,0(a1)
2041384e:	00d78563          	beq	a5,a3,20413858 <strncmp+0x1a>
20413852:	40d78533          	sub	a0,a5,a3
20413856:	8082                	ret
20413858:	fea70de3          	beq	a4,a0,20413852 <strncmp+0x14>
2041385c:	0705                	addi	a4,a4,1
2041385e:	dbf5                	beqz	a5,20413852 <strncmp+0x14>
20413860:	0585                	addi	a1,a1,1
20413862:	b7d5                	j	20413846 <strncmp+0x8>
20413864:	4501                	li	a0,0
20413866:	8082                	ret

20413868 <strncpy>:
20413868:	872a                	mv	a4,a0
2041386a:	e211                	bnez	a2,2041386e <strncpy+0x6>
2041386c:	8082                	ret
2041386e:	0585                	addi	a1,a1,1
20413870:	fff5c683          	lbu	a3,-1(a1)
20413874:	00170793          	addi	a5,a4,1
20413878:	fff60813          	addi	a6,a2,-1
2041387c:	fed78fa3          	sb	a3,-1(a5)
20413880:	e689                	bnez	a3,2041388a <strncpy+0x22>
20413882:	9732                	add	a4,a4,a2
20413884:	00e79663          	bne	a5,a4,20413890 <strncpy+0x28>
20413888:	8082                	ret
2041388a:	873e                	mv	a4,a5
2041388c:	8642                	mv	a2,a6
2041388e:	bff1                	j	2041386a <strncpy+0x2>
20413890:	0785                	addi	a5,a5,1
20413892:	fe078fa3          	sb	zero,-1(a5)
20413896:	b7fd                	j	20413884 <strncpy+0x1c>

20413898 <strnlen>:
20413898:	95aa                	add	a1,a1,a0
2041389a:	87aa                	mv	a5,a0
2041389c:	00b79563          	bne	a5,a1,204138a6 <strnlen+0xe>
204138a0:	40a78533          	sub	a0,a5,a0
204138a4:	8082                	ret
204138a6:	0007c703          	lbu	a4,0(a5)
204138aa:	db7d                	beqz	a4,204138a0 <strnlen+0x8>
204138ac:	0785                	addi	a5,a5,1
204138ae:	b7fd                	j	2041389c <strnlen+0x4>

204138b0 <_strtol_l.isra.0>:
204138b0:	7179                	addi	sp,sp,-48
204138b2:	d04a                	sw	s2,32(sp)
204138b4:	ce4e                	sw	s3,28(sp)
204138b6:	d606                	sw	ra,44(sp)
204138b8:	d422                	sw	s0,40(sp)
204138ba:	d226                	sw	s1,36(sp)
204138bc:	89aa                	mv	s3,a0
204138be:	892e                	mv	s2,a1
204138c0:	00190493          	addi	s1,s2,1
204138c4:	fff4c403          	lbu	s0,-1(s1)
204138c8:	853a                	mv	a0,a4
204138ca:	c62e                	sw	a1,12(sp)
204138cc:	c432                	sw	a2,8(sp)
204138ce:	c236                	sw	a3,4(sp)
204138d0:	c03a                	sw	a4,0(sp)
204138d2:	b8dff0ef          	jal	ra,2041345e <__locale_ctype_ptr_l>
204138d6:	9522                	add	a0,a0,s0
204138d8:	00154783          	lbu	a5,1(a0)
204138dc:	45b2                	lw	a1,12(sp)
204138de:	4622                	lw	a2,8(sp)
204138e0:	8ba1                	andi	a5,a5,8
204138e2:	4692                	lw	a3,4(sp)
204138e4:	4702                	lw	a4,0(sp)
204138e6:	e7c9                	bnez	a5,20413970 <_strtol_l.isra.0+0xc0>
204138e8:	02d00793          	li	a5,45
204138ec:	08f41463          	bne	s0,a5,20413974 <_strtol_l.isra.0+0xc4>
204138f0:	0004c783          	lbu	a5,0(s1)
204138f4:	4305                	li	t1,1
204138f6:	00290493          	addi	s1,s2,2
204138fa:	c6fd                	beqz	a3,204139e8 <_strtol_l.isra.0+0x138>
204138fc:	4741                	li	a4,16
204138fe:	02e69263          	bne	a3,a4,20413922 <_strtol_l.isra.0+0x72>
20413902:	03000713          	li	a4,48
20413906:	00e79e63          	bne	a5,a4,20413922 <_strtol_l.isra.0+0x72>
2041390a:	0004c783          	lbu	a5,0(s1)
2041390e:	05800713          	li	a4,88
20413912:	0df7f793          	andi	a5,a5,223
20413916:	0ce79463          	bne	a5,a4,204139de <_strtol_l.isra.0+0x12e>
2041391a:	0014c783          	lbu	a5,1(s1)
2041391e:	46c1                	li	a3,16
20413920:	0489                	addi	s1,s1,2
20413922:	800008b7          	lui	a7,0x80000
20413926:	00031463          	bnez	t1,2041392e <_strtol_l.isra.0+0x7e>
2041392a:	fff8c893          	not	a7,a7
2041392e:	02d8ff33          	remu	t5,a7,a3
20413932:	4801                	li	a6,0
20413934:	4501                	li	a0,0
20413936:	4fa5                	li	t6,9
20413938:	4ee5                	li	t4,25
2041393a:	52fd                	li	t0,-1
2041393c:	02d8de33          	divu	t3,a7,a3
20413940:	fd078713          	addi	a4,a5,-48
20413944:	04efe463          	bltu	t6,a4,2041398c <_strtol_l.isra.0+0xdc>
20413948:	87ba                	mv	a5,a4
2041394a:	04d7df63          	ble	a3,a5,204139a8 <_strtol_l.isra.0+0xf8>
2041394e:	00580d63          	beq	a6,t0,20413968 <_strtol_l.isra.0+0xb8>
20413952:	587d                	li	a6,-1
20413954:	00ae6a63          	bltu	t3,a0,20413968 <_strtol_l.isra.0+0xb8>
20413958:	00ae1463          	bne	t3,a0,20413960 <_strtol_l.isra.0+0xb0>
2041395c:	00ff4663          	blt	t5,a5,20413968 <_strtol_l.isra.0+0xb8>
20413960:	4805                	li	a6,1
20413962:	02a68533          	mul	a0,a3,a0
20413966:	953e                	add	a0,a0,a5
20413968:	0485                	addi	s1,s1,1
2041396a:	fff4c783          	lbu	a5,-1(s1)
2041396e:	bfc9                	j	20413940 <_strtol_l.isra.0+0x90>
20413970:	8926                	mv	s2,s1
20413972:	b7b9                	j	204138c0 <_strtol_l.isra.0+0x10>
20413974:	02b00793          	li	a5,43
20413978:	00f40563          	beq	s0,a5,20413982 <_strtol_l.isra.0+0xd2>
2041397c:	87a2                	mv	a5,s0
2041397e:	4301                	li	t1,0
20413980:	bfad                	j	204138fa <_strtol_l.isra.0+0x4a>
20413982:	0004c783          	lbu	a5,0(s1)
20413986:	00290493          	addi	s1,s2,2
2041398a:	bfd5                	j	2041397e <_strtol_l.isra.0+0xce>
2041398c:	fbf78713          	addi	a4,a5,-65
20413990:	00eee563          	bltu	t4,a4,2041399a <_strtol_l.isra.0+0xea>
20413994:	fc978793          	addi	a5,a5,-55
20413998:	bf4d                	j	2041394a <_strtol_l.isra.0+0x9a>
2041399a:	f9f78713          	addi	a4,a5,-97
2041399e:	00eee563          	bltu	t4,a4,204139a8 <_strtol_l.isra.0+0xf8>
204139a2:	fa978793          	addi	a5,a5,-87
204139a6:	b755                	j	2041394a <_strtol_l.isra.0+0x9a>
204139a8:	57fd                	li	a5,-1
204139aa:	00f81f63          	bne	a6,a5,204139c8 <_strtol_l.isra.0+0x118>
204139ae:	02200793          	li	a5,34
204139b2:	00f9a023          	sw	a5,0(s3)
204139b6:	8546                	mv	a0,a7
204139b8:	ee19                	bnez	a2,204139d6 <_strtol_l.isra.0+0x126>
204139ba:	50b2                	lw	ra,44(sp)
204139bc:	5422                	lw	s0,40(sp)
204139be:	5492                	lw	s1,36(sp)
204139c0:	5902                	lw	s2,32(sp)
204139c2:	49f2                	lw	s3,28(sp)
204139c4:	6145                	addi	sp,sp,48
204139c6:	8082                	ret
204139c8:	00030463          	beqz	t1,204139d0 <_strtol_l.isra.0+0x120>
204139cc:	40a00533          	neg	a0,a0
204139d0:	d66d                	beqz	a2,204139ba <_strtol_l.isra.0+0x10a>
204139d2:	00080463          	beqz	a6,204139da <_strtol_l.isra.0+0x12a>
204139d6:	fff48593          	addi	a1,s1,-1
204139da:	c20c                	sw	a1,0(a2)
204139dc:	bff9                	j	204139ba <_strtol_l.isra.0+0x10a>
204139de:	03000793          	li	a5,48
204139e2:	f2a1                	bnez	a3,20413922 <_strtol_l.isra.0+0x72>
204139e4:	46a1                	li	a3,8
204139e6:	bf35                	j	20413922 <_strtol_l.isra.0+0x72>
204139e8:	03000713          	li	a4,48
204139ec:	f0e78fe3          	beq	a5,a4,2041390a <_strtol_l.isra.0+0x5a>
204139f0:	46a9                	li	a3,10
204139f2:	bf05                	j	20413922 <_strtol_l.isra.0+0x72>

204139f4 <_strtol_r>:
204139f4:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
204139f8:	5bd8                	lw	a4,52(a5)
204139fa:	e709                	bnez	a4,20413a04 <_strtol_r+0x10>
204139fc:	80000737          	lui	a4,0x80000
20413a00:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413a04:	b575                	j	204138b0 <_strtol_l.isra.0>

20413a06 <strtol_l>:
20413a06:	8736                	mv	a4,a3
20413a08:	86b2                	mv	a3,a2
20413a0a:	862e                	mv	a2,a1
20413a0c:	85aa                	mv	a1,a0
20413a0e:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20413a12:	bd79                	j	204138b0 <_strtol_l.isra.0>

20413a14 <strtol>:
20413a14:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413a18:	86b2                	mv	a3,a2
20413a1a:	5bd8                	lw	a4,52(a5)
20413a1c:	e709                	bnez	a4,20413a26 <strtol+0x12>
20413a1e:	80000737          	lui	a4,0x80000
20413a22:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413a26:	862e                	mv	a2,a1
20413a28:	85aa                	mv	a1,a0
20413a2a:	853e                	mv	a0,a5
20413a2c:	b551                	j	204138b0 <_strtol_l.isra.0>

20413a2e <_strtoul_l.isra.0>:
20413a2e:	7179                	addi	sp,sp,-48
20413a30:	d04a                	sw	s2,32(sp)
20413a32:	ce4e                	sw	s3,28(sp)
20413a34:	d606                	sw	ra,44(sp)
20413a36:	d422                	sw	s0,40(sp)
20413a38:	d226                	sw	s1,36(sp)
20413a3a:	89aa                	mv	s3,a0
20413a3c:	892e                	mv	s2,a1
20413a3e:	00190493          	addi	s1,s2,1
20413a42:	fff4c403          	lbu	s0,-1(s1)
20413a46:	853a                	mv	a0,a4
20413a48:	c62e                	sw	a1,12(sp)
20413a4a:	c432                	sw	a2,8(sp)
20413a4c:	c236                	sw	a3,4(sp)
20413a4e:	c03a                	sw	a4,0(sp)
20413a50:	a0fff0ef          	jal	ra,2041345e <__locale_ctype_ptr_l>
20413a54:	9522                	add	a0,a0,s0
20413a56:	00154783          	lbu	a5,1(a0)
20413a5a:	45b2                	lw	a1,12(sp)
20413a5c:	4622                	lw	a2,8(sp)
20413a5e:	8ba1                	andi	a5,a5,8
20413a60:	4692                	lw	a3,4(sp)
20413a62:	4702                	lw	a4,0(sp)
20413a64:	efbd                	bnez	a5,20413ae2 <_strtoul_l.isra.0+0xb4>
20413a66:	02d00793          	li	a5,45
20413a6a:	06f41e63          	bne	s0,a5,20413ae6 <_strtoul_l.isra.0+0xb8>
20413a6e:	0004c783          	lbu	a5,0(s1)
20413a72:	4305                	li	t1,1
20413a74:	00290493          	addi	s1,s2,2
20413a78:	c2f5                	beqz	a3,20413b5c <_strtoul_l.isra.0+0x12e>
20413a7a:	4741                	li	a4,16
20413a7c:	02e69263          	bne	a3,a4,20413aa0 <_strtoul_l.isra.0+0x72>
20413a80:	03000713          	li	a4,48
20413a84:	00e79e63          	bne	a5,a4,20413aa0 <_strtoul_l.isra.0+0x72>
20413a88:	0004c783          	lbu	a5,0(s1)
20413a8c:	05800713          	li	a4,88
20413a90:	0df7f793          	andi	a5,a5,223
20413a94:	0ae79f63          	bne	a5,a4,20413b52 <_strtoul_l.isra.0+0x124>
20413a98:	0014c783          	lbu	a5,1(s1)
20413a9c:	46c1                	li	a3,16
20413a9e:	0489                	addi	s1,s1,2
20413aa0:	577d                	li	a4,-1
20413aa2:	02d75e33          	divu	t3,a4,a3
20413aa6:	4801                	li	a6,0
20413aa8:	4501                	li	a0,0
20413aaa:	4f25                	li	t5,9
20413aac:	4ee5                	li	t4,25
20413aae:	02d778b3          	remu	a7,a4,a3
20413ab2:	fd078713          	addi	a4,a5,-48
20413ab6:	04ef6463          	bltu	t5,a4,20413afe <_strtoul_l.isra.0+0xd0>
20413aba:	87ba                	mv	a5,a4
20413abc:	06d7d163          	ble	a3,a5,20413b1e <_strtoul_l.isra.0+0xf0>
20413ac0:	04084d63          	bltz	a6,20413b1a <_strtoul_l.isra.0+0xec>
20413ac4:	587d                	li	a6,-1
20413ac6:	00ae6a63          	bltu	t3,a0,20413ada <_strtoul_l.isra.0+0xac>
20413aca:	00ae1463          	bne	t3,a0,20413ad2 <_strtoul_l.isra.0+0xa4>
20413ace:	00f8c663          	blt	a7,a5,20413ada <_strtoul_l.isra.0+0xac>
20413ad2:	4805                	li	a6,1
20413ad4:	02a68533          	mul	a0,a3,a0
20413ad8:	953e                	add	a0,a0,a5
20413ada:	0485                	addi	s1,s1,1
20413adc:	fff4c783          	lbu	a5,-1(s1)
20413ae0:	bfc9                	j	20413ab2 <_strtoul_l.isra.0+0x84>
20413ae2:	8926                	mv	s2,s1
20413ae4:	bfa9                	j	20413a3e <_strtoul_l.isra.0+0x10>
20413ae6:	02b00793          	li	a5,43
20413aea:	00f40563          	beq	s0,a5,20413af4 <_strtoul_l.isra.0+0xc6>
20413aee:	87a2                	mv	a5,s0
20413af0:	4301                	li	t1,0
20413af2:	b759                	j	20413a78 <_strtoul_l.isra.0+0x4a>
20413af4:	0004c783          	lbu	a5,0(s1)
20413af8:	00290493          	addi	s1,s2,2
20413afc:	bfd5                	j	20413af0 <_strtoul_l.isra.0+0xc2>
20413afe:	fbf78713          	addi	a4,a5,-65
20413b02:	00eee563          	bltu	t4,a4,20413b0c <_strtoul_l.isra.0+0xde>
20413b06:	fc978793          	addi	a5,a5,-55
20413b0a:	bf4d                	j	20413abc <_strtoul_l.isra.0+0x8e>
20413b0c:	f9f78713          	addi	a4,a5,-97
20413b10:	00eee763          	bltu	t4,a4,20413b1e <_strtoul_l.isra.0+0xf0>
20413b14:	fa978793          	addi	a5,a5,-87
20413b18:	b755                	j	20413abc <_strtoul_l.isra.0+0x8e>
20413b1a:	587d                	li	a6,-1
20413b1c:	bf7d                	j	20413ada <_strtoul_l.isra.0+0xac>
20413b1e:	00085f63          	bgez	a6,20413b3c <_strtoul_l.isra.0+0x10e>
20413b22:	02200793          	li	a5,34
20413b26:	00f9a023          	sw	a5,0(s3)
20413b2a:	557d                	li	a0,-1
20413b2c:	ee19                	bnez	a2,20413b4a <_strtoul_l.isra.0+0x11c>
20413b2e:	50b2                	lw	ra,44(sp)
20413b30:	5422                	lw	s0,40(sp)
20413b32:	5492                	lw	s1,36(sp)
20413b34:	5902                	lw	s2,32(sp)
20413b36:	49f2                	lw	s3,28(sp)
20413b38:	6145                	addi	sp,sp,48
20413b3a:	8082                	ret
20413b3c:	00030463          	beqz	t1,20413b44 <_strtoul_l.isra.0+0x116>
20413b40:	40a00533          	neg	a0,a0
20413b44:	d66d                	beqz	a2,20413b2e <_strtoul_l.isra.0+0x100>
20413b46:	00080463          	beqz	a6,20413b4e <_strtoul_l.isra.0+0x120>
20413b4a:	fff48593          	addi	a1,s1,-1
20413b4e:	c20c                	sw	a1,0(a2)
20413b50:	bff9                	j	20413b2e <_strtoul_l.isra.0+0x100>
20413b52:	03000793          	li	a5,48
20413b56:	f6a9                	bnez	a3,20413aa0 <_strtoul_l.isra.0+0x72>
20413b58:	46a1                	li	a3,8
20413b5a:	b799                	j	20413aa0 <_strtoul_l.isra.0+0x72>
20413b5c:	03000713          	li	a4,48
20413b60:	f2e784e3          	beq	a5,a4,20413a88 <_strtoul_l.isra.0+0x5a>
20413b64:	46a9                	li	a3,10
20413b66:	bf2d                	j	20413aa0 <_strtoul_l.isra.0+0x72>

20413b68 <_strtoul_r>:
20413b68:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413b6c:	5bd8                	lw	a4,52(a5)
20413b6e:	e709                	bnez	a4,20413b78 <_strtoul_r+0x10>
20413b70:	80000737          	lui	a4,0x80000
20413b74:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413b78:	bd5d                	j	20413a2e <_strtoul_l.isra.0>

20413b7a <strtoul_l>:
20413b7a:	8736                	mv	a4,a3
20413b7c:	86b2                	mv	a3,a2
20413b7e:	862e                	mv	a2,a1
20413b80:	85aa                	mv	a1,a0
20413b82:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20413b86:	b565                	j	20413a2e <_strtoul_l.isra.0>

20413b88 <strtoul>:
20413b88:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20413b8c:	86b2                	mv	a3,a2
20413b8e:	5bd8                	lw	a4,52(a5)
20413b90:	e709                	bnez	a4,20413b9a <strtoul+0x12>
20413b92:	80000737          	lui	a4,0x80000
20413b96:	42870713          	addi	a4,a4,1064 # 80000428 <pulp__FC+0x80000429>
20413b9a:	862e                	mv	a2,a1
20413b9c:	85aa                	mv	a1,a0
20413b9e:	853e                	mv	a0,a5
20413ba0:	b579                	j	20413a2e <_strtoul_l.isra.0>

20413ba2 <_svfprintf_r>:
20413ba2:	7105                	addi	sp,sp,-480
20413ba4:	1c112e23          	sw	ra,476(sp)
20413ba8:	1c912a23          	sw	s1,468(sp)
20413bac:	1d212823          	sw	s2,464(sp)
20413bb0:	1d312623          	sw	s3,460(sp)
20413bb4:	1d512223          	sw	s5,452(sp)
20413bb8:	89ae                	mv	s3,a1
20413bba:	84b2                	mv	s1,a2
20413bbc:	8ab6                	mv	s5,a3
20413bbe:	1c812c23          	sw	s0,472(sp)
20413bc2:	1d412423          	sw	s4,456(sp)
20413bc6:	1d612023          	sw	s6,448(sp)
20413bca:	1b712e23          	sw	s7,444(sp)
20413bce:	1b812c23          	sw	s8,440(sp)
20413bd2:	1b912a23          	sw	s9,436(sp)
20413bd6:	1ba12823          	sw	s10,432(sp)
20413bda:	1bb12623          	sw	s11,428(sp)
20413bde:	892a                	mv	s2,a0
20413be0:	2ed050ef          	jal	ra,204196cc <_localeconv_r>
20413be4:	4108                	lw	a0,0(a0)
20413be6:	c4aa                	sw	a0,72(sp)
20413be8:	c45ff0ef          	jal	ra,2041382c <strlen>
20413bec:	00c9d783          	lhu	a5,12(s3)
20413bf0:	dc2a                	sw	a0,56(sp)
20413bf2:	d182                	sw	zero,224(sp)
20413bf4:	d382                	sw	zero,228(sp)
20413bf6:	d582                	sw	zero,232(sp)
20413bf8:	d782                	sw	zero,236(sp)
20413bfa:	0807f793          	andi	a5,a5,128
20413bfe:	cb85                	beqz	a5,20413c2e <_svfprintf_r+0x8c>
20413c00:	0109a783          	lw	a5,16(s3)
20413c04:	e78d                	bnez	a5,20413c2e <_svfprintf_r+0x8c>
20413c06:	04000593          	li	a1,64
20413c0a:	854a                	mv	a0,s2
20413c0c:	3f1050ef          	jal	ra,204197fc <_malloc_r>
20413c10:	00a9a023          	sw	a0,0(s3)
20413c14:	00a9a823          	sw	a0,16(s3)
20413c18:	e519                	bnez	a0,20413c26 <_svfprintf_r+0x84>
20413c1a:	47b1                	li	a5,12
20413c1c:	00f92023          	sw	a5,0(s2)
20413c20:	55fd                	li	a1,-1
20413c22:	de2e                	sw	a1,60(sp)
20413c24:	a109                	j	20414026 <_svfprintf_r+0x484>
20413c26:	04000793          	li	a5,64
20413c2a:	00f9aa23          	sw	a5,20(s3)
20413c2e:	0fc10893          	addi	a7,sp,252
20413c32:	cbc6                	sw	a7,212(sp)
20413c34:	cf82                	sw	zero,220(sp)
20413c36:	cd82                	sw	zero,216(sp)
20413c38:	4a01                	li	s4,0
20413c3a:	cc82                	sw	zero,88(sp)
20413c3c:	ca82                	sw	zero,84(sp)
20413c3e:	d402                	sw	zero,40(sp)
20413c40:	c282                	sw	zero,68(sp)
20413c42:	c882                	sw	zero,80(sp)
20413c44:	de02                	sw	zero,60(sp)
20413c46:	8426                	mv	s0,s1
20413c48:	02500713          	li	a4,37
20413c4c:	00044783          	lbu	a5,0(s0)
20413c50:	c399                	beqz	a5,20413c56 <_svfprintf_r+0xb4>
20413c52:	08e79363          	bne	a5,a4,20413cd8 <_svfprintf_r+0x136>
20413c56:	40940b33          	sub	s6,s0,s1
20413c5a:	020b0c63          	beqz	s6,20413c92 <_svfprintf_r+0xf0>
20413c5e:	47fe                	lw	a5,220(sp)
20413c60:	0098a023          	sw	s1,0(a7) # 80000000 <pulp__FC+0x80000001>
20413c64:	0168a223          	sw	s6,4(a7)
20413c68:	97da                	add	a5,a5,s6
20413c6a:	cfbe                	sw	a5,220(sp)
20413c6c:	47ee                	lw	a5,216(sp)
20413c6e:	471d                	li	a4,7
20413c70:	08a1                	addi	a7,a7,8
20413c72:	0785                	addi	a5,a5,1
20413c74:	cdbe                	sw	a5,216(sp)
20413c76:	00f75b63          	ble	a5,a4,20413c8c <_svfprintf_r+0xea>
20413c7a:	09d0                	addi	a2,sp,212
20413c7c:	85ce                	mv	a1,s3
20413c7e:	854a                	mv	a0,s2
20413c80:	0e6070ef          	jal	ra,2041ad66 <__ssprint_r>
20413c84:	38051b63          	bnez	a0,2041401a <_svfprintf_r+0x478>
20413c88:	0fc10893          	addi	a7,sp,252
20413c8c:	5672                	lw	a2,60(sp)
20413c8e:	965a                	add	a2,a2,s6
20413c90:	de32                	sw	a2,60(sp)
20413c92:	00044783          	lbu	a5,0(s0)
20413c96:	e399                	bnez	a5,20413c9c <_svfprintf_r+0xfa>
20413c98:	5380106f          	j	204151d0 <_svfprintf_r+0x162e>
20413c9c:	0405                	addi	s0,s0,1
20413c9e:	d822                	sw	s0,48(sp)
20413ca0:	0a010ba3          	sb	zero,183(sp)
20413ca4:	5b7d                	li	s6,-1
20413ca6:	c082                	sw	zero,64(sp)
20413ca8:	4401                	li	s0,0
20413caa:	4c29                	li	s8,10
20413cac:	02a00b93          	li	s7,42
20413cb0:	05a00613          	li	a2,90
20413cb4:	4725                	li	a4,9
20413cb6:	56c2                	lw	a3,48(sp)
20413cb8:	0006cd03          	lbu	s10,0(a3)
20413cbc:	0685                	addi	a3,a3,1
20413cbe:	d836                	sw	a3,48(sp)
20413cc0:	fe0d0793          	addi	a5,s10,-32
20413cc4:	56f665e3          	bltu	a2,a5,20414a2e <_svfprintf_r+0xe8c>
20413cc8:	204225b7          	lui	a1,0x20422
20413ccc:	078a                	slli	a5,a5,0x2
20413cce:	b4458593          	addi	a1,a1,-1212 # 20421b44 <_ZTVN3tvm7runtime9micro_rpc17SerialWriteStreamE+0x1f0>
20413cd2:	97ae                	add	a5,a5,a1
20413cd4:	439c                	lw	a5,0(a5)
20413cd6:	8782                	jr	a5
20413cd8:	0405                	addi	s0,s0,1
20413cda:	bf8d                	j	20413c4c <_svfprintf_r+0xaa>
20413cdc:	204227b7          	lui	a5,0x20422
20413ce0:	d2478793          	addi	a5,a5,-732 # 20421d24 <zeroes.4369+0x64>
20413ce4:	ccbe                	sw	a5,88(sp)
20413ce6:	02047793          	andi	a5,s0,32
20413cea:	3e0786e3          	beqz	a5,204148d6 <_svfprintf_r+0xd34>
20413cee:	0a9d                	addi	s5,s5,7
20413cf0:	ff8afa93          	andi	s5,s5,-8
20413cf4:	000aac03          	lw	s8,0(s5)
20413cf8:	004aac83          	lw	s9,4(s5)
20413cfc:	008a8793          	addi	a5,s5,8
20413d00:	d63e                	sw	a5,44(sp)
20413d02:	00147793          	andi	a5,s0,1
20413d06:	cf89                	beqz	a5,20413d20 <_svfprintf_r+0x17e>
20413d08:	019c67b3          	or	a5,s8,s9
20413d0c:	cb91                	beqz	a5,20413d20 <_svfprintf_r+0x17e>
20413d0e:	03000793          	li	a5,48
20413d12:	0af10c23          	sb	a5,184(sp)
20413d16:	87ea                	mv	a5,s10
20413d18:	0af10ca3          	sb	a5,185(sp)
20413d1c:	00246413          	ori	s0,s0,2
20413d20:	bff47413          	andi	s0,s0,-1025
20413d24:	4789                	li	a5,2
20413d26:	0d10006f          	j	204145f6 <_svfprintf_r+0xa54>
20413d2a:	854a                	mv	a0,s2
20413d2c:	c246                	sw	a7,4(sp)
20413d2e:	19f050ef          	jal	ra,204196cc <_localeconv_r>
20413d32:	4148                	lw	a0,4(a0)
20413d34:	c8aa                	sw	a0,80(sp)
20413d36:	af7ff0ef          	jal	ra,2041382c <strlen>
20413d3a:	c2aa                	sw	a0,68(sp)
20413d3c:	854a                	mv	a0,s2
20413d3e:	18f050ef          	jal	ra,204196cc <_localeconv_r>
20413d42:	4508                	lw	a0,8(a0)
20413d44:	4616                	lw	a2,68(sp)
20413d46:	4892                	lw	a7,4(sp)
20413d48:	d42a                	sw	a0,40(sp)
20413d4a:	d23d                	beqz	a2,20413cb0 <_svfprintf_r+0x10e>
20413d4c:	d135                	beqz	a0,20413cb0 <_svfprintf_r+0x10e>
20413d4e:	00054783          	lbu	a5,0(a0)
20413d52:	dfb9                	beqz	a5,20413cb0 <_svfprintf_r+0x10e>
20413d54:	40046413          	ori	s0,s0,1024
20413d58:	bfa1                	j	20413cb0 <_svfprintf_r+0x10e>
20413d5a:	0b714783          	lbu	a5,183(sp)
20413d5e:	fba9                	bnez	a5,20413cb0 <_svfprintf_r+0x10e>
20413d60:	02000793          	li	a5,32
20413d64:	0af10ba3          	sb	a5,183(sp)
20413d68:	b7a1                	j	20413cb0 <_svfprintf_r+0x10e>
20413d6a:	00146413          	ori	s0,s0,1
20413d6e:	b789                	j	20413cb0 <_svfprintf_r+0x10e>
20413d70:	000aa683          	lw	a3,0(s5)
20413d74:	0a91                	addi	s5,s5,4
20413d76:	c0b6                	sw	a3,64(sp)
20413d78:	f206dce3          	bgez	a3,20413cb0 <_svfprintf_r+0x10e>
20413d7c:	40d006b3          	neg	a3,a3
20413d80:	c0b6                	sw	a3,64(sp)
20413d82:	00446413          	ori	s0,s0,4
20413d86:	b72d                	j	20413cb0 <_svfprintf_r+0x10e>
20413d88:	02b00793          	li	a5,43
20413d8c:	bfe1                	j	20413d64 <_svfprintf_r+0x1c2>
20413d8e:	55c2                	lw	a1,48(sp)
20413d90:	0005cd03          	lbu	s10,0(a1)
20413d94:	00158793          	addi	a5,a1,1
20413d98:	037d1963          	bne	s10,s7,20413dca <_svfprintf_r+0x228>
20413d9c:	000aab03          	lw	s6,0(s5)
20413da0:	004a8713          	addi	a4,s5,4
20413da4:	000b5363          	bgez	s6,20413daa <_svfprintf_r+0x208>
20413da8:	5b7d                	li	s6,-1
20413daa:	8aba                	mv	s5,a4
20413dac:	d83e                	sw	a5,48(sp)
20413dae:	b709                	j	20413cb0 <_svfprintf_r+0x10e>
20413db0:	038b0333          	mul	t1,s6,s8
20413db4:	0785                	addi	a5,a5,1
20413db6:	fff7cd03          	lbu	s10,-1(a5)
20413dba:	00d30b33          	add	s6,t1,a3
20413dbe:	fd0d0693          	addi	a3,s10,-48
20413dc2:	fed777e3          	bleu	a3,a4,20413db0 <_svfprintf_r+0x20e>
20413dc6:	d83e                	sw	a5,48(sp)
20413dc8:	bde5                	j	20413cc0 <_svfprintf_r+0x11e>
20413dca:	4b01                	li	s6,0
20413dcc:	bfcd                	j	20413dbe <_svfprintf_r+0x21c>
20413dce:	08046413          	ori	s0,s0,128
20413dd2:	bdf9                	j	20413cb0 <_svfprintf_r+0x10e>
20413dd4:	57c2                	lw	a5,48(sp)
20413dd6:	c082                	sw	zero,64(sp)
20413dd8:	4586                	lw	a1,64(sp)
20413dda:	fd0d0d13          	addi	s10,s10,-48
20413dde:	0785                	addi	a5,a5,1
20413de0:	038586b3          	mul	a3,a1,s8
20413de4:	9d36                	add	s10,s10,a3
20413de6:	c0ea                	sw	s10,64(sp)
20413de8:	fff7cd03          	lbu	s10,-1(a5)
20413dec:	fd0d0693          	addi	a3,s10,-48
20413df0:	fed774e3          	bleu	a3,a4,20413dd8 <_svfprintf_r+0x236>
20413df4:	bfc9                	j	20413dc6 <_svfprintf_r+0x224>
20413df6:	00846413          	ori	s0,s0,8
20413dfa:	bd5d                	j	20413cb0 <_svfprintf_r+0x10e>
20413dfc:	5642                	lw	a2,48(sp)
20413dfe:	06800793          	li	a5,104
20413e02:	00064703          	lbu	a4,0(a2)
20413e06:	00f71763          	bne	a4,a5,20413e14 <_svfprintf_r+0x272>
20413e0a:	0605                	addi	a2,a2,1
20413e0c:	d832                	sw	a2,48(sp)
20413e0e:	20046413          	ori	s0,s0,512
20413e12:	bd79                	j	20413cb0 <_svfprintf_r+0x10e>
20413e14:	04046413          	ori	s0,s0,64
20413e18:	bd61                	j	20413cb0 <_svfprintf_r+0x10e>
20413e1a:	56c2                	lw	a3,48(sp)
20413e1c:	06c00793          	li	a5,108
20413e20:	0006c703          	lbu	a4,0(a3)
20413e24:	00f71763          	bne	a4,a5,20413e32 <_svfprintf_r+0x290>
20413e28:	0685                	addi	a3,a3,1
20413e2a:	d836                	sw	a3,48(sp)
20413e2c:	02046413          	ori	s0,s0,32
20413e30:	b541                	j	20413cb0 <_svfprintf_r+0x10e>
20413e32:	01046413          	ori	s0,s0,16
20413e36:	bdad                	j	20413cb0 <_svfprintf_r+0x10e>
20413e38:	000aa783          	lw	a5,0(s5)
20413e3c:	004a8713          	addi	a4,s5,4
20413e40:	d63a                	sw	a4,44(sp)
20413e42:	12f10e23          	sb	a5,316(sp)
20413e46:	0a010ba3          	sb	zero,183(sp)
20413e4a:	d202                	sw	zero,36(sp)
20413e4c:	4b05                	li	s6,1
20413e4e:	4a81                	li	s5,0
20413e50:	4c01                	li	s8,0
20413e52:	4b81                	li	s7,0
20413e54:	4c81                	li	s9,0
20413e56:	1a64                	addi	s1,sp,316
20413e58:	0610006f          	j	204146b8 <_svfprintf_r+0xb16>
20413e5c:	01046413          	ori	s0,s0,16
20413e60:	02047793          	andi	a5,s0,32
20413e64:	cba9                	beqz	a5,20413eb6 <_svfprintf_r+0x314>
20413e66:	0a9d                	addi	s5,s5,7
20413e68:	ff8afa93          	andi	s5,s5,-8
20413e6c:	000aac03          	lw	s8,0(s5)
20413e70:	004aac83          	lw	s9,4(s5)
20413e74:	008a8793          	addi	a5,s5,8
20413e78:	d63e                	sw	a5,44(sp)
20413e7a:	000cde63          	bgez	s9,20413e96 <_svfprintf_r+0x2f4>
20413e7e:	41800c33          	neg	s8,s8
20413e82:	018037b3          	snez	a5,s8
20413e86:	41900cb3          	neg	s9,s9
20413e8a:	40fc8cb3          	sub	s9,s9,a5
20413e8e:	02d00793          	li	a5,45
20413e92:	0af10ba3          	sb	a5,183(sp)
20413e96:	57fd                	li	a5,-1
20413e98:	26fb16e3          	bne	s6,a5,20414904 <_svfprintf_r+0xd62>
20413e9c:	2c0c97e3          	bnez	s9,2041496a <_svfprintf_r+0xdc8>
20413ea0:	47a5                	li	a5,9
20413ea2:	2d87e4e3          	bltu	a5,s8,2041496a <_svfprintf_r+0xdc8>
20413ea6:	030c0c13          	addi	s8,s8,48
20413eaa:	19810fa3          	sb	s8,415(sp)
20413eae:	19f10493          	addi	s1,sp,415
20413eb2:	2a30006f          	j	20414954 <_svfprintf_r+0xdb2>
20413eb6:	004a8593          	addi	a1,s5,4
20413eba:	d62e                	sw	a1,44(sp)
20413ebc:	01047793          	andi	a5,s0,16
20413ec0:	c791                	beqz	a5,20413ecc <_svfprintf_r+0x32a>
20413ec2:	000aac03          	lw	s8,0(s5)
20413ec6:	41fc5c93          	srai	s9,s8,0x1f
20413eca:	bf45                	j	20413e7a <_svfprintf_r+0x2d8>
20413ecc:	04047793          	andi	a5,s0,64
20413ed0:	000aac03          	lw	s8,0(s5)
20413ed4:	c789                	beqz	a5,20413ede <_svfprintf_r+0x33c>
20413ed6:	0c42                	slli	s8,s8,0x10
20413ed8:	410c5c13          	srai	s8,s8,0x10
20413edc:	b7ed                	j	20413ec6 <_svfprintf_r+0x324>
20413ede:	20047793          	andi	a5,s0,512
20413ee2:	d3f5                	beqz	a5,20413ec6 <_svfprintf_r+0x324>
20413ee4:	0c62                	slli	s8,s8,0x18
20413ee6:	418c5c13          	srai	s8,s8,0x18
20413eea:	bff1                	j	20413ec6 <_svfprintf_r+0x324>
20413eec:	00847793          	andi	a5,s0,8
20413ef0:	cfad                	beqz	a5,20413f6a <_svfprintf_r+0x3c8>
20413ef2:	000aa783          	lw	a5,0(s5)
20413ef6:	004a8613          	addi	a2,s5,4
20413efa:	d632                	sw	a2,44(sp)
20413efc:	43d4                	lw	a3,4(a5)
20413efe:	4390                	lw	a2,0(a5)
20413f00:	4798                	lw	a4,8(a5)
20413f02:	47dc                	lw	a5,12(a5)
20413f04:	d1b2                	sw	a2,224(sp)
20413f06:	d3b6                	sw	a3,228(sp)
20413f08:	d5ba                	sw	a4,232(sp)
20413f0a:	d7be                	sw	a5,236(sp)
20413f0c:	1188                	addi	a0,sp,224
20413f0e:	c246                	sw	a7,4(sp)
20413f10:	778050ef          	jal	ra,20419688 <_ldcheck>
20413f14:	df2a                	sw	a0,188(sp)
20413f16:	4789                	li	a5,2
20413f18:	4892                	lw	a7,4(sp)
20413f1a:	08f51563          	bne	a0,a5,20413fa4 <_svfprintf_r+0x402>
20413f1e:	578e                	lw	a5,224(sp)
20413f20:	090c                	addi	a1,sp,144
20413f22:	1108                	addi	a0,sp,160
20413f24:	d13e                	sw	a5,160(sp)
20413f26:	579e                	lw	a5,228(sp)
20413f28:	c902                	sw	zero,144(sp)
20413f2a:	cb02                	sw	zero,148(sp)
20413f2c:	d33e                	sw	a5,164(sp)
20413f2e:	57ae                	lw	a5,232(sp)
20413f30:	cd02                	sw	zero,152(sp)
20413f32:	cf02                	sw	zero,156(sp)
20413f34:	d53e                	sw	a5,168(sp)
20413f36:	57be                	lw	a5,236(sp)
20413f38:	d73e                	sw	a5,172(sp)
20413f3a:	3cf090ef          	jal	ra,2041db08 <__letf2>
20413f3e:	4892                	lw	a7,4(sp)
20413f40:	00055663          	bgez	a0,20413f4c <_svfprintf_r+0x3aa>
20413f44:	02d00793          	li	a5,45
20413f48:	0af10ba3          	sb	a5,183(sp)
20413f4c:	04700793          	li	a5,71
20413f50:	05a7c563          	blt	a5,s10,20413f9a <_svfprintf_r+0x3f8>
20413f54:	204224b7          	lui	s1,0x20422
20413f58:	d0048493          	addi	s1,s1,-768 # 20421d00 <zeroes.4369+0x40>
20413f5c:	f7f47413          	andi	s0,s0,-129
20413f60:	d202                	sw	zero,36(sp)
20413f62:	4b0d                	li	s6,3
20413f64:	4a81                	li	s5,0
20413f66:	1f90006f          	j	2041495e <_svfprintf_r+0xdbc>
20413f6a:	0a9d                	addi	s5,s5,7
20413f6c:	ff8afa93          	andi	s5,s5,-8
20413f70:	000aa583          	lw	a1,0(s5)
20413f74:	004aa603          	lw	a2,4(s5)
20413f78:	008a8693          	addi	a3,s5,8
20413f7c:	1108                	addi	a0,sp,160
20413f7e:	c246                	sw	a7,4(sp)
20413f80:	d636                	sw	a3,44(sp)
20413f82:	0f50b0ef          	jal	ra,2041f876 <__extenddftf2>
20413f86:	578a                	lw	a5,160(sp)
20413f88:	4892                	lw	a7,4(sp)
20413f8a:	d1be                	sw	a5,224(sp)
20413f8c:	579a                	lw	a5,164(sp)
20413f8e:	d3be                	sw	a5,228(sp)
20413f90:	57aa                	lw	a5,168(sp)
20413f92:	d5be                	sw	a5,232(sp)
20413f94:	57ba                	lw	a5,172(sp)
20413f96:	d7be                	sw	a5,236(sp)
20413f98:	bf95                	j	20413f0c <_svfprintf_r+0x36a>
20413f9a:	204224b7          	lui	s1,0x20422
20413f9e:	d0448493          	addi	s1,s1,-764 # 20421d04 <zeroes.4369+0x44>
20413fa2:	bf6d                	j	20413f5c <_svfprintf_r+0x3ba>
20413fa4:	4785                	li	a5,1
20413fa6:	02f51063          	bne	a0,a5,20413fc6 <_svfprintf_r+0x424>
20413faa:	04700793          	li	a5,71
20413fae:	01a7c763          	blt	a5,s10,20413fbc <_svfprintf_r+0x41a>
20413fb2:	204224b7          	lui	s1,0x20422
20413fb6:	d0848493          	addi	s1,s1,-760 # 20421d08 <zeroes.4369+0x48>
20413fba:	b74d                	j	20413f5c <_svfprintf_r+0x3ba>
20413fbc:	204224b7          	lui	s1,0x20422
20413fc0:	d0c48493          	addi	s1,s1,-756 # 20421d0c <zeroes.4369+0x4c>
20413fc4:	bf61                	j	20413f5c <_svfprintf_r+0x3ba>
20413fc6:	fdfd7b93          	andi	s7,s10,-33
20413fca:	04100793          	li	a5,65
20413fce:	08fb9963          	bne	s7,a5,20414060 <_svfprintf_r+0x4be>
20413fd2:	03000793          	li	a5,48
20413fd6:	0af10c23          	sb	a5,184(sp)
20413fda:	06100713          	li	a4,97
20413fde:	05800793          	li	a5,88
20413fe2:	00ed1463          	bne	s10,a4,20413fea <_svfprintf_r+0x448>
20413fe6:	07800793          	li	a5,120
20413fea:	0af10ca3          	sb	a5,185(sp)
20413fee:	06300793          	li	a5,99
20413ff2:	00246413          	ori	s0,s0,2
20413ff6:	3967d563          	ble	s6,a5,20414380 <_svfprintf_r+0x7de>
20413ffa:	001b0593          	addi	a1,s6,1
20413ffe:	854a                	mv	a0,s2
20414000:	c246                	sw	a7,4(sp)
20414002:	7fa050ef          	jal	ra,204197fc <_malloc_r>
20414006:	84aa                	mv	s1,a0
20414008:	4892                	lw	a7,4(sp)
2041400a:	36051e63          	bnez	a0,20414386 <_svfprintf_r+0x7e4>
2041400e:	00c9d783          	lhu	a5,12(s3)
20414012:	0407e793          	ori	a5,a5,64
20414016:	00f99623          	sh	a5,12(s3)
2041401a:	00c9d783          	lhu	a5,12(s3)
2041401e:	0407f793          	andi	a5,a5,64
20414022:	be079fe3          	bnez	a5,20413c20 <_svfprintf_r+0x7e>
20414026:	1dc12083          	lw	ra,476(sp)
2041402a:	1d812403          	lw	s0,472(sp)
2041402e:	5572                	lw	a0,60(sp)
20414030:	1d412483          	lw	s1,468(sp)
20414034:	1d012903          	lw	s2,464(sp)
20414038:	1cc12983          	lw	s3,460(sp)
2041403c:	1c812a03          	lw	s4,456(sp)
20414040:	1c412a83          	lw	s5,452(sp)
20414044:	1c012b03          	lw	s6,448(sp)
20414048:	1bc12b83          	lw	s7,444(sp)
2041404c:	1b812c03          	lw	s8,440(sp)
20414050:	1b412c83          	lw	s9,436(sp)
20414054:	1b012d03          	lw	s10,432(sp)
20414058:	1ac12d83          	lw	s11,428(sp)
2041405c:	613d                	addi	sp,sp,480
2041405e:	8082                	ret
20414060:	57fd                	li	a5,-1
20414062:	32fb0463          	beq	s6,a5,2041438a <_svfprintf_r+0x7e8>
20414066:	04700793          	li	a5,71
2041406a:	d202                	sw	zero,36(sp)
2041406c:	00fb9463          	bne	s7,a5,20414074 <_svfprintf_r+0x4d2>
20414070:	320b0063          	beqz	s6,20414390 <_svfprintf_r+0x7ee>
20414074:	5abe                	lw	s5,236(sp)
20414076:	10046713          	ori	a4,s0,256
2041407a:	da3a                	sw	a4,52(sp)
2041407c:	c682                	sw	zero,76(sp)
2041407e:	5e0e                	lw	t3,224(sp)
20414080:	5d9e                	lw	s11,228(sp)
20414082:	5cae                	lw	s9,232(sp)
20414084:	000ad963          	bgez	s5,20414096 <_svfprintf_r+0x4f4>
20414088:	800007b7          	lui	a5,0x80000
2041408c:	0157cab3          	xor	s5,a5,s5
20414090:	02d00793          	li	a5,45
20414094:	c6be                	sw	a5,76(sp)
20414096:	04100793          	li	a5,65
2041409a:	32fb9863          	bne	s7,a5,204143ca <_svfprintf_r+0x828>
2041409e:	1108                	addi	a0,sp,160
204140a0:	c246                	sw	a7,4(sp)
204140a2:	d172                	sw	t3,160(sp)
204140a4:	d36e                	sw	s11,164(sp)
204140a6:	d566                	sw	s9,168(sp)
204140a8:	d756                	sw	s5,172(sp)
204140aa:	1370b0ef          	jal	ra,2041f9e0 <__trunctfdf2>
204140ae:	1970                	addi	a2,sp,188
204140b0:	14d060ef          	jal	ra,2041a9fc <frexp>
204140b4:	862e                	mv	a2,a1
204140b6:	85aa                	mv	a1,a0
204140b8:	1108                	addi	a0,sp,160
204140ba:	7bc0b0ef          	jal	ra,2041f876 <__extenddftf2>
204140be:	558a                	lw	a1,160(sp)
204140c0:	204227b7          	lui	a5,0x20422
204140c4:	cd078793          	addi	a5,a5,-816 # 20421cd0 <zeroes.4369+0x10>
204140c8:	c12e                	sw	a1,128(sp)
204140ca:	559a                	lw	a1,164(sp)
204140cc:	4390                	lw	a2,0(a5)
204140ce:	43d4                	lw	a3,4(a5)
204140d0:	c32e                	sw	a1,132(sp)
204140d2:	55aa                	lw	a1,168(sp)
204140d4:	4798                	lw	a4,8(a5)
204140d6:	47dc                	lw	a5,12(a5)
204140d8:	c52e                	sw	a1,136(sp)
204140da:	55ba                	lw	a1,172(sp)
204140dc:	d8b2                	sw	a2,112(sp)
204140de:	0908                	addi	a0,sp,144
204140e0:	c72e                	sw	a1,140(sp)
204140e2:	1890                	addi	a2,sp,112
204140e4:	010c                	addi	a1,sp,128
204140e6:	dab6                	sw	a3,116(sp)
204140e8:	dcba                	sw	a4,120(sp)
204140ea:	debe                	sw	a5,124(sp)
204140ec:	32f090ef          	jal	ra,2041dc1a <__multf3>
204140f0:	43ca                	lw	t2,144(sp)
204140f2:	485a                	lw	a6,148(sp)
204140f4:	4dea                	lw	s11,152(sp)
204140f6:	4cfa                	lw	s9,156(sp)
204140f8:	090c                	addi	a1,sp,144
204140fa:	1108                	addi	a0,sp,160
204140fc:	d11e                	sw	t2,160(sp)
204140fe:	d342                	sw	a6,164(sp)
20414100:	d01e                	sw	t2,32(sp)
20414102:	cc42                	sw	a6,24(sp)
20414104:	d56e                	sw	s11,168(sp)
20414106:	d766                	sw	s9,172(sp)
20414108:	c902                	sw	zero,144(sp)
2041410a:	cb02                	sw	zero,148(sp)
2041410c:	cd02                	sw	zero,152(sp)
2041410e:	cf02                	sw	zero,156(sp)
20414110:	041090ef          	jal	ra,2041d950 <__eqtf2>
20414114:	5382                	lw	t2,32(sp)
20414116:	4862                	lw	a6,24(sp)
20414118:	4892                	lw	a7,4(sp)
2041411a:	e119                	bnez	a0,20414120 <_svfprintf_r+0x57e>
2041411c:	4785                	li	a5,1
2041411e:	df3e                	sw	a5,188(sp)
20414120:	06100793          	li	a5,97
20414124:	26fd1963          	bne	s10,a5,20414396 <_svfprintf_r+0x7f4>
20414128:	20422a37          	lui	s4,0x20422
2041412c:	d10a0a13          	addi	s4,s4,-752 # 20421d10 <zeroes.4369+0x50>
20414130:	20422737          	lui	a4,0x20422
20414134:	ce070713          	addi	a4,a4,-800 # 20421ce0 <zeroes.4369+0x20>
20414138:	4314                	lw	a3,0(a4)
2041413a:	435c                	lw	a5,4(a4)
2041413c:	fffb0e13          	addi	t3,s6,-1
20414140:	d0b6                	sw	a3,96(sp)
20414142:	4714                	lw	a3,8(a4)
20414144:	4758                	lw	a4,12(a4)
20414146:	8c26                	mv	s8,s1
20414148:	d2be                	sw	a5,100(sp)
2041414a:	d4b6                	sw	a3,104(sp)
2041414c:	d6ba                	sw	a4,108(sp)
2041414e:	5706                	lw	a4,96(sp)
20414150:	5796                	lw	a5,100(sp)
20414152:	56a6                	lw	a3,104(sp)
20414154:	c13a                	sw	a4,128(sp)
20414156:	5736                	lw	a4,108(sp)
20414158:	090c                	addi	a1,sp,144
2041415a:	0110                	addi	a2,sp,128
2041415c:	1108                	addi	a0,sp,160
2041415e:	c246                	sw	a7,4(sp)
20414160:	c472                	sw	t3,8(sp)
20414162:	c91e                	sw	t2,144(sp)
20414164:	cb42                	sw	a6,148(sp)
20414166:	c33e                	sw	a5,132(sp)
20414168:	c73a                	sw	a4,140(sp)
2041416a:	cd6e                	sw	s11,152(sp)
2041416c:	cf66                	sw	s9,156(sp)
2041416e:	c536                	sw	a3,136(sp)
20414170:	2ab090ef          	jal	ra,2041dc1a <__multf3>
20414174:	560a                	lw	a2,160(sp)
20414176:	569a                	lw	a3,164(sp)
20414178:	1108                	addi	a0,sp,160
2041417a:	d032                	sw	a2,32(sp)
2041417c:	cc36                	sw	a3,24(sp)
2041417e:	5140b0ef          	jal	ra,2041f692 <__fixtfsi>
20414182:	85aa                	mv	a1,a0
20414184:	8aaa                	mv	s5,a0
20414186:	1108                	addi	a0,sp,160
20414188:	5daa                	lw	s11,168(sp)
2041418a:	5cba                	lw	s9,172(sp)
2041418c:	5fc0b0ef          	jal	ra,2041f788 <__floatsitf>
20414190:	570a                	lw	a4,160(sp)
20414192:	5602                	lw	a2,32(sp)
20414194:	46e2                	lw	a3,24(sp)
20414196:	d8ba                	sw	a4,112(sp)
20414198:	571a                	lw	a4,164(sp)
2041419a:	c132                	sw	a2,128(sp)
2041419c:	010c                	addi	a1,sp,128
2041419e:	daba                	sw	a4,116(sp)
204141a0:	572a                	lw	a4,168(sp)
204141a2:	1890                	addi	a2,sp,112
204141a4:	0908                	addi	a0,sp,144
204141a6:	dcba                	sw	a4,120(sp)
204141a8:	573a                	lw	a4,172(sp)
204141aa:	c56e                	sw	s11,136(sp)
204141ac:	c766                	sw	s9,140(sp)
204141ae:	deba                	sw	a4,124(sp)
204141b0:	c336                	sw	a3,132(sp)
204141b2:	63e0a0ef          	jal	ra,2041e7f0 <__subtf3>
204141b6:	015a0733          	add	a4,s4,s5
204141ba:	00074703          	lbu	a4,0(a4)
204141be:	0c05                	addi	s8,s8,1
204141c0:	4f6a                	lw	t5,152(sp)
204141c2:	4efa                	lw	t4,156(sp)
204141c4:	42ca                	lw	t0,144(sp)
204141c6:	4fda                	lw	t6,148(sp)
204141c8:	feec0fa3          	sb	a4,-1(s8)
204141cc:	4e22                	lw	t3,8(sp)
204141ce:	577d                	li	a4,-1
204141d0:	8dfa                	mv	s11,t5
204141d2:	cef2                	sw	t3,92(sp)
204141d4:	8cf6                	mv	s9,t4
204141d6:	4892                	lw	a7,4(sp)
204141d8:	02ee0f63          	beq	t3,a4,20414216 <_svfprintf_r+0x674>
204141dc:	1e7d                	addi	t3,t3,-1
204141de:	090c                	addi	a1,sp,144
204141e0:	1108                	addi	a0,sp,160
204141e2:	d116                	sw	t0,160(sp)
204141e4:	d37e                	sw	t6,164(sp)
204141e6:	d57a                	sw	t5,168(sp)
204141e8:	d776                	sw	t4,172(sp)
204141ea:	ce16                	sw	t0,28(sp)
204141ec:	d016                	sw	t0,32(sp)
204141ee:	cc7e                	sw	t6,24(sp)
204141f0:	c472                	sw	t3,8(sp)
204141f2:	c676                	sw	t4,12(sp)
204141f4:	c87a                	sw	t5,16(sp)
204141f6:	ca7e                	sw	t6,20(sp)
204141f8:	c902                	sw	zero,144(sp)
204141fa:	cb02                	sw	zero,148(sp)
204141fc:	cd02                	sw	zero,152(sp)
204141fe:	cf02                	sw	zero,156(sp)
20414200:	750090ef          	jal	ra,2041d950 <__eqtf2>
20414204:	42f2                	lw	t0,28(sp)
20414206:	5382                	lw	t2,32(sp)
20414208:	4862                	lw	a6,24(sp)
2041420a:	4892                	lw	a7,4(sp)
2041420c:	4e22                	lw	t3,8(sp)
2041420e:	4eb2                	lw	t4,12(sp)
20414210:	4f42                	lw	t5,16(sp)
20414212:	4fd2                	lw	t6,20(sp)
20414214:	fd0d                	bnez	a0,2041414e <_svfprintf_r+0x5ac>
20414216:	20422737          	lui	a4,0x20422
2041421a:	cf070713          	addi	a4,a4,-784 # 20421cf0 <zeroes.4369+0x30>
2041421e:	4310                	lw	a2,0(a4)
20414220:	4354                	lw	a3,4(a4)
20414222:	00872d83          	lw	s11,8(a4)
20414226:	00c72c83          	lw	s9,12(a4)
2041422a:	090c                	addi	a1,sp,144
2041422c:	1108                	addi	a0,sp,160
2041422e:	d116                	sw	t0,160(sp)
20414230:	d37e                	sw	t6,164(sp)
20414232:	d57a                	sw	t5,168(sp)
20414234:	d776                	sw	t4,172(sp)
20414236:	c932                	sw	a2,144(sp)
20414238:	cb36                	sw	a3,148(sp)
2041423a:	ce16                	sw	t0,28(sp)
2041423c:	d032                	sw	a2,32(sp)
2041423e:	cc36                	sw	a3,24(sp)
20414240:	c246                	sw	a7,4(sp)
20414242:	c676                	sw	t4,12(sp)
20414244:	c87a                	sw	t5,16(sp)
20414246:	ca7e                	sw	t6,20(sp)
20414248:	cd6e                	sw	s11,152(sp)
2041424a:	cf66                	sw	s9,156(sp)
2041424c:	7aa090ef          	jal	ra,2041d9f6 <__getf2>
20414250:	42f2                	lw	t0,28(sp)
20414252:	5602                	lw	a2,32(sp)
20414254:	46e2                	lw	a3,24(sp)
20414256:	4892                	lw	a7,4(sp)
20414258:	4eb2                	lw	t4,12(sp)
2041425a:	4f42                	lw	t5,16(sp)
2041425c:	4fd2                	lw	t6,20(sp)
2041425e:	02a04563          	bgtz	a0,20414288 <_svfprintf_r+0x6e6>
20414262:	090c                	addi	a1,sp,144
20414264:	1108                	addi	a0,sp,160
20414266:	d116                	sw	t0,160(sp)
20414268:	d37e                	sw	t6,164(sp)
2041426a:	d57a                	sw	t5,168(sp)
2041426c:	d776                	sw	t4,172(sp)
2041426e:	c932                	sw	a2,144(sp)
20414270:	cb36                	sw	a3,148(sp)
20414272:	cd6e                	sw	s11,152(sp)
20414274:	cf66                	sw	s9,156(sp)
20414276:	6da090ef          	jal	ra,2041d950 <__eqtf2>
2041427a:	4892                	lw	a7,4(sp)
2041427c:	14051163          	bnez	a0,204143be <_svfprintf_r+0x81c>
20414280:	001afa93          	andi	s5,s5,1
20414284:	120a8d63          	beqz	s5,204143be <_svfprintf_r+0x81c>
20414288:	00fa4603          	lbu	a2,15(s4)
2041428c:	c7e2                	sw	s8,204(sp)
2041428e:	03000593          	li	a1,48
20414292:	46be                	lw	a3,204(sp)
20414294:	fff68713          	addi	a4,a3,-1
20414298:	c7ba                	sw	a4,204(sp)
2041429a:	fff6c703          	lbu	a4,-1(a3)
2041429e:	10c70163          	beq	a4,a2,204143a0 <_svfprintf_r+0x7fe>
204142a2:	03900613          	li	a2,57
204142a6:	10c71063          	bne	a4,a2,204143a6 <_svfprintf_r+0x804>
204142aa:	00aa4703          	lbu	a4,10(s4)
204142ae:	fee68fa3          	sb	a4,-1(a3)
204142b2:	8a62                	mv	s4,s8
204142b4:	04700713          	li	a4,71
204142b8:	409a0a33          	sub	s4,s4,s1
204142bc:	5cfa                	lw	s9,188(sp)
204142be:	1ceb9e63          	bne	s7,a4,2041449a <_svfprintf_r+0x8f8>
204142c2:	5775                	li	a4,-3
204142c4:	00ecc463          	blt	s9,a4,204142cc <_svfprintf_r+0x72a>
204142c8:	239b5d63          	ble	s9,s6,20414502 <_svfprintf_r+0x960>
204142cc:	1d79                	addi	s10,s10,-2
204142ce:	fffc8693          	addi	a3,s9,-1
204142d2:	df36                	sw	a3,188(sp)
204142d4:	fdfd7613          	andi	a2,s10,-33
204142d8:	04100513          	li	a0,65
204142dc:	0ffd7713          	andi	a4,s10,255
204142e0:	4581                	li	a1,0
204142e2:	00a61663          	bne	a2,a0,204142ee <_svfprintf_r+0x74c>
204142e6:	073d                	addi	a4,a4,15
204142e8:	0ff77713          	andi	a4,a4,255
204142ec:	4585                	li	a1,1
204142ee:	0ce10223          	sb	a4,196(sp)
204142f2:	02b00793          	li	a5,43
204142f6:	0006d763          	bgez	a3,20414304 <_svfprintf_r+0x762>
204142fa:	4685                	li	a3,1
204142fc:	419686b3          	sub	a3,a3,s9
20414300:	02d00793          	li	a5,45
20414304:	0cf102a3          	sb	a5,197(sp)
20414308:	47a5                	li	a5,9
2041430a:	1cd7d363          	ble	a3,a5,204144d0 <_svfprintf_r+0x92e>
2041430e:	0d310713          	addi	a4,sp,211
20414312:	853a                	mv	a0,a4
20414314:	45a9                	li	a1,10
20414316:	4825                	li	a6,9
20414318:	02b6e7b3          	rem	a5,a3,a1
2041431c:	fff70613          	addi	a2,a4,-1
20414320:	02b6c6b3          	div	a3,a3,a1
20414324:	03078793          	addi	a5,a5,48
20414328:	fef70fa3          	sb	a5,-1(a4)
2041432c:	18d84963          	blt	a6,a3,204144be <_svfprintf_r+0x91c>
20414330:	03068793          	addi	a5,a3,48
20414334:	fef60fa3          	sb	a5,-1(a2)
20414338:	1779                	addi	a4,a4,-2
2041433a:	0c610613          	addi	a2,sp,198
2041433e:	18a76263          	bltu	a4,a0,204144c2 <_svfprintf_r+0x920>
20414342:	01dc                	addi	a5,sp,196
20414344:	40f607b3          	sub	a5,a2,a5
20414348:	cabe                	sw	a5,84(sp)
2041434a:	01478b33          	add	s6,a5,s4
2041434e:	4785                	li	a5,1
20414350:	0147c563          	blt	a5,s4,2041435a <_svfprintf_r+0x7b8>
20414354:	00147793          	andi	a5,s0,1
20414358:	c399                	beqz	a5,2041435e <_svfprintf_r+0x7bc>
2041435a:	55e2                	lw	a1,56(sp)
2041435c:	9b2e                	add	s6,s6,a1
2041435e:	bff47413          	andi	s0,s0,-1025
20414362:	10046413          	ori	s0,s0,256
20414366:	da22                	sw	s0,52(sp)
20414368:	4c01                	li	s8,0
2041436a:	4b81                	li	s7,0
2041436c:	4c81                	li	s9,0
2041436e:	4736                	lw	a4,76(sp)
20414370:	c709                	beqz	a4,2041437a <_svfprintf_r+0x7d8>
20414372:	02d00713          	li	a4,45
20414376:	0ae10ba3          	sb	a4,183(sp)
2041437a:	5452                	lw	s0,52(sp)
2041437c:	4a81                	li	s5,0
2041437e:	ae2d                	j	204146b8 <_svfprintf_r+0xb16>
20414380:	d202                	sw	zero,36(sp)
20414382:	1a64                	addi	s1,sp,316
20414384:	b9c5                	j	20414074 <_svfprintf_r+0x4d2>
20414386:	d22a                	sw	a0,36(sp)
20414388:	b1f5                	j	20414074 <_svfprintf_r+0x4d2>
2041438a:	d202                	sw	zero,36(sp)
2041438c:	4b19                	li	s6,6
2041438e:	b1dd                	j	20414074 <_svfprintf_r+0x4d2>
20414390:	d25a                	sw	s6,36(sp)
20414392:	4b05                	li	s6,1
20414394:	b1c5                	j	20414074 <_svfprintf_r+0x4d2>
20414396:	20422a37          	lui	s4,0x20422
2041439a:	d24a0a13          	addi	s4,s4,-732 # 20421d24 <zeroes.4369+0x64>
2041439e:	bb49                	j	20414130 <_svfprintf_r+0x58e>
204143a0:	feb68fa3          	sb	a1,-1(a3)
204143a4:	b5fd                	j	20414292 <_svfprintf_r+0x6f0>
204143a6:	0705                	addi	a4,a4,1
204143a8:	0ff77713          	andi	a4,a4,255
204143ac:	b709                	j	204142ae <_svfprintf_r+0x70c>
204143ae:	0a05                	addi	s4,s4,1
204143b0:	feea0fa3          	sb	a4,-1(s4)
204143b4:	414c07b3          	sub	a5,s8,s4
204143b8:	fe07dbe3          	bgez	a5,204143ae <_svfprintf_r+0x80c>
204143bc:	bde5                	j	204142b4 <_svfprintf_r+0x712>
204143be:	47f6                	lw	a5,92(sp)
204143c0:	8a62                	mv	s4,s8
204143c2:	03000713          	li	a4,48
204143c6:	9c3e                	add	s8,s8,a5
204143c8:	b7f5                	j	204143b4 <_svfprintf_r+0x812>
204143ca:	04600793          	li	a5,70
204143ce:	00fb8b63          	beq	s7,a5,204143e4 <_svfprintf_r+0x842>
204143d2:	04500793          	li	a5,69
204143d6:	001b0c13          	addi	s8,s6,1
204143da:	00fb8363          	beq	s7,a5,204143e0 <_svfprintf_r+0x83e>
204143de:	8c5a                	mv	s8,s6
204143e0:	4609                	li	a2,2
204143e2:	a019                	j	204143e8 <_svfprintf_r+0x846>
204143e4:	8c5a                	mv	s8,s6
204143e6:	460d                	li	a2,3
204143e8:	019c                	addi	a5,sp,192
204143ea:	0cc10813          	addi	a6,sp,204
204143ee:	1978                	addi	a4,sp,188
204143f0:	86e2                	mv	a3,s8
204143f2:	110c                	addi	a1,sp,160
204143f4:	854a                	mv	a0,s2
204143f6:	d172                	sw	t3,160(sp)
204143f8:	c246                	sw	a7,4(sp)
204143fa:	c472                	sw	t3,8(sp)
204143fc:	d36e                	sw	s11,164(sp)
204143fe:	d566                	sw	s9,168(sp)
20414400:	d756                	sw	s5,172(sp)
20414402:	173040ef          	jal	ra,20418d74 <_ldtoa_r>
20414406:	04700793          	li	a5,71
2041440a:	84aa                	mv	s1,a0
2041440c:	4892                	lw	a7,4(sp)
2041440e:	4e22                	lw	t3,8(sp)
20414410:	00fb9563          	bne	s7,a5,2041441a <_svfprintf_r+0x878>
20414414:	00147793          	andi	a5,s0,1
20414418:	c7b5                	beqz	a5,20414484 <_svfprintf_r+0x8e2>
2041441a:	04600793          	li	a5,70
2041441e:	01848a33          	add	s4,s1,s8
20414422:	02fb9f63          	bne	s7,a5,20414460 <_svfprintf_r+0x8be>
20414426:	0004c703          	lbu	a4,0(s1)
2041442a:	03000793          	li	a5,48
2041442e:	02f71763          	bne	a4,a5,2041445c <_svfprintf_r+0x8ba>
20414432:	090c                	addi	a1,sp,144
20414434:	1108                	addi	a0,sp,160
20414436:	d172                	sw	t3,160(sp)
20414438:	c246                	sw	a7,4(sp)
2041443a:	c472                	sw	t3,8(sp)
2041443c:	d36e                	sw	s11,164(sp)
2041443e:	d566                	sw	s9,168(sp)
20414440:	d756                	sw	s5,172(sp)
20414442:	c902                	sw	zero,144(sp)
20414444:	cb02                	sw	zero,148(sp)
20414446:	cd02                	sw	zero,152(sp)
20414448:	cf02                	sw	zero,156(sp)
2041444a:	506090ef          	jal	ra,2041d950 <__eqtf2>
2041444e:	4892                	lw	a7,4(sp)
20414450:	4e22                	lw	t3,8(sp)
20414452:	c509                	beqz	a0,2041445c <_svfprintf_r+0x8ba>
20414454:	4785                	li	a5,1
20414456:	41878c33          	sub	s8,a5,s8
2041445a:	df62                	sw	s8,188(sp)
2041445c:	57fa                	lw	a5,188(sp)
2041445e:	9a3e                	add	s4,s4,a5
20414460:	090c                	addi	a1,sp,144
20414462:	1108                	addi	a0,sp,160
20414464:	c246                	sw	a7,4(sp)
20414466:	d172                	sw	t3,160(sp)
20414468:	d36e                	sw	s11,164(sp)
2041446a:	d566                	sw	s9,168(sp)
2041446c:	d756                	sw	s5,172(sp)
2041446e:	c902                	sw	zero,144(sp)
20414470:	cb02                	sw	zero,148(sp)
20414472:	cd02                	sw	zero,152(sp)
20414474:	cf02                	sw	zero,156(sp)
20414476:	4da090ef          	jal	ra,2041d950 <__eqtf2>
2041447a:	4892                	lw	a7,4(sp)
2041447c:	03000713          	li	a4,48
20414480:	e909                	bnez	a0,20414492 <_svfprintf_r+0x8f0>
20414482:	c7d2                	sw	s4,204(sp)
20414484:	4a3e                	lw	s4,204(sp)
20414486:	b53d                	j	204142b4 <_svfprintf_r+0x712>
20414488:	00178693          	addi	a3,a5,1
2041448c:	c7b6                	sw	a3,204(sp)
2041448e:	00e78023          	sb	a4,0(a5)
20414492:	47be                	lw	a5,204(sp)
20414494:	ff47eae3          	bltu	a5,s4,20414488 <_svfprintf_r+0x8e6>
20414498:	b7f5                	j	20414484 <_svfprintf_r+0x8e2>
2041449a:	04600713          	li	a4,70
2041449e:	e2eb98e3          	bne	s7,a4,204142ce <_svfprintf_r+0x72c>
204144a2:	05905763          	blez	s9,204144f0 <_svfprintf_r+0x94e>
204144a6:	000b1563          	bnez	s6,204144b0 <_svfprintf_r+0x90e>
204144aa:	00147713          	andi	a4,s0,1
204144ae:	cf41                	beqz	a4,20414546 <_svfprintf_r+0x9a4>
204144b0:	5662                	lw	a2,56(sp)
204144b2:	00cc8733          	add	a4,s9,a2
204144b6:	9b3a                	add	s6,s6,a4
204144b8:	06600d13          	li	s10,102
204144bc:	a895                	j	20414530 <_svfprintf_r+0x98e>
204144be:	8732                	mv	a4,a2
204144c0:	bda1                	j	20414318 <_svfprintf_r+0x776>
204144c2:	0705                	addi	a4,a4,1
204144c4:	fff74783          	lbu	a5,-1(a4)
204144c8:	0605                	addi	a2,a2,1
204144ca:	fef60fa3          	sb	a5,-1(a2)
204144ce:	bd85                	j	2041433e <_svfprintf_r+0x79c>
204144d0:	0c610713          	addi	a4,sp,198
204144d4:	e599                	bnez	a1,204144e2 <_svfprintf_r+0x940>
204144d6:	03000793          	li	a5,48
204144da:	0cf10323          	sb	a5,198(sp)
204144de:	0c710713          	addi	a4,sp,199
204144e2:	03068793          	addi	a5,a3,48
204144e6:	00170613          	addi	a2,a4,1
204144ea:	00f70023          	sb	a5,0(a4)
204144ee:	bd91                	j	20414342 <_svfprintf_r+0x7a0>
204144f0:	000b1563          	bnez	s6,204144fa <_svfprintf_r+0x958>
204144f4:	00147713          	andi	a4,s0,1
204144f8:	cb29                	beqz	a4,2041454a <_svfprintf_r+0x9a8>
204144fa:	56e2                	lw	a3,56(sp)
204144fc:	00168713          	addi	a4,a3,1
20414500:	bf5d                	j	204144b6 <_svfprintf_r+0x914>
20414502:	014ccc63          	blt	s9,s4,2041451a <_svfprintf_r+0x978>
20414506:	00147713          	andi	a4,s0,1
2041450a:	8b66                	mv	s6,s9
2041450c:	c701                	beqz	a4,20414514 <_svfprintf_r+0x972>
2041450e:	5762                	lw	a4,56(sp)
20414510:	00ec8b33          	add	s6,s9,a4
20414514:	06700d13          	li	s10,103
20414518:	a821                	j	20414530 <_svfprintf_r+0x98e>
2041451a:	57e2                	lw	a5,56(sp)
2041451c:	06700d13          	li	s10,103
20414520:	00fa0b33          	add	s6,s4,a5
20414524:	01904663          	bgtz	s9,20414530 <_svfprintf_r+0x98e>
20414528:	419b0333          	sub	t1,s6,s9
2041452c:	00130b13          	addi	s6,t1,1
20414530:	40047b93          	andi	s7,s0,1024
20414534:	4c01                	li	s8,0
20414536:	e20b8ce3          	beqz	s7,2041436e <_svfprintf_r+0x7cc>
2041453a:	4b81                	li	s7,0
2041453c:	e39059e3          	blez	s9,2041436e <_svfprintf_r+0x7cc>
20414540:	0ff00693          	li	a3,255
20414544:	a015                	j	20414568 <_svfprintf_r+0x9c6>
20414546:	8b66                	mv	s6,s9
20414548:	bf85                	j	204144b8 <_svfprintf_r+0x916>
2041454a:	06600d13          	li	s10,102
2041454e:	4b05                	li	s6,1
20414550:	b7c5                	j	20414530 <_svfprintf_r+0x98e>
20414552:	03975063          	ble	s9,a4,20414572 <_svfprintf_r+0x9d0>
20414556:	55a2                	lw	a1,40(sp)
20414558:	40ec8cb3          	sub	s9,s9,a4
2041455c:	0015c703          	lbu	a4,1(a1)
20414560:	c305                	beqz	a4,20414580 <_svfprintf_r+0x9de>
20414562:	0585                	addi	a1,a1,1
20414564:	0b85                	addi	s7,s7,1
20414566:	d42e                	sw	a1,40(sp)
20414568:	5622                	lw	a2,40(sp)
2041456a:	00064703          	lbu	a4,0(a2)
2041456e:	fed712e3          	bne	a4,a3,20414552 <_svfprintf_r+0x9b0>
20414572:	4696                	lw	a3,68(sp)
20414574:	018b8733          	add	a4,s7,s8
20414578:	02d70733          	mul	a4,a4,a3
2041457c:	9b3a                	add	s6,s6,a4
2041457e:	bbc5                	j	2041436e <_svfprintf_r+0x7cc>
20414580:	0c05                	addi	s8,s8,1
20414582:	b7dd                	j	20414568 <_svfprintf_r+0x9c6>
20414584:	000aa783          	lw	a5,0(s5)
20414588:	0a91                	addi	s5,s5,4
2041458a:	d656                	sw	s5,44(sp)
2041458c:	02047713          	andi	a4,s0,32
20414590:	cb11                	beqz	a4,204145a4 <_svfprintf_r+0xa02>
20414592:	55f2                	lw	a1,60(sp)
20414594:	41f5d713          	srai	a4,a1,0x1f
20414598:	c38c                	sw	a1,0(a5)
2041459a:	c3d8                	sw	a4,4(a5)
2041459c:	5ab2                	lw	s5,44(sp)
2041459e:	54c2                	lw	s1,48(sp)
204145a0:	ea6ff06f          	j	20413c46 <_svfprintf_r+0xa4>
204145a4:	01047713          	andi	a4,s0,16
204145a8:	c701                	beqz	a4,204145b0 <_svfprintf_r+0xa0e>
204145aa:	5672                	lw	a2,60(sp)
204145ac:	c390                	sw	a2,0(a5)
204145ae:	b7fd                	j	2041459c <_svfprintf_r+0x9fa>
204145b0:	04047713          	andi	a4,s0,64
204145b4:	c709                	beqz	a4,204145be <_svfprintf_r+0xa1c>
204145b6:	5772                	lw	a4,60(sp)
204145b8:	00e79023          	sh	a4,0(a5)
204145bc:	b7c5                	j	2041459c <_svfprintf_r+0x9fa>
204145be:	20047413          	andi	s0,s0,512
204145c2:	c409                	beqz	s0,204145cc <_svfprintf_r+0xa2a>
204145c4:	5772                	lw	a4,60(sp)
204145c6:	00e78023          	sb	a4,0(a5)
204145ca:	bfc9                	j	2041459c <_svfprintf_r+0x9fa>
204145cc:	56f2                	lw	a3,60(sp)
204145ce:	c394                	sw	a3,0(a5)
204145d0:	b7f1                	j	2041459c <_svfprintf_r+0x9fa>
204145d2:	01046413          	ori	s0,s0,16
204145d6:	02047793          	andi	a5,s0,32
204145da:	c3a1                	beqz	a5,2041461a <_svfprintf_r+0xa78>
204145dc:	0a9d                	addi	s5,s5,7
204145de:	ff8afa93          	andi	s5,s5,-8
204145e2:	000aac03          	lw	s8,0(s5)
204145e6:	004aac83          	lw	s9,4(s5)
204145ea:	008a8713          	addi	a4,s5,8
204145ee:	d63a                	sw	a4,44(sp)
204145f0:	bff47413          	andi	s0,s0,-1025
204145f4:	4781                	li	a5,0
204145f6:	0a010ba3          	sb	zero,183(sp)
204145fa:	577d                	li	a4,-1
204145fc:	30eb0763          	beq	s6,a4,2041490a <_svfprintf_r+0xd68>
20414600:	8722                	mv	a4,s0
20414602:	019c66b3          	or	a3,s8,s9
20414606:	f7f47413          	andi	s0,s0,-129
2041460a:	30069063          	bnez	a3,2041490a <_svfprintf_r+0xd68>
2041460e:	400b0663          	beqz	s6,20414a1a <_svfprintf_r+0xe78>
20414612:	4705                	li	a4,1
20414614:	2ee79e63          	bne	a5,a4,20414910 <_svfprintf_r+0xd6e>
20414618:	b079                	j	20413ea6 <_svfprintf_r+0x304>
2041461a:	004a8793          	addi	a5,s5,4
2041461e:	d63e                	sw	a5,44(sp)
20414620:	01047793          	andi	a5,s0,16
20414624:	c781                	beqz	a5,2041462c <_svfprintf_r+0xa8a>
20414626:	000aac03          	lw	s8,0(s5)
2041462a:	a031                	j	20414636 <_svfprintf_r+0xa94>
2041462c:	04047793          	andi	a5,s0,64
20414630:	c789                	beqz	a5,2041463a <_svfprintf_r+0xa98>
20414632:	000adc03          	lhu	s8,0(s5)
20414636:	4c81                	li	s9,0
20414638:	bf65                	j	204145f0 <_svfprintf_r+0xa4e>
2041463a:	20047793          	andi	a5,s0,512
2041463e:	d7e5                	beqz	a5,20414626 <_svfprintf_r+0xa84>
20414640:	000acc03          	lbu	s8,0(s5)
20414644:	bfcd                	j	20414636 <_svfprintf_r+0xa94>
20414646:	77e1                	lui	a5,0xffff8
20414648:	8307c793          	xori	a5,a5,-2000
2041464c:	0af11c23          	sh	a5,184(sp)
20414650:	204227b7          	lui	a5,0x20422
20414654:	d1078793          	addi	a5,a5,-752 # 20421d10 <zeroes.4369+0x50>
20414658:	004a8593          	addi	a1,s5,4
2041465c:	ccbe                	sw	a5,88(sp)
2041465e:	d62e                	sw	a1,44(sp)
20414660:	000aac03          	lw	s8,0(s5)
20414664:	4c81                	li	s9,0
20414666:	00246413          	ori	s0,s0,2
2041466a:	4789                	li	a5,2
2041466c:	07800d13          	li	s10,120
20414670:	b759                	j	204145f6 <_svfprintf_r+0xa54>
20414672:	004a8613          	addi	a2,s5,4
20414676:	d632                	sw	a2,44(sp)
20414678:	0a010ba3          	sb	zero,183(sp)
2041467c:	57fd                	li	a5,-1
2041467e:	000aa483          	lw	s1,0(s5)
20414682:	02fb0063          	beq	s6,a5,204146a2 <_svfprintf_r+0xb00>
20414686:	865a                	mv	a2,s6
20414688:	4581                	li	a1,0
2041468a:	8526                	mv	a0,s1
2041468c:	c246                	sw	a7,4(sp)
2041468e:	606050ef          	jal	ra,20419c94 <memchr>
20414692:	d22a                	sw	a0,36(sp)
20414694:	4892                	lw	a7,4(sp)
20414696:	8c0507e3          	beqz	a0,20413f64 <_svfprintf_r+0x3c2>
2041469a:	40950b33          	sub	s6,a0,s1
2041469e:	d202                	sw	zero,36(sp)
204146a0:	b0d1                	j	20413f64 <_svfprintf_r+0x3c2>
204146a2:	8526                	mv	a0,s1
204146a4:	c246                	sw	a7,4(sp)
204146a6:	986ff0ef          	jal	ra,2041382c <strlen>
204146aa:	4892                	lw	a7,4(sp)
204146ac:	8b2a                	mv	s6,a0
204146ae:	d202                	sw	zero,36(sp)
204146b0:	4a81                	li	s5,0
204146b2:	4c01                	li	s8,0
204146b4:	4b81                	li	s7,0
204146b6:	4c81                	li	s9,0
204146b8:	da56                	sw	s5,52(sp)
204146ba:	016ad363          	ble	s6,s5,204146c0 <_svfprintf_r+0xb1e>
204146be:	da5a                	sw	s6,52(sp)
204146c0:	0b714703          	lbu	a4,183(sp)
204146c4:	c701                	beqz	a4,204146cc <_svfprintf_r+0xb2a>
204146c6:	5752                	lw	a4,52(sp)
204146c8:	0705                	addi	a4,a4,1
204146ca:	da3a                	sw	a4,52(sp)
204146cc:	00247d93          	andi	s11,s0,2
204146d0:	000d8563          	beqz	s11,204146da <_svfprintf_r+0xb38>
204146d4:	57d2                	lw	a5,52(sp)
204146d6:	0789                	addi	a5,a5,2
204146d8:	da3e                	sw	a5,52(sp)
204146da:	08447693          	andi	a3,s0,132
204146de:	c6b6                	sw	a3,76(sp)
204146e0:	eaa1                	bnez	a3,20414730 <_svfprintf_r+0xb8e>
204146e2:	4706                	lw	a4,64(sp)
204146e4:	57d2                	lw	a5,52(sp)
204146e6:	40f70e33          	sub	t3,a4,a5
204146ea:	05c05363          	blez	t3,20414730 <_svfprintf_r+0xb8e>
204146ee:	20422eb7          	lui	t4,0x20422
204146f2:	4f41                	li	t5,16
204146f4:	cb0e8e93          	addi	t4,t4,-848 # 20421cb0 <blanks.4368>
204146f8:	4f9d                	li	t6,7
204146fa:	46ee                	lw	a3,216(sp)
204146fc:	01d8a023          	sw	t4,0(a7)
20414700:	477e                	lw	a4,220(sp)
20414702:	0685                	addi	a3,a3,1
20414704:	00888613          	addi	a2,a7,8
20414708:	33cf4d63          	blt	t5,t3,20414a42 <_svfprintf_r+0xea0>
2041470c:	9772                	add	a4,a4,t3
2041470e:	01c8a223          	sw	t3,4(a7)
20414712:	cfba                	sw	a4,220(sp)
20414714:	cdb6                	sw	a3,216(sp)
20414716:	471d                	li	a4,7
20414718:	88b2                	mv	a7,a2
2041471a:	00d75b63          	ble	a3,a4,20414730 <_svfprintf_r+0xb8e>
2041471e:	09d0                	addi	a2,sp,212
20414720:	85ce                	mv	a1,s3
20414722:	854a                	mv	a0,s2
20414724:	642060ef          	jal	ra,2041ad66 <__ssprint_r>
20414728:	260513e3          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
2041472c:	0fc10893          	addi	a7,sp,252
20414730:	0b714703          	lbu	a4,183(sp)
20414734:	cb1d                	beqz	a4,2041476a <_svfprintf_r+0xbc8>
20414736:	0b710713          	addi	a4,sp,183
2041473a:	00e8a023          	sw	a4,0(a7)
2041473e:	4705                	li	a4,1
20414740:	00e8a223          	sw	a4,4(a7)
20414744:	477e                	lw	a4,220(sp)
20414746:	469d                	li	a3,7
20414748:	08a1                	addi	a7,a7,8
2041474a:	0705                	addi	a4,a4,1
2041474c:	cfba                	sw	a4,220(sp)
2041474e:	476e                	lw	a4,216(sp)
20414750:	0705                	addi	a4,a4,1
20414752:	cdba                	sw	a4,216(sp)
20414754:	00e6db63          	ble	a4,a3,2041476a <_svfprintf_r+0xbc8>
20414758:	09d0                	addi	a2,sp,212
2041475a:	85ce                	mv	a1,s3
2041475c:	854a                	mv	a0,s2
2041475e:	608060ef          	jal	ra,2041ad66 <__ssprint_r>
20414762:	220516e3          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414766:	0fc10893          	addi	a7,sp,252
2041476a:	020d8b63          	beqz	s11,204147a0 <_svfprintf_r+0xbfe>
2041476e:	1938                	addi	a4,sp,184
20414770:	00e8a023          	sw	a4,0(a7)
20414774:	4709                	li	a4,2
20414776:	00e8a223          	sw	a4,4(a7)
2041477a:	477e                	lw	a4,220(sp)
2041477c:	469d                	li	a3,7
2041477e:	08a1                	addi	a7,a7,8
20414780:	0709                	addi	a4,a4,2
20414782:	cfba                	sw	a4,220(sp)
20414784:	476e                	lw	a4,216(sp)
20414786:	0705                	addi	a4,a4,1
20414788:	cdba                	sw	a4,216(sp)
2041478a:	00e6db63          	ble	a4,a3,204147a0 <_svfprintf_r+0xbfe>
2041478e:	09d0                	addi	a2,sp,212
20414790:	85ce                	mv	a1,s3
20414792:	854a                	mv	a0,s2
20414794:	5d2060ef          	jal	ra,2041ad66 <__ssprint_r>
20414798:	1e051be3          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
2041479c:	0fc10893          	addi	a7,sp,252
204147a0:	46b6                	lw	a3,76(sp)
204147a2:	08000713          	li	a4,128
204147a6:	04e69963          	bne	a3,a4,204147f8 <_svfprintf_r+0xc56>
204147aa:	4706                	lw	a4,64(sp)
204147ac:	57d2                	lw	a5,52(sp)
204147ae:	40f70db3          	sub	s11,a4,a5
204147b2:	05b05363          	blez	s11,204147f8 <_svfprintf_r+0xc56>
204147b6:	47c1                	li	a5,16
204147b8:	4e1d                	li	t3,7
204147ba:	476e                	lw	a4,216(sp)
204147bc:	46fe                	lw	a3,220(sp)
204147be:	00888613          	addi	a2,a7,8
204147c2:	0705                	addi	a4,a4,1
204147c4:	2bb7c963          	blt	a5,s11,20414a76 <_svfprintf_r+0xed4>
204147c8:	204227b7          	lui	a5,0x20422
204147cc:	01b8a223          	sw	s11,4(a7)
204147d0:	cc078793          	addi	a5,a5,-832 # 20421cc0 <zeroes.4369>
204147d4:	9db6                	add	s11,s11,a3
204147d6:	00f8a023          	sw	a5,0(a7)
204147da:	cfee                	sw	s11,220(sp)
204147dc:	cdba                	sw	a4,216(sp)
204147de:	469d                	li	a3,7
204147e0:	88b2                	mv	a7,a2
204147e2:	00e6db63          	ble	a4,a3,204147f8 <_svfprintf_r+0xc56>
204147e6:	09d0                	addi	a2,sp,212
204147e8:	85ce                	mv	a1,s3
204147ea:	854a                	mv	a0,s2
204147ec:	57a060ef          	jal	ra,2041ad66 <__ssprint_r>
204147f0:	18051fe3          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
204147f4:	0fc10893          	addi	a7,sp,252
204147f8:	416a8ab3          	sub	s5,s5,s6
204147fc:	05505363          	blez	s5,20414842 <_svfprintf_r+0xca0>
20414800:	4dc1                	li	s11,16
20414802:	481d                	li	a6,7
20414804:	476e                	lw	a4,216(sp)
20414806:	46fe                	lw	a3,220(sp)
20414808:	00888613          	addi	a2,a7,8
2041480c:	0705                	addi	a4,a4,1
2041480e:	2b5dc063          	blt	s11,s5,20414aae <_svfprintf_r+0xf0c>
20414812:	204227b7          	lui	a5,0x20422
20414816:	0158a223          	sw	s5,4(a7)
2041481a:	cc078793          	addi	a5,a5,-832 # 20421cc0 <zeroes.4369>
2041481e:	9ab6                	add	s5,s5,a3
20414820:	00f8a023          	sw	a5,0(a7)
20414824:	cfd6                	sw	s5,220(sp)
20414826:	cdba                	sw	a4,216(sp)
20414828:	469d                	li	a3,7
2041482a:	88b2                	mv	a7,a2
2041482c:	00e6db63          	ble	a4,a3,20414842 <_svfprintf_r+0xca0>
20414830:	09d0                	addi	a2,sp,212
20414832:	85ce                	mv	a1,s3
20414834:	854a                	mv	a0,s2
20414836:	530060ef          	jal	ra,2041ad66 <__ssprint_r>
2041483a:	14051ae3          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
2041483e:	0fc10893          	addi	a7,sp,252
20414842:	10047713          	andi	a4,s0,256
20414846:	4dfe                	lw	s11,220(sp)
20414848:	28071d63          	bnez	a4,20414ae2 <_svfprintf_r+0xf40>
2041484c:	01bb0333          	add	t1,s6,s11
20414850:	0098a023          	sw	s1,0(a7)
20414854:	0168a223          	sw	s6,4(a7)
20414858:	cf9a                	sw	t1,220(sp)
2041485a:	47ee                	lw	a5,216(sp)
2041485c:	471d                	li	a4,7
2041485e:	08a1                	addi	a7,a7,8
20414860:	0785                	addi	a5,a5,1
20414862:	cdbe                	sw	a5,216(sp)
20414864:	34f75d63          	ble	a5,a4,20414bbe <_svfprintf_r+0x101c>
20414868:	09d0                	addi	a2,sp,212
2041486a:	85ce                	mv	a1,s3
2041486c:	854a                	mv	a0,s2
2041486e:	4f8060ef          	jal	ra,2041ad66 <__ssprint_r>
20414872:	10051ee3          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414876:	0fc10893          	addi	a7,sp,252
2041487a:	a691                	j	20414bbe <_svfprintf_r+0x101c>
2041487c:	01046413          	ori	s0,s0,16
20414880:	02047793          	andi	a5,s0,32
20414884:	cf89                	beqz	a5,2041489e <_svfprintf_r+0xcfc>
20414886:	0a9d                	addi	s5,s5,7
20414888:	ff8afa93          	andi	s5,s5,-8
2041488c:	000aac03          	lw	s8,0(s5)
20414890:	004aac83          	lw	s9,4(s5)
20414894:	008a8693          	addi	a3,s5,8
20414898:	d636                	sw	a3,44(sp)
2041489a:	4785                	li	a5,1
2041489c:	bba9                	j	204145f6 <_svfprintf_r+0xa54>
2041489e:	004a8713          	addi	a4,s5,4
204148a2:	d63a                	sw	a4,44(sp)
204148a4:	01047793          	andi	a5,s0,16
204148a8:	c781                	beqz	a5,204148b0 <_svfprintf_r+0xd0e>
204148aa:	000aac03          	lw	s8,0(s5)
204148ae:	a031                	j	204148ba <_svfprintf_r+0xd18>
204148b0:	04047793          	andi	a5,s0,64
204148b4:	c789                	beqz	a5,204148be <_svfprintf_r+0xd1c>
204148b6:	000adc03          	lhu	s8,0(s5)
204148ba:	4c81                	li	s9,0
204148bc:	bff9                	j	2041489a <_svfprintf_r+0xcf8>
204148be:	20047793          	andi	a5,s0,512
204148c2:	d7e5                	beqz	a5,204148aa <_svfprintf_r+0xd08>
204148c4:	000acc03          	lbu	s8,0(s5)
204148c8:	bfcd                	j	204148ba <_svfprintf_r+0xd18>
204148ca:	204227b7          	lui	a5,0x20422
204148ce:	d1078793          	addi	a5,a5,-752 # 20421d10 <zeroes.4369+0x50>
204148d2:	c12ff06f          	j	20413ce4 <_svfprintf_r+0x142>
204148d6:	004a8593          	addi	a1,s5,4
204148da:	d62e                	sw	a1,44(sp)
204148dc:	01047793          	andi	a5,s0,16
204148e0:	c781                	beqz	a5,204148e8 <_svfprintf_r+0xd46>
204148e2:	000aac03          	lw	s8,0(s5)
204148e6:	a031                	j	204148f2 <_svfprintf_r+0xd50>
204148e8:	04047793          	andi	a5,s0,64
204148ec:	c791                	beqz	a5,204148f8 <_svfprintf_r+0xd56>
204148ee:	000adc03          	lhu	s8,0(s5)
204148f2:	4c81                	li	s9,0
204148f4:	c0eff06f          	j	20413d02 <_svfprintf_r+0x160>
204148f8:	20047793          	andi	a5,s0,512
204148fc:	d3fd                	beqz	a5,204148e2 <_svfprintf_r+0xd40>
204148fe:	000acc03          	lbu	s8,0(s5)
20414902:	bfc5                	j	204148f2 <_svfprintf_r+0xd50>
20414904:	8722                	mv	a4,s0
20414906:	4785                	li	a5,1
20414908:	b9ed                	j	20414602 <_svfprintf_r+0xa60>
2041490a:	4705                	li	a4,1
2041490c:	d8e78863          	beq	a5,a4,20413e9c <_svfprintf_r+0x2fa>
20414910:	4709                	li	a4,2
20414912:	0ce78e63          	beq	a5,a4,204149ee <_svfprintf_r+0xe4c>
20414916:	131c                	addi	a5,sp,416
20414918:	01dc9693          	slli	a3,s9,0x1d
2041491c:	007c7713          	andi	a4,s8,7
20414920:	003c5c13          	srli	s8,s8,0x3
20414924:	03070713          	addi	a4,a4,48
20414928:	0186ec33          	or	s8,a3,s8
2041492c:	003cdc93          	srli	s9,s9,0x3
20414930:	fee78fa3          	sb	a4,-1(a5)
20414934:	019c66b3          	or	a3,s8,s9
20414938:	fff78493          	addi	s1,a5,-1
2041493c:	e68d                	bnez	a3,20414966 <_svfprintf_r+0xdc4>
2041493e:	00147693          	andi	a3,s0,1
20414942:	ca89                	beqz	a3,20414954 <_svfprintf_r+0xdb2>
20414944:	03000693          	li	a3,48
20414948:	00d70663          	beq	a4,a3,20414954 <_svfprintf_r+0xdb2>
2041494c:	fed48fa3          	sb	a3,-1(s1)
20414950:	ffe78493          	addi	s1,a5,-2
20414954:	1314                	addi	a3,sp,416
20414956:	8ada                	mv	s5,s6
20414958:	d202                	sw	zero,36(sp)
2041495a:	40968b33          	sub	s6,a3,s1
2041495e:	4c01                	li	s8,0
20414960:	4b81                	li	s7,0
20414962:	4c81                	li	s9,0
20414964:	bb91                	j	204146b8 <_svfprintf_r+0xb16>
20414966:	87a6                	mv	a5,s1
20414968:	bf45                	j	20414918 <_svfprintf_r+0xd76>
2041496a:	4a01                	li	s4,0
2041496c:	1a010d93          	addi	s11,sp,416
20414970:	40047a93          	andi	s5,s0,1024
20414974:	4ba5                	li	s7,9
20414976:	4629                	li	a2,10
20414978:	4681                	li	a3,0
2041497a:	8562                	mv	a0,s8
2041497c:	85e6                	mv	a1,s9
2041497e:	c246                	sw	a7,4(sp)
20414980:	373070ef          	jal	ra,2041c4f2 <__umoddi3>
20414984:	03050513          	addi	a0,a0,48
20414988:	fead8fa3          	sb	a0,-1(s11)
2041498c:	fffd8493          	addi	s1,s11,-1
20414990:	0a05                	addi	s4,s4,1
20414992:	4892                	lw	a7,4(sp)
20414994:	020a8f63          	beqz	s5,204149d2 <_svfprintf_r+0xe30>
20414998:	5622                	lw	a2,40(sp)
2041499a:	00064783          	lbu	a5,0(a2)
2041499e:	02fa1a63          	bne	s4,a5,204149d2 <_svfprintf_r+0xe30>
204149a2:	0ff00693          	li	a3,255
204149a6:	02da0663          	beq	s4,a3,204149d2 <_svfprintf_r+0xe30>
204149aa:	000c9463          	bnez	s9,204149b2 <_svfprintf_r+0xe10>
204149ae:	038bf263          	bleu	s8,s7,204149d2 <_svfprintf_r+0xe30>
204149b2:	4716                	lw	a4,68(sp)
204149b4:	45c6                	lw	a1,80(sp)
204149b6:	c246                	sw	a7,4(sp)
204149b8:	8c99                	sub	s1,s1,a4
204149ba:	863a                	mv	a2,a4
204149bc:	8526                	mv	a0,s1
204149be:	eabfe0ef          	jal	ra,20413868 <strncpy>
204149c2:	55a2                	lw	a1,40(sp)
204149c4:	4a01                	li	s4,0
204149c6:	4892                	lw	a7,4(sp)
204149c8:	0015c783          	lbu	a5,1(a1)
204149cc:	c399                	beqz	a5,204149d2 <_svfprintf_r+0xe30>
204149ce:	0585                	addi	a1,a1,1
204149d0:	d42e                	sw	a1,40(sp)
204149d2:	8562                	mv	a0,s8
204149d4:	85e6                	mv	a1,s9
204149d6:	4629                	li	a2,10
204149d8:	4681                	li	a3,0
204149da:	c246                	sw	a7,4(sp)
204149dc:	7b8070ef          	jal	ra,2041c194 <__udivdi3>
204149e0:	8cae                	mv	s9,a1
204149e2:	8dc9                	or	a1,a1,a0
204149e4:	8c2a                	mv	s8,a0
204149e6:	4892                	lw	a7,4(sp)
204149e8:	d5b5                	beqz	a1,20414954 <_svfprintf_r+0xdb2>
204149ea:	8da6                	mv	s11,s1
204149ec:	b769                	j	20414976 <_svfprintf_r+0xdd4>
204149ee:	1304                	addi	s1,sp,416
204149f0:	4666                	lw	a2,88(sp)
204149f2:	00fc7793          	andi	a5,s8,15
204149f6:	14fd                	addi	s1,s1,-1
204149f8:	97b2                	add	a5,a5,a2
204149fa:	0007c783          	lbu	a5,0(a5)
204149fe:	004c5c13          	srli	s8,s8,0x4
20414a02:	00f48023          	sb	a5,0(s1)
20414a06:	01cc9793          	slli	a5,s9,0x1c
20414a0a:	0187ec33          	or	s8,a5,s8
20414a0e:	004cdc93          	srli	s9,s9,0x4
20414a12:	019c67b3          	or	a5,s8,s9
20414a16:	ffe9                	bnez	a5,204149f0 <_svfprintf_r+0xe4e>
20414a18:	bf35                	j	20414954 <_svfprintf_r+0xdb2>
20414a1a:	1304                	addi	s1,sp,416
20414a1c:	ff85                	bnez	a5,20414954 <_svfprintf_r+0xdb2>
20414a1e:	8b05                	andi	a4,a4,1
20414a20:	db15                	beqz	a4,20414954 <_svfprintf_r+0xdb2>
20414a22:	03000793          	li	a5,48
20414a26:	18f10fa3          	sb	a5,415(sp)
20414a2a:	c84ff06f          	j	20413eae <_svfprintf_r+0x30c>
20414a2e:	7a0d0163          	beqz	s10,204151d0 <_svfprintf_r+0x162e>
20414a32:	87ea                	mv	a5,s10
20414a34:	12f10e23          	sb	a5,316(sp)
20414a38:	0a010ba3          	sb	zero,183(sp)
20414a3c:	d656                	sw	s5,44(sp)
20414a3e:	c0cff06f          	j	20413e4a <_svfprintf_r+0x2a8>
20414a42:	0741                	addi	a4,a4,16
20414a44:	01e8a223          	sw	t5,4(a7)
20414a48:	cfba                	sw	a4,220(sp)
20414a4a:	cdb6                	sw	a3,216(sp)
20414a4c:	02dfd263          	ble	a3,t6,20414a70 <_svfprintf_r+0xece>
20414a50:	09d0                	addi	a2,sp,212
20414a52:	85ce                	mv	a1,s3
20414a54:	854a                	mv	a0,s2
20414a56:	c472                	sw	t3,8(sp)
20414a58:	c676                	sw	t4,12(sp)
20414a5a:	c87a                	sw	t5,16(sp)
20414a5c:	ca7e                	sw	t6,20(sp)
20414a5e:	308060ef          	jal	ra,2041ad66 <__ssprint_r>
20414a62:	4e22                	lw	t3,8(sp)
20414a64:	4eb2                	lw	t4,12(sp)
20414a66:	4f42                	lw	t5,16(sp)
20414a68:	4fd2                	lw	t6,20(sp)
20414a6a:	72051263          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414a6e:	19f0                	addi	a2,sp,252
20414a70:	1e41                	addi	t3,t3,-16
20414a72:	88b2                	mv	a7,a2
20414a74:	b159                	j	204146fa <_svfprintf_r+0xb58>
20414a76:	204225b7          	lui	a1,0x20422
20414a7a:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414a7e:	06c1                	addi	a3,a3,16
20414a80:	00b8a023          	sw	a1,0(a7)
20414a84:	00f8a223          	sw	a5,4(a7)
20414a88:	cfb6                	sw	a3,220(sp)
20414a8a:	cdba                	sw	a4,216(sp)
20414a8c:	00ee5e63          	ble	a4,t3,20414aa8 <_svfprintf_r+0xf06>
20414a90:	09d0                	addi	a2,sp,212
20414a92:	85ce                	mv	a1,s3
20414a94:	854a                	mv	a0,s2
20414a96:	d03e                	sw	a5,32(sp)
20414a98:	c472                	sw	t3,8(sp)
20414a9a:	2cc060ef          	jal	ra,2041ad66 <__ssprint_r>
20414a9e:	5782                	lw	a5,32(sp)
20414aa0:	4e22                	lw	t3,8(sp)
20414aa2:	6e051663          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414aa6:	19f0                	addi	a2,sp,252
20414aa8:	1dc1                	addi	s11,s11,-16
20414aaa:	88b2                	mv	a7,a2
20414aac:	b339                	j	204147ba <_svfprintf_r+0xc18>
20414aae:	204225b7          	lui	a1,0x20422
20414ab2:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414ab6:	06c1                	addi	a3,a3,16
20414ab8:	00b8a023          	sw	a1,0(a7)
20414abc:	01b8a223          	sw	s11,4(a7)
20414ac0:	cfb6                	sw	a3,220(sp)
20414ac2:	cdba                	sw	a4,216(sp)
20414ac4:	00e85c63          	ble	a4,a6,20414adc <_svfprintf_r+0xf3a>
20414ac8:	09d0                	addi	a2,sp,212
20414aca:	85ce                	mv	a1,s3
20414acc:	854a                	mv	a0,s2
20414ace:	cc42                	sw	a6,24(sp)
20414ad0:	296060ef          	jal	ra,2041ad66 <__ssprint_r>
20414ad4:	4862                	lw	a6,24(sp)
20414ad6:	6a051c63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414ada:	19f0                	addi	a2,sp,252
20414adc:	1ac1                	addi	s5,s5,-16
20414ade:	88b2                	mv	a7,a2
20414ae0:	b315                	j	20414804 <_svfprintf_r+0xc62>
20414ae2:	06500713          	li	a4,101
20414ae6:	51a75463          	ble	s10,a4,20414fee <_svfprintf_r+0x144c>
20414aea:	570e                	lw	a4,224(sp)
20414aec:	090c                	addi	a1,sp,144
20414aee:	1108                	addi	a0,sp,160
20414af0:	d13a                	sw	a4,160(sp)
20414af2:	571e                	lw	a4,228(sp)
20414af4:	c246                	sw	a7,4(sp)
20414af6:	c902                	sw	zero,144(sp)
20414af8:	d33a                	sw	a4,164(sp)
20414afa:	572e                	lw	a4,232(sp)
20414afc:	cb02                	sw	zero,148(sp)
20414afe:	cd02                	sw	zero,152(sp)
20414b00:	d53a                	sw	a4,168(sp)
20414b02:	573e                	lw	a4,236(sp)
20414b04:	cf02                	sw	zero,156(sp)
20414b06:	d73a                	sw	a4,172(sp)
20414b08:	649080ef          	jal	ra,2041d950 <__eqtf2>
20414b0c:	4892                	lw	a7,4(sp)
20414b0e:	10051b63          	bnez	a0,20414c24 <_svfprintf_r+0x1082>
20414b12:	204227b7          	lui	a5,0x20422
20414b16:	d3878793          	addi	a5,a5,-712 # 20421d38 <zeroes.4369+0x78>
20414b1a:	00f8a023          	sw	a5,0(a7)
20414b1e:	4785                	li	a5,1
20414b20:	00f8a223          	sw	a5,4(a7)
20414b24:	47ee                	lw	a5,216(sp)
20414b26:	0d85                	addi	s11,s11,1
20414b28:	cfee                	sw	s11,220(sp)
20414b2a:	0785                	addi	a5,a5,1
20414b2c:	cdbe                	sw	a5,216(sp)
20414b2e:	471d                	li	a4,7
20414b30:	08a1                	addi	a7,a7,8
20414b32:	00f75b63          	ble	a5,a4,20414b48 <_svfprintf_r+0xfa6>
20414b36:	09d0                	addi	a2,sp,212
20414b38:	85ce                	mv	a1,s3
20414b3a:	854a                	mv	a0,s2
20414b3c:	22a060ef          	jal	ra,2041ad66 <__ssprint_r>
20414b40:	64051763          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414b44:	0fc10893          	addi	a7,sp,252
20414b48:	57fa                	lw	a5,188(sp)
20414b4a:	0147c563          	blt	a5,s4,20414b54 <_svfprintf_r+0xfb2>
20414b4e:	00147793          	andi	a5,s0,1
20414b52:	c7b5                	beqz	a5,20414bbe <_svfprintf_r+0x101c>
20414b54:	5662                	lw	a2,56(sp)
20414b56:	47fe                	lw	a5,220(sp)
20414b58:	45a6                	lw	a1,72(sp)
20414b5a:	00c8a223          	sw	a2,4(a7)
20414b5e:	97b2                	add	a5,a5,a2
20414b60:	cfbe                	sw	a5,220(sp)
20414b62:	47ee                	lw	a5,216(sp)
20414b64:	00b8a023          	sw	a1,0(a7)
20414b68:	471d                	li	a4,7
20414b6a:	0785                	addi	a5,a5,1
20414b6c:	cdbe                	sw	a5,216(sp)
20414b6e:	08a1                	addi	a7,a7,8
20414b70:	00f75b63          	ble	a5,a4,20414b86 <_svfprintf_r+0xfe4>
20414b74:	09d0                	addi	a2,sp,212
20414b76:	85ce                	mv	a1,s3
20414b78:	854a                	mv	a0,s2
20414b7a:	1ec060ef          	jal	ra,2041ad66 <__ssprint_r>
20414b7e:	60051863          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414b82:	0fc10893          	addi	a7,sp,252
20414b86:	fffa0493          	addi	s1,s4,-1
20414b8a:	02905a63          	blez	s1,20414bbe <_svfprintf_r+0x101c>
20414b8e:	4ac1                	li	s5,16
20414b90:	4b9d                	li	s7,7
20414b92:	47ee                	lw	a5,216(sp)
20414b94:	477e                	lw	a4,220(sp)
20414b96:	00888693          	addi	a3,a7,8
20414b9a:	0785                	addi	a5,a5,1
20414b9c:	049acc63          	blt	s5,s1,20414bf4 <_svfprintf_r+0x1052>
20414ba0:	20422637          	lui	a2,0x20422
20414ba4:	cc060613          	addi	a2,a2,-832 # 20421cc0 <zeroes.4369>
20414ba8:	0098a223          	sw	s1,4(a7)
20414bac:	00c8a023          	sw	a2,0(a7)
20414bb0:	94ba                	add	s1,s1,a4
20414bb2:	cfa6                	sw	s1,220(sp)
20414bb4:	cdbe                	sw	a5,216(sp)
20414bb6:	471d                	li	a4,7
20414bb8:	88b6                	mv	a7,a3
20414bba:	caf747e3          	blt	a4,a5,20414868 <_svfprintf_r+0xcc6>
20414bbe:	8811                	andi	s0,s0,4
20414bc0:	58041563          	bnez	s0,2041514a <_svfprintf_r+0x15a8>
20414bc4:	4d06                	lw	s10,64(sp)
20414bc6:	5752                	lw	a4,52(sp)
20414bc8:	00ed5363          	ble	a4,s10,20414bce <_svfprintf_r+0x102c>
20414bcc:	8d3a                	mv	s10,a4
20414bce:	57f2                	lw	a5,60(sp)
20414bd0:	97ea                	add	a5,a5,s10
20414bd2:	de3e                	sw	a5,60(sp)
20414bd4:	47fe                	lw	a5,220(sp)
20414bd6:	cb81                	beqz	a5,20414be6 <_svfprintf_r+0x1044>
20414bd8:	09d0                	addi	a2,sp,212
20414bda:	85ce                	mv	a1,s3
20414bdc:	854a                	mv	a0,s2
20414bde:	188060ef          	jal	ra,2041ad66 <__ssprint_r>
20414be2:	5a051663          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414be6:	5712                	lw	a4,36(sp)
20414be8:	cd82                	sw	zero,216(sp)
20414bea:	5c071e63          	bnez	a4,204151c6 <_svfprintf_r+0x1624>
20414bee:	0fc10893          	addi	a7,sp,252
20414bf2:	b26d                	j	2041459c <_svfprintf_r+0x9fa>
20414bf4:	204225b7          	lui	a1,0x20422
20414bf8:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414bfc:	0741                	addi	a4,a4,16
20414bfe:	00b8a023          	sw	a1,0(a7)
20414c02:	0158a223          	sw	s5,4(a7)
20414c06:	cfba                	sw	a4,220(sp)
20414c08:	cdbe                	sw	a5,216(sp)
20414c0a:	00fbda63          	ble	a5,s7,20414c1e <_svfprintf_r+0x107c>
20414c0e:	09d0                	addi	a2,sp,212
20414c10:	85ce                	mv	a1,s3
20414c12:	854a                	mv	a0,s2
20414c14:	152060ef          	jal	ra,2041ad66 <__ssprint_r>
20414c18:	56051b63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414c1c:	19f4                	addi	a3,sp,252
20414c1e:	14c1                	addi	s1,s1,-16
20414c20:	88b6                	mv	a7,a3
20414c22:	bf85                	j	20414b92 <_svfprintf_r+0xff0>
20414c24:	577a                	lw	a4,188(sp)
20414c26:	10e04163          	bgtz	a4,20414d28 <_svfprintf_r+0x1186>
20414c2a:	204227b7          	lui	a5,0x20422
20414c2e:	d3878793          	addi	a5,a5,-712 # 20421d38 <zeroes.4369+0x78>
20414c32:	00f8a023          	sw	a5,0(a7)
20414c36:	4785                	li	a5,1
20414c38:	00f8a223          	sw	a5,4(a7)
20414c3c:	47ee                	lw	a5,216(sp)
20414c3e:	0d85                	addi	s11,s11,1
20414c40:	cfee                	sw	s11,220(sp)
20414c42:	0785                	addi	a5,a5,1
20414c44:	cdbe                	sw	a5,216(sp)
20414c46:	471d                	li	a4,7
20414c48:	08a1                	addi	a7,a7,8
20414c4a:	00f75b63          	ble	a5,a4,20414c60 <_svfprintf_r+0x10be>
20414c4e:	09d0                	addi	a2,sp,212
20414c50:	85ce                	mv	a1,s3
20414c52:	854a                	mv	a0,s2
20414c54:	112060ef          	jal	ra,2041ad66 <__ssprint_r>
20414c58:	52051b63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414c5c:	0fc10893          	addi	a7,sp,252
20414c60:	57fa                	lw	a5,188(sp)
20414c62:	e791                	bnez	a5,20414c6e <_svfprintf_r+0x10cc>
20414c64:	000a1563          	bnez	s4,20414c6e <_svfprintf_r+0x10cc>
20414c68:	00147793          	andi	a5,s0,1
20414c6c:	dba9                	beqz	a5,20414bbe <_svfprintf_r+0x101c>
20414c6e:	5762                	lw	a4,56(sp)
20414c70:	47fe                	lw	a5,220(sp)
20414c72:	46a6                	lw	a3,72(sp)
20414c74:	00e8a223          	sw	a4,4(a7)
20414c78:	97ba                	add	a5,a5,a4
20414c7a:	cfbe                	sw	a5,220(sp)
20414c7c:	47ee                	lw	a5,216(sp)
20414c7e:	00d8a023          	sw	a3,0(a7)
20414c82:	471d                	li	a4,7
20414c84:	0785                	addi	a5,a5,1
20414c86:	cdbe                	sw	a5,216(sp)
20414c88:	08a1                	addi	a7,a7,8
20414c8a:	00f75b63          	ble	a5,a4,20414ca0 <_svfprintf_r+0x10fe>
20414c8e:	09d0                	addi	a2,sp,212
20414c90:	85ce                	mv	a1,s3
20414c92:	854a                	mv	a0,s2
20414c94:	0d2060ef          	jal	ra,2041ad66 <__ssprint_r>
20414c98:	4e051b63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414c9c:	0fc10893          	addi	a7,sp,252
20414ca0:	5afa                	lw	s5,188(sp)
20414ca2:	040ad363          	bgez	s5,20414ce8 <_svfprintf_r+0x1146>
20414ca6:	41500ab3          	neg	s5,s5
20414caa:	8746                	mv	a4,a7
20414cac:	4bc1                	li	s7,16
20414cae:	4c1d                	li	s8,7
20414cb0:	47ee                	lw	a5,216(sp)
20414cb2:	46fe                	lw	a3,220(sp)
20414cb4:	08a1                	addi	a7,a7,8
20414cb6:	0785                	addi	a5,a5,1
20414cb8:	055bc063          	blt	s7,s5,20414cf8 <_svfprintf_r+0x1156>
20414cbc:	20422637          	lui	a2,0x20422
20414cc0:	01572223          	sw	s5,4(a4)
20414cc4:	cc060613          	addi	a2,a2,-832 # 20421cc0 <zeroes.4369>
20414cc8:	9ab6                	add	s5,s5,a3
20414cca:	c310                	sw	a2,0(a4)
20414ccc:	cfd6                	sw	s5,220(sp)
20414cce:	cdbe                	sw	a5,216(sp)
20414cd0:	471d                	li	a4,7
20414cd2:	00f75b63          	ble	a5,a4,20414ce8 <_svfprintf_r+0x1146>
20414cd6:	09d0                	addi	a2,sp,212
20414cd8:	85ce                	mv	a1,s3
20414cda:	854a                	mv	a0,s2
20414cdc:	08a060ef          	jal	ra,2041ad66 <__ssprint_r>
20414ce0:	4a051763          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414ce4:	0fc10893          	addi	a7,sp,252
20414ce8:	47fe                	lw	a5,220(sp)
20414cea:	0098a023          	sw	s1,0(a7)
20414cee:	0148a223          	sw	s4,4(a7)
20414cf2:	97d2                	add	a5,a5,s4
20414cf4:	cfbe                	sw	a5,220(sp)
20414cf6:	b695                	j	2041485a <_svfprintf_r+0xcb8>
20414cf8:	204225b7          	lui	a1,0x20422
20414cfc:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414d00:	06c1                	addi	a3,a3,16
20414d02:	c30c                	sw	a1,0(a4)
20414d04:	01772223          	sw	s7,4(a4)
20414d08:	cfb6                	sw	a3,220(sp)
20414d0a:	cdbe                	sw	a5,216(sp)
20414d0c:	00fc5b63          	ble	a5,s8,20414d22 <_svfprintf_r+0x1180>
20414d10:	09d0                	addi	a2,sp,212
20414d12:	85ce                	mv	a1,s3
20414d14:	854a                	mv	a0,s2
20414d16:	050060ef          	jal	ra,2041ad66 <__ssprint_r>
20414d1a:	46051a63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414d1e:	0fc10893          	addi	a7,sp,252
20414d22:	1ac1                	addi	s5,s5,-16
20414d24:	8746                	mv	a4,a7
20414d26:	b769                	j	20414cb0 <_svfprintf_r+0x110e>
20414d28:	8ae6                	mv	s5,s9
20414d2a:	019a5363          	ble	s9,s4,20414d30 <_svfprintf_r+0x118e>
20414d2e:	8ad2                	mv	s5,s4
20414d30:	03505863          	blez	s5,20414d60 <_svfprintf_r+0x11be>
20414d34:	476e                	lw	a4,216(sp)
20414d36:	9dd6                	add	s11,s11,s5
20414d38:	0098a023          	sw	s1,0(a7)
20414d3c:	0705                	addi	a4,a4,1
20414d3e:	0158a223          	sw	s5,4(a7)
20414d42:	cfee                	sw	s11,220(sp)
20414d44:	cdba                	sw	a4,216(sp)
20414d46:	469d                	li	a3,7
20414d48:	08a1                	addi	a7,a7,8
20414d4a:	00e6db63          	ble	a4,a3,20414d60 <_svfprintf_r+0x11be>
20414d4e:	09d0                	addi	a2,sp,212
20414d50:	85ce                	mv	a1,s3
20414d52:	854a                	mv	a0,s2
20414d54:	012060ef          	jal	ra,2041ad66 <__ssprint_r>
20414d58:	42051b63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414d5c:	0fc10893          	addi	a7,sp,252
20414d60:	000ad363          	bgez	s5,20414d66 <_svfprintf_r+0x11c4>
20414d64:	4a81                	li	s5,0
20414d66:	415c8ab3          	sub	s5,s9,s5
20414d6a:	05505363          	blez	s5,20414db0 <_svfprintf_r+0x120e>
20414d6e:	4d41                	li	s10,16
20414d70:	4d9d                	li	s11,7
20414d72:	476e                	lw	a4,216(sp)
20414d74:	46fe                	lw	a3,220(sp)
20414d76:	00888613          	addi	a2,a7,8
20414d7a:	0705                	addi	a4,a4,1
20414d7c:	135d4763          	blt	s10,s5,20414eaa <_svfprintf_r+0x1308>
20414d80:	204225b7          	lui	a1,0x20422
20414d84:	0158a223          	sw	s5,4(a7)
20414d88:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414d8c:	9ab6                	add	s5,s5,a3
20414d8e:	00b8a023          	sw	a1,0(a7)
20414d92:	cfd6                	sw	s5,220(sp)
20414d94:	cdba                	sw	a4,216(sp)
20414d96:	469d                	li	a3,7
20414d98:	88b2                	mv	a7,a2
20414d9a:	00e6db63          	ble	a4,a3,20414db0 <_svfprintf_r+0x120e>
20414d9e:	09d0                	addi	a2,sp,212
20414da0:	85ce                	mv	a1,s3
20414da2:	854a                	mv	a0,s2
20414da4:	7c3050ef          	jal	ra,2041ad66 <__ssprint_r>
20414da8:	3e051363          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414dac:	0fc10893          	addi	a7,sp,252
20414db0:	40047793          	andi	a5,s0,1024
20414db4:	01948ab3          	add	s5,s1,s9
20414db8:	cf89                	beqz	a5,20414dd2 <_svfprintf_r+0x1230>
20414dba:	4d1d                	li	s10,7
20414dbc:	01448db3          	add	s11,s1,s4
20414dc0:	100b9d63          	bnez	s7,20414eda <_svfprintf_r+0x1338>
20414dc4:	100c1d63          	bnez	s8,20414ede <_svfprintf_r+0x133c>
20414dc8:	014487b3          	add	a5,s1,s4
20414dcc:	0157f363          	bleu	s5,a5,20414dd2 <_svfprintf_r+0x1230>
20414dd0:	8abe                	mv	s5,a5
20414dd2:	57fa                	lw	a5,188(sp)
20414dd4:	0147c563          	blt	a5,s4,20414dde <_svfprintf_r+0x123c>
20414dd8:	00147793          	andi	a5,s0,1
20414ddc:	cb95                	beqz	a5,20414e10 <_svfprintf_r+0x126e>
20414dde:	5762                	lw	a4,56(sp)
20414de0:	47fe                	lw	a5,220(sp)
20414de2:	46a6                	lw	a3,72(sp)
20414de4:	00e8a223          	sw	a4,4(a7)
20414de8:	97ba                	add	a5,a5,a4
20414dea:	cfbe                	sw	a5,220(sp)
20414dec:	47ee                	lw	a5,216(sp)
20414dee:	00d8a023          	sw	a3,0(a7)
20414df2:	471d                	li	a4,7
20414df4:	0785                	addi	a5,a5,1
20414df6:	cdbe                	sw	a5,216(sp)
20414df8:	08a1                	addi	a7,a7,8
20414dfa:	00f75b63          	ble	a5,a4,20414e10 <_svfprintf_r+0x126e>
20414dfe:	09d0                	addi	a2,sp,212
20414e00:	85ce                	mv	a1,s3
20414e02:	854a                	mv	a0,s2
20414e04:	763050ef          	jal	ra,2041ad66 <__ssprint_r>
20414e08:	38051363          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414e0c:	0fc10893          	addi	a7,sp,252
20414e10:	94d2                	add	s1,s1,s4
20414e12:	415487b3          	sub	a5,s1,s5
20414e16:	54fa                	lw	s1,188(sp)
20414e18:	409a04b3          	sub	s1,s4,s1
20414e1c:	0097d363          	ble	s1,a5,20414e22 <_svfprintf_r+0x1280>
20414e20:	84be                	mv	s1,a5
20414e22:	02905963          	blez	s1,20414e54 <_svfprintf_r+0x12b2>
20414e26:	47fe                	lw	a5,220(sp)
20414e28:	0158a023          	sw	s5,0(a7)
20414e2c:	0098a223          	sw	s1,4(a7)
20414e30:	97a6                	add	a5,a5,s1
20414e32:	cfbe                	sw	a5,220(sp)
20414e34:	47ee                	lw	a5,216(sp)
20414e36:	471d                	li	a4,7
20414e38:	08a1                	addi	a7,a7,8
20414e3a:	0785                	addi	a5,a5,1
20414e3c:	cdbe                	sw	a5,216(sp)
20414e3e:	00f75b63          	ble	a5,a4,20414e54 <_svfprintf_r+0x12b2>
20414e42:	09d0                	addi	a2,sp,212
20414e44:	85ce                	mv	a1,s3
20414e46:	854a                	mv	a0,s2
20414e48:	71f050ef          	jal	ra,2041ad66 <__ssprint_r>
20414e4c:	34051163          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414e50:	0fc10893          	addi	a7,sp,252
20414e54:	87a6                	mv	a5,s1
20414e56:	0004d363          	bgez	s1,20414e5c <_svfprintf_r+0x12ba>
20414e5a:	4781                	li	a5,0
20414e5c:	54fa                	lw	s1,188(sp)
20414e5e:	409a04b3          	sub	s1,s4,s1
20414e62:	8c9d                	sub	s1,s1,a5
20414e64:	d4905de3          	blez	s1,20414bbe <_svfprintf_r+0x101c>
20414e68:	4ac1                	li	s5,16
20414e6a:	4b9d                	li	s7,7
20414e6c:	47ee                	lw	a5,216(sp)
20414e6e:	477e                	lw	a4,220(sp)
20414e70:	00888693          	addi	a3,a7,8
20414e74:	0785                	addi	a5,a5,1
20414e76:	d29ad5e3          	ble	s1,s5,20414ba0 <_svfprintf_r+0xffe>
20414e7a:	204225b7          	lui	a1,0x20422
20414e7e:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414e82:	0741                	addi	a4,a4,16
20414e84:	00b8a023          	sw	a1,0(a7)
20414e88:	0158a223          	sw	s5,4(a7)
20414e8c:	cfba                	sw	a4,220(sp)
20414e8e:	cdbe                	sw	a5,216(sp)
20414e90:	00fbda63          	ble	a5,s7,20414ea4 <_svfprintf_r+0x1302>
20414e94:	09d0                	addi	a2,sp,212
20414e96:	85ce                	mv	a1,s3
20414e98:	854a                	mv	a0,s2
20414e9a:	6cd050ef          	jal	ra,2041ad66 <__ssprint_r>
20414e9e:	2e051863          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414ea2:	19f4                	addi	a3,sp,252
20414ea4:	14c1                	addi	s1,s1,-16
20414ea6:	88b6                	mv	a7,a3
20414ea8:	b7d1                	j	20414e6c <_svfprintf_r+0x12ca>
20414eaa:	204227b7          	lui	a5,0x20422
20414eae:	cc078793          	addi	a5,a5,-832 # 20421cc0 <zeroes.4369>
20414eb2:	06c1                	addi	a3,a3,16
20414eb4:	00f8a023          	sw	a5,0(a7)
20414eb8:	01a8a223          	sw	s10,4(a7)
20414ebc:	cfb6                	sw	a3,220(sp)
20414ebe:	cdba                	sw	a4,216(sp)
20414ec0:	00edda63          	ble	a4,s11,20414ed4 <_svfprintf_r+0x1332>
20414ec4:	09d0                	addi	a2,sp,212
20414ec6:	85ce                	mv	a1,s3
20414ec8:	854a                	mv	a0,s2
20414eca:	69d050ef          	jal	ra,2041ad66 <__ssprint_r>
20414ece:	2c051063          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414ed2:	19f0                	addi	a2,sp,252
20414ed4:	1ac1                	addi	s5,s5,-16
20414ed6:	88b2                	mv	a7,a2
20414ed8:	bd69                	j	20414d72 <_svfprintf_r+0x11d0>
20414eda:	080c0c63          	beqz	s8,20414f72 <_svfprintf_r+0x13d0>
20414ede:	1c7d                	addi	s8,s8,-1
20414ee0:	4716                	lw	a4,68(sp)
20414ee2:	47fe                	lw	a5,220(sp)
20414ee4:	46c6                	lw	a3,80(sp)
20414ee6:	00e8a223          	sw	a4,4(a7)
20414eea:	97ba                	add	a5,a5,a4
20414eec:	cfbe                	sw	a5,220(sp)
20414eee:	47ee                	lw	a5,216(sp)
20414ef0:	00d8a023          	sw	a3,0(a7)
20414ef4:	08a1                	addi	a7,a7,8
20414ef6:	0785                	addi	a5,a5,1
20414ef8:	cdbe                	sw	a5,216(sp)
20414efa:	00fd5b63          	ble	a5,s10,20414f10 <_svfprintf_r+0x136e>
20414efe:	09d0                	addi	a2,sp,212
20414f00:	85ce                	mv	a1,s3
20414f02:	854a                	mv	a0,s2
20414f04:	663050ef          	jal	ra,2041ad66 <__ssprint_r>
20414f08:	28051363          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414f0c:	0fc10893          	addi	a7,sp,252
20414f10:	57a2                	lw	a5,40(sp)
20414f12:	415d8733          	sub	a4,s11,s5
20414f16:	0007cb03          	lbu	s6,0(a5)
20414f1a:	01675363          	ble	s6,a4,20414f20 <_svfprintf_r+0x137e>
20414f1e:	8b3a                	mv	s6,a4
20414f20:	03605863          	blez	s6,20414f50 <_svfprintf_r+0x13ae>
20414f24:	477e                	lw	a4,220(sp)
20414f26:	0158a023          	sw	s5,0(a7)
20414f2a:	0168a223          	sw	s6,4(a7)
20414f2e:	975a                	add	a4,a4,s6
20414f30:	cfba                	sw	a4,220(sp)
20414f32:	476e                	lw	a4,216(sp)
20414f34:	08a1                	addi	a7,a7,8
20414f36:	0705                	addi	a4,a4,1
20414f38:	cdba                	sw	a4,216(sp)
20414f3a:	00ed5b63          	ble	a4,s10,20414f50 <_svfprintf_r+0x13ae>
20414f3e:	09d0                	addi	a2,sp,212
20414f40:	85ce                	mv	a1,s3
20414f42:	854a                	mv	a0,s2
20414f44:	623050ef          	jal	ra,2041ad66 <__ssprint_r>
20414f48:	24051363          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414f4c:	0fc10893          	addi	a7,sp,252
20414f50:	875a                	mv	a4,s6
20414f52:	000b5363          	bgez	s6,20414f58 <_svfprintf_r+0x13b6>
20414f56:	4701                	li	a4,0
20414f58:	55a2                	lw	a1,40(sp)
20414f5a:	4841                	li	a6,16
20414f5c:	0005c783          	lbu	a5,0(a1)
20414f60:	40e78b33          	sub	s6,a5,a4
20414f64:	05604563          	bgtz	s6,20414fae <_svfprintf_r+0x140c>
20414f68:	5622                	lw	a2,40(sp)
20414f6a:	00064783          	lbu	a5,0(a2)
20414f6e:	9abe                	add	s5,s5,a5
20414f70:	bd81                	j	20414dc0 <_svfprintf_r+0x121e>
20414f72:	5622                	lw	a2,40(sp)
20414f74:	1bfd                	addi	s7,s7,-1
20414f76:	167d                	addi	a2,a2,-1
20414f78:	d432                	sw	a2,40(sp)
20414f7a:	b79d                	j	20414ee0 <_svfprintf_r+0x133e>
20414f7c:	204227b7          	lui	a5,0x20422
20414f80:	cc078793          	addi	a5,a5,-832 # 20421cc0 <zeroes.4369>
20414f84:	06c1                	addi	a3,a3,16
20414f86:	00f8a023          	sw	a5,0(a7)
20414f8a:	0108a223          	sw	a6,4(a7)
20414f8e:	cfb6                	sw	a3,220(sp)
20414f90:	cdba                	sw	a4,216(sp)
20414f92:	00ed5c63          	ble	a4,s10,20414faa <_svfprintf_r+0x1408>
20414f96:	09d0                	addi	a2,sp,212
20414f98:	85ce                	mv	a1,s3
20414f9a:	854a                	mv	a0,s2
20414f9c:	cc42                	sw	a6,24(sp)
20414f9e:	5c9050ef          	jal	ra,2041ad66 <__ssprint_r>
20414fa2:	4862                	lw	a6,24(sp)
20414fa4:	1e051563          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414fa8:	19f0                	addi	a2,sp,252
20414faa:	1b41                	addi	s6,s6,-16
20414fac:	88b2                	mv	a7,a2
20414fae:	476e                	lw	a4,216(sp)
20414fb0:	46fe                	lw	a3,220(sp)
20414fb2:	00888613          	addi	a2,a7,8
20414fb6:	0705                	addi	a4,a4,1
20414fb8:	fd6842e3          	blt	a6,s6,20414f7c <_svfprintf_r+0x13da>
20414fbc:	204225b7          	lui	a1,0x20422
20414fc0:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20414fc4:	00db07b3          	add	a5,s6,a3
20414fc8:	00b8a023          	sw	a1,0(a7)
20414fcc:	0168a223          	sw	s6,4(a7)
20414fd0:	cfbe                	sw	a5,220(sp)
20414fd2:	cdba                	sw	a4,216(sp)
20414fd4:	88b2                	mv	a7,a2
20414fd6:	f8ed59e3          	ble	a4,s10,20414f68 <_svfprintf_r+0x13c6>
20414fda:	09d0                	addi	a2,sp,212
20414fdc:	85ce                	mv	a1,s3
20414fde:	854a                	mv	a0,s2
20414fe0:	587050ef          	jal	ra,2041ad66 <__ssprint_r>
20414fe4:	1a051563          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20414fe8:	0fc10893          	addi	a7,sp,252
20414fec:	bfb5                	j	20414f68 <_svfprintf_r+0x13c6>
20414fee:	47ee                	lw	a5,216(sp)
20414ff0:	4705                	li	a4,1
20414ff2:	0098a023          	sw	s1,0(a7)
20414ff6:	0d85                	addi	s11,s11,1
20414ff8:	0785                	addi	a5,a5,1
20414ffa:	00888b93          	addi	s7,a7,8
20414ffe:	01474663          	blt	a4,s4,2041500a <_svfprintf_r+0x1468>
20415002:	00147693          	andi	a3,s0,1
20415006:	12068a63          	beqz	a3,2041513a <_svfprintf_r+0x1598>
2041500a:	4705                	li	a4,1
2041500c:	00e8a223          	sw	a4,4(a7)
20415010:	cfee                	sw	s11,220(sp)
20415012:	cdbe                	sw	a5,216(sp)
20415014:	471d                	li	a4,7
20415016:	00f75b63          	ble	a5,a4,2041502c <_svfprintf_r+0x148a>
2041501a:	09d0                	addi	a2,sp,212
2041501c:	85ce                	mv	a1,s3
2041501e:	854a                	mv	a0,s2
20415020:	547050ef          	jal	ra,2041ad66 <__ssprint_r>
20415024:	16051563          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20415028:	0fc10b93          	addi	s7,sp,252
2041502c:	5762                	lw	a4,56(sp)
2041502e:	47fe                	lw	a5,220(sp)
20415030:	46a6                	lw	a3,72(sp)
20415032:	00eba223          	sw	a4,4(s7)
20415036:	97ba                	add	a5,a5,a4
20415038:	cfbe                	sw	a5,220(sp)
2041503a:	47ee                	lw	a5,216(sp)
2041503c:	00dba023          	sw	a3,0(s7)
20415040:	471d                	li	a4,7
20415042:	0785                	addi	a5,a5,1
20415044:	cdbe                	sw	a5,216(sp)
20415046:	0ba1                	addi	s7,s7,8
20415048:	00f75b63          	ble	a5,a4,2041505e <_svfprintf_r+0x14bc>
2041504c:	09d0                	addi	a2,sp,212
2041504e:	85ce                	mv	a1,s3
20415050:	854a                	mv	a0,s2
20415052:	515050ef          	jal	ra,2041ad66 <__ssprint_r>
20415056:	12051c63          	bnez	a0,2041518e <_svfprintf_r+0x15ec>
2041505a:	0fc10b93          	addi	s7,sp,252
2041505e:	578e                	lw	a5,224(sp)
20415060:	090c                	addi	a1,sp,144
20415062:	1108                	addi	a0,sp,160
20415064:	d13e                	sw	a5,160(sp)
20415066:	579e                	lw	a5,228(sp)
20415068:	fffa0a93          	addi	s5,s4,-1
2041506c:	c902                	sw	zero,144(sp)
2041506e:	d33e                	sw	a5,164(sp)
20415070:	57ae                	lw	a5,232(sp)
20415072:	cb02                	sw	zero,148(sp)
20415074:	cd02                	sw	zero,152(sp)
20415076:	d53e                	sw	a5,168(sp)
20415078:	57be                	lw	a5,236(sp)
2041507a:	cf02                	sw	zero,156(sp)
2041507c:	d73e                	sw	a5,172(sp)
2041507e:	0d3080ef          	jal	ra,2041d950 <__eqtf2>
20415082:	cd21                	beqz	a0,204150da <_svfprintf_r+0x1538>
20415084:	47fe                	lw	a5,220(sp)
20415086:	476e                	lw	a4,216(sp)
20415088:	0485                	addi	s1,s1,1
2041508a:	17fd                	addi	a5,a5,-1
2041508c:	97d2                	add	a5,a5,s4
2041508e:	0705                	addi	a4,a4,1
20415090:	009ba023          	sw	s1,0(s7)
20415094:	015ba223          	sw	s5,4(s7)
20415098:	cfbe                	sw	a5,220(sp)
2041509a:	cdba                	sw	a4,216(sp)
2041509c:	479d                	li	a5,7
2041509e:	0ba1                	addi	s7,s7,8
204150a0:	00e7da63          	ble	a4,a5,204150b4 <_svfprintf_r+0x1512>
204150a4:	09d0                	addi	a2,sp,212
204150a6:	85ce                	mv	a1,s3
204150a8:	854a                	mv	a0,s2
204150aa:	4bd050ef          	jal	ra,2041ad66 <__ssprint_r>
204150ae:	e165                	bnez	a0,2041518e <_svfprintf_r+0x15ec>
204150b0:	0fc10b93          	addi	s7,sp,252
204150b4:	01dc                	addi	a5,sp,196
204150b6:	46d6                	lw	a3,84(sp)
204150b8:	00fba023          	sw	a5,0(s7)
204150bc:	47fe                	lw	a5,220(sp)
204150be:	00dba223          	sw	a3,4(s7)
204150c2:	471d                	li	a4,7
204150c4:	97b6                	add	a5,a5,a3
204150c6:	cfbe                	sw	a5,220(sp)
204150c8:	47ee                	lw	a5,216(sp)
204150ca:	008b8893          	addi	a7,s7,8
204150ce:	0785                	addi	a5,a5,1
204150d0:	cdbe                	sw	a5,216(sp)
204150d2:	aef756e3          	ble	a5,a4,20414bbe <_svfprintf_r+0x101c>
204150d6:	f92ff06f          	j	20414868 <_svfprintf_r+0xcc6>
204150da:	fd505de3          	blez	s5,204150b4 <_svfprintf_r+0x1512>
204150de:	44c1                	li	s1,16
204150e0:	4c1d                	li	s8,7
204150e2:	476e                	lw	a4,216(sp)
204150e4:	47fe                	lw	a5,220(sp)
204150e6:	008b8693          	addi	a3,s7,8
204150ea:	0705                	addi	a4,a4,1
204150ec:	0354c063          	blt	s1,s5,2041510c <_svfprintf_r+0x156a>
204150f0:	20422637          	lui	a2,0x20422
204150f4:	97d6                	add	a5,a5,s5
204150f6:	cc060613          	addi	a2,a2,-832 # 20421cc0 <zeroes.4369>
204150fa:	00cba023          	sw	a2,0(s7)
204150fe:	015ba223          	sw	s5,4(s7)
20415102:	cfbe                	sw	a5,220(sp)
20415104:	cdba                	sw	a4,216(sp)
20415106:	479d                	li	a5,7
20415108:	8bb6                	mv	s7,a3
2041510a:	bf59                	j	204150a0 <_svfprintf_r+0x14fe>
2041510c:	204225b7          	lui	a1,0x20422
20415110:	cc058593          	addi	a1,a1,-832 # 20421cc0 <zeroes.4369>
20415114:	07c1                	addi	a5,a5,16
20415116:	00bba023          	sw	a1,0(s7)
2041511a:	009ba223          	sw	s1,4(s7)
2041511e:	cfbe                	sw	a5,220(sp)
20415120:	cdba                	sw	a4,216(sp)
20415122:	00ec5963          	ble	a4,s8,20415134 <_svfprintf_r+0x1592>
20415126:	09d0                	addi	a2,sp,212
20415128:	85ce                	mv	a1,s3
2041512a:	854a                	mv	a0,s2
2041512c:	43b050ef          	jal	ra,2041ad66 <__ssprint_r>
20415130:	ed39                	bnez	a0,2041518e <_svfprintf_r+0x15ec>
20415132:	19f4                	addi	a3,sp,252
20415134:	1ac1                	addi	s5,s5,-16
20415136:	8bb6                	mv	s7,a3
20415138:	b76d                	j	204150e2 <_svfprintf_r+0x1540>
2041513a:	00e8a223          	sw	a4,4(a7)
2041513e:	cfee                	sw	s11,220(sp)
20415140:	cdbe                	sw	a5,216(sp)
20415142:	471d                	li	a4,7
20415144:	f6f758e3          	ble	a5,a4,204150b4 <_svfprintf_r+0x1512>
20415148:	bfb1                	j	204150a4 <_svfprintf_r+0x1502>
2041514a:	4586                	lw	a1,64(sp)
2041514c:	56d2                	lw	a3,52(sp)
2041514e:	40d58433          	sub	s0,a1,a3
20415152:	a68059e3          	blez	s0,20414bc4 <_svfprintf_r+0x1022>
20415156:	204224b7          	lui	s1,0x20422
2041515a:	4ac1                	li	s5,16
2041515c:	cb048493          	addi	s1,s1,-848 # 20421cb0 <blanks.4368>
20415160:	4b9d                	li	s7,7
20415162:	47ee                	lw	a5,216(sp)
20415164:	0098a023          	sw	s1,0(a7)
20415168:	477e                	lw	a4,220(sp)
2041516a:	0785                	addi	a5,a5,1
2041516c:	028acb63          	blt	s5,s0,204151a2 <_svfprintf_r+0x1600>
20415170:	0088a223          	sw	s0,4(a7)
20415174:	943a                	add	s0,s0,a4
20415176:	cfa2                	sw	s0,220(sp)
20415178:	cdbe                	sw	a5,216(sp)
2041517a:	471d                	li	a4,7
2041517c:	a4f754e3          	ble	a5,a4,20414bc4 <_svfprintf_r+0x1022>
20415180:	09d0                	addi	a2,sp,212
20415182:	85ce                	mv	a1,s3
20415184:	854a                	mv	a0,s2
20415186:	3e1050ef          	jal	ra,2041ad66 <__ssprint_r>
2041518a:	a2050de3          	beqz	a0,20414bc4 <_svfprintf_r+0x1022>
2041518e:	5792                	lw	a5,36(sp)
20415190:	e399                	bnez	a5,20415196 <_svfprintf_r+0x15f4>
20415192:	e89fe06f          	j	2041401a <_svfprintf_r+0x478>
20415196:	85be                	mv	a1,a5
20415198:	854a                	mv	a0,s2
2041519a:	14b020ef          	jal	ra,20417ae4 <_free_r>
2041519e:	e7dfe06f          	j	2041401a <_svfprintf_r+0x478>
204151a2:	0741                	addi	a4,a4,16
204151a4:	0158a223          	sw	s5,4(a7)
204151a8:	cfba                	sw	a4,220(sp)
204151aa:	cdbe                	sw	a5,216(sp)
204151ac:	08a1                	addi	a7,a7,8
204151ae:	00fbda63          	ble	a5,s7,204151c2 <_svfprintf_r+0x1620>
204151b2:	09d0                	addi	a2,sp,212
204151b4:	85ce                	mv	a1,s3
204151b6:	854a                	mv	a0,s2
204151b8:	3af050ef          	jal	ra,2041ad66 <__ssprint_r>
204151bc:	f969                	bnez	a0,2041518e <_svfprintf_r+0x15ec>
204151be:	0fc10893          	addi	a7,sp,252
204151c2:	1441                	addi	s0,s0,-16
204151c4:	bf79                	j	20415162 <_svfprintf_r+0x15c0>
204151c6:	5592                	lw	a1,36(sp)
204151c8:	854a                	mv	a0,s2
204151ca:	11b020ef          	jal	ra,20417ae4 <_free_r>
204151ce:	b405                	j	20414bee <_svfprintf_r+0x104c>
204151d0:	47fe                	lw	a5,220(sp)
204151d2:	e399                	bnez	a5,204151d8 <_svfprintf_r+0x1636>
204151d4:	e47fe06f          	j	2041401a <_svfprintf_r+0x478>
204151d8:	09d0                	addi	a2,sp,212
204151da:	85ce                	mv	a1,s3
204151dc:	854a                	mv	a0,s2
204151de:	389050ef          	jal	ra,2041ad66 <__ssprint_r>
204151e2:	e39fe06f          	j	2041401a <_svfprintf_r+0x478>

204151e6 <__sprint_r>:
204151e6:	461c                	lw	a5,8(a2)
204151e8:	7179                	addi	sp,sp,-48
204151ea:	d422                	sw	s0,40(sp)
204151ec:	d606                	sw	ra,44(sp)
204151ee:	d226                	sw	s1,36(sp)
204151f0:	d04a                	sw	s2,32(sp)
204151f2:	ce4e                	sw	s3,28(sp)
204151f4:	cc52                	sw	s4,24(sp)
204151f6:	ca56                	sw	s5,20(sp)
204151f8:	c85a                	sw	s6,16(sp)
204151fa:	c65e                	sw	s7,12(sp)
204151fc:	c462                	sw	s8,8(sp)
204151fe:	8432                	mv	s0,a2
20415200:	e385                	bnez	a5,20415220 <__sprint_r+0x3a>
20415202:	00062223          	sw	zero,4(a2)
20415206:	4501                	li	a0,0
20415208:	50b2                	lw	ra,44(sp)
2041520a:	5422                	lw	s0,40(sp)
2041520c:	5492                	lw	s1,36(sp)
2041520e:	5902                	lw	s2,32(sp)
20415210:	49f2                	lw	s3,28(sp)
20415212:	4a62                	lw	s4,24(sp)
20415214:	4ad2                	lw	s5,20(sp)
20415216:	4b42                	lw	s6,16(sp)
20415218:	4bb2                	lw	s7,12(sp)
2041521a:	4c22                	lw	s8,8(sp)
2041521c:	6145                	addi	sp,sp,48
2041521e:	8082                	ret
20415220:	51fc                	lw	a5,100(a1)
20415222:	892e                	mv	s2,a1
20415224:	01279713          	slli	a4,a5,0x12
20415228:	04075a63          	bgez	a4,2041527c <__sprint_r+0x96>
2041522c:	4204                	lw	s1,0(a2)
2041522e:	8a2a                	mv	s4,a0
20415230:	5bfd                	li	s7,-1
20415232:	441c                	lw	a5,8(s0)
20415234:	e799                	bnez	a5,20415242 <__sprint_r+0x5c>
20415236:	4501                	li	a0,0
20415238:	00042423          	sw	zero,8(s0)
2041523c:	00042223          	sw	zero,4(s0)
20415240:	b7e1                	j	20415208 <__sprint_r+0x22>
20415242:	0044a983          	lw	s3,4(s1)
20415246:	0004ab03          	lw	s6,0(s1)
2041524a:	4a81                	li	s5,0
2041524c:	0029dc13          	srli	s8,s3,0x2
20415250:	018acb63          	blt	s5,s8,20415266 <__sprint_r+0x80>
20415254:	441c                	lw	a5,8(s0)
20415256:	ffc9f993          	andi	s3,s3,-4
2041525a:	04a1                	addi	s1,s1,8
2041525c:	413789b3          	sub	s3,a5,s3
20415260:	01342423          	sw	s3,8(s0)
20415264:	b7f9                	j	20415232 <__sprint_r+0x4c>
20415266:	000b2583          	lw	a1,0(s6)
2041526a:	864a                	mv	a2,s2
2041526c:	8552                	mv	a0,s4
2041526e:	76e020ef          	jal	ra,204179dc <_fputwc_r>
20415272:	0b11                	addi	s6,s6,4
20415274:	01750763          	beq	a0,s7,20415282 <__sprint_r+0x9c>
20415278:	0a85                	addi	s5,s5,1
2041527a:	bfd9                	j	20415250 <__sprint_r+0x6a>
2041527c:	213020ef          	jal	ra,20417c8e <__sfvwrite_r>
20415280:	bf65                	j	20415238 <__sprint_r+0x52>
20415282:	557d                	li	a0,-1
20415284:	bf55                	j	20415238 <__sprint_r+0x52>

20415286 <_vfiprintf_r>:
20415286:	7169                	addi	sp,sp,-304
20415288:	12812423          	sw	s0,296(sp)
2041528c:	13212023          	sw	s2,288(sp)
20415290:	11312e23          	sw	s3,284(sp)
20415294:	11412c23          	sw	s4,280(sp)
20415298:	12112623          	sw	ra,300(sp)
2041529c:	12912223          	sw	s1,292(sp)
204152a0:	11512a23          	sw	s5,276(sp)
204152a4:	11612823          	sw	s6,272(sp)
204152a8:	11712623          	sw	s7,268(sp)
204152ac:	11812423          	sw	s8,264(sp)
204152b0:	11912223          	sw	s9,260(sp)
204152b4:	11a12023          	sw	s10,256(sp)
204152b8:	dfee                	sw	s11,252(sp)
204152ba:	89aa                	mv	s3,a0
204152bc:	842e                	mv	s0,a1
204152be:	8a32                	mv	s4,a2
204152c0:	8936                	mv	s2,a3
204152c2:	c509                	beqz	a0,204152cc <_vfiprintf_r+0x46>
204152c4:	5d1c                	lw	a5,56(a0)
204152c6:	e399                	bnez	a5,204152cc <_vfiprintf_r+0x46>
204152c8:	550020ef          	jal	ra,20417818 <__sinit>
204152cc:	00c41783          	lh	a5,12(s0)
204152d0:	01279713          	slli	a4,a5,0x12
204152d4:	00074b63          	bltz	a4,204152ea <_vfiprintf_r+0x64>
204152d8:	6689                	lui	a3,0x2
204152da:	5078                	lw	a4,100(s0)
204152dc:	8fd5                	or	a5,a5,a3
204152de:	00f41623          	sh	a5,12(s0)
204152e2:	77f9                	lui	a5,0xffffe
204152e4:	17fd                	addi	a5,a5,-1
204152e6:	8ff9                	and	a5,a5,a4
204152e8:	d07c                	sw	a5,100(s0)
204152ea:	00c45783          	lhu	a5,12(s0)
204152ee:	8ba1                	andi	a5,a5,8
204152f0:	c3a5                	beqz	a5,20415350 <_vfiprintf_r+0xca>
204152f2:	481c                	lw	a5,16(s0)
204152f4:	cfb1                	beqz	a5,20415350 <_vfiprintf_r+0xca>
204152f6:	00c45783          	lhu	a5,12(s0)
204152fa:	4729                	li	a4,10
204152fc:	8be9                	andi	a5,a5,26
204152fe:	06e79063          	bne	a5,a4,2041535e <_vfiprintf_r+0xd8>
20415302:	00e41783          	lh	a5,14(s0)
20415306:	0407cc63          	bltz	a5,2041535e <_vfiprintf_r+0xd8>
2041530a:	86ca                	mv	a3,s2
2041530c:	8652                	mv	a2,s4
2041530e:	85a2                	mv	a1,s0
20415310:	854e                	mv	a0,s3
20415312:	061000ef          	jal	ra,20415b72 <__sbprintf>
20415316:	8baa                	mv	s7,a0
20415318:	12c12083          	lw	ra,300(sp)
2041531c:	12812403          	lw	s0,296(sp)
20415320:	855e                	mv	a0,s7
20415322:	12412483          	lw	s1,292(sp)
20415326:	12012903          	lw	s2,288(sp)
2041532a:	11c12983          	lw	s3,284(sp)
2041532e:	11812a03          	lw	s4,280(sp)
20415332:	11412a83          	lw	s5,276(sp)
20415336:	11012b03          	lw	s6,272(sp)
2041533a:	10c12b83          	lw	s7,268(sp)
2041533e:	10812c03          	lw	s8,264(sp)
20415342:	10412c83          	lw	s9,260(sp)
20415346:	10012d03          	lw	s10,256(sp)
2041534a:	5dfe                	lw	s11,252(sp)
2041534c:	6155                	addi	sp,sp,304
2041534e:	8082                	ret
20415350:	85a2                	mv	a1,s0
20415352:	854e                	mv	a0,s3
20415354:	066020ef          	jal	ra,204173ba <__swsetup_r>
20415358:	dd59                	beqz	a0,204152f6 <_vfiprintf_r+0x70>
2041535a:	5bfd                	li	s7,-1
2041535c:	bf75                	j	20415318 <_vfiprintf_r+0x92>
2041535e:	04c10b13          	addi	s6,sp,76
20415362:	c0da                	sw	s6,64(sp)
20415364:	c482                	sw	zero,72(sp)
20415366:	c282                	sw	zero,68(sp)
20415368:	875a                	mv	a4,s6
2041536a:	d202                	sw	zero,36(sp)
2041536c:	ce02                	sw	zero,28(sp)
2041536e:	d002                	sw	zero,32(sp)
20415370:	d402                	sw	zero,40(sp)
20415372:	4b81                	li	s7,0
20415374:	84d2                	mv	s1,s4
20415376:	02500693          	li	a3,37
2041537a:	0004c783          	lbu	a5,0(s1)
2041537e:	c399                	beqz	a5,20415384 <_vfiprintf_r+0xfe>
20415380:	06d79c63          	bne	a5,a3,204153f8 <_vfiprintf_r+0x172>
20415384:	41448ab3          	sub	s5,s1,s4
20415388:	020a8863          	beqz	s5,204153b8 <_vfiprintf_r+0x132>
2041538c:	47a6                	lw	a5,72(sp)
2041538e:	01472023          	sw	s4,0(a4)
20415392:	01572223          	sw	s5,4(a4)
20415396:	97d6                	add	a5,a5,s5
20415398:	c4be                	sw	a5,72(sp)
2041539a:	4796                	lw	a5,68(sp)
2041539c:	469d                	li	a3,7
2041539e:	0721                	addi	a4,a4,8
204153a0:	0785                	addi	a5,a5,1
204153a2:	c2be                	sw	a5,68(sp)
204153a4:	00f6d963          	ble	a5,a3,204153b6 <_vfiprintf_r+0x130>
204153a8:	0090                	addi	a2,sp,64
204153aa:	85a2                	mv	a1,s0
204153ac:	854e                	mv	a0,s3
204153ae:	3d25                	jal	204151e6 <__sprint_r>
204153b0:	76051963          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
204153b4:	875a                	mv	a4,s6
204153b6:	9bd6                	add	s7,s7,s5
204153b8:	0004c783          	lbu	a5,0(s1)
204153bc:	78078c63          	beqz	a5,20415b54 <_vfiprintf_r+0x8ce>
204153c0:	00148a13          	addi	s4,s1,1
204153c4:	02010da3          	sb	zero,59(sp)
204153c8:	54fd                	li	s1,-1
204153ca:	4a81                	li	s5,0
204153cc:	4d01                	li	s10,0
204153ce:	4c29                	li	s8,10
204153d0:	02a00c93          	li	s9,42
204153d4:	05a00813          	li	a6,90
204153d8:	45a5                	li	a1,9
204153da:	000a4603          	lbu	a2,0(s4)
204153de:	0a05                	addi	s4,s4,1
204153e0:	fe060693          	addi	a3,a2,-32
204153e4:	66d86663          	bltu	a6,a3,20415a50 <_vfiprintf_r+0x7ca>
204153e8:	204227b7          	lui	a5,0x20422
204153ec:	068a                	slli	a3,a3,0x2
204153ee:	d3c78793          	addi	a5,a5,-708 # 20421d3c <zeroes.4369+0x7c>
204153f2:	96be                	add	a3,a3,a5
204153f4:	4294                	lw	a3,0(a3)
204153f6:	8682                	jr	a3
204153f8:	0485                	addi	s1,s1,1
204153fa:	b741                	j	2041537a <_vfiprintf_r+0xf4>
204153fc:	204226b7          	lui	a3,0x20422
20415400:	d2468693          	addi	a3,a3,-732 # 20421d24 <zeroes.4369+0x64>
20415404:	d236                	sw	a3,36(sp)
20415406:	020d7693          	andi	a3,s10,32
2041540a:	4e068463          	beqz	a3,204158f2 <_vfiprintf_r+0x66c>
2041540e:	091d                	addi	s2,s2,7
20415410:	ff897913          	andi	s2,s2,-8
20415414:	00092883          	lw	a7,0(s2)
20415418:	00492c83          	lw	s9,4(s2)
2041541c:	00890c13          	addi	s8,s2,8
20415420:	001d7693          	andi	a3,s10,1
20415424:	ce81                	beqz	a3,2041543c <_vfiprintf_r+0x1b6>
20415426:	0198e6b3          	or	a3,a7,s9
2041542a:	ca89                	beqz	a3,2041543c <_vfiprintf_r+0x1b6>
2041542c:	03000693          	li	a3,48
20415430:	02d10e23          	sb	a3,60(sp)
20415434:	02c10ea3          	sb	a2,61(sp)
20415438:	002d6d13          	ori	s10,s10,2
2041543c:	bffd7d13          	andi	s10,s10,-1025
20415440:	a4b5                	j	204156ac <_vfiprintf_r+0x426>
20415442:	854e                	mv	a0,s3
20415444:	c83a                	sw	a4,16(sp)
20415446:	286040ef          	jal	ra,204196cc <_localeconv_r>
2041544a:	4148                	lw	a0,4(a0)
2041544c:	d42a                	sw	a0,40(sp)
2041544e:	bdefe0ef          	jal	ra,2041382c <strlen>
20415452:	d02a                	sw	a0,32(sp)
20415454:	854e                	mv	a0,s3
20415456:	276040ef          	jal	ra,204196cc <_localeconv_r>
2041545a:	4508                	lw	a0,8(a0)
2041545c:	5782                	lw	a5,32(sp)
2041545e:	4742                	lw	a4,16(sp)
20415460:	ce2a                	sw	a0,28(sp)
20415462:	dbad                	beqz	a5,204153d4 <_vfiprintf_r+0x14e>
20415464:	d925                	beqz	a0,204153d4 <_vfiprintf_r+0x14e>
20415466:	00054683          	lbu	a3,0(a0)
2041546a:	d6ad                	beqz	a3,204153d4 <_vfiprintf_r+0x14e>
2041546c:	400d6d13          	ori	s10,s10,1024
20415470:	b795                	j	204153d4 <_vfiprintf_r+0x14e>
20415472:	03b14683          	lbu	a3,59(sp)
20415476:	feb9                	bnez	a3,204153d4 <_vfiprintf_r+0x14e>
20415478:	02000693          	li	a3,32
2041547c:	02d10da3          	sb	a3,59(sp)
20415480:	bf91                	j	204153d4 <_vfiprintf_r+0x14e>
20415482:	001d6d13          	ori	s10,s10,1
20415486:	b7b9                	j	204153d4 <_vfiprintf_r+0x14e>
20415488:	00092a83          	lw	s5,0(s2)
2041548c:	0911                	addi	s2,s2,4
2041548e:	f40ad3e3          	bgez	s5,204153d4 <_vfiprintf_r+0x14e>
20415492:	41500ab3          	neg	s5,s5
20415496:	004d6d13          	ori	s10,s10,4
2041549a:	bf2d                	j	204153d4 <_vfiprintf_r+0x14e>
2041549c:	02b00693          	li	a3,43
204154a0:	bff1                	j	2041547c <_vfiprintf_r+0x1f6>
204154a2:	000a4603          	lbu	a2,0(s4)
204154a6:	001a0693          	addi	a3,s4,1
204154aa:	03961863          	bne	a2,s9,204154da <_vfiprintf_r+0x254>
204154ae:	00092483          	lw	s1,0(s2)
204154b2:	00490613          	addi	a2,s2,4
204154b6:	0004d363          	bgez	s1,204154bc <_vfiprintf_r+0x236>
204154ba:	54fd                	li	s1,-1
204154bc:	8932                	mv	s2,a2
204154be:	8a36                	mv	s4,a3
204154c0:	bf11                	j	204153d4 <_vfiprintf_r+0x14e>
204154c2:	038484b3          	mul	s1,s1,s8
204154c6:	0685                	addi	a3,a3,1
204154c8:	fff6c603          	lbu	a2,-1(a3)
204154cc:	94aa                	add	s1,s1,a0
204154ce:	fd060513          	addi	a0,a2,-48
204154d2:	fea5f8e3          	bleu	a0,a1,204154c2 <_vfiprintf_r+0x23c>
204154d6:	8a36                	mv	s4,a3
204154d8:	b721                	j	204153e0 <_vfiprintf_r+0x15a>
204154da:	4481                	li	s1,0
204154dc:	bfcd                	j	204154ce <_vfiprintf_r+0x248>
204154de:	080d6d13          	ori	s10,s10,128
204154e2:	bdcd                	j	204153d4 <_vfiprintf_r+0x14e>
204154e4:	86d2                	mv	a3,s4
204154e6:	4a81                	li	s5,0
204154e8:	038a8ab3          	mul	s5,s5,s8
204154ec:	fd060613          	addi	a2,a2,-48
204154f0:	0685                	addi	a3,a3,1
204154f2:	9ab2                	add	s5,s5,a2
204154f4:	fff6c603          	lbu	a2,-1(a3)
204154f8:	fd060513          	addi	a0,a2,-48
204154fc:	fea5f6e3          	bleu	a0,a1,204154e8 <_vfiprintf_r+0x262>
20415500:	bfd9                	j	204154d6 <_vfiprintf_r+0x250>
20415502:	000a4603          	lbu	a2,0(s4)
20415506:	06800693          	li	a3,104
2041550a:	00d61663          	bne	a2,a3,20415516 <_vfiprintf_r+0x290>
2041550e:	0a05                	addi	s4,s4,1
20415510:	200d6d13          	ori	s10,s10,512
20415514:	b5c1                	j	204153d4 <_vfiprintf_r+0x14e>
20415516:	040d6d13          	ori	s10,s10,64
2041551a:	bd6d                	j	204153d4 <_vfiprintf_r+0x14e>
2041551c:	000a4603          	lbu	a2,0(s4)
20415520:	06c00693          	li	a3,108
20415524:	00d61663          	bne	a2,a3,20415530 <_vfiprintf_r+0x2aa>
20415528:	0a05                	addi	s4,s4,1
2041552a:	020d6d13          	ori	s10,s10,32
2041552e:	b55d                	j	204153d4 <_vfiprintf_r+0x14e>
20415530:	010d6d13          	ori	s10,s10,16
20415534:	b545                	j	204153d4 <_vfiprintf_r+0x14e>
20415536:	00092683          	lw	a3,0(s2)
2041553a:	00490c13          	addi	s8,s2,4
2041553e:	02010da3          	sb	zero,59(sp)
20415542:	08d10623          	sb	a3,140(sp)
20415546:	4485                	li	s1,1
20415548:	4c81                	li	s9,0
2041554a:	08c10913          	addi	s2,sp,140
2041554e:	a269                	j	204156d8 <_vfiprintf_r+0x452>
20415550:	010d6d13          	ori	s10,s10,16
20415554:	020d7693          	andi	a3,s10,32
20415558:	c6b9                	beqz	a3,204155a6 <_vfiprintf_r+0x320>
2041555a:	091d                	addi	s2,s2,7
2041555c:	ff897913          	andi	s2,s2,-8
20415560:	00092883          	lw	a7,0(s2)
20415564:	00492c83          	lw	s9,4(s2)
20415568:	00890c13          	addi	s8,s2,8
2041556c:	000cde63          	bgez	s9,20415588 <_vfiprintf_r+0x302>
20415570:	411008b3          	neg	a7,a7
20415574:	011036b3          	snez	a3,a7
20415578:	41900333          	neg	t1,s9
2041557c:	40d30cb3          	sub	s9,t1,a3
20415580:	02d00693          	li	a3,45
20415584:	02d10da3          	sb	a3,59(sp)
20415588:	56fd                	li	a3,-1
2041558a:	38d49963          	bne	s1,a3,2041591c <_vfiprintf_r+0x696>
2041558e:	3e0c9663          	bnez	s9,2041597a <_vfiprintf_r+0x6f4>
20415592:	46a5                	li	a3,9
20415594:	3f16e363          	bltu	a3,a7,2041597a <_vfiprintf_r+0x6f4>
20415598:	03088893          	addi	a7,a7,48
2041559c:	0f1107a3          	sb	a7,239(sp)
204155a0:	0ef10913          	addi	s2,sp,239
204155a4:	a6e1                	j	2041596c <_vfiprintf_r+0x6e6>
204155a6:	010d7693          	andi	a3,s10,16
204155aa:	00490c13          	addi	s8,s2,4
204155ae:	c691                	beqz	a3,204155ba <_vfiprintf_r+0x334>
204155b0:	00092883          	lw	a7,0(s2)
204155b4:	41f8dc93          	srai	s9,a7,0x1f
204155b8:	bf55                	j	2041556c <_vfiprintf_r+0x2e6>
204155ba:	040d7693          	andi	a3,s10,64
204155be:	00092883          	lw	a7,0(s2)
204155c2:	c689                	beqz	a3,204155cc <_vfiprintf_r+0x346>
204155c4:	08c2                	slli	a7,a7,0x10
204155c6:	4108d893          	srai	a7,a7,0x10
204155ca:	b7ed                	j	204155b4 <_vfiprintf_r+0x32e>
204155cc:	200d7693          	andi	a3,s10,512
204155d0:	d2f5                	beqz	a3,204155b4 <_vfiprintf_r+0x32e>
204155d2:	08e2                	slli	a7,a7,0x18
204155d4:	4188d893          	srai	a7,a7,0x18
204155d8:	bff1                	j	204155b4 <_vfiprintf_r+0x32e>
204155da:	020d7613          	andi	a2,s10,32
204155de:	00092683          	lw	a3,0(s2)
204155e2:	0911                	addi	s2,s2,4
204155e4:	c619                	beqz	a2,204155f2 <_vfiprintf_r+0x36c>
204155e6:	41fbd793          	srai	a5,s7,0x1f
204155ea:	0176a023          	sw	s7,0(a3)
204155ee:	c2dc                	sw	a5,4(a3)
204155f0:	b351                	j	20415374 <_vfiprintf_r+0xee>
204155f2:	010d7613          	andi	a2,s10,16
204155f6:	c601                	beqz	a2,204155fe <_vfiprintf_r+0x378>
204155f8:	0176a023          	sw	s7,0(a3)
204155fc:	bba5                	j	20415374 <_vfiprintf_r+0xee>
204155fe:	040d7613          	andi	a2,s10,64
20415602:	c609                	beqz	a2,2041560c <_vfiprintf_r+0x386>
20415604:	87de                	mv	a5,s7
20415606:	00f69023          	sh	a5,0(a3)
2041560a:	b3ad                	j	20415374 <_vfiprintf_r+0xee>
2041560c:	200d7793          	andi	a5,s10,512
20415610:	d7e5                	beqz	a5,204155f8 <_vfiprintf_r+0x372>
20415612:	87de                	mv	a5,s7
20415614:	00f68023          	sb	a5,0(a3)
20415618:	bbb1                	j	20415374 <_vfiprintf_r+0xee>
2041561a:	010d6d13          	ori	s10,s10,16
2041561e:	020d7693          	andi	a3,s10,32
20415622:	ce9d                	beqz	a3,20415660 <_vfiprintf_r+0x3da>
20415624:	091d                	addi	s2,s2,7
20415626:	ff897913          	andi	s2,s2,-8
2041562a:	00092883          	lw	a7,0(s2)
2041562e:	00492c83          	lw	s9,4(s2)
20415632:	00890c13          	addi	s8,s2,8
20415636:	bffd7d13          	andi	s10,s10,-1025
2041563a:	4681                	li	a3,0
2041563c:	02010da3          	sb	zero,59(sp)
20415640:	567d                	li	a2,-1
20415642:	2ec48063          	beq	s1,a2,20415922 <_vfiprintf_r+0x69c>
20415646:	866a                	mv	a2,s10
20415648:	0198e5b3          	or	a1,a7,s9
2041564c:	f7fd7d13          	andi	s10,s10,-129
20415650:	2c059963          	bnez	a1,20415922 <_vfiprintf_r+0x69c>
20415654:	3e048463          	beqz	s1,20415a3c <_vfiprintf_r+0x7b6>
20415658:	4605                	li	a2,1
2041565a:	2cc69763          	bne	a3,a2,20415928 <_vfiprintf_r+0x6a2>
2041565e:	bf2d                	j	20415598 <_vfiprintf_r+0x312>
20415660:	010d7693          	andi	a3,s10,16
20415664:	00490c13          	addi	s8,s2,4
20415668:	c681                	beqz	a3,20415670 <_vfiprintf_r+0x3ea>
2041566a:	00092883          	lw	a7,0(s2)
2041566e:	a031                	j	2041567a <_vfiprintf_r+0x3f4>
20415670:	040d7693          	andi	a3,s10,64
20415674:	c689                	beqz	a3,2041567e <_vfiprintf_r+0x3f8>
20415676:	00095883          	lhu	a7,0(s2)
2041567a:	4c81                	li	s9,0
2041567c:	bf6d                	j	20415636 <_vfiprintf_r+0x3b0>
2041567e:	200d7693          	andi	a3,s10,512
20415682:	d6e5                	beqz	a3,2041566a <_vfiprintf_r+0x3e4>
20415684:	00094883          	lbu	a7,0(s2)
20415688:	bfcd                	j	2041567a <_vfiprintf_r+0x3f4>
2041568a:	76e1                	lui	a3,0xffff8
2041568c:	8306c693          	xori	a3,a3,-2000
20415690:	02d11e23          	sh	a3,60(sp)
20415694:	00092883          	lw	a7,0(s2)
20415698:	204226b7          	lui	a3,0x20422
2041569c:	d1068693          	addi	a3,a3,-752 # 20421d10 <zeroes.4369+0x50>
204156a0:	00490c13          	addi	s8,s2,4
204156a4:	4c81                	li	s9,0
204156a6:	002d6d13          	ori	s10,s10,2
204156aa:	d236                	sw	a3,36(sp)
204156ac:	4689                	li	a3,2
204156ae:	b779                	j	2041563c <_vfiprintf_r+0x3b6>
204156b0:	02010da3          	sb	zero,59(sp)
204156b4:	56fd                	li	a3,-1
204156b6:	00490c13          	addi	s8,s2,4
204156ba:	00092903          	lw	s2,0(s2)
204156be:	1cd48863          	beq	s1,a3,2041588e <_vfiprintf_r+0x608>
204156c2:	8626                	mv	a2,s1
204156c4:	4581                	li	a1,0
204156c6:	854a                	mv	a0,s2
204156c8:	c83a                	sw	a4,16(sp)
204156ca:	5ca040ef          	jal	ra,20419c94 <memchr>
204156ce:	4c81                	li	s9,0
204156d0:	4742                	lw	a4,16(sp)
204156d2:	c119                	beqz	a0,204156d8 <_vfiprintf_r+0x452>
204156d4:	412504b3          	sub	s1,a0,s2
204156d8:	cc66                	sw	s9,24(sp)
204156da:	009cd363          	ble	s1,s9,204156e0 <_vfiprintf_r+0x45a>
204156de:	cc26                	sw	s1,24(sp)
204156e0:	03b14683          	lbu	a3,59(sp)
204156e4:	c681                	beqz	a3,204156ec <_vfiprintf_r+0x466>
204156e6:	47e2                	lw	a5,24(sp)
204156e8:	0785                	addi	a5,a5,1
204156ea:	cc3e                	sw	a5,24(sp)
204156ec:	002d7d93          	andi	s11,s10,2
204156f0:	000d8563          	beqz	s11,204156fa <_vfiprintf_r+0x474>
204156f4:	47e2                	lw	a5,24(sp)
204156f6:	0789                	addi	a5,a5,2
204156f8:	cc3e                	sw	a5,24(sp)
204156fa:	084d7793          	andi	a5,s10,132
204156fe:	d63e                	sw	a5,44(sp)
20415700:	e7a1                	bnez	a5,20415748 <_vfiprintf_r+0x4c2>
20415702:	47e2                	lw	a5,24(sp)
20415704:	40fa86b3          	sub	a3,s5,a5
20415708:	04d05063          	blez	a3,20415748 <_vfiprintf_r+0x4c2>
2041570c:	204227b7          	lui	a5,0x20422
20415710:	48c1                	li	a7,16
20415712:	ea878813          	addi	a6,a5,-344 # 20421ea8 <blanks.4359>
20415716:	431d                	li	t1,7
20415718:	4616                	lw	a2,68(sp)
2041571a:	01072023          	sw	a6,0(a4)
2041571e:	45a6                	lw	a1,72(sp)
20415720:	0605                	addi	a2,a2,1
20415722:	00870513          	addi	a0,a4,8
20415726:	32d8cd63          	blt	a7,a3,20415a60 <_vfiprintf_r+0x7da>
2041572a:	c354                	sw	a3,4(a4)
2041572c:	96ae                	add	a3,a3,a1
2041572e:	c4b6                	sw	a3,72(sp)
20415730:	c2b2                	sw	a2,68(sp)
20415732:	469d                	li	a3,7
20415734:	872a                	mv	a4,a0
20415736:	00c6d963          	ble	a2,a3,20415748 <_vfiprintf_r+0x4c2>
2041573a:	0090                	addi	a2,sp,64
2041573c:	85a2                	mv	a1,s0
2041573e:	854e                	mv	a0,s3
20415740:	345d                	jal	204151e6 <__sprint_r>
20415742:	3e051063          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415746:	875a                	mv	a4,s6
20415748:	03b14683          	lbu	a3,59(sp)
2041574c:	c69d                	beqz	a3,2041577a <_vfiprintf_r+0x4f4>
2041574e:	03b10613          	addi	a2,sp,59
20415752:	c310                	sw	a2,0(a4)
20415754:	4605                	li	a2,1
20415756:	4696                	lw	a3,68(sp)
20415758:	c350                	sw	a2,4(a4)
2041575a:	4626                	lw	a2,72(sp)
2041575c:	0685                	addi	a3,a3,1
2041575e:	c2b6                	sw	a3,68(sp)
20415760:	0605                	addi	a2,a2,1
20415762:	c4b2                	sw	a2,72(sp)
20415764:	461d                	li	a2,7
20415766:	0721                	addi	a4,a4,8
20415768:	00d65963          	ble	a3,a2,2041577a <_vfiprintf_r+0x4f4>
2041576c:	0090                	addi	a2,sp,64
2041576e:	85a2                	mv	a1,s0
20415770:	854e                	mv	a0,s3
20415772:	3c95                	jal	204151e6 <__sprint_r>
20415774:	3a051763          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415778:	875a                	mv	a4,s6
2041577a:	020d8763          	beqz	s11,204157a8 <_vfiprintf_r+0x522>
2041577e:	1870                	addi	a2,sp,60
20415780:	c310                	sw	a2,0(a4)
20415782:	4609                	li	a2,2
20415784:	4696                	lw	a3,68(sp)
20415786:	c350                	sw	a2,4(a4)
20415788:	4626                	lw	a2,72(sp)
2041578a:	0685                	addi	a3,a3,1
2041578c:	c2b6                	sw	a3,68(sp)
2041578e:	0609                	addi	a2,a2,2
20415790:	c4b2                	sw	a2,72(sp)
20415792:	461d                	li	a2,7
20415794:	0721                	addi	a4,a4,8
20415796:	00d65963          	ble	a3,a2,204157a8 <_vfiprintf_r+0x522>
2041579a:	0090                	addi	a2,sp,64
2041579c:	85a2                	mv	a1,s0
2041579e:	854e                	mv	a0,s3
204157a0:	3499                	jal	204151e6 <__sprint_r>
204157a2:	38051063          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
204157a6:	875a                	mv	a4,s6
204157a8:	57b2                	lw	a5,44(sp)
204157aa:	08000693          	li	a3,128
204157ae:	04d79563          	bne	a5,a3,204157f8 <_vfiprintf_r+0x572>
204157b2:	47e2                	lw	a5,24(sp)
204157b4:	40fa8db3          	sub	s11,s5,a5
204157b8:	05b05063          	blez	s11,204157f8 <_vfiprintf_r+0x572>
204157bc:	4841                	li	a6,16
204157be:	489d                	li	a7,7
204157c0:	4696                	lw	a3,68(sp)
204157c2:	204227b7          	lui	a5,0x20422
204157c6:	eb878793          	addi	a5,a5,-328 # 20421eb8 <zeroes.4360>
204157ca:	c31c                	sw	a5,0(a4)
204157cc:	4626                	lw	a2,72(sp)
204157ce:	0685                	addi	a3,a3,1
204157d0:	00870593          	addi	a1,a4,8
204157d4:	2bb84f63          	blt	a6,s11,20415a92 <_vfiprintf_r+0x80c>
204157d8:	01b72223          	sw	s11,4(a4)
204157dc:	9db2                	add	s11,s11,a2
204157de:	c4ee                	sw	s11,72(sp)
204157e0:	c2b6                	sw	a3,68(sp)
204157e2:	461d                	li	a2,7
204157e4:	872e                	mv	a4,a1
204157e6:	00d65963          	ble	a3,a2,204157f8 <_vfiprintf_r+0x572>
204157ea:	0090                	addi	a2,sp,64
204157ec:	85a2                	mv	a1,s0
204157ee:	854e                	mv	a0,s3
204157f0:	3add                	jal	204151e6 <__sprint_r>
204157f2:	32051863          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
204157f6:	875a                	mv	a4,s6
204157f8:	409c8cb3          	sub	s9,s9,s1
204157fc:	05905063          	blez	s9,2041583c <_vfiprintf_r+0x5b6>
20415800:	4dc1                	li	s11,16
20415802:	481d                	li	a6,7
20415804:	4696                	lw	a3,68(sp)
20415806:	204227b7          	lui	a5,0x20422
2041580a:	eb878793          	addi	a5,a5,-328 # 20421eb8 <zeroes.4360>
2041580e:	c31c                	sw	a5,0(a4)
20415810:	4626                	lw	a2,72(sp)
20415812:	0685                	addi	a3,a3,1
20415814:	00870593          	addi	a1,a4,8
20415818:	2b9dc263          	blt	s11,s9,20415abc <_vfiprintf_r+0x836>
2041581c:	01972223          	sw	s9,4(a4)
20415820:	9cb2                	add	s9,s9,a2
20415822:	c4e6                	sw	s9,72(sp)
20415824:	c2b6                	sw	a3,68(sp)
20415826:	461d                	li	a2,7
20415828:	872e                	mv	a4,a1
2041582a:	00d65963          	ble	a3,a2,2041583c <_vfiprintf_r+0x5b6>
2041582e:	0090                	addi	a2,sp,64
20415830:	85a2                	mv	a1,s0
20415832:	854e                	mv	a0,s3
20415834:	3a4d                	jal	204151e6 <__sprint_r>
20415836:	2e051663          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
2041583a:	875a                	mv	a4,s6
2041583c:	46a6                	lw	a3,72(sp)
2041583e:	c344                	sw	s1,4(a4)
20415840:	01272023          	sw	s2,0(a4)
20415844:	94b6                	add	s1,s1,a3
20415846:	4696                	lw	a3,68(sp)
20415848:	c4a6                	sw	s1,72(sp)
2041584a:	461d                	li	a2,7
2041584c:	0685                	addi	a3,a3,1
2041584e:	c2b6                	sw	a3,68(sp)
20415850:	0721                	addi	a4,a4,8
20415852:	00d65963          	ble	a3,a2,20415864 <_vfiprintf_r+0x5de>
20415856:	0090                	addi	a2,sp,64
20415858:	85a2                	mv	a1,s0
2041585a:	854e                	mv	a0,s3
2041585c:	3269                	jal	204151e6 <__sprint_r>
2041585e:	2c051263          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415862:	875a                	mv	a4,s6
20415864:	004d7793          	andi	a5,s10,4
20415868:	26079d63          	bnez	a5,20415ae2 <_vfiprintf_r+0x85c>
2041586c:	4762                	lw	a4,24(sp)
2041586e:	00ead363          	ble	a4,s5,20415874 <_vfiprintf_r+0x5ee>
20415872:	8aba                	mv	s5,a4
20415874:	47a6                	lw	a5,72(sp)
20415876:	9bd6                	add	s7,s7,s5
20415878:	c799                	beqz	a5,20415886 <_vfiprintf_r+0x600>
2041587a:	0090                	addi	a2,sp,64
2041587c:	85a2                	mv	a1,s0
2041587e:	854e                	mv	a0,s3
20415880:	329d                	jal	204151e6 <__sprint_r>
20415882:	2a051063          	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415886:	c282                	sw	zero,68(sp)
20415888:	8962                	mv	s2,s8
2041588a:	875a                	mv	a4,s6
2041588c:	b4e5                	j	20415374 <_vfiprintf_r+0xee>
2041588e:	854a                	mv	a0,s2
20415890:	c83a                	sw	a4,16(sp)
20415892:	f9bfd0ef          	jal	ra,2041382c <strlen>
20415896:	84aa                	mv	s1,a0
20415898:	4c81                	li	s9,0
2041589a:	4742                	lw	a4,16(sp)
2041589c:	bd35                	j	204156d8 <_vfiprintf_r+0x452>
2041589e:	010d6d13          	ori	s10,s10,16
204158a2:	020d7693          	andi	a3,s10,32
204158a6:	ce81                	beqz	a3,204158be <_vfiprintf_r+0x638>
204158a8:	091d                	addi	s2,s2,7
204158aa:	ff897913          	andi	s2,s2,-8
204158ae:	00092883          	lw	a7,0(s2)
204158b2:	00492c83          	lw	s9,4(s2)
204158b6:	00890c13          	addi	s8,s2,8
204158ba:	4685                	li	a3,1
204158bc:	b341                	j	2041563c <_vfiprintf_r+0x3b6>
204158be:	010d7693          	andi	a3,s10,16
204158c2:	00490c13          	addi	s8,s2,4
204158c6:	c681                	beqz	a3,204158ce <_vfiprintf_r+0x648>
204158c8:	00092883          	lw	a7,0(s2)
204158cc:	a031                	j	204158d8 <_vfiprintf_r+0x652>
204158ce:	040d7693          	andi	a3,s10,64
204158d2:	c689                	beqz	a3,204158dc <_vfiprintf_r+0x656>
204158d4:	00095883          	lhu	a7,0(s2)
204158d8:	4c81                	li	s9,0
204158da:	b7c5                	j	204158ba <_vfiprintf_r+0x634>
204158dc:	200d7693          	andi	a3,s10,512
204158e0:	d6e5                	beqz	a3,204158c8 <_vfiprintf_r+0x642>
204158e2:	00094883          	lbu	a7,0(s2)
204158e6:	bfcd                	j	204158d8 <_vfiprintf_r+0x652>
204158e8:	204226b7          	lui	a3,0x20422
204158ec:	d1068693          	addi	a3,a3,-752 # 20421d10 <zeroes.4369+0x50>
204158f0:	be11                	j	20415404 <_vfiprintf_r+0x17e>
204158f2:	010d7693          	andi	a3,s10,16
204158f6:	00490c13          	addi	s8,s2,4
204158fa:	c681                	beqz	a3,20415902 <_vfiprintf_r+0x67c>
204158fc:	00092883          	lw	a7,0(s2)
20415900:	a031                	j	2041590c <_vfiprintf_r+0x686>
20415902:	040d7693          	andi	a3,s10,64
20415906:	c689                	beqz	a3,20415910 <_vfiprintf_r+0x68a>
20415908:	00095883          	lhu	a7,0(s2)
2041590c:	4c81                	li	s9,0
2041590e:	be09                	j	20415420 <_vfiprintf_r+0x19a>
20415910:	200d7693          	andi	a3,s10,512
20415914:	d6e5                	beqz	a3,204158fc <_vfiprintf_r+0x676>
20415916:	00094883          	lbu	a7,0(s2)
2041591a:	bfcd                	j	2041590c <_vfiprintf_r+0x686>
2041591c:	866a                	mv	a2,s10
2041591e:	4685                	li	a3,1
20415920:	b325                	j	20415648 <_vfiprintf_r+0x3c2>
20415922:	4605                	li	a2,1
20415924:	c6c685e3          	beq	a3,a2,2041558e <_vfiprintf_r+0x308>
20415928:	4609                	li	a2,2
2041592a:	0ec68263          	beq	a3,a2,20415a0e <_vfiprintf_r+0x788>
2041592e:	1994                	addi	a3,sp,240
20415930:	01dc9593          	slli	a1,s9,0x1d
20415934:	0078f613          	andi	a2,a7,7
20415938:	0038d893          	srli	a7,a7,0x3
2041593c:	03060613          	addi	a2,a2,48
20415940:	0115e8b3          	or	a7,a1,a7
20415944:	003cdc93          	srli	s9,s9,0x3
20415948:	fec68fa3          	sb	a2,-1(a3)
2041594c:	0198e5b3          	or	a1,a7,s9
20415950:	fff68913          	addi	s2,a3,-1
20415954:	e18d                	bnez	a1,20415976 <_vfiprintf_r+0x6f0>
20415956:	001d7593          	andi	a1,s10,1
2041595a:	c989                	beqz	a1,2041596c <_vfiprintf_r+0x6e6>
2041595c:	03000593          	li	a1,48
20415960:	00b60663          	beq	a2,a1,2041596c <_vfiprintf_r+0x6e6>
20415964:	feb90fa3          	sb	a1,-1(s2)
20415968:	ffe68913          	addi	s2,a3,-2
2041596c:	199c                	addi	a5,sp,240
2041596e:	8ca6                	mv	s9,s1
20415970:	412784b3          	sub	s1,a5,s2
20415974:	b395                	j	204156d8 <_vfiprintf_r+0x452>
20415976:	86ca                	mv	a3,s2
20415978:	bf65                	j	20415930 <_vfiprintf_r+0x6aa>
2041597a:	400d7793          	andi	a5,s10,1024
2041597e:	4d81                	li	s11,0
20415980:	0f010e13          	addi	t3,sp,240
20415984:	cc3e                	sw	a5,24(sp)
20415986:	8546                	mv	a0,a7
20415988:	4629                	li	a2,10
2041598a:	4681                	li	a3,0
2041598c:	85e6                	mv	a1,s9
2041598e:	fffe0913          	addi	s2,t3,-1
20415992:	c83a                	sw	a4,16(sp)
20415994:	c446                	sw	a7,8(sp)
20415996:	ca72                	sw	t3,20(sp)
20415998:	35b060ef          	jal	ra,2041c4f2 <__umoddi3>
2041599c:	4e52                	lw	t3,20(sp)
2041599e:	47e2                	lw	a5,24(sp)
204159a0:	03050513          	addi	a0,a0,48
204159a4:	feae0fa3          	sb	a0,-1(t3)
204159a8:	0d85                	addi	s11,s11,1
204159aa:	4742                	lw	a4,16(sp)
204159ac:	48a2                	lw	a7,8(sp)
204159ae:	c3b1                	beqz	a5,204159f2 <_vfiprintf_r+0x76c>
204159b0:	47f2                	lw	a5,28(sp)
204159b2:	0007c683          	lbu	a3,0(a5)
204159b6:	03b69e63          	bne	a3,s11,204159f2 <_vfiprintf_r+0x76c>
204159ba:	0ff00793          	li	a5,255
204159be:	02fd8a63          	beq	s11,a5,204159f2 <_vfiprintf_r+0x76c>
204159c2:	000c9563          	bnez	s9,204159cc <_vfiprintf_r+0x746>
204159c6:	47a5                	li	a5,9
204159c8:	0317f563          	bleu	a7,a5,204159f2 <_vfiprintf_r+0x76c>
204159cc:	5782                	lw	a5,32(sp)
204159ce:	55a2                	lw	a1,40(sp)
204159d0:	c83a                	sw	a4,16(sp)
204159d2:	40f90933          	sub	s2,s2,a5
204159d6:	863e                	mv	a2,a5
204159d8:	854a                	mv	a0,s2
204159da:	c446                	sw	a7,8(sp)
204159dc:	e8dfd0ef          	jal	ra,20413868 <strncpy>
204159e0:	47f2                	lw	a5,28(sp)
204159e2:	4d81                	li	s11,0
204159e4:	4742                	lw	a4,16(sp)
204159e6:	0017c683          	lbu	a3,1(a5)
204159ea:	48a2                	lw	a7,8(sp)
204159ec:	c299                	beqz	a3,204159f2 <_vfiprintf_r+0x76c>
204159ee:	0785                	addi	a5,a5,1
204159f0:	ce3e                	sw	a5,28(sp)
204159f2:	8546                	mv	a0,a7
204159f4:	85e6                	mv	a1,s9
204159f6:	4629                	li	a2,10
204159f8:	4681                	li	a3,0
204159fa:	c83a                	sw	a4,16(sp)
204159fc:	798060ef          	jal	ra,2041c194 <__udivdi3>
20415a00:	8cae                	mv	s9,a1
20415a02:	8dc9                	or	a1,a1,a0
20415a04:	88aa                	mv	a7,a0
20415a06:	4742                	lw	a4,16(sp)
20415a08:	d1b5                	beqz	a1,2041596c <_vfiprintf_r+0x6e6>
20415a0a:	8e4a                	mv	t3,s2
20415a0c:	bfad                	j	20415986 <_vfiprintf_r+0x700>
20415a0e:	0f010913          	addi	s2,sp,240
20415a12:	5792                	lw	a5,36(sp)
20415a14:	00f8f693          	andi	a3,a7,15
20415a18:	197d                	addi	s2,s2,-1
20415a1a:	96be                	add	a3,a3,a5
20415a1c:	0006c683          	lbu	a3,0(a3)
20415a20:	0048d893          	srli	a7,a7,0x4
20415a24:	00d90023          	sb	a3,0(s2)
20415a28:	01cc9693          	slli	a3,s9,0x1c
20415a2c:	0116e8b3          	or	a7,a3,a7
20415a30:	004cdc93          	srli	s9,s9,0x4
20415a34:	0198e6b3          	or	a3,a7,s9
20415a38:	fee9                	bnez	a3,20415a12 <_vfiprintf_r+0x78c>
20415a3a:	bf0d                	j	2041596c <_vfiprintf_r+0x6e6>
20415a3c:	0f010913          	addi	s2,sp,240
20415a40:	f695                	bnez	a3,2041596c <_vfiprintf_r+0x6e6>
20415a42:	8a05                	andi	a2,a2,1
20415a44:	d605                	beqz	a2,2041596c <_vfiprintf_r+0x6e6>
20415a46:	03000693          	li	a3,48
20415a4a:	0ed107a3          	sb	a3,239(sp)
20415a4e:	be89                	j	204155a0 <_vfiprintf_r+0x31a>
20415a50:	10060263          	beqz	a2,20415b54 <_vfiprintf_r+0x8ce>
20415a54:	08c10623          	sb	a2,140(sp)
20415a58:	02010da3          	sb	zero,59(sp)
20415a5c:	8c4a                	mv	s8,s2
20415a5e:	b4e5                	j	20415546 <_vfiprintf_r+0x2c0>
20415a60:	05c1                	addi	a1,a1,16
20415a62:	01172223          	sw	a7,4(a4)
20415a66:	c4ae                	sw	a1,72(sp)
20415a68:	c2b2                	sw	a2,68(sp)
20415a6a:	02c35163          	ble	a2,t1,20415a8c <_vfiprintf_r+0x806>
20415a6e:	0090                	addi	a2,sp,64
20415a70:	85a2                	mv	a1,s0
20415a72:	854e                	mv	a0,s3
20415a74:	c81a                	sw	t1,16(sp)
20415a76:	ca36                	sw	a3,20(sp)
20415a78:	c642                	sw	a6,12(sp)
20415a7a:	c446                	sw	a7,8(sp)
20415a7c:	f6aff0ef          	jal	ra,204151e6 <__sprint_r>
20415a80:	4342                	lw	t1,16(sp)
20415a82:	46d2                	lw	a3,20(sp)
20415a84:	4832                	lw	a6,12(sp)
20415a86:	48a2                	lw	a7,8(sp)
20415a88:	ed49                	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415a8a:	855a                	mv	a0,s6
20415a8c:	16c1                	addi	a3,a3,-16
20415a8e:	872a                	mv	a4,a0
20415a90:	b161                	j	20415718 <_vfiprintf_r+0x492>
20415a92:	0641                	addi	a2,a2,16
20415a94:	01072223          	sw	a6,4(a4)
20415a98:	c4b2                	sw	a2,72(sp)
20415a9a:	c2b6                	sw	a3,68(sp)
20415a9c:	00d8dd63          	ble	a3,a7,20415ab6 <_vfiprintf_r+0x830>
20415aa0:	0090                	addi	a2,sp,64
20415aa2:	85a2                	mv	a1,s0
20415aa4:	854e                	mv	a0,s3
20415aa6:	c642                	sw	a6,12(sp)
20415aa8:	c446                	sw	a7,8(sp)
20415aaa:	f3cff0ef          	jal	ra,204151e6 <__sprint_r>
20415aae:	4832                	lw	a6,12(sp)
20415ab0:	48a2                	lw	a7,8(sp)
20415ab2:	e925                	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415ab4:	85da                	mv	a1,s6
20415ab6:	1dc1                	addi	s11,s11,-16
20415ab8:	872e                	mv	a4,a1
20415aba:	b319                	j	204157c0 <_vfiprintf_r+0x53a>
20415abc:	0641                	addi	a2,a2,16
20415abe:	01b72223          	sw	s11,4(a4)
20415ac2:	c4b2                	sw	a2,72(sp)
20415ac4:	c2b6                	sw	a3,68(sp)
20415ac6:	00d85b63          	ble	a3,a6,20415adc <_vfiprintf_r+0x856>
20415aca:	0090                	addi	a2,sp,64
20415acc:	85a2                	mv	a1,s0
20415ace:	854e                	mv	a0,s3
20415ad0:	c642                	sw	a6,12(sp)
20415ad2:	f14ff0ef          	jal	ra,204151e6 <__sprint_r>
20415ad6:	4832                	lw	a6,12(sp)
20415ad8:	e529                	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415ada:	85da                	mv	a1,s6
20415adc:	1cc1                	addi	s9,s9,-16
20415ade:	872e                	mv	a4,a1
20415ae0:	b315                	j	20415804 <_vfiprintf_r+0x57e>
20415ae2:	47e2                	lw	a5,24(sp)
20415ae4:	40fa84b3          	sub	s1,s5,a5
20415ae8:	d89052e3          	blez	s1,2041586c <_vfiprintf_r+0x5e6>
20415aec:	204227b7          	lui	a5,0x20422
20415af0:	4cc1                	li	s9,16
20415af2:	ea878913          	addi	s2,a5,-344 # 20421ea8 <blanks.4359>
20415af6:	4d9d                	li	s11,7
20415af8:	4796                	lw	a5,68(sp)
20415afa:	01272023          	sw	s2,0(a4)
20415afe:	46a6                	lw	a3,72(sp)
20415b00:	0785                	addi	a5,a5,1
20415b02:	029cc863          	blt	s9,s1,20415b32 <_vfiprintf_r+0x8ac>
20415b06:	c344                	sw	s1,4(a4)
20415b08:	94b6                	add	s1,s1,a3
20415b0a:	c4a6                	sw	s1,72(sp)
20415b0c:	c2be                	sw	a5,68(sp)
20415b0e:	471d                	li	a4,7
20415b10:	d4f75ee3          	ble	a5,a4,2041586c <_vfiprintf_r+0x5e6>
20415b14:	0090                	addi	a2,sp,64
20415b16:	85a2                	mv	a1,s0
20415b18:	854e                	mv	a0,s3
20415b1a:	eccff0ef          	jal	ra,204151e6 <__sprint_r>
20415b1e:	d40507e3          	beqz	a0,2041586c <_vfiprintf_r+0x5e6>
20415b22:	00c45783          	lhu	a5,12(s0)
20415b26:	0407f793          	andi	a5,a5,64
20415b2a:	fe078763          	beqz	a5,20415318 <_vfiprintf_r+0x92>
20415b2e:	82dff06f          	j	2041535a <_vfiprintf_r+0xd4>
20415b32:	06c1                	addi	a3,a3,16
20415b34:	01972223          	sw	s9,4(a4)
20415b38:	c4b6                	sw	a3,72(sp)
20415b3a:	c2be                	sw	a5,68(sp)
20415b3c:	0721                	addi	a4,a4,8
20415b3e:	00fdd963          	ble	a5,s11,20415b50 <_vfiprintf_r+0x8ca>
20415b42:	0090                	addi	a2,sp,64
20415b44:	85a2                	mv	a1,s0
20415b46:	854e                	mv	a0,s3
20415b48:	e9eff0ef          	jal	ra,204151e6 <__sprint_r>
20415b4c:	f979                	bnez	a0,20415b22 <_vfiprintf_r+0x89c>
20415b4e:	875a                	mv	a4,s6
20415b50:	14c1                	addi	s1,s1,-16
20415b52:	b75d                	j	20415af8 <_vfiprintf_r+0x872>
20415b54:	47a6                	lw	a5,72(sp)
20415b56:	d7f1                	beqz	a5,20415b22 <_vfiprintf_r+0x89c>
20415b58:	0090                	addi	a2,sp,64
20415b5a:	85a2                	mv	a1,s0
20415b5c:	854e                	mv	a0,s3
20415b5e:	e88ff0ef          	jal	ra,204151e6 <__sprint_r>
20415b62:	b7c1                	j	20415b22 <_vfiprintf_r+0x89c>

20415b64 <vfiprintf>:
20415b64:	86b2                	mv	a3,a2
20415b66:	862e                	mv	a2,a1
20415b68:	85aa                	mv	a1,a0
20415b6a:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20415b6e:	f18ff06f          	j	20415286 <_vfiprintf_r>

20415b72 <__sbprintf>:
20415b72:	00c5d783          	lhu	a5,12(a1)
20415b76:	b8010113          	addi	sp,sp,-1152
20415b7a:	46812c23          	sw	s0,1144(sp)
20415b7e:	9bf5                	andi	a5,a5,-3
20415b80:	00f11a23          	sh	a5,20(sp)
20415b84:	51fc                	lw	a5,100(a1)
20415b86:	842e                	mv	s0,a1
20415b88:	46912a23          	sw	s1,1140(sp)
20415b8c:	d6be                	sw	a5,108(sp)
20415b8e:	00e5d783          	lhu	a5,14(a1)
20415b92:	47212823          	sw	s2,1136(sp)
20415b96:	46112e23          	sw	ra,1148(sp)
20415b9a:	00f11b23          	sh	a5,22(sp)
20415b9e:	4ddc                	lw	a5,28(a1)
20415ba0:	892a                	mv	s2,a0
20415ba2:	d002                	sw	zero,32(sp)
20415ba4:	d23e                	sw	a5,36(sp)
20415ba6:	51dc                	lw	a5,36(a1)
20415ba8:	002c                	addi	a1,sp,8
20415baa:	d63e                	sw	a5,44(sp)
20415bac:	189c                	addi	a5,sp,112
20415bae:	c43e                	sw	a5,8(sp)
20415bb0:	cc3e                	sw	a5,24(sp)
20415bb2:	40000793          	li	a5,1024
20415bb6:	c83e                	sw	a5,16(sp)
20415bb8:	ce3e                	sw	a5,28(sp)
20415bba:	eccff0ef          	jal	ra,20415286 <_vfiprintf_r>
20415bbe:	84aa                	mv	s1,a0
20415bc0:	00054863          	bltz	a0,20415bd0 <__sbprintf+0x5e>
20415bc4:	002c                	addi	a1,sp,8
20415bc6:	854a                	mv	a0,s2
20415bc8:	33d010ef          	jal	ra,20417704 <_fflush_r>
20415bcc:	c111                	beqz	a0,20415bd0 <__sbprintf+0x5e>
20415bce:	54fd                	li	s1,-1
20415bd0:	01415783          	lhu	a5,20(sp)
20415bd4:	0407f793          	andi	a5,a5,64
20415bd8:	c799                	beqz	a5,20415be6 <__sbprintf+0x74>
20415bda:	00c45783          	lhu	a5,12(s0)
20415bde:	0407e793          	ori	a5,a5,64
20415be2:	00f41623          	sh	a5,12(s0)
20415be6:	47c12083          	lw	ra,1148(sp)
20415bea:	47812403          	lw	s0,1144(sp)
20415bee:	8526                	mv	a0,s1
20415bf0:	47012903          	lw	s2,1136(sp)
20415bf4:	47412483          	lw	s1,1140(sp)
20415bf8:	48010113          	addi	sp,sp,1152
20415bfc:	8082                	ret

20415bfe <_vfprintf_r>:
20415bfe:	7105                	addi	sp,sp,-480
20415c00:	1c112e23          	sw	ra,476(sp)
20415c04:	1c912a23          	sw	s1,468(sp)
20415c08:	1d212823          	sw	s2,464(sp)
20415c0c:	1d312623          	sw	s3,460(sp)
20415c10:	1d512223          	sw	s5,452(sp)
20415c14:	892e                	mv	s2,a1
20415c16:	84b2                	mv	s1,a2
20415c18:	8ab6                	mv	s5,a3
20415c1a:	1c812c23          	sw	s0,472(sp)
20415c1e:	1d412423          	sw	s4,456(sp)
20415c22:	1d612023          	sw	s6,448(sp)
20415c26:	1b712e23          	sw	s7,444(sp)
20415c2a:	1b812c23          	sw	s8,440(sp)
20415c2e:	1b912a23          	sw	s9,436(sp)
20415c32:	1ba12823          	sw	s10,432(sp)
20415c36:	1bb12623          	sw	s11,428(sp)
20415c3a:	89aa                	mv	s3,a0
20415c3c:	291030ef          	jal	ra,204196cc <_localeconv_r>
20415c40:	4108                	lw	a0,0(a0)
20415c42:	c4aa                	sw	a0,72(sp)
20415c44:	be9fd0ef          	jal	ra,2041382c <strlen>
20415c48:	dc2a                	sw	a0,56(sp)
20415c4a:	d182                	sw	zero,224(sp)
20415c4c:	d382                	sw	zero,228(sp)
20415c4e:	d582                	sw	zero,232(sp)
20415c50:	d782                	sw	zero,236(sp)
20415c52:	00098863          	beqz	s3,20415c62 <_vfprintf_r+0x64>
20415c56:	0389a783          	lw	a5,56(s3)
20415c5a:	e781                	bnez	a5,20415c62 <_vfprintf_r+0x64>
20415c5c:	854e                	mv	a0,s3
20415c5e:	3bb010ef          	jal	ra,20417818 <__sinit>
20415c62:	00c91783          	lh	a5,12(s2)
20415c66:	01279593          	slli	a1,a5,0x12
20415c6a:	0005cd63          	bltz	a1,20415c84 <_vfprintf_r+0x86>
20415c6e:	6689                	lui	a3,0x2
20415c70:	06492703          	lw	a4,100(s2)
20415c74:	8fd5                	or	a5,a5,a3
20415c76:	00f91623          	sh	a5,12(s2)
20415c7a:	77f9                	lui	a5,0xffffe
20415c7c:	17fd                	addi	a5,a5,-1
20415c7e:	8ff9                	and	a5,a5,a4
20415c80:	06f92223          	sw	a5,100(s2)
20415c84:	00c95783          	lhu	a5,12(s2)
20415c88:	8ba1                	andi	a5,a5,8
20415c8a:	c3b5                	beqz	a5,20415cee <_vfprintf_r+0xf0>
20415c8c:	01092783          	lw	a5,16(s2)
20415c90:	cfb9                	beqz	a5,20415cee <_vfprintf_r+0xf0>
20415c92:	00c95783          	lhu	a5,12(s2)
20415c96:	4729                	li	a4,10
20415c98:	8be9                	andi	a5,a5,26
20415c9a:	06e79263          	bne	a5,a4,20415cfe <_vfprintf_r+0x100>
20415c9e:	00e91783          	lh	a5,14(s2)
20415ca2:	0407ce63          	bltz	a5,20415cfe <_vfprintf_r+0x100>
20415ca6:	86d6                	mv	a3,s5
20415ca8:	8626                	mv	a2,s1
20415caa:	85ca                	mv	a1,s2
20415cac:	854e                	mv	a0,s3
20415cae:	5de010ef          	jal	ra,2041728c <__sbprintf>
20415cb2:	de2a                	sw	a0,60(sp)
20415cb4:	1dc12083          	lw	ra,476(sp)
20415cb8:	1d812403          	lw	s0,472(sp)
20415cbc:	5572                	lw	a0,60(sp)
20415cbe:	1d412483          	lw	s1,468(sp)
20415cc2:	1d012903          	lw	s2,464(sp)
20415cc6:	1cc12983          	lw	s3,460(sp)
20415cca:	1c812a03          	lw	s4,456(sp)
20415cce:	1c412a83          	lw	s5,452(sp)
20415cd2:	1c012b03          	lw	s6,448(sp)
20415cd6:	1bc12b83          	lw	s7,444(sp)
20415cda:	1b812c03          	lw	s8,440(sp)
20415cde:	1b412c83          	lw	s9,436(sp)
20415ce2:	1b012d03          	lw	s10,432(sp)
20415ce6:	1ac12d83          	lw	s11,428(sp)
20415cea:	613d                	addi	sp,sp,480
20415cec:	8082                	ret
20415cee:	85ca                	mv	a1,s2
20415cf0:	854e                	mv	a0,s3
20415cf2:	6c8010ef          	jal	ra,204173ba <__swsetup_r>
20415cf6:	dd51                	beqz	a0,20415c92 <_vfprintf_r+0x94>
20415cf8:	55fd                	li	a1,-1
20415cfa:	de2e                	sw	a1,60(sp)
20415cfc:	bf65                	j	20415cb4 <_vfprintf_r+0xb6>
20415cfe:	0fc10893          	addi	a7,sp,252
20415d02:	cbc6                	sw	a7,212(sp)
20415d04:	cf82                	sw	zero,220(sp)
20415d06:	cd82                	sw	zero,216(sp)
20415d08:	4a01                	li	s4,0
20415d0a:	cc82                	sw	zero,88(sp)
20415d0c:	ca82                	sw	zero,84(sp)
20415d0e:	d402                	sw	zero,40(sp)
20415d10:	c282                	sw	zero,68(sp)
20415d12:	c882                	sw	zero,80(sp)
20415d14:	de02                	sw	zero,60(sp)
20415d16:	8426                	mv	s0,s1
20415d18:	02500713          	li	a4,37
20415d1c:	00044783          	lbu	a5,0(s0)
20415d20:	c399                	beqz	a5,20415d26 <_vfprintf_r+0x128>
20415d22:	08e79363          	bne	a5,a4,20415da8 <_vfprintf_r+0x1aa>
20415d26:	40940b33          	sub	s6,s0,s1
20415d2a:	020b0c63          	beqz	s6,20415d62 <_vfprintf_r+0x164>
20415d2e:	47fe                	lw	a5,220(sp)
20415d30:	0098a023          	sw	s1,0(a7)
20415d34:	0168a223          	sw	s6,4(a7)
20415d38:	97da                	add	a5,a5,s6
20415d3a:	cfbe                	sw	a5,220(sp)
20415d3c:	47ee                	lw	a5,216(sp)
20415d3e:	471d                	li	a4,7
20415d40:	08a1                	addi	a7,a7,8
20415d42:	0785                	addi	a5,a5,1
20415d44:	cdbe                	sw	a5,216(sp)
20415d46:	00f75b63          	ble	a5,a4,20415d5c <_vfprintf_r+0x15e>
20415d4a:	09d0                	addi	a2,sp,212
20415d4c:	85ca                	mv	a1,s2
20415d4e:	854e                	mv	a0,s3
20415d50:	c96ff0ef          	jal	ra,204151e6 <__sprint_r>
20415d54:	38051b63          	bnez	a0,204160ea <_vfprintf_r+0x4ec>
20415d58:	0fc10893          	addi	a7,sp,252
20415d5c:	5672                	lw	a2,60(sp)
20415d5e:	965a                	add	a2,a2,s6
20415d60:	de32                	sw	a2,60(sp)
20415d62:	00044783          	lbu	a5,0(s0)
20415d66:	e399                	bnez	a5,20415d6c <_vfprintf_r+0x16e>
20415d68:	5000106f          	j	20417268 <_vfprintf_r+0x166a>
20415d6c:	0405                	addi	s0,s0,1
20415d6e:	d822                	sw	s0,48(sp)
20415d70:	0a010ba3          	sb	zero,183(sp)
20415d74:	5b7d                	li	s6,-1
20415d76:	c082                	sw	zero,64(sp)
20415d78:	4401                	li	s0,0
20415d7a:	4c29                	li	s8,10
20415d7c:	02a00b93          	li	s7,42
20415d80:	05a00613          	li	a2,90
20415d84:	4725                	li	a4,9
20415d86:	56c2                	lw	a3,48(sp)
20415d88:	0006cd03          	lbu	s10,0(a3) # 2000 <__stack_size-0x2000>
20415d8c:	0685                	addi	a3,a3,1
20415d8e:	d836                	sw	a3,48(sp)
20415d90:	fe0d0793          	addi	a5,s10,-32
20415d94:	52f669e3          	bltu	a2,a5,20416ac6 <_vfprintf_r+0xec8>
20415d98:	204225b7          	lui	a1,0x20422
20415d9c:	078a                	slli	a5,a5,0x2
20415d9e:	ec858593          	addi	a1,a1,-312 # 20421ec8 <zeroes.4360+0x10>
20415da2:	97ae                	add	a5,a5,a1
20415da4:	439c                	lw	a5,0(a5)
20415da6:	8782                	jr	a5
20415da8:	0405                	addi	s0,s0,1
20415daa:	bf8d                	j	20415d1c <_vfprintf_r+0x11e>
20415dac:	204227b7          	lui	a5,0x20422
20415db0:	d2478793          	addi	a5,a5,-732 # 20421d24 <zeroes.4369+0x64>
20415db4:	ccbe                	sw	a5,88(sp)
20415db6:	02047793          	andi	a5,s0,32
20415dba:	3a078ae3          	beqz	a5,2041696e <_vfprintf_r+0xd70>
20415dbe:	0a9d                	addi	s5,s5,7
20415dc0:	ff8afa93          	andi	s5,s5,-8
20415dc4:	000aac83          	lw	s9,0(s5)
20415dc8:	004aac03          	lw	s8,4(s5)
20415dcc:	008a8793          	addi	a5,s5,8
20415dd0:	d63e                	sw	a5,44(sp)
20415dd2:	00147793          	andi	a5,s0,1
20415dd6:	cf89                	beqz	a5,20415df0 <_vfprintf_r+0x1f2>
20415dd8:	018ce7b3          	or	a5,s9,s8
20415ddc:	cb91                	beqz	a5,20415df0 <_vfprintf_r+0x1f2>
20415dde:	03000793          	li	a5,48
20415de2:	0af10c23          	sb	a5,184(sp)
20415de6:	87ea                	mv	a5,s10
20415de8:	0af10ca3          	sb	a5,185(sp)
20415dec:	00246413          	ori	s0,s0,2
20415df0:	bff47413          	andi	s0,s0,-1025
20415df4:	4789                	li	a5,2
20415df6:	0990006f          	j	2041668e <_vfprintf_r+0xa90>
20415dfa:	854e                	mv	a0,s3
20415dfc:	c246                	sw	a7,4(sp)
20415dfe:	0cf030ef          	jal	ra,204196cc <_localeconv_r>
20415e02:	4148                	lw	a0,4(a0)
20415e04:	c8aa                	sw	a0,80(sp)
20415e06:	a27fd0ef          	jal	ra,2041382c <strlen>
20415e0a:	c2aa                	sw	a0,68(sp)
20415e0c:	854e                	mv	a0,s3
20415e0e:	0bf030ef          	jal	ra,204196cc <_localeconv_r>
20415e12:	4508                	lw	a0,8(a0)
20415e14:	4616                	lw	a2,68(sp)
20415e16:	4892                	lw	a7,4(sp)
20415e18:	d42a                	sw	a0,40(sp)
20415e1a:	d23d                	beqz	a2,20415d80 <_vfprintf_r+0x182>
20415e1c:	d135                	beqz	a0,20415d80 <_vfprintf_r+0x182>
20415e1e:	00054783          	lbu	a5,0(a0)
20415e22:	dfb9                	beqz	a5,20415d80 <_vfprintf_r+0x182>
20415e24:	40046413          	ori	s0,s0,1024
20415e28:	bfa1                	j	20415d80 <_vfprintf_r+0x182>
20415e2a:	0b714783          	lbu	a5,183(sp)
20415e2e:	fba9                	bnez	a5,20415d80 <_vfprintf_r+0x182>
20415e30:	02000793          	li	a5,32
20415e34:	0af10ba3          	sb	a5,183(sp)
20415e38:	b7a1                	j	20415d80 <_vfprintf_r+0x182>
20415e3a:	00146413          	ori	s0,s0,1
20415e3e:	b789                	j	20415d80 <_vfprintf_r+0x182>
20415e40:	000aa683          	lw	a3,0(s5)
20415e44:	0a91                	addi	s5,s5,4
20415e46:	c0b6                	sw	a3,64(sp)
20415e48:	f206dce3          	bgez	a3,20415d80 <_vfprintf_r+0x182>
20415e4c:	40d006b3          	neg	a3,a3
20415e50:	c0b6                	sw	a3,64(sp)
20415e52:	00446413          	ori	s0,s0,4
20415e56:	b72d                	j	20415d80 <_vfprintf_r+0x182>
20415e58:	02b00793          	li	a5,43
20415e5c:	bfe1                	j	20415e34 <_vfprintf_r+0x236>
20415e5e:	55c2                	lw	a1,48(sp)
20415e60:	0005cd03          	lbu	s10,0(a1)
20415e64:	00158793          	addi	a5,a1,1
20415e68:	037d1963          	bne	s10,s7,20415e9a <_vfprintf_r+0x29c>
20415e6c:	000aab03          	lw	s6,0(s5)
20415e70:	004a8713          	addi	a4,s5,4
20415e74:	000b5363          	bgez	s6,20415e7a <_vfprintf_r+0x27c>
20415e78:	5b7d                	li	s6,-1
20415e7a:	8aba                	mv	s5,a4
20415e7c:	d83e                	sw	a5,48(sp)
20415e7e:	b709                	j	20415d80 <_vfprintf_r+0x182>
20415e80:	038b0333          	mul	t1,s6,s8
20415e84:	0785                	addi	a5,a5,1
20415e86:	fff7cd03          	lbu	s10,-1(a5)
20415e8a:	00d30b33          	add	s6,t1,a3
20415e8e:	fd0d0693          	addi	a3,s10,-48
20415e92:	fed777e3          	bleu	a3,a4,20415e80 <_vfprintf_r+0x282>
20415e96:	d83e                	sw	a5,48(sp)
20415e98:	bde5                	j	20415d90 <_vfprintf_r+0x192>
20415e9a:	4b01                	li	s6,0
20415e9c:	bfcd                	j	20415e8e <_vfprintf_r+0x290>
20415e9e:	08046413          	ori	s0,s0,128
20415ea2:	bdf9                	j	20415d80 <_vfprintf_r+0x182>
20415ea4:	57c2                	lw	a5,48(sp)
20415ea6:	c082                	sw	zero,64(sp)
20415ea8:	4586                	lw	a1,64(sp)
20415eaa:	fd0d0d13          	addi	s10,s10,-48
20415eae:	0785                	addi	a5,a5,1
20415eb0:	038586b3          	mul	a3,a1,s8
20415eb4:	9d36                	add	s10,s10,a3
20415eb6:	c0ea                	sw	s10,64(sp)
20415eb8:	fff7cd03          	lbu	s10,-1(a5)
20415ebc:	fd0d0693          	addi	a3,s10,-48
20415ec0:	fed774e3          	bleu	a3,a4,20415ea8 <_vfprintf_r+0x2aa>
20415ec4:	bfc9                	j	20415e96 <_vfprintf_r+0x298>
20415ec6:	00846413          	ori	s0,s0,8
20415eca:	bd5d                	j	20415d80 <_vfprintf_r+0x182>
20415ecc:	5642                	lw	a2,48(sp)
20415ece:	06800793          	li	a5,104
20415ed2:	00064703          	lbu	a4,0(a2)
20415ed6:	00f71763          	bne	a4,a5,20415ee4 <_vfprintf_r+0x2e6>
20415eda:	0605                	addi	a2,a2,1
20415edc:	d832                	sw	a2,48(sp)
20415ede:	20046413          	ori	s0,s0,512
20415ee2:	bd79                	j	20415d80 <_vfprintf_r+0x182>
20415ee4:	04046413          	ori	s0,s0,64
20415ee8:	bd61                	j	20415d80 <_vfprintf_r+0x182>
20415eea:	56c2                	lw	a3,48(sp)
20415eec:	06c00793          	li	a5,108
20415ef0:	0006c703          	lbu	a4,0(a3)
20415ef4:	00f71763          	bne	a4,a5,20415f02 <_vfprintf_r+0x304>
20415ef8:	0685                	addi	a3,a3,1
20415efa:	d836                	sw	a3,48(sp)
20415efc:	02046413          	ori	s0,s0,32
20415f00:	b541                	j	20415d80 <_vfprintf_r+0x182>
20415f02:	01046413          	ori	s0,s0,16
20415f06:	bdad                	j	20415d80 <_vfprintf_r+0x182>
20415f08:	000aa783          	lw	a5,0(s5)
20415f0c:	004a8713          	addi	a4,s5,4
20415f10:	d63a                	sw	a4,44(sp)
20415f12:	12f10e23          	sb	a5,316(sp)
20415f16:	0a010ba3          	sb	zero,183(sp)
20415f1a:	d202                	sw	zero,36(sp)
20415f1c:	4b05                	li	s6,1
20415f1e:	4a81                	li	s5,0
20415f20:	4c01                	li	s8,0
20415f22:	4b81                	li	s7,0
20415f24:	4c81                	li	s9,0
20415f26:	1a64                	addi	s1,sp,316
20415f28:	0290006f          	j	20416750 <_vfprintf_r+0xb52>
20415f2c:	01046413          	ori	s0,s0,16
20415f30:	02047793          	andi	a5,s0,32
20415f34:	cba9                	beqz	a5,20415f86 <_vfprintf_r+0x388>
20415f36:	0a9d                	addi	s5,s5,7
20415f38:	ff8afa93          	andi	s5,s5,-8
20415f3c:	000aac83          	lw	s9,0(s5)
20415f40:	004aac03          	lw	s8,4(s5)
20415f44:	008a8793          	addi	a5,s5,8
20415f48:	d63e                	sw	a5,44(sp)
20415f4a:	000c5e63          	bgez	s8,20415f66 <_vfprintf_r+0x368>
20415f4e:	41900cb3          	neg	s9,s9
20415f52:	019037b3          	snez	a5,s9
20415f56:	41800c33          	neg	s8,s8
20415f5a:	40fc0c33          	sub	s8,s8,a5
20415f5e:	02d00793          	li	a5,45
20415f62:	0af10ba3          	sb	a5,183(sp)
20415f66:	57fd                	li	a5,-1
20415f68:	22fb1ae3          	bne	s6,a5,2041699c <_vfprintf_r+0xd9e>
20415f6c:	280c1be3          	bnez	s8,20416a02 <_vfprintf_r+0xe04>
20415f70:	47a5                	li	a5,9
20415f72:	2997e8e3          	bltu	a5,s9,20416a02 <_vfprintf_r+0xe04>
20415f76:	030c8c93          	addi	s9,s9,48
20415f7a:	19910fa3          	sb	s9,415(sp)
20415f7e:	19f10493          	addi	s1,sp,415
20415f82:	26b0006f          	j	204169ec <_vfprintf_r+0xdee>
20415f86:	004a8593          	addi	a1,s5,4
20415f8a:	d62e                	sw	a1,44(sp)
20415f8c:	01047793          	andi	a5,s0,16
20415f90:	c791                	beqz	a5,20415f9c <_vfprintf_r+0x39e>
20415f92:	000aac83          	lw	s9,0(s5)
20415f96:	41fcdc13          	srai	s8,s9,0x1f
20415f9a:	bf45                	j	20415f4a <_vfprintf_r+0x34c>
20415f9c:	04047793          	andi	a5,s0,64
20415fa0:	000aac83          	lw	s9,0(s5)
20415fa4:	c789                	beqz	a5,20415fae <_vfprintf_r+0x3b0>
20415fa6:	0cc2                	slli	s9,s9,0x10
20415fa8:	410cdc93          	srai	s9,s9,0x10
20415fac:	b7ed                	j	20415f96 <_vfprintf_r+0x398>
20415fae:	20047793          	andi	a5,s0,512
20415fb2:	d3f5                	beqz	a5,20415f96 <_vfprintf_r+0x398>
20415fb4:	0ce2                	slli	s9,s9,0x18
20415fb6:	418cdc93          	srai	s9,s9,0x18
20415fba:	bff1                	j	20415f96 <_vfprintf_r+0x398>
20415fbc:	00847793          	andi	a5,s0,8
20415fc0:	cfad                	beqz	a5,2041603a <_vfprintf_r+0x43c>
20415fc2:	000aa783          	lw	a5,0(s5)
20415fc6:	004a8613          	addi	a2,s5,4
20415fca:	d632                	sw	a2,44(sp)
20415fcc:	43d4                	lw	a3,4(a5)
20415fce:	4390                	lw	a2,0(a5)
20415fd0:	4798                	lw	a4,8(a5)
20415fd2:	47dc                	lw	a5,12(a5)
20415fd4:	d1b2                	sw	a2,224(sp)
20415fd6:	d3b6                	sw	a3,228(sp)
20415fd8:	d5ba                	sw	a4,232(sp)
20415fda:	d7be                	sw	a5,236(sp)
20415fdc:	1188                	addi	a0,sp,224
20415fde:	c246                	sw	a7,4(sp)
20415fe0:	6a8030ef          	jal	ra,20419688 <_ldcheck>
20415fe4:	df2a                	sw	a0,188(sp)
20415fe6:	4789                	li	a5,2
20415fe8:	4892                	lw	a7,4(sp)
20415fea:	08f51563          	bne	a0,a5,20416074 <_vfprintf_r+0x476>
20415fee:	578e                	lw	a5,224(sp)
20415ff0:	090c                	addi	a1,sp,144
20415ff2:	1108                	addi	a0,sp,160
20415ff4:	d13e                	sw	a5,160(sp)
20415ff6:	579e                	lw	a5,228(sp)
20415ff8:	c902                	sw	zero,144(sp)
20415ffa:	cb02                	sw	zero,148(sp)
20415ffc:	d33e                	sw	a5,164(sp)
20415ffe:	57ae                	lw	a5,232(sp)
20416000:	cd02                	sw	zero,152(sp)
20416002:	cf02                	sw	zero,156(sp)
20416004:	d53e                	sw	a5,168(sp)
20416006:	57be                	lw	a5,236(sp)
20416008:	d73e                	sw	a5,172(sp)
2041600a:	2ff070ef          	jal	ra,2041db08 <__letf2>
2041600e:	4892                	lw	a7,4(sp)
20416010:	00055663          	bgez	a0,2041601c <_vfprintf_r+0x41e>
20416014:	02d00793          	li	a5,45
20416018:	0af10ba3          	sb	a5,183(sp)
2041601c:	04700793          	li	a5,71
20416020:	05a7c563          	blt	a5,s10,2041606a <_vfprintf_r+0x46c>
20416024:	204224b7          	lui	s1,0x20422
20416028:	d0048493          	addi	s1,s1,-768 # 20421d00 <zeroes.4369+0x40>
2041602c:	f7f47413          	andi	s0,s0,-129
20416030:	d202                	sw	zero,36(sp)
20416032:	4b0d                	li	s6,3
20416034:	4a81                	li	s5,0
20416036:	1c10006f          	j	204169f6 <_vfprintf_r+0xdf8>
2041603a:	0a9d                	addi	s5,s5,7
2041603c:	ff8afa93          	andi	s5,s5,-8
20416040:	000aa583          	lw	a1,0(s5)
20416044:	004aa603          	lw	a2,4(s5)
20416048:	008a8693          	addi	a3,s5,8
2041604c:	1108                	addi	a0,sp,160
2041604e:	c246                	sw	a7,4(sp)
20416050:	d636                	sw	a3,44(sp)
20416052:	025090ef          	jal	ra,2041f876 <__extenddftf2>
20416056:	578a                	lw	a5,160(sp)
20416058:	4892                	lw	a7,4(sp)
2041605a:	d1be                	sw	a5,224(sp)
2041605c:	579a                	lw	a5,164(sp)
2041605e:	d3be                	sw	a5,228(sp)
20416060:	57aa                	lw	a5,168(sp)
20416062:	d5be                	sw	a5,232(sp)
20416064:	57ba                	lw	a5,172(sp)
20416066:	d7be                	sw	a5,236(sp)
20416068:	bf95                	j	20415fdc <_vfprintf_r+0x3de>
2041606a:	204224b7          	lui	s1,0x20422
2041606e:	d0448493          	addi	s1,s1,-764 # 20421d04 <zeroes.4369+0x44>
20416072:	bf6d                	j	2041602c <_vfprintf_r+0x42e>
20416074:	4785                	li	a5,1
20416076:	02f51063          	bne	a0,a5,20416096 <_vfprintf_r+0x498>
2041607a:	04700793          	li	a5,71
2041607e:	01a7c763          	blt	a5,s10,2041608c <_vfprintf_r+0x48e>
20416082:	204224b7          	lui	s1,0x20422
20416086:	d0848493          	addi	s1,s1,-760 # 20421d08 <zeroes.4369+0x48>
2041608a:	b74d                	j	2041602c <_vfprintf_r+0x42e>
2041608c:	204224b7          	lui	s1,0x20422
20416090:	d0c48493          	addi	s1,s1,-756 # 20421d0c <zeroes.4369+0x4c>
20416094:	bf61                	j	2041602c <_vfprintf_r+0x42e>
20416096:	fdfd7b93          	andi	s7,s10,-33
2041609a:	04100793          	li	a5,65
2041609e:	04fb9d63          	bne	s7,a5,204160f8 <_vfprintf_r+0x4fa>
204160a2:	03000793          	li	a5,48
204160a6:	0af10c23          	sb	a5,184(sp)
204160aa:	06100713          	li	a4,97
204160ae:	05800793          	li	a5,88
204160b2:	00ed1463          	bne	s10,a4,204160ba <_vfprintf_r+0x4bc>
204160b6:	07800793          	li	a5,120
204160ba:	0af10ca3          	sb	a5,185(sp)
204160be:	06300793          	li	a5,99
204160c2:	00246413          	ori	s0,s0,2
204160c6:	3567d963          	ble	s6,a5,20416418 <_vfprintf_r+0x81a>
204160ca:	001b0593          	addi	a1,s6,1
204160ce:	854e                	mv	a0,s3
204160d0:	c246                	sw	a7,4(sp)
204160d2:	72a030ef          	jal	ra,204197fc <_malloc_r>
204160d6:	84aa                	mv	s1,a0
204160d8:	4892                	lw	a7,4(sp)
204160da:	34051263          	bnez	a0,2041641e <_vfprintf_r+0x820>
204160de:	00c95783          	lhu	a5,12(s2)
204160e2:	0407e793          	ori	a5,a5,64
204160e6:	00f91623          	sh	a5,12(s2)
204160ea:	00c95783          	lhu	a5,12(s2)
204160ee:	0407f793          	andi	a5,a5,64
204160f2:	bc0781e3          	beqz	a5,20415cb4 <_vfprintf_r+0xb6>
204160f6:	b109                	j	20415cf8 <_vfprintf_r+0xfa>
204160f8:	57fd                	li	a5,-1
204160fa:	32fb0463          	beq	s6,a5,20416422 <_vfprintf_r+0x824>
204160fe:	04700793          	li	a5,71
20416102:	d202                	sw	zero,36(sp)
20416104:	00fb9463          	bne	s7,a5,2041610c <_vfprintf_r+0x50e>
20416108:	320b0063          	beqz	s6,20416428 <_vfprintf_r+0x82a>
2041610c:	5a3e                	lw	s4,236(sp)
2041610e:	10046713          	ori	a4,s0,256
20416112:	da3a                	sw	a4,52(sp)
20416114:	c682                	sw	zero,76(sp)
20416116:	5e0e                	lw	t3,224(sp)
20416118:	5d9e                	lw	s11,228(sp)
2041611a:	5cae                	lw	s9,232(sp)
2041611c:	000a5963          	bgez	s4,2041612e <_vfprintf_r+0x530>
20416120:	800007b7          	lui	a5,0x80000
20416124:	0147ca33          	xor	s4,a5,s4
20416128:	02d00793          	li	a5,45
2041612c:	c6be                	sw	a5,76(sp)
2041612e:	04100793          	li	a5,65
20416132:	32fb9863          	bne	s7,a5,20416462 <_vfprintf_r+0x864>
20416136:	1108                	addi	a0,sp,160
20416138:	c246                	sw	a7,4(sp)
2041613a:	d172                	sw	t3,160(sp)
2041613c:	d36e                	sw	s11,164(sp)
2041613e:	d566                	sw	s9,168(sp)
20416140:	d752                	sw	s4,172(sp)
20416142:	09f090ef          	jal	ra,2041f9e0 <__trunctfdf2>
20416146:	1970                	addi	a2,sp,188
20416148:	0b5040ef          	jal	ra,2041a9fc <frexp>
2041614c:	862e                	mv	a2,a1
2041614e:	85aa                	mv	a1,a0
20416150:	1108                	addi	a0,sp,160
20416152:	724090ef          	jal	ra,2041f876 <__extenddftf2>
20416156:	558a                	lw	a1,160(sp)
20416158:	204227b7          	lui	a5,0x20422
2041615c:	cd078793          	addi	a5,a5,-816 # 20421cd0 <zeroes.4369+0x10>
20416160:	c12e                	sw	a1,128(sp)
20416162:	559a                	lw	a1,164(sp)
20416164:	4390                	lw	a2,0(a5)
20416166:	43d4                	lw	a3,4(a5)
20416168:	c32e                	sw	a1,132(sp)
2041616a:	55aa                	lw	a1,168(sp)
2041616c:	4798                	lw	a4,8(a5)
2041616e:	47dc                	lw	a5,12(a5)
20416170:	c52e                	sw	a1,136(sp)
20416172:	55ba                	lw	a1,172(sp)
20416174:	d8b2                	sw	a2,112(sp)
20416176:	0908                	addi	a0,sp,144
20416178:	c72e                	sw	a1,140(sp)
2041617a:	1890                	addi	a2,sp,112
2041617c:	010c                	addi	a1,sp,128
2041617e:	dab6                	sw	a3,116(sp)
20416180:	dcba                	sw	a4,120(sp)
20416182:	debe                	sw	a5,124(sp)
20416184:	297070ef          	jal	ra,2041dc1a <__multf3>
20416188:	43ca                	lw	t2,144(sp)
2041618a:	485a                	lw	a6,148(sp)
2041618c:	4dea                	lw	s11,152(sp)
2041618e:	4cfa                	lw	s9,156(sp)
20416190:	090c                	addi	a1,sp,144
20416192:	1108                	addi	a0,sp,160
20416194:	d11e                	sw	t2,160(sp)
20416196:	d342                	sw	a6,164(sp)
20416198:	d01e                	sw	t2,32(sp)
2041619a:	ca42                	sw	a6,20(sp)
2041619c:	d56e                	sw	s11,168(sp)
2041619e:	d766                	sw	s9,172(sp)
204161a0:	c902                	sw	zero,144(sp)
204161a2:	cb02                	sw	zero,148(sp)
204161a4:	cd02                	sw	zero,152(sp)
204161a6:	cf02                	sw	zero,156(sp)
204161a8:	7a8070ef          	jal	ra,2041d950 <__eqtf2>
204161ac:	5382                	lw	t2,32(sp)
204161ae:	4852                	lw	a6,20(sp)
204161b0:	4892                	lw	a7,4(sp)
204161b2:	e119                	bnez	a0,204161b8 <_vfprintf_r+0x5ba>
204161b4:	4785                	li	a5,1
204161b6:	df3e                	sw	a5,188(sp)
204161b8:	06100793          	li	a5,97
204161bc:	26fd1963          	bne	s10,a5,2041642e <_vfprintf_r+0x830>
204161c0:	20422a37          	lui	s4,0x20422
204161c4:	d10a0a13          	addi	s4,s4,-752 # 20421d10 <zeroes.4369+0x50>
204161c8:	20422737          	lui	a4,0x20422
204161cc:	ce070713          	addi	a4,a4,-800 # 20421ce0 <zeroes.4369+0x20>
204161d0:	4314                	lw	a3,0(a4)
204161d2:	435c                	lw	a5,4(a4)
204161d4:	fffb0e13          	addi	t3,s6,-1
204161d8:	d0b6                	sw	a3,96(sp)
204161da:	4714                	lw	a3,8(a4)
204161dc:	4758                	lw	a4,12(a4)
204161de:	8c26                	mv	s8,s1
204161e0:	d2be                	sw	a5,100(sp)
204161e2:	d4b6                	sw	a3,104(sp)
204161e4:	d6ba                	sw	a4,108(sp)
204161e6:	5706                	lw	a4,96(sp)
204161e8:	5796                	lw	a5,100(sp)
204161ea:	56a6                	lw	a3,104(sp)
204161ec:	c13a                	sw	a4,128(sp)
204161ee:	5736                	lw	a4,108(sp)
204161f0:	090c                	addi	a1,sp,144
204161f2:	0110                	addi	a2,sp,128
204161f4:	1108                	addi	a0,sp,160
204161f6:	c246                	sw	a7,4(sp)
204161f8:	c472                	sw	t3,8(sp)
204161fa:	c91e                	sw	t2,144(sp)
204161fc:	cb42                	sw	a6,148(sp)
204161fe:	c33e                	sw	a5,132(sp)
20416200:	c73a                	sw	a4,140(sp)
20416202:	cd6e                	sw	s11,152(sp)
20416204:	cf66                	sw	s9,156(sp)
20416206:	c536                	sw	a3,136(sp)
20416208:	213070ef          	jal	ra,2041dc1a <__multf3>
2041620c:	560a                	lw	a2,160(sp)
2041620e:	569a                	lw	a3,164(sp)
20416210:	1108                	addi	a0,sp,160
20416212:	d032                	sw	a2,32(sp)
20416214:	ca36                	sw	a3,20(sp)
20416216:	47c090ef          	jal	ra,2041f692 <__fixtfsi>
2041621a:	85aa                	mv	a1,a0
2041621c:	8aaa                	mv	s5,a0
2041621e:	1108                	addi	a0,sp,160
20416220:	5daa                	lw	s11,168(sp)
20416222:	5cba                	lw	s9,172(sp)
20416224:	564090ef          	jal	ra,2041f788 <__floatsitf>
20416228:	570a                	lw	a4,160(sp)
2041622a:	5602                	lw	a2,32(sp)
2041622c:	46d2                	lw	a3,20(sp)
2041622e:	d8ba                	sw	a4,112(sp)
20416230:	571a                	lw	a4,164(sp)
20416232:	c132                	sw	a2,128(sp)
20416234:	010c                	addi	a1,sp,128
20416236:	daba                	sw	a4,116(sp)
20416238:	572a                	lw	a4,168(sp)
2041623a:	1890                	addi	a2,sp,112
2041623c:	0908                	addi	a0,sp,144
2041623e:	dcba                	sw	a4,120(sp)
20416240:	573a                	lw	a4,172(sp)
20416242:	c56e                	sw	s11,136(sp)
20416244:	c766                	sw	s9,140(sp)
20416246:	deba                	sw	a4,124(sp)
20416248:	c336                	sw	a3,132(sp)
2041624a:	5a6080ef          	jal	ra,2041e7f0 <__subtf3>
2041624e:	015a0733          	add	a4,s4,s5
20416252:	00074703          	lbu	a4,0(a4)
20416256:	0c05                	addi	s8,s8,1
20416258:	4f6a                	lw	t5,152(sp)
2041625a:	4efa                	lw	t4,156(sp)
2041625c:	42ca                	lw	t0,144(sp)
2041625e:	4fda                	lw	t6,148(sp)
20416260:	feec0fa3          	sb	a4,-1(s8)
20416264:	4e22                	lw	t3,8(sp)
20416266:	577d                	li	a4,-1
20416268:	8dfa                	mv	s11,t5
2041626a:	cef2                	sw	t3,92(sp)
2041626c:	8cf6                	mv	s9,t4
2041626e:	4892                	lw	a7,4(sp)
20416270:	02ee0f63          	beq	t3,a4,204162ae <_vfprintf_r+0x6b0>
20416274:	1e7d                	addi	t3,t3,-1
20416276:	090c                	addi	a1,sp,144
20416278:	1108                	addi	a0,sp,160
2041627a:	d116                	sw	t0,160(sp)
2041627c:	d37e                	sw	t6,164(sp)
2041627e:	d57a                	sw	t5,168(sp)
20416280:	d776                	sw	t4,172(sp)
20416282:	ce16                	sw	t0,28(sp)
20416284:	d016                	sw	t0,32(sp)
20416286:	ca7e                	sw	t6,20(sp)
20416288:	c472                	sw	t3,8(sp)
2041628a:	c676                	sw	t4,12(sp)
2041628c:	c87a                	sw	t5,16(sp)
2041628e:	cc7e                	sw	t6,24(sp)
20416290:	c902                	sw	zero,144(sp)
20416292:	cb02                	sw	zero,148(sp)
20416294:	cd02                	sw	zero,152(sp)
20416296:	cf02                	sw	zero,156(sp)
20416298:	6b8070ef          	jal	ra,2041d950 <__eqtf2>
2041629c:	42f2                	lw	t0,28(sp)
2041629e:	5382                	lw	t2,32(sp)
204162a0:	4852                	lw	a6,20(sp)
204162a2:	4892                	lw	a7,4(sp)
204162a4:	4e22                	lw	t3,8(sp)
204162a6:	4eb2                	lw	t4,12(sp)
204162a8:	4f42                	lw	t5,16(sp)
204162aa:	4fe2                	lw	t6,24(sp)
204162ac:	fd0d                	bnez	a0,204161e6 <_vfprintf_r+0x5e8>
204162ae:	20422737          	lui	a4,0x20422
204162b2:	cf070713          	addi	a4,a4,-784 # 20421cf0 <zeroes.4369+0x30>
204162b6:	4310                	lw	a2,0(a4)
204162b8:	4354                	lw	a3,4(a4)
204162ba:	00872d83          	lw	s11,8(a4)
204162be:	00c72c83          	lw	s9,12(a4)
204162c2:	090c                	addi	a1,sp,144
204162c4:	1108                	addi	a0,sp,160
204162c6:	d116                	sw	t0,160(sp)
204162c8:	d37e                	sw	t6,164(sp)
204162ca:	d57a                	sw	t5,168(sp)
204162cc:	d776                	sw	t4,172(sp)
204162ce:	c932                	sw	a2,144(sp)
204162d0:	cb36                	sw	a3,148(sp)
204162d2:	ce16                	sw	t0,28(sp)
204162d4:	d032                	sw	a2,32(sp)
204162d6:	ca36                	sw	a3,20(sp)
204162d8:	c246                	sw	a7,4(sp)
204162da:	c676                	sw	t4,12(sp)
204162dc:	c87a                	sw	t5,16(sp)
204162de:	cc7e                	sw	t6,24(sp)
204162e0:	cd6e                	sw	s11,152(sp)
204162e2:	cf66                	sw	s9,156(sp)
204162e4:	712070ef          	jal	ra,2041d9f6 <__getf2>
204162e8:	42f2                	lw	t0,28(sp)
204162ea:	5602                	lw	a2,32(sp)
204162ec:	46d2                	lw	a3,20(sp)
204162ee:	4892                	lw	a7,4(sp)
204162f0:	4eb2                	lw	t4,12(sp)
204162f2:	4f42                	lw	t5,16(sp)
204162f4:	4fe2                	lw	t6,24(sp)
204162f6:	02a04563          	bgtz	a0,20416320 <_vfprintf_r+0x722>
204162fa:	090c                	addi	a1,sp,144
204162fc:	1108                	addi	a0,sp,160
204162fe:	d116                	sw	t0,160(sp)
20416300:	d37e                	sw	t6,164(sp)
20416302:	d57a                	sw	t5,168(sp)
20416304:	d776                	sw	t4,172(sp)
20416306:	c932                	sw	a2,144(sp)
20416308:	cb36                	sw	a3,148(sp)
2041630a:	cd6e                	sw	s11,152(sp)
2041630c:	cf66                	sw	s9,156(sp)
2041630e:	642070ef          	jal	ra,2041d950 <__eqtf2>
20416312:	4892                	lw	a7,4(sp)
20416314:	14051163          	bnez	a0,20416456 <_vfprintf_r+0x858>
20416318:	001afa93          	andi	s5,s5,1
2041631c:	120a8d63          	beqz	s5,20416456 <_vfprintf_r+0x858>
20416320:	00fa4603          	lbu	a2,15(s4)
20416324:	c7e2                	sw	s8,204(sp)
20416326:	03000593          	li	a1,48
2041632a:	46be                	lw	a3,204(sp)
2041632c:	fff68713          	addi	a4,a3,-1
20416330:	c7ba                	sw	a4,204(sp)
20416332:	fff6c703          	lbu	a4,-1(a3)
20416336:	10c70163          	beq	a4,a2,20416438 <_vfprintf_r+0x83a>
2041633a:	03900613          	li	a2,57
2041633e:	10c71063          	bne	a4,a2,2041643e <_vfprintf_r+0x840>
20416342:	00aa4703          	lbu	a4,10(s4)
20416346:	fee68fa3          	sb	a4,-1(a3)
2041634a:	8a62                	mv	s4,s8
2041634c:	04700713          	li	a4,71
20416350:	409a0a33          	sub	s4,s4,s1
20416354:	5cfa                	lw	s9,188(sp)
20416356:	1ceb9e63          	bne	s7,a4,20416532 <_vfprintf_r+0x934>
2041635a:	5775                	li	a4,-3
2041635c:	00ecc463          	blt	s9,a4,20416364 <_vfprintf_r+0x766>
20416360:	239b5d63          	ble	s9,s6,2041659a <_vfprintf_r+0x99c>
20416364:	1d79                	addi	s10,s10,-2
20416366:	fffc8693          	addi	a3,s9,-1
2041636a:	df36                	sw	a3,188(sp)
2041636c:	fdfd7613          	andi	a2,s10,-33
20416370:	04100513          	li	a0,65
20416374:	0ffd7713          	andi	a4,s10,255
20416378:	4581                	li	a1,0
2041637a:	00a61663          	bne	a2,a0,20416386 <_vfprintf_r+0x788>
2041637e:	073d                	addi	a4,a4,15
20416380:	0ff77713          	andi	a4,a4,255
20416384:	4585                	li	a1,1
20416386:	0ce10223          	sb	a4,196(sp)
2041638a:	02b00793          	li	a5,43
2041638e:	0006d763          	bgez	a3,2041639c <_vfprintf_r+0x79e>
20416392:	4685                	li	a3,1
20416394:	419686b3          	sub	a3,a3,s9
20416398:	02d00793          	li	a5,45
2041639c:	0cf102a3          	sb	a5,197(sp)
204163a0:	47a5                	li	a5,9
204163a2:	1cd7d363          	ble	a3,a5,20416568 <_vfprintf_r+0x96a>
204163a6:	0d310713          	addi	a4,sp,211
204163aa:	853a                	mv	a0,a4
204163ac:	45a9                	li	a1,10
204163ae:	4825                	li	a6,9
204163b0:	02b6e7b3          	rem	a5,a3,a1
204163b4:	fff70613          	addi	a2,a4,-1
204163b8:	02b6c6b3          	div	a3,a3,a1
204163bc:	03078793          	addi	a5,a5,48
204163c0:	fef70fa3          	sb	a5,-1(a4)
204163c4:	18d84963          	blt	a6,a3,20416556 <_vfprintf_r+0x958>
204163c8:	03068793          	addi	a5,a3,48
204163cc:	fef60fa3          	sb	a5,-1(a2)
204163d0:	1779                	addi	a4,a4,-2
204163d2:	0c610613          	addi	a2,sp,198
204163d6:	18a76263          	bltu	a4,a0,2041655a <_vfprintf_r+0x95c>
204163da:	01dc                	addi	a5,sp,196
204163dc:	40f607b3          	sub	a5,a2,a5
204163e0:	cabe                	sw	a5,84(sp)
204163e2:	01478b33          	add	s6,a5,s4
204163e6:	4785                	li	a5,1
204163e8:	0147c563          	blt	a5,s4,204163f2 <_vfprintf_r+0x7f4>
204163ec:	00147793          	andi	a5,s0,1
204163f0:	c399                	beqz	a5,204163f6 <_vfprintf_r+0x7f8>
204163f2:	55e2                	lw	a1,56(sp)
204163f4:	9b2e                	add	s6,s6,a1
204163f6:	bff47413          	andi	s0,s0,-1025
204163fa:	10046413          	ori	s0,s0,256
204163fe:	da22                	sw	s0,52(sp)
20416400:	4c01                	li	s8,0
20416402:	4b81                	li	s7,0
20416404:	4c81                	li	s9,0
20416406:	4736                	lw	a4,76(sp)
20416408:	c709                	beqz	a4,20416412 <_vfprintf_r+0x814>
2041640a:	02d00713          	li	a4,45
2041640e:	0ae10ba3          	sb	a4,183(sp)
20416412:	5452                	lw	s0,52(sp)
20416414:	4a81                	li	s5,0
20416416:	ae2d                	j	20416750 <_vfprintf_r+0xb52>
20416418:	d202                	sw	zero,36(sp)
2041641a:	1a64                	addi	s1,sp,316
2041641c:	b9c5                	j	2041610c <_vfprintf_r+0x50e>
2041641e:	d22a                	sw	a0,36(sp)
20416420:	b1f5                	j	2041610c <_vfprintf_r+0x50e>
20416422:	d202                	sw	zero,36(sp)
20416424:	4b19                	li	s6,6
20416426:	b1dd                	j	2041610c <_vfprintf_r+0x50e>
20416428:	d25a                	sw	s6,36(sp)
2041642a:	4b05                	li	s6,1
2041642c:	b1c5                	j	2041610c <_vfprintf_r+0x50e>
2041642e:	20422a37          	lui	s4,0x20422
20416432:	d24a0a13          	addi	s4,s4,-732 # 20421d24 <zeroes.4369+0x64>
20416436:	bb49                	j	204161c8 <_vfprintf_r+0x5ca>
20416438:	feb68fa3          	sb	a1,-1(a3)
2041643c:	b5fd                	j	2041632a <_vfprintf_r+0x72c>
2041643e:	0705                	addi	a4,a4,1
20416440:	0ff77713          	andi	a4,a4,255
20416444:	b709                	j	20416346 <_vfprintf_r+0x748>
20416446:	0a05                	addi	s4,s4,1
20416448:	feea0fa3          	sb	a4,-1(s4)
2041644c:	414c07b3          	sub	a5,s8,s4
20416450:	fe07dbe3          	bgez	a5,20416446 <_vfprintf_r+0x848>
20416454:	bde5                	j	2041634c <_vfprintf_r+0x74e>
20416456:	47f6                	lw	a5,92(sp)
20416458:	8a62                	mv	s4,s8
2041645a:	03000713          	li	a4,48
2041645e:	9c3e                	add	s8,s8,a5
20416460:	b7f5                	j	2041644c <_vfprintf_r+0x84e>
20416462:	04600793          	li	a5,70
20416466:	00fb8b63          	beq	s7,a5,2041647c <_vfprintf_r+0x87e>
2041646a:	04500793          	li	a5,69
2041646e:	001b0a93          	addi	s5,s6,1
20416472:	00fb8363          	beq	s7,a5,20416478 <_vfprintf_r+0x87a>
20416476:	8ada                	mv	s5,s6
20416478:	4609                	li	a2,2
2041647a:	a019                	j	20416480 <_vfprintf_r+0x882>
2041647c:	8ada                	mv	s5,s6
2041647e:	460d                	li	a2,3
20416480:	019c                	addi	a5,sp,192
20416482:	0cc10813          	addi	a6,sp,204
20416486:	1978                	addi	a4,sp,188
20416488:	86d6                	mv	a3,s5
2041648a:	110c                	addi	a1,sp,160
2041648c:	854e                	mv	a0,s3
2041648e:	d172                	sw	t3,160(sp)
20416490:	c246                	sw	a7,4(sp)
20416492:	c472                	sw	t3,8(sp)
20416494:	d36e                	sw	s11,164(sp)
20416496:	d566                	sw	s9,168(sp)
20416498:	d752                	sw	s4,172(sp)
2041649a:	0db020ef          	jal	ra,20418d74 <_ldtoa_r>
2041649e:	04700793          	li	a5,71
204164a2:	84aa                	mv	s1,a0
204164a4:	4892                	lw	a7,4(sp)
204164a6:	4e22                	lw	t3,8(sp)
204164a8:	00fb9563          	bne	s7,a5,204164b2 <_vfprintf_r+0x8b4>
204164ac:	00147793          	andi	a5,s0,1
204164b0:	c7b5                	beqz	a5,2041651c <_vfprintf_r+0x91e>
204164b2:	04600793          	li	a5,70
204164b6:	01548c33          	add	s8,s1,s5
204164ba:	02fb9f63          	bne	s7,a5,204164f8 <_vfprintf_r+0x8fa>
204164be:	0004c703          	lbu	a4,0(s1)
204164c2:	03000793          	li	a5,48
204164c6:	02f71763          	bne	a4,a5,204164f4 <_vfprintf_r+0x8f6>
204164ca:	090c                	addi	a1,sp,144
204164cc:	1108                	addi	a0,sp,160
204164ce:	d172                	sw	t3,160(sp)
204164d0:	c246                	sw	a7,4(sp)
204164d2:	c472                	sw	t3,8(sp)
204164d4:	d36e                	sw	s11,164(sp)
204164d6:	d566                	sw	s9,168(sp)
204164d8:	d752                	sw	s4,172(sp)
204164da:	c902                	sw	zero,144(sp)
204164dc:	cb02                	sw	zero,148(sp)
204164de:	cd02                	sw	zero,152(sp)
204164e0:	cf02                	sw	zero,156(sp)
204164e2:	46e070ef          	jal	ra,2041d950 <__eqtf2>
204164e6:	4892                	lw	a7,4(sp)
204164e8:	4e22                	lw	t3,8(sp)
204164ea:	c509                	beqz	a0,204164f4 <_vfprintf_r+0x8f6>
204164ec:	4785                	li	a5,1
204164ee:	41578ab3          	sub	s5,a5,s5
204164f2:	df56                	sw	s5,188(sp)
204164f4:	57fa                	lw	a5,188(sp)
204164f6:	9c3e                	add	s8,s8,a5
204164f8:	090c                	addi	a1,sp,144
204164fa:	1108                	addi	a0,sp,160
204164fc:	c246                	sw	a7,4(sp)
204164fe:	d172                	sw	t3,160(sp)
20416500:	d36e                	sw	s11,164(sp)
20416502:	d566                	sw	s9,168(sp)
20416504:	d752                	sw	s4,172(sp)
20416506:	c902                	sw	zero,144(sp)
20416508:	cb02                	sw	zero,148(sp)
2041650a:	cd02                	sw	zero,152(sp)
2041650c:	cf02                	sw	zero,156(sp)
2041650e:	442070ef          	jal	ra,2041d950 <__eqtf2>
20416512:	4892                	lw	a7,4(sp)
20416514:	03000713          	li	a4,48
20416518:	e909                	bnez	a0,2041652a <_vfprintf_r+0x92c>
2041651a:	c7e2                	sw	s8,204(sp)
2041651c:	4a3e                	lw	s4,204(sp)
2041651e:	b53d                	j	2041634c <_vfprintf_r+0x74e>
20416520:	00178693          	addi	a3,a5,1
20416524:	c7b6                	sw	a3,204(sp)
20416526:	00e78023          	sb	a4,0(a5)
2041652a:	47be                	lw	a5,204(sp)
2041652c:	ff87eae3          	bltu	a5,s8,20416520 <_vfprintf_r+0x922>
20416530:	b7f5                	j	2041651c <_vfprintf_r+0x91e>
20416532:	04600713          	li	a4,70
20416536:	e2eb98e3          	bne	s7,a4,20416366 <_vfprintf_r+0x768>
2041653a:	05905763          	blez	s9,20416588 <_vfprintf_r+0x98a>
2041653e:	000b1563          	bnez	s6,20416548 <_vfprintf_r+0x94a>
20416542:	00147713          	andi	a4,s0,1
20416546:	cf41                	beqz	a4,204165de <_vfprintf_r+0x9e0>
20416548:	5662                	lw	a2,56(sp)
2041654a:	00cc8733          	add	a4,s9,a2
2041654e:	9b3a                	add	s6,s6,a4
20416550:	06600d13          	li	s10,102
20416554:	a895                	j	204165c8 <_vfprintf_r+0x9ca>
20416556:	8732                	mv	a4,a2
20416558:	bda1                	j	204163b0 <_vfprintf_r+0x7b2>
2041655a:	0705                	addi	a4,a4,1
2041655c:	fff74783          	lbu	a5,-1(a4)
20416560:	0605                	addi	a2,a2,1
20416562:	fef60fa3          	sb	a5,-1(a2)
20416566:	bd85                	j	204163d6 <_vfprintf_r+0x7d8>
20416568:	0c610713          	addi	a4,sp,198
2041656c:	e599                	bnez	a1,2041657a <_vfprintf_r+0x97c>
2041656e:	03000793          	li	a5,48
20416572:	0cf10323          	sb	a5,198(sp)
20416576:	0c710713          	addi	a4,sp,199
2041657a:	03068793          	addi	a5,a3,48
2041657e:	00170613          	addi	a2,a4,1
20416582:	00f70023          	sb	a5,0(a4)
20416586:	bd91                	j	204163da <_vfprintf_r+0x7dc>
20416588:	000b1563          	bnez	s6,20416592 <_vfprintf_r+0x994>
2041658c:	00147713          	andi	a4,s0,1
20416590:	cb29                	beqz	a4,204165e2 <_vfprintf_r+0x9e4>
20416592:	56e2                	lw	a3,56(sp)
20416594:	00168713          	addi	a4,a3,1
20416598:	bf5d                	j	2041654e <_vfprintf_r+0x950>
2041659a:	014ccc63          	blt	s9,s4,204165b2 <_vfprintf_r+0x9b4>
2041659e:	00147713          	andi	a4,s0,1
204165a2:	8b66                	mv	s6,s9
204165a4:	c701                	beqz	a4,204165ac <_vfprintf_r+0x9ae>
204165a6:	5762                	lw	a4,56(sp)
204165a8:	00ec8b33          	add	s6,s9,a4
204165ac:	06700d13          	li	s10,103
204165b0:	a821                	j	204165c8 <_vfprintf_r+0x9ca>
204165b2:	57e2                	lw	a5,56(sp)
204165b4:	06700d13          	li	s10,103
204165b8:	00fa0b33          	add	s6,s4,a5
204165bc:	01904663          	bgtz	s9,204165c8 <_vfprintf_r+0x9ca>
204165c0:	419b0333          	sub	t1,s6,s9
204165c4:	00130b13          	addi	s6,t1,1
204165c8:	40047b93          	andi	s7,s0,1024
204165cc:	4c01                	li	s8,0
204165ce:	e20b8ce3          	beqz	s7,20416406 <_vfprintf_r+0x808>
204165d2:	4b81                	li	s7,0
204165d4:	e39059e3          	blez	s9,20416406 <_vfprintf_r+0x808>
204165d8:	0ff00693          	li	a3,255
204165dc:	a015                	j	20416600 <_vfprintf_r+0xa02>
204165de:	8b66                	mv	s6,s9
204165e0:	bf85                	j	20416550 <_vfprintf_r+0x952>
204165e2:	06600d13          	li	s10,102
204165e6:	4b05                	li	s6,1
204165e8:	b7c5                	j	204165c8 <_vfprintf_r+0x9ca>
204165ea:	03975063          	ble	s9,a4,2041660a <_vfprintf_r+0xa0c>
204165ee:	55a2                	lw	a1,40(sp)
204165f0:	40ec8cb3          	sub	s9,s9,a4
204165f4:	0015c703          	lbu	a4,1(a1)
204165f8:	c305                	beqz	a4,20416618 <_vfprintf_r+0xa1a>
204165fa:	0585                	addi	a1,a1,1
204165fc:	0b85                	addi	s7,s7,1
204165fe:	d42e                	sw	a1,40(sp)
20416600:	5622                	lw	a2,40(sp)
20416602:	00064703          	lbu	a4,0(a2)
20416606:	fed712e3          	bne	a4,a3,204165ea <_vfprintf_r+0x9ec>
2041660a:	4696                	lw	a3,68(sp)
2041660c:	018b8733          	add	a4,s7,s8
20416610:	02d70733          	mul	a4,a4,a3
20416614:	9b3a                	add	s6,s6,a4
20416616:	bbc5                	j	20416406 <_vfprintf_r+0x808>
20416618:	0c05                	addi	s8,s8,1
2041661a:	b7dd                	j	20416600 <_vfprintf_r+0xa02>
2041661c:	000aa783          	lw	a5,0(s5)
20416620:	0a91                	addi	s5,s5,4
20416622:	d656                	sw	s5,44(sp)
20416624:	02047713          	andi	a4,s0,32
20416628:	cb11                	beqz	a4,2041663c <_vfprintf_r+0xa3e>
2041662a:	55f2                	lw	a1,60(sp)
2041662c:	41f5d713          	srai	a4,a1,0x1f
20416630:	c38c                	sw	a1,0(a5)
20416632:	c3d8                	sw	a4,4(a5)
20416634:	5ab2                	lw	s5,44(sp)
20416636:	54c2                	lw	s1,48(sp)
20416638:	edeff06f          	j	20415d16 <_vfprintf_r+0x118>
2041663c:	01047713          	andi	a4,s0,16
20416640:	c701                	beqz	a4,20416648 <_vfprintf_r+0xa4a>
20416642:	5672                	lw	a2,60(sp)
20416644:	c390                	sw	a2,0(a5)
20416646:	b7fd                	j	20416634 <_vfprintf_r+0xa36>
20416648:	04047713          	andi	a4,s0,64
2041664c:	c709                	beqz	a4,20416656 <_vfprintf_r+0xa58>
2041664e:	5772                	lw	a4,60(sp)
20416650:	00e79023          	sh	a4,0(a5)
20416654:	b7c5                	j	20416634 <_vfprintf_r+0xa36>
20416656:	20047413          	andi	s0,s0,512
2041665a:	c409                	beqz	s0,20416664 <_vfprintf_r+0xa66>
2041665c:	5772                	lw	a4,60(sp)
2041665e:	00e78023          	sb	a4,0(a5)
20416662:	bfc9                	j	20416634 <_vfprintf_r+0xa36>
20416664:	56f2                	lw	a3,60(sp)
20416666:	c394                	sw	a3,0(a5)
20416668:	b7f1                	j	20416634 <_vfprintf_r+0xa36>
2041666a:	01046413          	ori	s0,s0,16
2041666e:	02047793          	andi	a5,s0,32
20416672:	c3a1                	beqz	a5,204166b2 <_vfprintf_r+0xab4>
20416674:	0a9d                	addi	s5,s5,7
20416676:	ff8afa93          	andi	s5,s5,-8
2041667a:	000aac83          	lw	s9,0(s5)
2041667e:	004aac03          	lw	s8,4(s5)
20416682:	008a8713          	addi	a4,s5,8
20416686:	d63a                	sw	a4,44(sp)
20416688:	bff47413          	andi	s0,s0,-1025
2041668c:	4781                	li	a5,0
2041668e:	0a010ba3          	sb	zero,183(sp)
20416692:	577d                	li	a4,-1
20416694:	30eb0763          	beq	s6,a4,204169a2 <_vfprintf_r+0xda4>
20416698:	8722                	mv	a4,s0
2041669a:	018ce6b3          	or	a3,s9,s8
2041669e:	f7f47413          	andi	s0,s0,-129
204166a2:	30069063          	bnez	a3,204169a2 <_vfprintf_r+0xda4>
204166a6:	400b0663          	beqz	s6,20416ab2 <_vfprintf_r+0xeb4>
204166aa:	4705                	li	a4,1
204166ac:	2ee79e63          	bne	a5,a4,204169a8 <_vfprintf_r+0xdaa>
204166b0:	b0d9                	j	20415f76 <_vfprintf_r+0x378>
204166b2:	004a8793          	addi	a5,s5,4
204166b6:	d63e                	sw	a5,44(sp)
204166b8:	01047793          	andi	a5,s0,16
204166bc:	c781                	beqz	a5,204166c4 <_vfprintf_r+0xac6>
204166be:	000aac83          	lw	s9,0(s5)
204166c2:	a031                	j	204166ce <_vfprintf_r+0xad0>
204166c4:	04047793          	andi	a5,s0,64
204166c8:	c789                	beqz	a5,204166d2 <_vfprintf_r+0xad4>
204166ca:	000adc83          	lhu	s9,0(s5)
204166ce:	4c01                	li	s8,0
204166d0:	bf65                	j	20416688 <_vfprintf_r+0xa8a>
204166d2:	20047793          	andi	a5,s0,512
204166d6:	d7e5                	beqz	a5,204166be <_vfprintf_r+0xac0>
204166d8:	000acc83          	lbu	s9,0(s5)
204166dc:	bfcd                	j	204166ce <_vfprintf_r+0xad0>
204166de:	77e1                	lui	a5,0xffff8
204166e0:	8307c793          	xori	a5,a5,-2000
204166e4:	0af11c23          	sh	a5,184(sp)
204166e8:	204227b7          	lui	a5,0x20422
204166ec:	d1078793          	addi	a5,a5,-752 # 20421d10 <zeroes.4369+0x50>
204166f0:	004a8593          	addi	a1,s5,4
204166f4:	ccbe                	sw	a5,88(sp)
204166f6:	d62e                	sw	a1,44(sp)
204166f8:	000aac83          	lw	s9,0(s5)
204166fc:	4c01                	li	s8,0
204166fe:	00246413          	ori	s0,s0,2
20416702:	4789                	li	a5,2
20416704:	07800d13          	li	s10,120
20416708:	b759                	j	2041668e <_vfprintf_r+0xa90>
2041670a:	004a8613          	addi	a2,s5,4
2041670e:	d632                	sw	a2,44(sp)
20416710:	0a010ba3          	sb	zero,183(sp)
20416714:	57fd                	li	a5,-1
20416716:	000aa483          	lw	s1,0(s5)
2041671a:	02fb0063          	beq	s6,a5,2041673a <_vfprintf_r+0xb3c>
2041671e:	865a                	mv	a2,s6
20416720:	4581                	li	a1,0
20416722:	8526                	mv	a0,s1
20416724:	c246                	sw	a7,4(sp)
20416726:	56e030ef          	jal	ra,20419c94 <memchr>
2041672a:	d22a                	sw	a0,36(sp)
2041672c:	4892                	lw	a7,4(sp)
2041672e:	900503e3          	beqz	a0,20416034 <_vfprintf_r+0x436>
20416732:	40950b33          	sub	s6,a0,s1
20416736:	d202                	sw	zero,36(sp)
20416738:	b8f5                	j	20416034 <_vfprintf_r+0x436>
2041673a:	8526                	mv	a0,s1
2041673c:	c246                	sw	a7,4(sp)
2041673e:	8eefd0ef          	jal	ra,2041382c <strlen>
20416742:	4892                	lw	a7,4(sp)
20416744:	8b2a                	mv	s6,a0
20416746:	d202                	sw	zero,36(sp)
20416748:	4a81                	li	s5,0
2041674a:	4c01                	li	s8,0
2041674c:	4b81                	li	s7,0
2041674e:	4c81                	li	s9,0
20416750:	da56                	sw	s5,52(sp)
20416752:	016ad363          	ble	s6,s5,20416758 <_vfprintf_r+0xb5a>
20416756:	da5a                	sw	s6,52(sp)
20416758:	0b714703          	lbu	a4,183(sp)
2041675c:	c701                	beqz	a4,20416764 <_vfprintf_r+0xb66>
2041675e:	5752                	lw	a4,52(sp)
20416760:	0705                	addi	a4,a4,1
20416762:	da3a                	sw	a4,52(sp)
20416764:	00247d93          	andi	s11,s0,2
20416768:	000d8563          	beqz	s11,20416772 <_vfprintf_r+0xb74>
2041676c:	57d2                	lw	a5,52(sp)
2041676e:	0789                	addi	a5,a5,2
20416770:	da3e                	sw	a5,52(sp)
20416772:	08447693          	andi	a3,s0,132
20416776:	c6b6                	sw	a3,76(sp)
20416778:	eaa1                	bnez	a3,204167c8 <_vfprintf_r+0xbca>
2041677a:	4786                	lw	a5,64(sp)
2041677c:	56d2                	lw	a3,52(sp)
2041677e:	40d78733          	sub	a4,a5,a3
20416782:	04e05363          	blez	a4,204167c8 <_vfprintf_r+0xbca>
20416786:	20422e37          	lui	t3,0x20422
2041678a:	4ec1                	li	t4,16
2041678c:	034e0e13          	addi	t3,t3,52 # 20422034 <blanks.4383>
20416790:	4f1d                	li	t5,7
20416792:	46ee                	lw	a3,216(sp)
20416794:	01c8a023          	sw	t3,0(a7)
20416798:	467e                	lw	a2,220(sp)
2041679a:	0685                	addi	a3,a3,1
2041679c:	00888593          	addi	a1,a7,8
204167a0:	32eecd63          	blt	t4,a4,20416ada <_vfprintf_r+0xedc>
204167a4:	00e8a223          	sw	a4,4(a7)
204167a8:	9732                	add	a4,a4,a2
204167aa:	cfba                	sw	a4,220(sp)
204167ac:	cdb6                	sw	a3,216(sp)
204167ae:	471d                	li	a4,7
204167b0:	88ae                	mv	a7,a1
204167b2:	00d75b63          	ble	a3,a4,204167c8 <_vfprintf_r+0xbca>
204167b6:	09d0                	addi	a2,sp,212
204167b8:	85ca                	mv	a1,s2
204167ba:	854e                	mv	a0,s3
204167bc:	a2bfe0ef          	jal	ra,204151e6 <__sprint_r>
204167c0:	260513e3          	bnez	a0,20417226 <_vfprintf_r+0x1628>
204167c4:	0fc10893          	addi	a7,sp,252
204167c8:	0b714703          	lbu	a4,183(sp)
204167cc:	cb1d                	beqz	a4,20416802 <_vfprintf_r+0xc04>
204167ce:	0b710713          	addi	a4,sp,183
204167d2:	00e8a023          	sw	a4,0(a7)
204167d6:	4705                	li	a4,1
204167d8:	00e8a223          	sw	a4,4(a7)
204167dc:	477e                	lw	a4,220(sp)
204167de:	469d                	li	a3,7
204167e0:	08a1                	addi	a7,a7,8
204167e2:	0705                	addi	a4,a4,1
204167e4:	cfba                	sw	a4,220(sp)
204167e6:	476e                	lw	a4,216(sp)
204167e8:	0705                	addi	a4,a4,1
204167ea:	cdba                	sw	a4,216(sp)
204167ec:	00e6db63          	ble	a4,a3,20416802 <_vfprintf_r+0xc04>
204167f0:	09d0                	addi	a2,sp,212
204167f2:	85ca                	mv	a1,s2
204167f4:	854e                	mv	a0,s3
204167f6:	9f1fe0ef          	jal	ra,204151e6 <__sprint_r>
204167fa:	220516e3          	bnez	a0,20417226 <_vfprintf_r+0x1628>
204167fe:	0fc10893          	addi	a7,sp,252
20416802:	020d8b63          	beqz	s11,20416838 <_vfprintf_r+0xc3a>
20416806:	1938                	addi	a4,sp,184
20416808:	00e8a023          	sw	a4,0(a7)
2041680c:	4709                	li	a4,2
2041680e:	00e8a223          	sw	a4,4(a7)
20416812:	477e                	lw	a4,220(sp)
20416814:	469d                	li	a3,7
20416816:	08a1                	addi	a7,a7,8
20416818:	0709                	addi	a4,a4,2
2041681a:	cfba                	sw	a4,220(sp)
2041681c:	476e                	lw	a4,216(sp)
2041681e:	0705                	addi	a4,a4,1
20416820:	cdba                	sw	a4,216(sp)
20416822:	00e6db63          	ble	a4,a3,20416838 <_vfprintf_r+0xc3a>
20416826:	09d0                	addi	a2,sp,212
20416828:	85ca                	mv	a1,s2
2041682a:	854e                	mv	a0,s3
2041682c:	9bbfe0ef          	jal	ra,204151e6 <__sprint_r>
20416830:	1e051be3          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416834:	0fc10893          	addi	a7,sp,252
20416838:	47b6                	lw	a5,76(sp)
2041683a:	08000713          	li	a4,128
2041683e:	04e79963          	bne	a5,a4,20416890 <_vfprintf_r+0xc92>
20416842:	4586                	lw	a1,64(sp)
20416844:	56d2                	lw	a3,52(sp)
20416846:	40d58db3          	sub	s11,a1,a3
2041684a:	05b05363          	blez	s11,20416890 <_vfprintf_r+0xc92>
2041684e:	47c1                	li	a5,16
20416850:	4e1d                	li	t3,7
20416852:	476e                	lw	a4,216(sp)
20416854:	46fe                	lw	a3,220(sp)
20416856:	00888613          	addi	a2,a7,8
2041685a:	0705                	addi	a4,a4,1
2041685c:	2bb7c963          	blt	a5,s11,20416b0e <_vfprintf_r+0xf10>
20416860:	204227b7          	lui	a5,0x20422
20416864:	01b8a223          	sw	s11,4(a7)
20416868:	04478793          	addi	a5,a5,68 # 20422044 <zeroes.4384>
2041686c:	9db6                	add	s11,s11,a3
2041686e:	00f8a023          	sw	a5,0(a7)
20416872:	cfee                	sw	s11,220(sp)
20416874:	cdba                	sw	a4,216(sp)
20416876:	469d                	li	a3,7
20416878:	88b2                	mv	a7,a2
2041687a:	00e6db63          	ble	a4,a3,20416890 <_vfprintf_r+0xc92>
2041687e:	09d0                	addi	a2,sp,212
20416880:	85ca                	mv	a1,s2
20416882:	854e                	mv	a0,s3
20416884:	963fe0ef          	jal	ra,204151e6 <__sprint_r>
20416888:	18051fe3          	bnez	a0,20417226 <_vfprintf_r+0x1628>
2041688c:	0fc10893          	addi	a7,sp,252
20416890:	416a8ab3          	sub	s5,s5,s6
20416894:	05505363          	blez	s5,204168da <_vfprintf_r+0xcdc>
20416898:	4dc1                	li	s11,16
2041689a:	481d                	li	a6,7
2041689c:	476e                	lw	a4,216(sp)
2041689e:	46fe                	lw	a3,220(sp)
204168a0:	00888613          	addi	a2,a7,8
204168a4:	0705                	addi	a4,a4,1
204168a6:	2b5dc063          	blt	s11,s5,20416b46 <_vfprintf_r+0xf48>
204168aa:	204227b7          	lui	a5,0x20422
204168ae:	0158a223          	sw	s5,4(a7)
204168b2:	04478793          	addi	a5,a5,68 # 20422044 <zeroes.4384>
204168b6:	9ab6                	add	s5,s5,a3
204168b8:	00f8a023          	sw	a5,0(a7)
204168bc:	cfd6                	sw	s5,220(sp)
204168be:	cdba                	sw	a4,216(sp)
204168c0:	469d                	li	a3,7
204168c2:	88b2                	mv	a7,a2
204168c4:	00e6db63          	ble	a4,a3,204168da <_vfprintf_r+0xcdc>
204168c8:	09d0                	addi	a2,sp,212
204168ca:	85ca                	mv	a1,s2
204168cc:	854e                	mv	a0,s3
204168ce:	919fe0ef          	jal	ra,204151e6 <__sprint_r>
204168d2:	14051ae3          	bnez	a0,20417226 <_vfprintf_r+0x1628>
204168d6:	0fc10893          	addi	a7,sp,252
204168da:	10047713          	andi	a4,s0,256
204168de:	4dfe                	lw	s11,220(sp)
204168e0:	28071d63          	bnez	a4,20416b7a <_vfprintf_r+0xf7c>
204168e4:	01bb0333          	add	t1,s6,s11
204168e8:	0098a023          	sw	s1,0(a7)
204168ec:	0168a223          	sw	s6,4(a7)
204168f0:	cf9a                	sw	t1,220(sp)
204168f2:	47ee                	lw	a5,216(sp)
204168f4:	471d                	li	a4,7
204168f6:	08a1                	addi	a7,a7,8
204168f8:	0785                	addi	a5,a5,1
204168fa:	cdbe                	sw	a5,216(sp)
204168fc:	34f75d63          	ble	a5,a4,20416c56 <_vfprintf_r+0x1058>
20416900:	09d0                	addi	a2,sp,212
20416902:	85ca                	mv	a1,s2
20416904:	854e                	mv	a0,s3
20416906:	8e1fe0ef          	jal	ra,204151e6 <__sprint_r>
2041690a:	10051ee3          	bnez	a0,20417226 <_vfprintf_r+0x1628>
2041690e:	0fc10893          	addi	a7,sp,252
20416912:	a691                	j	20416c56 <_vfprintf_r+0x1058>
20416914:	01046413          	ori	s0,s0,16
20416918:	02047793          	andi	a5,s0,32
2041691c:	cf89                	beqz	a5,20416936 <_vfprintf_r+0xd38>
2041691e:	0a9d                	addi	s5,s5,7
20416920:	ff8afa93          	andi	s5,s5,-8
20416924:	000aac83          	lw	s9,0(s5)
20416928:	004aac03          	lw	s8,4(s5)
2041692c:	008a8693          	addi	a3,s5,8
20416930:	d636                	sw	a3,44(sp)
20416932:	4785                	li	a5,1
20416934:	bba9                	j	2041668e <_vfprintf_r+0xa90>
20416936:	004a8713          	addi	a4,s5,4
2041693a:	d63a                	sw	a4,44(sp)
2041693c:	01047793          	andi	a5,s0,16
20416940:	c781                	beqz	a5,20416948 <_vfprintf_r+0xd4a>
20416942:	000aac83          	lw	s9,0(s5)
20416946:	a031                	j	20416952 <_vfprintf_r+0xd54>
20416948:	04047793          	andi	a5,s0,64
2041694c:	c789                	beqz	a5,20416956 <_vfprintf_r+0xd58>
2041694e:	000adc83          	lhu	s9,0(s5)
20416952:	4c01                	li	s8,0
20416954:	bff9                	j	20416932 <_vfprintf_r+0xd34>
20416956:	20047793          	andi	a5,s0,512
2041695a:	d7e5                	beqz	a5,20416942 <_vfprintf_r+0xd44>
2041695c:	000acc83          	lbu	s9,0(s5)
20416960:	bfcd                	j	20416952 <_vfprintf_r+0xd54>
20416962:	204227b7          	lui	a5,0x20422
20416966:	d1078793          	addi	a5,a5,-752 # 20421d10 <zeroes.4369+0x50>
2041696a:	c4aff06f          	j	20415db4 <_vfprintf_r+0x1b6>
2041696e:	004a8593          	addi	a1,s5,4
20416972:	d62e                	sw	a1,44(sp)
20416974:	01047793          	andi	a5,s0,16
20416978:	c781                	beqz	a5,20416980 <_vfprintf_r+0xd82>
2041697a:	000aac83          	lw	s9,0(s5)
2041697e:	a031                	j	2041698a <_vfprintf_r+0xd8c>
20416980:	04047793          	andi	a5,s0,64
20416984:	c791                	beqz	a5,20416990 <_vfprintf_r+0xd92>
20416986:	000adc83          	lhu	s9,0(s5)
2041698a:	4c01                	li	s8,0
2041698c:	c46ff06f          	j	20415dd2 <_vfprintf_r+0x1d4>
20416990:	20047793          	andi	a5,s0,512
20416994:	d3fd                	beqz	a5,2041697a <_vfprintf_r+0xd7c>
20416996:	000acc83          	lbu	s9,0(s5)
2041699a:	bfc5                	j	2041698a <_vfprintf_r+0xd8c>
2041699c:	8722                	mv	a4,s0
2041699e:	4785                	li	a5,1
204169a0:	b9ed                	j	2041669a <_vfprintf_r+0xa9c>
204169a2:	4705                	li	a4,1
204169a4:	dce78463          	beq	a5,a4,20415f6c <_vfprintf_r+0x36e>
204169a8:	4709                	li	a4,2
204169aa:	0ce78e63          	beq	a5,a4,20416a86 <_vfprintf_r+0xe88>
204169ae:	131c                	addi	a5,sp,416
204169b0:	01dc1693          	slli	a3,s8,0x1d
204169b4:	007cf713          	andi	a4,s9,7
204169b8:	003cdc93          	srli	s9,s9,0x3
204169bc:	03070713          	addi	a4,a4,48
204169c0:	0196ecb3          	or	s9,a3,s9
204169c4:	003c5c13          	srli	s8,s8,0x3
204169c8:	fee78fa3          	sb	a4,-1(a5)
204169cc:	018ce6b3          	or	a3,s9,s8
204169d0:	fff78493          	addi	s1,a5,-1
204169d4:	e68d                	bnez	a3,204169fe <_vfprintf_r+0xe00>
204169d6:	00147693          	andi	a3,s0,1
204169da:	ca89                	beqz	a3,204169ec <_vfprintf_r+0xdee>
204169dc:	03000693          	li	a3,48
204169e0:	00d70663          	beq	a4,a3,204169ec <_vfprintf_r+0xdee>
204169e4:	fed48fa3          	sb	a3,-1(s1)
204169e8:	ffe78493          	addi	s1,a5,-2
204169ec:	1314                	addi	a3,sp,416
204169ee:	8ada                	mv	s5,s6
204169f0:	d202                	sw	zero,36(sp)
204169f2:	40968b33          	sub	s6,a3,s1
204169f6:	4c01                	li	s8,0
204169f8:	4b81                	li	s7,0
204169fa:	4c81                	li	s9,0
204169fc:	bb91                	j	20416750 <_vfprintf_r+0xb52>
204169fe:	87a6                	mv	a5,s1
20416a00:	bf45                	j	204169b0 <_vfprintf_r+0xdb2>
20416a02:	4a01                	li	s4,0
20416a04:	1a010d93          	addi	s11,sp,416
20416a08:	40047a93          	andi	s5,s0,1024
20416a0c:	4ba5                	li	s7,9
20416a0e:	4629                	li	a2,10
20416a10:	4681                	li	a3,0
20416a12:	8566                	mv	a0,s9
20416a14:	85e2                	mv	a1,s8
20416a16:	c246                	sw	a7,4(sp)
20416a18:	2db050ef          	jal	ra,2041c4f2 <__umoddi3>
20416a1c:	03050513          	addi	a0,a0,48
20416a20:	fead8fa3          	sb	a0,-1(s11)
20416a24:	fffd8493          	addi	s1,s11,-1
20416a28:	0a05                	addi	s4,s4,1
20416a2a:	4892                	lw	a7,4(sp)
20416a2c:	020a8f63          	beqz	s5,20416a6a <_vfprintf_r+0xe6c>
20416a30:	5622                	lw	a2,40(sp)
20416a32:	00064783          	lbu	a5,0(a2)
20416a36:	02fa1a63          	bne	s4,a5,20416a6a <_vfprintf_r+0xe6c>
20416a3a:	0ff00693          	li	a3,255
20416a3e:	02da0663          	beq	s4,a3,20416a6a <_vfprintf_r+0xe6c>
20416a42:	000c1463          	bnez	s8,20416a4a <_vfprintf_r+0xe4c>
20416a46:	039bf263          	bleu	s9,s7,20416a6a <_vfprintf_r+0xe6c>
20416a4a:	4716                	lw	a4,68(sp)
20416a4c:	45c6                	lw	a1,80(sp)
20416a4e:	c246                	sw	a7,4(sp)
20416a50:	8c99                	sub	s1,s1,a4
20416a52:	863a                	mv	a2,a4
20416a54:	8526                	mv	a0,s1
20416a56:	e13fc0ef          	jal	ra,20413868 <strncpy>
20416a5a:	55a2                	lw	a1,40(sp)
20416a5c:	4a01                	li	s4,0
20416a5e:	4892                	lw	a7,4(sp)
20416a60:	0015c783          	lbu	a5,1(a1)
20416a64:	c399                	beqz	a5,20416a6a <_vfprintf_r+0xe6c>
20416a66:	0585                	addi	a1,a1,1
20416a68:	d42e                	sw	a1,40(sp)
20416a6a:	8566                	mv	a0,s9
20416a6c:	85e2                	mv	a1,s8
20416a6e:	4629                	li	a2,10
20416a70:	4681                	li	a3,0
20416a72:	c246                	sw	a7,4(sp)
20416a74:	720050ef          	jal	ra,2041c194 <__udivdi3>
20416a78:	8c2e                	mv	s8,a1
20416a7a:	8dc9                	or	a1,a1,a0
20416a7c:	8caa                	mv	s9,a0
20416a7e:	4892                	lw	a7,4(sp)
20416a80:	d5b5                	beqz	a1,204169ec <_vfprintf_r+0xdee>
20416a82:	8da6                	mv	s11,s1
20416a84:	b769                	j	20416a0e <_vfprintf_r+0xe10>
20416a86:	1304                	addi	s1,sp,416
20416a88:	4666                	lw	a2,88(sp)
20416a8a:	00fcf793          	andi	a5,s9,15
20416a8e:	14fd                	addi	s1,s1,-1
20416a90:	97b2                	add	a5,a5,a2
20416a92:	0007c783          	lbu	a5,0(a5)
20416a96:	004cdc93          	srli	s9,s9,0x4
20416a9a:	00f48023          	sb	a5,0(s1)
20416a9e:	01cc1793          	slli	a5,s8,0x1c
20416aa2:	0197ecb3          	or	s9,a5,s9
20416aa6:	004c5c13          	srli	s8,s8,0x4
20416aaa:	018ce7b3          	or	a5,s9,s8
20416aae:	ffe9                	bnez	a5,20416a88 <_vfprintf_r+0xe8a>
20416ab0:	bf35                	j	204169ec <_vfprintf_r+0xdee>
20416ab2:	1304                	addi	s1,sp,416
20416ab4:	ff85                	bnez	a5,204169ec <_vfprintf_r+0xdee>
20416ab6:	8b05                	andi	a4,a4,1
20416ab8:	db15                	beqz	a4,204169ec <_vfprintf_r+0xdee>
20416aba:	03000793          	li	a5,48
20416abe:	18f10fa3          	sb	a5,415(sp)
20416ac2:	cbcff06f          	j	20415f7e <_vfprintf_r+0x380>
20416ac6:	7a0d0163          	beqz	s10,20417268 <_vfprintf_r+0x166a>
20416aca:	87ea                	mv	a5,s10
20416acc:	12f10e23          	sb	a5,316(sp)
20416ad0:	0a010ba3          	sb	zero,183(sp)
20416ad4:	d656                	sw	s5,44(sp)
20416ad6:	c44ff06f          	j	20415f1a <_vfprintf_r+0x31c>
20416ada:	0641                	addi	a2,a2,16
20416adc:	01d8a223          	sw	t4,4(a7)
20416ae0:	cfb2                	sw	a2,220(sp)
20416ae2:	cdb6                	sw	a3,216(sp)
20416ae4:	02df5263          	ble	a3,t5,20416b08 <_vfprintf_r+0xf0a>
20416ae8:	09d0                	addi	a2,sp,212
20416aea:	85ca                	mv	a1,s2
20416aec:	854e                	mv	a0,s3
20416aee:	d03a                	sw	a4,32(sp)
20416af0:	c472                	sw	t3,8(sp)
20416af2:	c676                	sw	t4,12(sp)
20416af4:	c87a                	sw	t5,16(sp)
20416af6:	ef0fe0ef          	jal	ra,204151e6 <__sprint_r>
20416afa:	5702                	lw	a4,32(sp)
20416afc:	4e22                	lw	t3,8(sp)
20416afe:	4eb2                	lw	t4,12(sp)
20416b00:	4f42                	lw	t5,16(sp)
20416b02:	72051263          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416b06:	19ec                	addi	a1,sp,252
20416b08:	1741                	addi	a4,a4,-16
20416b0a:	88ae                	mv	a7,a1
20416b0c:	b159                	j	20416792 <_vfprintf_r+0xb94>
20416b0e:	204225b7          	lui	a1,0x20422
20416b12:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
20416b16:	06c1                	addi	a3,a3,16
20416b18:	00b8a023          	sw	a1,0(a7)
20416b1c:	00f8a223          	sw	a5,4(a7)
20416b20:	cfb6                	sw	a3,220(sp)
20416b22:	cdba                	sw	a4,216(sp)
20416b24:	00ee5e63          	ble	a4,t3,20416b40 <_vfprintf_r+0xf42>
20416b28:	09d0                	addi	a2,sp,212
20416b2a:	85ca                	mv	a1,s2
20416b2c:	854e                	mv	a0,s3
20416b2e:	d03e                	sw	a5,32(sp)
20416b30:	c472                	sw	t3,8(sp)
20416b32:	eb4fe0ef          	jal	ra,204151e6 <__sprint_r>
20416b36:	5782                	lw	a5,32(sp)
20416b38:	4e22                	lw	t3,8(sp)
20416b3a:	6e051663          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416b3e:	19f0                	addi	a2,sp,252
20416b40:	1dc1                	addi	s11,s11,-16
20416b42:	88b2                	mv	a7,a2
20416b44:	b339                	j	20416852 <_vfprintf_r+0xc54>
20416b46:	204225b7          	lui	a1,0x20422
20416b4a:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
20416b4e:	06c1                	addi	a3,a3,16
20416b50:	00b8a023          	sw	a1,0(a7)
20416b54:	01b8a223          	sw	s11,4(a7)
20416b58:	cfb6                	sw	a3,220(sp)
20416b5a:	cdba                	sw	a4,216(sp)
20416b5c:	00e85c63          	ble	a4,a6,20416b74 <_vfprintf_r+0xf76>
20416b60:	09d0                	addi	a2,sp,212
20416b62:	85ca                	mv	a1,s2
20416b64:	854e                	mv	a0,s3
20416b66:	ca42                	sw	a6,20(sp)
20416b68:	e7efe0ef          	jal	ra,204151e6 <__sprint_r>
20416b6c:	4852                	lw	a6,20(sp)
20416b6e:	6a051c63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416b72:	19f0                	addi	a2,sp,252
20416b74:	1ac1                	addi	s5,s5,-16
20416b76:	88b2                	mv	a7,a2
20416b78:	b315                	j	2041689c <_vfprintf_r+0xc9e>
20416b7a:	06500713          	li	a4,101
20416b7e:	51a75463          	ble	s10,a4,20417086 <_vfprintf_r+0x1488>
20416b82:	570e                	lw	a4,224(sp)
20416b84:	090c                	addi	a1,sp,144
20416b86:	1108                	addi	a0,sp,160
20416b88:	d13a                	sw	a4,160(sp)
20416b8a:	571e                	lw	a4,228(sp)
20416b8c:	c246                	sw	a7,4(sp)
20416b8e:	c902                	sw	zero,144(sp)
20416b90:	d33a                	sw	a4,164(sp)
20416b92:	572e                	lw	a4,232(sp)
20416b94:	cb02                	sw	zero,148(sp)
20416b96:	cd02                	sw	zero,152(sp)
20416b98:	d53a                	sw	a4,168(sp)
20416b9a:	573e                	lw	a4,236(sp)
20416b9c:	cf02                	sw	zero,156(sp)
20416b9e:	d73a                	sw	a4,172(sp)
20416ba0:	5b1060ef          	jal	ra,2041d950 <__eqtf2>
20416ba4:	4892                	lw	a7,4(sp)
20416ba6:	10051b63          	bnez	a0,20416cbc <_vfprintf_r+0x10be>
20416baa:	204227b7          	lui	a5,0x20422
20416bae:	d3878793          	addi	a5,a5,-712 # 20421d38 <zeroes.4369+0x78>
20416bb2:	00f8a023          	sw	a5,0(a7)
20416bb6:	4785                	li	a5,1
20416bb8:	00f8a223          	sw	a5,4(a7)
20416bbc:	47ee                	lw	a5,216(sp)
20416bbe:	0d85                	addi	s11,s11,1
20416bc0:	cfee                	sw	s11,220(sp)
20416bc2:	0785                	addi	a5,a5,1
20416bc4:	cdbe                	sw	a5,216(sp)
20416bc6:	471d                	li	a4,7
20416bc8:	08a1                	addi	a7,a7,8
20416bca:	00f75b63          	ble	a5,a4,20416be0 <_vfprintf_r+0xfe2>
20416bce:	09d0                	addi	a2,sp,212
20416bd0:	85ca                	mv	a1,s2
20416bd2:	854e                	mv	a0,s3
20416bd4:	e12fe0ef          	jal	ra,204151e6 <__sprint_r>
20416bd8:	64051763          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416bdc:	0fc10893          	addi	a7,sp,252
20416be0:	57fa                	lw	a5,188(sp)
20416be2:	0147c563          	blt	a5,s4,20416bec <_vfprintf_r+0xfee>
20416be6:	00147793          	andi	a5,s0,1
20416bea:	c7b5                	beqz	a5,20416c56 <_vfprintf_r+0x1058>
20416bec:	5662                	lw	a2,56(sp)
20416bee:	47fe                	lw	a5,220(sp)
20416bf0:	45a6                	lw	a1,72(sp)
20416bf2:	00c8a223          	sw	a2,4(a7)
20416bf6:	97b2                	add	a5,a5,a2
20416bf8:	cfbe                	sw	a5,220(sp)
20416bfa:	47ee                	lw	a5,216(sp)
20416bfc:	00b8a023          	sw	a1,0(a7)
20416c00:	471d                	li	a4,7
20416c02:	0785                	addi	a5,a5,1
20416c04:	cdbe                	sw	a5,216(sp)
20416c06:	08a1                	addi	a7,a7,8
20416c08:	00f75b63          	ble	a5,a4,20416c1e <_vfprintf_r+0x1020>
20416c0c:	09d0                	addi	a2,sp,212
20416c0e:	85ca                	mv	a1,s2
20416c10:	854e                	mv	a0,s3
20416c12:	dd4fe0ef          	jal	ra,204151e6 <__sprint_r>
20416c16:	60051863          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416c1a:	0fc10893          	addi	a7,sp,252
20416c1e:	fffa0493          	addi	s1,s4,-1
20416c22:	02905a63          	blez	s1,20416c56 <_vfprintf_r+0x1058>
20416c26:	4ac1                	li	s5,16
20416c28:	4b9d                	li	s7,7
20416c2a:	47ee                	lw	a5,216(sp)
20416c2c:	477e                	lw	a4,220(sp)
20416c2e:	00888693          	addi	a3,a7,8
20416c32:	0785                	addi	a5,a5,1
20416c34:	049acc63          	blt	s5,s1,20416c8c <_vfprintf_r+0x108e>
20416c38:	20422637          	lui	a2,0x20422
20416c3c:	04460613          	addi	a2,a2,68 # 20422044 <zeroes.4384>
20416c40:	0098a223          	sw	s1,4(a7)
20416c44:	00c8a023          	sw	a2,0(a7)
20416c48:	94ba                	add	s1,s1,a4
20416c4a:	cfa6                	sw	s1,220(sp)
20416c4c:	cdbe                	sw	a5,216(sp)
20416c4e:	471d                	li	a4,7
20416c50:	88b6                	mv	a7,a3
20416c52:	caf747e3          	blt	a4,a5,20416900 <_vfprintf_r+0xd02>
20416c56:	8811                	andi	s0,s0,4
20416c58:	58041563          	bnez	s0,204171e2 <_vfprintf_r+0x15e4>
20416c5c:	4d06                	lw	s10,64(sp)
20416c5e:	5752                	lw	a4,52(sp)
20416c60:	00ed5363          	ble	a4,s10,20416c66 <_vfprintf_r+0x1068>
20416c64:	8d3a                	mv	s10,a4
20416c66:	57f2                	lw	a5,60(sp)
20416c68:	97ea                	add	a5,a5,s10
20416c6a:	de3e                	sw	a5,60(sp)
20416c6c:	47fe                	lw	a5,220(sp)
20416c6e:	cb81                	beqz	a5,20416c7e <_vfprintf_r+0x1080>
20416c70:	09d0                	addi	a2,sp,212
20416c72:	85ca                	mv	a1,s2
20416c74:	854e                	mv	a0,s3
20416c76:	d70fe0ef          	jal	ra,204151e6 <__sprint_r>
20416c7a:	5a051663          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416c7e:	5712                	lw	a4,36(sp)
20416c80:	cd82                	sw	zero,216(sp)
20416c82:	5c071e63          	bnez	a4,2041725e <_vfprintf_r+0x1660>
20416c86:	0fc10893          	addi	a7,sp,252
20416c8a:	b26d                	j	20416634 <_vfprintf_r+0xa36>
20416c8c:	204225b7          	lui	a1,0x20422
20416c90:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
20416c94:	0741                	addi	a4,a4,16
20416c96:	00b8a023          	sw	a1,0(a7)
20416c9a:	0158a223          	sw	s5,4(a7)
20416c9e:	cfba                	sw	a4,220(sp)
20416ca0:	cdbe                	sw	a5,216(sp)
20416ca2:	00fbda63          	ble	a5,s7,20416cb6 <_vfprintf_r+0x10b8>
20416ca6:	09d0                	addi	a2,sp,212
20416ca8:	85ca                	mv	a1,s2
20416caa:	854e                	mv	a0,s3
20416cac:	d3afe0ef          	jal	ra,204151e6 <__sprint_r>
20416cb0:	56051b63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416cb4:	19f4                	addi	a3,sp,252
20416cb6:	14c1                	addi	s1,s1,-16
20416cb8:	88b6                	mv	a7,a3
20416cba:	bf85                	j	20416c2a <_vfprintf_r+0x102c>
20416cbc:	577a                	lw	a4,188(sp)
20416cbe:	10e04163          	bgtz	a4,20416dc0 <_vfprintf_r+0x11c2>
20416cc2:	204227b7          	lui	a5,0x20422
20416cc6:	d3878793          	addi	a5,a5,-712 # 20421d38 <zeroes.4369+0x78>
20416cca:	00f8a023          	sw	a5,0(a7)
20416cce:	4785                	li	a5,1
20416cd0:	00f8a223          	sw	a5,4(a7)
20416cd4:	47ee                	lw	a5,216(sp)
20416cd6:	0d85                	addi	s11,s11,1
20416cd8:	cfee                	sw	s11,220(sp)
20416cda:	0785                	addi	a5,a5,1
20416cdc:	cdbe                	sw	a5,216(sp)
20416cde:	471d                	li	a4,7
20416ce0:	08a1                	addi	a7,a7,8
20416ce2:	00f75b63          	ble	a5,a4,20416cf8 <_vfprintf_r+0x10fa>
20416ce6:	09d0                	addi	a2,sp,212
20416ce8:	85ca                	mv	a1,s2
20416cea:	854e                	mv	a0,s3
20416cec:	cfafe0ef          	jal	ra,204151e6 <__sprint_r>
20416cf0:	52051b63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416cf4:	0fc10893          	addi	a7,sp,252
20416cf8:	57fa                	lw	a5,188(sp)
20416cfa:	e791                	bnez	a5,20416d06 <_vfprintf_r+0x1108>
20416cfc:	000a1563          	bnez	s4,20416d06 <_vfprintf_r+0x1108>
20416d00:	00147793          	andi	a5,s0,1
20416d04:	dba9                	beqz	a5,20416c56 <_vfprintf_r+0x1058>
20416d06:	5762                	lw	a4,56(sp)
20416d08:	47fe                	lw	a5,220(sp)
20416d0a:	46a6                	lw	a3,72(sp)
20416d0c:	00e8a223          	sw	a4,4(a7)
20416d10:	97ba                	add	a5,a5,a4
20416d12:	cfbe                	sw	a5,220(sp)
20416d14:	47ee                	lw	a5,216(sp)
20416d16:	00d8a023          	sw	a3,0(a7)
20416d1a:	471d                	li	a4,7
20416d1c:	0785                	addi	a5,a5,1
20416d1e:	cdbe                	sw	a5,216(sp)
20416d20:	08a1                	addi	a7,a7,8
20416d22:	00f75b63          	ble	a5,a4,20416d38 <_vfprintf_r+0x113a>
20416d26:	09d0                	addi	a2,sp,212
20416d28:	85ca                	mv	a1,s2
20416d2a:	854e                	mv	a0,s3
20416d2c:	cbafe0ef          	jal	ra,204151e6 <__sprint_r>
20416d30:	4e051b63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416d34:	0fc10893          	addi	a7,sp,252
20416d38:	5afa                	lw	s5,188(sp)
20416d3a:	040ad363          	bgez	s5,20416d80 <_vfprintf_r+0x1182>
20416d3e:	41500ab3          	neg	s5,s5
20416d42:	8746                	mv	a4,a7
20416d44:	4bc1                	li	s7,16
20416d46:	4c1d                	li	s8,7
20416d48:	47ee                	lw	a5,216(sp)
20416d4a:	46fe                	lw	a3,220(sp)
20416d4c:	08a1                	addi	a7,a7,8
20416d4e:	0785                	addi	a5,a5,1
20416d50:	055bc063          	blt	s7,s5,20416d90 <_vfprintf_r+0x1192>
20416d54:	20422637          	lui	a2,0x20422
20416d58:	01572223          	sw	s5,4(a4)
20416d5c:	04460613          	addi	a2,a2,68 # 20422044 <zeroes.4384>
20416d60:	9ab6                	add	s5,s5,a3
20416d62:	c310                	sw	a2,0(a4)
20416d64:	cfd6                	sw	s5,220(sp)
20416d66:	cdbe                	sw	a5,216(sp)
20416d68:	471d                	li	a4,7
20416d6a:	00f75b63          	ble	a5,a4,20416d80 <_vfprintf_r+0x1182>
20416d6e:	09d0                	addi	a2,sp,212
20416d70:	85ca                	mv	a1,s2
20416d72:	854e                	mv	a0,s3
20416d74:	c72fe0ef          	jal	ra,204151e6 <__sprint_r>
20416d78:	4a051763          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416d7c:	0fc10893          	addi	a7,sp,252
20416d80:	47fe                	lw	a5,220(sp)
20416d82:	0098a023          	sw	s1,0(a7)
20416d86:	0148a223          	sw	s4,4(a7)
20416d8a:	97d2                	add	a5,a5,s4
20416d8c:	cfbe                	sw	a5,220(sp)
20416d8e:	b695                	j	204168f2 <_vfprintf_r+0xcf4>
20416d90:	204225b7          	lui	a1,0x20422
20416d94:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
20416d98:	06c1                	addi	a3,a3,16
20416d9a:	c30c                	sw	a1,0(a4)
20416d9c:	01772223          	sw	s7,4(a4)
20416da0:	cfb6                	sw	a3,220(sp)
20416da2:	cdbe                	sw	a5,216(sp)
20416da4:	00fc5b63          	ble	a5,s8,20416dba <_vfprintf_r+0x11bc>
20416da8:	09d0                	addi	a2,sp,212
20416daa:	85ca                	mv	a1,s2
20416dac:	854e                	mv	a0,s3
20416dae:	c38fe0ef          	jal	ra,204151e6 <__sprint_r>
20416db2:	46051a63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416db6:	0fc10893          	addi	a7,sp,252
20416dba:	1ac1                	addi	s5,s5,-16
20416dbc:	8746                	mv	a4,a7
20416dbe:	b769                	j	20416d48 <_vfprintf_r+0x114a>
20416dc0:	8ae6                	mv	s5,s9
20416dc2:	019a5363          	ble	s9,s4,20416dc8 <_vfprintf_r+0x11ca>
20416dc6:	8ad2                	mv	s5,s4
20416dc8:	03505863          	blez	s5,20416df8 <_vfprintf_r+0x11fa>
20416dcc:	476e                	lw	a4,216(sp)
20416dce:	9dd6                	add	s11,s11,s5
20416dd0:	0098a023          	sw	s1,0(a7)
20416dd4:	0705                	addi	a4,a4,1
20416dd6:	0158a223          	sw	s5,4(a7)
20416dda:	cfee                	sw	s11,220(sp)
20416ddc:	cdba                	sw	a4,216(sp)
20416dde:	469d                	li	a3,7
20416de0:	08a1                	addi	a7,a7,8
20416de2:	00e6db63          	ble	a4,a3,20416df8 <_vfprintf_r+0x11fa>
20416de6:	09d0                	addi	a2,sp,212
20416de8:	85ca                	mv	a1,s2
20416dea:	854e                	mv	a0,s3
20416dec:	bfafe0ef          	jal	ra,204151e6 <__sprint_r>
20416df0:	42051b63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416df4:	0fc10893          	addi	a7,sp,252
20416df8:	000ad363          	bgez	s5,20416dfe <_vfprintf_r+0x1200>
20416dfc:	4a81                	li	s5,0
20416dfe:	415c8ab3          	sub	s5,s9,s5
20416e02:	05505363          	blez	s5,20416e48 <_vfprintf_r+0x124a>
20416e06:	4d41                	li	s10,16
20416e08:	4d9d                	li	s11,7
20416e0a:	476e                	lw	a4,216(sp)
20416e0c:	46fe                	lw	a3,220(sp)
20416e0e:	00888613          	addi	a2,a7,8
20416e12:	0705                	addi	a4,a4,1
20416e14:	135d4763          	blt	s10,s5,20416f42 <_vfprintf_r+0x1344>
20416e18:	204225b7          	lui	a1,0x20422
20416e1c:	0158a223          	sw	s5,4(a7)
20416e20:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
20416e24:	9ab6                	add	s5,s5,a3
20416e26:	00b8a023          	sw	a1,0(a7)
20416e2a:	cfd6                	sw	s5,220(sp)
20416e2c:	cdba                	sw	a4,216(sp)
20416e2e:	469d                	li	a3,7
20416e30:	88b2                	mv	a7,a2
20416e32:	00e6db63          	ble	a4,a3,20416e48 <_vfprintf_r+0x124a>
20416e36:	09d0                	addi	a2,sp,212
20416e38:	85ca                	mv	a1,s2
20416e3a:	854e                	mv	a0,s3
20416e3c:	baafe0ef          	jal	ra,204151e6 <__sprint_r>
20416e40:	3e051363          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416e44:	0fc10893          	addi	a7,sp,252
20416e48:	40047793          	andi	a5,s0,1024
20416e4c:	01948ab3          	add	s5,s1,s9
20416e50:	cf89                	beqz	a5,20416e6a <_vfprintf_r+0x126c>
20416e52:	4d1d                	li	s10,7
20416e54:	01448db3          	add	s11,s1,s4
20416e58:	100b9d63          	bnez	s7,20416f72 <_vfprintf_r+0x1374>
20416e5c:	100c1d63          	bnez	s8,20416f76 <_vfprintf_r+0x1378>
20416e60:	014487b3          	add	a5,s1,s4
20416e64:	0157f363          	bleu	s5,a5,20416e6a <_vfprintf_r+0x126c>
20416e68:	8abe                	mv	s5,a5
20416e6a:	57fa                	lw	a5,188(sp)
20416e6c:	0147c563          	blt	a5,s4,20416e76 <_vfprintf_r+0x1278>
20416e70:	00147793          	andi	a5,s0,1
20416e74:	cb95                	beqz	a5,20416ea8 <_vfprintf_r+0x12aa>
20416e76:	5762                	lw	a4,56(sp)
20416e78:	47fe                	lw	a5,220(sp)
20416e7a:	46a6                	lw	a3,72(sp)
20416e7c:	00e8a223          	sw	a4,4(a7)
20416e80:	97ba                	add	a5,a5,a4
20416e82:	cfbe                	sw	a5,220(sp)
20416e84:	47ee                	lw	a5,216(sp)
20416e86:	00d8a023          	sw	a3,0(a7)
20416e8a:	471d                	li	a4,7
20416e8c:	0785                	addi	a5,a5,1
20416e8e:	cdbe                	sw	a5,216(sp)
20416e90:	08a1                	addi	a7,a7,8
20416e92:	00f75b63          	ble	a5,a4,20416ea8 <_vfprintf_r+0x12aa>
20416e96:	09d0                	addi	a2,sp,212
20416e98:	85ca                	mv	a1,s2
20416e9a:	854e                	mv	a0,s3
20416e9c:	b4afe0ef          	jal	ra,204151e6 <__sprint_r>
20416ea0:	38051363          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416ea4:	0fc10893          	addi	a7,sp,252
20416ea8:	94d2                	add	s1,s1,s4
20416eaa:	415487b3          	sub	a5,s1,s5
20416eae:	54fa                	lw	s1,188(sp)
20416eb0:	409a04b3          	sub	s1,s4,s1
20416eb4:	0097d363          	ble	s1,a5,20416eba <_vfprintf_r+0x12bc>
20416eb8:	84be                	mv	s1,a5
20416eba:	02905963          	blez	s1,20416eec <_vfprintf_r+0x12ee>
20416ebe:	47fe                	lw	a5,220(sp)
20416ec0:	0158a023          	sw	s5,0(a7)
20416ec4:	0098a223          	sw	s1,4(a7)
20416ec8:	97a6                	add	a5,a5,s1
20416eca:	cfbe                	sw	a5,220(sp)
20416ecc:	47ee                	lw	a5,216(sp)
20416ece:	471d                	li	a4,7
20416ed0:	08a1                	addi	a7,a7,8
20416ed2:	0785                	addi	a5,a5,1
20416ed4:	cdbe                	sw	a5,216(sp)
20416ed6:	00f75b63          	ble	a5,a4,20416eec <_vfprintf_r+0x12ee>
20416eda:	09d0                	addi	a2,sp,212
20416edc:	85ca                	mv	a1,s2
20416ede:	854e                	mv	a0,s3
20416ee0:	b06fe0ef          	jal	ra,204151e6 <__sprint_r>
20416ee4:	34051163          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416ee8:	0fc10893          	addi	a7,sp,252
20416eec:	87a6                	mv	a5,s1
20416eee:	0004d363          	bgez	s1,20416ef4 <_vfprintf_r+0x12f6>
20416ef2:	4781                	li	a5,0
20416ef4:	54fa                	lw	s1,188(sp)
20416ef6:	409a04b3          	sub	s1,s4,s1
20416efa:	8c9d                	sub	s1,s1,a5
20416efc:	d4905de3          	blez	s1,20416c56 <_vfprintf_r+0x1058>
20416f00:	4ac1                	li	s5,16
20416f02:	4b9d                	li	s7,7
20416f04:	47ee                	lw	a5,216(sp)
20416f06:	477e                	lw	a4,220(sp)
20416f08:	00888693          	addi	a3,a7,8
20416f0c:	0785                	addi	a5,a5,1
20416f0e:	d29ad5e3          	ble	s1,s5,20416c38 <_vfprintf_r+0x103a>
20416f12:	204225b7          	lui	a1,0x20422
20416f16:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
20416f1a:	0741                	addi	a4,a4,16
20416f1c:	00b8a023          	sw	a1,0(a7)
20416f20:	0158a223          	sw	s5,4(a7)
20416f24:	cfba                	sw	a4,220(sp)
20416f26:	cdbe                	sw	a5,216(sp)
20416f28:	00fbda63          	ble	a5,s7,20416f3c <_vfprintf_r+0x133e>
20416f2c:	09d0                	addi	a2,sp,212
20416f2e:	85ca                	mv	a1,s2
20416f30:	854e                	mv	a0,s3
20416f32:	ab4fe0ef          	jal	ra,204151e6 <__sprint_r>
20416f36:	2e051863          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416f3a:	19f4                	addi	a3,sp,252
20416f3c:	14c1                	addi	s1,s1,-16
20416f3e:	88b6                	mv	a7,a3
20416f40:	b7d1                	j	20416f04 <_vfprintf_r+0x1306>
20416f42:	204227b7          	lui	a5,0x20422
20416f46:	04478793          	addi	a5,a5,68 # 20422044 <zeroes.4384>
20416f4a:	06c1                	addi	a3,a3,16
20416f4c:	00f8a023          	sw	a5,0(a7)
20416f50:	01a8a223          	sw	s10,4(a7)
20416f54:	cfb6                	sw	a3,220(sp)
20416f56:	cdba                	sw	a4,216(sp)
20416f58:	00edda63          	ble	a4,s11,20416f6c <_vfprintf_r+0x136e>
20416f5c:	09d0                	addi	a2,sp,212
20416f5e:	85ca                	mv	a1,s2
20416f60:	854e                	mv	a0,s3
20416f62:	a84fe0ef          	jal	ra,204151e6 <__sprint_r>
20416f66:	2c051063          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416f6a:	19f0                	addi	a2,sp,252
20416f6c:	1ac1                	addi	s5,s5,-16
20416f6e:	88b2                	mv	a7,a2
20416f70:	bd69                	j	20416e0a <_vfprintf_r+0x120c>
20416f72:	080c0c63          	beqz	s8,2041700a <_vfprintf_r+0x140c>
20416f76:	1c7d                	addi	s8,s8,-1
20416f78:	4716                	lw	a4,68(sp)
20416f7a:	47fe                	lw	a5,220(sp)
20416f7c:	46c6                	lw	a3,80(sp)
20416f7e:	00e8a223          	sw	a4,4(a7)
20416f82:	97ba                	add	a5,a5,a4
20416f84:	cfbe                	sw	a5,220(sp)
20416f86:	47ee                	lw	a5,216(sp)
20416f88:	00d8a023          	sw	a3,0(a7)
20416f8c:	08a1                	addi	a7,a7,8
20416f8e:	0785                	addi	a5,a5,1
20416f90:	cdbe                	sw	a5,216(sp)
20416f92:	00fd5b63          	ble	a5,s10,20416fa8 <_vfprintf_r+0x13aa>
20416f96:	09d0                	addi	a2,sp,212
20416f98:	85ca                	mv	a1,s2
20416f9a:	854e                	mv	a0,s3
20416f9c:	a4afe0ef          	jal	ra,204151e6 <__sprint_r>
20416fa0:	28051363          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416fa4:	0fc10893          	addi	a7,sp,252
20416fa8:	57a2                	lw	a5,40(sp)
20416faa:	415d8733          	sub	a4,s11,s5
20416fae:	0007cb03          	lbu	s6,0(a5)
20416fb2:	01675363          	ble	s6,a4,20416fb8 <_vfprintf_r+0x13ba>
20416fb6:	8b3a                	mv	s6,a4
20416fb8:	03605863          	blez	s6,20416fe8 <_vfprintf_r+0x13ea>
20416fbc:	477e                	lw	a4,220(sp)
20416fbe:	0158a023          	sw	s5,0(a7)
20416fc2:	0168a223          	sw	s6,4(a7)
20416fc6:	975a                	add	a4,a4,s6
20416fc8:	cfba                	sw	a4,220(sp)
20416fca:	476e                	lw	a4,216(sp)
20416fcc:	08a1                	addi	a7,a7,8
20416fce:	0705                	addi	a4,a4,1
20416fd0:	cdba                	sw	a4,216(sp)
20416fd2:	00ed5b63          	ble	a4,s10,20416fe8 <_vfprintf_r+0x13ea>
20416fd6:	09d0                	addi	a2,sp,212
20416fd8:	85ca                	mv	a1,s2
20416fda:	854e                	mv	a0,s3
20416fdc:	a0afe0ef          	jal	ra,204151e6 <__sprint_r>
20416fe0:	24051363          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20416fe4:	0fc10893          	addi	a7,sp,252
20416fe8:	875a                	mv	a4,s6
20416fea:	000b5363          	bgez	s6,20416ff0 <_vfprintf_r+0x13f2>
20416fee:	4701                	li	a4,0
20416ff0:	55a2                	lw	a1,40(sp)
20416ff2:	4841                	li	a6,16
20416ff4:	0005c783          	lbu	a5,0(a1)
20416ff8:	40e78b33          	sub	s6,a5,a4
20416ffc:	05604563          	bgtz	s6,20417046 <_vfprintf_r+0x1448>
20417000:	5622                	lw	a2,40(sp)
20417002:	00064783          	lbu	a5,0(a2)
20417006:	9abe                	add	s5,s5,a5
20417008:	bd81                	j	20416e58 <_vfprintf_r+0x125a>
2041700a:	5622                	lw	a2,40(sp)
2041700c:	1bfd                	addi	s7,s7,-1
2041700e:	167d                	addi	a2,a2,-1
20417010:	d432                	sw	a2,40(sp)
20417012:	b79d                	j	20416f78 <_vfprintf_r+0x137a>
20417014:	204227b7          	lui	a5,0x20422
20417018:	04478793          	addi	a5,a5,68 # 20422044 <zeroes.4384>
2041701c:	06c1                	addi	a3,a3,16
2041701e:	00f8a023          	sw	a5,0(a7)
20417022:	0108a223          	sw	a6,4(a7)
20417026:	cfb6                	sw	a3,220(sp)
20417028:	cdba                	sw	a4,216(sp)
2041702a:	00ed5c63          	ble	a4,s10,20417042 <_vfprintf_r+0x1444>
2041702e:	09d0                	addi	a2,sp,212
20417030:	85ca                	mv	a1,s2
20417032:	854e                	mv	a0,s3
20417034:	ca42                	sw	a6,20(sp)
20417036:	9b0fe0ef          	jal	ra,204151e6 <__sprint_r>
2041703a:	4852                	lw	a6,20(sp)
2041703c:	1e051563          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20417040:	19f0                	addi	a2,sp,252
20417042:	1b41                	addi	s6,s6,-16
20417044:	88b2                	mv	a7,a2
20417046:	476e                	lw	a4,216(sp)
20417048:	46fe                	lw	a3,220(sp)
2041704a:	00888613          	addi	a2,a7,8
2041704e:	0705                	addi	a4,a4,1
20417050:	fd6842e3          	blt	a6,s6,20417014 <_vfprintf_r+0x1416>
20417054:	204225b7          	lui	a1,0x20422
20417058:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
2041705c:	00db07b3          	add	a5,s6,a3
20417060:	00b8a023          	sw	a1,0(a7)
20417064:	0168a223          	sw	s6,4(a7)
20417068:	cfbe                	sw	a5,220(sp)
2041706a:	cdba                	sw	a4,216(sp)
2041706c:	88b2                	mv	a7,a2
2041706e:	f8ed59e3          	ble	a4,s10,20417000 <_vfprintf_r+0x1402>
20417072:	09d0                	addi	a2,sp,212
20417074:	85ca                	mv	a1,s2
20417076:	854e                	mv	a0,s3
20417078:	96efe0ef          	jal	ra,204151e6 <__sprint_r>
2041707c:	1a051563          	bnez	a0,20417226 <_vfprintf_r+0x1628>
20417080:	0fc10893          	addi	a7,sp,252
20417084:	bfb5                	j	20417000 <_vfprintf_r+0x1402>
20417086:	47ee                	lw	a5,216(sp)
20417088:	4705                	li	a4,1
2041708a:	0098a023          	sw	s1,0(a7)
2041708e:	0d85                	addi	s11,s11,1
20417090:	0785                	addi	a5,a5,1
20417092:	00888b93          	addi	s7,a7,8
20417096:	01474663          	blt	a4,s4,204170a2 <_vfprintf_r+0x14a4>
2041709a:	00147693          	andi	a3,s0,1
2041709e:	12068a63          	beqz	a3,204171d2 <_vfprintf_r+0x15d4>
204170a2:	4705                	li	a4,1
204170a4:	00e8a223          	sw	a4,4(a7)
204170a8:	cfee                	sw	s11,220(sp)
204170aa:	cdbe                	sw	a5,216(sp)
204170ac:	471d                	li	a4,7
204170ae:	00f75b63          	ble	a5,a4,204170c4 <_vfprintf_r+0x14c6>
204170b2:	09d0                	addi	a2,sp,212
204170b4:	85ca                	mv	a1,s2
204170b6:	854e                	mv	a0,s3
204170b8:	92efe0ef          	jal	ra,204151e6 <__sprint_r>
204170bc:	16051563          	bnez	a0,20417226 <_vfprintf_r+0x1628>
204170c0:	0fc10b93          	addi	s7,sp,252
204170c4:	5762                	lw	a4,56(sp)
204170c6:	47fe                	lw	a5,220(sp)
204170c8:	46a6                	lw	a3,72(sp)
204170ca:	00eba223          	sw	a4,4(s7)
204170ce:	97ba                	add	a5,a5,a4
204170d0:	cfbe                	sw	a5,220(sp)
204170d2:	47ee                	lw	a5,216(sp)
204170d4:	00dba023          	sw	a3,0(s7)
204170d8:	471d                	li	a4,7
204170da:	0785                	addi	a5,a5,1
204170dc:	cdbe                	sw	a5,216(sp)
204170de:	0ba1                	addi	s7,s7,8
204170e0:	00f75b63          	ble	a5,a4,204170f6 <_vfprintf_r+0x14f8>
204170e4:	09d0                	addi	a2,sp,212
204170e6:	85ca                	mv	a1,s2
204170e8:	854e                	mv	a0,s3
204170ea:	8fcfe0ef          	jal	ra,204151e6 <__sprint_r>
204170ee:	12051c63          	bnez	a0,20417226 <_vfprintf_r+0x1628>
204170f2:	0fc10b93          	addi	s7,sp,252
204170f6:	578e                	lw	a5,224(sp)
204170f8:	090c                	addi	a1,sp,144
204170fa:	1108                	addi	a0,sp,160
204170fc:	d13e                	sw	a5,160(sp)
204170fe:	579e                	lw	a5,228(sp)
20417100:	fffa0a93          	addi	s5,s4,-1
20417104:	c902                	sw	zero,144(sp)
20417106:	d33e                	sw	a5,164(sp)
20417108:	57ae                	lw	a5,232(sp)
2041710a:	cb02                	sw	zero,148(sp)
2041710c:	cd02                	sw	zero,152(sp)
2041710e:	d53e                	sw	a5,168(sp)
20417110:	57be                	lw	a5,236(sp)
20417112:	cf02                	sw	zero,156(sp)
20417114:	d73e                	sw	a5,172(sp)
20417116:	03b060ef          	jal	ra,2041d950 <__eqtf2>
2041711a:	cd21                	beqz	a0,20417172 <_vfprintf_r+0x1574>
2041711c:	47fe                	lw	a5,220(sp)
2041711e:	476e                	lw	a4,216(sp)
20417120:	0485                	addi	s1,s1,1
20417122:	17fd                	addi	a5,a5,-1
20417124:	97d2                	add	a5,a5,s4
20417126:	0705                	addi	a4,a4,1
20417128:	009ba023          	sw	s1,0(s7)
2041712c:	015ba223          	sw	s5,4(s7)
20417130:	cfbe                	sw	a5,220(sp)
20417132:	cdba                	sw	a4,216(sp)
20417134:	479d                	li	a5,7
20417136:	0ba1                	addi	s7,s7,8
20417138:	00e7da63          	ble	a4,a5,2041714c <_vfprintf_r+0x154e>
2041713c:	09d0                	addi	a2,sp,212
2041713e:	85ca                	mv	a1,s2
20417140:	854e                	mv	a0,s3
20417142:	8a4fe0ef          	jal	ra,204151e6 <__sprint_r>
20417146:	e165                	bnez	a0,20417226 <_vfprintf_r+0x1628>
20417148:	0fc10b93          	addi	s7,sp,252
2041714c:	01dc                	addi	a5,sp,196
2041714e:	46d6                	lw	a3,84(sp)
20417150:	00fba023          	sw	a5,0(s7)
20417154:	47fe                	lw	a5,220(sp)
20417156:	00dba223          	sw	a3,4(s7)
2041715a:	471d                	li	a4,7
2041715c:	97b6                	add	a5,a5,a3
2041715e:	cfbe                	sw	a5,220(sp)
20417160:	47ee                	lw	a5,216(sp)
20417162:	008b8893          	addi	a7,s7,8
20417166:	0785                	addi	a5,a5,1
20417168:	cdbe                	sw	a5,216(sp)
2041716a:	aef756e3          	ble	a5,a4,20416c56 <_vfprintf_r+0x1058>
2041716e:	f92ff06f          	j	20416900 <_vfprintf_r+0xd02>
20417172:	fd505de3          	blez	s5,2041714c <_vfprintf_r+0x154e>
20417176:	44c1                	li	s1,16
20417178:	4c1d                	li	s8,7
2041717a:	476e                	lw	a4,216(sp)
2041717c:	47fe                	lw	a5,220(sp)
2041717e:	008b8693          	addi	a3,s7,8
20417182:	0705                	addi	a4,a4,1
20417184:	0354c063          	blt	s1,s5,204171a4 <_vfprintf_r+0x15a6>
20417188:	20422637          	lui	a2,0x20422
2041718c:	97d6                	add	a5,a5,s5
2041718e:	04460613          	addi	a2,a2,68 # 20422044 <zeroes.4384>
20417192:	00cba023          	sw	a2,0(s7)
20417196:	015ba223          	sw	s5,4(s7)
2041719a:	cfbe                	sw	a5,220(sp)
2041719c:	cdba                	sw	a4,216(sp)
2041719e:	479d                	li	a5,7
204171a0:	8bb6                	mv	s7,a3
204171a2:	bf59                	j	20417138 <_vfprintf_r+0x153a>
204171a4:	204225b7          	lui	a1,0x20422
204171a8:	04458593          	addi	a1,a1,68 # 20422044 <zeroes.4384>
204171ac:	07c1                	addi	a5,a5,16
204171ae:	00bba023          	sw	a1,0(s7)
204171b2:	009ba223          	sw	s1,4(s7)
204171b6:	cfbe                	sw	a5,220(sp)
204171b8:	cdba                	sw	a4,216(sp)
204171ba:	00ec5963          	ble	a4,s8,204171cc <_vfprintf_r+0x15ce>
204171be:	09d0                	addi	a2,sp,212
204171c0:	85ca                	mv	a1,s2
204171c2:	854e                	mv	a0,s3
204171c4:	822fe0ef          	jal	ra,204151e6 <__sprint_r>
204171c8:	ed39                	bnez	a0,20417226 <_vfprintf_r+0x1628>
204171ca:	19f4                	addi	a3,sp,252
204171cc:	1ac1                	addi	s5,s5,-16
204171ce:	8bb6                	mv	s7,a3
204171d0:	b76d                	j	2041717a <_vfprintf_r+0x157c>
204171d2:	00e8a223          	sw	a4,4(a7)
204171d6:	cfee                	sw	s11,220(sp)
204171d8:	cdbe                	sw	a5,216(sp)
204171da:	471d                	li	a4,7
204171dc:	f6f758e3          	ble	a5,a4,2041714c <_vfprintf_r+0x154e>
204171e0:	bfb1                	j	2041713c <_vfprintf_r+0x153e>
204171e2:	4586                	lw	a1,64(sp)
204171e4:	56d2                	lw	a3,52(sp)
204171e6:	40d58433          	sub	s0,a1,a3
204171ea:	a68059e3          	blez	s0,20416c5c <_vfprintf_r+0x105e>
204171ee:	204224b7          	lui	s1,0x20422
204171f2:	4ac1                	li	s5,16
204171f4:	03448493          	addi	s1,s1,52 # 20422034 <blanks.4383>
204171f8:	4b9d                	li	s7,7
204171fa:	47ee                	lw	a5,216(sp)
204171fc:	0098a023          	sw	s1,0(a7)
20417200:	477e                	lw	a4,220(sp)
20417202:	0785                	addi	a5,a5,1
20417204:	028acb63          	blt	s5,s0,2041723a <_vfprintf_r+0x163c>
20417208:	0088a223          	sw	s0,4(a7)
2041720c:	943a                	add	s0,s0,a4
2041720e:	cfa2                	sw	s0,220(sp)
20417210:	cdbe                	sw	a5,216(sp)
20417212:	471d                	li	a4,7
20417214:	a4f754e3          	ble	a5,a4,20416c5c <_vfprintf_r+0x105e>
20417218:	09d0                	addi	a2,sp,212
2041721a:	85ca                	mv	a1,s2
2041721c:	854e                	mv	a0,s3
2041721e:	fc9fd0ef          	jal	ra,204151e6 <__sprint_r>
20417222:	a2050de3          	beqz	a0,20416c5c <_vfprintf_r+0x105e>
20417226:	5792                	lw	a5,36(sp)
20417228:	e399                	bnez	a5,2041722e <_vfprintf_r+0x1630>
2041722a:	ec1fe06f          	j	204160ea <_vfprintf_r+0x4ec>
2041722e:	85be                	mv	a1,a5
20417230:	854e                	mv	a0,s3
20417232:	0b3000ef          	jal	ra,20417ae4 <_free_r>
20417236:	eb5fe06f          	j	204160ea <_vfprintf_r+0x4ec>
2041723a:	0741                	addi	a4,a4,16
2041723c:	0158a223          	sw	s5,4(a7)
20417240:	cfba                	sw	a4,220(sp)
20417242:	cdbe                	sw	a5,216(sp)
20417244:	08a1                	addi	a7,a7,8
20417246:	00fbda63          	ble	a5,s7,2041725a <_vfprintf_r+0x165c>
2041724a:	09d0                	addi	a2,sp,212
2041724c:	85ca                	mv	a1,s2
2041724e:	854e                	mv	a0,s3
20417250:	f97fd0ef          	jal	ra,204151e6 <__sprint_r>
20417254:	f969                	bnez	a0,20417226 <_vfprintf_r+0x1628>
20417256:	0fc10893          	addi	a7,sp,252
2041725a:	1441                	addi	s0,s0,-16
2041725c:	bf79                	j	204171fa <_vfprintf_r+0x15fc>
2041725e:	5592                	lw	a1,36(sp)
20417260:	854e                	mv	a0,s3
20417262:	083000ef          	jal	ra,20417ae4 <_free_r>
20417266:	b405                	j	20416c86 <_vfprintf_r+0x1088>
20417268:	47fe                	lw	a5,220(sp)
2041726a:	e399                	bnez	a5,20417270 <_vfprintf_r+0x1672>
2041726c:	e7ffe06f          	j	204160ea <_vfprintf_r+0x4ec>
20417270:	09d0                	addi	a2,sp,212
20417272:	85ca                	mv	a1,s2
20417274:	854e                	mv	a0,s3
20417276:	f71fd0ef          	jal	ra,204151e6 <__sprint_r>
2041727a:	e71fe06f          	j	204160ea <_vfprintf_r+0x4ec>

2041727e <vfprintf>:
2041727e:	86b2                	mv	a3,a2
20417280:	862e                	mv	a2,a1
20417282:	85aa                	mv	a1,a0
20417284:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20417288:	977fe06f          	j	20415bfe <_vfprintf_r>

2041728c <__sbprintf>:
2041728c:	00c5d783          	lhu	a5,12(a1)
20417290:	b8010113          	addi	sp,sp,-1152
20417294:	46812c23          	sw	s0,1144(sp)
20417298:	9bf5                	andi	a5,a5,-3
2041729a:	00f11a23          	sh	a5,20(sp)
2041729e:	51fc                	lw	a5,100(a1)
204172a0:	842e                	mv	s0,a1
204172a2:	46912a23          	sw	s1,1140(sp)
204172a6:	d6be                	sw	a5,108(sp)
204172a8:	00e5d783          	lhu	a5,14(a1)
204172ac:	47212823          	sw	s2,1136(sp)
204172b0:	46112e23          	sw	ra,1148(sp)
204172b4:	00f11b23          	sh	a5,22(sp)
204172b8:	4ddc                	lw	a5,28(a1)
204172ba:	892a                	mv	s2,a0
204172bc:	d002                	sw	zero,32(sp)
204172be:	d23e                	sw	a5,36(sp)
204172c0:	51dc                	lw	a5,36(a1)
204172c2:	002c                	addi	a1,sp,8
204172c4:	d63e                	sw	a5,44(sp)
204172c6:	189c                	addi	a5,sp,112
204172c8:	c43e                	sw	a5,8(sp)
204172ca:	cc3e                	sw	a5,24(sp)
204172cc:	40000793          	li	a5,1024
204172d0:	c83e                	sw	a5,16(sp)
204172d2:	ce3e                	sw	a5,28(sp)
204172d4:	92bfe0ef          	jal	ra,20415bfe <_vfprintf_r>
204172d8:	84aa                	mv	s1,a0
204172da:	00054763          	bltz	a0,204172e8 <__sbprintf+0x5c>
204172de:	002c                	addi	a1,sp,8
204172e0:	854a                	mv	a0,s2
204172e2:	210d                	jal	20417704 <_fflush_r>
204172e4:	c111                	beqz	a0,204172e8 <__sbprintf+0x5c>
204172e6:	54fd                	li	s1,-1
204172e8:	01415783          	lhu	a5,20(sp)
204172ec:	0407f793          	andi	a5,a5,64
204172f0:	c799                	beqz	a5,204172fe <__sbprintf+0x72>
204172f2:	00c45783          	lhu	a5,12(s0)
204172f6:	0407e793          	ori	a5,a5,64
204172fa:	00f41623          	sh	a5,12(s0)
204172fe:	47c12083          	lw	ra,1148(sp)
20417302:	47812403          	lw	s0,1144(sp)
20417306:	8526                	mv	a0,s1
20417308:	47012903          	lw	s2,1136(sp)
2041730c:	47412483          	lw	s1,1140(sp)
20417310:	48010113          	addi	sp,sp,1152
20417314:	8082                	ret

20417316 <_vsnprintf_r>:
20417316:	7119                	addi	sp,sp,-128
20417318:	dca2                	sw	s0,120(sp)
2041731a:	de86                	sw	ra,124(sp)
2041731c:	daa6                	sw	s1,116(sp)
2041731e:	8432                	mv	s0,a2
20417320:	00065b63          	bgez	a2,20417336 <_vsnprintf_r+0x20>
20417324:	08b00793          	li	a5,139
20417328:	c11c                	sw	a5,0(a0)
2041732a:	557d                	li	a0,-1
2041732c:	50f6                	lw	ra,124(sp)
2041732e:	5466                	lw	s0,120(sp)
20417330:	54d6                	lw	s1,116(sp)
20417332:	6109                	addi	sp,sp,128
20417334:	8082                	ret
20417336:	8636                	mv	a2,a3
20417338:	20800693          	li	a3,520
2041733c:	c42e                	sw	a1,8(sp)
2041733e:	cc2e                	sw	a1,24(sp)
20417340:	00d11a23          	sh	a3,20(sp)
20417344:	4581                	li	a1,0
20417346:	c019                	beqz	s0,2041734c <_vsnprintf_r+0x36>
20417348:	fff40593          	addi	a1,s0,-1
2041734c:	57fd                	li	a5,-1
2041734e:	c82e                	sw	a1,16(sp)
20417350:	ce2e                	sw	a1,28(sp)
20417352:	86ba                	mv	a3,a4
20417354:	002c                	addi	a1,sp,8
20417356:	00f11b23          	sh	a5,22(sp)
2041735a:	84aa                	mv	s1,a0
2041735c:	847fc0ef          	jal	ra,20413ba2 <_svfprintf_r>
20417360:	57fd                	li	a5,-1
20417362:	00f55563          	ble	a5,a0,2041736c <_vsnprintf_r+0x56>
20417366:	08b00793          	li	a5,139
2041736a:	c09c                	sw	a5,0(s1)
2041736c:	d061                	beqz	s0,2041732c <_vsnprintf_r+0x16>
2041736e:	47a2                	lw	a5,8(sp)
20417370:	00078023          	sb	zero,0(a5)
20417374:	bf65                	j	2041732c <_vsnprintf_r+0x16>

20417376 <vsnprintf>:
20417376:	8736                	mv	a4,a3
20417378:	86b2                	mv	a3,a2
2041737a:	862e                	mv	a2,a1
2041737c:	85aa                	mv	a1,a0
2041737e:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
20417382:	bf51                	j	20417316 <_vsnprintf_r>

20417384 <_wctomb_r>:
20417384:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
20417388:	5bdc                	lw	a5,52(a5)
2041738a:	e789                	bnez	a5,20417394 <_wctomb_r+0x10>
2041738c:	800007b7          	lui	a5,0x80000
20417390:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
20417394:	0e07a303          	lw	t1,224(a5)
20417398:	8302                	jr	t1

2041739a <__ascii_wctomb>:
2041739a:	cd91                	beqz	a1,204173b6 <__ascii_wctomb+0x1c>
2041739c:	0ff00793          	li	a5,255
204173a0:	00c7f763          	bleu	a2,a5,204173ae <__ascii_wctomb+0x14>
204173a4:	08a00793          	li	a5,138
204173a8:	c11c                	sw	a5,0(a0)
204173aa:	557d                	li	a0,-1
204173ac:	8082                	ret
204173ae:	00c58023          	sb	a2,0(a1)
204173b2:	4505                	li	a0,1
204173b4:	8082                	ret
204173b6:	4501                	li	a0,0
204173b8:	8082                	ret

204173ba <__swsetup_r>:
204173ba:	1141                	addi	sp,sp,-16
204173bc:	c226                	sw	s1,4(sp)
204173be:	84aa                	mv	s1,a0
204173c0:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
204173c4:	c422                	sw	s0,8(sp)
204173c6:	c606                	sw	ra,12(sp)
204173c8:	842e                	mv	s0,a1
204173ca:	c501                	beqz	a0,204173d2 <__swsetup_r+0x18>
204173cc:	5d1c                	lw	a5,56(a0)
204173ce:	e391                	bnez	a5,204173d2 <__swsetup_r+0x18>
204173d0:	21a1                	jal	20417818 <__sinit>
204173d2:	00c41703          	lh	a4,12(s0)
204173d6:	01071793          	slli	a5,a4,0x10
204173da:	83c1                	srli	a5,a5,0x10
204173dc:	0087f693          	andi	a3,a5,8
204173e0:	eea1                	bnez	a3,20417438 <__swsetup_r+0x7e>
204173e2:	0107f693          	andi	a3,a5,16
204173e6:	ee89                	bnez	a3,20417400 <__swsetup_r+0x46>
204173e8:	47a5                	li	a5,9
204173ea:	c09c                	sw	a5,0(s1)
204173ec:	04076713          	ori	a4,a4,64
204173f0:	00e41623          	sh	a4,12(s0)
204173f4:	557d                	li	a0,-1
204173f6:	40b2                	lw	ra,12(sp)
204173f8:	4422                	lw	s0,8(sp)
204173fa:	4492                	lw	s1,4(sp)
204173fc:	0141                	addi	sp,sp,16
204173fe:	8082                	ret
20417400:	8b91                	andi	a5,a5,4
20417402:	c78d                	beqz	a5,2041742c <__swsetup_r+0x72>
20417404:	580c                	lw	a1,48(s0)
20417406:	c989                	beqz	a1,20417418 <__swsetup_r+0x5e>
20417408:	04040793          	addi	a5,s0,64
2041740c:	00f58463          	beq	a1,a5,20417414 <__swsetup_r+0x5a>
20417410:	8526                	mv	a0,s1
20417412:	2dc9                	jal	20417ae4 <_free_r>
20417414:	02042823          	sw	zero,48(s0)
20417418:	00c45783          	lhu	a5,12(s0)
2041741c:	00042223          	sw	zero,4(s0)
20417420:	fdb7f793          	andi	a5,a5,-37
20417424:	00f41623          	sh	a5,12(s0)
20417428:	481c                	lw	a5,16(s0)
2041742a:	c01c                	sw	a5,0(s0)
2041742c:	00c45783          	lhu	a5,12(s0)
20417430:	0087e793          	ori	a5,a5,8
20417434:	00f41623          	sh	a5,12(s0)
20417438:	481c                	lw	a5,16(s0)
2041743a:	ef89                	bnez	a5,20417454 <__swsetup_r+0x9a>
2041743c:	00c45783          	lhu	a5,12(s0)
20417440:	20000713          	li	a4,512
20417444:	2807f793          	andi	a5,a5,640
20417448:	00e78663          	beq	a5,a4,20417454 <__swsetup_r+0x9a>
2041744c:	85a2                	mv	a1,s0
2041744e:	8526                	mv	a0,s1
20417450:	30e020ef          	jal	ra,2041975e <__smakebuf_r>
20417454:	00c45783          	lhu	a5,12(s0)
20417458:	0017f713          	andi	a4,a5,1
2041745c:	c705                	beqz	a4,20417484 <__swsetup_r+0xca>
2041745e:	485c                	lw	a5,20(s0)
20417460:	00042423          	sw	zero,8(s0)
20417464:	40f007b3          	neg	a5,a5
20417468:	cc1c                	sw	a5,24(s0)
2041746a:	481c                	lw	a5,16(s0)
2041746c:	4501                	li	a0,0
2041746e:	f7c1                	bnez	a5,204173f6 <__swsetup_r+0x3c>
20417470:	00c41783          	lh	a5,12(s0)
20417474:	0807f713          	andi	a4,a5,128
20417478:	df3d                	beqz	a4,204173f6 <__swsetup_r+0x3c>
2041747a:	0407e793          	ori	a5,a5,64
2041747e:	00f41623          	sh	a5,12(s0)
20417482:	bf8d                	j	204173f4 <__swsetup_r+0x3a>
20417484:	8b89                	andi	a5,a5,2
20417486:	4701                	li	a4,0
20417488:	e391                	bnez	a5,2041748c <__swsetup_r+0xd2>
2041748a:	4858                	lw	a4,20(s0)
2041748c:	c418                	sw	a4,8(s0)
2041748e:	bff1                	j	2041746a <__swsetup_r+0xb0>

20417490 <abort>:
20417490:	1141                	addi	sp,sp,-16
20417492:	4519                	li	a0,6
20417494:	c606                	sw	ra,12(sp)
20417496:	724030ef          	jal	ra,2041abba <raise>
2041749a:	4505                	li	a0,1
2041749c:	bd0fb0ef          	jal	ra,2041286c <__wrap_exit>

204174a0 <__register_exitproc>:
204174a0:	8941a703          	lw	a4,-1900(gp) # 80000a34 <_global_impure_ptr>
204174a4:	832a                	mv	t1,a0
204174a6:	14872783          	lw	a5,328(a4)
204174aa:	e789                	bnez	a5,204174b4 <__register_exitproc+0x14>
204174ac:	14c70793          	addi	a5,a4,332
204174b0:	14f72423          	sw	a5,328(a4)
204174b4:	43d8                	lw	a4,4(a5)
204174b6:	487d                	li	a6,31
204174b8:	557d                	li	a0,-1
204174ba:	04e84263          	blt	a6,a4,204174fe <__register_exitproc+0x5e>
204174be:	00271893          	slli	a7,a4,0x2
204174c2:	02030963          	beqz	t1,204174f4 <__register_exitproc+0x54>
204174c6:	01178533          	add	a0,a5,a7
204174ca:	08c52423          	sw	a2,136(a0)
204174ce:	1887a803          	lw	a6,392(a5)
204174d2:	4605                	li	a2,1
204174d4:	00e61633          	sll	a2,a2,a4
204174d8:	00c86833          	or	a6,a6,a2
204174dc:	1907a423          	sw	a6,392(a5)
204174e0:	10d52423          	sw	a3,264(a0)
204174e4:	4689                	li	a3,2
204174e6:	00d31763          	bne	t1,a3,204174f4 <__register_exitproc+0x54>
204174ea:	18c7a683          	lw	a3,396(a5)
204174ee:	8e55                	or	a2,a2,a3
204174f0:	18c7a623          	sw	a2,396(a5)
204174f4:	0705                	addi	a4,a4,1
204174f6:	c3d8                	sw	a4,4(a5)
204174f8:	97c6                	add	a5,a5,a7
204174fa:	c78c                	sw	a1,8(a5)
204174fc:	4501                	li	a0,0
204174fe:	8082                	ret

20417500 <__call_exitprocs>:
20417500:	7179                	addi	sp,sp,-48
20417502:	ce4e                	sw	s3,28(sp)
20417504:	8941a983          	lw	s3,-1900(gp) # 80000a34 <_global_impure_ptr>
20417508:	cc52                	sw	s4,24(sp)
2041750a:	ca56                	sw	s5,20(sp)
2041750c:	c85a                	sw	s6,16(sp)
2041750e:	d606                	sw	ra,44(sp)
20417510:	d422                	sw	s0,40(sp)
20417512:	d226                	sw	s1,36(sp)
20417514:	d04a                	sw	s2,32(sp)
20417516:	c65e                	sw	s7,12(sp)
20417518:	8aaa                	mv	s5,a0
2041751a:	8a2e                	mv	s4,a1
2041751c:	4b05                	li	s6,1
2041751e:	1489a483          	lw	s1,328(s3)
20417522:	c881                	beqz	s1,20417532 <__call_exitprocs+0x32>
20417524:	40c0                	lw	s0,4(s1)
20417526:	fff40913          	addi	s2,s0,-1
2041752a:	040a                	slli	s0,s0,0x2
2041752c:	9426                	add	s0,s0,s1
2041752e:	00095d63          	bgez	s2,20417548 <__call_exitprocs+0x48>
20417532:	50b2                	lw	ra,44(sp)
20417534:	5422                	lw	s0,40(sp)
20417536:	5492                	lw	s1,36(sp)
20417538:	5902                	lw	s2,32(sp)
2041753a:	49f2                	lw	s3,28(sp)
2041753c:	4a62                	lw	s4,24(sp)
2041753e:	4ad2                	lw	s5,20(sp)
20417540:	4b42                	lw	s6,16(sp)
20417542:	4bb2                	lw	s7,12(sp)
20417544:	6145                	addi	sp,sp,48
20417546:	8082                	ret
20417548:	000a0963          	beqz	s4,2041755a <__call_exitprocs+0x5a>
2041754c:	10442783          	lw	a5,260(s0)
20417550:	01478563          	beq	a5,s4,2041755a <__call_exitprocs+0x5a>
20417554:	197d                	addi	s2,s2,-1
20417556:	1471                	addi	s0,s0,-4
20417558:	bfd9                	j	2041752e <__call_exitprocs+0x2e>
2041755a:	40d8                	lw	a4,4(s1)
2041755c:	405c                	lw	a5,4(s0)
2041755e:	177d                	addi	a4,a4,-1
20417560:	03271663          	bne	a4,s2,2041758c <__call_exitprocs+0x8c>
20417564:	0124a223          	sw	s2,4(s1)
20417568:	d7f5                	beqz	a5,20417554 <__call_exitprocs+0x54>
2041756a:	1884a683          	lw	a3,392(s1)
2041756e:	012b1733          	sll	a4,s6,s2
20417572:	0044ab83          	lw	s7,4(s1)
20417576:	8ef9                	and	a3,a3,a4
20417578:	ee89                	bnez	a3,20417592 <__call_exitprocs+0x92>
2041757a:	9782                	jalr	a5
2041757c:	40d8                	lw	a4,4(s1)
2041757e:	1489a783          	lw	a5,328(s3)
20417582:	f9771ee3          	bne	a4,s7,2041751e <__call_exitprocs+0x1e>
20417586:	fcf487e3          	beq	s1,a5,20417554 <__call_exitprocs+0x54>
2041758a:	bf51                	j	2041751e <__call_exitprocs+0x1e>
2041758c:	00042223          	sw	zero,4(s0)
20417590:	bfe1                	j	20417568 <__call_exitprocs+0x68>
20417592:	18c4a683          	lw	a3,396(s1)
20417596:	08442583          	lw	a1,132(s0)
2041759a:	8f75                	and	a4,a4,a3
2041759c:	e701                	bnez	a4,204175a4 <__call_exitprocs+0xa4>
2041759e:	8556                	mv	a0,s5
204175a0:	9782                	jalr	a5
204175a2:	bfe9                	j	2041757c <__call_exitprocs+0x7c>
204175a4:	852e                	mv	a0,a1
204175a6:	9782                	jalr	a5
204175a8:	bfd1                	j	2041757c <__call_exitprocs+0x7c>

204175aa <__sflush_r>:
204175aa:	00c59783          	lh	a5,12(a1)
204175ae:	1101                	addi	sp,sp,-32
204175b0:	cc22                	sw	s0,24(sp)
204175b2:	01079713          	slli	a4,a5,0x10
204175b6:	8341                	srli	a4,a4,0x10
204175b8:	ca26                	sw	s1,20(sp)
204175ba:	ce06                	sw	ra,28(sp)
204175bc:	c84a                	sw	s2,16(sp)
204175be:	c64e                	sw	s3,12(sp)
204175c0:	00877693          	andi	a3,a4,8
204175c4:	84aa                	mv	s1,a0
204175c6:	842e                	mv	s0,a1
204175c8:	eee5                	bnez	a3,204176c0 <__sflush_r+0x116>
204175ca:	6705                	lui	a4,0x1
204175cc:	80070713          	addi	a4,a4,-2048 # 800 <__stack_size-0x3800>
204175d0:	8fd9                	or	a5,a5,a4
204175d2:	41d8                	lw	a4,4(a1)
204175d4:	00f59623          	sh	a5,12(a1)
204175d8:	00e04d63          	bgtz	a4,204175f2 <__sflush_r+0x48>
204175dc:	5dd8                	lw	a4,60(a1)
204175de:	00e04a63          	bgtz	a4,204175f2 <__sflush_r+0x48>
204175e2:	4501                	li	a0,0
204175e4:	40f2                	lw	ra,28(sp)
204175e6:	4462                	lw	s0,24(sp)
204175e8:	44d2                	lw	s1,20(sp)
204175ea:	4942                	lw	s2,16(sp)
204175ec:	49b2                	lw	s3,12(sp)
204175ee:	6105                	addi	sp,sp,32
204175f0:	8082                	ret
204175f2:	5418                	lw	a4,40(s0)
204175f4:	d77d                	beqz	a4,204175e2 <__sflush_r+0x38>
204175f6:	0004a903          	lw	s2,0(s1)
204175fa:	01379693          	slli	a3,a5,0x13
204175fe:	0004a023          	sw	zero,0(s1)
20417602:	4c4c                	lw	a1,28(s0)
20417604:	0806d563          	bgez	a3,2041768e <__sflush_r+0xe4>
20417608:	4830                	lw	a2,80(s0)
2041760a:	00c45783          	lhu	a5,12(s0)
2041760e:	8b91                	andi	a5,a5,4
20417610:	c799                	beqz	a5,2041761e <__sflush_r+0x74>
20417612:	405c                	lw	a5,4(s0)
20417614:	8e1d                	sub	a2,a2,a5
20417616:	581c                	lw	a5,48(s0)
20417618:	c399                	beqz	a5,2041761e <__sflush_r+0x74>
2041761a:	5c5c                	lw	a5,60(s0)
2041761c:	8e1d                	sub	a2,a2,a5
2041761e:	541c                	lw	a5,40(s0)
20417620:	4c4c                	lw	a1,28(s0)
20417622:	4681                	li	a3,0
20417624:	8526                	mv	a0,s1
20417626:	9782                	jalr	a5
20417628:	57fd                	li	a5,-1
2041762a:	00c45683          	lhu	a3,12(s0)
2041762e:	00f51d63          	bne	a0,a5,20417648 <__sflush_r+0x9e>
20417632:	409c                	lw	a5,0(s1)
20417634:	4775                	li	a4,29
20417636:	06f76f63          	bltu	a4,a5,204176b4 <__sflush_r+0x10a>
2041763a:	20400737          	lui	a4,0x20400
2041763e:	0705                	addi	a4,a4,1
20417640:	00f75733          	srl	a4,a4,a5
20417644:	8b05                	andi	a4,a4,1
20417646:	c73d                	beqz	a4,204176b4 <__sflush_r+0x10a>
20417648:	77fd                	lui	a5,0xfffff
2041764a:	7ff78793          	addi	a5,a5,2047 # fffff7ff <pulp__FC+0xfffff800>
2041764e:	4818                	lw	a4,16(s0)
20417650:	8ff5                	and	a5,a5,a3
20417652:	07c2                	slli	a5,a5,0x10
20417654:	87c1                	srai	a5,a5,0x10
20417656:	c018                	sw	a4,0(s0)
20417658:	00f41623          	sh	a5,12(s0)
2041765c:	00042223          	sw	zero,4(s0)
20417660:	01379713          	slli	a4,a5,0x13
20417664:	00075863          	bgez	a4,20417674 <__sflush_r+0xca>
20417668:	57fd                	li	a5,-1
2041766a:	00f51463          	bne	a0,a5,20417672 <__sflush_r+0xc8>
2041766e:	409c                	lw	a5,0(s1)
20417670:	e391                	bnez	a5,20417674 <__sflush_r+0xca>
20417672:	c828                	sw	a0,80(s0)
20417674:	580c                	lw	a1,48(s0)
20417676:	0124a023          	sw	s2,0(s1)
2041767a:	d5a5                	beqz	a1,204175e2 <__sflush_r+0x38>
2041767c:	04040793          	addi	a5,s0,64
20417680:	00f58463          	beq	a1,a5,20417688 <__sflush_r+0xde>
20417684:	8526                	mv	a0,s1
20417686:	29b9                	jal	20417ae4 <_free_r>
20417688:	02042823          	sw	zero,48(s0)
2041768c:	bf99                	j	204175e2 <__sflush_r+0x38>
2041768e:	4601                	li	a2,0
20417690:	4685                	li	a3,1
20417692:	8526                	mv	a0,s1
20417694:	9702                	jalr	a4
20417696:	57fd                	li	a5,-1
20417698:	862a                	mv	a2,a0
2041769a:	f6f518e3          	bne	a0,a5,2041760a <__sflush_r+0x60>
2041769e:	409c                	lw	a5,0(s1)
204176a0:	d7ad                	beqz	a5,2041760a <__sflush_r+0x60>
204176a2:	4775                	li	a4,29
204176a4:	00e78563          	beq	a5,a4,204176ae <__sflush_r+0x104>
204176a8:	4759                	li	a4,22
204176aa:	04e79463          	bne	a5,a4,204176f2 <__sflush_r+0x148>
204176ae:	0124a023          	sw	s2,0(s1)
204176b2:	bf05                	j	204175e2 <__sflush_r+0x38>
204176b4:	0406e793          	ori	a5,a3,64
204176b8:	00f41623          	sh	a5,12(s0)
204176bc:	557d                	li	a0,-1
204176be:	b71d                	j	204175e4 <__sflush_r+0x3a>
204176c0:	0105a983          	lw	s3,16(a1)
204176c4:	f0098fe3          	beqz	s3,204175e2 <__sflush_r+0x38>
204176c8:	0005a903          	lw	s2,0(a1)
204176cc:	8b0d                	andi	a4,a4,3
204176ce:	0135a023          	sw	s3,0(a1)
204176d2:	41390933          	sub	s2,s2,s3
204176d6:	4781                	li	a5,0
204176d8:	e311                	bnez	a4,204176dc <__sflush_r+0x132>
204176da:	49dc                	lw	a5,20(a1)
204176dc:	c41c                	sw	a5,8(s0)
204176de:	f12052e3          	blez	s2,204175e2 <__sflush_r+0x38>
204176e2:	505c                	lw	a5,36(s0)
204176e4:	4c4c                	lw	a1,28(s0)
204176e6:	86ca                	mv	a3,s2
204176e8:	864e                	mv	a2,s3
204176ea:	8526                	mv	a0,s1
204176ec:	9782                	jalr	a5
204176ee:	00a04763          	bgtz	a0,204176fc <__sflush_r+0x152>
204176f2:	00c45783          	lhu	a5,12(s0)
204176f6:	0407e793          	ori	a5,a5,64
204176fa:	bf7d                	j	204176b8 <__sflush_r+0x10e>
204176fc:	99aa                	add	s3,s3,a0
204176fe:	40a90933          	sub	s2,s2,a0
20417702:	bff1                	j	204176de <__sflush_r+0x134>

20417704 <_fflush_r>:
20417704:	1101                	addi	sp,sp,-32
20417706:	cc22                	sw	s0,24(sp)
20417708:	ce06                	sw	ra,28(sp)
2041770a:	842a                	mv	s0,a0
2041770c:	c511                	beqz	a0,20417718 <_fflush_r+0x14>
2041770e:	5d1c                	lw	a5,56(a0)
20417710:	e781                	bnez	a5,20417718 <_fflush_r+0x14>
20417712:	c62e                	sw	a1,12(sp)
20417714:	2211                	jal	20417818 <__sinit>
20417716:	45b2                	lw	a1,12(sp)
20417718:	00c59783          	lh	a5,12(a1)
2041771c:	c791                	beqz	a5,20417728 <_fflush_r+0x24>
2041771e:	8522                	mv	a0,s0
20417720:	4462                	lw	s0,24(sp)
20417722:	40f2                	lw	ra,28(sp)
20417724:	6105                	addi	sp,sp,32
20417726:	b551                	j	204175aa <__sflush_r>
20417728:	40f2                	lw	ra,28(sp)
2041772a:	4462                	lw	s0,24(sp)
2041772c:	4501                	li	a0,0
2041772e:	6105                	addi	sp,sp,32
20417730:	8082                	ret

20417732 <fflush>:
20417732:	85aa                	mv	a1,a0
20417734:	e909                	bnez	a0,20417746 <fflush+0x14>
20417736:	8941a503          	lw	a0,-1900(gp) # 80000a34 <_global_impure_ptr>
2041773a:	204175b7          	lui	a1,0x20417
2041773e:	70458593          	addi	a1,a1,1796 # 20417704 <_fflush_r>
20417742:	0950006f          	j	20417fd6 <_fwalk_reent>
20417746:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041774a:	bf6d                	j	20417704 <_fflush_r>

2041774c <__fp_lock>:
2041774c:	4501                	li	a0,0
2041774e:	8082                	ret

20417750 <_cleanup_r>:
20417750:	2041c5b7          	lui	a1,0x2041c
20417754:	92258593          	addi	a1,a1,-1758 # 2041b922 <_fclose_r>
20417758:	07f0006f          	j	20417fd6 <_fwalk_reent>

2041775c <std.isra.0>:
2041775c:	1141                	addi	sp,sp,-16
2041775e:	c422                	sw	s0,8(sp)
20417760:	c606                	sw	ra,12(sp)
20417762:	842a                	mv	s0,a0
20417764:	00b51623          	sh	a1,12(a0)
20417768:	00c51723          	sh	a2,14(a0)
2041776c:	00052023          	sw	zero,0(a0)
20417770:	00052223          	sw	zero,4(a0)
20417774:	00052423          	sw	zero,8(a0)
20417778:	06052223          	sw	zero,100(a0)
2041777c:	00052823          	sw	zero,16(a0)
20417780:	00052a23          	sw	zero,20(a0)
20417784:	00052c23          	sw	zero,24(a0)
20417788:	4621                	li	a2,8
2041778a:	4581                	li	a1,0
2041778c:	05c50513          	addi	a0,a0,92
20417790:	e03fb0ef          	jal	ra,20413592 <memset>
20417794:	2041b7b7          	lui	a5,0x2041b
20417798:	c8c78793          	addi	a5,a5,-884 # 2041ac8c <__sread>
2041779c:	d01c                	sw	a5,32(s0)
2041779e:	2041b7b7          	lui	a5,0x2041b
204177a2:	cc278793          	addi	a5,a5,-830 # 2041acc2 <__swrite>
204177a6:	d05c                	sw	a5,36(s0)
204177a8:	2041b7b7          	lui	a5,0x2041b
204177ac:	d1478793          	addi	a5,a5,-748 # 2041ad14 <__sseek>
204177b0:	d41c                	sw	a5,40(s0)
204177b2:	2041b7b7          	lui	a5,0x2041b
204177b6:	d4c78793          	addi	a5,a5,-692 # 2041ad4c <__sclose>
204177ba:	cc40                	sw	s0,28(s0)
204177bc:	d45c                	sw	a5,44(s0)
204177be:	40b2                	lw	ra,12(sp)
204177c0:	4422                	lw	s0,8(sp)
204177c2:	0141                	addi	sp,sp,16
204177c4:	8082                	ret

204177c6 <__fp_unlock>:
204177c6:	4501                	li	a0,0
204177c8:	8082                	ret

204177ca <__sfmoreglue>:
204177ca:	1141                	addi	sp,sp,-16
204177cc:	c226                	sw	s1,4(sp)
204177ce:	06800613          	li	a2,104
204177d2:	fff58493          	addi	s1,a1,-1
204177d6:	02c484b3          	mul	s1,s1,a2
204177da:	c04a                	sw	s2,0(sp)
204177dc:	892e                	mv	s2,a1
204177de:	c422                	sw	s0,8(sp)
204177e0:	c606                	sw	ra,12(sp)
204177e2:	07448593          	addi	a1,s1,116
204177e6:	016020ef          	jal	ra,204197fc <_malloc_r>
204177ea:	842a                	mv	s0,a0
204177ec:	cd01                	beqz	a0,20417804 <__sfmoreglue+0x3a>
204177ee:	00052023          	sw	zero,0(a0)
204177f2:	01252223          	sw	s2,4(a0)
204177f6:	0531                	addi	a0,a0,12
204177f8:	c408                	sw	a0,8(s0)
204177fa:	06848613          	addi	a2,s1,104
204177fe:	4581                	li	a1,0
20417800:	d93fb0ef          	jal	ra,20413592 <memset>
20417804:	8522                	mv	a0,s0
20417806:	40b2                	lw	ra,12(sp)
20417808:	4422                	lw	s0,8(sp)
2041780a:	4492                	lw	s1,4(sp)
2041780c:	4902                	lw	s2,0(sp)
2041780e:	0141                	addi	sp,sp,16
20417810:	8082                	ret

20417812 <_cleanup>:
20417812:	8941a503          	lw	a0,-1900(gp) # 80000a34 <_global_impure_ptr>
20417816:	bf2d                	j	20417750 <_cleanup_r>

20417818 <__sinit>:
20417818:	5d1c                	lw	a5,56(a0)
2041781a:	e7a9                	bnez	a5,20417864 <__sinit+0x4c>
2041781c:	1141                	addi	sp,sp,-16
2041781e:	204177b7          	lui	a5,0x20417
20417822:	c606                	sw	ra,12(sp)
20417824:	c422                	sw	s0,8(sp)
20417826:	75078793          	addi	a5,a5,1872 # 20417750 <_cleanup_r>
2041782a:	dd5c                	sw	a5,60(a0)
2041782c:	478d                	li	a5,3
2041782e:	2ef52223          	sw	a5,740(a0)
20417832:	2ec50793          	addi	a5,a0,748
20417836:	842a                	mv	s0,a0
20417838:	2ef52423          	sw	a5,744(a0)
2041783c:	2e052023          	sw	zero,736(a0)
20417840:	4148                	lw	a0,4(a0)
20417842:	4601                	li	a2,0
20417844:	4591                	li	a1,4
20417846:	3f19                	jal	2041775c <std.isra.0>
20417848:	4408                	lw	a0,8(s0)
2041784a:	4605                	li	a2,1
2041784c:	45a5                	li	a1,9
2041784e:	3739                	jal	2041775c <std.isra.0>
20417850:	4448                	lw	a0,12(s0)
20417852:	4609                	li	a2,2
20417854:	45c9                	li	a1,18
20417856:	3719                	jal	2041775c <std.isra.0>
20417858:	4785                	li	a5,1
2041785a:	dc1c                	sw	a5,56(s0)
2041785c:	40b2                	lw	ra,12(sp)
2041785e:	4422                	lw	s0,8(sp)
20417860:	0141                	addi	sp,sp,16
20417862:	8082                	ret
20417864:	8082                	ret

20417866 <__sfp>:
20417866:	1141                	addi	sp,sp,-16
20417868:	c226                	sw	s1,4(sp)
2041786a:	8941a483          	lw	s1,-1900(gp) # 80000a34 <_global_impure_ptr>
2041786e:	c04a                	sw	s2,0(sp)
20417870:	c606                	sw	ra,12(sp)
20417872:	5c9c                	lw	a5,56(s1)
20417874:	c422                	sw	s0,8(sp)
20417876:	892a                	mv	s2,a0
20417878:	e399                	bnez	a5,2041787e <__sfp+0x18>
2041787a:	8526                	mv	a0,s1
2041787c:	3f71                	jal	20417818 <__sinit>
2041787e:	2e048493          	addi	s1,s1,736
20417882:	4480                	lw	s0,8(s1)
20417884:	40dc                	lw	a5,4(s1)
20417886:	17fd                	addi	a5,a5,-1
20417888:	0007d663          	bgez	a5,20417894 <__sfp+0x2e>
2041788c:	409c                	lw	a5,0(s1)
2041788e:	cb89                	beqz	a5,204178a0 <__sfp+0x3a>
20417890:	4084                	lw	s1,0(s1)
20417892:	bfc5                	j	20417882 <__sfp+0x1c>
20417894:	00c41703          	lh	a4,12(s0)
20417898:	c705                	beqz	a4,204178c0 <__sfp+0x5a>
2041789a:	06840413          	addi	s0,s0,104
2041789e:	b7e5                	j	20417886 <__sfp+0x20>
204178a0:	4591                	li	a1,4
204178a2:	854a                	mv	a0,s2
204178a4:	371d                	jal	204177ca <__sfmoreglue>
204178a6:	c088                	sw	a0,0(s1)
204178a8:	f565                	bnez	a0,20417890 <__sfp+0x2a>
204178aa:	47b1                	li	a5,12
204178ac:	00f92023          	sw	a5,0(s2)
204178b0:	4401                	li	s0,0
204178b2:	8522                	mv	a0,s0
204178b4:	40b2                	lw	ra,12(sp)
204178b6:	4422                	lw	s0,8(sp)
204178b8:	4492                	lw	s1,4(sp)
204178ba:	4902                	lw	s2,0(sp)
204178bc:	0141                	addi	sp,sp,16
204178be:	8082                	ret
204178c0:	77c1                	lui	a5,0xffff0
204178c2:	0785                	addi	a5,a5,1
204178c4:	06042223          	sw	zero,100(s0)
204178c8:	00042023          	sw	zero,0(s0)
204178cc:	00042223          	sw	zero,4(s0)
204178d0:	00042423          	sw	zero,8(s0)
204178d4:	c45c                	sw	a5,12(s0)
204178d6:	00042823          	sw	zero,16(s0)
204178da:	00042a23          	sw	zero,20(s0)
204178de:	00042c23          	sw	zero,24(s0)
204178e2:	4621                	li	a2,8
204178e4:	4581                	li	a1,0
204178e6:	05c40513          	addi	a0,s0,92
204178ea:	ca9fb0ef          	jal	ra,20413592 <memset>
204178ee:	02042823          	sw	zero,48(s0)
204178f2:	02042a23          	sw	zero,52(s0)
204178f6:	04042223          	sw	zero,68(s0)
204178fa:	04042423          	sw	zero,72(s0)
204178fe:	bf55                	j	204178b2 <__sfp+0x4c>

20417900 <__sfp_lock_acquire>:
20417900:	8082                	ret

20417902 <__sfp_lock_release>:
20417902:	8082                	ret

20417904 <__sinit_lock_acquire>:
20417904:	8082                	ret

20417906 <__sinit_lock_release>:
20417906:	8082                	ret

20417908 <__fp_lock_all>:
20417908:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041790c:	204175b7          	lui	a1,0x20417
20417910:	74c58593          	addi	a1,a1,1868 # 2041774c <__fp_lock>
20417914:	a585                	j	20417f74 <_fwalk>

20417916 <__fp_unlock_all>:
20417916:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041791a:	204175b7          	lui	a1,0x20417
2041791e:	7c658593          	addi	a1,a1,1990 # 204177c6 <__fp_unlock>
20417922:	ad89                	j	20417f74 <_fwalk>

20417924 <__fputwc>:
20417924:	7179                	addi	sp,sp,-48
20417926:	d422                	sw	s0,40(sp)
20417928:	d226                	sw	s1,36(sp)
2041792a:	cc52                	sw	s4,24(sp)
2041792c:	d606                	sw	ra,44(sp)
2041792e:	d04a                	sw	s2,32(sp)
20417930:	ce4e                	sw	s3,28(sp)
20417932:	ca56                	sw	s5,20(sp)
20417934:	c85a                	sw	s6,16(sp)
20417936:	8a2a                	mv	s4,a0
20417938:	84ae                	mv	s1,a1
2041793a:	8432                	mv	s0,a2
2041793c:	b0dfb0ef          	jal	ra,20413448 <__locale_mb_cur_max>
20417940:	4785                	li	a5,1
20417942:	02f51c63          	bne	a0,a5,2041797a <__fputwc+0x56>
20417946:	fff48793          	addi	a5,s1,-1
2041794a:	0fe00713          	li	a4,254
2041794e:	02f76663          	bltu	a4,a5,2041797a <__fputwc+0x56>
20417952:	87a6                	mv	a5,s1
20417954:	00f10623          	sb	a5,12(sp)
20417958:	4985                	li	s3,1
2041795a:	4901                	li	s2,0
2041795c:	5afd                	li	s5,-1
2041795e:	4b29                	li	s6,10
20417960:	05391063          	bne	s2,s3,204179a0 <__fputwc+0x7c>
20417964:	8526                	mv	a0,s1
20417966:	50b2                	lw	ra,44(sp)
20417968:	5422                	lw	s0,40(sp)
2041796a:	5492                	lw	s1,36(sp)
2041796c:	5902                	lw	s2,32(sp)
2041796e:	49f2                	lw	s3,28(sp)
20417970:	4a62                	lw	s4,24(sp)
20417972:	4ad2                	lw	s5,20(sp)
20417974:	4b42                	lw	s6,16(sp)
20417976:	6145                	addi	sp,sp,48
20417978:	8082                	ret
2041797a:	05c40693          	addi	a3,s0,92
2041797e:	8626                	mv	a2,s1
20417980:	006c                	addi	a1,sp,12
20417982:	8552                	mv	a0,s4
20417984:	669030ef          	jal	ra,2041b7ec <_wcrtomb_r>
20417988:	57fd                	li	a5,-1
2041798a:	89aa                	mv	s3,a0
2041798c:	fcf517e3          	bne	a0,a5,2041795a <__fputwc+0x36>
20417990:	00c45783          	lhu	a5,12(s0)
20417994:	0407e793          	ori	a5,a5,64
20417998:	00f41623          	sh	a5,12(s0)
2041799c:	557d                	li	a0,-1
2041799e:	b7e1                	j	20417966 <__fputwc+0x42>
204179a0:	0078                	addi	a4,sp,12
204179a2:	012707b3          	add	a5,a4,s2
204179a6:	0007c583          	lbu	a1,0(a5) # ffff0000 <pulp__FC+0xffff0001>
204179aa:	441c                	lw	a5,8(s0)
204179ac:	17fd                	addi	a5,a5,-1
204179ae:	c41c                	sw	a5,8(s0)
204179b0:	0007d763          	bgez	a5,204179be <__fputwc+0x9a>
204179b4:	4c18                	lw	a4,24(s0)
204179b6:	00e7cc63          	blt	a5,a4,204179ce <__fputwc+0xaa>
204179ba:	01658a63          	beq	a1,s6,204179ce <__fputwc+0xaa>
204179be:	401c                	lw	a5,0(s0)
204179c0:	00178713          	addi	a4,a5,1
204179c4:	c018                	sw	a4,0(s0)
204179c6:	00b78023          	sb	a1,0(a5)
204179ca:	0905                	addi	s2,s2,1
204179cc:	bf51                	j	20417960 <__fputwc+0x3c>
204179ce:	8622                	mv	a2,s0
204179d0:	8552                	mv	a0,s4
204179d2:	557030ef          	jal	ra,2041b728 <__swbuf_r>
204179d6:	ff551ae3          	bne	a0,s5,204179ca <__fputwc+0xa6>
204179da:	b7c9                	j	2041799c <__fputwc+0x78>

204179dc <_fputwc_r>:
204179dc:	00c61783          	lh	a5,12(a2)
204179e0:	01279713          	slli	a4,a5,0x12
204179e4:	00074a63          	bltz	a4,204179f8 <_fputwc_r+0x1c>
204179e8:	5278                	lw	a4,100(a2)
204179ea:	6689                	lui	a3,0x2
204179ec:	8fd5                	or	a5,a5,a3
204179ee:	00f61623          	sh	a5,12(a2)
204179f2:	6789                	lui	a5,0x2
204179f4:	8fd9                	or	a5,a5,a4
204179f6:	d27c                	sw	a5,100(a2)
204179f8:	b735                	j	20417924 <__fputwc>

204179fa <fputwc>:
204179fa:	1101                	addi	sp,sp,-32
204179fc:	cc22                	sw	s0,24(sp)
204179fe:	8981a403          	lw	s0,-1896(gp) # 80000a38 <_impure_ptr>
20417a02:	ca26                	sw	s1,20(sp)
20417a04:	ce06                	sw	ra,28(sp)
20417a06:	84aa                	mv	s1,a0
20417a08:	862e                	mv	a2,a1
20417a0a:	c801                	beqz	s0,20417a1a <fputwc+0x20>
20417a0c:	5c1c                	lw	a5,56(s0)
20417a0e:	e791                	bnez	a5,20417a1a <fputwc+0x20>
20417a10:	8522                	mv	a0,s0
20417a12:	c62e                	sw	a1,12(sp)
20417a14:	e05ff0ef          	jal	ra,20417818 <__sinit>
20417a18:	4632                	lw	a2,12(sp)
20417a1a:	8522                	mv	a0,s0
20417a1c:	4462                	lw	s0,24(sp)
20417a1e:	40f2                	lw	ra,28(sp)
20417a20:	85a6                	mv	a1,s1
20417a22:	44d2                	lw	s1,20(sp)
20417a24:	6105                	addi	sp,sp,32
20417a26:	bf5d                	j	204179dc <_fputwc_r>

20417a28 <_malloc_trim_r>:
20417a28:	7179                	addi	sp,sp,-48
20417a2a:	d04a                	sw	s2,32(sp)
20417a2c:	80000937          	lui	s2,0x80000
20417a30:	d422                	sw	s0,40(sp)
20417a32:	d226                	sw	s1,36(sp)
20417a34:	ce4e                	sw	s3,28(sp)
20417a36:	c62e                	sw	a1,12(sp)
20417a38:	d606                	sw	ra,44(sp)
20417a3a:	89aa                	mv	s3,a0
20417a3c:	59490913          	addi	s2,s2,1428 # 80000594 <pulp__FC+0x80000595>
20417a40:	2ac020ef          	jal	ra,20419cec <__malloc_lock>
20417a44:	00892783          	lw	a5,8(s2)
20417a48:	45b2                	lw	a1,12(sp)
20417a4a:	43c4                	lw	s1,4(a5)
20417a4c:	6785                	lui	a5,0x1
20417a4e:	fef78413          	addi	s0,a5,-17 # fef <__stack_size-0x3011>
20417a52:	98f1                	andi	s1,s1,-4
20417a54:	8c0d                	sub	s0,s0,a1
20417a56:	9426                	add	s0,s0,s1
20417a58:	8031                	srli	s0,s0,0xc
20417a5a:	147d                	addi	s0,s0,-1
20417a5c:	0432                	slli	s0,s0,0xc
20417a5e:	00f45d63          	ble	a5,s0,20417a78 <_malloc_trim_r+0x50>
20417a62:	854e                	mv	a0,s3
20417a64:	28a020ef          	jal	ra,20419cee <__malloc_unlock>
20417a68:	4501                	li	a0,0
20417a6a:	50b2                	lw	ra,44(sp)
20417a6c:	5422                	lw	s0,40(sp)
20417a6e:	5492                	lw	s1,36(sp)
20417a70:	5902                	lw	s2,32(sp)
20417a72:	49f2                	lw	s3,28(sp)
20417a74:	6145                	addi	sp,sp,48
20417a76:	8082                	ret
20417a78:	4581                	li	a1,0
20417a7a:	854e                	mv	a0,s3
20417a7c:	755020ef          	jal	ra,2041a9d0 <_sbrk_r>
20417a80:	00892783          	lw	a5,8(s2)
20417a84:	97a6                	add	a5,a5,s1
20417a86:	fcf51ee3          	bne	a0,a5,20417a62 <_malloc_trim_r+0x3a>
20417a8a:	408005b3          	neg	a1,s0
20417a8e:	854e                	mv	a0,s3
20417a90:	741020ef          	jal	ra,2041a9d0 <_sbrk_r>
20417a94:	57fd                	li	a5,-1
20417a96:	02f51663          	bne	a0,a5,20417ac2 <_malloc_trim_r+0x9a>
20417a9a:	4581                	li	a1,0
20417a9c:	854e                	mv	a0,s3
20417a9e:	733020ef          	jal	ra,2041a9d0 <_sbrk_r>
20417aa2:	00892703          	lw	a4,8(s2)
20417aa6:	46bd                	li	a3,15
20417aa8:	40e507b3          	sub	a5,a0,a4
20417aac:	faf6dbe3          	ble	a5,a3,20417a62 <_malloc_trim_r+0x3a>
20417ab0:	89c1a683          	lw	a3,-1892(gp) # 80000a3c <__malloc_sbrk_base>
20417ab4:	0017e793          	ori	a5,a5,1
20417ab8:	c35c                	sw	a5,4(a4)
20417aba:	8d15                	sub	a0,a0,a3
20417abc:	d0a1ae23          	sw	a0,-740(gp) # 80000ebc <__malloc_current_mallinfo>
20417ac0:	b74d                	j	20417a62 <_malloc_trim_r+0x3a>
20417ac2:	00892783          	lw	a5,8(s2)
20417ac6:	8c81                	sub	s1,s1,s0
20417ac8:	0014e493          	ori	s1,s1,1
20417acc:	c3c4                	sw	s1,4(a5)
20417ace:	d1c1a783          	lw	a5,-740(gp) # 80000ebc <__malloc_current_mallinfo>
20417ad2:	854e                	mv	a0,s3
20417ad4:	40878433          	sub	s0,a5,s0
20417ad8:	d081ae23          	sw	s0,-740(gp) # 80000ebc <__malloc_current_mallinfo>
20417adc:	212020ef          	jal	ra,20419cee <__malloc_unlock>
20417ae0:	4505                	li	a0,1
20417ae2:	b761                	j	20417a6a <_malloc_trim_r+0x42>

20417ae4 <_free_r>:
20417ae4:	1a058463          	beqz	a1,20417c8c <_free_r+0x1a8>
20417ae8:	1141                	addi	sp,sp,-16
20417aea:	c422                	sw	s0,8(sp)
20417aec:	c226                	sw	s1,4(sp)
20417aee:	842a                	mv	s0,a0
20417af0:	84ae                	mv	s1,a1
20417af2:	c606                	sw	ra,12(sp)
20417af4:	1f8020ef          	jal	ra,20419cec <__malloc_lock>
20417af8:	ffc4a503          	lw	a0,-4(s1)
20417afc:	80000637          	lui	a2,0x80000
20417b00:	ff848693          	addi	a3,s1,-8
20417b04:	ffe57793          	andi	a5,a0,-2
20417b08:	59460813          	addi	a6,a2,1428 # 80000594 <pulp__FC+0x80000595>
20417b0c:	00f685b3          	add	a1,a3,a5
20417b10:	41d8                	lw	a4,4(a1)
20417b12:	00882803          	lw	a6,8(a6)
20417b16:	59460613          	addi	a2,a2,1428
20417b1a:	9b71                	andi	a4,a4,-4
20417b1c:	8905                	andi	a0,a0,1
20417b1e:	02b81f63          	bne	a6,a1,20417b5c <_free_r+0x78>
20417b22:	97ba                	add	a5,a5,a4
20417b24:	e909                	bnez	a0,20417b36 <_free_r+0x52>
20417b26:	ff84a703          	lw	a4,-8(s1)
20417b2a:	8e99                	sub	a3,a3,a4
20417b2c:	468c                	lw	a1,8(a3)
20417b2e:	97ba                	add	a5,a5,a4
20417b30:	46d8                	lw	a4,12(a3)
20417b32:	c5d8                	sw	a4,12(a1)
20417b34:	c70c                	sw	a1,8(a4)
20417b36:	0017e713          	ori	a4,a5,1
20417b3a:	c2d8                	sw	a4,4(a3)
20417b3c:	8a01a703          	lw	a4,-1888(gp) # 80000a40 <__malloc_trim_threshold>
20417b40:	c614                	sw	a3,8(a2)
20417b42:	00e7e663          	bltu	a5,a4,20417b4e <_free_r+0x6a>
20417b46:	8cc1a583          	lw	a1,-1844(gp) # 80000a6c <__malloc_top_pad>
20417b4a:	8522                	mv	a0,s0
20417b4c:	3df1                	jal	20417a28 <_malloc_trim_r>
20417b4e:	8522                	mv	a0,s0
20417b50:	4422                	lw	s0,8(sp)
20417b52:	40b2                	lw	ra,12(sp)
20417b54:	4492                	lw	s1,4(sp)
20417b56:	0141                	addi	sp,sp,16
20417b58:	1960206f          	j	20419cee <__malloc_unlock>
20417b5c:	c1d8                	sw	a4,4(a1)
20417b5e:	4801                	li	a6,0
20417b60:	e115                	bnez	a0,20417b84 <_free_r+0xa0>
20417b62:	ff84a503          	lw	a0,-8(s1)
20417b66:	800008b7          	lui	a7,0x80000
20417b6a:	59c88893          	addi	a7,a7,1436 # 8000059c <pulp__FC+0x8000059d>
20417b6e:	8e89                	sub	a3,a3,a0
20417b70:	97aa                	add	a5,a5,a0
20417b72:	4688                	lw	a0,8(a3)
20417b74:	07150c63          	beq	a0,a7,20417bec <_free_r+0x108>
20417b78:	00c6a883          	lw	a7,12(a3) # 200c <__stack_size-0x1ff4>
20417b7c:	01152623          	sw	a7,12(a0)
20417b80:	00a8a423          	sw	a0,8(a7)
20417b84:	00e58533          	add	a0,a1,a4
20417b88:	4148                	lw	a0,4(a0)
20417b8a:	8905                	andi	a0,a0,1
20417b8c:	e105                	bnez	a0,20417bac <_free_r+0xc8>
20417b8e:	97ba                	add	a5,a5,a4
20417b90:	4598                	lw	a4,8(a1)
20417b92:	04081f63          	bnez	a6,20417bf0 <_free_r+0x10c>
20417b96:	80000537          	lui	a0,0x80000
20417b9a:	59c50513          	addi	a0,a0,1436 # 8000059c <pulp__FC+0x8000059d>
20417b9e:	04a71963          	bne	a4,a0,20417bf0 <_free_r+0x10c>
20417ba2:	ca54                	sw	a3,20(a2)
20417ba4:	ca14                	sw	a3,16(a2)
20417ba6:	c6d8                	sw	a4,12(a3)
20417ba8:	c698                	sw	a4,8(a3)
20417baa:	4805                	li	a6,1
20417bac:	0017e713          	ori	a4,a5,1
20417bb0:	c2d8                	sw	a4,4(a3)
20417bb2:	00f68733          	add	a4,a3,a5
20417bb6:	c31c                	sw	a5,0(a4)
20417bb8:	f8081be3          	bnez	a6,20417b4e <_free_r+0x6a>
20417bbc:	1ff00713          	li	a4,511
20417bc0:	02f76c63          	bltu	a4,a5,20417bf8 <_free_r+0x114>
20417bc4:	838d                	srli	a5,a5,0x3
20417bc6:	4027d593          	srai	a1,a5,0x2
20417bca:	4705                	li	a4,1
20417bcc:	00b71733          	sll	a4,a4,a1
20417bd0:	424c                	lw	a1,4(a2)
20417bd2:	0785                	addi	a5,a5,1
20417bd4:	078e                	slli	a5,a5,0x3
20417bd6:	97b2                	add	a5,a5,a2
20417bd8:	8f4d                	or	a4,a4,a1
20417bda:	c258                	sw	a4,4(a2)
20417bdc:	4398                	lw	a4,0(a5)
20417bde:	ff878613          	addi	a2,a5,-8
20417be2:	c6d0                	sw	a2,12(a3)
20417be4:	c698                	sw	a4,8(a3)
20417be6:	c394                	sw	a3,0(a5)
20417be8:	c754                	sw	a3,12(a4)
20417bea:	b795                	j	20417b4e <_free_r+0x6a>
20417bec:	4805                	li	a6,1
20417bee:	bf59                	j	20417b84 <_free_r+0xa0>
20417bf0:	45cc                	lw	a1,12(a1)
20417bf2:	c74c                	sw	a1,12(a4)
20417bf4:	c598                	sw	a4,8(a1)
20417bf6:	bf5d                	j	20417bac <_free_r+0xc8>
20417bf8:	0097d593          	srli	a1,a5,0x9
20417bfc:	4711                	li	a4,4
20417bfe:	02b76b63          	bltu	a4,a1,20417c34 <_free_r+0x150>
20417c02:	0067d713          	srli	a4,a5,0x6
20417c06:	03870713          	addi	a4,a4,56 # 20400038 <_start+0x38>
20417c0a:	00170593          	addi	a1,a4,1
20417c0e:	058e                	slli	a1,a1,0x3
20417c10:	95b2                	add	a1,a1,a2
20417c12:	ff858513          	addi	a0,a1,-8
20417c16:	418c                	lw	a1,0(a1)
20417c18:	06b51463          	bne	a0,a1,20417c80 <_free_r+0x19c>
20417c1c:	4785                	li	a5,1
20417c1e:	8709                	srai	a4,a4,0x2
20417c20:	00e79733          	sll	a4,a5,a4
20417c24:	425c                	lw	a5,4(a2)
20417c26:	8f5d                	or	a4,a4,a5
20417c28:	c258                	sw	a4,4(a2)
20417c2a:	c6c8                	sw	a0,12(a3)
20417c2c:	c68c                	sw	a1,8(a3)
20417c2e:	c514                	sw	a3,8(a0)
20417c30:	c5d4                	sw	a3,12(a1)
20417c32:	bf31                	j	20417b4e <_free_r+0x6a>
20417c34:	4751                	li	a4,20
20417c36:	00b76563          	bltu	a4,a1,20417c40 <_free_r+0x15c>
20417c3a:	05b58713          	addi	a4,a1,91
20417c3e:	b7f1                	j	20417c0a <_free_r+0x126>
20417c40:	05400713          	li	a4,84
20417c44:	00b76763          	bltu	a4,a1,20417c52 <_free_r+0x16e>
20417c48:	00c7d713          	srli	a4,a5,0xc
20417c4c:	06e70713          	addi	a4,a4,110
20417c50:	bf6d                	j	20417c0a <_free_r+0x126>
20417c52:	15400713          	li	a4,340
20417c56:	00b76763          	bltu	a4,a1,20417c64 <_free_r+0x180>
20417c5a:	00f7d713          	srli	a4,a5,0xf
20417c5e:	07770713          	addi	a4,a4,119
20417c62:	b765                	j	20417c0a <_free_r+0x126>
20417c64:	55400513          	li	a0,1364
20417c68:	07e00713          	li	a4,126
20417c6c:	f8b56fe3          	bltu	a0,a1,20417c0a <_free_r+0x126>
20417c70:	0127d713          	srli	a4,a5,0x12
20417c74:	07c70713          	addi	a4,a4,124
20417c78:	bf49                	j	20417c0a <_free_r+0x126>
20417c7a:	458c                	lw	a1,8(a1)
20417c7c:	00b50663          	beq	a0,a1,20417c88 <_free_r+0x1a4>
20417c80:	41d8                	lw	a4,4(a1)
20417c82:	9b71                	andi	a4,a4,-4
20417c84:	fee7ebe3          	bltu	a5,a4,20417c7a <_free_r+0x196>
20417c88:	45c8                	lw	a0,12(a1)
20417c8a:	b745                	j	20417c2a <_free_r+0x146>
20417c8c:	8082                	ret

20417c8e <__sfvwrite_r>:
20417c8e:	461c                	lw	a5,8(a2)
20417c90:	e781                	bnez	a5,20417c98 <__sfvwrite_r+0xa>
20417c92:	4781                	li	a5,0
20417c94:	853e                	mv	a0,a5
20417c96:	8082                	ret
20417c98:	00c5d783          	lhu	a5,12(a1)
20417c9c:	715d                	addi	sp,sp,-80
20417c9e:	c4a2                	sw	s0,72(sp)
20417ca0:	c0ca                	sw	s2,64(sp)
20417ca2:	da56                	sw	s5,52(sp)
20417ca4:	c686                	sw	ra,76(sp)
20417ca6:	c2a6                	sw	s1,68(sp)
20417ca8:	de4e                	sw	s3,60(sp)
20417caa:	dc52                	sw	s4,56(sp)
20417cac:	d85a                	sw	s6,48(sp)
20417cae:	d65e                	sw	s7,44(sp)
20417cb0:	d462                	sw	s8,40(sp)
20417cb2:	d266                	sw	s9,36(sp)
20417cb4:	d06a                	sw	s10,32(sp)
20417cb6:	ce6e                	sw	s11,28(sp)
20417cb8:	8ba1                	andi	a5,a5,8
20417cba:	8ab2                	mv	s5,a2
20417cbc:	842e                	mv	s0,a1
20417cbe:	892a                	mv	s2,a0
20417cc0:	cfd9                	beqz	a5,20417d5e <__sfvwrite_r+0xd0>
20417cc2:	499c                	lw	a5,16(a1)
20417cc4:	cfc9                	beqz	a5,20417d5e <__sfvwrite_r+0xd0>
20417cc6:	00c45783          	lhu	a5,12(s0)
20417cca:	000aaa03          	lw	s4,0(s5)
20417cce:	0027f713          	andi	a4,a5,2
20417cd2:	0e071863          	bnez	a4,20417dc2 <__sfvwrite_r+0x134>
20417cd6:	8b85                	andi	a5,a5,1
20417cd8:	16078163          	beqz	a5,20417e3a <__sfvwrite_r+0x1ac>
20417cdc:	4b81                	li	s7,0
20417cde:	4501                	li	a0,0
20417ce0:	4b01                	li	s6,0
20417ce2:	4981                	li	s3,0
20417ce4:	24098963          	beqz	s3,20417f36 <__sfvwrite_r+0x2a8>
20417ce8:	ed01                	bnez	a0,20417d00 <__sfvwrite_r+0x72>
20417cea:	864e                	mv	a2,s3
20417cec:	45a9                	li	a1,10
20417cee:	855a                	mv	a0,s6
20417cf0:	7a5010ef          	jal	ra,20419c94 <memchr>
20417cf4:	00198b93          	addi	s7,s3,1
20417cf8:	c501                	beqz	a0,20417d00 <__sfvwrite_r+0x72>
20417cfa:	0505                	addi	a0,a0,1
20417cfc:	41650bb3          	sub	s7,a0,s6
20417d00:	8c5e                	mv	s8,s7
20417d02:	0179f363          	bleu	s7,s3,20417d08 <__sfvwrite_r+0x7a>
20417d06:	8c4e                	mv	s8,s3
20417d08:	4008                	lw	a0,0(s0)
20417d0a:	481c                	lw	a5,16(s0)
20417d0c:	4854                	lw	a3,20(s0)
20417d0e:	22a7fb63          	bleu	a0,a5,20417f44 <__sfvwrite_r+0x2b6>
20417d12:	4404                	lw	s1,8(s0)
20417d14:	94b6                	add	s1,s1,a3
20417d16:	2384d763          	ble	s8,s1,20417f44 <__sfvwrite_r+0x2b6>
20417d1a:	85da                	mv	a1,s6
20417d1c:	8626                	mv	a2,s1
20417d1e:	791010ef          	jal	ra,20419cae <memmove>
20417d22:	401c                	lw	a5,0(s0)
20417d24:	85a2                	mv	a1,s0
20417d26:	854a                	mv	a0,s2
20417d28:	97a6                	add	a5,a5,s1
20417d2a:	c01c                	sw	a5,0(s0)
20417d2c:	9d9ff0ef          	jal	ra,20417704 <_fflush_r>
20417d30:	0e051d63          	bnez	a0,20417e2a <__sfvwrite_r+0x19c>
20417d34:	409b8bb3          	sub	s7,s7,s1
20417d38:	4505                	li	a0,1
20417d3a:	000b9763          	bnez	s7,20417d48 <__sfvwrite_r+0xba>
20417d3e:	85a2                	mv	a1,s0
20417d40:	854a                	mv	a0,s2
20417d42:	9c3ff0ef          	jal	ra,20417704 <_fflush_r>
20417d46:	e175                	bnez	a0,20417e2a <__sfvwrite_r+0x19c>
20417d48:	008aa783          	lw	a5,8(s5)
20417d4c:	9b26                	add	s6,s6,s1
20417d4e:	409989b3          	sub	s3,s3,s1
20417d52:	409784b3          	sub	s1,a5,s1
20417d56:	009aa423          	sw	s1,8(s5)
20417d5a:	f4c9                	bnez	s1,20417ce4 <__sfvwrite_r+0x56>
20417d5c:	a091                	j	20417da0 <__sfvwrite_r+0x112>
20417d5e:	85a2                	mv	a1,s0
20417d60:	854a                	mv	a0,s2
20417d62:	e58ff0ef          	jal	ra,204173ba <__swsetup_r>
20417d66:	57fd                	li	a5,-1
20417d68:	dd39                	beqz	a0,20417cc6 <__sfvwrite_r+0x38>
20417d6a:	a825                	j	20417da2 <__sfvwrite_r+0x114>
20417d6c:	000a2983          	lw	s3,0(s4)
20417d70:	004a2483          	lw	s1,4(s4)
20417d74:	0a21                	addi	s4,s4,8
20417d76:	d8fd                	beqz	s1,20417d6c <__sfvwrite_r+0xde>
20417d78:	86a6                	mv	a3,s1
20417d7a:	009b7363          	bleu	s1,s6,20417d80 <__sfvwrite_r+0xf2>
20417d7e:	86da                	mv	a3,s6
20417d80:	505c                	lw	a5,36(s0)
20417d82:	4c4c                	lw	a1,28(s0)
20417d84:	864e                	mv	a2,s3
20417d86:	854a                	mv	a0,s2
20417d88:	9782                	jalr	a5
20417d8a:	0aa05063          	blez	a0,20417e2a <__sfvwrite_r+0x19c>
20417d8e:	008aa783          	lw	a5,8(s5)
20417d92:	99aa                	add	s3,s3,a0
20417d94:	8c89                	sub	s1,s1,a0
20417d96:	40a78533          	sub	a0,a5,a0
20417d9a:	00aaa423          	sw	a0,8(s5)
20417d9e:	fd61                	bnez	a0,20417d76 <__sfvwrite_r+0xe8>
20417da0:	4781                	li	a5,0
20417da2:	40b6                	lw	ra,76(sp)
20417da4:	4426                	lw	s0,72(sp)
20417da6:	4496                	lw	s1,68(sp)
20417da8:	4906                	lw	s2,64(sp)
20417daa:	59f2                	lw	s3,60(sp)
20417dac:	5a62                	lw	s4,56(sp)
20417dae:	5ad2                	lw	s5,52(sp)
20417db0:	5b42                	lw	s6,48(sp)
20417db2:	5bb2                	lw	s7,44(sp)
20417db4:	5c22                	lw	s8,40(sp)
20417db6:	5c92                	lw	s9,36(sp)
20417db8:	5d02                	lw	s10,32(sp)
20417dba:	4df2                	lw	s11,28(sp)
20417dbc:	853e                	mv	a0,a5
20417dbe:	6161                	addi	sp,sp,80
20417dc0:	8082                	ret
20417dc2:	80000b37          	lui	s6,0x80000
20417dc6:	4981                	li	s3,0
20417dc8:	4481                	li	s1,0
20417dca:	c00b4b13          	xori	s6,s6,-1024
20417dce:	b765                	j	20417d76 <__sfvwrite_r+0xe8>
20417dd0:	000a2b03          	lw	s6,0(s4)
20417dd4:	004a2483          	lw	s1,4(s4)
20417dd8:	0a21                	addi	s4,s4,8
20417dda:	d8fd                	beqz	s1,20417dd0 <__sfvwrite_r+0x142>
20417ddc:	00c45703          	lhu	a4,12(s0)
20417de0:	441c                	lw	a5,8(s0)
20417de2:	4008                	lw	a0,0(s0)
20417de4:	20077693          	andi	a3,a4,512
20417de8:	0e068a63          	beqz	a3,20417edc <__sfvwrite_r+0x24e>
20417dec:	08f4ea63          	bltu	s1,a5,20417e80 <__sfvwrite_r+0x1f2>
20417df0:	48077693          	andi	a3,a4,1152
20417df4:	c6d1                	beqz	a3,20417e80 <__sfvwrite_r+0x1f2>
20417df6:	01442d83          	lw	s11,20(s0)
20417dfa:	480c                	lw	a1,16(s0)
20417dfc:	03bc8db3          	mul	s11,s9,s11
20417e00:	40b509b3          	sub	s3,a0,a1
20417e04:	00198793          	addi	a5,s3,1
20417e08:	97a6                	add	a5,a5,s1
20417e0a:	03adcdb3          	div	s11,s11,s10
20417e0e:	00fdf363          	bleu	a5,s11,20417e14 <__sfvwrite_r+0x186>
20417e12:	8dbe                	mv	s11,a5
20417e14:	40077713          	andi	a4,a4,1024
20417e18:	c34d                	beqz	a4,20417eba <__sfvwrite_r+0x22c>
20417e1a:	85ee                	mv	a1,s11
20417e1c:	854a                	mv	a0,s2
20417e1e:	1df010ef          	jal	ra,204197fc <_malloc_r>
20417e22:	e51d                	bnez	a0,20417e50 <__sfvwrite_r+0x1c2>
20417e24:	47b1                	li	a5,12
20417e26:	00f92023          	sw	a5,0(s2)
20417e2a:	00c45783          	lhu	a5,12(s0)
20417e2e:	0407e793          	ori	a5,a5,64
20417e32:	00f41623          	sh	a5,12(s0)
20417e36:	57fd                	li	a5,-1
20417e38:	b7ad                	j	20417da2 <__sfvwrite_r+0x114>
20417e3a:	80000bb7          	lui	s7,0x80000
20417e3e:	ffebcc13          	xori	s8,s7,-2
20417e42:	4b01                	li	s6,0
20417e44:	4481                	li	s1,0
20417e46:	fffbcb93          	not	s7,s7
20417e4a:	4c8d                	li	s9,3
20417e4c:	4d09                	li	s10,2
20417e4e:	b771                	j	20417dda <__sfvwrite_r+0x14c>
20417e50:	480c                	lw	a1,16(s0)
20417e52:	864e                	mv	a2,s3
20417e54:	c62a                	sw	a0,12(sp)
20417e56:	e7efb0ef          	jal	ra,204134d4 <memcpy>
20417e5a:	00c45703          	lhu	a4,12(s0)
20417e5e:	47b2                	lw	a5,12(sp)
20417e60:	b7f77713          	andi	a4,a4,-1153
20417e64:	08076713          	ori	a4,a4,128
20417e68:	00e41623          	sh	a4,12(s0)
20417e6c:	c81c                	sw	a5,16(s0)
20417e6e:	01b42a23          	sw	s11,20(s0)
20417e72:	97ce                	add	a5,a5,s3
20417e74:	413d8db3          	sub	s11,s11,s3
20417e78:	c01c                	sw	a5,0(s0)
20417e7a:	01b42423          	sw	s11,8(s0)
20417e7e:	87a6                	mv	a5,s1
20417e80:	89a6                	mv	s3,s1
20417e82:	00f4f363          	bleu	a5,s1,20417e88 <__sfvwrite_r+0x1fa>
20417e86:	87a6                	mv	a5,s1
20417e88:	4008                	lw	a0,0(s0)
20417e8a:	863e                	mv	a2,a5
20417e8c:	85da                	mv	a1,s6
20417e8e:	c63e                	sw	a5,12(sp)
20417e90:	61f010ef          	jal	ra,20419cae <memmove>
20417e94:	47b2                	lw	a5,12(sp)
20417e96:	4418                	lw	a4,8(s0)
20417e98:	8f1d                	sub	a4,a4,a5
20417e9a:	c418                	sw	a4,8(s0)
20417e9c:	4018                	lw	a4,0(s0)
20417e9e:	97ba                	add	a5,a5,a4
20417ea0:	c01c                	sw	a5,0(s0)
20417ea2:	008aa783          	lw	a5,8(s5)
20417ea6:	9b4e                	add	s6,s6,s3
20417ea8:	413484b3          	sub	s1,s1,s3
20417eac:	413789b3          	sub	s3,a5,s3
20417eb0:	013aa423          	sw	s3,8(s5)
20417eb4:	f20993e3          	bnez	s3,20417dda <__sfvwrite_r+0x14c>
20417eb8:	b5e5                	j	20417da0 <__sfvwrite_r+0x112>
20417eba:	866e                	mv	a2,s11
20417ebc:	854a                	mv	a0,s2
20417ebe:	76e020ef          	jal	ra,2041a62c <_realloc_r>
20417ec2:	87aa                	mv	a5,a0
20417ec4:	f545                	bnez	a0,20417e6c <__sfvwrite_r+0x1de>
20417ec6:	480c                	lw	a1,16(s0)
20417ec8:	854a                	mv	a0,s2
20417eca:	c1bff0ef          	jal	ra,20417ae4 <_free_r>
20417ece:	00c45783          	lhu	a5,12(s0)
20417ed2:	f7f7f793          	andi	a5,a5,-129
20417ed6:	00f41623          	sh	a5,12(s0)
20417eda:	b7a9                	j	20417e24 <__sfvwrite_r+0x196>
20417edc:	4818                	lw	a4,16(s0)
20417ede:	00a76563          	bltu	a4,a0,20417ee8 <__sfvwrite_r+0x25a>
20417ee2:	4854                	lw	a3,20(s0)
20417ee4:	02d4f863          	bleu	a3,s1,20417f14 <__sfvwrite_r+0x286>
20417ee8:	89be                	mv	s3,a5
20417eea:	00f4f363          	bleu	a5,s1,20417ef0 <__sfvwrite_r+0x262>
20417eee:	89a6                	mv	s3,s1
20417ef0:	864e                	mv	a2,s3
20417ef2:	85da                	mv	a1,s6
20417ef4:	5bb010ef          	jal	ra,20419cae <memmove>
20417ef8:	441c                	lw	a5,8(s0)
20417efa:	4018                	lw	a4,0(s0)
20417efc:	413787b3          	sub	a5,a5,s3
20417f00:	974e                	add	a4,a4,s3
20417f02:	c41c                	sw	a5,8(s0)
20417f04:	c018                	sw	a4,0(s0)
20417f06:	ffd1                	bnez	a5,20417ea2 <__sfvwrite_r+0x214>
20417f08:	85a2                	mv	a1,s0
20417f0a:	854a                	mv	a0,s2
20417f0c:	ff8ff0ef          	jal	ra,20417704 <_fflush_r>
20417f10:	d949                	beqz	a0,20417ea2 <__sfvwrite_r+0x214>
20417f12:	bf21                	j	20417e2a <__sfvwrite_r+0x19c>
20417f14:	87de                	mv	a5,s7
20417f16:	009c6363          	bltu	s8,s1,20417f1c <__sfvwrite_r+0x28e>
20417f1a:	87a6                	mv	a5,s1
20417f1c:	02d7c7b3          	div	a5,a5,a3
20417f20:	5058                	lw	a4,36(s0)
20417f22:	4c4c                	lw	a1,28(s0)
20417f24:	865a                	mv	a2,s6
20417f26:	854a                	mv	a0,s2
20417f28:	02d786b3          	mul	a3,a5,a3
20417f2c:	9702                	jalr	a4
20417f2e:	89aa                	mv	s3,a0
20417f30:	f6a049e3          	bgtz	a0,20417ea2 <__sfvwrite_r+0x214>
20417f34:	bddd                	j	20417e2a <__sfvwrite_r+0x19c>
20417f36:	000a2b03          	lw	s6,0(s4)
20417f3a:	004a2983          	lw	s3,4(s4)
20417f3e:	4501                	li	a0,0
20417f40:	0a21                	addi	s4,s4,8
20417f42:	b34d                	j	20417ce4 <__sfvwrite_r+0x56>
20417f44:	00dc4b63          	blt	s8,a3,20417f5a <__sfvwrite_r+0x2cc>
20417f48:	505c                	lw	a5,36(s0)
20417f4a:	4c4c                	lw	a1,28(s0)
20417f4c:	865a                	mv	a2,s6
20417f4e:	854a                	mv	a0,s2
20417f50:	9782                	jalr	a5
20417f52:	84aa                	mv	s1,a0
20417f54:	dea040e3          	bgtz	a0,20417d34 <__sfvwrite_r+0xa6>
20417f58:	bdc9                	j	20417e2a <__sfvwrite_r+0x19c>
20417f5a:	8662                	mv	a2,s8
20417f5c:	85da                	mv	a1,s6
20417f5e:	551010ef          	jal	ra,20419cae <memmove>
20417f62:	441c                	lw	a5,8(s0)
20417f64:	84e2                	mv	s1,s8
20417f66:	418787b3          	sub	a5,a5,s8
20417f6a:	c41c                	sw	a5,8(s0)
20417f6c:	401c                	lw	a5,0(s0)
20417f6e:	97e2                	add	a5,a5,s8
20417f70:	c01c                	sw	a5,0(s0)
20417f72:	b3c9                	j	20417d34 <__sfvwrite_r+0xa6>

20417f74 <_fwalk>:
20417f74:	7179                	addi	sp,sp,-48
20417f76:	d422                	sw	s0,40(sp)
20417f78:	d04a                	sw	s2,32(sp)
20417f7a:	cc52                	sw	s4,24(sp)
20417f7c:	ca56                	sw	s5,20(sp)
20417f7e:	d606                	sw	ra,44(sp)
20417f80:	d226                	sw	s1,36(sp)
20417f82:	ce4e                	sw	s3,28(sp)
20417f84:	2e050413          	addi	s0,a0,736
20417f88:	4901                	li	s2,0
20417f8a:	4a05                	li	s4,1
20417f8c:	5afd                	li	s5,-1
20417f8e:	e819                	bnez	s0,20417fa4 <_fwalk+0x30>
20417f90:	50b2                	lw	ra,44(sp)
20417f92:	5422                	lw	s0,40(sp)
20417f94:	854a                	mv	a0,s2
20417f96:	5492                	lw	s1,36(sp)
20417f98:	5902                	lw	s2,32(sp)
20417f9a:	49f2                	lw	s3,28(sp)
20417f9c:	4a62                	lw	s4,24(sp)
20417f9e:	4ad2                	lw	s5,20(sp)
20417fa0:	6145                	addi	sp,sp,48
20417fa2:	8082                	ret
20417fa4:	4404                	lw	s1,8(s0)
20417fa6:	00442983          	lw	s3,4(s0)
20417faa:	19fd                	addi	s3,s3,-1
20417fac:	0009d463          	bgez	s3,20417fb4 <_fwalk+0x40>
20417fb0:	4000                	lw	s0,0(s0)
20417fb2:	bff1                	j	20417f8e <_fwalk+0x1a>
20417fb4:	00c4d783          	lhu	a5,12(s1)
20417fb8:	00fa7c63          	bleu	a5,s4,20417fd0 <_fwalk+0x5c>
20417fbc:	00e49783          	lh	a5,14(s1)
20417fc0:	01578863          	beq	a5,s5,20417fd0 <_fwalk+0x5c>
20417fc4:	c62e                	sw	a1,12(sp)
20417fc6:	8526                	mv	a0,s1
20417fc8:	9582                	jalr	a1
20417fca:	45b2                	lw	a1,12(sp)
20417fcc:	00a96933          	or	s2,s2,a0
20417fd0:	06848493          	addi	s1,s1,104
20417fd4:	bfd9                	j	20417faa <_fwalk+0x36>

20417fd6 <_fwalk_reent>:
20417fd6:	7179                	addi	sp,sp,-48
20417fd8:	d422                	sw	s0,40(sp)
20417fda:	d04a                	sw	s2,32(sp)
20417fdc:	cc52                	sw	s4,24(sp)
20417fde:	ca56                	sw	s5,20(sp)
20417fe0:	c85a                	sw	s6,16(sp)
20417fe2:	c65e                	sw	s7,12(sp)
20417fe4:	d606                	sw	ra,44(sp)
20417fe6:	d226                	sw	s1,36(sp)
20417fe8:	ce4e                	sw	s3,28(sp)
20417fea:	8a2a                	mv	s4,a0
20417fec:	8aae                	mv	s5,a1
20417fee:	2e050413          	addi	s0,a0,736
20417ff2:	4901                	li	s2,0
20417ff4:	4b05                	li	s6,1
20417ff6:	5bfd                	li	s7,-1
20417ff8:	ec09                	bnez	s0,20418012 <_fwalk_reent+0x3c>
20417ffa:	50b2                	lw	ra,44(sp)
20417ffc:	5422                	lw	s0,40(sp)
20417ffe:	854a                	mv	a0,s2
20418000:	5492                	lw	s1,36(sp)
20418002:	5902                	lw	s2,32(sp)
20418004:	49f2                	lw	s3,28(sp)
20418006:	4a62                	lw	s4,24(sp)
20418008:	4ad2                	lw	s5,20(sp)
2041800a:	4b42                	lw	s6,16(sp)
2041800c:	4bb2                	lw	s7,12(sp)
2041800e:	6145                	addi	sp,sp,48
20418010:	8082                	ret
20418012:	4404                	lw	s1,8(s0)
20418014:	00442983          	lw	s3,4(s0)
20418018:	19fd                	addi	s3,s3,-1
2041801a:	0009d463          	bgez	s3,20418022 <_fwalk_reent+0x4c>
2041801e:	4000                	lw	s0,0(s0)
20418020:	bfe1                	j	20417ff8 <_fwalk_reent+0x22>
20418022:	00c4d783          	lhu	a5,12(s1)
20418026:	00fb7b63          	bleu	a5,s6,2041803c <_fwalk_reent+0x66>
2041802a:	00e49783          	lh	a5,14(s1)
2041802e:	01778763          	beq	a5,s7,2041803c <_fwalk_reent+0x66>
20418032:	85a6                	mv	a1,s1
20418034:	8552                	mv	a0,s4
20418036:	9a82                	jalr	s5
20418038:	00a96933          	or	s2,s2,a0
2041803c:	06848493          	addi	s1,s1,104
20418040:	bfe1                	j	20418018 <_fwalk_reent+0x42>

20418042 <eclear>:
20418042:	01450793          	addi	a5,a0,20
20418046:	0509                	addi	a0,a0,2
20418048:	fe051f23          	sh	zero,-2(a0)
2041804c:	fef51de3          	bne	a0,a5,20418046 <eclear+0x4>
20418050:	8082                	ret

20418052 <emov>:
20418052:	01450793          	addi	a5,a0,20
20418056:	0509                	addi	a0,a0,2
20418058:	ffe55703          	lhu	a4,-2(a0)
2041805c:	0589                	addi	a1,a1,2
2041805e:	fee59f23          	sh	a4,-2(a1)
20418062:	fea79ae3          	bne	a5,a0,20418056 <emov+0x4>
20418066:	8082                	ret

20418068 <ecleaz>:
20418068:	01a50793          	addi	a5,a0,26
2041806c:	0509                	addi	a0,a0,2
2041806e:	fe051f23          	sh	zero,-2(a0)
20418072:	fef51de3          	bne	a0,a5,2041806c <ecleaz+0x4>
20418076:	8082                	ret

20418078 <emovz>:
20418078:	01850713          	addi	a4,a0,24
2041807c:	87ae                	mv	a5,a1
2041807e:	0509                	addi	a0,a0,2
20418080:	ffe55683          	lhu	a3,-2(a0)
20418084:	0789                	addi	a5,a5,2
20418086:	fed79f23          	sh	a3,-2(a5)
2041808a:	fea71ae3          	bne	a4,a0,2041807e <emovz+0x6>
2041808e:	00059c23          	sh	zero,24(a1)
20418092:	8082                	ret

20418094 <ecmpm>:
20418094:	00450793          	addi	a5,a0,4
20418098:	0591                	addi	a1,a1,4
2041809a:	0569                	addi	a0,a0,26
2041809c:	0789                	addi	a5,a5,2
2041809e:	0589                	addi	a1,a1,2
204180a0:	ffe7d683          	lhu	a3,-2(a5)
204180a4:	ffe5d703          	lhu	a4,-2(a1)
204180a8:	00e69663          	bne	a3,a4,204180b4 <ecmpm+0x20>
204180ac:	fef518e3          	bne	a0,a5,2041809c <ecmpm+0x8>
204180b0:	4501                	li	a0,0
204180b2:	8082                	ret
204180b4:	4505                	li	a0,1
204180b6:	00d76363          	bltu	a4,a3,204180bc <ecmpm+0x28>
204180ba:	557d                	li	a0,-1
204180bc:	8082                	ret

204180be <eshdn1>:
204180be:	00450693          	addi	a3,a0,4
204180c2:	4781                	li	a5,0
204180c4:	0569                	addi	a0,a0,26
204180c6:	7661                	lui	a2,0xffff8
204180c8:	0006d703          	lhu	a4,0(a3)
204180cc:	00177593          	andi	a1,a4,1
204180d0:	c199                	beqz	a1,204180d6 <eshdn1+0x18>
204180d2:	0017e793          	ori	a5,a5,1
204180d6:	0027f593          	andi	a1,a5,2
204180da:	8305                	srli	a4,a4,0x1
204180dc:	e991                	bnez	a1,204180f0 <eshdn1+0x32>
204180de:	0786                	slli	a5,a5,0x1
204180e0:	00e69023          	sh	a4,0(a3)
204180e4:	07c2                	slli	a5,a5,0x10
204180e6:	0689                	addi	a3,a3,2
204180e8:	83c1                	srli	a5,a5,0x10
204180ea:	fcd51fe3          	bne	a0,a3,204180c8 <eshdn1+0xa>
204180ee:	8082                	ret
204180f0:	8f51                	or	a4,a4,a2
204180f2:	b7f5                	j	204180de <eshdn1+0x20>

204180f4 <eshup1>:
204180f4:	01650693          	addi	a3,a0,22
204180f8:	4701                	li	a4,0
204180fa:	0026d783          	lhu	a5,2(a3)
204180fe:	01079613          	slli	a2,a5,0x10
20418102:	8641                	srai	a2,a2,0x10
20418104:	00065463          	bgez	a2,2041810c <eshup1+0x18>
20418108:	00176713          	ori	a4,a4,1
2041810c:	0786                	slli	a5,a5,0x1
2041810e:	07c2                	slli	a5,a5,0x10
20418110:	00277613          	andi	a2,a4,2
20418114:	83c1                	srli	a5,a5,0x10
20418116:	ea11                	bnez	a2,2041812a <eshup1+0x36>
20418118:	0706                	slli	a4,a4,0x1
2041811a:	00f69123          	sh	a5,2(a3)
2041811e:	0742                	slli	a4,a4,0x10
20418120:	16f9                	addi	a3,a3,-2
20418122:	8341                	srli	a4,a4,0x10
20418124:	fcd51be3          	bne	a0,a3,204180fa <eshup1+0x6>
20418128:	8082                	ret
2041812a:	0017e793          	ori	a5,a5,1
2041812e:	b7ed                	j	20418118 <eshup1+0x24>

20418130 <eshdn8>:
20418130:	00450793          	addi	a5,a0,4
20418134:	4701                	li	a4,0
20418136:	0569                	addi	a0,a0,26
20418138:	0007d683          	lhu	a3,0(a5)
2041813c:	0789                	addi	a5,a5,2
2041813e:	0086d613          	srli	a2,a3,0x8
20418142:	8f51                	or	a4,a4,a2
20418144:	fee79f23          	sh	a4,-2(a5)
20418148:	00869713          	slli	a4,a3,0x8
2041814c:	0742                	slli	a4,a4,0x10
2041814e:	8341                	srli	a4,a4,0x10
20418150:	fef514e3          	bne	a0,a5,20418138 <eshdn8+0x8>
20418154:	8082                	ret

20418156 <eshup8>:
20418156:	01650793          	addi	a5,a0,22
2041815a:	4701                	li	a4,0
2041815c:	0027d683          	lhu	a3,2(a5)
20418160:	17f9                	addi	a5,a5,-2
20418162:	00869613          	slli	a2,a3,0x8
20418166:	8f51                	or	a4,a4,a2
20418168:	00e79223          	sh	a4,4(a5)
2041816c:	0086d713          	srli	a4,a3,0x8
20418170:	fef516e3          	bne	a0,a5,2041815c <eshup8+0x6>
20418174:	8082                	ret

20418176 <eshup6>:
20418176:	00450793          	addi	a5,a0,4
2041817a:	01850713          	addi	a4,a0,24
2041817e:	0789                	addi	a5,a5,2
20418180:	0007d683          	lhu	a3,0(a5)
20418184:	fed79f23          	sh	a3,-2(a5)
20418188:	fef71be3          	bne	a4,a5,2041817e <eshup6+0x8>
2041818c:	00051c23          	sh	zero,24(a0)
20418190:	8082                	ret

20418192 <eshdn6>:
20418192:	01850793          	addi	a5,a0,24
20418196:	01a50713          	addi	a4,a0,26
2041819a:	00450693          	addi	a3,a0,4
2041819e:	17f9                	addi	a5,a5,-2
204181a0:	0007d603          	lhu	a2,0(a5)
204181a4:	1779                	addi	a4,a4,-2
204181a6:	00c71023          	sh	a2,0(a4)
204181aa:	fef69ae3          	bne	a3,a5,2041819e <eshdn6+0xc>
204181ae:	00051223          	sh	zero,4(a0)
204181b2:	8082                	ret

204181b4 <eaddm>:
204181b4:	05e1                	addi	a1,a1,24
204181b6:	01650713          	addi	a4,a0,22
204181ba:	4681                	li	a3,0
204181bc:	00275783          	lhu	a5,2(a4)
204181c0:	0005d603          	lhu	a2,0(a1)
204181c4:	1779                	addi	a4,a4,-2
204181c6:	15f9                	addi	a1,a1,-2
204181c8:	97b2                	add	a5,a5,a2
204181ca:	97b6                	add	a5,a5,a3
204181cc:	86be                	mv	a3,a5
204181ce:	00d59123          	sh	a3,2(a1)
204181d2:	83c1                	srli	a5,a5,0x10
204181d4:	0017f693          	andi	a3,a5,1
204181d8:	fee512e3          	bne	a0,a4,204181bc <eaddm+0x8>
204181dc:	8082                	ret

204181de <esubm>:
204181de:	05e1                	addi	a1,a1,24
204181e0:	01650713          	addi	a4,a0,22
204181e4:	4681                	li	a3,0
204181e6:	0005d783          	lhu	a5,0(a1)
204181ea:	00275603          	lhu	a2,2(a4)
204181ee:	1779                	addi	a4,a4,-2
204181f0:	15f9                	addi	a1,a1,-2
204181f2:	8f91                	sub	a5,a5,a2
204181f4:	8f95                	sub	a5,a5,a3
204181f6:	86be                	mv	a3,a5
204181f8:	00d59123          	sh	a3,2(a1)
204181fc:	83c1                	srli	a5,a5,0x10
204181fe:	0017f693          	andi	a3,a5,1
20418202:	fee512e3          	bne	a0,a4,204181e6 <esubm+0x8>
20418206:	8082                	ret

20418208 <m16m>:
20418208:	1101                	addi	sp,sp,-32
2041820a:	6341                	lui	t1,0x10
2041820c:	01858893          	addi	a7,a1,24
20418210:	00012d23          	sw	zero,26(sp)
20418214:	0591                	addi	a1,a1,4
20418216:	0874                	addi	a3,sp,28
20418218:	137d                	addi	t1,t1,-1
2041821a:	0008d703          	lhu	a4,0(a7)
2041821e:	16f9                	addi	a3,a3,-2
20418220:	18f9                	addi	a7,a7,-2
20418222:	e70d                	bnez	a4,2041824c <m16m+0x44>
20418224:	fe069f23          	sh	zero,-2(a3)
20418228:	ff1599e3          	bne	a1,a7,2041821a <m16m+0x12>
2041822c:	4791                	li	a5,4
2041822e:	4769                	li	a4,26
20418230:	0048                	addi	a0,sp,4
20418232:	00f505b3          	add	a1,a0,a5
20418236:	0005d583          	lhu	a1,0(a1)
2041823a:	00f606b3          	add	a3,a2,a5
2041823e:	0789                	addi	a5,a5,2
20418240:	00b69023          	sh	a1,0(a3)
20418244:	fee796e3          	bne	a5,a4,20418230 <m16m+0x28>
20418248:	6105                	addi	sp,sp,32
2041824a:	8082                	ret
2041824c:	02a70733          	mul	a4,a4,a0
20418250:	0026d803          	lhu	a6,2(a3)
20418254:	006777b3          	and	a5,a4,t1
20418258:	97c2                	add	a5,a5,a6
2041825a:	883e                	mv	a6,a5
2041825c:	01069123          	sh	a6,2(a3)
20418260:	0107d813          	srli	a6,a5,0x10
20418264:	01075793          	srli	a5,a4,0x10
20418268:	0006d703          	lhu	a4,0(a3)
2041826c:	97ba                	add	a5,a5,a4
2041826e:	97c2                	add	a5,a5,a6
20418270:	873e                	mv	a4,a5
20418272:	83c1                	srli	a5,a5,0x10
20418274:	00e69023          	sh	a4,0(a3)
20418278:	fef69f23          	sh	a5,-2(a3)
2041827c:	b775                	j	20418228 <m16m+0x20>

2041827e <eisnan>:
2041827e:	01255783          	lhu	a5,18(a0)
20418282:	fff7c793          	not	a5,a5
20418286:	01179713          	slli	a4,a5,0x11
2041828a:	eb09                	bnez	a4,2041829c <eisnan+0x1e>
2041828c:	01250793          	addi	a5,a0,18
20418290:	0509                	addi	a0,a0,2
20418292:	ffe55703          	lhu	a4,-2(a0)
20418296:	e709                	bnez	a4,204182a0 <eisnan+0x22>
20418298:	fea79ce3          	bne	a5,a0,20418290 <eisnan+0x12>
2041829c:	4501                	li	a0,0
2041829e:	8082                	ret
204182a0:	4505                	li	a0,1
204182a2:	8082                	ret

204182a4 <eisneg>:
204182a4:	1141                	addi	sp,sp,-16
204182a6:	c422                	sw	s0,8(sp)
204182a8:	c606                	sw	ra,12(sp)
204182aa:	842a                	mv	s0,a0
204182ac:	3fc9                	jal	2041827e <eisnan>
204182ae:	e901                	bnez	a0,204182be <eisneg+0x1a>
204182b0:	01241503          	lh	a0,18(s0)
204182b4:	817d                	srli	a0,a0,0x1f
204182b6:	40b2                	lw	ra,12(sp)
204182b8:	4422                	lw	s0,8(sp)
204182ba:	0141                	addi	sp,sp,16
204182bc:	8082                	ret
204182be:	4501                	li	a0,0
204182c0:	bfdd                	j	204182b6 <eisneg+0x12>

204182c2 <emovi>:
204182c2:	01251783          	lh	a5,18(a0)
204182c6:	1141                	addi	sp,sp,-16
204182c8:	c606                	sw	ra,12(sp)
204182ca:	c422                	sw	s0,8(sp)
204182cc:	c226                	sw	s1,4(sp)
204182ce:	c04a                	sw	s2,0(sp)
204182d0:	0407d863          	bgez	a5,20418320 <emovi+0x5e>
204182d4:	57fd                	li	a5,-1
204182d6:	00f59023          	sh	a5,0(a1)
204182da:	01255703          	lhu	a4,18(a0)
204182de:	67a1                	lui	a5,0x8
204182e0:	17fd                	addi	a5,a5,-1
204182e2:	8f7d                	and	a4,a4,a5
204182e4:	00e59123          	sh	a4,2(a1)
204182e8:	01050913          	addi	s2,a0,16
204182ec:	04f71763          	bne	a4,a5,2041833a <emovi+0x78>
204182f0:	842e                	mv	s0,a1
204182f2:	84aa                	mv	s1,a0
204182f4:	3769                	jal	2041827e <eisnan>
204182f6:	c905                	beqz	a0,20418326 <emovi+0x64>
204182f8:	00640793          	addi	a5,s0,6
204182fc:	00041223          	sh	zero,4(s0)
20418300:	ffc48513          	addi	a0,s1,-4
20418304:	1979                	addi	s2,s2,-2
20418306:	00295703          	lhu	a4,2(s2)
2041830a:	0789                	addi	a5,a5,2
2041830c:	fee79f23          	sh	a4,-2(a5) # 7ffe <__stack_size+0x3ffe>
20418310:	fea91ae3          	bne	s2,a0,20418304 <emovi+0x42>
20418314:	40b2                	lw	ra,12(sp)
20418316:	4422                	lw	s0,8(sp)
20418318:	4492                	lw	s1,4(sp)
2041831a:	4902                	lw	s2,0(sp)
2041831c:	0141                	addi	sp,sp,16
2041831e:	8082                	ret
20418320:	00059023          	sh	zero,0(a1)
20418324:	bf5d                	j	204182da <emovi+0x18>
20418326:	00440793          	addi	a5,s0,4
2041832a:	01a40593          	addi	a1,s0,26
2041832e:	0789                	addi	a5,a5,2
20418330:	fe079f23          	sh	zero,-2(a5)
20418334:	feb79de3          	bne	a5,a1,2041832e <emovi+0x6c>
20418338:	bff1                	j	20418314 <emovi+0x52>
2041833a:	00658793          	addi	a5,a1,6
2041833e:	00059223          	sh	zero,4(a1)
20418342:	1579                	addi	a0,a0,-2
20418344:	1979                	addi	s2,s2,-2
20418346:	00295703          	lhu	a4,2(s2)
2041834a:	0789                	addi	a5,a5,2
2041834c:	fee79f23          	sh	a4,-2(a5)
20418350:	fea91ae3          	bne	s2,a0,20418344 <emovi+0x82>
20418354:	00059c23          	sh	zero,24(a1)
20418358:	bf75                	j	20418314 <emovi+0x52>

2041835a <ecmp>:
2041835a:	715d                	addi	sp,sp,-80
2041835c:	c2a6                	sw	s1,68(sp)
2041835e:	c0ca                	sw	s2,64(sp)
20418360:	c686                	sw	ra,76(sp)
20418362:	c4a2                	sw	s0,72(sp)
20418364:	892a                	mv	s2,a0
20418366:	84ae                	mv	s1,a1
20418368:	3f19                	jal	2041827e <eisnan>
2041836a:	e941                	bnez	a0,204183fa <ecmp+0xa0>
2041836c:	8526                	mv	a0,s1
2041836e:	3f01                	jal	2041827e <eisnan>
20418370:	842a                	mv	s0,a0
20418372:	e541                	bnez	a0,204183fa <ecmp+0xa0>
20418374:	002c                	addi	a1,sp,8
20418376:	854a                	mv	a0,s2
20418378:	37a9                	jal	204182c2 <emovi>
2041837a:	104c                	addi	a1,sp,36
2041837c:	8526                	mv	a0,s1
2041837e:	3791                	jal	204182c2 <emovi>
20418380:	00815703          	lhu	a4,8(sp)
20418384:	02415783          	lhu	a5,36(sp)
20418388:	02e78e63          	beq	a5,a4,204183c4 <ecmp+0x6a>
2041838c:	4789                	li	a5,2
2041838e:	46e1                	li	a3,24
20418390:	0028                	addi	a0,sp,8
20418392:	00f50633          	add	a2,a0,a5
20418396:	00065603          	lhu	a2,0(a2) # ffff8000 <pulp__FC+0xffff8001>
2041839a:	e20d                	bnez	a2,204183bc <ecmp+0x62>
2041839c:	104c                	addi	a1,sp,36
2041839e:	00f58633          	add	a2,a1,a5
204183a2:	00065603          	lhu	a2,0(a2)
204183a6:	ea19                	bnez	a2,204183bc <ecmp+0x62>
204183a8:	0789                	addi	a5,a5,2
204183aa:	fed793e3          	bne	a5,a3,20418390 <ecmp+0x36>
204183ae:	8522                	mv	a0,s0
204183b0:	40b6                	lw	ra,76(sp)
204183b2:	4426                	lw	s0,72(sp)
204183b4:	4496                	lw	s1,68(sp)
204183b6:	4906                	lw	s2,64(sp)
204183b8:	6161                	addi	sp,sp,80
204183ba:	8082                	ret
204183bc:	4405                	li	s0,1
204183be:	db65                	beqz	a4,204183ae <ecmp+0x54>
204183c0:	547d                	li	s0,-1
204183c2:	b7f5                	j	204183ae <ecmp+0x54>
204183c4:	4605                	li	a2,1
204183c6:	c391                	beqz	a5,204183ca <ecmp+0x70>
204183c8:	567d                	li	a2,-1
204183ca:	4781                	li	a5,0
204183cc:	45e1                	li	a1,24
204183ce:	0034                	addi	a3,sp,8
204183d0:	00f68733          	add	a4,a3,a5
204183d4:	1048                	addi	a0,sp,36
204183d6:	00075683          	lhu	a3,0(a4)
204183da:	00f50733          	add	a4,a0,a5
204183de:	00075703          	lhu	a4,0(a4)
204183e2:	00e69663          	bne	a3,a4,204183ee <ecmp+0x94>
204183e6:	0789                	addi	a5,a5,2
204183e8:	feb793e3          	bne	a5,a1,204183ce <ecmp+0x74>
204183ec:	b7c9                	j	204183ae <ecmp+0x54>
204183ee:	8432                	mv	s0,a2
204183f0:	fad76fe3          	bltu	a4,a3,204183ae <ecmp+0x54>
204183f4:	40c00433          	neg	s0,a2
204183f8:	bf5d                	j	204183ae <ecmp+0x54>
204183fa:	5479                	li	s0,-2
204183fc:	bf4d                	j	204183ae <ecmp+0x54>

204183fe <eisinf>:
204183fe:	01255783          	lhu	a5,18(a0)
20418402:	fff7c793          	not	a5,a5
20418406:	01179713          	slli	a4,a5,0x11
2041840a:	eb09                	bnez	a4,2041841c <eisinf+0x1e>
2041840c:	1141                	addi	sp,sp,-16
2041840e:	c606                	sw	ra,12(sp)
20418410:	35bd                	jal	2041827e <eisnan>
20418412:	40b2                	lw	ra,12(sp)
20418414:	00153513          	seqz	a0,a0
20418418:	0141                	addi	sp,sp,16
2041841a:	8082                	ret
2041841c:	4501                	li	a0,0
2041841e:	8082                	ret

20418420 <einfin.isra.2>:
20418420:	01250793          	addi	a5,a0,18
20418424:	0509                	addi	a0,a0,2
20418426:	fe051f23          	sh	zero,-2(a0)
2041842a:	fef51de3          	bne	a0,a5,20418424 <einfin.isra.2+0x4>
2041842e:	00055783          	lhu	a5,0(a0)
20418432:	6721                	lui	a4,0x8
20418434:	177d                	addi	a4,a4,-1
20418436:	8fd9                	or	a5,a5,a4
20418438:	00f51023          	sh	a5,0(a0)
2041843c:	8082                	ret

2041843e <eshift.part.3>:
2041843e:	1101                	addi	sp,sp,-32
20418440:	ca26                	sw	s1,20(sp)
20418442:	c64e                	sw	s3,12(sp)
20418444:	ce06                	sw	ra,28(sp)
20418446:	cc22                	sw	s0,24(sp)
20418448:	c84a                	sw	s2,16(sp)
2041844a:	c452                	sw	s4,8(sp)
2041844c:	c256                	sw	s5,4(sp)
2041844e:	89aa                	mv	s3,a0
20418450:	84ae                	mv	s1,a1
20418452:	0a05d863          	bgez	a1,20418502 <eshift.part.3+0xc4>
20418456:	40b00933          	neg	s2,a1
2041845a:	8a4a                	mv	s4,s2
2041845c:	4401                	li	s0,0
2041845e:	4abd                	li	s5,15
20418460:	034acb63          	blt	s5,s4,20418496 <eshift.part.3+0x58>
20418464:	00495913          	srli	s2,s2,0x4
20418468:	55c1                	li	a1,-16
2041846a:	02b905b3          	mul	a1,s2,a1
2041846e:	4a1d                	li	s4,7
20418470:	409584b3          	sub	s1,a1,s1
20418474:	8926                	mv	s2,s1
20418476:	032a4763          	blt	s4,s2,204184a4 <eshift.part.3+0x66>
2041847a:	0034d593          	srli	a1,s1,0x3
2041847e:	57e1                	li	a5,-8
20418480:	02f585b3          	mul	a1,a1,a5
20418484:	94ae                	add	s1,s1,a1
20418486:	e495                	bnez	s1,204184b2 <eshift.part.3+0x74>
20418488:	00803533          	snez	a0,s0
2041848c:	842a                	mv	s0,a0
2041848e:	01041513          	slli	a0,s0,0x10
20418492:	8141                	srli	a0,a0,0x10
20418494:	a8b1                	j	204184f0 <eshift.part.3+0xb2>
20418496:	0189d783          	lhu	a5,24(s3)
2041849a:	854e                	mv	a0,s3
2041849c:	1a41                	addi	s4,s4,-16
2041849e:	8c5d                	or	s0,s0,a5
204184a0:	39cd                	jal	20418192 <eshdn6>
204184a2:	bf7d                	j	20418460 <eshift.part.3+0x22>
204184a4:	0189c783          	lbu	a5,24(s3)
204184a8:	854e                	mv	a0,s3
204184aa:	1961                	addi	s2,s2,-8
204184ac:	8c5d                	or	s0,s0,a5
204184ae:	3149                	jal	20418130 <eshdn8>
204184b0:	b7d9                	j	20418476 <eshift.part.3+0x38>
204184b2:	0189d783          	lhu	a5,24(s3)
204184b6:	854e                	mv	a0,s3
204184b8:	14fd                	addi	s1,s1,-1
204184ba:	8b85                	andi	a5,a5,1
204184bc:	8c5d                	or	s0,s0,a5
204184be:	3101                	jal	204180be <eshdn1>
204184c0:	b7d9                	j	20418486 <eshift.part.3+0x48>
204184c2:	854e                	mv	a0,s3
204184c4:	394d                	jal	20418176 <eshup6>
204184c6:	1441                	addi	s0,s0,-16
204184c8:	fe894de3          	blt	s2,s0,204184c2 <eshift.part.3+0x84>
204184cc:	0044d593          	srli	a1,s1,0x4
204184d0:	57c1                	li	a5,-16
204184d2:	02f585b3          	mul	a1,a1,a5
204184d6:	491d                	li	s2,7
204184d8:	94ae                	add	s1,s1,a1
204184da:	8426                	mv	s0,s1
204184dc:	02894663          	blt	s2,s0,20418508 <eshift.part.3+0xca>
204184e0:	0034d593          	srli	a1,s1,0x3
204184e4:	57e1                	li	a5,-8
204184e6:	02f585b3          	mul	a1,a1,a5
204184ea:	94ae                	add	s1,s1,a1
204184ec:	e095                	bnez	s1,20418510 <eshift.part.3+0xd2>
204184ee:	4501                	li	a0,0
204184f0:	40f2                	lw	ra,28(sp)
204184f2:	4462                	lw	s0,24(sp)
204184f4:	44d2                	lw	s1,20(sp)
204184f6:	4942                	lw	s2,16(sp)
204184f8:	49b2                	lw	s3,12(sp)
204184fa:	4a22                	lw	s4,8(sp)
204184fc:	4a92                	lw	s5,4(sp)
204184fe:	6105                	addi	sp,sp,32
20418500:	8082                	ret
20418502:	842e                	mv	s0,a1
20418504:	493d                	li	s2,15
20418506:	b7c9                	j	204184c8 <eshift.part.3+0x8a>
20418508:	854e                	mv	a0,s3
2041850a:	31b1                	jal	20418156 <eshup8>
2041850c:	1461                	addi	s0,s0,-8
2041850e:	b7f9                	j	204184dc <eshift.part.3+0x9e>
20418510:	854e                	mv	a0,s3
20418512:	36cd                	jal	204180f4 <eshup1>
20418514:	14fd                	addi	s1,s1,-1
20418516:	bfd9                	j	204184ec <eshift.part.3+0xae>

20418518 <enormlz>:
20418518:	00455783          	lhu	a5,4(a0)
2041851c:	1141                	addi	sp,sp,-16
2041851e:	c226                	sw	s1,4(sp)
20418520:	c606                	sw	ra,12(sp)
20418522:	c422                	sw	s0,8(sp)
20418524:	c04a                	sw	s2,0(sp)
20418526:	84aa                	mv	s1,a0
20418528:	efa1                	bnez	a5,20418580 <enormlz+0x68>
2041852a:	00651783          	lh	a5,6(a0)
2041852e:	4401                	li	s0,0
20418530:	0a000913          	li	s2,160
20418534:	0007de63          	bgez	a5,20418550 <enormlz+0x38>
20418538:	8522                	mv	a0,s0
2041853a:	40b2                	lw	ra,12(sp)
2041853c:	4422                	lw	s0,8(sp)
2041853e:	4492                	lw	s1,4(sp)
20418540:	4902                	lw	s2,0(sp)
20418542:	0141                	addi	sp,sp,16
20418544:	8082                	ret
20418546:	8526                	mv	a0,s1
20418548:	0441                	addi	s0,s0,16
2041854a:	3135                	jal	20418176 <eshup6>
2041854c:	ff2406e3          	beq	s0,s2,20418538 <enormlz+0x20>
20418550:	0064d783          	lhu	a5,6(s1)
20418554:	dbed                	beqz	a5,20418546 <enormlz+0x2e>
20418556:	0064d783          	lhu	a5,6(s1)
2041855a:	f007f793          	andi	a5,a5,-256
2041855e:	cf89                	beqz	a5,20418578 <enormlz+0x60>
20418560:	0a000913          	li	s2,160
20418564:	00649783          	lh	a5,6(s1)
20418568:	fc07c8e3          	bltz	a5,20418538 <enormlz+0x20>
2041856c:	8526                	mv	a0,s1
2041856e:	0405                	addi	s0,s0,1
20418570:	3651                	jal	204180f4 <eshup1>
20418572:	fe8959e3          	ble	s0,s2,20418564 <enormlz+0x4c>
20418576:	b7c9                	j	20418538 <enormlz+0x20>
20418578:	8526                	mv	a0,s1
2041857a:	3ef1                	jal	20418156 <eshup8>
2041857c:	0421                	addi	s0,s0,8
2041857e:	bfe1                	j	20418556 <enormlz+0x3e>
20418580:	f007f793          	andi	a5,a5,-256
20418584:	4401                	li	s0,0
20418586:	c399                	beqz	a5,2041858c <enormlz+0x74>
20418588:	3665                	jal	20418130 <eshdn8>
2041858a:	5461                	li	s0,-8
2041858c:	f7000913          	li	s2,-144
20418590:	a031                	j	2041859c <enormlz+0x84>
20418592:	8526                	mv	a0,s1
20418594:	147d                	addi	s0,s0,-1
20418596:	3625                	jal	204180be <eshdn1>
20418598:	fb2440e3          	blt	s0,s2,20418538 <enormlz+0x20>
2041859c:	0044d783          	lhu	a5,4(s1)
204185a0:	fbed                	bnez	a5,20418592 <enormlz+0x7a>
204185a2:	bf59                	j	20418538 <enormlz+0x20>

204185a4 <enan.constprop.12>:
204185a4:	01050793          	addi	a5,a0,16
204185a8:	0509                	addi	a0,a0,2
204185aa:	fe051f23          	sh	zero,-2(a0)
204185ae:	fef51de3          	bne	a0,a5,204185a8 <enan.constprop.12+0x4>
204185b2:	7fffc7b7          	lui	a5,0x7fffc
204185b6:	c11c                	sw	a5,0(a0)
204185b8:	8082                	ret

204185ba <emovo.isra.6>:
204185ba:	872a                	mv	a4,a0
204185bc:	00075683          	lhu	a3,0(a4) # 8000 <__stack_size+0x4000>
204185c0:	852e                	mv	a0,a1
204185c2:	00275783          	lhu	a5,2(a4)
204185c6:	c299                	beqz	a3,204185cc <emovo.isra.6+0x12>
204185c8:	76e1                	lui	a3,0xffff8
204185ca:	8fd5                	or	a5,a5,a3
204185cc:	00f51923          	sh	a5,18(a0)
204185d0:	00275603          	lhu	a2,2(a4)
204185d4:	66a1                	lui	a3,0x8
204185d6:	16fd                	addi	a3,a3,-1
204185d8:	00670793          	addi	a5,a4,6
204185dc:	00d61a63          	bne	a2,a3,204185f0 <emovo.isra.6+0x36>
204185e0:	0769                	addi	a4,a4,26
204185e2:	0007d683          	lhu	a3,0(a5) # 7fffc000 <__fini_array_end+0x5fbd9744>
204185e6:	e285                	bnez	a3,20418606 <emovo.isra.6+0x4c>
204185e8:	0789                	addi	a5,a5,2
204185ea:	fee79ce3          	bne	a5,a4,204185e2 <emovo.isra.6+0x28>
204185ee:	bd0d                	j	20418420 <einfin.isra.2>
204185f0:	0541                	addi	a0,a0,16
204185f2:	0761                	addi	a4,a4,24
204185f4:	0789                	addi	a5,a5,2
204185f6:	ffe7d683          	lhu	a3,-2(a5)
204185fa:	1579                	addi	a0,a0,-2
204185fc:	00d51123          	sh	a3,2(a0)
20418600:	fee79ae3          	bne	a5,a4,204185f4 <emovo.isra.6+0x3a>
20418604:	8082                	ret
20418606:	bf79                	j	204185a4 <enan.constprop.12>

20418608 <e113toe.isra.8>:
20418608:	7179                	addi	sp,sp,-48
2041860a:	d226                	sw	s1,36(sp)
2041860c:	84aa                	mv	s1,a0
2041860e:	0048                	addi	a0,sp,4
20418610:	d422                	sw	s0,40(sp)
20418612:	d606                	sw	ra,44(sp)
20418614:	842e                	mv	s0,a1
20418616:	3c89                	jal	20418068 <ecleaz>
20418618:	00e4d703          	lhu	a4,14(s1)
2041861c:	01071793          	slli	a5,a4,0x10
20418620:	87c1                	srai	a5,a5,0x10
20418622:	0207c663          	bltz	a5,2041864e <e113toe.isra.8+0x46>
20418626:	00011223          	sh	zero,4(sp)
2041862a:	66a1                	lui	a3,0x8
2041862c:	16fd                	addi	a3,a3,-1
2041862e:	8f75                	and	a4,a4,a3
20418630:	00e48793          	addi	a5,s1,14
20418634:	04d71663          	bne	a4,a3,20418680 <e113toe.isra.8+0x78>
20418638:	8726                	mv	a4,s1
2041863a:	00075683          	lhu	a3,0(a4)
2041863e:	ce81                	beqz	a3,20418656 <e113toe.isra.8+0x4e>
20418640:	8522                	mv	a0,s0
20418642:	378d                	jal	204185a4 <enan.constprop.12>
20418644:	50b2                	lw	ra,44(sp)
20418646:	5422                	lw	s0,40(sp)
20418648:	5492                	lw	s1,36(sp)
2041864a:	6145                	addi	sp,sp,48
2041864c:	8082                	ret
2041864e:	57fd                	li	a5,-1
20418650:	00f11223          	sh	a5,4(sp)
20418654:	bfd9                	j	2041862a <e113toe.isra.8+0x22>
20418656:	0709                	addi	a4,a4,2
20418658:	fee791e3          	bne	a5,a4,2041863a <e113toe.isra.8+0x32>
2041865c:	8522                	mv	a0,s0
2041865e:	32d5                	jal	20418042 <eclear>
20418660:	8522                	mv	a0,s0
20418662:	3b7d                	jal	20418420 <einfin.isra.2>
20418664:	00e49783          	lh	a5,14(s1)
20418668:	fc07dee3          	bgez	a5,20418644 <e113toe.isra.8+0x3c>
2041866c:	8522                	mv	a0,s0
2041866e:	3901                	jal	2041827e <eisnan>
20418670:	f971                	bnez	a0,20418644 <e113toe.isra.8+0x3c>
20418672:	01245783          	lhu	a5,18(s0)
20418676:	7761                	lui	a4,0xffff8
20418678:	8fb9                	xor	a5,a5,a4
2041867a:	00f41923          	sh	a5,18(s0)
2041867e:	b7d9                	j	20418644 <e113toe.isra.8+0x3c>
20418680:	00e11323          	sh	a4,6(sp)
20418684:	0054                	addi	a3,sp,4
20418686:	17f9                	addi	a5,a5,-2
20418688:	0007d603          	lhu	a2,0(a5)
2041868c:	0689                	addi	a3,a3,2
2041868e:	00c69223          	sh	a2,4(a3) # 8004 <__stack_size+0x4004>
20418692:	fef49ae3          	bne	s1,a5,20418686 <e113toe.isra.8+0x7e>
20418696:	e719                	bnez	a4,204186a4 <e113toe.isra.8+0x9c>
20418698:	00011423          	sh	zero,8(sp)
2041869c:	85a2                	mv	a1,s0
2041869e:	0048                	addi	a0,sp,4
204186a0:	3f29                	jal	204185ba <emovo.isra.6>
204186a2:	b74d                	j	20418644 <e113toe.isra.8+0x3c>
204186a4:	4785                	li	a5,1
204186a6:	55fd                	li	a1,-1
204186a8:	0048                	addi	a0,sp,4
204186aa:	00f11423          	sh	a5,8(sp)
204186ae:	3b41                	jal	2041843e <eshift.part.3>
204186b0:	b7f5                	j	2041869c <e113toe.isra.8+0x94>

204186b2 <emdnorm>:
204186b2:	1101                	addi	sp,sp,-32
204186b4:	cc22                	sw	s0,24(sp)
204186b6:	ca26                	sw	s1,20(sp)
204186b8:	c84a                	sw	s2,16(sp)
204186ba:	c64e                	sw	s3,12(sp)
204186bc:	c452                	sw	s4,8(sp)
204186be:	c256                	sw	s5,4(sp)
204186c0:	8936                	mv	s2,a3
204186c2:	843e                	mv	s0,a5
204186c4:	ce06                	sw	ra,28(sp)
204186c6:	84aa                	mv	s1,a0
204186c8:	89ae                	mv	s3,a1
204186ca:	8a32                	mv	s4,a2
204186cc:	8aba                	mv	s5,a4
204186ce:	35a9                	jal	20418518 <enormlz>
204186d0:	09000793          	li	a5,144
204186d4:	40a90933          	sub	s2,s2,a0
204186d8:	02a7d763          	ble	a0,a5,20418706 <emdnorm+0x54>
204186dc:	67a1                	lui	a5,0x8
204186de:	17f9                	addi	a5,a5,-2
204186e0:	2127c163          	blt	a5,s2,204188e2 <emdnorm+0x230>
204186e4:	00248793          	addi	a5,s1,2
204186e8:	04e9                	addi	s1,s1,26
204186ea:	0789                	addi	a5,a5,2
204186ec:	fe079f23          	sh	zero,-2(a5) # 7ffe <__stack_size+0x3ffe>
204186f0:	fe979de3          	bne	a5,s1,204186ea <emdnorm+0x38>
204186f4:	40f2                	lw	ra,28(sp)
204186f6:	4462                	lw	s0,24(sp)
204186f8:	44d2                	lw	s1,20(sp)
204186fa:	4942                	lw	s2,16(sp)
204186fc:	49b2                	lw	s3,12(sp)
204186fe:	4a22                	lw	s4,8(sp)
20418700:	4a92                	lw	s5,4(sp)
20418702:	6105                	addi	sp,sp,32
20418704:	8082                	ret
20418706:	00095b63          	bgez	s2,2041871c <emdnorm+0x6a>
2041870a:	f7000793          	li	a5,-144
2041870e:	0ef94363          	blt	s2,a5,204187f4 <emdnorm+0x142>
20418712:	85ca                	mv	a1,s2
20418714:	8526                	mv	a0,s1
20418716:	3325                	jal	2041843e <eshift.part.3>
20418718:	0e051763          	bnez	a0,20418806 <emdnorm+0x154>
2041871c:	180a8763          	beqz	s5,204188aa <emdnorm+0x1f8>
20418720:	4058                	lw	a4,4(s0)
20418722:	401c                	lw	a5,0(s0)
20418724:	04f70763          	beq	a4,a5,20418772 <emdnorm+0xc0>
20418728:	01a40513          	addi	a0,s0,26
2041872c:	3a35                	jal	20418068 <ecleaz>
2041872e:	405c                	lw	a5,4(s0)
20418730:	03800713          	li	a4,56
20418734:	10e78963          	beq	a5,a4,20418846 <emdnorm+0x194>
20418738:	0cf74963          	blt	a4,a5,2041880a <emdnorm+0x158>
2041873c:	4761                	li	a4,24
2041873e:	12e78963          	beq	a5,a4,20418870 <emdnorm+0x1be>
20418742:	03500713          	li	a4,53
20418746:	10e78a63          	beq	a5,a4,2041885a <emdnorm+0x1a8>
2041874a:	4731                	li	a4,12
2041874c:	c418                	sw	a4,8(s0)
2041874e:	80010737          	lui	a4,0x80010
20418752:	177d                	addi	a4,a4,-1
20418754:	c858                	sw	a4,20(s0)
20418756:	4705                	li	a4,1
20418758:	00e41c23          	sh	a4,24(s0)
2041875c:	472d                	li	a4,11
2041875e:	c458                	sw	a4,12(s0)
20418760:	4458                	lw	a4,12(s0)
20418762:	01845683          	lhu	a3,24(s0)
20418766:	0721                	addi	a4,a4,8
20418768:	0706                	slli	a4,a4,0x1
2041876a:	9722                	add	a4,a4,s0
2041876c:	00d71523          	sh	a3,10(a4) # 8001000a <pulp__FC+0x8001000b>
20418770:	c01c                	sw	a5,0(s0)
20418772:	01204e63          	bgtz	s2,2041878e <emdnorm+0xdc>
20418776:	4058                	lw	a4,4(s0)
20418778:	09000793          	li	a5,144
2041877c:	00f70963          	beq	a4,a5,2041878e <emdnorm+0xdc>
20418780:	0184d783          	lhu	a5,24(s1)
20418784:	8526                	mv	a0,s1
20418786:	8b85                	andi	a5,a5,1
20418788:	00f9e9b3          	or	s3,s3,a5
2041878c:	3a0d                	jal	204180be <eshdn1>
2041878e:	4414                	lw	a3,8(s0)
20418790:	01445603          	lhu	a2,20(s0)
20418794:	404c                	lw	a1,4(s0)
20418796:	00169713          	slli	a4,a3,0x1
2041879a:	9726                	add	a4,a4,s1
2041879c:	00075783          	lhu	a5,0(a4)
204187a0:	8ff1                	and	a5,a5,a2
204187a2:	08f00613          	li	a2,143
204187a6:	00b64763          	blt	a2,a1,204187b4 <emdnorm+0x102>
204187aa:	0685                	addi	a3,a3,1
204187ac:	863a                	mv	a2,a4
204187ae:	45b1                	li	a1,12
204187b0:	0cd5d263          	ble	a3,a1,20418874 <emdnorm+0x1c2>
204187b4:	01445683          	lhu	a3,20(s0)
204187b8:	00075603          	lhu	a2,0(a4)
204187bc:	fff6c693          	not	a3,a3
204187c0:	8ef1                	and	a3,a3,a2
204187c2:	00d71023          	sh	a3,0(a4)
204187c6:	01645703          	lhu	a4,22(s0)
204187ca:	00f776b3          	and	a3,a4,a5
204187ce:	cedd                	beqz	a3,2041888c <emdnorm+0x1da>
204187d0:	00f71d63          	bne	a4,a5,204187ea <emdnorm+0x138>
204187d4:	0a099a63          	bnez	s3,20418888 <emdnorm+0x1d6>
204187d8:	445c                	lw	a5,12(s0)
204187da:	01845703          	lhu	a4,24(s0)
204187de:	0786                	slli	a5,a5,0x1
204187e0:	97a6                	add	a5,a5,s1
204187e2:	0007d783          	lhu	a5,0(a5)
204187e6:	8ff9                	and	a5,a5,a4
204187e8:	c3d5                	beqz	a5,2041888c <emdnorm+0x1da>
204187ea:	85a6                	mv	a1,s1
204187ec:	01a40513          	addi	a0,s0,26
204187f0:	32d1                	jal	204181b4 <eaddm>
204187f2:	a869                	j	2041888c <emdnorm+0x1da>
204187f4:	00248793          	addi	a5,s1,2
204187f8:	04e9                	addi	s1,s1,26
204187fa:	0789                	addi	a5,a5,2
204187fc:	fe079f23          	sh	zero,-2(a5)
20418800:	fe979de3          	bne	a5,s1,204187fa <emdnorm+0x148>
20418804:	bdc5                	j	204186f4 <emdnorm+0x42>
20418806:	4985                	li	s3,1
20418808:	bf11                	j	2041871c <emdnorm+0x6a>
2041880a:	04000713          	li	a4,64
2041880e:	02e78163          	beq	a5,a4,20418830 <emdnorm+0x17e>
20418812:	07100713          	li	a4,113
20418816:	f2e79ae3          	bne	a5,a4,2041874a <emdnorm+0x98>
2041881a:	40008737          	lui	a4,0x40008
2041881e:	177d                	addi	a4,a4,-1
20418820:	46a9                	li	a3,10
20418822:	c858                	sw	a4,20(s0)
20418824:	c414                	sw	a3,8(s0)
20418826:	7761                	lui	a4,0xffff8
20418828:	00e41c23          	sh	a4,24(s0)
2041882c:	c454                	sw	a3,12(s0)
2041882e:	bf0d                	j	20418760 <emdnorm+0xae>
20418830:	471d                	li	a4,7
20418832:	c418                	sw	a4,8(s0)
20418834:	80010737          	lui	a4,0x80010
20418838:	177d                	addi	a4,a4,-1
2041883a:	c858                	sw	a4,20(s0)
2041883c:	4705                	li	a4,1
2041883e:	00e41c23          	sh	a4,24(s0)
20418842:	4719                	li	a4,6
20418844:	bf29                	j	2041875e <emdnorm+0xac>
20418846:	4699                	li	a3,6
20418848:	00800737          	lui	a4,0x800
2041884c:	0ff70713          	addi	a4,a4,255 # 8000ff <__stack_size+0x7fc0ff>
20418850:	c858                	sw	a4,20(s0)
20418852:	c414                	sw	a3,8(s0)
20418854:	10000713          	li	a4,256
20418858:	bfc1                	j	20418828 <emdnorm+0x176>
2041885a:	04000737          	lui	a4,0x4000
2041885e:	7ff70713          	addi	a4,a4,2047 # 40007ff <__stack_size+0x3ffc7ff>
20418862:	4699                	li	a3,6
20418864:	c858                	sw	a4,20(s0)
20418866:	6705                	lui	a4,0x1
20418868:	c414                	sw	a3,8(s0)
2041886a:	80070713          	addi	a4,a4,-2048 # 800 <__stack_size-0x3800>
2041886e:	bf6d                	j	20418828 <emdnorm+0x176>
20418870:	4691                	li	a3,4
20418872:	bfd9                	j	20418848 <emdnorm+0x196>
20418874:	00265503          	lhu	a0,2(a2)
20418878:	c119                	beqz	a0,2041887e <emdnorm+0x1cc>
2041887a:	0017e793          	ori	a5,a5,1
2041887e:	00061123          	sh	zero,2(a2)
20418882:	0685                	addi	a3,a3,1
20418884:	0609                	addi	a2,a2,2
20418886:	b72d                	j	204187b0 <emdnorm+0xfe>
20418888:	f60a01e3          	beqz	s4,204187ea <emdnorm+0x138>
2041888c:	01204963          	bgtz	s2,2041889e <emdnorm+0x1ec>
20418890:	4058                	lw	a4,4(s0)
20418892:	09000793          	li	a5,144
20418896:	00f70463          	beq	a4,a5,2041889e <emdnorm+0x1ec>
2041889a:	8526                	mv	a0,s1
2041889c:	38a1                	jal	204180f4 <eshup1>
2041889e:	0044d783          	lhu	a5,4(s1)
204188a2:	c781                	beqz	a5,204188aa <emdnorm+0x1f8>
204188a4:	8526                	mv	a0,s1
204188a6:	3821                	jal	204180be <eshdn1>
204188a8:	0905                	addi	s2,s2,1
204188aa:	67a1                	lui	a5,0x8
204188ac:	00049c23          	sh	zero,24(s1)
204188b0:	17f9                	addi	a5,a5,-2
204188b2:	0327d063          	ble	s2,a5,204188d2 <emdnorm+0x220>
204188b6:	77e1                	lui	a5,0xffff8
204188b8:	fff7c793          	not	a5,a5
204188bc:	00f49123          	sh	a5,2(s1)
204188c0:	00448793          	addi	a5,s1,4
204188c4:	04e1                	addi	s1,s1,24
204188c6:	00079023          	sh	zero,0(a5) # ffff8000 <pulp__FC+0xffff8001>
204188ca:	0789                	addi	a5,a5,2
204188cc:	fef49de3          	bne	s1,a5,204188c6 <emdnorm+0x214>
204188d0:	b515                	j	204186f4 <emdnorm+0x42>
204188d2:	00095563          	bgez	s2,204188dc <emdnorm+0x22a>
204188d6:	00049123          	sh	zero,2(s1)
204188da:	bd29                	j	204186f4 <emdnorm+0x42>
204188dc:	01249123          	sh	s2,2(s1)
204188e0:	bd11                	j	204186f4 <emdnorm+0x42>
204188e2:	e20a9fe3          	bnez	s5,20418720 <emdnorm+0x6e>
204188e6:	00049c23          	sh	zero,24(s1)
204188ea:	b7f1                	j	204188b6 <emdnorm+0x204>

204188ec <eiremain>:
204188ec:	1101                	addi	sp,sp,-32
204188ee:	c452                	sw	s4,8(sp)
204188f0:	00255a03          	lhu	s4,2(a0)
204188f4:	cc22                	sw	s0,24(sp)
204188f6:	842e                	mv	s0,a1
204188f8:	ce06                	sw	ra,28(sp)
204188fa:	ca26                	sw	s1,20(sp)
204188fc:	c84a                	sw	s2,16(sp)
204188fe:	c256                	sw	s5,4(sp)
20418900:	c05a                	sw	s6,0(sp)
20418902:	8932                	mv	s2,a2
20418904:	03460b13          	addi	s6,a2,52
20418908:	c64e                	sw	s3,12(sp)
2041890a:	8aaa                	mv	s5,a0
2041890c:	3131                	jal	20418518 <enormlz>
2041890e:	00245483          	lhu	s1,2(s0)
20418912:	40aa0a33          	sub	s4,s4,a0
20418916:	8522                	mv	a0,s0
20418918:	3101                	jal	20418518 <enormlz>
2041891a:	8c89                	sub	s1,s1,a0
2041891c:	855a                	mv	a0,s6
2041891e:	f4aff0ef          	jal	ra,20418068 <ecleaz>
20418922:	0344d263          	ble	s4,s1,20418946 <eiremain+0x5a>
20418926:	8522                	mv	a0,s0
20418928:	4462                	lw	s0,24(sp)
2041892a:	40f2                	lw	ra,28(sp)
2041892c:	49b2                	lw	s3,12(sp)
2041892e:	4a22                	lw	s4,8(sp)
20418930:	4a92                	lw	s5,4(sp)
20418932:	4b02                	lw	s6,0(sp)
20418934:	87ca                	mv	a5,s2
20418936:	86a6                	mv	a3,s1
20418938:	4942                	lw	s2,16(sp)
2041893a:	44d2                	lw	s1,20(sp)
2041893c:	4701                	li	a4,0
2041893e:	4601                	li	a2,0
20418940:	4581                	li	a1,0
20418942:	6105                	addi	sp,sp,32
20418944:	b3bd                	j	204186b2 <emdnorm>
20418946:	85a2                	mv	a1,s0
20418948:	8556                	mv	a0,s5
2041894a:	f4aff0ef          	jal	ra,20418094 <ecmpm>
2041894e:	4981                	li	s3,0
20418950:	00a04663          	bgtz	a0,2041895c <eiremain+0x70>
20418954:	85a2                	mv	a1,s0
20418956:	8556                	mv	a0,s5
20418958:	3059                	jal	204181de <esubm>
2041895a:	4985                	li	s3,1
2041895c:	855a                	mv	a0,s6
2041895e:	f96ff0ef          	jal	ra,204180f4 <eshup1>
20418962:	04c95783          	lhu	a5,76(s2)
20418966:	8522                	mv	a0,s0
20418968:	14fd                	addi	s1,s1,-1
2041896a:	00f9e9b3          	or	s3,s3,a5
2041896e:	05391623          	sh	s3,76(s2)
20418972:	f82ff0ef          	jal	ra,204180f4 <eshup1>
20418976:	b775                	j	20418922 <eiremain+0x36>

20418978 <emul>:
20418978:	7175                	addi	sp,sp,-144
2041897a:	c522                	sw	s0,136(sp)
2041897c:	c326                	sw	s1,132(sp)
2041897e:	c14a                	sw	s2,128(sp)
20418980:	dece                	sw	s3,124(sp)
20418982:	c706                	sw	ra,140(sp)
20418984:	dcd2                	sw	s4,120(sp)
20418986:	dad6                	sw	s5,116(sp)
20418988:	d8da                	sw	s6,112(sp)
2041898a:	d6de                	sw	s7,108(sp)
2041898c:	d4e2                	sw	s8,104(sp)
2041898e:	d2e6                	sw	s9,100(sp)
20418990:	84aa                	mv	s1,a0
20418992:	842e                	mv	s0,a1
20418994:	8932                	mv	s2,a2
20418996:	89b6                	mv	s3,a3
20418998:	30dd                	jal	2041827e <eisnan>
2041899a:	c115                	beqz	a0,204189be <emul+0x46>
2041899c:	85ca                	mv	a1,s2
2041899e:	8526                	mv	a0,s1
204189a0:	eb2ff0ef          	jal	ra,20418052 <emov>
204189a4:	40ba                	lw	ra,140(sp)
204189a6:	442a                	lw	s0,136(sp)
204189a8:	449a                	lw	s1,132(sp)
204189aa:	490a                	lw	s2,128(sp)
204189ac:	59f6                	lw	s3,124(sp)
204189ae:	5a66                	lw	s4,120(sp)
204189b0:	5ad6                	lw	s5,116(sp)
204189b2:	5b46                	lw	s6,112(sp)
204189b4:	5bb6                	lw	s7,108(sp)
204189b6:	5c26                	lw	s8,104(sp)
204189b8:	5c96                	lw	s9,100(sp)
204189ba:	6149                	addi	sp,sp,144
204189bc:	8082                	ret
204189be:	8522                	mv	a0,s0
204189c0:	387d                	jal	2041827e <eisnan>
204189c2:	c501                	beqz	a0,204189ca <emul+0x52>
204189c4:	85ca                	mv	a1,s2
204189c6:	8522                	mv	a0,s0
204189c8:	bfe1                	j	204189a0 <emul+0x28>
204189ca:	8526                	mv	a0,s1
204189cc:	3c0d                	jal	204183fe <eisinf>
204189ce:	ed15                	bnez	a0,20418a0a <emul+0x92>
204189d0:	8522                	mv	a0,s0
204189d2:	3435                	jal	204183fe <eisinf>
204189d4:	c901                	beqz	a0,204189e4 <emul+0x6c>
204189d6:	204225b7          	lui	a1,0x20422
204189da:	15858593          	addi	a1,a1,344 # 20422158 <ezero>
204189de:	8526                	mv	a0,s1
204189e0:	3aad                	jal	2041835a <ecmp>
204189e2:	c91d                	beqz	a0,20418a18 <emul+0xa0>
204189e4:	8526                	mv	a0,s1
204189e6:	3c21                	jal	204183fe <eisinf>
204189e8:	e501                	bnez	a0,204189f0 <emul+0x78>
204189ea:	8522                	mv	a0,s0
204189ec:	3c09                	jal	204183fe <eisinf>
204189ee:	c91d                	beqz	a0,20418a24 <emul+0xac>
204189f0:	8526                	mv	a0,s1
204189f2:	384d                	jal	204182a4 <eisneg>
204189f4:	84aa                	mv	s1,a0
204189f6:	8522                	mv	a0,s0
204189f8:	3075                	jal	204182a4 <eisneg>
204189fa:	02a48263          	beq	s1,a0,20418a1e <emul+0xa6>
204189fe:	77e1                	lui	a5,0xffff8
20418a00:	00f91923          	sh	a5,18(s2)
20418a04:	854a                	mv	a0,s2
20418a06:	3c29                	jal	20418420 <einfin.isra.2>
20418a08:	bf71                	j	204189a4 <emul+0x2c>
20418a0a:	204225b7          	lui	a1,0x20422
20418a0e:	15858593          	addi	a1,a1,344 # 20422158 <ezero>
20418a12:	8522                	mv	a0,s0
20418a14:	3299                	jal	2041835a <ecmp>
20418a16:	fd4d                	bnez	a0,204189d0 <emul+0x58>
20418a18:	854a                	mv	a0,s2
20418a1a:	3669                	jal	204185a4 <enan.constprop.12>
20418a1c:	b761                	j	204189a4 <emul+0x2c>
20418a1e:	00091923          	sh	zero,18(s2)
20418a22:	b7cd                	j	20418a04 <emul+0x8c>
20418a24:	8526                	mv	a0,s1
20418a26:	006c                	addi	a1,sp,12
20418a28:	3869                	jal	204182c2 <emovi>
20418a2a:	8522                	mv	a0,s0
20418a2c:	102c                	addi	a1,sp,40
20418a2e:	3851                	jal	204182c2 <emovi>
20418a30:	00e15403          	lhu	s0,14(sp)
20418a34:	02a15483          	lhu	s1,42(sp)
20418a38:	ec09                	bnez	s0,20418a52 <emul+0xda>
20418a3a:	4781                	li	a5,0
20418a3c:	4759                	li	a4,22
20418a3e:	0070                	addi	a2,sp,12
20418a40:	00f606b3          	add	a3,a2,a5
20418a44:	0026d683          	lhu	a3,2(a3)
20418a48:	c2f9                	beqz	a3,20418b0e <emul+0x196>
20418a4a:	8532                	mv	a0,a2
20418a4c:	34f1                	jal	20418518 <enormlz>
20418a4e:	40a00433          	neg	s0,a0
20418a52:	02a15783          	lhu	a5,42(sp)
20418a56:	8c26                	mv	s8,s1
20418a58:	ef81                	bnez	a5,20418a70 <emul+0xf8>
20418a5a:	4759                	li	a4,22
20418a5c:	1030                	addi	a2,sp,40
20418a5e:	00f606b3          	add	a3,a2,a5
20418a62:	0026d683          	lhu	a3,2(a3)
20418a66:	cadd                	beqz	a3,20418b1c <emul+0x1a4>
20418a68:	8532                	mv	a0,a2
20418a6a:	347d                	jal	20418518 <enormlz>
20418a6c:	40a48c33          	sub	s8,s1,a0
20418a70:	02815783          	lhu	a5,40(sp)
20418a74:	03498b93          	addi	s7,s3,52
20418a78:	03898493          	addi	s1,s3,56
20418a7c:	02f99a23          	sh	a5,52(s3)
20418a80:	02a15783          	lhu	a5,42(sp)
20418a84:	8a5e                	mv	s4,s7
20418a86:	02f99b23          	sh	a5,54(s3)
20418a8a:	04e98793          	addi	a5,s3,78
20418a8e:	00049023          	sh	zero,0(s1)
20418a92:	0489                	addi	s1,s1,2
20418a94:	fe979de3          	bne	a5,s1,20418a8e <emul+0x116>
20418a98:	4a81                	li	s5,0
20418a9a:	4b01                	li	s6,0
20418a9c:	5cb1                	li	s9,-20
20418a9e:	0078                	addi	a4,sp,12
20418aa0:	015707b3          	add	a5,a4,s5
20418aa4:	0187d503          	lhu	a0,24(a5) # ffff8018 <pulp__FC+0xffff8019>
20418aa8:	c909                	beqz	a0,20418aba <emul+0x142>
20418aaa:	102c                	addi	a1,sp,40
20418aac:	00d0                	addi	a2,sp,68
20418aae:	f5aff0ef          	jal	ra,20418208 <m16m>
20418ab2:	85de                	mv	a1,s7
20418ab4:	00c8                	addi	a0,sp,68
20418ab6:	efeff0ef          	jal	ra,204181b4 <eaddm>
20418aba:	04c9d783          	lhu	a5,76(s3)
20418abe:	855e                	mv	a0,s7
20418ac0:	1af9                	addi	s5,s5,-2
20418ac2:	00fb6b33          	or	s6,s6,a5
20418ac6:	eccff0ef          	jal	ra,20418192 <eshdn6>
20418aca:	fd9a9ae3          	bne	s5,s9,20418a9e <emul+0x126>
20418ace:	103c                	addi	a5,sp,40
20418ad0:	000a5703          	lhu	a4,0(s4)
20418ad4:	0a09                	addi	s4,s4,2
20418ad6:	0789                	addi	a5,a5,2
20418ad8:	fee79f23          	sh	a4,-2(a5)
20418adc:	fe9a1ae3          	bne	s4,s1,20418ad0 <emul+0x158>
20418ae0:	76f1                	lui	a3,0xffffc
20418ae2:	9462                	add	s0,s0,s8
20418ae4:	0689                	addi	a3,a3,2
20418ae6:	87ce                	mv	a5,s3
20418ae8:	04000713          	li	a4,64
20418aec:	96a2                	add	a3,a3,s0
20418aee:	4601                	li	a2,0
20418af0:	85da                	mv	a1,s6
20418af2:	1028                	addi	a0,sp,40
20418af4:	3e7d                	jal	204186b2 <emdnorm>
20418af6:	00c15703          	lhu	a4,12(sp)
20418afa:	02815783          	lhu	a5,40(sp)
20418afe:	02f71363          	bne	a4,a5,20418b24 <emul+0x1ac>
20418b02:	02011423          	sh	zero,40(sp)
20418b06:	85ca                	mv	a1,s2
20418b08:	1028                	addi	a0,sp,40
20418b0a:	3c45                	jal	204185ba <emovo.isra.6>
20418b0c:	bd61                	j	204189a4 <emul+0x2c>
20418b0e:	0789                	addi	a5,a5,2
20418b10:	f2e797e3          	bne	a5,a4,20418a3e <emul+0xc6>
20418b14:	854a                	mv	a0,s2
20418b16:	d2cff0ef          	jal	ra,20418042 <eclear>
20418b1a:	b569                	j	204189a4 <emul+0x2c>
20418b1c:	0789                	addi	a5,a5,2
20418b1e:	f2e79fe3          	bne	a5,a4,20418a5c <emul+0xe4>
20418b22:	bfcd                	j	20418b14 <emul+0x19c>
20418b24:	57fd                	li	a5,-1
20418b26:	02f11423          	sh	a5,40(sp)
20418b2a:	bff1                	j	20418b06 <emul+0x18e>

20418b2c <ediv>:
20418b2c:	7175                	addi	sp,sp,-144
20418b2e:	c522                	sw	s0,136(sp)
20418b30:	c326                	sw	s1,132(sp)
20418b32:	c14a                	sw	s2,128(sp)
20418b34:	dad6                	sw	s5,116(sp)
20418b36:	c706                	sw	ra,140(sp)
20418b38:	dece                	sw	s3,124(sp)
20418b3a:	dcd2                	sw	s4,120(sp)
20418b3c:	d8da                	sw	s6,112(sp)
20418b3e:	d6de                	sw	s7,108(sp)
20418b40:	d4e2                	sw	s8,104(sp)
20418b42:	d2e6                	sw	s9,100(sp)
20418b44:	d0ea                	sw	s10,96(sp)
20418b46:	84aa                	mv	s1,a0
20418b48:	842e                	mv	s0,a1
20418b4a:	8932                	mv	s2,a2
20418b4c:	8ab6                	mv	s5,a3
20418b4e:	f30ff0ef          	jal	ra,2041827e <eisnan>
20418b52:	c11d                	beqz	a0,20418b78 <ediv+0x4c>
20418b54:	85ca                	mv	a1,s2
20418b56:	8526                	mv	a0,s1
20418b58:	cfaff0ef          	jal	ra,20418052 <emov>
20418b5c:	40ba                	lw	ra,140(sp)
20418b5e:	442a                	lw	s0,136(sp)
20418b60:	449a                	lw	s1,132(sp)
20418b62:	490a                	lw	s2,128(sp)
20418b64:	59f6                	lw	s3,124(sp)
20418b66:	5a66                	lw	s4,120(sp)
20418b68:	5ad6                	lw	s5,116(sp)
20418b6a:	5b46                	lw	s6,112(sp)
20418b6c:	5bb6                	lw	s7,108(sp)
20418b6e:	5c26                	lw	s8,104(sp)
20418b70:	5c96                	lw	s9,100(sp)
20418b72:	5d06                	lw	s10,96(sp)
20418b74:	6149                	addi	sp,sp,144
20418b76:	8082                	ret
20418b78:	8522                	mv	a0,s0
20418b7a:	f04ff0ef          	jal	ra,2041827e <eisnan>
20418b7e:	c501                	beqz	a0,20418b86 <ediv+0x5a>
20418b80:	85ca                	mv	a1,s2
20418b82:	8522                	mv	a0,s0
20418b84:	bfd1                	j	20418b58 <ediv+0x2c>
20418b86:	204229b7          	lui	s3,0x20422
20418b8a:	15898593          	addi	a1,s3,344 # 20422158 <ezero>
20418b8e:	8526                	mv	a0,s1
20418b90:	fcaff0ef          	jal	ra,2041835a <ecmp>
20418b94:	16050563          	beqz	a0,20418cfe <ediv+0x1d2>
20418b98:	8526                	mv	a0,s1
20418b9a:	3095                	jal	204183fe <eisinf>
20418b9c:	89aa                	mv	s3,a0
20418b9e:	8522                	mv	a0,s0
20418ba0:	38b9                	jal	204183fe <eisinf>
20418ba2:	16099863          	bnez	s3,20418d12 <ediv+0x1e6>
20418ba6:	16051b63          	bnez	a0,20418d1c <ediv+0x1f0>
20418baa:	8526                	mv	a0,s1
20418bac:	006c                	addi	a1,sp,12
20418bae:	f14ff0ef          	jal	ra,204182c2 <emovi>
20418bb2:	8522                	mv	a0,s0
20418bb4:	102c                	addi	a1,sp,40
20418bb6:	f0cff0ef          	jal	ra,204182c2 <emovi>
20418bba:	02a15483          	lhu	s1,42(sp)
20418bbe:	00e15403          	lhu	s0,14(sp)
20418bc2:	ec91                	bnez	s1,20418bde <ediv+0xb2>
20418bc4:	4781                	li	a5,0
20418bc6:	4759                	li	a4,22
20418bc8:	1030                	addi	a2,sp,40
20418bca:	00f606b3          	add	a3,a2,a5
20418bce:	0026d683          	lhu	a3,2(a3) # ffffc002 <pulp__FC+0xffffc003>
20418bd2:	16068563          	beqz	a3,20418d3c <ediv+0x210>
20418bd6:	8532                	mv	a0,a2
20418bd8:	3281                	jal	20418518 <enormlz>
20418bda:	40a004b3          	neg	s1,a0
20418bde:	00e15783          	lhu	a5,14(sp)
20418be2:	8ba2                	mv	s7,s0
20418be4:	ef89                	bnez	a5,20418bfe <ediv+0xd2>
20418be6:	4759                	li	a4,22
20418be8:	0070                	addi	a2,sp,12
20418bea:	00f606b3          	add	a3,a2,a5
20418bee:	0026d683          	lhu	a3,2(a3)
20418bf2:	14068963          	beqz	a3,20418d44 <ediv+0x218>
20418bf6:	8532                	mv	a0,a2
20418bf8:	3205                	jal	20418518 <enormlz>
20418bfa:	40a40bb3          	sub	s7,s0,a0
20418bfe:	02815783          	lhu	a5,40(sp)
20418c02:	02a15703          	lhu	a4,42(sp)
20418c06:	034a8993          	addi	s3,s5,52
20418c0a:	02fa9a23          	sh	a5,52(s5)
20418c0e:	038a8793          	addi	a5,s5,56
20418c12:	02ea9b23          	sh	a4,54(s5)
20418c16:	8a3e                	mv	s4,a5
20418c18:	04ea8713          	addi	a4,s5,78
20418c1c:	0789                	addi	a5,a5,2
20418c1e:	fe079f23          	sh	zero,-2(a5)
20418c22:	fee79de3          	bne	a5,a4,20418c1c <ediv+0xf0>
20418c26:	1028                	addi	a0,sp,40
20418c28:	c96ff0ef          	jal	ra,204180be <eshdn1>
20418c2c:	01215c03          	lhu	s8,18(sp)
20418c30:	6b41                	lui	s6,0x10
20418c32:	1b7d                	addi	s6,s6,-1
20418c34:	036c0d33          	mul	s10,s8,s6
20418c38:	01a98c93          	addi	s9,s3,26
20418c3c:	02c15783          	lhu	a5,44(sp)
20418c40:	02e15403          	lhu	s0,46(sp)
20418c44:	07c2                	slli	a5,a5,0x10
20418c46:	97a2                	add	a5,a5,s0
20418c48:	845a                	mv	s0,s6
20418c4a:	00fd6663          	bltu	s10,a5,20418c56 <ediv+0x12a>
20418c4e:	0387d433          	divu	s0,a5,s8
20418c52:	0442                	slli	s0,s0,0x10
20418c54:	8041                	srli	s0,s0,0x10
20418c56:	006c                	addi	a1,sp,12
20418c58:	8522                	mv	a0,s0
20418c5a:	00d0                	addi	a2,sp,68
20418c5c:	dacff0ef          	jal	ra,20418208 <m16m>
20418c60:	102c                	addi	a1,sp,40
20418c62:	00c8                	addi	a0,sp,68
20418c64:	c30ff0ef          	jal	ra,20418094 <ecmpm>
20418c68:	00a05f63          	blez	a0,20418c86 <ediv+0x15a>
20418c6c:	00cc                	addi	a1,sp,68
20418c6e:	0068                	addi	a0,sp,12
20418c70:	d6eff0ef          	jal	ra,204181de <esubm>
20418c74:	102c                	addi	a1,sp,40
20418c76:	00c8                	addi	a0,sp,68
20418c78:	c1cff0ef          	jal	ra,20418094 <ecmpm>
20418c7c:	0ea04063          	bgtz	a0,20418d5c <ediv+0x230>
20418c80:	147d                	addi	s0,s0,-1
20418c82:	0442                	slli	s0,s0,0x10
20418c84:	8041                	srli	s0,s0,0x10
20418c86:	102c                	addi	a1,sp,40
20418c88:	00c8                	addi	a0,sp,68
20418c8a:	d54ff0ef          	jal	ra,204181de <esubm>
20418c8e:	1028                	addi	a0,sp,40
20418c90:	008a1023          	sh	s0,0(s4)
20418c94:	0a09                	addi	s4,s4,2
20418c96:	ce0ff0ef          	jal	ra,20418176 <eshup6>
20418c9a:	fb9a11e3          	bne	s4,s9,20418c3c <ediv+0x110>
20418c9e:	4781                	li	a5,0
20418ca0:	4581                	li	a1,0
20418ca2:	4759                	li	a4,22
20418ca4:	1030                	addi	a2,sp,40
20418ca6:	00f606b3          	add	a3,a2,a5
20418caa:	0046d683          	lhu	a3,4(a3)
20418cae:	0789                	addi	a5,a5,2
20418cb0:	8dd5                	or	a1,a1,a3
20418cb2:	fee799e3          	bne	a5,a4,20418ca4 <ediv+0x178>
20418cb6:	00b035b3          	snez	a1,a1
20418cba:	0ff5f593          	andi	a1,a1,255
20418cbe:	87b2                	mv	a5,a2
20418cc0:	0009d703          	lhu	a4,0(s3)
20418cc4:	0989                	addi	s3,s3,2
20418cc6:	0789                	addi	a5,a5,2
20418cc8:	fee79f23          	sh	a4,-2(a5)
20418ccc:	ff3a1ae3          	bne	s4,s3,20418cc0 <ediv+0x194>
20418cd0:	6691                	lui	a3,0x4
20418cd2:	417484b3          	sub	s1,s1,s7
20418cd6:	16fd                	addi	a3,a3,-1
20418cd8:	87d6                	mv	a5,s5
20418cda:	04000713          	li	a4,64
20418cde:	96a6                	add	a3,a3,s1
20418ce0:	4601                	li	a2,0
20418ce2:	1028                	addi	a0,sp,40
20418ce4:	32f9                	jal	204186b2 <emdnorm>
20418ce6:	00c15703          	lhu	a4,12(sp)
20418cea:	02815783          	lhu	a5,40(sp)
20418cee:	06f71f63          	bne	a4,a5,20418d6c <ediv+0x240>
20418cf2:	02011423          	sh	zero,40(sp)
20418cf6:	85ca                	mv	a1,s2
20418cf8:	1028                	addi	a0,sp,40
20418cfa:	30c1                	jal	204185ba <emovo.isra.6>
20418cfc:	b585                	j	20418b5c <ediv+0x30>
20418cfe:	15898593          	addi	a1,s3,344
20418d02:	8522                	mv	a0,s0
20418d04:	e56ff0ef          	jal	ra,2041835a <ecmp>
20418d08:	e80518e3          	bnez	a0,20418b98 <ediv+0x6c>
20418d0c:	854a                	mv	a0,s2
20418d0e:	3859                	jal	204185a4 <enan.constprop.12>
20418d10:	b5b1                	j	20418b5c <ediv+0x30>
20418d12:	fd6d                	bnez	a0,20418d0c <ediv+0x1e0>
20418d14:	854a                	mv	a0,s2
20418d16:	b2cff0ef          	jal	ra,20418042 <eclear>
20418d1a:	b589                	j	20418b5c <ediv+0x30>
20418d1c:	8526                	mv	a0,s1
20418d1e:	d86ff0ef          	jal	ra,204182a4 <eisneg>
20418d22:	84aa                	mv	s1,a0
20418d24:	8522                	mv	a0,s0
20418d26:	d7eff0ef          	jal	ra,204182a4 <eisneg>
20418d2a:	02a48663          	beq	s1,a0,20418d56 <ediv+0x22a>
20418d2e:	77e1                	lui	a5,0xffff8
20418d30:	00f91923          	sh	a5,18(s2)
20418d34:	854a                	mv	a0,s2
20418d36:	eeaff0ef          	jal	ra,20418420 <einfin.isra.2>
20418d3a:	b50d                	j	20418b5c <ediv+0x30>
20418d3c:	0789                	addi	a5,a5,2
20418d3e:	e8e795e3          	bne	a5,a4,20418bc8 <ediv+0x9c>
20418d42:	bfc9                	j	20418d14 <ediv+0x1e8>
20418d44:	0789                	addi	a5,a5,2
20418d46:	eae791e3          	bne	a5,a4,20418be8 <ediv+0xbc>
20418d4a:	00c15703          	lhu	a4,12(sp)
20418d4e:	02815783          	lhu	a5,40(sp)
20418d52:	fcf71ee3          	bne	a4,a5,20418d2e <ediv+0x202>
20418d56:	00091923          	sh	zero,18(s2)
20418d5a:	bfe9                	j	20418d34 <ediv+0x208>
20418d5c:	1479                	addi	s0,s0,-2
20418d5e:	0442                	slli	s0,s0,0x10
20418d60:	00cc                	addi	a1,sp,68
20418d62:	0068                	addi	a0,sp,12
20418d64:	8041                	srli	s0,s0,0x10
20418d66:	c78ff0ef          	jal	ra,204181de <esubm>
20418d6a:	bf31                	j	20418c86 <ediv+0x15a>
20418d6c:	57fd                	li	a5,-1
20418d6e:	02f11423          	sh	a5,40(sp)
20418d72:	b751                	j	20418cf6 <ediv+0x1ca>

20418d74 <_ldtoa_r>:
20418d74:	0005ae03          	lw	t3,0(a1)
20418d78:	0045a303          	lw	t1,4(a1)
20418d7c:	0085a883          	lw	a7,8(a1)
20418d80:	45cc                	lw	a1,12(a1)
20418d82:	7105                	addi	sp,sp,-480
20418d84:	1c812c23          	sw	s0,472(sp)
20418d88:	d62e                	sw	a1,44(sp)
20418d8a:	843e                	mv	s0,a5
20418d8c:	412c                	lw	a1,64(a0)
20418d8e:	57fd                	li	a5,-1
20418d90:	14f12823          	sw	a5,336(sp)
20418d94:	09000793          	li	a5,144
20418d98:	1d412423          	sw	s4,456(sp)
20418d9c:	1d512223          	sw	s5,452(sp)
20418da0:	1b712e23          	sw	s7,444(sp)
20418da4:	1b912a23          	sw	s9,436(sp)
20418da8:	1c112e23          	sw	ra,476(sp)
20418dac:	1c912a23          	sw	s1,468(sp)
20418db0:	1d212823          	sw	s2,464(sp)
20418db4:	1d312623          	sw	s3,460(sp)
20418db8:	1d612023          	sw	s6,448(sp)
20418dbc:	1b812c23          	sw	s8,440(sp)
20418dc0:	1ba12823          	sw	s10,432(sp)
20418dc4:	1bb12623          	sw	s11,428(sp)
20418dc8:	cc42                	sw	a6,24(sp)
20418dca:	d072                	sw	t3,32(sp)
20418dcc:	d21a                	sw	t1,36(sp)
20418dce:	d446                	sw	a7,40(sp)
20418dd0:	14f12a23          	sw	a5,340(sp)
20418dd4:	8a2a                	mv	s4,a0
20418dd6:	8bb2                	mv	s7,a2
20418dd8:	8ab6                	mv	s5,a3
20418dda:	8cba                	mv	s9,a4
20418ddc:	c999                	beqz	a1,20418df2 <_ldtoa_r+0x7e>
20418dde:	417c                	lw	a5,68(a0)
20418de0:	4705                	li	a4,1
20418de2:	00f71733          	sll	a4,a4,a5
20418de6:	c1dc                	sw	a5,4(a1)
20418de8:	c598                	sw	a4,8(a1)
20418dea:	76d000ef          	jal	ra,20419d56 <_Bfree>
20418dee:	040a2023          	sw	zero,64(s4)
20418df2:	1008                	addi	a0,sp,32
20418df4:	088c                	addi	a1,sp,80
20418df6:	3809                	jal	20418608 <e113toe.isra.8>
20418df8:	0888                	addi	a0,sp,80
20418dfa:	caaff0ef          	jal	ra,204182a4 <eisneg>
20418dfe:	14050b63          	beqz	a0,20418f54 <_ldtoa_r+0x1e0>
20418e02:	4785                	li	a5,1
20418e04:	c01c                	sw	a5,0(s0)
20418e06:	478d                	li	a5,3
20418e08:	14fb8963          	beq	s7,a5,20418f5a <_ldtoa_r+0x1e6>
20418e0c:	4951                	li	s2,20
20418e0e:	000b8a63          	beqz	s7,20418e22 <_ldtoa_r+0xae>
20418e12:	fffa8913          	addi	s2,s5,-1
20418e16:	02a00793          	li	a5,42
20418e1a:	0127d463          	ble	s2,a5,20418e22 <_ldtoa_r+0xae>
20418e1e:	02a00913          	li	s2,42
20418e22:	15412603          	lw	a2,340(sp)
20418e26:	0888                	addi	a0,sp,80
20418e28:	ce32                	sw	a2,28(sp)
20418e2a:	c54ff0ef          	jal	ra,2041827e <eisnan>
20418e2e:	842a                	mv	s0,a0
20418e30:	12050763          	beqz	a0,20418f5e <_ldtoa_r+0x1ea>
20418e34:	204225b7          	lui	a1,0x20422
20418e38:	3ac58593          	addi	a1,a1,940 # 204223ac <emtens+0x104>
20418e3c:	0a48                	addi	a0,sp,276
20418e3e:	6409                	lui	s0,0x2
20418e40:	609010ef          	jal	ra,2041ac48 <sprintf>
20418e44:	70f40413          	addi	s0,s0,1807 # 270f <__stack_size-0x18f1>
20418e48:	46f2                	lw	a3,28(sp)
20418e4a:	0888                	addi	a0,sp,80
20418e4c:	16812023          	sw	s0,352(sp)
20418e50:	14d12a23          	sw	a3,340(sp)
20418e54:	daaff0ef          	jal	ra,204183fe <eisinf>
20418e58:	11410993          	addi	s3,sp,276
20418e5c:	e511                	bnez	a0,20418e68 <_ldtoa_r+0xf4>
20418e5e:	0888                	addi	a0,sp,80
20418e60:	c1eff0ef          	jal	ra,2041827e <eisnan>
20418e64:	78050363          	beqz	a0,204195ea <_ldtoa_r+0x876>
20418e68:	6789                	lui	a5,0x2
20418e6a:	70f78793          	addi	a5,a5,1807 # 270f <__stack_size-0x18f1>
20418e6e:	00fca023          	sw	a5,0(s9)
20418e72:	87ce                	mv	a5,s3
20418e74:	02000613          	li	a2,32
20418e78:	02d00693          	li	a3,45
20418e7c:	0007c703          	lbu	a4,0(a5)
20418e80:	7ac70963          	beq	a4,a2,20419632 <_ldtoa_r+0x8be>
20418e84:	7ad70763          	beq	a4,a3,20419632 <_ldtoa_r+0x8be>
20418e88:	844e                	mv	s0,s3
20418e8a:	0785                	addi	a5,a5,1
20418e8c:	fff7c703          	lbu	a4,-1(a5)
20418e90:	00140693          	addi	a3,s0,1
20418e94:	fee68fa3          	sb	a4,-1(a3) # 3fff <__stack_size-0x1>
20418e98:	7a071063          	bnez	a4,20419638 <_ldtoa_r+0x8c4>
20418e9c:	4709                	li	a4,2
20418e9e:	4785                	li	a5,1
20418ea0:	00eb8763          	beq	s7,a4,20418eae <_ldtoa_r+0x13a>
20418ea4:	16012783          	lw	a5,352(sp)
20418ea8:	0127d363          	ble	s2,a5,20418eae <_ldtoa_r+0x13a>
20418eac:	87ca                	mv	a5,s2
20418eae:	03000693          	li	a3,48
20418eb2:	fff44703          	lbu	a4,-1(s0)
20418eb6:	00d71663          	bne	a4,a3,20418ec2 <_ldtoa_r+0x14e>
20418eba:	41340733          	sub	a4,s0,s3
20418ebe:	78e7c063          	blt	a5,a4,2041963e <_ldtoa_r+0x8ca>
20418ec2:	478d                	li	a5,3
20418ec4:	009a8713          	addi	a4,s5,9
20418ec8:	02fb9163          	bne	s7,a5,20418eea <_ldtoa_r+0x176>
20418ecc:	16012783          	lw	a5,352(sp)
20418ed0:	993e                	add	s2,s2,a5
20418ed2:	00095763          	bgez	s2,20418ee0 <_ldtoa_r+0x16c>
20418ed6:	10010a23          	sb	zero,276(sp)
20418eda:	000ca023          	sw	zero,0(s9)
20418ede:	844e                	mv	s0,s3
20418ee0:	000ca783          	lw	a5,0(s9)
20418ee4:	9abe                	add	s5,s5,a5
20418ee6:	003a8713          	addi	a4,s5,3
20418eea:	040a2223          	sw	zero,68(s4)
20418eee:	4791                	li	a5,4
20418ef0:	01478693          	addi	a3,a5,20
20418ef4:	044a2583          	lw	a1,68(s4)
20418ef8:	74d77863          	bleu	a3,a4,20419648 <_ldtoa_r+0x8d4>
20418efc:	8552                	mv	a0,s4
20418efe:	5f3000ef          	jal	ra,20419cf0 <_Balloc>
20418f02:	04aa2023          	sw	a0,64(s4)
20418f06:	85ce                	mv	a1,s3
20418f08:	84aa                	mv	s1,a0
20418f0a:	64b010ef          	jal	ra,2041ad54 <strcpy>
20418f0e:	4762                	lw	a4,24(sp)
20418f10:	c709                	beqz	a4,20418f1a <_ldtoa_r+0x1a6>
20418f12:	41340433          	sub	s0,s0,s3
20418f16:	9426                	add	s0,s0,s1
20418f18:	c300                	sw	s0,0(a4)
20418f1a:	1dc12083          	lw	ra,476(sp)
20418f1e:	1d812403          	lw	s0,472(sp)
20418f22:	8526                	mv	a0,s1
20418f24:	1d012903          	lw	s2,464(sp)
20418f28:	1d412483          	lw	s1,468(sp)
20418f2c:	1cc12983          	lw	s3,460(sp)
20418f30:	1c812a03          	lw	s4,456(sp)
20418f34:	1c412a83          	lw	s5,452(sp)
20418f38:	1c012b03          	lw	s6,448(sp)
20418f3c:	1bc12b83          	lw	s7,444(sp)
20418f40:	1b812c03          	lw	s8,440(sp)
20418f44:	1b412c83          	lw	s9,436(sp)
20418f48:	1b012d03          	lw	s10,432(sp)
20418f4c:	1ac12d83          	lw	s11,428(sp)
20418f50:	613d                	addi	sp,sp,480
20418f52:	8082                	ret
20418f54:	00042023          	sw	zero,0(s0)
20418f58:	b57d                	j	20418e06 <_ldtoa_r+0x92>
20418f5a:	8956                	mv	s2,s5
20418f5c:	bd6d                	j	20418e16 <_ldtoa_r+0xa2>
20418f5e:	09000793          	li	a5,144
20418f62:	10ec                	addi	a1,sp,108
20418f64:	0888                	addi	a0,sp,80
20418f66:	14f12a23          	sw	a5,340(sp)
20418f6a:	8e8ff0ef          	jal	ra,20418052 <emov>
20418f6e:	07e15783          	lhu	a5,126(sp)
20418f72:	c802                	sw	zero,16(sp)
20418f74:	01079713          	slli	a4,a5,0x10
20418f78:	8741                	srai	a4,a4,0x10
20418f7a:	00075a63          	bgez	a4,20418f8e <_ldtoa_r+0x21a>
20418f7e:	6721                	lui	a4,0x8
20418f80:	177d                	addi	a4,a4,-1
20418f82:	8ff9                	and	a5,a5,a4
20418f84:	06f11f23          	sh	a5,126(sp)
20418f88:	67c1                	lui	a5,0x10
20418f8a:	17fd                	addi	a5,a5,-1
20418f8c:	c83e                	sw	a5,16(sp)
20418f8e:	20422b37          	lui	s6,0x20422
20418f92:	158b0513          	addi	a0,s6,344 # 20422158 <ezero>
20418f96:	012c                	addi	a1,sp,136
20418f98:	0551                	addi	a0,a0,20
20418f9a:	8b8ff0ef          	jal	ra,20418052 <emov>
20418f9e:	07e15703          	lhu	a4,126(sp)
20418fa2:	204224b7          	lui	s1,0x20422
20418fa6:	158b0993          	addi	s3,s6,344
20418faa:	16c48493          	addi	s1,s1,364 # 2042216c <eone>
20418fae:	6a071363          	bnez	a4,20419654 <_ldtoa_r+0x8e0>
20418fb2:	10f8                	addi	a4,sp,108
20418fb4:	4781                	li	a5,0
20418fb6:	46a5                	li	a3,9
20418fb8:	00075603          	lhu	a2,0(a4) # 8000 <__stack_size+0x4000>
20418fbc:	e271                	bnez	a2,20419080 <_ldtoa_r+0x30c>
20418fbe:	0785                	addi	a5,a5,1
20418fc0:	0709                	addi	a4,a4,2
20418fc2:	fed79be3          	bne	a5,a3,20418fb8 <_ldtoa_r+0x244>
20418fc6:	018c                	addi	a1,sp,192
20418fc8:	0128                	addi	a0,sp,136
20418fca:	af8ff0ef          	jal	ra,204182c2 <emovi>
20418fce:	012c                	addi	a1,sp,136
20418fd0:	0188                	addi	a0,sp,192
20418fd2:	8a6ff0ef          	jal	ra,20418078 <emovz>
20418fd6:	018c                	addi	a1,sp,192
20418fd8:	10e8                	addi	a0,sp,108
20418fda:	ae8ff0ef          	jal	ra,204182c2 <emovi>
20418fde:	10ec                	addi	a1,sp,108
20418fe0:	0188                	addi	a0,sp,192
20418fe2:	896ff0ef          	jal	ra,20418078 <emovz>
20418fe6:	0a90                	addi	a2,sp,336
20418fe8:	10ec                	addi	a1,sp,108
20418fea:	0128                	addi	a0,sp,136
20418fec:	3201                	jal	204188ec <eiremain>
20418fee:	19c15483          	lhu	s1,412(sp)
20418ff2:	e881                	bnez	s1,20419002 <_ldtoa_r+0x28e>
20418ff4:	158b0593          	addi	a1,s6,344
20418ff8:	10e8                	addi	a0,sp,108
20418ffa:	b60ff0ef          	jal	ra,2041835a <ecmp>
20418ffe:	4a051d63          	bnez	a0,204194b8 <_ldtoa_r+0x744>
20419002:	4642                	lw	a2,16(sp)
20419004:	02d00793          	li	a5,45
20419008:	e219                	bnez	a2,2041900e <_ldtoa_r+0x29a>
2041900a:	02000793          	li	a5,32
2041900e:	10f10a23          	sb	a5,276(sp)
20419012:	478d                	li	a5,3
20419014:	89ca                	mv	s3,s2
20419016:	00fb9863          	bne	s7,a5,20419026 <_ldtoa_r+0x2b2>
2041901a:	008909b3          	add	s3,s2,s0
2041901e:	02a00793          	li	a5,42
20419022:	6537c663          	blt	a5,s3,2041966e <_ldtoa_r+0x8fa>
20419026:	47a9                	li	a5,10
20419028:	4cf49263          	bne	s1,a5,204194ec <_ldtoa_r+0x778>
2041902c:	678d                	lui	a5,0x3
2041902e:	e3178793          	addi	a5,a5,-463 # 2e31 <__stack_size-0x11cf>
20419032:	10f11aa3          	sh	a5,277(sp)
20419036:	11710c13          	addi	s8,sp,279
2041903a:	01305963          	blez	s3,2041904c <_ldtoa_r+0x2d8>
2041903e:	03000793          	li	a5,48
20419042:	10f10ba3          	sb	a5,279(sp)
20419046:	19fd                	addi	s3,s3,-1
20419048:	11810c13          	addi	s8,sp,280
2041904c:	0405                	addi	s0,s0,1
2041904e:	4a09d963          	bgez	s3,20419500 <_ldtoa_r+0x78c>
20419052:	204225b7          	lui	a1,0x20422
20419056:	8622                	mv	a2,s0
20419058:	3d058593          	addi	a1,a1,976 # 204223d0 <emtens+0x128>
2041905c:	8562                	mv	a0,s8
2041905e:	3eb010ef          	jal	ra,2041ac48 <sprintf>
20419062:	b3dd                	j	20418e48 <_ldtoa_r+0xd4>
20419064:	204225b7          	lui	a1,0x20422
20419068:	3c058593          	addi	a1,a1,960 # 204223c0 <emtens+0x118>
2041906c:	bbc1                	j	20418e3c <_ldtoa_r+0xc8>
2041906e:	07c11783          	lh	a5,124(sp)
20419072:	0007c763          	bltz	a5,20419080 <_ldtoa_r+0x30c>
20419076:	204225b7          	lui	a1,0x20422
2041907a:	3cc58593          	addi	a1,a1,972 # 204223cc <emtens+0x124>
2041907e:	bb7d                	j	20418e3c <_ldtoa_r+0xc8>
20419080:	10ec                	addi	a1,sp,108
20419082:	8526                	mv	a0,s1
20419084:	ad6ff0ef          	jal	ra,2041835a <ecmp>
20419088:	dd1d                	beqz	a0,20418fc6 <_ldtoa_r+0x252>
2041908a:	30055b63          	bgez	a0,204193a0 <_ldtoa_r+0x62c>
2041908e:	114c                	addi	a1,sp,164
20419090:	10e8                	addi	a0,sp,108
20419092:	fc1fe0ef          	jal	ra,20418052 <emov>
20419096:	6791                	lui	a5,0x4
20419098:	08e78793          	addi	a5,a5,142 # 408e <__stack_size+0x8e>
2041909c:	4741                	li	a4,16
2041909e:	0af11b23          	sh	a5,182(sp)
204190a2:	4d01                	li	s10,0
204190a4:	ca3a                	sw	a4,20(sp)
204190a6:	204227b7          	lui	a5,0x20422
204190aa:	22078793          	addi	a5,a5,544 # 20422220 <etens+0xa0>
204190ae:	0a94                	addi	a3,sp,336
204190b0:	0130                	addi	a2,sp,136
204190b2:	01a78533          	add	a0,a5,s10
204190b6:	114c                	addi	a1,sp,164
204190b8:	3c95                	jal	20418b2c <ediv>
204190ba:	186c                	addi	a1,sp,60
204190bc:	0128                	addi	a0,sp,136
204190be:	f95fe0ef          	jal	ra,20418052 <emov>
204190c2:	04e15c03          	lhu	s8,78(sp)
204190c6:	6621                	lui	a2,0x8
204190c8:	167d                	addi	a2,a2,-1
204190ca:	76f1                	lui	a3,0xffffc
204190cc:	00cc7733          	and	a4,s8,a2
204190d0:	0689                	addi	a3,a3,2
204190d2:	9736                	add	a4,a4,a3
204190d4:	04e04063          	bgtz	a4,20419114 <_ldtoa_r+0x3a0>
204190d8:	0188                	addi	a0,sp,192
204190da:	f69fe0ef          	jal	ra,20418042 <eclear>
204190de:	0c42                	slli	s8,s8,0x10
204190e0:	410c5c13          	srai	s8,s8,0x10
204190e4:	0a0c5e63          	bgez	s8,204191a0 <_ldtoa_r+0x42c>
204190e8:	4781                	li	a5,0
204190ea:	1870                	addi	a2,sp,60
204190ec:	00f60733          	add	a4,a2,a5
204190f0:	0190                	addi	a2,sp,192
204190f2:	00075683          	lhu	a3,0(a4)
204190f6:	00f60733          	add	a4,a2,a5
204190fa:	00075703          	lhu	a4,0(a4)
204190fe:	28e68c63          	beq	a3,a4,20419396 <_ldtoa_r+0x622>
20419102:	8526                	mv	a0,s1
20419104:	97aff0ef          	jal	ra,2041827e <eisnan>
20419108:	cd31                	beqz	a0,20419164 <_ldtoa_r+0x3f0>
2041910a:	018c                	addi	a1,sp,192
2041910c:	8526                	mv	a0,s1
2041910e:	f45fe0ef          	jal	ra,20418052 <emov>
20419112:	a079                	j	204191a0 <_ldtoa_r+0x42c>
20419114:	09000793          	li	a5,144
20419118:	40e78db3          	sub	s11,a5,a4
2041911c:	018c                	addi	a1,sp,192
2041911e:	1868                	addi	a0,sp,60
20419120:	f33fe0ef          	jal	ra,20418052 <emov>
20419124:	07b05e63          	blez	s11,204191a0 <_ldtoa_r+0x42c>
20419128:	0194                	addi	a3,sp,192
2041912a:	87ee                	mv	a5,s11
2041912c:	463d                	li	a2,15
2041912e:	02f64663          	blt	a2,a5,2041915a <_ldtoa_r+0x3e6>
20419132:	004dd793          	srli	a5,s11,0x4
20419136:	5641                	li	a2,-16
20419138:	00179693          	slli	a3,a5,0x1
2041913c:	02c787b3          	mul	a5,a5,a2
20419140:	0198                	addi	a4,sp,192
20419142:	96ba                	add	a3,a3,a4
20419144:	0006d703          	lhu	a4,0(a3) # ffffc000 <pulp__FC+0xffffc001>
20419148:	97ee                	add	a5,a5,s11
2041914a:	0786                	slli	a5,a5,0x1
2041914c:	97ce                	add	a5,a5,s3
2041914e:	12c7d783          	lhu	a5,300(a5)
20419152:	8ff9                	and	a5,a5,a4
20419154:	00f69023          	sh	a5,0(a3)
20419158:	b759                	j	204190de <_ldtoa_r+0x36a>
2041915a:	00069023          	sh	zero,0(a3)
2041915e:	17c1                	addi	a5,a5,-16
20419160:	0689                	addi	a3,a3,2
20419162:	b7f1                	j	2041912e <_ldtoa_r+0x3ba>
20419164:	0188                	addi	a0,sp,192
20419166:	918ff0ef          	jal	ra,2041827e <eisnan>
2041916a:	c501                	beqz	a0,20419172 <_ldtoa_r+0x3fe>
2041916c:	018c                	addi	a1,sp,192
2041916e:	852e                	mv	a0,a1
20419170:	bf79                	j	2041910e <_ldtoa_r+0x39a>
20419172:	8526                	mv	a0,s1
20419174:	a8aff0ef          	jal	ra,204183fe <eisinf>
20419178:	8daa                	mv	s11,a0
2041917a:	0188                	addi	a0,sp,192
2041917c:	a82ff0ef          	jal	ra,204183fe <eisinf>
20419180:	8c2a                	mv	s8,a0
20419182:	0e0d8a63          	beqz	s11,20419276 <_ldtoa_r+0x502>
20419186:	c969                	beqz	a0,20419258 <_ldtoa_r+0x4e4>
20419188:	8526                	mv	a0,s1
2041918a:	91aff0ef          	jal	ra,204182a4 <eisneg>
2041918e:	8c2a                	mv	s8,a0
20419190:	0188                	addi	a0,sp,192
20419192:	912ff0ef          	jal	ra,204182a4 <eisneg>
20419196:	0cac1163          	bne	s8,a0,20419258 <_ldtoa_r+0x4e4>
2041919a:	0188                	addi	a0,sp,192
2041919c:	c08ff0ef          	jal	ra,204185a4 <enan.constprop.12>
204191a0:	4781                	li	a5,0
204191a2:	0130                	addi	a2,sp,136
204191a4:	00f60733          	add	a4,a2,a5
204191a8:	0190                	addi	a2,sp,192
204191aa:	00075683          	lhu	a3,0(a4)
204191ae:	00f60733          	add	a4,a2,a5
204191b2:	00075703          	lhu	a4,0(a4)
204191b6:	00e69c63          	bne	a3,a4,204191ce <_ldtoa_r+0x45a>
204191ba:	0789                	addi	a5,a5,2
204191bc:	46c9                	li	a3,18
204191be:	fed792e3          	bne	a5,a3,204191a2 <_ldtoa_r+0x42e>
204191c2:	114c                	addi	a1,sp,164
204191c4:	0128                	addi	a0,sp,136
204191c6:	e8dfe0ef          	jal	ra,20418052 <emov>
204191ca:	4752                	lw	a4,20(sp)
204191cc:	943a                	add	s0,s0,a4
204191ce:	47d2                	lw	a5,20(sp)
204191d0:	0d51                	addi	s10,s10,20
204191d2:	8385                	srli	a5,a5,0x1
204191d4:	ca3e                	sw	a5,20(sp)
204191d6:	06400793          	li	a5,100
204191da:	ecfd16e3          	bne	s10,a5,204190a6 <_ldtoa_r+0x332>
204191de:	0b615783          	lhu	a5,182(sp)
204191e2:	07e15703          	lhu	a4,126(sp)
204191e6:	10ec                	addi	a1,sp,108
204191e8:	1148                	addi	a0,sp,164
204191ea:	97ba                	add	a5,a5,a4
204191ec:	7771                	lui	a4,0xffffc
204191ee:	f7270713          	addi	a4,a4,-142 # ffffbf72 <pulp__FC+0xffffbf73>
204191f2:	97ba                	add	a5,a5,a4
204191f4:	0af11b23          	sh	a5,182(sp)
204191f8:	e5bfe0ef          	jal	ra,20418052 <emov>
204191fc:	8526                	mv	a0,s1
204191fe:	012c                	addi	a1,sp,136
20419200:	e53fe0ef          	jal	ra,20418052 <emov>
20419204:	4481                	li	s1,0
20419206:	6d05                	lui	s10,0x1
20419208:	11898993          	addi	s3,s3,280
2041920c:	10400d93          	li	s11,260
20419210:	20422637          	lui	a2,0x20422
20419214:	18060613          	addi	a2,a2,384 # 20422180 <etens>
20419218:	114c                	addi	a1,sp,164
2041921a:	854e                	mv	a0,s3
2041921c:	00c48c33          	add	s8,s1,a2
20419220:	93aff0ef          	jal	ra,2041835a <ecmp>
20419224:	daa041e3          	bgtz	a0,20418fc6 <_ldtoa_r+0x252>
20419228:	114c                	addi	a1,sp,164
2041922a:	8562                	mv	a0,s8
2041922c:	92eff0ef          	jal	ra,2041835a <ecmp>
20419230:	00a04e63          	bgtz	a0,2041924c <_ldtoa_r+0x4d8>
20419234:	1150                	addi	a2,sp,164
20419236:	85b2                	mv	a1,a2
20419238:	0a94                	addi	a3,sp,336
2041923a:	8562                	mv	a0,s8
2041923c:	38c5                	jal	20418b2c <ediv>
2041923e:	0130                	addi	a2,sp,136
20419240:	0a94                	addi	a3,sp,336
20419242:	85b2                	mv	a1,a2
20419244:	8562                	mv	a0,s8
20419246:	f32ff0ef          	jal	ra,20418978 <emul>
2041924a:	946a                	add	s0,s0,s10
2041924c:	04d1                	addi	s1,s1,20
2041924e:	001d5d13          	srli	s10,s10,0x1
20419252:	fbb49fe3          	bne	s1,s11,20419210 <_ldtoa_r+0x49c>
20419256:	bb85                	j	20418fc6 <_ldtoa_r+0x252>
20419258:	8526                	mv	a0,s1
2041925a:	018c                	addi	a1,sp,192
2041925c:	df7fe0ef          	jal	ra,20418052 <emov>
20419260:	0188                	addi	a0,sp,192
20419262:	81cff0ef          	jal	ra,2041827e <eisnan>
20419266:	fd0d                	bnez	a0,204191a0 <_ldtoa_r+0x42c>
20419268:	0d215783          	lhu	a5,210(sp)
2041926c:	7761                	lui	a4,0xffff8
2041926e:	8fb9                	xor	a5,a5,a4
20419270:	0cf11923          	sh	a5,210(sp)
20419274:	b735                	j	204191a0 <_ldtoa_r+0x42c>
20419276:	ee051be3          	bnez	a0,2041916c <_ldtoa_r+0x3f8>
2041927a:	09ec                	addi	a1,sp,220
2041927c:	8526                	mv	a0,s1
2041927e:	844ff0ef          	jal	ra,204182c2 <emovi>
20419282:	19ac                	addi	a1,sp,248
20419284:	0188                	addi	a0,sp,192
20419286:	83cff0ef          	jal	ra,204182c2 <emovi>
2041928a:	0dc15703          	lhu	a4,220(sp)
2041928e:	0fa15d83          	lhu	s11,250(sp)
20419292:	0de15783          	lhu	a5,222(sp)
20419296:	fff74713          	not	a4,a4
2041929a:	0742                	slli	a4,a4,0x10
2041929c:	8341                	srli	a4,a4,0x10
2041929e:	0ce11e23          	sh	a4,220(sp)
204192a2:	41b787b3          	sub	a5,a5,s11
204192a6:	06f05363          	blez	a5,2041930c <_ldtoa_r+0x598>
204192aa:	0a4c                	addi	a1,sp,276
204192ac:	19a8                	addi	a0,sp,248
204192ae:	c63e                	sw	a5,12(sp)
204192b0:	dc9fe0ef          	jal	ra,20418078 <emovz>
204192b4:	19ac                	addi	a1,sp,248
204192b6:	09e8                	addi	a0,sp,220
204192b8:	dc1fe0ef          	jal	ra,20418078 <emovz>
204192bc:	09ec                	addi	a1,sp,220
204192be:	0a48                	addi	a0,sp,276
204192c0:	db9fe0ef          	jal	ra,20418078 <emovz>
204192c4:	47b2                	lw	a5,12(sp)
204192c6:	0fa15d83          	lhu	s11,250(sp)
204192ca:	40f007b3          	neg	a5,a5
204192ce:	f6f00713          	li	a4,-145
204192d2:	06e7c763          	blt	a5,a4,20419340 <_ldtoa_r+0x5cc>
204192d6:	85be                	mv	a1,a5
204192d8:	09e8                	addi	a0,sp,220
204192da:	964ff0ef          	jal	ra,2041843e <eshift.part.3>
204192de:	882a                	mv	a6,a0
204192e0:	0dc15703          	lhu	a4,220(sp)
204192e4:	0f815783          	lhu	a5,248(sp)
204192e8:	c642                	sw	a6,12(sp)
204192ea:	19ac                	addi	a1,sp,248
204192ec:	09e8                	addi	a0,sp,220
204192ee:	0af71063          	bne	a4,a5,2041938e <_ldtoa_r+0x61a>
204192f2:	ec3fe0ef          	jal	ra,204181b4 <eaddm>
204192f6:	4832                	lw	a6,12(sp)
204192f8:	0a9c                	addi	a5,sp,336
204192fa:	04000713          	li	a4,64
204192fe:	86ee                	mv	a3,s11
20419300:	8662                	mv	a2,s8
20419302:	85c2                	mv	a1,a6
20419304:	19a8                	addi	a0,sp,248
20419306:	bacff0ef          	jal	ra,204186b2 <emdnorm>
2041930a:	a81d                	j	20419340 <_ldtoa_r+0x5cc>
2041930c:	f3e9                	bnez	a5,204192ce <_ldtoa_r+0x55a>
2041930e:	19ac                	addi	a1,sp,248
20419310:	09e8                	addi	a0,sp,220
20419312:	c63a                	sw	a4,12(sp)
20419314:	d81fe0ef          	jal	ra,20418094 <ecmpm>
20419318:	4732                	lw	a4,12(sp)
2041931a:	e929                	bnez	a0,2041936c <_ldtoa_r+0x5f8>
2041931c:	0f815783          	lhu	a5,248(sp)
20419320:	00e78663          	beq	a5,a4,2041932c <_ldtoa_r+0x5b8>
20419324:	0188                	addi	a0,sp,192
20419326:	d1dfe0ef          	jal	ra,20418042 <eclear>
2041932a:	bd9d                	j	204191a0 <_ldtoa_r+0x42c>
2041932c:	000d9f63          	bnez	s11,2041934a <_ldtoa_r+0x5d6>
20419330:	0fe11703          	lh	a4,254(sp)
20419334:	4781                	li	a5,0
20419336:	00074b63          	bltz	a4,2041934c <_ldtoa_r+0x5d8>
2041933a:	19a8                	addi	a0,sp,248
2041933c:	db9fe0ef          	jal	ra,204180f4 <eshup1>
20419340:	018c                	addi	a1,sp,192
20419342:	19a8                	addi	a0,sp,248
20419344:	a76ff0ef          	jal	ra,204185ba <emovo.isra.6>
20419348:	bda1                	j	204191a0 <_ldtoa_r+0x42c>
2041934a:	4781                	li	a5,0
2041934c:	4759                	li	a4,22
2041934e:	19b4                	addi	a3,sp,248
20419350:	00f68633          	add	a2,a3,a5
20419354:	00265603          	lhu	a2,2(a2)
20419358:	c611                	beqz	a2,20419364 <_ldtoa_r+0x5f0>
2041935a:	0d85                	addi	s11,s11,1
2041935c:	86ee                	mv	a3,s11
2041935e:	0ed11d23          	sh	a3,250(sp)
20419362:	bff9                	j	20419340 <_ldtoa_r+0x5cc>
20419364:	0789                	addi	a5,a5,2
20419366:	fee794e3          	bne	a5,a4,2041934e <_ldtoa_r+0x5da>
2041936a:	bfcd                	j	2041935c <_ldtoa_r+0x5e8>
2041936c:	4801                	li	a6,0
2041936e:	f6a059e3          	blez	a0,204192e0 <_ldtoa_r+0x56c>
20419372:	0a4c                	addi	a1,sp,276
20419374:	19a8                	addi	a0,sp,248
20419376:	d03fe0ef          	jal	ra,20418078 <emovz>
2041937a:	19ac                	addi	a1,sp,248
2041937c:	09e8                	addi	a0,sp,220
2041937e:	cfbfe0ef          	jal	ra,20418078 <emovz>
20419382:	09ec                	addi	a1,sp,220
20419384:	0a48                	addi	a0,sp,276
20419386:	cf3fe0ef          	jal	ra,20418078 <emovz>
2041938a:	8862                	mv	a6,s8
2041938c:	bf91                	j	204192e0 <_ldtoa_r+0x56c>
2041938e:	e51fe0ef          	jal	ra,204181de <esubm>
20419392:	4c05                	li	s8,1
20419394:	b78d                	j	204192f6 <_ldtoa_r+0x582>
20419396:	0789                	addi	a5,a5,2
20419398:	4749                	li	a4,18
2041939a:	d4e798e3          	bne	a5,a4,204190ea <_ldtoa_r+0x376>
2041939e:	b509                	j	204191a0 <_ldtoa_r+0x42c>
204193a0:	07e15783          	lhu	a5,126(sp)
204193a4:	11898c13          	addi	s8,s3,280
204193a8:	cfad                	beqz	a5,20419422 <_ldtoa_r+0x6ae>
204193aa:	018c                	addi	a1,sp,192
204193ac:	10e8                	addi	a0,sp,108
204193ae:	6c11                	lui	s8,0x4
204193b0:	f13fe0ef          	jal	ra,204182c2 <emovi>
204193b4:	1c79                	addi	s8,s8,-2
204193b6:	fd500d13          	li	s10,-43
204193ba:	0d815783          	lhu	a5,216(sp)
204193be:	8b9d                	andi	a5,a5,7
204193c0:	e7a9                	bnez	a5,2041940a <_ldtoa_r+0x696>
204193c2:	114c                	addi	a1,sp,164
204193c4:	0188                	addi	a0,sp,192
204193c6:	cb3fe0ef          	jal	ra,20418078 <emovz>
204193ca:	1148                	addi	a0,sp,164
204193cc:	cf3fe0ef          	jal	ra,204180be <eshdn1>
204193d0:	1148                	addi	a0,sp,164
204193d2:	cedfe0ef          	jal	ra,204180be <eshdn1>
204193d6:	114c                	addi	a1,sp,164
204193d8:	0188                	addi	a0,sp,192
204193da:	ddbfe0ef          	jal	ra,204181b4 <eaddm>
204193de:	0a615783          	lhu	a5,166(sp)
204193e2:	078d                	addi	a5,a5,3
204193e4:	0af11323          	sh	a5,166(sp)
204193e8:	0a815783          	lhu	a5,168(sp)
204193ec:	efdd                	bnez	a5,204194aa <_ldtoa_r+0x736>
204193ee:	0bc15783          	lhu	a5,188(sp)
204193f2:	ef81                	bnez	a5,2041940a <_ldtoa_r+0x696>
204193f4:	0a615783          	lhu	a5,166(sp)
204193f8:	00fc6963          	bltu	s8,a5,2041940a <_ldtoa_r+0x696>
204193fc:	018c                	addi	a1,sp,192
204193fe:	1148                	addi	a0,sp,164
20419400:	147d                	addi	s0,s0,-1
20419402:	c77fe0ef          	jal	ra,20418078 <emovz>
20419406:	fba41ae3          	bne	s0,s10,204193ba <_ldtoa_r+0x646>
2041940a:	10ec                	addi	a1,sp,108
2041940c:	0188                	addi	a0,sp,192
2041940e:	9acff0ef          	jal	ra,204185ba <emovo.isra.6>
20419412:	a821                	j	2041942a <_ldtoa_r+0x6b6>
20419414:	10f0                	addi	a2,sp,108
20419416:	0a94                	addi	a3,sp,336
20419418:	85b2                	mv	a1,a2
2041941a:	8562                	mv	a0,s8
2041941c:	d5cff0ef          	jal	ra,20418978 <emul>
20419420:	147d                	addi	s0,s0,-1
20419422:	07c11783          	lh	a5,124(sp)
20419426:	fe07d7e3          	bgez	a5,20419414 <_ldtoa_r+0x6a0>
2041942a:	018c                	addi	a1,sp,192
2041942c:	10e8                	addi	a0,sp,108
2041942e:	c25fe0ef          	jal	ra,20418052 <emov>
20419432:	012c                	addi	a1,sp,136
20419434:	8526                	mv	a0,s1
20419436:	c1dfe0ef          	jal	ra,20418052 <emov>
2041943a:	4d01                	li	s10,0
2041943c:	7c7d                	lui	s8,0xfffff
2041943e:	4d89                	li	s11,2
20419440:	20422737          	lui	a4,0x20422
20419444:	204227b7          	lui	a5,0x20422
20419448:	18070713          	addi	a4,a4,384 # 20422180 <etens>
2041944c:	2a878793          	addi	a5,a5,680 # 204222a8 <emtens>
20419450:	01a709b3          	add	s3,a4,s10
20419454:	018c                	addi	a1,sp,192
20419456:	01a78733          	add	a4,a5,s10
2041945a:	8526                	mv	a0,s1
2041945c:	c63a                	sw	a4,12(sp)
2041945e:	efdfe0ef          	jal	ra,2041835a <ecmp>
20419462:	4732                	lw	a4,12(sp)
20419464:	02a05c63          	blez	a0,2041949c <_ldtoa_r+0x728>
20419468:	018c                	addi	a1,sp,192
2041946a:	853a                	mv	a0,a4
2041946c:	eeffe0ef          	jal	ra,2041835a <ecmp>
20419470:	00054f63          	bltz	a0,2041948e <_ldtoa_r+0x71a>
20419474:	0190                	addi	a2,sp,192
20419476:	85b2                	mv	a1,a2
20419478:	0a94                	addi	a3,sp,336
2041947a:	854e                	mv	a0,s3
2041947c:	cfcff0ef          	jal	ra,20418978 <emul>
20419480:	0130                	addi	a2,sp,136
20419482:	0a94                	addi	a3,sp,336
20419484:	85b2                	mv	a1,a2
20419486:	854e                	mv	a0,s3
20419488:	cf0ff0ef          	jal	ra,20418978 <emul>
2041948c:	9462                	add	s0,s0,s8
2041948e:	0d51                	addi	s10,s10,20
20419490:	10400693          	li	a3,260
20419494:	03bc4c33          	div	s8,s8,s11
20419498:	fadd14e3          	bne	s10,a3,20419440 <_ldtoa_r+0x6cc>
2041949c:	0130                	addi	a2,sp,136
2041949e:	0a94                	addi	a3,sp,336
204194a0:	85a6                	mv	a1,s1
204194a2:	8532                	mv	a0,a2
204194a4:	e88ff0ef          	jal	ra,20418b2c <ediv>
204194a8:	be39                	j	20418fc6 <_ldtoa_r+0x252>
204194aa:	1148                	addi	a0,sp,164
204194ac:	c13fe0ef          	jal	ra,204180be <eshdn1>
204194b0:	0a615783          	lhu	a5,166(sp)
204194b4:	0785                	addi	a5,a5,1
204194b6:	b73d                	j	204193e4 <_ldtoa_r+0x670>
204194b8:	10e8                	addi	a0,sp,108
204194ba:	c3bfe0ef          	jal	ra,204180f4 <eshup1>
204194be:	114c                	addi	a1,sp,164
204194c0:	10e8                	addi	a0,sp,108
204194c2:	bb7fe0ef          	jal	ra,20418078 <emovz>
204194c6:	1148                	addi	a0,sp,164
204194c8:	c2dfe0ef          	jal	ra,204180f4 <eshup1>
204194cc:	1148                	addi	a0,sp,164
204194ce:	c27fe0ef          	jal	ra,204180f4 <eshup1>
204194d2:	10ec                	addi	a1,sp,108
204194d4:	1148                	addi	a0,sp,164
204194d6:	cdffe0ef          	jal	ra,204181b4 <eaddm>
204194da:	0a90                	addi	a2,sp,336
204194dc:	10ec                	addi	a1,sp,108
204194de:	0128                	addi	a0,sp,136
204194e0:	c0cff0ef          	jal	ra,204188ec <eiremain>
204194e4:	147d                	addi	s0,s0,-1
204194e6:	19c15483          	lhu	s1,412(sp)
204194ea:	b621                	j	20418ff2 <_ldtoa_r+0x27e>
204194ec:	03048493          	addi	s1,s1,48
204194f0:	02e00793          	li	a5,46
204194f4:	10910aa3          	sb	s1,277(sp)
204194f8:	10f10b23          	sb	a5,278(sp)
204194fc:	11710c13          	addi	s8,sp,279
20419500:	84e2                	mv	s1,s8
20419502:	418487b3          	sub	a5,s1,s8
20419506:	04f9d063          	ble	a5,s3,20419546 <_ldtoa_r+0x7d2>
2041950a:	19c15783          	lhu	a5,412(sp)
2041950e:	4711                	li	a4,4
20419510:	fff48c13          	addi	s8,s1,-1
20419514:	b2f75fe3          	ble	a5,a4,20419052 <_ldtoa_r+0x2de>
20419518:	4715                	li	a4,5
2041951a:	06e78463          	beq	a5,a4,20419582 <_ldtoa_r+0x80e>
2041951e:	87e2                	mv	a5,s8
20419520:	02e00613          	li	a2,46
20419524:	03800593          	li	a1,56
20419528:	03000693          	li	a3,48
2041952c:	17fd                	addi	a5,a5,-1
2041952e:	0007c703          	lbu	a4,0(a5)
20419532:	07f77713          	andi	a4,a4,127
20419536:	0809d163          	bgez	s3,204195b8 <_ldtoa_r+0x844>
2041953a:	03100713          	li	a4,49
2041953e:	00e78023          	sb	a4,0(a5)
20419542:	0405                	addi	s0,s0,1
20419544:	b639                	j	20419052 <_ldtoa_r+0x2de>
20419546:	10e8                	addi	a0,sp,108
20419548:	badfe0ef          	jal	ra,204180f4 <eshup1>
2041954c:	114c                	addi	a1,sp,164
2041954e:	10e8                	addi	a0,sp,108
20419550:	b29fe0ef          	jal	ra,20418078 <emovz>
20419554:	1148                	addi	a0,sp,164
20419556:	b9ffe0ef          	jal	ra,204180f4 <eshup1>
2041955a:	1148                	addi	a0,sp,164
2041955c:	b99fe0ef          	jal	ra,204180f4 <eshup1>
20419560:	10ec                	addi	a1,sp,108
20419562:	1148                	addi	a0,sp,164
20419564:	c51fe0ef          	jal	ra,204181b4 <eaddm>
20419568:	0a90                	addi	a2,sp,336
2041956a:	10ec                	addi	a1,sp,108
2041956c:	0128                	addi	a0,sp,136
2041956e:	b7eff0ef          	jal	ra,204188ec <eiremain>
20419572:	19c14783          	lbu	a5,412(sp)
20419576:	0485                	addi	s1,s1,1
20419578:	03078793          	addi	a5,a5,48
2041957c:	fef48fa3          	sb	a5,-1(s1)
20419580:	b749                	j	20419502 <_ldtoa_r+0x78e>
20419582:	012c                	addi	a1,sp,136
20419584:	10e8                	addi	a0,sp,108
20419586:	834ff0ef          	jal	ra,204185ba <emovo.isra.6>
2041958a:	158b0593          	addi	a1,s6,344
2041958e:	0128                	addi	a0,sp,136
20419590:	dcbfe0ef          	jal	ra,2041835a <ecmp>
20419594:	f549                	bnez	a0,2041951e <_ldtoa_r+0x7aa>
20419596:	aa09cee3          	bltz	s3,20419052 <_ldtoa_r+0x2de>
2041959a:	ffe4c783          	lbu	a5,-2(s1)
2041959e:	fd278793          	addi	a5,a5,-46
204195a2:	0017b793          	seqz	a5,a5
204195a6:	fff7c793          	not	a5,a5
204195aa:	97e2                	add	a5,a5,s8
204195ac:	0007c783          	lbu	a5,0(a5)
204195b0:	8b85                	andi	a5,a5,1
204195b2:	aa0780e3          	beqz	a5,20419052 <_ldtoa_r+0x2de>
204195b6:	b7a5                	j	2041951e <_ldtoa_r+0x7aa>
204195b8:	02c71063          	bne	a4,a2,204195d8 <_ldtoa_r+0x864>
204195bc:	fff7c703          	lbu	a4,-1(a5)
204195c0:	03800693          	li	a3,56
204195c4:	00e6e663          	bltu	a3,a4,204195d0 <_ldtoa_r+0x85c>
204195c8:	0705                	addi	a4,a4,1
204195ca:	fee78fa3          	sb	a4,-1(a5)
204195ce:	b451                	j	20419052 <_ldtoa_r+0x2de>
204195d0:	0405                	addi	s0,s0,1
204195d2:	03100713          	li	a4,49
204195d6:	bfd5                	j	204195ca <_ldtoa_r+0x856>
204195d8:	00e5e663          	bltu	a1,a4,204195e4 <_ldtoa_r+0x870>
204195dc:	0705                	addi	a4,a4,1
204195de:	00e78023          	sb	a4,0(a5)
204195e2:	bc85                	j	20419052 <_ldtoa_r+0x2de>
204195e4:	00d78023          	sb	a3,0(a5)
204195e8:	b791                	j	2041952c <_ldtoa_r+0x7b8>
204195ea:	0405                	addi	s0,s0,1
204195ec:	008ca023          	sw	s0,0(s9)
204195f0:	87ce                	mv	a5,s3
204195f2:	02e00693          	li	a3,46
204195f6:	0007c703          	lbu	a4,0(a5)
204195fa:	ef09                	bnez	a4,20419614 <_ldtoa_r+0x8a0>
204195fc:	04500713          	li	a4,69
20419600:	0007c683          	lbu	a3,0(a5)
20419604:	00e68463          	beq	a3,a4,2041960c <_ldtoa_r+0x898>
20419608:	02f9e363          	bltu	s3,a5,2041962e <_ldtoa_r+0x8ba>
2041960c:	00078023          	sb	zero,0(a5)
20419610:	863ff06f          	j	20418e72 <_ldtoa_r+0xfe>
20419614:	00d70963          	beq	a4,a3,20419626 <_ldtoa_r+0x8b2>
20419618:	0785                	addi	a5,a5,1
2041961a:	bff1                	j	204195f6 <_ldtoa_r+0x882>
2041961c:	0017c703          	lbu	a4,1(a5)
20419620:	0785                	addi	a5,a5,1
20419622:	fee78fa3          	sb	a4,-1(a5)
20419626:	0007c703          	lbu	a4,0(a5)
2041962a:	fb6d                	bnez	a4,2041961c <_ldtoa_r+0x8a8>
2041962c:	bfc1                	j	204195fc <_ldtoa_r+0x888>
2041962e:	17fd                	addi	a5,a5,-1
20419630:	bfc1                	j	20419600 <_ldtoa_r+0x88c>
20419632:	0785                	addi	a5,a5,1
20419634:	849ff06f          	j	20418e7c <_ldtoa_r+0x108>
20419638:	8436                	mv	s0,a3
2041963a:	851ff06f          	j	20418e8a <_ldtoa_r+0x116>
2041963e:	147d                	addi	s0,s0,-1
20419640:	00040023          	sb	zero,0(s0)
20419644:	86fff06f          	j	20418eb2 <_ldtoa_r+0x13e>
20419648:	0585                	addi	a1,a1,1
2041964a:	04ba2223          	sw	a1,68(s4)
2041964e:	0786                	slli	a5,a5,0x1
20419650:	8a1ff06f          	j	20418ef0 <_ldtoa_r+0x17c>
20419654:	67a1                	lui	a5,0x8
20419656:	17fd                	addi	a5,a5,-1
20419658:	a0f71be3          	bne	a4,a5,2041906e <_ldtoa_r+0x2fa>
2041965c:	46c2                	lw	a3,16(sp)
2041965e:	a00683e3          	beqz	a3,20419064 <_ldtoa_r+0x2f0>
20419662:	204225b7          	lui	a1,0x20422
20419666:	3b458593          	addi	a1,a1,948 # 204223b4 <emtens+0x10c>
2041966a:	fd2ff06f          	j	20418e3c <_ldtoa_r+0xc8>
2041966e:	47a9                	li	a5,10
20419670:	02a00993          	li	s3,42
20419674:	e6f49ce3          	bne	s1,a5,204194ec <_ldtoa_r+0x778>
20419678:	678d                	lui	a5,0x3
2041967a:	e3178793          	addi	a5,a5,-463 # 2e31 <__stack_size-0x11cf>
2041967e:	10f11aa3          	sh	a5,277(sp)
20419682:	02a00993          	li	s3,42
20419686:	ba65                	j	2041903e <_ldtoa_r+0x2ca>

20419688 <_ldcheck>:
20419688:	411c                	lw	a5,0(a0)
2041968a:	7139                	addi	sp,sp,-64
2041968c:	084c                	addi	a1,sp,20
2041968e:	c03e                	sw	a5,0(sp)
20419690:	415c                	lw	a5,4(a0)
20419692:	de06                	sw	ra,60(sp)
20419694:	c23e                	sw	a5,4(sp)
20419696:	451c                	lw	a5,8(a0)
20419698:	c43e                	sw	a5,8(sp)
2041969a:	455c                	lw	a5,12(a0)
2041969c:	850a                	mv	a0,sp
2041969e:	c63e                	sw	a5,12(sp)
204196a0:	f69fe0ef          	jal	ra,20418608 <e113toe.isra.8>
204196a4:	02615783          	lhu	a5,38(sp)
204196a8:	4501                	li	a0,0
204196aa:	fff7c793          	not	a5,a5
204196ae:	01179713          	slli	a4,a5,0x11
204196b2:	e719                	bnez	a4,204196c0 <_ldcheck+0x38>
204196b4:	0848                	addi	a0,sp,20
204196b6:	bc9fe0ef          	jal	ra,2041827e <eisnan>
204196ba:	00153513          	seqz	a0,a0
204196be:	0505                	addi	a0,a0,1
204196c0:	50f2                	lw	ra,60(sp)
204196c2:	6121                	addi	sp,sp,64
204196c4:	8082                	ret

204196c6 <__localeconv_l>:
204196c6:	0f050513          	addi	a0,a0,240
204196ca:	8082                	ret

204196cc <_localeconv_r>:
204196cc:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
204196d0:	5bc8                	lw	a0,52(a5)
204196d2:	e509                	bnez	a0,204196dc <_localeconv_r+0x10>
204196d4:	80000537          	lui	a0,0x80000
204196d8:	42850513          	addi	a0,a0,1064 # 80000428 <pulp__FC+0x80000429>
204196dc:	0f050513          	addi	a0,a0,240
204196e0:	8082                	ret

204196e2 <localeconv>:
204196e2:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
204196e6:	5bc8                	lw	a0,52(a5)
204196e8:	e509                	bnez	a0,204196f2 <localeconv+0x10>
204196ea:	80000537          	lui	a0,0x80000
204196ee:	42850513          	addi	a0,a0,1064 # 80000428 <pulp__FC+0x80000429>
204196f2:	0f050513          	addi	a0,a0,240
204196f6:	8082                	ret

204196f8 <__swhatbuf_r>:
204196f8:	711d                	addi	sp,sp,-96
204196fa:	caa6                	sw	s1,84(sp)
204196fc:	84ae                	mv	s1,a1
204196fe:	00e59583          	lh	a1,14(a1)
20419702:	cca2                	sw	s0,88(sp)
20419704:	ce86                	sw	ra,92(sp)
20419706:	8432                	mv	s0,a2
20419708:	0005dc63          	bgez	a1,20419720 <__swhatbuf_r+0x28>
2041970c:	00c4d783          	lhu	a5,12(s1)
20419710:	0006a023          	sw	zero,0(a3)
20419714:	0807f793          	andi	a5,a5,128
20419718:	eb95                	bnez	a5,2041974c <__swhatbuf_r+0x54>
2041971a:	40000793          	li	a5,1024
2041971e:	a80d                	j	20419750 <__swhatbuf_r+0x58>
20419720:	0850                	addi	a2,sp,20
20419722:	c636                	sw	a3,12(sp)
20419724:	294020ef          	jal	ra,2041b9b8 <_fstat_r>
20419728:	46b2                	lw	a3,12(sp)
2041972a:	fe0541e3          	bltz	a0,2041970c <__swhatbuf_r+0x14>
2041972e:	4762                	lw	a4,24(sp)
20419730:	67bd                	lui	a5,0xf
20419732:	6505                	lui	a0,0x1
20419734:	8ff9                	and	a5,a5,a4
20419736:	7779                	lui	a4,0xffffe
20419738:	97ba                	add	a5,a5,a4
2041973a:	0017b793          	seqz	a5,a5
2041973e:	c29c                	sw	a5,0(a3)
20419740:	40000793          	li	a5,1024
20419744:	c01c                	sw	a5,0(s0)
20419746:	80050513          	addi	a0,a0,-2048 # 800 <__stack_size-0x3800>
2041974a:	a029                	j	20419754 <__swhatbuf_r+0x5c>
2041974c:	04000793          	li	a5,64
20419750:	c01c                	sw	a5,0(s0)
20419752:	4501                	li	a0,0
20419754:	40f6                	lw	ra,92(sp)
20419756:	4466                	lw	s0,88(sp)
20419758:	44d6                	lw	s1,84(sp)
2041975a:	6125                	addi	sp,sp,96
2041975c:	8082                	ret

2041975e <__smakebuf_r>:
2041975e:	00c5d783          	lhu	a5,12(a1)
20419762:	1101                	addi	sp,sp,-32
20419764:	cc22                	sw	s0,24(sp)
20419766:	ce06                	sw	ra,28(sp)
20419768:	ca26                	sw	s1,20(sp)
2041976a:	c84a                	sw	s2,16(sp)
2041976c:	8b89                	andi	a5,a5,2
2041976e:	842e                	mv	s0,a1
20419770:	cf89                	beqz	a5,2041978a <__smakebuf_r+0x2c>
20419772:	04340793          	addi	a5,s0,67
20419776:	c01c                	sw	a5,0(s0)
20419778:	c81c                	sw	a5,16(s0)
2041977a:	4785                	li	a5,1
2041977c:	c85c                	sw	a5,20(s0)
2041977e:	40f2                	lw	ra,28(sp)
20419780:	4462                	lw	s0,24(sp)
20419782:	44d2                	lw	s1,20(sp)
20419784:	4942                	lw	s2,16(sp)
20419786:	6105                	addi	sp,sp,32
20419788:	8082                	ret
2041978a:	0074                	addi	a3,sp,12
2041978c:	0030                	addi	a2,sp,8
2041978e:	84aa                	mv	s1,a0
20419790:	37a5                	jal	204196f8 <__swhatbuf_r>
20419792:	45a2                	lw	a1,8(sp)
20419794:	892a                	mv	s2,a0
20419796:	8526                	mv	a0,s1
20419798:	2095                	jal	204197fc <_malloc_r>
2041979a:	ed01                	bnez	a0,204197b2 <__smakebuf_r+0x54>
2041979c:	00c41783          	lh	a5,12(s0)
204197a0:	2007f713          	andi	a4,a5,512
204197a4:	ff69                	bnez	a4,2041977e <__smakebuf_r+0x20>
204197a6:	9bf1                	andi	a5,a5,-4
204197a8:	0027e793          	ori	a5,a5,2
204197ac:	00f41623          	sh	a5,12(s0)
204197b0:	b7c9                	j	20419772 <__smakebuf_r+0x14>
204197b2:	204177b7          	lui	a5,0x20417
204197b6:	75078793          	addi	a5,a5,1872 # 20417750 <_cleanup_r>
204197ba:	dcdc                	sw	a5,60(s1)
204197bc:	00c45783          	lhu	a5,12(s0)
204197c0:	c008                	sw	a0,0(s0)
204197c2:	c808                	sw	a0,16(s0)
204197c4:	0807e793          	ori	a5,a5,128
204197c8:	00f41623          	sh	a5,12(s0)
204197cc:	47a2                	lw	a5,8(sp)
204197ce:	c85c                	sw	a5,20(s0)
204197d0:	47b2                	lw	a5,12(sp)
204197d2:	cf91                	beqz	a5,204197ee <__smakebuf_r+0x90>
204197d4:	00e41583          	lh	a1,14(s0)
204197d8:	8526                	mv	a0,s1
204197da:	20a020ef          	jal	ra,2041b9e4 <_isatty_r>
204197de:	c901                	beqz	a0,204197ee <__smakebuf_r+0x90>
204197e0:	00c45783          	lhu	a5,12(s0)
204197e4:	9bf1                	andi	a5,a5,-4
204197e6:	0017e793          	ori	a5,a5,1
204197ea:	00f41623          	sh	a5,12(s0)
204197ee:	00c45783          	lhu	a5,12(s0)
204197f2:	00f96933          	or	s2,s2,a5
204197f6:	01241623          	sh	s2,12(s0)
204197fa:	b751                	j	2041977e <__smakebuf_r+0x20>

204197fc <_malloc_r>:
204197fc:	7179                	addi	sp,sp,-48
204197fe:	d606                	sw	ra,44(sp)
20419800:	d422                	sw	s0,40(sp)
20419802:	d226                	sw	s1,36(sp)
20419804:	d04a                	sw	s2,32(sp)
20419806:	ce4e                	sw	s3,28(sp)
20419808:	cc52                	sw	s4,24(sp)
2041980a:	ca56                	sw	s5,20(sp)
2041980c:	c85a                	sw	s6,16(sp)
2041980e:	c65e                	sw	s7,12(sp)
20419810:	c462                	sw	s8,8(sp)
20419812:	00b58793          	addi	a5,a1,11
20419816:	4759                	li	a4,22
20419818:	02f77563          	bleu	a5,a4,20419842 <_malloc_r+0x46>
2041981c:	ff87f493          	andi	s1,a5,-8
20419820:	0204d263          	bgez	s1,20419844 <_malloc_r+0x48>
20419824:	47b1                	li	a5,12
20419826:	c11c                	sw	a5,0(a0)
20419828:	4501                	li	a0,0
2041982a:	50b2                	lw	ra,44(sp)
2041982c:	5422                	lw	s0,40(sp)
2041982e:	5492                	lw	s1,36(sp)
20419830:	5902                	lw	s2,32(sp)
20419832:	49f2                	lw	s3,28(sp)
20419834:	4a62                	lw	s4,24(sp)
20419836:	4ad2                	lw	s5,20(sp)
20419838:	4b42                	lw	s6,16(sp)
2041983a:	4bb2                	lw	s7,12(sp)
2041983c:	4c22                	lw	s8,8(sp)
2041983e:	6145                	addi	sp,sp,48
20419840:	8082                	ret
20419842:	44c1                	li	s1,16
20419844:	feb4e0e3          	bltu	s1,a1,20419824 <_malloc_r+0x28>
20419848:	89aa                	mv	s3,a0
2041984a:	214d                	jal	20419cec <__malloc_lock>
2041984c:	80000937          	lui	s2,0x80000
20419850:	1f700793          	li	a5,503
20419854:	59490913          	addi	s2,s2,1428 # 80000594 <pulp__FC+0x80000595>
20419858:	0297ec63          	bltu	a5,s1,20419890 <_malloc_r+0x94>
2041985c:	00848713          	addi	a4,s1,8
20419860:	974a                	add	a4,a4,s2
20419862:	4340                	lw	s0,4(a4)
20419864:	ff870693          	addi	a3,a4,-8 # ffffdff8 <pulp__FC+0xffffdff9>
20419868:	0034d793          	srli	a5,s1,0x3
2041986c:	00d41663          	bne	s0,a3,20419878 <_malloc_r+0x7c>
20419870:	4740                	lw	s0,12(a4)
20419872:	0789                	addi	a5,a5,2
20419874:	04870c63          	beq	a4,s0,204198cc <_malloc_r+0xd0>
20419878:	405c                	lw	a5,4(s0)
2041987a:	4458                	lw	a4,12(s0)
2041987c:	4414                	lw	a3,8(s0)
2041987e:	9bf1                	andi	a5,a5,-4
20419880:	97a2                	add	a5,a5,s0
20419882:	c6d8                	sw	a4,12(a3)
20419884:	c714                	sw	a3,8(a4)
20419886:	43d8                	lw	a4,4(a5)
20419888:	00176713          	ori	a4,a4,1
2041988c:	c3d8                	sw	a4,4(a5)
2041988e:	a041                	j	2041990e <_malloc_r+0x112>
20419890:	0094d713          	srli	a4,s1,0x9
20419894:	03f00793          	li	a5,63
20419898:	cb01                	beqz	a4,204198a8 <_malloc_r+0xac>
2041989a:	4791                	li	a5,4
2041989c:	06e7ee63          	bltu	a5,a4,20419918 <_malloc_r+0x11c>
204198a0:	0064d793          	srli	a5,s1,0x6
204198a4:	03878793          	addi	a5,a5,56
204198a8:	00178713          	addi	a4,a5,1
204198ac:	070e                	slli	a4,a4,0x3
204198ae:	974a                	add	a4,a4,s2
204198b0:	4340                	lw	s0,4(a4)
204198b2:	ff870593          	addi	a1,a4,-8
204198b6:	453d                	li	a0,15
204198b8:	00b40963          	beq	s0,a1,204198ca <_malloc_r+0xce>
204198bc:	4058                	lw	a4,4(s0)
204198be:	9b71                	andi	a4,a4,-4
204198c0:	40970633          	sub	a2,a4,s1
204198c4:	08c55d63          	ble	a2,a0,2041995e <_malloc_r+0x162>
204198c8:	17fd                	addi	a5,a5,-1
204198ca:	0785                	addi	a5,a5,1
204198cc:	01092403          	lw	s0,16(s2)
204198d0:	800005b7          	lui	a1,0x80000
204198d4:	00890693          	addi	a3,s2,8
204198d8:	59c58593          	addi	a1,a1,1436 # 8000059c <pulp__FC+0x8000059d>
204198dc:	0ed40263          	beq	s0,a3,204199c0 <_malloc_r+0x1c4>
204198e0:	4058                	lw	a4,4(s0)
204198e2:	463d                	li	a2,15
204198e4:	9b71                	andi	a4,a4,-4
204198e6:	40970533          	sub	a0,a4,s1
204198ea:	08a65563          	ble	a0,a2,20419974 <_malloc_r+0x178>
204198ee:	0014e793          	ori	a5,s1,1
204198f2:	c05c                	sw	a5,4(s0)
204198f4:	00940633          	add	a2,s0,s1
204198f8:	00c92a23          	sw	a2,20(s2)
204198fc:	00c92823          	sw	a2,16(s2)
20419900:	00156793          	ori	a5,a0,1
20419904:	c654                	sw	a3,12(a2)
20419906:	c614                	sw	a3,8(a2)
20419908:	c25c                	sw	a5,4(a2)
2041990a:	9722                	add	a4,a4,s0
2041990c:	c308                	sw	a0,0(a4)
2041990e:	854e                	mv	a0,s3
20419910:	2ef9                	jal	20419cee <__malloc_unlock>
20419912:	00840513          	addi	a0,s0,8
20419916:	bf11                	j	2041982a <_malloc_r+0x2e>
20419918:	47d1                	li	a5,20
2041991a:	00e7e563          	bltu	a5,a4,20419924 <_malloc_r+0x128>
2041991e:	05b70793          	addi	a5,a4,91
20419922:	b759                	j	204198a8 <_malloc_r+0xac>
20419924:	05400793          	li	a5,84
20419928:	00e7e763          	bltu	a5,a4,20419936 <_malloc_r+0x13a>
2041992c:	00c4d793          	srli	a5,s1,0xc
20419930:	06e78793          	addi	a5,a5,110
20419934:	bf95                	j	204198a8 <_malloc_r+0xac>
20419936:	15400793          	li	a5,340
2041993a:	00e7e763          	bltu	a5,a4,20419948 <_malloc_r+0x14c>
2041993e:	00f4d793          	srli	a5,s1,0xf
20419942:	07778793          	addi	a5,a5,119
20419946:	b78d                	j	204198a8 <_malloc_r+0xac>
20419948:	55400693          	li	a3,1364
2041994c:	07e00793          	li	a5,126
20419950:	f4e6ece3          	bltu	a3,a4,204198a8 <_malloc_r+0xac>
20419954:	0124d793          	srli	a5,s1,0x12
20419958:	07c78793          	addi	a5,a5,124
2041995c:	b7b1                	j	204198a8 <_malloc_r+0xac>
2041995e:	4454                	lw	a3,12(s0)
20419960:	00064863          	bltz	a2,20419970 <_malloc_r+0x174>
20419964:	441c                	lw	a5,8(s0)
20419966:	c7d4                	sw	a3,12(a5)
20419968:	c69c                	sw	a5,8(a3)
2041996a:	00e407b3          	add	a5,s0,a4
2041996e:	bf21                	j	20419886 <_malloc_r+0x8a>
20419970:	8436                	mv	s0,a3
20419972:	b799                	j	204198b8 <_malloc_r+0xbc>
20419974:	00d92a23          	sw	a3,20(s2)
20419978:	00d92823          	sw	a3,16(s2)
2041997c:	00054863          	bltz	a0,2041998c <_malloc_r+0x190>
20419980:	9722                	add	a4,a4,s0
20419982:	435c                	lw	a5,4(a4)
20419984:	0017e793          	ori	a5,a5,1
20419988:	c35c                	sw	a5,4(a4)
2041998a:	b751                	j	2041990e <_malloc_r+0x112>
2041998c:	1ff00693          	li	a3,511
20419990:	00492803          	lw	a6,4(s2)
20419994:	10e6ef63          	bltu	a3,a4,20419ab2 <_malloc_r+0x2b6>
20419998:	830d                	srli	a4,a4,0x3
2041999a:	40275613          	srai	a2,a4,0x2
2041999e:	4685                	li	a3,1
204199a0:	0705                	addi	a4,a4,1
204199a2:	00c696b3          	sll	a3,a3,a2
204199a6:	070e                	slli	a4,a4,0x3
204199a8:	974a                	add	a4,a4,s2
204199aa:	0106e6b3          	or	a3,a3,a6
204199ae:	00d92223          	sw	a3,4(s2)
204199b2:	4314                	lw	a3,0(a4)
204199b4:	ff870613          	addi	a2,a4,-8
204199b8:	c450                	sw	a2,12(s0)
204199ba:	c414                	sw	a3,8(s0)
204199bc:	c300                	sw	s0,0(a4)
204199be:	c6c0                	sw	s0,12(a3)
204199c0:	4027d713          	srai	a4,a5,0x2
204199c4:	4305                	li	t1,1
204199c6:	00e31333          	sll	t1,t1,a4
204199ca:	00492703          	lw	a4,4(s2)
204199ce:	04676c63          	bltu	a4,t1,20419a26 <_malloc_r+0x22a>
204199d2:	006776b3          	and	a3,a4,t1
204199d6:	e699                	bnez	a3,204199e4 <_malloc_r+0x1e8>
204199d8:	9bf1                	andi	a5,a5,-4
204199da:	0306                	slli	t1,t1,0x1
204199dc:	006776b3          	and	a3,a4,t1
204199e0:	0791                	addi	a5,a5,4
204199e2:	dee5                	beqz	a3,204199da <_malloc_r+0x1de>
204199e4:	4e3d                	li	t3,15
204199e6:	00379693          	slli	a3,a5,0x3
204199ea:	96ca                	add	a3,a3,s2
204199ec:	8836                	mv	a6,a3
204199ee:	853e                	mv	a0,a5
204199f0:	00c82403          	lw	s0,12(a6)
204199f4:	15041a63          	bne	s0,a6,20419b48 <_malloc_r+0x34c>
204199f8:	0505                	addi	a0,a0,1
204199fa:	00357713          	andi	a4,a0,3
204199fe:	0821                	addi	a6,a6,8
20419a00:	fb65                	bnez	a4,204199f0 <_malloc_r+0x1f4>
20419a02:	0037f713          	andi	a4,a5,3
20419a06:	18071a63          	bnez	a4,20419b9a <_malloc_r+0x39e>
20419a0a:	00492703          	lw	a4,4(s2)
20419a0e:	fff34793          	not	a5,t1
20419a12:	8ff9                	and	a5,a5,a4
20419a14:	00f92223          	sw	a5,4(s2)
20419a18:	00492703          	lw	a4,4(s2)
20419a1c:	0306                	slli	t1,t1,0x1
20419a1e:	00676463          	bltu	a4,t1,20419a26 <_malloc_r+0x22a>
20419a22:	18031963          	bnez	t1,20419bb4 <_malloc_r+0x3b8>
20419a26:	00892b83          	lw	s7,8(s2)
20419a2a:	004ba403          	lw	s0,4(s7) # 80000004 <pulp__FC+0x80000005>
20419a2e:	ffc47a93          	andi	s5,s0,-4
20419a32:	009ae763          	bltu	s5,s1,20419a40 <_malloc_r+0x244>
20419a36:	409a8733          	sub	a4,s5,s1
20419a3a:	47bd                	li	a5,15
20419a3c:	24e7c263          	blt	a5,a4,20419c80 <_malloc_r+0x484>
20419a40:	8cc1a403          	lw	s0,-1844(gp) # 80000a6c <__malloc_top_pad>
20419a44:	89c1a703          	lw	a4,-1892(gp) # 80000a3c <__malloc_sbrk_base>
20419a48:	57fd                	li	a5,-1
20419a4a:	9426                	add	s0,s0,s1
20419a4c:	16f71663          	bne	a4,a5,20419bb8 <_malloc_r+0x3bc>
20419a50:	0441                	addi	s0,s0,16
20419a52:	85a2                	mv	a1,s0
20419a54:	854e                	mv	a0,s3
20419a56:	77b000ef          	jal	ra,2041a9d0 <_sbrk_r>
20419a5a:	57fd                	li	a5,-1
20419a5c:	8b2a                	mv	s6,a0
20419a5e:	1cf50763          	beq	a0,a5,20419c2c <_malloc_r+0x430>
20419a62:	015b87b3          	add	a5,s7,s5
20419a66:	00f57463          	bleu	a5,a0,20419a6e <_malloc_r+0x272>
20419a6a:	1d2b9163          	bne	s7,s2,20419c2c <_malloc_r+0x430>
20419a6e:	d1c18693          	addi	a3,gp,-740 # 80000ebc <__malloc_current_mallinfo>
20419a72:	4298                	lw	a4,0(a3)
20419a74:	d1c18c13          	addi	s8,gp,-740 # 80000ebc <__malloc_current_mallinfo>
20419a78:	9722                	add	a4,a4,s0
20419a7a:	c298                	sw	a4,0(a3)
20419a7c:	15679463          	bne	a5,s6,20419bc4 <_malloc_r+0x3c8>
20419a80:	01479693          	slli	a3,a5,0x14
20419a84:	14069063          	bnez	a3,20419bc4 <_malloc_r+0x3c8>
20419a88:	00892783          	lw	a5,8(s2)
20419a8c:	9456                	add	s0,s0,s5
20419a8e:	00146413          	ori	s0,s0,1
20419a92:	c3c0                	sw	s0,4(a5)
20419a94:	000c2783          	lw	a5,0(s8) # fffff000 <pulp__FC+0xfffff001>
20419a98:	8c81a683          	lw	a3,-1848(gp) # 80000a68 <__malloc_max_sbrked_mem>
20419a9c:	00f6f463          	bleu	a5,a3,20419aa4 <_malloc_r+0x2a8>
20419aa0:	8cf1a423          	sw	a5,-1848(gp) # 80000a68 <__malloc_max_sbrked_mem>
20419aa4:	8c41a683          	lw	a3,-1852(gp) # 80000a64 <__malloc_max_total_mem>
20419aa8:	18f6f263          	bleu	a5,a3,20419c2c <_malloc_r+0x430>
20419aac:	8cf1a223          	sw	a5,-1852(gp) # 80000a64 <__malloc_max_total_mem>
20419ab0:	aab5                	j	20419c2c <_malloc_r+0x430>
20419ab2:	00975613          	srli	a2,a4,0x9
20419ab6:	4691                	li	a3,4
20419ab8:	02c6ec63          	bltu	a3,a2,20419af0 <_malloc_r+0x2f4>
20419abc:	00675693          	srli	a3,a4,0x6
20419ac0:	03868693          	addi	a3,a3,56
20419ac4:	00168613          	addi	a2,a3,1
20419ac8:	060e                	slli	a2,a2,0x3
20419aca:	964a                	add	a2,a2,s2
20419acc:	ff860513          	addi	a0,a2,-8
20419ad0:	4210                	lw	a2,0(a2)
20419ad2:	06c51563          	bne	a0,a2,20419b3c <_malloc_r+0x340>
20419ad6:	8689                	srai	a3,a3,0x2
20419ad8:	4705                	li	a4,1
20419ada:	00d716b3          	sll	a3,a4,a3
20419ade:	0106e6b3          	or	a3,a3,a6
20419ae2:	00d92223          	sw	a3,4(s2)
20419ae6:	c448                	sw	a0,12(s0)
20419ae8:	c410                	sw	a2,8(s0)
20419aea:	c500                	sw	s0,8(a0)
20419aec:	c640                	sw	s0,12(a2)
20419aee:	bdc9                	j	204199c0 <_malloc_r+0x1c4>
20419af0:	46d1                	li	a3,20
20419af2:	00c6e563          	bltu	a3,a2,20419afc <_malloc_r+0x300>
20419af6:	05b60693          	addi	a3,a2,91
20419afa:	b7e9                	j	20419ac4 <_malloc_r+0x2c8>
20419afc:	05400693          	li	a3,84
20419b00:	00c6e763          	bltu	a3,a2,20419b0e <_malloc_r+0x312>
20419b04:	00c75693          	srli	a3,a4,0xc
20419b08:	06e68693          	addi	a3,a3,110
20419b0c:	bf65                	j	20419ac4 <_malloc_r+0x2c8>
20419b0e:	15400693          	li	a3,340
20419b12:	00c6e763          	bltu	a3,a2,20419b20 <_malloc_r+0x324>
20419b16:	00f75693          	srli	a3,a4,0xf
20419b1a:	07768693          	addi	a3,a3,119
20419b1e:	b75d                	j	20419ac4 <_malloc_r+0x2c8>
20419b20:	55400513          	li	a0,1364
20419b24:	07e00693          	li	a3,126
20419b28:	f8c56ee3          	bltu	a0,a2,20419ac4 <_malloc_r+0x2c8>
20419b2c:	01275693          	srli	a3,a4,0x12
20419b30:	07c68693          	addi	a3,a3,124
20419b34:	bf41                	j	20419ac4 <_malloc_r+0x2c8>
20419b36:	4610                	lw	a2,8(a2)
20419b38:	00c50663          	beq	a0,a2,20419b44 <_malloc_r+0x348>
20419b3c:	4254                	lw	a3,4(a2)
20419b3e:	9af1                	andi	a3,a3,-4
20419b40:	fed76be3          	bltu	a4,a3,20419b36 <_malloc_r+0x33a>
20419b44:	4648                	lw	a0,12(a2)
20419b46:	b745                	j	20419ae6 <_malloc_r+0x2ea>
20419b48:	4058                	lw	a4,4(s0)
20419b4a:	4450                	lw	a2,12(s0)
20419b4c:	9b71                	andi	a4,a4,-4
20419b4e:	409708b3          	sub	a7,a4,s1
20419b52:	031e5763          	ble	a7,t3,20419b80 <_malloc_r+0x384>
20419b56:	0014e793          	ori	a5,s1,1
20419b5a:	c05c                	sw	a5,4(s0)
20419b5c:	441c                	lw	a5,8(s0)
20419b5e:	009406b3          	add	a3,s0,s1
20419b62:	9722                	add	a4,a4,s0
20419b64:	c7d0                	sw	a2,12(a5)
20419b66:	c61c                	sw	a5,8(a2)
20419b68:	00d92a23          	sw	a3,20(s2)
20419b6c:	00d92823          	sw	a3,16(s2)
20419b70:	0018e793          	ori	a5,a7,1
20419b74:	c6cc                	sw	a1,12(a3)
20419b76:	c68c                	sw	a1,8(a3)
20419b78:	c2dc                	sw	a5,4(a3)
20419b7a:	01172023          	sw	a7,0(a4)
20419b7e:	bb41                	j	2041990e <_malloc_r+0x112>
20419b80:	0008cb63          	bltz	a7,20419b96 <_malloc_r+0x39a>
20419b84:	9722                	add	a4,a4,s0
20419b86:	435c                	lw	a5,4(a4)
20419b88:	0017e793          	ori	a5,a5,1
20419b8c:	c35c                	sw	a5,4(a4)
20419b8e:	441c                	lw	a5,8(s0)
20419b90:	c7d0                	sw	a2,12(a5)
20419b92:	c61c                	sw	a5,8(a2)
20419b94:	bbad                	j	2041990e <_malloc_r+0x112>
20419b96:	8432                	mv	s0,a2
20419b98:	bdb1                	j	204199f4 <_malloc_r+0x1f8>
20419b9a:	ff868713          	addi	a4,a3,-8
20419b9e:	4294                	lw	a3,0(a3)
20419ba0:	17fd                	addi	a5,a5,-1
20419ba2:	e6e680e3          	beq	a3,a4,20419a02 <_malloc_r+0x206>
20419ba6:	bd8d                	j	20419a18 <_malloc_r+0x21c>
20419ba8:	0791                	addi	a5,a5,4
20419baa:	0306                	slli	t1,t1,0x1
20419bac:	006776b3          	and	a3,a4,t1
20419bb0:	dee5                	beqz	a3,20419ba8 <_malloc_r+0x3ac>
20419bb2:	bd15                	j	204199e6 <_malloc_r+0x1ea>
20419bb4:	87aa                	mv	a5,a0
20419bb6:	bfdd                	j	20419bac <_malloc_r+0x3b0>
20419bb8:	6785                	lui	a5,0x1
20419bba:	07bd                	addi	a5,a5,15
20419bbc:	943e                	add	s0,s0,a5
20419bbe:	77fd                	lui	a5,0xfffff
20419bc0:	8c7d                	and	s0,s0,a5
20419bc2:	bd41                	j	20419a52 <_malloc_r+0x256>
20419bc4:	89c1a603          	lw	a2,-1892(gp) # 80000a3c <__malloc_sbrk_base>
20419bc8:	56fd                	li	a3,-1
20419bca:	06d61f63          	bne	a2,a3,20419c48 <_malloc_r+0x44c>
20419bce:	8961ae23          	sw	s6,-1892(gp) # 80000a3c <__malloc_sbrk_base>
20419bd2:	007b7593          	andi	a1,s6,7
20419bd6:	c589                	beqz	a1,20419be0 <_malloc_r+0x3e4>
20419bd8:	47a1                	li	a5,8
20419bda:	40b785b3          	sub	a1,a5,a1
20419bde:	9b2e                	add	s6,s6,a1
20419be0:	6785                	lui	a5,0x1
20419be2:	95be                	add	a1,a1,a5
20419be4:	945a                	add	s0,s0,s6
20419be6:	17fd                	addi	a5,a5,-1
20419be8:	8c7d                	and	s0,s0,a5
20419bea:	40858a33          	sub	s4,a1,s0
20419bee:	85d2                	mv	a1,s4
20419bf0:	854e                	mv	a0,s3
20419bf2:	5df000ef          	jal	ra,2041a9d0 <_sbrk_r>
20419bf6:	57fd                	li	a5,-1
20419bf8:	00f51463          	bne	a0,a5,20419c00 <_malloc_r+0x404>
20419bfc:	855a                	mv	a0,s6
20419bfe:	4a01                	li	s4,0
20419c00:	000c2783          	lw	a5,0(s8)
20419c04:	41650533          	sub	a0,a0,s6
20419c08:	01692423          	sw	s6,8(s2)
20419c0c:	97d2                	add	a5,a5,s4
20419c0e:	9a2a                	add	s4,s4,a0
20419c10:	001a6a13          	ori	s4,s4,1
20419c14:	00fc2023          	sw	a5,0(s8)
20419c18:	014b2223          	sw	s4,4(s6)
20419c1c:	e72b8ce3          	beq	s7,s2,20419a94 <_malloc_r+0x298>
20419c20:	473d                	li	a4,15
20419c22:	03576963          	bltu	a4,s5,20419c54 <_malloc_r+0x458>
20419c26:	4785                	li	a5,1
20419c28:	00fb2223          	sw	a5,4(s6)
20419c2c:	00892783          	lw	a5,8(s2)
20419c30:	43dc                	lw	a5,4(a5)
20419c32:	9bf1                	andi	a5,a5,-4
20419c34:	40978733          	sub	a4,a5,s1
20419c38:	0097e563          	bltu	a5,s1,20419c42 <_malloc_r+0x446>
20419c3c:	47bd                	li	a5,15
20419c3e:	04e7c163          	blt	a5,a4,20419c80 <_malloc_r+0x484>
20419c42:	854e                	mv	a0,s3
20419c44:	206d                	jal	20419cee <__malloc_unlock>
20419c46:	b6cd                	j	20419828 <_malloc_r+0x2c>
20419c48:	40fb07b3          	sub	a5,s6,a5
20419c4c:	97ba                	add	a5,a5,a4
20419c4e:	00fc2023          	sw	a5,0(s8)
20419c52:	b741                	j	20419bd2 <_malloc_r+0x3d6>
20419c54:	004ba783          	lw	a5,4(s7)
20419c58:	ff4a8413          	addi	s0,s5,-12
20419c5c:	9861                	andi	s0,s0,-8
20419c5e:	8b85                	andi	a5,a5,1
20419c60:	8fc1                	or	a5,a5,s0
20419c62:	00fba223          	sw	a5,4(s7)
20419c66:	4695                	li	a3,5
20419c68:	008b87b3          	add	a5,s7,s0
20419c6c:	c3d4                	sw	a3,4(a5)
20419c6e:	c794                	sw	a3,8(a5)
20419c70:	e28772e3          	bleu	s0,a4,20419a94 <_malloc_r+0x298>
20419c74:	008b8593          	addi	a1,s7,8
20419c78:	854e                	mv	a0,s3
20419c7a:	e6bfd0ef          	jal	ra,20417ae4 <_free_r>
20419c7e:	bd19                	j	20419a94 <_malloc_r+0x298>
20419c80:	00892403          	lw	s0,8(s2)
20419c84:	0014e793          	ori	a5,s1,1
20419c88:	c05c                	sw	a5,4(s0)
20419c8a:	009407b3          	add	a5,s0,s1
20419c8e:	00f92423          	sw	a5,8(s2)
20419c92:	bedd                	j	20419888 <_malloc_r+0x8c>

20419c94 <memchr>:
20419c94:	0ff5f593          	andi	a1,a1,255
20419c98:	962a                	add	a2,a2,a0
20419c9a:	00c51463          	bne	a0,a2,20419ca2 <memchr+0xe>
20419c9e:	4501                	li	a0,0
20419ca0:	8082                	ret
20419ca2:	00054783          	lbu	a5,0(a0)
20419ca6:	feb78de3          	beq	a5,a1,20419ca0 <memchr+0xc>
20419caa:	0505                	addi	a0,a0,1
20419cac:	b7fd                	j	20419c9a <memchr+0x6>

20419cae <memmove>:
20419cae:	00c50733          	add	a4,a0,a2
20419cb2:	00a5e663          	bltu	a1,a0,20419cbe <memmove+0x10>
20419cb6:	87aa                	mv	a5,a0
20419cb8:	02f71363          	bne	a4,a5,20419cde <memmove+0x30>
20419cbc:	8082                	ret
20419cbe:	00c587b3          	add	a5,a1,a2
20419cc2:	8e1d                	sub	a2,a2,a5
20419cc4:	fef579e3          	bleu	a5,a0,20419cb6 <memmove+0x8>
20419cc8:	00c786b3          	add	a3,a5,a2
20419ccc:	e291                	bnez	a3,20419cd0 <memmove+0x22>
20419cce:	8082                	ret
20419cd0:	17fd                	addi	a5,a5,-1
20419cd2:	0007c683          	lbu	a3,0(a5) # 1000 <__stack_size-0x3000>
20419cd6:	177d                	addi	a4,a4,-1
20419cd8:	00d70023          	sb	a3,0(a4)
20419cdc:	b7f5                	j	20419cc8 <memmove+0x1a>
20419cde:	0585                	addi	a1,a1,1
20419ce0:	fff5c683          	lbu	a3,-1(a1)
20419ce4:	0785                	addi	a5,a5,1
20419ce6:	fed78fa3          	sb	a3,-1(a5)
20419cea:	b7f9                	j	20419cb8 <memmove+0xa>

20419cec <__malloc_lock>:
20419cec:	8082                	ret

20419cee <__malloc_unlock>:
20419cee:	8082                	ret

20419cf0 <_Balloc>:
20419cf0:	457c                	lw	a5,76(a0)
20419cf2:	1141                	addi	sp,sp,-16
20419cf4:	c226                	sw	s1,4(sp)
20419cf6:	c04a                	sw	s2,0(sp)
20419cf8:	c606                	sw	ra,12(sp)
20419cfa:	c422                	sw	s0,8(sp)
20419cfc:	84aa                	mv	s1,a0
20419cfe:	892e                	mv	s2,a1
20419d00:	c795                	beqz	a5,20419d2c <_Balloc+0x3c>
20419d02:	44f8                	lw	a4,76(s1)
20419d04:	00291793          	slli	a5,s2,0x2
20419d08:	97ba                	add	a5,a5,a4
20419d0a:	4388                	lw	a0,0(a5)
20419d0c:	ed15                	bnez	a0,20419d48 <_Balloc+0x58>
20419d0e:	4405                	li	s0,1
20419d10:	01241433          	sll	s0,s0,s2
20419d14:	00540613          	addi	a2,s0,5
20419d18:	060a                	slli	a2,a2,0x2
20419d1a:	4585                	li	a1,1
20419d1c:	8526                	mv	a0,s1
20419d1e:	363010ef          	jal	ra,2041b880 <_calloc_r>
20419d22:	cd01                	beqz	a0,20419d3a <_Balloc+0x4a>
20419d24:	01252223          	sw	s2,4(a0)
20419d28:	c500                	sw	s0,8(a0)
20419d2a:	a00d                	j	20419d4c <_Balloc+0x5c>
20419d2c:	02100613          	li	a2,33
20419d30:	4591                	li	a1,4
20419d32:	34f010ef          	jal	ra,2041b880 <_calloc_r>
20419d36:	c4e8                	sw	a0,76(s1)
20419d38:	f569                	bnez	a0,20419d02 <_Balloc+0x12>
20419d3a:	4501                	li	a0,0
20419d3c:	40b2                	lw	ra,12(sp)
20419d3e:	4422                	lw	s0,8(sp)
20419d40:	4492                	lw	s1,4(sp)
20419d42:	4902                	lw	s2,0(sp)
20419d44:	0141                	addi	sp,sp,16
20419d46:	8082                	ret
20419d48:	4118                	lw	a4,0(a0)
20419d4a:	c398                	sw	a4,0(a5)
20419d4c:	00052823          	sw	zero,16(a0)
20419d50:	00052623          	sw	zero,12(a0)
20419d54:	b7e5                	j	20419d3c <_Balloc+0x4c>

20419d56 <_Bfree>:
20419d56:	c989                	beqz	a1,20419d68 <_Bfree+0x12>
20419d58:	41dc                	lw	a5,4(a1)
20419d5a:	00279713          	slli	a4,a5,0x2
20419d5e:	457c                	lw	a5,76(a0)
20419d60:	97ba                	add	a5,a5,a4
20419d62:	4398                	lw	a4,0(a5)
20419d64:	c198                	sw	a4,0(a1)
20419d66:	c38c                	sw	a1,0(a5)
20419d68:	8082                	ret

20419d6a <__multadd>:
20419d6a:	7179                	addi	sp,sp,-48
20419d6c:	ce4e                	sw	s3,28(sp)
20419d6e:	89aa                	mv	s3,a0
20419d70:	6541                	lui	a0,0x10
20419d72:	d422                	sw	s0,40(sp)
20419d74:	d226                	sw	s1,36(sp)
20419d76:	842e                	mv	s0,a1
20419d78:	4984                	lw	s1,16(a1)
20419d7a:	d606                	sw	ra,44(sp)
20419d7c:	d04a                	sw	s2,32(sp)
20419d7e:	05d1                	addi	a1,a1,20
20419d80:	4801                	li	a6,0
20419d82:	157d                	addi	a0,a0,-1
20419d84:	419c                	lw	a5,0(a1)
20419d86:	0591                	addi	a1,a1,4
20419d88:	0805                	addi	a6,a6,1
20419d8a:	00a7f733          	and	a4,a5,a0
20419d8e:	02c70733          	mul	a4,a4,a2
20419d92:	83c1                	srli	a5,a5,0x10
20419d94:	02c787b3          	mul	a5,a5,a2
20419d98:	9736                	add	a4,a4,a3
20419d9a:	01075693          	srli	a3,a4,0x10
20419d9e:	8f69                	and	a4,a4,a0
20419da0:	97b6                	add	a5,a5,a3
20419da2:	0107d693          	srli	a3,a5,0x10
20419da6:	07c2                	slli	a5,a5,0x10
20419da8:	97ba                	add	a5,a5,a4
20419daa:	fef5ae23          	sw	a5,-4(a1)
20419dae:	fc984be3          	blt	a6,s1,20419d84 <__multadd+0x1a>
20419db2:	ce95                	beqz	a3,20419dee <__multadd+0x84>
20419db4:	441c                	lw	a5,8(s0)
20419db6:	02f4c563          	blt	s1,a5,20419de0 <__multadd+0x76>
20419dba:	404c                	lw	a1,4(s0)
20419dbc:	854e                	mv	a0,s3
20419dbe:	c636                	sw	a3,12(sp)
20419dc0:	0585                	addi	a1,a1,1
20419dc2:	373d                	jal	20419cf0 <_Balloc>
20419dc4:	4810                	lw	a2,16(s0)
20419dc6:	00c40593          	addi	a1,s0,12
20419dca:	892a                	mv	s2,a0
20419dcc:	0609                	addi	a2,a2,2
20419dce:	060a                	slli	a2,a2,0x2
20419dd0:	0531                	addi	a0,a0,12
20419dd2:	f02f90ef          	jal	ra,204134d4 <memcpy>
20419dd6:	85a2                	mv	a1,s0
20419dd8:	854e                	mv	a0,s3
20419dda:	3fb5                	jal	20419d56 <_Bfree>
20419ddc:	46b2                	lw	a3,12(sp)
20419dde:	844a                	mv	s0,s2
20419de0:	00448793          	addi	a5,s1,4
20419de4:	078a                	slli	a5,a5,0x2
20419de6:	97a2                	add	a5,a5,s0
20419de8:	c3d4                	sw	a3,4(a5)
20419dea:	0485                	addi	s1,s1,1
20419dec:	c804                	sw	s1,16(s0)
20419dee:	8522                	mv	a0,s0
20419df0:	50b2                	lw	ra,44(sp)
20419df2:	5422                	lw	s0,40(sp)
20419df4:	5492                	lw	s1,36(sp)
20419df6:	5902                	lw	s2,32(sp)
20419df8:	49f2                	lw	s3,28(sp)
20419dfa:	6145                	addi	sp,sp,48
20419dfc:	8082                	ret

20419dfe <__s2b>:
20419dfe:	7179                	addi	sp,sp,-48
20419e00:	00868793          	addi	a5,a3,8
20419e04:	cc52                	sw	s4,24(sp)
20419e06:	8a36                	mv	s4,a3
20419e08:	46a5                	li	a3,9
20419e0a:	d422                	sw	s0,40(sp)
20419e0c:	d226                	sw	s1,36(sp)
20419e0e:	ce4e                	sw	s3,28(sp)
20419e10:	842e                	mv	s0,a1
20419e12:	02d7c7b3          	div	a5,a5,a3
20419e16:	d606                	sw	ra,44(sp)
20419e18:	d04a                	sw	s2,32(sp)
20419e1a:	ca56                	sw	s5,20(sp)
20419e1c:	89aa                	mv	s3,a0
20419e1e:	84b2                	mv	s1,a2
20419e20:	4685                	li	a3,1
20419e22:	4581                	li	a1,0
20419e24:	04f6cc63          	blt	a3,a5,20419e7c <__s2b+0x7e>
20419e28:	854e                	mv	a0,s3
20419e2a:	c63a                	sw	a4,12(sp)
20419e2c:	35d1                	jal	20419cf0 <_Balloc>
20419e2e:	4732                	lw	a4,12(sp)
20419e30:	4785                	li	a5,1
20419e32:	c91c                	sw	a5,16(a0)
20419e34:	c958                	sw	a4,20(a0)
20419e36:	47a5                	li	a5,9
20419e38:	0497d563          	ble	s1,a5,20419e82 <__s2b+0x84>
20419e3c:	00940a93          	addi	s5,s0,9
20419e40:	8956                	mv	s2,s5
20419e42:	9426                	add	s0,s0,s1
20419e44:	0905                	addi	s2,s2,1
20419e46:	fff94683          	lbu	a3,-1(s2)
20419e4a:	85aa                	mv	a1,a0
20419e4c:	4629                	li	a2,10
20419e4e:	fd068693          	addi	a3,a3,-48
20419e52:	854e                	mv	a0,s3
20419e54:	3f19                	jal	20419d6a <__multadd>
20419e56:	fe8917e3          	bne	s2,s0,20419e44 <__s2b+0x46>
20419e5a:	ff848413          	addi	s0,s1,-8
20419e5e:	9456                	add	s0,s0,s5
20419e60:	8c81                	sub	s1,s1,s0
20419e62:	009407b3          	add	a5,s0,s1
20419e66:	0347c163          	blt	a5,s4,20419e88 <__s2b+0x8a>
20419e6a:	50b2                	lw	ra,44(sp)
20419e6c:	5422                	lw	s0,40(sp)
20419e6e:	5492                	lw	s1,36(sp)
20419e70:	5902                	lw	s2,32(sp)
20419e72:	49f2                	lw	s3,28(sp)
20419e74:	4a62                	lw	s4,24(sp)
20419e76:	4ad2                	lw	s5,20(sp)
20419e78:	6145                	addi	sp,sp,48
20419e7a:	8082                	ret
20419e7c:	0686                	slli	a3,a3,0x1
20419e7e:	0585                	addi	a1,a1,1
20419e80:	b755                	j	20419e24 <__s2b+0x26>
20419e82:	0429                	addi	s0,s0,10
20419e84:	44a5                	li	s1,9
20419e86:	bfe9                	j	20419e60 <__s2b+0x62>
20419e88:	0405                	addi	s0,s0,1
20419e8a:	fff44683          	lbu	a3,-1(s0)
20419e8e:	85aa                	mv	a1,a0
20419e90:	4629                	li	a2,10
20419e92:	fd068693          	addi	a3,a3,-48
20419e96:	854e                	mv	a0,s3
20419e98:	3dc9                	jal	20419d6a <__multadd>
20419e9a:	b7e1                	j	20419e62 <__s2b+0x64>

20419e9c <__hi0bits>:
20419e9c:	7741                	lui	a4,0xffff0
20419e9e:	8f69                	and	a4,a4,a0
20419ea0:	87aa                	mv	a5,a0
20419ea2:	4501                	li	a0,0
20419ea4:	e319                	bnez	a4,20419eaa <__hi0bits+0xe>
20419ea6:	07c2                	slli	a5,a5,0x10
20419ea8:	4541                	li	a0,16
20419eaa:	ff000737          	lui	a4,0xff000
20419eae:	8f7d                	and	a4,a4,a5
20419eb0:	e319                	bnez	a4,20419eb6 <__hi0bits+0x1a>
20419eb2:	0521                	addi	a0,a0,8
20419eb4:	07a2                	slli	a5,a5,0x8
20419eb6:	f0000737          	lui	a4,0xf0000
20419eba:	8f7d                	and	a4,a4,a5
20419ebc:	e319                	bnez	a4,20419ec2 <__hi0bits+0x26>
20419ebe:	0511                	addi	a0,a0,4
20419ec0:	0792                	slli	a5,a5,0x4
20419ec2:	c0000737          	lui	a4,0xc0000
20419ec6:	8f7d                	and	a4,a4,a5
20419ec8:	e319                	bnez	a4,20419ece <__hi0bits+0x32>
20419eca:	0509                	addi	a0,a0,2
20419ecc:	078a                	slli	a5,a5,0x2
20419ece:	0007ca63          	bltz	a5,20419ee2 <__hi0bits+0x46>
20419ed2:	00179713          	slli	a4,a5,0x1
20419ed6:	00075463          	bgez	a4,20419ede <__hi0bits+0x42>
20419eda:	0505                	addi	a0,a0,1
20419edc:	8082                	ret
20419ede:	02000513          	li	a0,32
20419ee2:	8082                	ret

20419ee4 <__lo0bits>:
20419ee4:	411c                	lw	a5,0(a0)
20419ee6:	0077f713          	andi	a4,a5,7
20419eea:	c30d                	beqz	a4,20419f0c <__lo0bits+0x28>
20419eec:	0017f693          	andi	a3,a5,1
20419ef0:	4701                	li	a4,0
20419ef2:	e699                	bnez	a3,20419f00 <__lo0bits+0x1c>
20419ef4:	0027f713          	andi	a4,a5,2
20419ef8:	c711                	beqz	a4,20419f04 <__lo0bits+0x20>
20419efa:	8385                	srli	a5,a5,0x1
20419efc:	c11c                	sw	a5,0(a0)
20419efe:	4705                	li	a4,1
20419f00:	853a                	mv	a0,a4
20419f02:	8082                	ret
20419f04:	8389                	srli	a5,a5,0x2
20419f06:	c11c                	sw	a5,0(a0)
20419f08:	4709                	li	a4,2
20419f0a:	bfdd                	j	20419f00 <__lo0bits+0x1c>
20419f0c:	01079693          	slli	a3,a5,0x10
20419f10:	82c1                	srli	a3,a3,0x10
20419f12:	4701                	li	a4,0
20419f14:	e299                	bnez	a3,20419f1a <__lo0bits+0x36>
20419f16:	83c1                	srli	a5,a5,0x10
20419f18:	4741                	li	a4,16
20419f1a:	0ff7f693          	andi	a3,a5,255
20419f1e:	e299                	bnez	a3,20419f24 <__lo0bits+0x40>
20419f20:	0721                	addi	a4,a4,8
20419f22:	83a1                	srli	a5,a5,0x8
20419f24:	00f7f693          	andi	a3,a5,15
20419f28:	e299                	bnez	a3,20419f2e <__lo0bits+0x4a>
20419f2a:	0711                	addi	a4,a4,4
20419f2c:	8391                	srli	a5,a5,0x4
20419f2e:	0037f693          	andi	a3,a5,3
20419f32:	e299                	bnez	a3,20419f38 <__lo0bits+0x54>
20419f34:	0709                	addi	a4,a4,2
20419f36:	8389                	srli	a5,a5,0x2
20419f38:	0017f693          	andi	a3,a5,1
20419f3c:	e681                	bnez	a3,20419f44 <__lo0bits+0x60>
20419f3e:	8385                	srli	a5,a5,0x1
20419f40:	c781                	beqz	a5,20419f48 <__lo0bits+0x64>
20419f42:	0705                	addi	a4,a4,1
20419f44:	c11c                	sw	a5,0(a0)
20419f46:	bf6d                	j	20419f00 <__lo0bits+0x1c>
20419f48:	02000713          	li	a4,32
20419f4c:	bf55                	j	20419f00 <__lo0bits+0x1c>

20419f4e <__i2b>:
20419f4e:	1141                	addi	sp,sp,-16
20419f50:	c422                	sw	s0,8(sp)
20419f52:	842e                	mv	s0,a1
20419f54:	4585                	li	a1,1
20419f56:	c606                	sw	ra,12(sp)
20419f58:	3b61                	jal	20419cf0 <_Balloc>
20419f5a:	c940                	sw	s0,20(a0)
20419f5c:	40b2                	lw	ra,12(sp)
20419f5e:	4422                	lw	s0,8(sp)
20419f60:	4705                	li	a4,1
20419f62:	c918                	sw	a4,16(a0)
20419f64:	0141                	addi	sp,sp,16
20419f66:	8082                	ret

20419f68 <__multiply>:
20419f68:	4998                	lw	a4,16(a1)
20419f6a:	4a1c                	lw	a5,16(a2)
20419f6c:	7179                	addi	sp,sp,-48
20419f6e:	d226                	sw	s1,36(sp)
20419f70:	d606                	sw	ra,44(sp)
20419f72:	d422                	sw	s0,40(sp)
20419f74:	d04a                	sw	s2,32(sp)
20419f76:	ce4e                	sw	s3,28(sp)
20419f78:	84ae                	mv	s1,a1
20419f7a:	00f75463          	ble	a5,a4,20419f82 <__multiply+0x1a>
20419f7e:	84b2                	mv	s1,a2
20419f80:	862e                	mv	a2,a1
20419f82:	0104a983          	lw	s3,16(s1)
20419f86:	01062903          	lw	s2,16(a2)
20419f8a:	449c                	lw	a5,8(s1)
20419f8c:	40cc                	lw	a1,4(s1)
20419f8e:	01298433          	add	s0,s3,s2
20419f92:	0087d363          	ble	s0,a5,20419f98 <__multiply+0x30>
20419f96:	0585                	addi	a1,a1,1
20419f98:	c632                	sw	a2,12(sp)
20419f9a:	3b99                	jal	20419cf0 <_Balloc>
20419f9c:	4632                	lw	a2,12(sp)
20419f9e:	01450813          	addi	a6,a0,20 # 10014 <__stack_size+0xc014>
20419fa2:	00241313          	slli	t1,s0,0x2
20419fa6:	9342                	add	t1,t1,a6
20419fa8:	87c2                	mv	a5,a6
20419faa:	0267e963          	bltu	a5,t1,20419fdc <__multiply+0x74>
20419fae:	01448593          	addi	a1,s1,20
20419fb2:	00299893          	slli	a7,s3,0x2
20419fb6:	0651                	addi	a2,a2,20
20419fb8:	00291e13          	slli	t3,s2,0x2
20419fbc:	66c1                	lui	a3,0x10
20419fbe:	98ae                	add	a7,a7,a1
20419fc0:	9e32                	add	t3,t3,a2
20419fc2:	16fd                	addi	a3,a3,-1
20419fc4:	03c66063          	bltu	a2,t3,20419fe4 <__multiply+0x7c>
20419fc8:	0c804b63          	bgtz	s0,2041a09e <__multiply+0x136>
20419fcc:	c900                	sw	s0,16(a0)
20419fce:	50b2                	lw	ra,44(sp)
20419fd0:	5422                	lw	s0,40(sp)
20419fd2:	5492                	lw	s1,36(sp)
20419fd4:	5902                	lw	s2,32(sp)
20419fd6:	49f2                	lw	s3,28(sp)
20419fd8:	6145                	addi	sp,sp,48
20419fda:	8082                	ret
20419fdc:	0007a023          	sw	zero,0(a5)
20419fe0:	0791                	addi	a5,a5,4
20419fe2:	b7e1                	j	20419faa <__multiply+0x42>
20419fe4:	00062f83          	lw	t6,0(a2)
20419fe8:	00dfffb3          	and	t6,t6,a3
20419fec:	040f8a63          	beqz	t6,2041a040 <__multiply+0xd8>
20419ff0:	8f42                	mv	t5,a6
20419ff2:	82ae                	mv	t0,a1
20419ff4:	4481                	li	s1,0
20419ff6:	0002a703          	lw	a4,0(t0) # 20413620 <memset+0x8e>
20419ffa:	000f2383          	lw	t2,0(t5)
20419ffe:	0f11                	addi	t5,t5,4
2041a000:	00d77eb3          	and	t4,a4,a3
2041a004:	03fe8eb3          	mul	t4,t4,t6
2041a008:	00d3f7b3          	and	a5,t2,a3
2041a00c:	0103d393          	srli	t2,t2,0x10
2041a010:	0291                	addi	t0,t0,4
2041a012:	9ebe                	add	t4,t4,a5
2041a014:	01075793          	srli	a5,a4,0x10
2041a018:	03f787b3          	mul	a5,a5,t6
2041a01c:	9ea6                	add	t4,t4,s1
2041a01e:	010ed713          	srli	a4,t4,0x10
2041a022:	00defeb3          	and	t4,t4,a3
2041a026:	979e                	add	a5,a5,t2
2041a028:	97ba                	add	a5,a5,a4
2041a02a:	0107d493          	srli	s1,a5,0x10
2041a02e:	07c2                	slli	a5,a5,0x10
2041a030:	01d7e7b3          	or	a5,a5,t4
2041a034:	feff2e23          	sw	a5,-4(t5)
2041a038:	fb12efe3          	bltu	t0,a7,20419ff6 <__multiply+0x8e>
2041a03c:	009f2023          	sw	s1,0(t5)
2041a040:	00265283          	lhu	t0,2(a2)
2041a044:	04028a63          	beqz	t0,2041a098 <__multiply+0x130>
2041a048:	00082783          	lw	a5,0(a6)
2041a04c:	8ec2                	mv	t4,a6
2041a04e:	8f2e                	mv	t5,a1
2041a050:	4f81                	li	t6,0
2041a052:	000f2703          	lw	a4,0(t5)
2041a056:	002ed383          	lhu	t2,2(t4)
2041a05a:	8ff5                	and	a5,a5,a3
2041a05c:	8f75                	and	a4,a4,a3
2041a05e:	02570733          	mul	a4,a4,t0
2041a062:	0e91                	addi	t4,t4,4
2041a064:	0f11                	addi	t5,t5,4
2041a066:	971e                	add	a4,a4,t2
2041a068:	977e                	add	a4,a4,t6
2041a06a:	01071f93          	slli	t6,a4,0x10
2041a06e:	00ffe7b3          	or	a5,t6,a5
2041a072:	fefeae23          	sw	a5,-4(t4)
2041a076:	ffef5783          	lhu	a5,-2(t5)
2041a07a:	000eaf83          	lw	t6,0(t4)
2041a07e:	8341                	srli	a4,a4,0x10
2041a080:	025787b3          	mul	a5,a5,t0
2041a084:	00dfffb3          	and	t6,t6,a3
2041a088:	97fe                	add	a5,a5,t6
2041a08a:	97ba                	add	a5,a5,a4
2041a08c:	0107df93          	srli	t6,a5,0x10
2041a090:	fd1f61e3          	bltu	t5,a7,2041a052 <__multiply+0xea>
2041a094:	00fea023          	sw	a5,0(t4)
2041a098:	0611                	addi	a2,a2,4
2041a09a:	0811                	addi	a6,a6,4
2041a09c:	b725                	j	20419fc4 <__multiply+0x5c>
2041a09e:	1371                	addi	t1,t1,-4
2041a0a0:	00032783          	lw	a5,0(t1) # 10000 <__stack_size+0xc000>
2041a0a4:	f785                	bnez	a5,20419fcc <__multiply+0x64>
2041a0a6:	147d                	addi	s0,s0,-1
2041a0a8:	b705                	j	20419fc8 <__multiply+0x60>

2041a0aa <__pow5mult>:
2041a0aa:	1101                	addi	sp,sp,-32
2041a0ac:	ca26                	sw	s1,20(sp)
2041a0ae:	c84a                	sw	s2,16(sp)
2041a0b0:	c64e                	sw	s3,12(sp)
2041a0b2:	ce06                	sw	ra,28(sp)
2041a0b4:	cc22                	sw	s0,24(sp)
2041a0b6:	c452                	sw	s4,8(sp)
2041a0b8:	00367793          	andi	a5,a2,3
2041a0bc:	892a                	mv	s2,a0
2041a0be:	84b2                	mv	s1,a2
2041a0c0:	89ae                	mv	s3,a1
2041a0c2:	cf81                	beqz	a5,2041a0da <__pow5mult+0x30>
2041a0c4:	17fd                	addi	a5,a5,-1
2041a0c6:	20422737          	lui	a4,0x20422
2041a0ca:	3d870713          	addi	a4,a4,984 # 204223d8 <p05.3207>
2041a0ce:	078a                	slli	a5,a5,0x2
2041a0d0:	97ba                	add	a5,a5,a4
2041a0d2:	4390                	lw	a2,0(a5)
2041a0d4:	4681                	li	a3,0
2041a0d6:	3951                	jal	20419d6a <__multadd>
2041a0d8:	89aa                	mv	s3,a0
2041a0da:	8489                	srai	s1,s1,0x2
2041a0dc:	c4b1                	beqz	s1,2041a128 <__pow5mult+0x7e>
2041a0de:	04892403          	lw	s0,72(s2)
2041a0e2:	e811                	bnez	s0,2041a0f6 <__pow5mult+0x4c>
2041a0e4:	27100593          	li	a1,625
2041a0e8:	854a                	mv	a0,s2
2041a0ea:	3595                	jal	20419f4e <__i2b>
2041a0ec:	04a92423          	sw	a0,72(s2)
2041a0f0:	842a                	mv	s0,a0
2041a0f2:	00052023          	sw	zero,0(a0)
2041a0f6:	0014f793          	andi	a5,s1,1
2041a0fa:	cb91                	beqz	a5,2041a10e <__pow5mult+0x64>
2041a0fc:	85ce                	mv	a1,s3
2041a0fe:	8622                	mv	a2,s0
2041a100:	854a                	mv	a0,s2
2041a102:	359d                	jal	20419f68 <__multiply>
2041a104:	8a2a                	mv	s4,a0
2041a106:	85ce                	mv	a1,s3
2041a108:	854a                	mv	a0,s2
2041a10a:	31b1                	jal	20419d56 <_Bfree>
2041a10c:	89d2                	mv	s3,s4
2041a10e:	8485                	srai	s1,s1,0x1
2041a110:	cc81                	beqz	s1,2041a128 <__pow5mult+0x7e>
2041a112:	4008                	lw	a0,0(s0)
2041a114:	e901                	bnez	a0,2041a124 <__pow5mult+0x7a>
2041a116:	8622                	mv	a2,s0
2041a118:	85a2                	mv	a1,s0
2041a11a:	854a                	mv	a0,s2
2041a11c:	35b1                	jal	20419f68 <__multiply>
2041a11e:	c008                	sw	a0,0(s0)
2041a120:	00052023          	sw	zero,0(a0)
2041a124:	842a                	mv	s0,a0
2041a126:	bfc1                	j	2041a0f6 <__pow5mult+0x4c>
2041a128:	40f2                	lw	ra,28(sp)
2041a12a:	4462                	lw	s0,24(sp)
2041a12c:	854e                	mv	a0,s3
2041a12e:	44d2                	lw	s1,20(sp)
2041a130:	4942                	lw	s2,16(sp)
2041a132:	49b2                	lw	s3,12(sp)
2041a134:	4a22                	lw	s4,8(sp)
2041a136:	6105                	addi	sp,sp,32
2041a138:	8082                	ret

2041a13a <__lshift>:
2041a13a:	7179                	addi	sp,sp,-48
2041a13c:	d226                	sw	s1,36(sp)
2041a13e:	84ae                	mv	s1,a1
2041a140:	ce4e                	sw	s3,28(sp)
2041a142:	0104a983          	lw	s3,16(s1)
2041a146:	d422                	sw	s0,40(sp)
2041a148:	41cc                	lw	a1,4(a1)
2041a14a:	40565413          	srai	s0,a2,0x5
2041a14e:	449c                	lw	a5,8(s1)
2041a150:	99a2                	add	s3,s3,s0
2041a152:	d04a                	sw	s2,32(sp)
2041a154:	ca56                	sw	s5,20(sp)
2041a156:	d606                	sw	ra,44(sp)
2041a158:	cc52                	sw	s4,24(sp)
2041a15a:	8aaa                	mv	s5,a0
2041a15c:	00198913          	addi	s2,s3,1
2041a160:	0927c263          	blt	a5,s2,2041a1e4 <__lshift+0xaa>
2041a164:	8556                	mv	a0,s5
2041a166:	c632                	sw	a2,12(sp)
2041a168:	3661                	jal	20419cf0 <_Balloc>
2041a16a:	4632                	lw	a2,12(sp)
2041a16c:	01450793          	addi	a5,a0,20
2041a170:	8a2a                	mv	s4,a0
2041a172:	86be                	mv	a3,a5
2041a174:	4701                	li	a4,0
2041a176:	0691                	addi	a3,a3,4
2041a178:	06874963          	blt	a4,s0,2041a1ea <__lshift+0xb0>
2041a17c:	00045363          	bgez	s0,2041a182 <__lshift+0x48>
2041a180:	4401                	li	s0,0
2041a182:	4894                	lw	a3,16(s1)
2041a184:	040a                	slli	s0,s0,0x2
2041a186:	00878733          	add	a4,a5,s0
2041a18a:	068a                	slli	a3,a3,0x2
2041a18c:	01448793          	addi	a5,s1,20
2041a190:	8a7d                	andi	a2,a2,31
2041a192:	96be                	add	a3,a3,a5
2041a194:	ce39                	beqz	a2,2041a1f2 <__lshift+0xb8>
2041a196:	02000813          	li	a6,32
2041a19a:	40c80833          	sub	a6,a6,a2
2041a19e:	4581                	li	a1,0
2041a1a0:	4388                	lw	a0,0(a5)
2041a1a2:	0711                	addi	a4,a4,4
2041a1a4:	0791                	addi	a5,a5,4
2041a1a6:	00c51533          	sll	a0,a0,a2
2041a1aa:	8dc9                	or	a1,a1,a0
2041a1ac:	feb72e23          	sw	a1,-4(a4)
2041a1b0:	ffc7a583          	lw	a1,-4(a5)
2041a1b4:	0105d5b3          	srl	a1,a1,a6
2041a1b8:	fed7e4e3          	bltu	a5,a3,2041a1a0 <__lshift+0x66>
2041a1bc:	c30c                	sw	a1,0(a4)
2041a1be:	c199                	beqz	a1,2041a1c4 <__lshift+0x8a>
2041a1c0:	00298913          	addi	s2,s3,2
2041a1c4:	197d                	addi	s2,s2,-1
2041a1c6:	012a2823          	sw	s2,16(s4)
2041a1ca:	8556                	mv	a0,s5
2041a1cc:	85a6                	mv	a1,s1
2041a1ce:	3661                	jal	20419d56 <_Bfree>
2041a1d0:	50b2                	lw	ra,44(sp)
2041a1d2:	5422                	lw	s0,40(sp)
2041a1d4:	8552                	mv	a0,s4
2041a1d6:	5492                	lw	s1,36(sp)
2041a1d8:	5902                	lw	s2,32(sp)
2041a1da:	49f2                	lw	s3,28(sp)
2041a1dc:	4a62                	lw	s4,24(sp)
2041a1de:	4ad2                	lw	s5,20(sp)
2041a1e0:	6145                	addi	sp,sp,48
2041a1e2:	8082                	ret
2041a1e4:	0585                	addi	a1,a1,1
2041a1e6:	0786                	slli	a5,a5,0x1
2041a1e8:	bfa5                	j	2041a160 <__lshift+0x26>
2041a1ea:	fe06ae23          	sw	zero,-4(a3) # fffc <__stack_size+0xbffc>
2041a1ee:	0705                	addi	a4,a4,1
2041a1f0:	b759                	j	2041a176 <__lshift+0x3c>
2041a1f2:	0791                	addi	a5,a5,4
2041a1f4:	ffc7a603          	lw	a2,-4(a5)
2041a1f8:	0711                	addi	a4,a4,4
2041a1fa:	fec72e23          	sw	a2,-4(a4)
2041a1fe:	fed7eae3          	bltu	a5,a3,2041a1f2 <__lshift+0xb8>
2041a202:	b7c9                	j	2041a1c4 <__lshift+0x8a>

2041a204 <__mcmp>:
2041a204:	491c                	lw	a5,16(a0)
2041a206:	4998                	lw	a4,16(a1)
2041a208:	8f99                	sub	a5,a5,a4
2041a20a:	e38d                	bnez	a5,2041a22c <__mcmp+0x28>
2041a20c:	070a                	slli	a4,a4,0x2
2041a20e:	0551                	addi	a0,a0,20
2041a210:	05d1                	addi	a1,a1,20
2041a212:	00e506b3          	add	a3,a0,a4
2041a216:	95ba                	add	a1,a1,a4
2041a218:	16f1                	addi	a3,a3,-4
2041a21a:	15f1                	addi	a1,a1,-4
2041a21c:	4290                	lw	a2,0(a3)
2041a21e:	4198                	lw	a4,0(a1)
2041a220:	00e60863          	beq	a2,a4,2041a230 <__mcmp+0x2c>
2041a224:	57fd                	li	a5,-1
2041a226:	00e66363          	bltu	a2,a4,2041a22c <__mcmp+0x28>
2041a22a:	4785                	li	a5,1
2041a22c:	853e                	mv	a0,a5
2041a22e:	8082                	ret
2041a230:	fed564e3          	bltu	a0,a3,2041a218 <__mcmp+0x14>
2041a234:	bfe5                	j	2041a22c <__mcmp+0x28>

2041a236 <__mdiff>:
2041a236:	1101                	addi	sp,sp,-32
2041a238:	ca26                	sw	s1,20(sp)
2041a23a:	84ae                	mv	s1,a1
2041a23c:	c64e                	sw	s3,12(sp)
2041a23e:	85b2                	mv	a1,a2
2041a240:	89aa                	mv	s3,a0
2041a242:	8526                	mv	a0,s1
2041a244:	cc22                	sw	s0,24(sp)
2041a246:	ce06                	sw	ra,28(sp)
2041a248:	c84a                	sw	s2,16(sp)
2041a24a:	8432                	mv	s0,a2
2041a24c:	3f65                	jal	2041a204 <__mcmp>
2041a24e:	ed19                	bnez	a0,2041a26c <__mdiff+0x36>
2041a250:	4581                	li	a1,0
2041a252:	854e                	mv	a0,s3
2041a254:	3c71                	jal	20419cf0 <_Balloc>
2041a256:	4785                	li	a5,1
2041a258:	c91c                	sw	a5,16(a0)
2041a25a:	00052a23          	sw	zero,20(a0)
2041a25e:	40f2                	lw	ra,28(sp)
2041a260:	4462                	lw	s0,24(sp)
2041a262:	44d2                	lw	s1,20(sp)
2041a264:	4942                	lw	s2,16(sp)
2041a266:	49b2                	lw	s3,12(sp)
2041a268:	6105                	addi	sp,sp,32
2041a26a:	8082                	ret
2041a26c:	4905                	li	s2,1
2041a26e:	00054663          	bltz	a0,2041a27a <__mdiff+0x44>
2041a272:	87a2                	mv	a5,s0
2041a274:	4901                	li	s2,0
2041a276:	8426                	mv	s0,s1
2041a278:	84be                	mv	s1,a5
2041a27a:	404c                	lw	a1,4(s0)
2041a27c:	854e                	mv	a0,s3
2041a27e:	3c8d                	jal	20419cf0 <_Balloc>
2041a280:	01042303          	lw	t1,16(s0)
2041a284:	0104a883          	lw	a7,16(s1)
2041a288:	01440613          	addi	a2,s0,20
2041a28c:	00231e13          	slli	t3,t1,0x2
2041a290:	01448813          	addi	a6,s1,20
2041a294:	088a                	slli	a7,a7,0x2
2041a296:	6ec1                	lui	t4,0x10
2041a298:	01252623          	sw	s2,12(a0)
2041a29c:	9e32                	add	t3,t3,a2
2041a29e:	98c2                	add	a7,a7,a6
2041a2a0:	01450693          	addi	a3,a0,20
2041a2a4:	4f01                	li	t5,0
2041a2a6:	1efd                	addi	t4,t4,-1
2041a2a8:	4218                	lw	a4,0(a2)
2041a2aa:	00082f83          	lw	t6,0(a6)
2041a2ae:	0691                	addi	a3,a3,4
2041a2b0:	01d775b3          	and	a1,a4,t4
2041a2b4:	01dff7b3          	and	a5,t6,t4
2041a2b8:	95fa                	add	a1,a1,t5
2041a2ba:	8d9d                	sub	a1,a1,a5
2041a2bc:	010fdf93          	srli	t6,t6,0x10
2041a2c0:	01075793          	srli	a5,a4,0x10
2041a2c4:	41f787b3          	sub	a5,a5,t6
2041a2c8:	4105d713          	srai	a4,a1,0x10
2041a2cc:	97ba                	add	a5,a5,a4
2041a2ce:	4107df13          	srai	t5,a5,0x10
2041a2d2:	01d5f5b3          	and	a1,a1,t4
2041a2d6:	07c2                	slli	a5,a5,0x10
2041a2d8:	8fcd                	or	a5,a5,a1
2041a2da:	0811                	addi	a6,a6,4
2041a2dc:	fef6ae23          	sw	a5,-4(a3)
2041a2e0:	0611                	addi	a2,a2,4
2041a2e2:	fd1863e3          	bltu	a6,a7,2041a2a8 <__mdiff+0x72>
2041a2e6:	65c1                	lui	a1,0x10
2041a2e8:	15fd                	addi	a1,a1,-1
2041a2ea:	01c66863          	bltu	a2,t3,2041a2fa <__mdiff+0xc4>
2041a2ee:	16f1                	addi	a3,a3,-4
2041a2f0:	429c                	lw	a5,0(a3)
2041a2f2:	c795                	beqz	a5,2041a31e <__mdiff+0xe8>
2041a2f4:	00652823          	sw	t1,16(a0)
2041a2f8:	b79d                	j	2041a25e <__mdiff+0x28>
2041a2fa:	421c                	lw	a5,0(a2)
2041a2fc:	0691                	addi	a3,a3,4
2041a2fe:	0611                	addi	a2,a2,4
2041a300:	00b7f733          	and	a4,a5,a1
2041a304:	977a                	add	a4,a4,t5
2041a306:	41075813          	srai	a6,a4,0x10
2041a30a:	83c1                	srli	a5,a5,0x10
2041a30c:	97c2                	add	a5,a5,a6
2041a30e:	4107df13          	srai	t5,a5,0x10
2041a312:	8f6d                	and	a4,a4,a1
2041a314:	07c2                	slli	a5,a5,0x10
2041a316:	8fd9                	or	a5,a5,a4
2041a318:	fef6ae23          	sw	a5,-4(a3)
2041a31c:	b7f9                	j	2041a2ea <__mdiff+0xb4>
2041a31e:	137d                	addi	t1,t1,-1
2041a320:	b7f9                	j	2041a2ee <__mdiff+0xb8>

2041a322 <__ulp>:
2041a322:	7ff007b7          	lui	a5,0x7ff00
2041a326:	8dfd                	and	a1,a1,a5
2041a328:	fcc007b7          	lui	a5,0xfcc00
2041a32c:	95be                	add	a1,a1,a5
2041a32e:	00b05563          	blez	a1,2041a338 <__ulp+0x16>
2041a332:	4781                	li	a5,0
2041a334:	853e                	mv	a0,a5
2041a336:	8082                	ret
2041a338:	40b005b3          	neg	a1,a1
2041a33c:	4145d793          	srai	a5,a1,0x14
2041a340:	474d                	li	a4,19
2041a342:	00f74763          	blt	a4,a5,2041a350 <__ulp+0x2e>
2041a346:	000805b7          	lui	a1,0x80
2041a34a:	40f5d5b3          	sra	a1,a1,a5
2041a34e:	b7d5                	j	2041a332 <__ulp+0x10>
2041a350:	17b1                	addi	a5,a5,-20
2041a352:	46f9                	li	a3,30
2041a354:	4581                	li	a1,0
2041a356:	4705                	li	a4,1
2041a358:	00f6c663          	blt	a3,a5,2041a364 <__ulp+0x42>
2041a35c:	fff7c793          	not	a5,a5
2041a360:	00f71733          	sll	a4,a4,a5
2041a364:	87ba                	mv	a5,a4
2041a366:	b7f9                	j	2041a334 <__ulp+0x12>

2041a368 <__b2d>:
2041a368:	7179                	addi	sp,sp,-48
2041a36a:	d226                	sw	s1,36(sp)
2041a36c:	4904                	lw	s1,16(a0)
2041a36e:	ce4e                	sw	s3,28(sp)
2041a370:	01450993          	addi	s3,a0,20
2041a374:	048a                	slli	s1,s1,0x2
2041a376:	94ce                	add	s1,s1,s3
2041a378:	d422                	sw	s0,40(sp)
2041a37a:	ffc4a403          	lw	s0,-4(s1)
2041a37e:	d04a                	sw	s2,32(sp)
2041a380:	c62e                	sw	a1,12(sp)
2041a382:	8522                	mv	a0,s0
2041a384:	d606                	sw	ra,44(sp)
2041a386:	3e19                	jal	20419e9c <__hi0bits>
2041a388:	45b2                	lw	a1,12(sp)
2041a38a:	02000793          	li	a5,32
2041a38e:	8f89                	sub	a5,a5,a0
2041a390:	c19c                	sw	a5,0(a1)
2041a392:	47a9                	li	a5,10
2041a394:	ffc48913          	addi	s2,s1,-4
2041a398:	02a7cd63          	blt	a5,a0,2041a3d2 <__b2d+0x6a>
2041a39c:	47ad                	li	a5,11
2041a39e:	8f89                	sub	a5,a5,a0
2041a3a0:	3ff00737          	lui	a4,0x3ff00
2041a3a4:	00f456b3          	srl	a3,s0,a5
2041a3a8:	8ed9                	or	a3,a3,a4
2041a3aa:	4701                	li	a4,0
2041a3ac:	0129f463          	bleu	s2,s3,2041a3b4 <__b2d+0x4c>
2041a3b0:	ff84a703          	lw	a4,-8(s1)
2041a3b4:	0555                	addi	a0,a0,21
2041a3b6:	00a41533          	sll	a0,s0,a0
2041a3ba:	00f757b3          	srl	a5,a4,a5
2041a3be:	8fc9                	or	a5,a5,a0
2041a3c0:	50b2                	lw	ra,44(sp)
2041a3c2:	5422                	lw	s0,40(sp)
2041a3c4:	5492                	lw	s1,36(sp)
2041a3c6:	5902                	lw	s2,32(sp)
2041a3c8:	49f2                	lw	s3,28(sp)
2041a3ca:	853e                	mv	a0,a5
2041a3cc:	85b6                	mv	a1,a3
2041a3ce:	6145                	addi	sp,sp,48
2041a3d0:	8082                	ret
2041a3d2:	4781                	li	a5,0
2041a3d4:	0129f663          	bleu	s2,s3,2041a3e0 <__b2d+0x78>
2041a3d8:	ff84a783          	lw	a5,-8(s1)
2041a3dc:	ff848913          	addi	s2,s1,-8
2041a3e0:	1555                	addi	a0,a0,-11
2041a3e2:	c905                	beqz	a0,2041a412 <__b2d+0xaa>
2041a3e4:	02000713          	li	a4,32
2041a3e8:	40a70633          	sub	a2,a4,a0
2041a3ec:	00a41433          	sll	s0,s0,a0
2041a3f0:	3ff00737          	lui	a4,0x3ff00
2041a3f4:	8c59                	or	s0,s0,a4
2041a3f6:	00c7d6b3          	srl	a3,a5,a2
2041a3fa:	8ec1                	or	a3,a3,s0
2041a3fc:	4701                	li	a4,0
2041a3fe:	0129f463          	bleu	s2,s3,2041a406 <__b2d+0x9e>
2041a402:	ffc92703          	lw	a4,-4(s2)
2041a406:	00a797b3          	sll	a5,a5,a0
2041a40a:	00c75733          	srl	a4,a4,a2
2041a40e:	8fd9                	or	a5,a5,a4
2041a410:	bf45                	j	2041a3c0 <__b2d+0x58>
2041a412:	3ff006b7          	lui	a3,0x3ff00
2041a416:	8ec1                	or	a3,a3,s0
2041a418:	b765                	j	2041a3c0 <__b2d+0x58>

2041a41a <__d2b>:
2041a41a:	7179                	addi	sp,sp,-48
2041a41c:	d422                	sw	s0,40(sp)
2041a41e:	842e                	mv	s0,a1
2041a420:	4585                	li	a1,1
2041a422:	d226                	sw	s1,36(sp)
2041a424:	d04a                	sw	s2,32(sp)
2041a426:	84b2                	mv	s1,a2
2041a428:	ce4e                	sw	s3,28(sp)
2041a42a:	cc52                	sw	s4,24(sp)
2041a42c:	893a                	mv	s2,a4
2041a42e:	d606                	sw	ra,44(sp)
2041a430:	8a36                	mv	s4,a3
2041a432:	387d                	jal	20419cf0 <_Balloc>
2041a434:	00100737          	lui	a4,0x100
2041a438:	fff70793          	addi	a5,a4,-1 # fffff <__stack_size+0xfbfff>
2041a43c:	8fe5                	and	a5,a5,s1
2041a43e:	80d1                	srli	s1,s1,0x14
2041a440:	7ff4f493          	andi	s1,s1,2047
2041a444:	89aa                	mv	s3,a0
2041a446:	e0ad                	bnez	s1,2041a4a8 <__d2b+0x8e>
2041a448:	c63e                	sw	a5,12(sp)
2041a44a:	c425                	beqz	s0,2041a4b2 <__d2b+0x98>
2041a44c:	0028                	addi	a0,sp,8
2041a44e:	c422                	sw	s0,8(sp)
2041a450:	3c51                	jal	20419ee4 <__lo0bits>
2041a452:	46a2                	lw	a3,8(sp)
2041a454:	cd21                	beqz	a0,2041a4ac <__d2b+0x92>
2041a456:	4732                	lw	a4,12(sp)
2041a458:	02000793          	li	a5,32
2041a45c:	8f89                	sub	a5,a5,a0
2041a45e:	00f717b3          	sll	a5,a4,a5
2041a462:	8fd5                	or	a5,a5,a3
2041a464:	00a75733          	srl	a4,a4,a0
2041a468:	00f9aa23          	sw	a5,20(s3)
2041a46c:	c63a                	sw	a4,12(sp)
2041a46e:	4432                	lw	s0,12(sp)
2041a470:	0089ac23          	sw	s0,24(s3)
2041a474:	00803433          	snez	s0,s0
2041a478:	0405                	addi	s0,s0,1
2041a47a:	0089a823          	sw	s0,16(s3)
2041a47e:	c4b1                	beqz	s1,2041a4ca <__d2b+0xb0>
2041a480:	bcd48493          	addi	s1,s1,-1075
2041a484:	94aa                	add	s1,s1,a0
2041a486:	03500793          	li	a5,53
2041a48a:	009a2023          	sw	s1,0(s4)
2041a48e:	40a78533          	sub	a0,a5,a0
2041a492:	00a92023          	sw	a0,0(s2)
2041a496:	50b2                	lw	ra,44(sp)
2041a498:	5422                	lw	s0,40(sp)
2041a49a:	854e                	mv	a0,s3
2041a49c:	5492                	lw	s1,36(sp)
2041a49e:	5902                	lw	s2,32(sp)
2041a4a0:	49f2                	lw	s3,28(sp)
2041a4a2:	4a62                	lw	s4,24(sp)
2041a4a4:	6145                	addi	sp,sp,48
2041a4a6:	8082                	ret
2041a4a8:	8fd9                	or	a5,a5,a4
2041a4aa:	bf79                	j	2041a448 <__d2b+0x2e>
2041a4ac:	00d9aa23          	sw	a3,20(s3)
2041a4b0:	bf7d                	j	2041a46e <__d2b+0x54>
2041a4b2:	0068                	addi	a0,sp,12
2041a4b4:	3c05                	jal	20419ee4 <__lo0bits>
2041a4b6:	47b2                	lw	a5,12(sp)
2041a4b8:	02050513          	addi	a0,a0,32
2041a4bc:	4405                	li	s0,1
2041a4be:	00f9aa23          	sw	a5,20(s3)
2041a4c2:	4785                	li	a5,1
2041a4c4:	00f9a823          	sw	a5,16(s3)
2041a4c8:	bf5d                	j	2041a47e <__d2b+0x64>
2041a4ca:	00241793          	slli	a5,s0,0x2
2041a4ce:	bce50513          	addi	a0,a0,-1074
2041a4d2:	97ce                	add	a5,a5,s3
2041a4d4:	00aa2023          	sw	a0,0(s4)
2041a4d8:	4b88                	lw	a0,16(a5)
2041a4da:	0416                	slli	s0,s0,0x5
2041a4dc:	32c1                	jal	20419e9c <__hi0bits>
2041a4de:	8c09                	sub	s0,s0,a0
2041a4e0:	00892023          	sw	s0,0(s2)
2041a4e4:	bf4d                	j	2041a496 <__d2b+0x7c>

2041a4e6 <__ratio>:
2041a4e6:	7179                	addi	sp,sp,-48
2041a4e8:	d04a                	sw	s2,32(sp)
2041a4ea:	892e                	mv	s2,a1
2041a4ec:	002c                	addi	a1,sp,8
2041a4ee:	d606                	sw	ra,44(sp)
2041a4f0:	d422                	sw	s0,40(sp)
2041a4f2:	d226                	sw	s1,36(sp)
2041a4f4:	ce4e                	sw	s3,28(sp)
2041a4f6:	cc52                	sw	s4,24(sp)
2041a4f8:	8a2a                	mv	s4,a0
2041a4fa:	35bd                	jal	2041a368 <__b2d>
2041a4fc:	89aa                	mv	s3,a0
2041a4fe:	84ae                	mv	s1,a1
2041a500:	842e                	mv	s0,a1
2041a502:	854a                	mv	a0,s2
2041a504:	006c                	addi	a1,sp,12
2041a506:	358d                	jal	2041a368 <__b2d>
2041a508:	01092783          	lw	a5,16(s2)
2041a50c:	010a2703          	lw	a4,16(s4)
2041a510:	46a2                	lw	a3,8(sp)
2041a512:	8f1d                	sub	a4,a4,a5
2041a514:	47b2                	lw	a5,12(sp)
2041a516:	0716                	slli	a4,a4,0x5
2041a518:	8e9d                	sub	a3,a3,a5
2041a51a:	00d707b3          	add	a5,a4,a3
2041a51e:	02f05563          	blez	a5,2041a548 <__ratio+0x62>
2041a522:	07d2                	slli	a5,a5,0x14
2041a524:	862e                	mv	a2,a1
2041a526:	00978433          	add	s0,a5,s1
2041a52a:	8732                	mv	a4,a2
2041a52c:	85a2                	mv	a1,s0
2041a52e:	862a                	mv	a2,a0
2041a530:	86ba                	mv	a3,a4
2041a532:	854e                	mv	a0,s3
2041a534:	14d020ef          	jal	ra,2041ce80 <__divdf3>
2041a538:	50b2                	lw	ra,44(sp)
2041a53a:	5422                	lw	s0,40(sp)
2041a53c:	5492                	lw	s1,36(sp)
2041a53e:	5902                	lw	s2,32(sp)
2041a540:	49f2                	lw	s3,28(sp)
2041a542:	4a62                	lw	s4,24(sp)
2041a544:	6145                	addi	sp,sp,48
2041a546:	8082                	ret
2041a548:	fff00737          	lui	a4,0xfff00
2041a54c:	02e787b3          	mul	a5,a5,a4
2041a550:	00b78633          	add	a2,a5,a1
2041a554:	bfd9                	j	2041a52a <__ratio+0x44>

2041a556 <_mprec_log10>:
2041a556:	1141                	addi	sp,sp,-16
2041a558:	c422                	sw	s0,8(sp)
2041a55a:	c606                	sw	ra,12(sp)
2041a55c:	c24a                	sw	s2,4(sp)
2041a55e:	c04e                	sw	s3,0(sp)
2041a560:	47dd                	li	a5,23
2041a562:	842a                	mv	s0,a0
2041a564:	02a7c163          	blt	a5,a0,2041a586 <_mprec_log10+0x30>
2041a568:	204227b7          	lui	a5,0x20422
2041a56c:	00351413          	slli	s0,a0,0x3
2041a570:	3d878793          	addi	a5,a5,984 # 204223d8 <p05.3207>
2041a574:	943e                	add	s0,s0,a5
2041a576:	4808                	lw	a0,16(s0)
2041a578:	484c                	lw	a1,20(s0)
2041a57a:	40b2                	lw	ra,12(sp)
2041a57c:	4422                	lw	s0,8(sp)
2041a57e:	4912                	lw	s2,4(sp)
2041a580:	4982                	lw	s3,0(sp)
2041a582:	0141                	addi	sp,sp,16
2041a584:	8082                	ret
2041a586:	800017b7          	lui	a5,0x80001
2041a58a:	a4878793          	addi	a5,a5,-1464 # 80000a48 <pulp__FC+0x80000a49>
2041a58e:	4388                	lw	a0,0(a5)
2041a590:	43cc                	lw	a1,4(a5)
2041a592:	800017b7          	lui	a5,0x80001
2041a596:	a5078793          	addi	a5,a5,-1456 # 80000a50 <pulp__FC+0x80000a51>
2041a59a:	0007a903          	lw	s2,0(a5)
2041a59e:	0047a983          	lw	s3,4(a5)
2041a5a2:	864a                	mv	a2,s2
2041a5a4:	86ce                	mv	a3,s3
2041a5a6:	147d                	addi	s0,s0,-1
2041a5a8:	6b9020ef          	jal	ra,2041d460 <__muldf3>
2041a5ac:	f87d                	bnez	s0,2041a5a2 <_mprec_log10+0x4c>
2041a5ae:	b7f1                	j	2041a57a <_mprec_log10+0x24>

2041a5b0 <__copybits>:
2041a5b0:	fff58793          	addi	a5,a1,-1 # 7ffff <__stack_size+0x7bfff>
2041a5b4:	4a18                	lw	a4,16(a2)
2041a5b6:	8795                	srai	a5,a5,0x5
2041a5b8:	0785                	addi	a5,a5,1
2041a5ba:	078a                	slli	a5,a5,0x2
2041a5bc:	01460693          	addi	a3,a2,20
2041a5c0:	070a                	slli	a4,a4,0x2
2041a5c2:	97aa                	add	a5,a5,a0
2041a5c4:	9736                	add	a4,a4,a3
2041a5c6:	00e6e563          	bltu	a3,a4,2041a5d0 <__copybits+0x20>
2041a5ca:	00f56a63          	bltu	a0,a5,2041a5de <__copybits+0x2e>
2041a5ce:	8082                	ret
2041a5d0:	0691                	addi	a3,a3,4
2041a5d2:	ffc6a603          	lw	a2,-4(a3) # 3feffffc <__fini_array_end+0x1fadd740>
2041a5d6:	0511                	addi	a0,a0,4
2041a5d8:	fec52e23          	sw	a2,-4(a0)
2041a5dc:	b7ed                	j	2041a5c6 <__copybits+0x16>
2041a5de:	0511                	addi	a0,a0,4
2041a5e0:	fe052e23          	sw	zero,-4(a0)
2041a5e4:	b7dd                	j	2041a5ca <__copybits+0x1a>

2041a5e6 <__any_on>:
2041a5e6:	4914                	lw	a3,16(a0)
2041a5e8:	4055d793          	srai	a5,a1,0x5
2041a5ec:	01450713          	addi	a4,a0,20
2041a5f0:	02f6c763          	blt	a3,a5,2041a61e <__any_on+0x38>
2041a5f4:	00d7df63          	ble	a3,a5,2041a612 <__any_on+0x2c>
2041a5f8:	89fd                	andi	a1,a1,31
2041a5fa:	cd81                	beqz	a1,2041a612 <__any_on+0x2c>
2041a5fc:	00279693          	slli	a3,a5,0x2
2041a600:	96ba                	add	a3,a3,a4
2041a602:	4290                	lw	a2,0(a3)
2041a604:	4505                	li	a0,1
2041a606:	00b656b3          	srl	a3,a2,a1
2041a60a:	00b695b3          	sll	a1,a3,a1
2041a60e:	00b61e63          	bne	a2,a1,2041a62a <__any_on+0x44>
2041a612:	078a                	slli	a5,a5,0x2
2041a614:	97ba                	add	a5,a5,a4
2041a616:	00f76663          	bltu	a4,a5,2041a622 <__any_on+0x3c>
2041a61a:	4501                	li	a0,0
2041a61c:	8082                	ret
2041a61e:	87b6                	mv	a5,a3
2041a620:	bfcd                	j	2041a612 <__any_on+0x2c>
2041a622:	17f1                	addi	a5,a5,-4
2041a624:	4394                	lw	a3,0(a5)
2041a626:	dae5                	beqz	a3,2041a616 <__any_on+0x30>
2041a628:	4505                	li	a0,1
2041a62a:	8082                	ret

2041a62c <_realloc_r>:
2041a62c:	7139                	addi	sp,sp,-64
2041a62e:	dc22                	sw	s0,56(sp)
2041a630:	de06                	sw	ra,60(sp)
2041a632:	842e                	mv	s0,a1
2041a634:	da26                	sw	s1,52(sp)
2041a636:	d84a                	sw	s2,48(sp)
2041a638:	d64e                	sw	s3,44(sp)
2041a63a:	d452                	sw	s4,40(sp)
2041a63c:	d256                	sw	s5,36(sp)
2041a63e:	d05a                	sw	s6,32(sp)
2041a640:	ce5e                	sw	s7,28(sp)
2041a642:	cc62                	sw	s8,24(sp)
2041a644:	85b2                	mv	a1,a2
2041a646:	ec11                	bnez	s0,2041a662 <_realloc_r+0x36>
2041a648:	5462                	lw	s0,56(sp)
2041a64a:	50f2                	lw	ra,60(sp)
2041a64c:	54d2                	lw	s1,52(sp)
2041a64e:	5942                	lw	s2,48(sp)
2041a650:	59b2                	lw	s3,44(sp)
2041a652:	5a22                	lw	s4,40(sp)
2041a654:	5a92                	lw	s5,36(sp)
2041a656:	5b02                	lw	s6,32(sp)
2041a658:	4bf2                	lw	s7,28(sp)
2041a65a:	4c62                	lw	s8,24(sp)
2041a65c:	6121                	addi	sp,sp,64
2041a65e:	99eff06f          	j	204197fc <_malloc_r>
2041a662:	8aaa                	mv	s5,a0
2041a664:	c632                	sw	a2,12(sp)
2041a666:	e86ff0ef          	jal	ra,20419cec <__malloc_lock>
2041a66a:	45b2                	lw	a1,12(sp)
2041a66c:	ffc42683          	lw	a3,-4(s0)
2041a670:	47d9                	li	a5,22
2041a672:	00b58993          	addi	s3,a1,11
2041a676:	ff840b93          	addi	s7,s0,-8
2041a67a:	ffc6f913          	andi	s2,a3,-4
2041a67e:	0337f763          	bleu	s3,a5,2041a6ac <_realloc_r+0x80>
2041a682:	ff89fb13          	andi	s6,s3,-8
2041a686:	020b5463          	bgez	s6,2041a6ae <_realloc_r+0x82>
2041a68a:	47b1                	li	a5,12
2041a68c:	00faa023          	sw	a5,0(s5)
2041a690:	4a01                	li	s4,0
2041a692:	50f2                	lw	ra,60(sp)
2041a694:	5462                	lw	s0,56(sp)
2041a696:	8552                	mv	a0,s4
2041a698:	54d2                	lw	s1,52(sp)
2041a69a:	5942                	lw	s2,48(sp)
2041a69c:	59b2                	lw	s3,44(sp)
2041a69e:	5a22                	lw	s4,40(sp)
2041a6a0:	5a92                	lw	s5,36(sp)
2041a6a2:	5b02                	lw	s6,32(sp)
2041a6a4:	4bf2                	lw	s7,28(sp)
2041a6a6:	4c62                	lw	s8,24(sp)
2041a6a8:	6121                	addi	sp,sp,64
2041a6aa:	8082                	ret
2041a6ac:	4b41                	li	s6,16
2041a6ae:	fcbb6ee3          	bltu	s6,a1,2041a68a <_realloc_r+0x5e>
2041a6b2:	31695463          	ble	s6,s2,2041a9ba <_realloc_r+0x38e>
2041a6b6:	80000c37          	lui	s8,0x80000
2041a6ba:	594c0713          	addi	a4,s8,1428 # 80000594 <pulp__FC+0x80000595>
2041a6be:	4710                	lw	a2,8(a4)
2041a6c0:	012b87b3          	add	a5,s7,s2
2041a6c4:	43d8                	lw	a4,4(a5)
2041a6c6:	594c0c13          	addi	s8,s8,1428
2041a6ca:	00f60863          	beq	a2,a5,2041a6da <_realloc_r+0xae>
2041a6ce:	ffe77513          	andi	a0,a4,-2
2041a6d2:	953e                	add	a0,a0,a5
2041a6d4:	4148                	lw	a0,4(a0)
2041a6d6:	8905                	andi	a0,a0,1
2041a6d8:	e559                	bnez	a0,2041a766 <_realloc_r+0x13a>
2041a6da:	9b71                	andi	a4,a4,-4
2041a6dc:	00e909b3          	add	s3,s2,a4
2041a6e0:	02f61c63          	bne	a2,a5,2041a718 <_realloc_r+0xec>
2041a6e4:	010b0513          	addi	a0,s6,16
2041a6e8:	08a9c163          	blt	s3,a0,2041a76a <_realloc_r+0x13e>
2041a6ec:	9bda                	add	s7,s7,s6
2041a6ee:	416989b3          	sub	s3,s3,s6
2041a6f2:	017c2423          	sw	s7,8(s8)
2041a6f6:	0019e993          	ori	s3,s3,1
2041a6fa:	013ba223          	sw	s3,4(s7)
2041a6fe:	ffc42983          	lw	s3,-4(s0)
2041a702:	8556                	mv	a0,s5
2041a704:	8a22                	mv	s4,s0
2041a706:	0019f993          	andi	s3,s3,1
2041a70a:	0169e9b3          	or	s3,s3,s6
2041a70e:	ff342e23          	sw	s3,-4(s0)
2041a712:	ddcff0ef          	jal	ra,20419cee <__malloc_unlock>
2041a716:	bfb5                	j	2041a692 <_realloc_r+0x66>
2041a718:	0569c963          	blt	s3,s6,2041a76a <_realloc_r+0x13e>
2041a71c:	47d8                	lw	a4,12(a5)
2041a71e:	479c                	lw	a5,8(a5)
2041a720:	c7d8                	sw	a4,12(a5)
2041a722:	c71c                	sw	a5,8(a4)
2041a724:	004ba703          	lw	a4,4(s7)
2041a728:	416986b3          	sub	a3,s3,s6
2041a72c:	463d                	li	a2,15
2041a72e:	8b05                	andi	a4,a4,1
2041a730:	013b87b3          	add	a5,s7,s3
2041a734:	28d67563          	bleu	a3,a2,2041a9be <_realloc_r+0x392>
2041a738:	00eb69b3          	or	s3,s6,a4
2041a73c:	013ba223          	sw	s3,4(s7)
2041a740:	016b85b3          	add	a1,s7,s6
2041a744:	0016e693          	ori	a3,a3,1
2041a748:	c1d4                	sw	a3,4(a1)
2041a74a:	43d8                	lw	a4,4(a5)
2041a74c:	05a1                	addi	a1,a1,8
2041a74e:	8556                	mv	a0,s5
2041a750:	00176713          	ori	a4,a4,1
2041a754:	c3d8                	sw	a4,4(a5)
2041a756:	b8efd0ef          	jal	ra,20417ae4 <_free_r>
2041a75a:	8556                	mv	a0,s5
2041a75c:	d92ff0ef          	jal	ra,20419cee <__malloc_unlock>
2041a760:	008b8a13          	addi	s4,s7,8
2041a764:	b73d                	j	2041a692 <_realloc_r+0x66>
2041a766:	4701                	li	a4,0
2041a768:	4781                	li	a5,0
2041a76a:	8a85                	andi	a3,a3,1
2041a76c:	1a069963          	bnez	a3,2041a91e <_realloc_r+0x2f2>
2041a770:	ff842483          	lw	s1,-8(s0)
2041a774:	409b84b3          	sub	s1,s7,s1
2041a778:	0044aa03          	lw	s4,4(s1)
2041a77c:	ffca7a13          	andi	s4,s4,-4
2041a780:	9a4a                	add	s4,s4,s2
2041a782:	12078463          	beqz	a5,2041a8aa <_realloc_r+0x27e>
2041a786:	014709b3          	add	s3,a4,s4
2041a78a:	0af61263          	bne	a2,a5,2041a82e <_realloc_r+0x202>
2041a78e:	010b0793          	addi	a5,s6,16
2041a792:	10f9cc63          	blt	s3,a5,2041a8aa <_realloc_r+0x27e>
2041a796:	4498                	lw	a4,8(s1)
2041a798:	44dc                	lw	a5,12(s1)
2041a79a:	ffc90613          	addi	a2,s2,-4
2041a79e:	00848a13          	addi	s4,s1,8
2041a7a2:	c75c                	sw	a5,12(a4)
2041a7a4:	c798                	sw	a4,8(a5)
2041a7a6:	02400713          	li	a4,36
2041a7aa:	06c76d63          	bltu	a4,a2,2041a824 <_realloc_r+0x1f8>
2041a7ae:	46cd                	li	a3,19
2041a7b0:	87d2                	mv	a5,s4
2041a7b2:	00c6fc63          	bleu	a2,a3,2041a7ca <_realloc_r+0x19e>
2041a7b6:	401c                	lw	a5,0(s0)
2041a7b8:	c49c                	sw	a5,8(s1)
2041a7ba:	405c                	lw	a5,4(s0)
2041a7bc:	c4dc                	sw	a5,12(s1)
2041a7be:	47ed                	li	a5,27
2041a7c0:	02c7ef63          	bltu	a5,a2,2041a7fe <_realloc_r+0x1d2>
2041a7c4:	0421                	addi	s0,s0,8
2041a7c6:	01048793          	addi	a5,s1,16
2041a7ca:	4018                	lw	a4,0(s0)
2041a7cc:	c398                	sw	a4,0(a5)
2041a7ce:	4058                	lw	a4,4(s0)
2041a7d0:	c3d8                	sw	a4,4(a5)
2041a7d2:	4418                	lw	a4,8(s0)
2041a7d4:	c798                	sw	a4,8(a5)
2041a7d6:	016487b3          	add	a5,s1,s6
2041a7da:	416989b3          	sub	s3,s3,s6
2041a7de:	00fc2423          	sw	a5,8(s8)
2041a7e2:	0019e993          	ori	s3,s3,1
2041a7e6:	0137a223          	sw	s3,4(a5)
2041a7ea:	40dc                	lw	a5,4(s1)
2041a7ec:	8b85                	andi	a5,a5,1
2041a7ee:	0167e9b3          	or	s3,a5,s6
2041a7f2:	0134a223          	sw	s3,4(s1)
2041a7f6:	8556                	mv	a0,s5
2041a7f8:	cf6ff0ef          	jal	ra,20419cee <__malloc_unlock>
2041a7fc:	bd59                	j	2041a692 <_realloc_r+0x66>
2041a7fe:	441c                	lw	a5,8(s0)
2041a800:	c89c                	sw	a5,16(s1)
2041a802:	445c                	lw	a5,12(s0)
2041a804:	c8dc                	sw	a5,20(s1)
2041a806:	00e60663          	beq	a2,a4,2041a812 <_realloc_r+0x1e6>
2041a80a:	0441                	addi	s0,s0,16
2041a80c:	01848793          	addi	a5,s1,24
2041a810:	bf6d                	j	2041a7ca <_realloc_r+0x19e>
2041a812:	481c                	lw	a5,16(s0)
2041a814:	0461                	addi	s0,s0,24
2041a816:	cc9c                	sw	a5,24(s1)
2041a818:	ffc42703          	lw	a4,-4(s0)
2041a81c:	02048793          	addi	a5,s1,32
2041a820:	ccd8                	sw	a4,28(s1)
2041a822:	b765                	j	2041a7ca <_realloc_r+0x19e>
2041a824:	85a2                	mv	a1,s0
2041a826:	8552                	mv	a0,s4
2041a828:	c86ff0ef          	jal	ra,20419cae <memmove>
2041a82c:	b76d                	j	2041a7d6 <_realloc_r+0x1aa>
2041a82e:	0769ce63          	blt	s3,s6,2041a8aa <_realloc_r+0x27e>
2041a832:	47d8                	lw	a4,12(a5)
2041a834:	479c                	lw	a5,8(a5)
2041a836:	ffc90613          	addi	a2,s2,-4
2041a83a:	00848513          	addi	a0,s1,8
2041a83e:	c7d8                	sw	a4,12(a5)
2041a840:	c71c                	sw	a5,8(a4)
2041a842:	4498                	lw	a4,8(s1)
2041a844:	44dc                	lw	a5,12(s1)
2041a846:	c75c                	sw	a5,12(a4)
2041a848:	c798                	sw	a4,8(a5)
2041a84a:	02400793          	li	a5,36
2041a84e:	04c7ea63          	bltu	a5,a2,2041a8a2 <_realloc_r+0x276>
2041a852:	474d                	li	a4,19
2041a854:	00c77c63          	bleu	a2,a4,2041a86c <_realloc_r+0x240>
2041a858:	4018                	lw	a4,0(s0)
2041a85a:	c498                	sw	a4,8(s1)
2041a85c:	4058                	lw	a4,4(s0)
2041a85e:	c4d8                	sw	a4,12(s1)
2041a860:	476d                	li	a4,27
2041a862:	00c76d63          	bltu	a4,a2,2041a87c <_realloc_r+0x250>
2041a866:	0421                	addi	s0,s0,8
2041a868:	01048513          	addi	a0,s1,16
2041a86c:	401c                	lw	a5,0(s0)
2041a86e:	c11c                	sw	a5,0(a0)
2041a870:	405c                	lw	a5,4(s0)
2041a872:	c15c                	sw	a5,4(a0)
2041a874:	441c                	lw	a5,8(s0)
2041a876:	c51c                	sw	a5,8(a0)
2041a878:	8ba6                	mv	s7,s1
2041a87a:	b56d                	j	2041a724 <_realloc_r+0xf8>
2041a87c:	4418                	lw	a4,8(s0)
2041a87e:	c898                	sw	a4,16(s1)
2041a880:	4458                	lw	a4,12(s0)
2041a882:	c8d8                	sw	a4,20(s1)
2041a884:	00f60663          	beq	a2,a5,2041a890 <_realloc_r+0x264>
2041a888:	0441                	addi	s0,s0,16
2041a88a:	01848513          	addi	a0,s1,24
2041a88e:	bff9                	j	2041a86c <_realloc_r+0x240>
2041a890:	481c                	lw	a5,16(s0)
2041a892:	02048513          	addi	a0,s1,32
2041a896:	0461                	addi	s0,s0,24
2041a898:	cc9c                	sw	a5,24(s1)
2041a89a:	ffc42783          	lw	a5,-4(s0)
2041a89e:	ccdc                	sw	a5,28(s1)
2041a8a0:	b7f1                	j	2041a86c <_realloc_r+0x240>
2041a8a2:	85a2                	mv	a1,s0
2041a8a4:	c0aff0ef          	jal	ra,20419cae <memmove>
2041a8a8:	bfc1                	j	2041a878 <_realloc_r+0x24c>
2041a8aa:	076a4a63          	blt	s4,s6,2041a91e <_realloc_r+0x2f2>
2041a8ae:	44dc                	lw	a5,12(s1)
2041a8b0:	4498                	lw	a4,8(s1)
2041a8b2:	ffc90613          	addi	a2,s2,-4
2041a8b6:	00848513          	addi	a0,s1,8
2041a8ba:	c75c                	sw	a5,12(a4)
2041a8bc:	c798                	sw	a4,8(a5)
2041a8be:	02400793          	li	a5,36
2041a8c2:	04c7ea63          	bltu	a5,a2,2041a916 <_realloc_r+0x2ea>
2041a8c6:	474d                	li	a4,19
2041a8c8:	00c77c63          	bleu	a2,a4,2041a8e0 <_realloc_r+0x2b4>
2041a8cc:	4018                	lw	a4,0(s0)
2041a8ce:	c498                	sw	a4,8(s1)
2041a8d0:	4058                	lw	a4,4(s0)
2041a8d2:	c4d8                	sw	a4,12(s1)
2041a8d4:	476d                	li	a4,27
2041a8d6:	00c76d63          	bltu	a4,a2,2041a8f0 <_realloc_r+0x2c4>
2041a8da:	0421                	addi	s0,s0,8
2041a8dc:	01048513          	addi	a0,s1,16
2041a8e0:	401c                	lw	a5,0(s0)
2041a8e2:	c11c                	sw	a5,0(a0)
2041a8e4:	405c                	lw	a5,4(s0)
2041a8e6:	c15c                	sw	a5,4(a0)
2041a8e8:	441c                	lw	a5,8(s0)
2041a8ea:	c51c                	sw	a5,8(a0)
2041a8ec:	89d2                	mv	s3,s4
2041a8ee:	b769                	j	2041a878 <_realloc_r+0x24c>
2041a8f0:	4418                	lw	a4,8(s0)
2041a8f2:	c898                	sw	a4,16(s1)
2041a8f4:	4458                	lw	a4,12(s0)
2041a8f6:	c8d8                	sw	a4,20(s1)
2041a8f8:	00f60663          	beq	a2,a5,2041a904 <_realloc_r+0x2d8>
2041a8fc:	0441                	addi	s0,s0,16
2041a8fe:	01848513          	addi	a0,s1,24
2041a902:	bff9                	j	2041a8e0 <_realloc_r+0x2b4>
2041a904:	481c                	lw	a5,16(s0)
2041a906:	02048513          	addi	a0,s1,32
2041a90a:	0461                	addi	s0,s0,24
2041a90c:	cc9c                	sw	a5,24(s1)
2041a90e:	ffc42783          	lw	a5,-4(s0)
2041a912:	ccdc                	sw	a5,28(s1)
2041a914:	b7f1                	j	2041a8e0 <_realloc_r+0x2b4>
2041a916:	85a2                	mv	a1,s0
2041a918:	b96ff0ef          	jal	ra,20419cae <memmove>
2041a91c:	bfc1                	j	2041a8ec <_realloc_r+0x2c0>
2041a91e:	8556                	mv	a0,s5
2041a920:	eddfe0ef          	jal	ra,204197fc <_malloc_r>
2041a924:	8a2a                	mv	s4,a0
2041a926:	ec0508e3          	beqz	a0,2041a7f6 <_realloc_r+0x1ca>
2041a92a:	ffc42783          	lw	a5,-4(s0)
2041a92e:	ff850713          	addi	a4,a0,-8
2041a932:	9bf9                	andi	a5,a5,-2
2041a934:	97de                	add	a5,a5,s7
2041a936:	00e79863          	bne	a5,a4,2041a946 <_realloc_r+0x31a>
2041a93a:	ffc52983          	lw	s3,-4(a0)
2041a93e:	ffc9f993          	andi	s3,s3,-4
2041a942:	99ca                	add	s3,s3,s2
2041a944:	b3c5                	j	2041a724 <_realloc_r+0xf8>
2041a946:	ffc90613          	addi	a2,s2,-4
2041a94a:	02400793          	li	a5,36
2041a94e:	06c7e263          	bltu	a5,a2,2041a9b2 <_realloc_r+0x386>
2041a952:	474d                	li	a4,19
2041a954:	04c77c63          	bleu	a2,a4,2041a9ac <_realloc_r+0x380>
2041a958:	4018                	lw	a4,0(s0)
2041a95a:	c118                	sw	a4,0(a0)
2041a95c:	4058                	lw	a4,4(s0)
2041a95e:	c158                	sw	a4,4(a0)
2041a960:	476d                	li	a4,27
2041a962:	02c76163          	bltu	a4,a2,2041a984 <_realloc_r+0x358>
2041a966:	00840713          	addi	a4,s0,8
2041a96a:	00850793          	addi	a5,a0,8
2041a96e:	4314                	lw	a3,0(a4)
2041a970:	c394                	sw	a3,0(a5)
2041a972:	4354                	lw	a3,4(a4)
2041a974:	c3d4                	sw	a3,4(a5)
2041a976:	4718                	lw	a4,8(a4)
2041a978:	c798                	sw	a4,8(a5)
2041a97a:	85a2                	mv	a1,s0
2041a97c:	8556                	mv	a0,s5
2041a97e:	966fd0ef          	jal	ra,20417ae4 <_free_r>
2041a982:	bd95                	j	2041a7f6 <_realloc_r+0x1ca>
2041a984:	4418                	lw	a4,8(s0)
2041a986:	c518                	sw	a4,8(a0)
2041a988:	4458                	lw	a4,12(s0)
2041a98a:	c558                	sw	a4,12(a0)
2041a98c:	00f60763          	beq	a2,a5,2041a99a <_realloc_r+0x36e>
2041a990:	01040713          	addi	a4,s0,16
2041a994:	01050793          	addi	a5,a0,16
2041a998:	bfd9                	j	2041a96e <_realloc_r+0x342>
2041a99a:	481c                	lw	a5,16(s0)
2041a99c:	01840713          	addi	a4,s0,24
2041a9a0:	c91c                	sw	a5,16(a0)
2041a9a2:	4854                	lw	a3,20(s0)
2041a9a4:	01850793          	addi	a5,a0,24
2041a9a8:	c954                	sw	a3,20(a0)
2041a9aa:	b7d1                	j	2041a96e <_realloc_r+0x342>
2041a9ac:	87aa                	mv	a5,a0
2041a9ae:	8722                	mv	a4,s0
2041a9b0:	bf7d                	j	2041a96e <_realloc_r+0x342>
2041a9b2:	85a2                	mv	a1,s0
2041a9b4:	afaff0ef          	jal	ra,20419cae <memmove>
2041a9b8:	b7c9                	j	2041a97a <_realloc_r+0x34e>
2041a9ba:	89ca                	mv	s3,s2
2041a9bc:	b3a5                	j	2041a724 <_realloc_r+0xf8>
2041a9be:	00e9e9b3          	or	s3,s3,a4
2041a9c2:	013ba223          	sw	s3,4(s7)
2041a9c6:	43d8                	lw	a4,4(a5)
2041a9c8:	00176713          	ori	a4,a4,1
2041a9cc:	c3d8                	sw	a4,4(a5)
2041a9ce:	b371                	j	2041a75a <_realloc_r+0x12e>

2041a9d0 <_sbrk_r>:
2041a9d0:	1141                	addi	sp,sp,-16
2041a9d2:	c422                	sw	s0,8(sp)
2041a9d4:	c226                	sw	s1,4(sp)
2041a9d6:	84aa                	mv	s1,a0
2041a9d8:	852e                	mv	a0,a1
2041a9da:	c606                	sw	ra,12(sp)
2041a9dc:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041a9e0:	dedf70ef          	jal	ra,204127cc <__wrap_sbrk>
2041a9e4:	57fd                	li	a5,-1
2041a9e6:	00f51663          	bne	a0,a5,2041a9f2 <_sbrk_r+0x22>
2041a9ea:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041a9ee:	c391                	beqz	a5,2041a9f2 <_sbrk_r+0x22>
2041a9f0:	c09c                	sw	a5,0(s1)
2041a9f2:	40b2                	lw	ra,12(sp)
2041a9f4:	4422                	lw	s0,8(sp)
2041a9f6:	4492                	lw	s1,4(sp)
2041a9f8:	0141                	addi	sp,sp,16
2041a9fa:	8082                	ret

2041a9fc <frexp>:
2041a9fc:	1141                	addi	sp,sp,-16
2041a9fe:	c226                	sw	s1,4(sp)
2041aa00:	800004b7          	lui	s1,0x80000
2041aa04:	c422                	sw	s0,8(sp)
2041aa06:	c606                	sw	ra,12(sp)
2041aa08:	fff4c493          	not	s1,s1
2041aa0c:	00b4f733          	and	a4,s1,a1
2041aa10:	00062023          	sw	zero,0(a2)
2041aa14:	7ff00837          	lui	a6,0x7ff00
2041aa18:	86aa                	mv	a3,a0
2041aa1a:	87ae                	mv	a5,a1
2041aa1c:	8432                	mv	s0,a2
2041aa1e:	05075763          	ble	a6,a4,2041aa6c <frexp+0x70>
2041aa22:	00a76833          	or	a6,a4,a0
2041aa26:	04080363          	beqz	a6,2041aa6c <frexp+0x70>
2041aa2a:	001007b7          	lui	a5,0x100
2041aa2e:	862e                	mv	a2,a1
2041aa30:	02f75163          	ble	a5,a4,2041aa52 <frexp+0x56>
2041aa34:	800017b7          	lui	a5,0x80001
2041aa38:	a5878793          	addi	a5,a5,-1448 # 80000a58 <pulp__FC+0x80000a59>
2041aa3c:	4390                	lw	a2,0(a5)
2041aa3e:	43d4                	lw	a3,4(a5)
2041aa40:	221020ef          	jal	ra,2041d460 <__muldf3>
2041aa44:	fca00793          	li	a5,-54
2041aa48:	86aa                	mv	a3,a0
2041aa4a:	862e                	mv	a2,a1
2041aa4c:	00b4f733          	and	a4,s1,a1
2041aa50:	c01c                	sw	a5,0(s0)
2041aa52:	401c                	lw	a5,0(s0)
2041aa54:	8751                	srai	a4,a4,0x14
2041aa56:	c0270713          	addi	a4,a4,-1022 # ffeffc02 <pulp__FC+0xffeffc03>
2041aa5a:	973e                	add	a4,a4,a5
2041aa5c:	801007b7          	lui	a5,0x80100
2041aa60:	17fd                	addi	a5,a5,-1
2041aa62:	8e7d                	and	a2,a2,a5
2041aa64:	3fe007b7          	lui	a5,0x3fe00
2041aa68:	c018                	sw	a4,0(s0)
2041aa6a:	8fd1                	or	a5,a5,a2
2041aa6c:	40b2                	lw	ra,12(sp)
2041aa6e:	4422                	lw	s0,8(sp)
2041aa70:	4492                	lw	s1,4(sp)
2041aa72:	8536                	mv	a0,a3
2041aa74:	85be                	mv	a1,a5
2041aa76:	0141                	addi	sp,sp,16
2041aa78:	8082                	ret

2041aa7a <_init_signal_r>:
2041aa7a:	2dc52703          	lw	a4,732(a0)
2041aa7e:	eb15                	bnez	a4,2041aab2 <_init_signal_r+0x38>
2041aa80:	1141                	addi	sp,sp,-16
2041aa82:	08000593          	li	a1,128
2041aa86:	c422                	sw	s0,8(sp)
2041aa88:	c606                	sw	ra,12(sp)
2041aa8a:	842a                	mv	s0,a0
2041aa8c:	d71fe0ef          	jal	ra,204197fc <_malloc_r>
2041aa90:	2ca42e23          	sw	a0,732(s0)
2041aa94:	57fd                	li	a5,-1
2041aa96:	c909                	beqz	a0,2041aaa8 <_init_signal_r+0x2e>
2041aa98:	08050793          	addi	a5,a0,128
2041aa9c:	00052023          	sw	zero,0(a0)
2041aaa0:	0511                	addi	a0,a0,4
2041aaa2:	fef51de3          	bne	a0,a5,2041aa9c <_init_signal_r+0x22>
2041aaa6:	4781                	li	a5,0
2041aaa8:	40b2                	lw	ra,12(sp)
2041aaaa:	4422                	lw	s0,8(sp)
2041aaac:	853e                	mv	a0,a5
2041aaae:	0141                	addi	sp,sp,16
2041aab0:	8082                	ret
2041aab2:	4781                	li	a5,0
2041aab4:	853e                	mv	a0,a5
2041aab6:	8082                	ret

2041aab8 <_signal_r>:
2041aab8:	1141                	addi	sp,sp,-16
2041aaba:	c226                	sw	s1,4(sp)
2041aabc:	c606                	sw	ra,12(sp)
2041aabe:	c422                	sw	s0,8(sp)
2041aac0:	c04a                	sw	s2,0(sp)
2041aac2:	477d                	li	a4,31
2041aac4:	84aa                	mv	s1,a0
2041aac6:	00b77663          	bleu	a1,a4,2041aad2 <_signal_r+0x1a>
2041aaca:	4759                	li	a4,22
2041aacc:	c118                	sw	a4,0(a0)
2041aace:	557d                	li	a0,-1
2041aad0:	a831                	j	2041aaec <_signal_r+0x34>
2041aad2:	2dc52783          	lw	a5,732(a0)
2041aad6:	8932                	mv	s2,a2
2041aad8:	842e                	mv	s0,a1
2041aada:	cf99                	beqz	a5,2041aaf8 <_signal_r+0x40>
2041aadc:	00241593          	slli	a1,s0,0x2
2041aae0:	2dc4a403          	lw	s0,732(s1) # 800002dc <pulp__FC+0x800002dd>
2041aae4:	95a2                	add	a1,a1,s0
2041aae6:	4188                	lw	a0,0(a1)
2041aae8:	0125a023          	sw	s2,0(a1)
2041aaec:	40b2                	lw	ra,12(sp)
2041aaee:	4422                	lw	s0,8(sp)
2041aaf0:	4492                	lw	s1,4(sp)
2041aaf2:	4902                	lw	s2,0(sp)
2041aaf4:	0141                	addi	sp,sp,16
2041aaf6:	8082                	ret
2041aaf8:	3749                	jal	2041aa7a <_init_signal_r>
2041aafa:	d16d                	beqz	a0,2041aadc <_signal_r+0x24>
2041aafc:	bfc9                	j	2041aace <_signal_r+0x16>

2041aafe <_raise_r>:
2041aafe:	47fd                	li	a5,31
2041ab00:	00b7f663          	bleu	a1,a5,2041ab0c <_raise_r+0xe>
2041ab04:	47d9                	li	a5,22
2041ab06:	c11c                	sw	a5,0(a0)
2041ab08:	557d                	li	a0,-1
2041ab0a:	8082                	ret
2041ab0c:	2dc52783          	lw	a5,732(a0)
2041ab10:	1101                	addi	sp,sp,-32
2041ab12:	cc22                	sw	s0,24(sp)
2041ab14:	ce06                	sw	ra,28(sp)
2041ab16:	862e                	mv	a2,a1
2041ab18:	842a                	mv	s0,a0
2041ab1a:	c791                	beqz	a5,2041ab26 <_raise_r+0x28>
2041ab1c:	00259713          	slli	a4,a1,0x2
2041ab20:	97ba                	add	a5,a5,a4
2041ab22:	4398                	lw	a4,0(a5)
2041ab24:	eb19                	bnez	a4,2041ab3a <_raise_r+0x3c>
2041ab26:	8522                	mv	a0,s0
2041ab28:	c632                	sw	a2,12(sp)
2041ab2a:	28f9                	jal	2041ac08 <_getpid_r>
2041ab2c:	85aa                	mv	a1,a0
2041ab2e:	8522                	mv	a0,s0
2041ab30:	4462                	lw	s0,24(sp)
2041ab32:	4632                	lw	a2,12(sp)
2041ab34:	40f2                	lw	ra,28(sp)
2041ab36:	6105                	addi	sp,sp,32
2041ab38:	a04d                	j	2041abda <_kill_r>
2041ab3a:	4685                	li	a3,1
2041ab3c:	4501                	li	a0,0
2041ab3e:	00d70863          	beq	a4,a3,2041ab4e <_raise_r+0x50>
2041ab42:	56fd                	li	a3,-1
2041ab44:	00d71963          	bne	a4,a3,2041ab56 <_raise_r+0x58>
2041ab48:	47d9                	li	a5,22
2041ab4a:	c01c                	sw	a5,0(s0)
2041ab4c:	4505                	li	a0,1
2041ab4e:	40f2                	lw	ra,28(sp)
2041ab50:	4462                	lw	s0,24(sp)
2041ab52:	6105                	addi	sp,sp,32
2041ab54:	8082                	ret
2041ab56:	852e                	mv	a0,a1
2041ab58:	0007a023          	sw	zero,0(a5) # 3fe00000 <__fini_array_end+0x1f9dd744>
2041ab5c:	9702                	jalr	a4
2041ab5e:	4501                	li	a0,0
2041ab60:	b7fd                	j	2041ab4e <_raise_r+0x50>

2041ab62 <__sigtramp_r>:
2041ab62:	47fd                	li	a5,31
2041ab64:	00b7f463          	bleu	a1,a5,2041ab6c <__sigtramp_r+0xa>
2041ab68:	557d                	li	a0,-1
2041ab6a:	8082                	ret
2041ab6c:	2dc52783          	lw	a5,732(a0)
2041ab70:	1141                	addi	sp,sp,-16
2041ab72:	c422                	sw	s0,8(sp)
2041ab74:	c226                	sw	s1,4(sp)
2041ab76:	c606                	sw	ra,12(sp)
2041ab78:	84aa                	mv	s1,a0
2041ab7a:	842e                	mv	s0,a1
2041ab7c:	c79d                	beqz	a5,2041abaa <__sigtramp_r+0x48>
2041ab7e:	2dc4a783          	lw	a5,732(s1)
2041ab82:	00241713          	slli	a4,s0,0x2
2041ab86:	4505                	li	a0,1
2041ab88:	973e                	add	a4,a4,a5
2041ab8a:	431c                	lw	a5,0(a4)
2041ab8c:	c395                	beqz	a5,2041abb0 <__sigtramp_r+0x4e>
2041ab8e:	56fd                	li	a3,-1
2041ab90:	4509                	li	a0,2
2041ab92:	00d78f63          	beq	a5,a3,2041abb0 <__sigtramp_r+0x4e>
2041ab96:	4685                	li	a3,1
2041ab98:	450d                	li	a0,3
2041ab9a:	00d78b63          	beq	a5,a3,2041abb0 <__sigtramp_r+0x4e>
2041ab9e:	8522                	mv	a0,s0
2041aba0:	00072023          	sw	zero,0(a4)
2041aba4:	9782                	jalr	a5
2041aba6:	4501                	li	a0,0
2041aba8:	a021                	j	2041abb0 <__sigtramp_r+0x4e>
2041abaa:	3dc1                	jal	2041aa7a <_init_signal_r>
2041abac:	d969                	beqz	a0,2041ab7e <__sigtramp_r+0x1c>
2041abae:	557d                	li	a0,-1
2041abb0:	40b2                	lw	ra,12(sp)
2041abb2:	4422                	lw	s0,8(sp)
2041abb4:	4492                	lw	s1,4(sp)
2041abb6:	0141                	addi	sp,sp,16
2041abb8:	8082                	ret

2041abba <raise>:
2041abba:	85aa                	mv	a1,a0
2041abbc:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041abc0:	bf3d                	j	2041aafe <_raise_r>

2041abc2 <signal>:
2041abc2:	862e                	mv	a2,a1
2041abc4:	85aa                	mv	a1,a0
2041abc6:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041abca:	b5fd                	j	2041aab8 <_signal_r>

2041abcc <_init_signal>:
2041abcc:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041abd0:	b56d                	j	2041aa7a <_init_signal_r>

2041abd2 <__sigtramp>:
2041abd2:	85aa                	mv	a1,a0
2041abd4:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041abd8:	b769                	j	2041ab62 <__sigtramp_r>

2041abda <_kill_r>:
2041abda:	1141                	addi	sp,sp,-16
2041abdc:	c422                	sw	s0,8(sp)
2041abde:	c226                	sw	s1,4(sp)
2041abe0:	84aa                	mv	s1,a0
2041abe2:	852e                	mv	a0,a1
2041abe4:	85b2                	mv	a1,a2
2041abe6:	c606                	sw	ra,12(sp)
2041abe8:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041abec:	1d4010ef          	jal	ra,2041bdc0 <__wrap_kill>
2041abf0:	57fd                	li	a5,-1
2041abf2:	00f51663          	bne	a0,a5,2041abfe <_kill_r+0x24>
2041abf6:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041abfa:	c391                	beqz	a5,2041abfe <_kill_r+0x24>
2041abfc:	c09c                	sw	a5,0(s1)
2041abfe:	40b2                	lw	ra,12(sp)
2041ac00:	4422                	lw	s0,8(sp)
2041ac02:	4492                	lw	s1,4(sp)
2041ac04:	0141                	addi	sp,sp,16
2041ac06:	8082                	ret

2041ac08 <_getpid_r>:
2041ac08:	1740106f          	j	2041bd7c <__wrap_getpid>

2041ac0c <_sprintf_r>:
2041ac0c:	7135                	addi	sp,sp,-160
2041ac0e:	cb3e                	sw	a5,148(sp)
2041ac10:	800007b7          	lui	a5,0x80000
2041ac14:	fff7c793          	not	a5,a5
2041ac18:	ce3e                	sw	a5,28(sp)
2041ac1a:	c83e                	sw	a5,16(sp)
2041ac1c:	77c1                	lui	a5,0xffff0
2041ac1e:	c736                	sw	a3,140(sp)
2041ac20:	c42e                	sw	a1,8(sp)
2041ac22:	cc2e                	sw	a1,24(sp)
2041ac24:	20878793          	addi	a5,a5,520 # ffff0208 <pulp__FC+0xffff0209>
2041ac28:	0174                	addi	a3,sp,140
2041ac2a:	002c                	addi	a1,sp,8
2041ac2c:	de86                	sw	ra,124(sp)
2041ac2e:	ca3e                	sw	a5,20(sp)
2041ac30:	c93a                	sw	a4,144(sp)
2041ac32:	cd42                	sw	a6,152(sp)
2041ac34:	cf46                	sw	a7,156(sp)
2041ac36:	c236                	sw	a3,4(sp)
2041ac38:	f6bf80ef          	jal	ra,20413ba2 <_svfprintf_r>
2041ac3c:	47a2                	lw	a5,8(sp)
2041ac3e:	00078023          	sb	zero,0(a5)
2041ac42:	50f6                	lw	ra,124(sp)
2041ac44:	610d                	addi	sp,sp,160
2041ac46:	8082                	ret

2041ac48 <sprintf>:
2041ac48:	7135                	addi	sp,sp,-160
2041ac4a:	cb3e                	sw	a5,148(sp)
2041ac4c:	800007b7          	lui	a5,0x80000
2041ac50:	fff7c793          	not	a5,a5
2041ac54:	ce3e                	sw	a5,28(sp)
2041ac56:	c83e                	sw	a5,16(sp)
2041ac58:	77c1                	lui	a5,0xffff0
2041ac5a:	20878793          	addi	a5,a5,520 # ffff0208 <pulp__FC+0xffff0209>
2041ac5e:	ca3e                	sw	a5,20(sp)
2041ac60:	c42a                	sw	a0,8(sp)
2041ac62:	cc2a                	sw	a0,24(sp)
2041ac64:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041ac68:	c532                	sw	a2,136(sp)
2041ac6a:	c736                	sw	a3,140(sp)
2041ac6c:	862e                	mv	a2,a1
2041ac6e:	0134                	addi	a3,sp,136
2041ac70:	002c                	addi	a1,sp,8
2041ac72:	de86                	sw	ra,124(sp)
2041ac74:	c93a                	sw	a4,144(sp)
2041ac76:	cd42                	sw	a6,152(sp)
2041ac78:	cf46                	sw	a7,156(sp)
2041ac7a:	c236                	sw	a3,4(sp)
2041ac7c:	f27f80ef          	jal	ra,20413ba2 <_svfprintf_r>
2041ac80:	47a2                	lw	a5,8(sp)
2041ac82:	00078023          	sb	zero,0(a5)
2041ac86:	50f6                	lw	ra,124(sp)
2041ac88:	610d                	addi	sp,sp,160
2041ac8a:	8082                	ret

2041ac8c <__sread>:
2041ac8c:	1141                	addi	sp,sp,-16
2041ac8e:	c422                	sw	s0,8(sp)
2041ac90:	842e                	mv	s0,a1
2041ac92:	00e59583          	lh	a1,14(a1)
2041ac96:	c606                	sw	ra,12(sp)
2041ac98:	5a7000ef          	jal	ra,2041ba3e <_read_r>
2041ac9c:	00054963          	bltz	a0,2041acae <__sread+0x22>
2041aca0:	483c                	lw	a5,80(s0)
2041aca2:	97aa                	add	a5,a5,a0
2041aca4:	c83c                	sw	a5,80(s0)
2041aca6:	40b2                	lw	ra,12(sp)
2041aca8:	4422                	lw	s0,8(sp)
2041acaa:	0141                	addi	sp,sp,16
2041acac:	8082                	ret
2041acae:	00c45783          	lhu	a5,12(s0)
2041acb2:	777d                	lui	a4,0xfffff
2041acb4:	177d                	addi	a4,a4,-1
2041acb6:	8ff9                	and	a5,a5,a4
2041acb8:	00f41623          	sh	a5,12(s0)
2041acbc:	b7ed                	j	2041aca6 <__sread+0x1a>

2041acbe <__seofread>:
2041acbe:	4501                	li	a0,0
2041acc0:	8082                	ret

2041acc2 <__swrite>:
2041acc2:	00c5d783          	lhu	a5,12(a1)
2041acc6:	1101                	addi	sp,sp,-32
2041acc8:	cc22                	sw	s0,24(sp)
2041acca:	ca26                	sw	s1,20(sp)
2041accc:	c84a                	sw	s2,16(sp)
2041acce:	c64e                	sw	s3,12(sp)
2041acd0:	ce06                	sw	ra,28(sp)
2041acd2:	1007f793          	andi	a5,a5,256
2041acd6:	84aa                	mv	s1,a0
2041acd8:	842e                	mv	s0,a1
2041acda:	8932                	mv	s2,a2
2041acdc:	89b6                	mv	s3,a3
2041acde:	c799                	beqz	a5,2041acec <__swrite+0x2a>
2041ace0:	00e59583          	lh	a1,14(a1)
2041ace4:	4689                	li	a3,2
2041ace6:	4601                	li	a2,0
2041ace8:	529000ef          	jal	ra,2041ba10 <_lseek_r>
2041acec:	00c45783          	lhu	a5,12(s0)
2041acf0:	777d                	lui	a4,0xfffff
2041acf2:	177d                	addi	a4,a4,-1
2041acf4:	8ff9                	and	a5,a5,a4
2041acf6:	00f41623          	sh	a5,12(s0)
2041acfa:	00e41583          	lh	a1,14(s0)
2041acfe:	4462                	lw	s0,24(sp)
2041ad00:	40f2                	lw	ra,28(sp)
2041ad02:	86ce                	mv	a3,s3
2041ad04:	864a                	mv	a2,s2
2041ad06:	49b2                	lw	s3,12(sp)
2041ad08:	4942                	lw	s2,16(sp)
2041ad0a:	8526                	mv	a0,s1
2041ad0c:	44d2                	lw	s1,20(sp)
2041ad0e:	6105                	addi	sp,sp,32
2041ad10:	3410006f          	j	2041b850 <_write_r>

2041ad14 <__sseek>:
2041ad14:	1141                	addi	sp,sp,-16
2041ad16:	c422                	sw	s0,8(sp)
2041ad18:	842e                	mv	s0,a1
2041ad1a:	00e59583          	lh	a1,14(a1)
2041ad1e:	c606                	sw	ra,12(sp)
2041ad20:	4f1000ef          	jal	ra,2041ba10 <_lseek_r>
2041ad24:	57fd                	li	a5,-1
2041ad26:	00c45703          	lhu	a4,12(s0)
2041ad2a:	00f51b63          	bne	a0,a5,2041ad40 <__sseek+0x2c>
2041ad2e:	77fd                	lui	a5,0xfffff
2041ad30:	17fd                	addi	a5,a5,-1
2041ad32:	8ff9                	and	a5,a5,a4
2041ad34:	00f41623          	sh	a5,12(s0)
2041ad38:	40b2                	lw	ra,12(sp)
2041ad3a:	4422                	lw	s0,8(sp)
2041ad3c:	0141                	addi	sp,sp,16
2041ad3e:	8082                	ret
2041ad40:	6785                	lui	a5,0x1
2041ad42:	8fd9                	or	a5,a5,a4
2041ad44:	00f41623          	sh	a5,12(s0)
2041ad48:	c828                	sw	a0,80(s0)
2041ad4a:	b7fd                	j	2041ad38 <__sseek+0x24>

2041ad4c <__sclose>:
2041ad4c:	00e59583          	lh	a1,14(a1)
2041ad50:	3a90006f          	j	2041b8f8 <_close_r>

2041ad54 <strcpy>:
2041ad54:	87aa                	mv	a5,a0
2041ad56:	0005c703          	lbu	a4,0(a1)
2041ad5a:	0785                	addi	a5,a5,1
2041ad5c:	0585                	addi	a1,a1,1
2041ad5e:	fee78fa3          	sb	a4,-1(a5) # fff <__stack_size-0x3001>
2041ad62:	fb75                	bnez	a4,2041ad56 <strcpy+0x2>
2041ad64:	8082                	ret

2041ad66 <__ssprint_r>:
2041ad66:	461c                	lw	a5,8(a2)
2041ad68:	7179                	addi	sp,sp,-48
2041ad6a:	ce4e                	sw	s3,28(sp)
2041ad6c:	d606                	sw	ra,44(sp)
2041ad6e:	d422                	sw	s0,40(sp)
2041ad70:	d226                	sw	s1,36(sp)
2041ad72:	d04a                	sw	s2,32(sp)
2041ad74:	cc52                	sw	s4,24(sp)
2041ad76:	ca56                	sw	s5,20(sp)
2041ad78:	c85a                	sw	s6,16(sp)
2041ad7a:	c65e                	sw	s7,12(sp)
2041ad7c:	c462                	sw	s8,8(sp)
2041ad7e:	c266                	sw	s9,4(sp)
2041ad80:	c06a                	sw	s10,0(sp)
2041ad82:	89b2                	mv	s3,a2
2041ad84:	cff9                	beqz	a5,2041ae62 <__ssprint_r+0xfc>
2041ad86:	00062a83          	lw	s5,0(a2)
2041ad8a:	8a2a                	mv	s4,a0
2041ad8c:	842e                	mv	s0,a1
2041ad8e:	4b01                	li	s6,0
2041ad90:	4901                	li	s2,0
2041ad92:	4b8d                	li	s7,3
2041ad94:	4c09                	li	s8,2
2041ad96:	06090263          	beqz	s2,2041adfa <__ssprint_r+0x94>
2041ad9a:	00842d03          	lw	s10,8(s0)
2041ad9e:	09a96a63          	bltu	s2,s10,2041ae32 <__ssprint_r+0xcc>
2041ada2:	00c45783          	lhu	a5,12(s0)
2041ada6:	4807f713          	andi	a4,a5,1152
2041adaa:	c741                	beqz	a4,2041ae32 <__ssprint_r+0xcc>
2041adac:	4004                	lw	s1,0(s0)
2041adae:	480c                	lw	a1,16(s0)
2041adb0:	40b48cb3          	sub	s9,s1,a1
2041adb4:	4844                	lw	s1,20(s0)
2041adb6:	001c8713          	addi	a4,s9,1
2041adba:	974a                	add	a4,a4,s2
2041adbc:	029b84b3          	mul	s1,s7,s1
2041adc0:	0384c4b3          	div	s1,s1,s8
2041adc4:	00e4f363          	bleu	a4,s1,2041adca <__ssprint_r+0x64>
2041adc8:	84ba                	mv	s1,a4
2041adca:	4007f793          	andi	a5,a5,1024
2041adce:	cbdd                	beqz	a5,2041ae84 <__ssprint_r+0x11e>
2041add0:	85a6                	mv	a1,s1
2041add2:	8552                	mv	a0,s4
2041add4:	a29fe0ef          	jal	ra,204197fc <_malloc_r>
2041add8:	8d2a                	mv	s10,a0
2041adda:	e515                	bnez	a0,2041ae06 <__ssprint_r+0xa0>
2041addc:	47b1                	li	a5,12
2041adde:	00fa2023          	sw	a5,0(s4)
2041ade2:	00c45783          	lhu	a5,12(s0)
2041ade6:	557d                	li	a0,-1
2041ade8:	0407e793          	ori	a5,a5,64
2041adec:	00f41623          	sh	a5,12(s0)
2041adf0:	0009a423          	sw	zero,8(s3)
2041adf4:	0009a223          	sw	zero,4(s3)
2041adf8:	a885                	j	2041ae68 <__ssprint_r+0x102>
2041adfa:	000aab03          	lw	s6,0(s5)
2041adfe:	004aa903          	lw	s2,4(s5)
2041ae02:	0aa1                	addi	s5,s5,8
2041ae04:	bf49                	j	2041ad96 <__ssprint_r+0x30>
2041ae06:	480c                	lw	a1,16(s0)
2041ae08:	8666                	mv	a2,s9
2041ae0a:	ecaf80ef          	jal	ra,204134d4 <memcpy>
2041ae0e:	00c45783          	lhu	a5,12(s0)
2041ae12:	b7f7f793          	andi	a5,a5,-1153
2041ae16:	0807e793          	ori	a5,a5,128
2041ae1a:	00f41623          	sh	a5,12(s0)
2041ae1e:	01a42823          	sw	s10,16(s0)
2041ae22:	c844                	sw	s1,20(s0)
2041ae24:	9d66                	add	s10,s10,s9
2041ae26:	419484b3          	sub	s1,s1,s9
2041ae2a:	01a42023          	sw	s10,0(s0)
2041ae2e:	c404                	sw	s1,8(s0)
2041ae30:	8d4a                	mv	s10,s2
2041ae32:	01a97363          	bleu	s10,s2,2041ae38 <__ssprint_r+0xd2>
2041ae36:	8d4a                	mv	s10,s2
2041ae38:	4008                	lw	a0,0(s0)
2041ae3a:	866a                	mv	a2,s10
2041ae3c:	85da                	mv	a1,s6
2041ae3e:	e71fe0ef          	jal	ra,20419cae <memmove>
2041ae42:	441c                	lw	a5,8(s0)
2041ae44:	41a787b3          	sub	a5,a5,s10
2041ae48:	c41c                	sw	a5,8(s0)
2041ae4a:	401c                	lw	a5,0(s0)
2041ae4c:	9d3e                	add	s10,s10,a5
2041ae4e:	0089a783          	lw	a5,8(s3)
2041ae52:	01a42023          	sw	s10,0(s0)
2041ae56:	41278933          	sub	s2,a5,s2
2041ae5a:	0129a423          	sw	s2,8(s3)
2041ae5e:	f8091ee3          	bnez	s2,2041adfa <__ssprint_r+0x94>
2041ae62:	0009a223          	sw	zero,4(s3)
2041ae66:	4501                	li	a0,0
2041ae68:	50b2                	lw	ra,44(sp)
2041ae6a:	5422                	lw	s0,40(sp)
2041ae6c:	5492                	lw	s1,36(sp)
2041ae6e:	5902                	lw	s2,32(sp)
2041ae70:	49f2                	lw	s3,28(sp)
2041ae72:	4a62                	lw	s4,24(sp)
2041ae74:	4ad2                	lw	s5,20(sp)
2041ae76:	4b42                	lw	s6,16(sp)
2041ae78:	4bb2                	lw	s7,12(sp)
2041ae7a:	4c22                	lw	s8,8(sp)
2041ae7c:	4c92                	lw	s9,4(sp)
2041ae7e:	4d02                	lw	s10,0(sp)
2041ae80:	6145                	addi	sp,sp,48
2041ae82:	8082                	ret
2041ae84:	8626                	mv	a2,s1
2041ae86:	8552                	mv	a0,s4
2041ae88:	fa4ff0ef          	jal	ra,2041a62c <_realloc_r>
2041ae8c:	8d2a                	mv	s10,a0
2041ae8e:	f941                	bnez	a0,2041ae1e <__ssprint_r+0xb8>
2041ae90:	480c                	lw	a1,16(s0)
2041ae92:	8552                	mv	a0,s4
2041ae94:	c51fc0ef          	jal	ra,20417ae4 <_free_r>
2041ae98:	b791                	j	2041addc <__ssprint_r+0x76>

2041ae9a <_svfiprintf_r>:
2041ae9a:	00c5d783          	lhu	a5,12(a1)
2041ae9e:	7169                	addi	sp,sp,-304
2041aea0:	12912223          	sw	s1,292(sp)
2041aea4:	13212023          	sw	s2,288(sp)
2041aea8:	11312e23          	sw	s3,284(sp)
2041aeac:	11512a23          	sw	s5,276(sp)
2041aeb0:	12112623          	sw	ra,300(sp)
2041aeb4:	12812423          	sw	s0,296(sp)
2041aeb8:	11412c23          	sw	s4,280(sp)
2041aebc:	11612823          	sw	s6,272(sp)
2041aec0:	11712623          	sw	s7,268(sp)
2041aec4:	11812423          	sw	s8,264(sp)
2041aec8:	11912223          	sw	s9,260(sp)
2041aecc:	11a12023          	sw	s10,256(sp)
2041aed0:	dfee                	sw	s11,252(sp)
2041aed2:	0807f793          	andi	a5,a5,128
2041aed6:	8aaa                	mv	s5,a0
2041aed8:	892e                	mv	s2,a1
2041aeda:	89b2                	mv	s3,a2
2041aedc:	84b6                	mv	s1,a3
2041aede:	c795                	beqz	a5,2041af0a <_svfiprintf_r+0x70>
2041aee0:	499c                	lw	a5,16(a1)
2041aee2:	e785                	bnez	a5,2041af0a <_svfiprintf_r+0x70>
2041aee4:	04000593          	li	a1,64
2041aee8:	915fe0ef          	jal	ra,204197fc <_malloc_r>
2041aeec:	00a92023          	sw	a0,0(s2)
2041aef0:	00a92823          	sw	a0,16(s2)
2041aef4:	e519                	bnez	a0,2041af02 <_svfiprintf_r+0x68>
2041aef6:	47b1                	li	a5,12
2041aef8:	00faa023          	sw	a5,0(s5)
2041aefc:	5bfd                	li	s7,-1
2041aefe:	7c00006f          	j	2041b6be <_svfiprintf_r+0x824>
2041af02:	04000793          	li	a5,64
2041af06:	00f92a23          	sw	a5,20(s2)
2041af0a:	04c10b13          	addi	s6,sp,76
2041af0e:	c0da                	sw	s6,64(sp)
2041af10:	c482                	sw	zero,72(sp)
2041af12:	c282                	sw	zero,68(sp)
2041af14:	875a                	mv	a4,s6
2041af16:	d202                	sw	zero,36(sp)
2041af18:	ce02                	sw	zero,28(sp)
2041af1a:	d002                	sw	zero,32(sp)
2041af1c:	d402                	sw	zero,40(sp)
2041af1e:	4b81                	li	s7,0
2041af20:	844e                	mv	s0,s3
2041af22:	02500693          	li	a3,37
2041af26:	00044783          	lbu	a5,0(s0)
2041af2a:	c399                	beqz	a5,2041af30 <_svfiprintf_r+0x96>
2041af2c:	06d79c63          	bne	a5,a3,2041afa4 <_svfiprintf_r+0x10a>
2041af30:	41340a33          	sub	s4,s0,s3
2041af34:	020a0863          	beqz	s4,2041af64 <_svfiprintf_r+0xca>
2041af38:	47a6                	lw	a5,72(sp)
2041af3a:	01372023          	sw	s3,0(a4) # fffff000 <pulp__FC+0xfffff001>
2041af3e:	01472223          	sw	s4,4(a4)
2041af42:	97d2                	add	a5,a5,s4
2041af44:	c4be                	sw	a5,72(sp)
2041af46:	4796                	lw	a5,68(sp)
2041af48:	469d                	li	a3,7
2041af4a:	0721                	addi	a4,a4,8
2041af4c:	0785                	addi	a5,a5,1
2041af4e:	c2be                	sw	a5,68(sp)
2041af50:	00f6d963          	ble	a5,a3,2041af62 <_svfiprintf_r+0xc8>
2041af54:	0090                	addi	a2,sp,64
2041af56:	85ca                	mv	a1,s2
2041af58:	8556                	mv	a0,s5
2041af5a:	3531                	jal	2041ad66 <__ssprint_r>
2041af5c:	74051b63          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041af60:	875a                	mv	a4,s6
2041af62:	9bd2                	add	s7,s7,s4
2041af64:	00044783          	lbu	a5,0(s0)
2041af68:	7a078863          	beqz	a5,2041b718 <_svfiprintf_r+0x87e>
2041af6c:	00140993          	addi	s3,s0,1
2041af70:	02010da3          	sb	zero,59(sp)
2041af74:	547d                	li	s0,-1
2041af76:	4a01                	li	s4,0
2041af78:	4d01                	li	s10,0
2041af7a:	4c29                	li	s8,10
2041af7c:	02a00c93          	li	s9,42
2041af80:	05a00813          	li	a6,90
2041af84:	45a5                	li	a1,9
2041af86:	0009c603          	lbu	a2,0(s3)
2041af8a:	0985                	addi	s3,s3,1
2041af8c:	fe060693          	addi	a3,a2,-32
2041af90:	64d86963          	bltu	a6,a3,2041b5e2 <_svfiprintf_r+0x748>
2041af94:	204227b7          	lui	a5,0x20422
2041af98:	068a                	slli	a3,a3,0x2
2041af9a:	50078793          	addi	a5,a5,1280 # 20422500 <__mprec_bigtens+0x28>
2041af9e:	96be                	add	a3,a3,a5
2041afa0:	4294                	lw	a3,0(a3)
2041afa2:	8682                	jr	a3
2041afa4:	0405                	addi	s0,s0,1
2041afa6:	b741                	j	2041af26 <_svfiprintf_r+0x8c>
2041afa8:	204226b7          	lui	a3,0x20422
2041afac:	d2468693          	addi	a3,a3,-732 # 20421d24 <zeroes.4369+0x64>
2041afb0:	d236                	sw	a3,36(sp)
2041afb2:	020d7693          	andi	a3,s10,32
2041afb6:	4c068a63          	beqz	a3,2041b48a <_svfiprintf_r+0x5f0>
2041afba:	049d                	addi	s1,s1,7
2041afbc:	98e1                	andi	s1,s1,-8
2041afbe:	0004a883          	lw	a7,0(s1)
2041afc2:	0044ac83          	lw	s9,4(s1)
2041afc6:	00848c13          	addi	s8,s1,8
2041afca:	001d7693          	andi	a3,s10,1
2041afce:	ce81                	beqz	a3,2041afe6 <_svfiprintf_r+0x14c>
2041afd0:	0198e6b3          	or	a3,a7,s9
2041afd4:	ca89                	beqz	a3,2041afe6 <_svfiprintf_r+0x14c>
2041afd6:	03000693          	li	a3,48
2041afda:	02d10e23          	sb	a3,60(sp)
2041afde:	02c10ea3          	sb	a2,61(sp)
2041afe2:	002d6d13          	ori	s10,s10,2
2041afe6:	bffd7d13          	andi	s10,s10,-1025
2041afea:	a485                	j	2041b24a <_svfiprintf_r+0x3b0>
2041afec:	8556                	mv	a0,s5
2041afee:	c83a                	sw	a4,16(sp)
2041aff0:	edcfe0ef          	jal	ra,204196cc <_localeconv_r>
2041aff4:	4148                	lw	a0,4(a0)
2041aff6:	d42a                	sw	a0,40(sp)
2041aff8:	835f80ef          	jal	ra,2041382c <strlen>
2041affc:	d02a                	sw	a0,32(sp)
2041affe:	8556                	mv	a0,s5
2041b000:	eccfe0ef          	jal	ra,204196cc <_localeconv_r>
2041b004:	4508                	lw	a0,8(a0)
2041b006:	5782                	lw	a5,32(sp)
2041b008:	4742                	lw	a4,16(sp)
2041b00a:	ce2a                	sw	a0,28(sp)
2041b00c:	dbb5                	beqz	a5,2041af80 <_svfiprintf_r+0xe6>
2041b00e:	d92d                	beqz	a0,2041af80 <_svfiprintf_r+0xe6>
2041b010:	00054683          	lbu	a3,0(a0)
2041b014:	d6b5                	beqz	a3,2041af80 <_svfiprintf_r+0xe6>
2041b016:	400d6d13          	ori	s10,s10,1024
2041b01a:	b79d                	j	2041af80 <_svfiprintf_r+0xe6>
2041b01c:	03b14683          	lbu	a3,59(sp)
2041b020:	f2a5                	bnez	a3,2041af80 <_svfiprintf_r+0xe6>
2041b022:	02000693          	li	a3,32
2041b026:	02d10da3          	sb	a3,59(sp)
2041b02a:	bf99                	j	2041af80 <_svfiprintf_r+0xe6>
2041b02c:	001d6d13          	ori	s10,s10,1
2041b030:	bf81                	j	2041af80 <_svfiprintf_r+0xe6>
2041b032:	0004aa03          	lw	s4,0(s1)
2041b036:	0491                	addi	s1,s1,4
2041b038:	f40a54e3          	bgez	s4,2041af80 <_svfiprintf_r+0xe6>
2041b03c:	41400a33          	neg	s4,s4
2041b040:	004d6d13          	ori	s10,s10,4
2041b044:	bf35                	j	2041af80 <_svfiprintf_r+0xe6>
2041b046:	02b00693          	li	a3,43
2041b04a:	bff1                	j	2041b026 <_svfiprintf_r+0x18c>
2041b04c:	0009c603          	lbu	a2,0(s3)
2041b050:	00198693          	addi	a3,s3,1
2041b054:	03961763          	bne	a2,s9,2041b082 <_svfiprintf_r+0x1e8>
2041b058:	4080                	lw	s0,0(s1)
2041b05a:	00448613          	addi	a2,s1,4
2041b05e:	00045363          	bgez	s0,2041b064 <_svfiprintf_r+0x1ca>
2041b062:	547d                	li	s0,-1
2041b064:	84b2                	mv	s1,a2
2041b066:	89b6                	mv	s3,a3
2041b068:	bf21                	j	2041af80 <_svfiprintf_r+0xe6>
2041b06a:	03840433          	mul	s0,s0,s8
2041b06e:	0685                	addi	a3,a3,1
2041b070:	fff6c603          	lbu	a2,-1(a3)
2041b074:	942a                	add	s0,s0,a0
2041b076:	fd060513          	addi	a0,a2,-48
2041b07a:	fea5f8e3          	bleu	a0,a1,2041b06a <_svfiprintf_r+0x1d0>
2041b07e:	89b6                	mv	s3,a3
2041b080:	b731                	j	2041af8c <_svfiprintf_r+0xf2>
2041b082:	4401                	li	s0,0
2041b084:	bfcd                	j	2041b076 <_svfiprintf_r+0x1dc>
2041b086:	080d6d13          	ori	s10,s10,128
2041b08a:	bddd                	j	2041af80 <_svfiprintf_r+0xe6>
2041b08c:	86ce                	mv	a3,s3
2041b08e:	4a01                	li	s4,0
2041b090:	038a0a33          	mul	s4,s4,s8
2041b094:	fd060613          	addi	a2,a2,-48
2041b098:	0685                	addi	a3,a3,1
2041b09a:	9a32                	add	s4,s4,a2
2041b09c:	fff6c603          	lbu	a2,-1(a3)
2041b0a0:	fd060513          	addi	a0,a2,-48
2041b0a4:	fea5f6e3          	bleu	a0,a1,2041b090 <_svfiprintf_r+0x1f6>
2041b0a8:	bfd9                	j	2041b07e <_svfiprintf_r+0x1e4>
2041b0aa:	0009c603          	lbu	a2,0(s3)
2041b0ae:	06800693          	li	a3,104
2041b0b2:	00d61663          	bne	a2,a3,2041b0be <_svfiprintf_r+0x224>
2041b0b6:	0985                	addi	s3,s3,1
2041b0b8:	200d6d13          	ori	s10,s10,512
2041b0bc:	b5d1                	j	2041af80 <_svfiprintf_r+0xe6>
2041b0be:	040d6d13          	ori	s10,s10,64
2041b0c2:	bd7d                	j	2041af80 <_svfiprintf_r+0xe6>
2041b0c4:	0009c603          	lbu	a2,0(s3)
2041b0c8:	06c00693          	li	a3,108
2041b0cc:	00d61663          	bne	a2,a3,2041b0d8 <_svfiprintf_r+0x23e>
2041b0d0:	0985                	addi	s3,s3,1
2041b0d2:	020d6d13          	ori	s10,s10,32
2041b0d6:	b56d                	j	2041af80 <_svfiprintf_r+0xe6>
2041b0d8:	010d6d13          	ori	s10,s10,16
2041b0dc:	b555                	j	2041af80 <_svfiprintf_r+0xe6>
2041b0de:	4094                	lw	a3,0(s1)
2041b0e0:	00448c13          	addi	s8,s1,4
2041b0e4:	02010da3          	sb	zero,59(sp)
2041b0e8:	08d10623          	sb	a3,140(sp)
2041b0ec:	4405                	li	s0,1
2041b0ee:	4c81                	li	s9,0
2041b0f0:	0164                	addi	s1,sp,140
2041b0f2:	a249                	j	2041b274 <_svfiprintf_r+0x3da>
2041b0f4:	010d6d13          	ori	s10,s10,16
2041b0f8:	020d7693          	andi	a3,s10,32
2041b0fc:	c6b1                	beqz	a3,2041b148 <_svfiprintf_r+0x2ae>
2041b0fe:	049d                	addi	s1,s1,7
2041b100:	98e1                	andi	s1,s1,-8
2041b102:	0004a883          	lw	a7,0(s1)
2041b106:	0044ac83          	lw	s9,4(s1)
2041b10a:	00848c13          	addi	s8,s1,8
2041b10e:	000cde63          	bgez	s9,2041b12a <_svfiprintf_r+0x290>
2041b112:	411008b3          	neg	a7,a7
2041b116:	011036b3          	snez	a3,a7
2041b11a:	41900333          	neg	t1,s9
2041b11e:	40d30cb3          	sub	s9,t1,a3
2041b122:	02d00693          	li	a3,45
2041b126:	02d10da3          	sb	a3,59(sp)
2041b12a:	56fd                	li	a3,-1
2041b12c:	38d41463          	bne	s0,a3,2041b4b4 <_svfiprintf_r+0x61a>
2041b130:	3e0c9163          	bnez	s9,2041b512 <_svfiprintf_r+0x678>
2041b134:	46a5                	li	a3,9
2041b136:	3d16ee63          	bltu	a3,a7,2041b512 <_svfiprintf_r+0x678>
2041b13a:	03088893          	addi	a7,a7,48
2041b13e:	0f1107a3          	sb	a7,239(sp)
2041b142:	0ef10493          	addi	s1,sp,239
2041b146:	ae7d                	j	2041b504 <_svfiprintf_r+0x66a>
2041b148:	010d7693          	andi	a3,s10,16
2041b14c:	00448c13          	addi	s8,s1,4
2041b150:	c691                	beqz	a3,2041b15c <_svfiprintf_r+0x2c2>
2041b152:	0004a883          	lw	a7,0(s1)
2041b156:	41f8dc93          	srai	s9,a7,0x1f
2041b15a:	bf55                	j	2041b10e <_svfiprintf_r+0x274>
2041b15c:	040d7693          	andi	a3,s10,64
2041b160:	0004a883          	lw	a7,0(s1)
2041b164:	c689                	beqz	a3,2041b16e <_svfiprintf_r+0x2d4>
2041b166:	08c2                	slli	a7,a7,0x10
2041b168:	4108d893          	srai	a7,a7,0x10
2041b16c:	b7ed                	j	2041b156 <_svfiprintf_r+0x2bc>
2041b16e:	200d7693          	andi	a3,s10,512
2041b172:	d2f5                	beqz	a3,2041b156 <_svfiprintf_r+0x2bc>
2041b174:	08e2                	slli	a7,a7,0x18
2041b176:	4188d893          	srai	a7,a7,0x18
2041b17a:	bff1                	j	2041b156 <_svfiprintf_r+0x2bc>
2041b17c:	020d7613          	andi	a2,s10,32
2041b180:	4094                	lw	a3,0(s1)
2041b182:	0491                	addi	s1,s1,4
2041b184:	c619                	beqz	a2,2041b192 <_svfiprintf_r+0x2f8>
2041b186:	41fbd793          	srai	a5,s7,0x1f
2041b18a:	0176a023          	sw	s7,0(a3)
2041b18e:	c2dc                	sw	a5,4(a3)
2041b190:	bb41                	j	2041af20 <_svfiprintf_r+0x86>
2041b192:	010d7613          	andi	a2,s10,16
2041b196:	c601                	beqz	a2,2041b19e <_svfiprintf_r+0x304>
2041b198:	0176a023          	sw	s7,0(a3)
2041b19c:	b351                	j	2041af20 <_svfiprintf_r+0x86>
2041b19e:	040d7613          	andi	a2,s10,64
2041b1a2:	c609                	beqz	a2,2041b1ac <_svfiprintf_r+0x312>
2041b1a4:	87de                	mv	a5,s7
2041b1a6:	00f69023          	sh	a5,0(a3)
2041b1aa:	bb9d                	j	2041af20 <_svfiprintf_r+0x86>
2041b1ac:	200d7793          	andi	a5,s10,512
2041b1b0:	d7e5                	beqz	a5,2041b198 <_svfiprintf_r+0x2fe>
2041b1b2:	87de                	mv	a5,s7
2041b1b4:	00f68023          	sb	a5,0(a3)
2041b1b8:	b3a5                	j	2041af20 <_svfiprintf_r+0x86>
2041b1ba:	010d6d13          	ori	s10,s10,16
2041b1be:	020d7693          	andi	a3,s10,32
2041b1c2:	ce95                	beqz	a3,2041b1fe <_svfiprintf_r+0x364>
2041b1c4:	049d                	addi	s1,s1,7
2041b1c6:	98e1                	andi	s1,s1,-8
2041b1c8:	0004a883          	lw	a7,0(s1)
2041b1cc:	0044ac83          	lw	s9,4(s1)
2041b1d0:	00848c13          	addi	s8,s1,8
2041b1d4:	bffd7d13          	andi	s10,s10,-1025
2041b1d8:	4681                	li	a3,0
2041b1da:	02010da3          	sb	zero,59(sp)
2041b1de:	567d                	li	a2,-1
2041b1e0:	2cc40d63          	beq	s0,a2,2041b4ba <_svfiprintf_r+0x620>
2041b1e4:	866a                	mv	a2,s10
2041b1e6:	0198e5b3          	or	a1,a7,s9
2041b1ea:	f7fd7d13          	andi	s10,s10,-129
2041b1ee:	2c059663          	bnez	a1,2041b4ba <_svfiprintf_r+0x620>
2041b1f2:	3c040f63          	beqz	s0,2041b5d0 <_svfiprintf_r+0x736>
2041b1f6:	4605                	li	a2,1
2041b1f8:	2cc69463          	bne	a3,a2,2041b4c0 <_svfiprintf_r+0x626>
2041b1fc:	bf3d                	j	2041b13a <_svfiprintf_r+0x2a0>
2041b1fe:	010d7693          	andi	a3,s10,16
2041b202:	00448c13          	addi	s8,s1,4
2041b206:	c681                	beqz	a3,2041b20e <_svfiprintf_r+0x374>
2041b208:	0004a883          	lw	a7,0(s1)
2041b20c:	a031                	j	2041b218 <_svfiprintf_r+0x37e>
2041b20e:	040d7693          	andi	a3,s10,64
2041b212:	c689                	beqz	a3,2041b21c <_svfiprintf_r+0x382>
2041b214:	0004d883          	lhu	a7,0(s1)
2041b218:	4c81                	li	s9,0
2041b21a:	bf6d                	j	2041b1d4 <_svfiprintf_r+0x33a>
2041b21c:	200d7693          	andi	a3,s10,512
2041b220:	d6e5                	beqz	a3,2041b208 <_svfiprintf_r+0x36e>
2041b222:	0004c883          	lbu	a7,0(s1)
2041b226:	bfcd                	j	2041b218 <_svfiprintf_r+0x37e>
2041b228:	76e1                	lui	a3,0xffff8
2041b22a:	8306c693          	xori	a3,a3,-2000
2041b22e:	02d11e23          	sh	a3,60(sp)
2041b232:	0004a883          	lw	a7,0(s1)
2041b236:	204226b7          	lui	a3,0x20422
2041b23a:	d1068693          	addi	a3,a3,-752 # 20421d10 <zeroes.4369+0x50>
2041b23e:	00448c13          	addi	s8,s1,4
2041b242:	4c81                	li	s9,0
2041b244:	002d6d13          	ori	s10,s10,2
2041b248:	d236                	sw	a3,36(sp)
2041b24a:	4689                	li	a3,2
2041b24c:	b779                	j	2041b1da <_svfiprintf_r+0x340>
2041b24e:	02010da3          	sb	zero,59(sp)
2041b252:	56fd                	li	a3,-1
2041b254:	00448c13          	addi	s8,s1,4
2041b258:	4084                	lw	s1,0(s1)
2041b25a:	1cd40763          	beq	s0,a3,2041b428 <_svfiprintf_r+0x58e>
2041b25e:	8622                	mv	a2,s0
2041b260:	4581                	li	a1,0
2041b262:	8526                	mv	a0,s1
2041b264:	c83a                	sw	a4,16(sp)
2041b266:	a2ffe0ef          	jal	ra,20419c94 <memchr>
2041b26a:	4c81                	li	s9,0
2041b26c:	4742                	lw	a4,16(sp)
2041b26e:	c119                	beqz	a0,2041b274 <_svfiprintf_r+0x3da>
2041b270:	40950433          	sub	s0,a0,s1
2041b274:	cc66                	sw	s9,24(sp)
2041b276:	008cd363          	ble	s0,s9,2041b27c <_svfiprintf_r+0x3e2>
2041b27a:	cc22                	sw	s0,24(sp)
2041b27c:	03b14683          	lbu	a3,59(sp)
2041b280:	c681                	beqz	a3,2041b288 <_svfiprintf_r+0x3ee>
2041b282:	47e2                	lw	a5,24(sp)
2041b284:	0785                	addi	a5,a5,1
2041b286:	cc3e                	sw	a5,24(sp)
2041b288:	002d7d93          	andi	s11,s10,2
2041b28c:	000d8563          	beqz	s11,2041b296 <_svfiprintf_r+0x3fc>
2041b290:	47e2                	lw	a5,24(sp)
2041b292:	0789                	addi	a5,a5,2
2041b294:	cc3e                	sw	a5,24(sp)
2041b296:	084d7793          	andi	a5,s10,132
2041b29a:	d63e                	sw	a5,44(sp)
2041b29c:	e7a1                	bnez	a5,2041b2e4 <_svfiprintf_r+0x44a>
2041b29e:	47e2                	lw	a5,24(sp)
2041b2a0:	40fa06b3          	sub	a3,s4,a5
2041b2a4:	04d05063          	blez	a3,2041b2e4 <_svfiprintf_r+0x44a>
2041b2a8:	204227b7          	lui	a5,0x20422
2041b2ac:	48c1                	li	a7,16
2041b2ae:	66c78813          	addi	a6,a5,1644 # 2042266c <blanks.4345>
2041b2b2:	431d                	li	t1,7
2041b2b4:	4616                	lw	a2,68(sp)
2041b2b6:	01072023          	sw	a6,0(a4)
2041b2ba:	45a6                	lw	a1,72(sp)
2041b2bc:	0605                	addi	a2,a2,1
2041b2be:	00870513          	addi	a0,a4,8
2041b2c2:	32d8c863          	blt	a7,a3,2041b5f2 <_svfiprintf_r+0x758>
2041b2c6:	c354                	sw	a3,4(a4)
2041b2c8:	96ae                	add	a3,a3,a1
2041b2ca:	c4b6                	sw	a3,72(sp)
2041b2cc:	c2b2                	sw	a2,68(sp)
2041b2ce:	469d                	li	a3,7
2041b2d0:	872a                	mv	a4,a0
2041b2d2:	00c6d963          	ble	a2,a3,2041b2e4 <_svfiprintf_r+0x44a>
2041b2d6:	0090                	addi	a2,sp,64
2041b2d8:	85ca                	mv	a1,s2
2041b2da:	8556                	mv	a0,s5
2041b2dc:	3469                	jal	2041ad66 <__ssprint_r>
2041b2de:	3c051a63          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b2e2:	875a                	mv	a4,s6
2041b2e4:	03b14683          	lbu	a3,59(sp)
2041b2e8:	c69d                	beqz	a3,2041b316 <_svfiprintf_r+0x47c>
2041b2ea:	03b10613          	addi	a2,sp,59
2041b2ee:	c310                	sw	a2,0(a4)
2041b2f0:	4605                	li	a2,1
2041b2f2:	4696                	lw	a3,68(sp)
2041b2f4:	c350                	sw	a2,4(a4)
2041b2f6:	4626                	lw	a2,72(sp)
2041b2f8:	0685                	addi	a3,a3,1
2041b2fa:	c2b6                	sw	a3,68(sp)
2041b2fc:	0605                	addi	a2,a2,1
2041b2fe:	c4b2                	sw	a2,72(sp)
2041b300:	461d                	li	a2,7
2041b302:	0721                	addi	a4,a4,8
2041b304:	00d65963          	ble	a3,a2,2041b316 <_svfiprintf_r+0x47c>
2041b308:	0090                	addi	a2,sp,64
2041b30a:	85ca                	mv	a1,s2
2041b30c:	8556                	mv	a0,s5
2041b30e:	3ca1                	jal	2041ad66 <__ssprint_r>
2041b310:	3a051163          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b314:	875a                	mv	a4,s6
2041b316:	020d8763          	beqz	s11,2041b344 <_svfiprintf_r+0x4aa>
2041b31a:	1870                	addi	a2,sp,60
2041b31c:	c310                	sw	a2,0(a4)
2041b31e:	4609                	li	a2,2
2041b320:	4696                	lw	a3,68(sp)
2041b322:	c350                	sw	a2,4(a4)
2041b324:	4626                	lw	a2,72(sp)
2041b326:	0685                	addi	a3,a3,1
2041b328:	c2b6                	sw	a3,68(sp)
2041b32a:	0609                	addi	a2,a2,2
2041b32c:	c4b2                	sw	a2,72(sp)
2041b32e:	461d                	li	a2,7
2041b330:	0721                	addi	a4,a4,8
2041b332:	00d65963          	ble	a3,a2,2041b344 <_svfiprintf_r+0x4aa>
2041b336:	0090                	addi	a2,sp,64
2041b338:	85ca                	mv	a1,s2
2041b33a:	8556                	mv	a0,s5
2041b33c:	342d                	jal	2041ad66 <__ssprint_r>
2041b33e:	36051a63          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b342:	875a                	mv	a4,s6
2041b344:	57b2                	lw	a5,44(sp)
2041b346:	08000693          	li	a3,128
2041b34a:	04d79563          	bne	a5,a3,2041b394 <_svfiprintf_r+0x4fa>
2041b34e:	47e2                	lw	a5,24(sp)
2041b350:	40fa0db3          	sub	s11,s4,a5
2041b354:	05b05063          	blez	s11,2041b394 <_svfiprintf_r+0x4fa>
2041b358:	4841                	li	a6,16
2041b35a:	489d                	li	a7,7
2041b35c:	4696                	lw	a3,68(sp)
2041b35e:	204227b7          	lui	a5,0x20422
2041b362:	67c78793          	addi	a5,a5,1660 # 2042267c <zeroes.4346>
2041b366:	c31c                	sw	a5,0(a4)
2041b368:	4626                	lw	a2,72(sp)
2041b36a:	0685                	addi	a3,a3,1
2041b36c:	00870593          	addi	a1,a4,8
2041b370:	2bb84a63          	blt	a6,s11,2041b624 <_svfiprintf_r+0x78a>
2041b374:	966e                	add	a2,a2,s11
2041b376:	01b72223          	sw	s11,4(a4)
2041b37a:	c4b2                	sw	a2,72(sp)
2041b37c:	c2b6                	sw	a3,68(sp)
2041b37e:	461d                	li	a2,7
2041b380:	872e                	mv	a4,a1
2041b382:	00d65963          	ble	a3,a2,2041b394 <_svfiprintf_r+0x4fa>
2041b386:	0090                	addi	a2,sp,64
2041b388:	85ca                	mv	a1,s2
2041b38a:	8556                	mv	a0,s5
2041b38c:	3ae9                	jal	2041ad66 <__ssprint_r>
2041b38e:	32051263          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b392:	875a                	mv	a4,s6
2041b394:	408c8cb3          	sub	s9,s9,s0
2041b398:	05905063          	blez	s9,2041b3d8 <_svfiprintf_r+0x53e>
2041b39c:	4dc1                	li	s11,16
2041b39e:	481d                	li	a6,7
2041b3a0:	4696                	lw	a3,68(sp)
2041b3a2:	204227b7          	lui	a5,0x20422
2041b3a6:	67c78793          	addi	a5,a5,1660 # 2042267c <zeroes.4346>
2041b3aa:	c31c                	sw	a5,0(a4)
2041b3ac:	4626                	lw	a2,72(sp)
2041b3ae:	0685                	addi	a3,a3,1
2041b3b0:	00870593          	addi	a1,a4,8
2041b3b4:	299dcd63          	blt	s11,s9,2041b64e <_svfiprintf_r+0x7b4>
2041b3b8:	01972223          	sw	s9,4(a4)
2041b3bc:	9cb2                	add	s9,s9,a2
2041b3be:	c4e6                	sw	s9,72(sp)
2041b3c0:	c2b6                	sw	a3,68(sp)
2041b3c2:	461d                	li	a2,7
2041b3c4:	872e                	mv	a4,a1
2041b3c6:	00d65963          	ble	a3,a2,2041b3d8 <_svfiprintf_r+0x53e>
2041b3ca:	0090                	addi	a2,sp,64
2041b3cc:	85ca                	mv	a1,s2
2041b3ce:	8556                	mv	a0,s5
2041b3d0:	3a59                	jal	2041ad66 <__ssprint_r>
2041b3d2:	2e051063          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b3d6:	875a                	mv	a4,s6
2041b3d8:	46a6                	lw	a3,72(sp)
2041b3da:	c340                	sw	s0,4(a4)
2041b3dc:	c304                	sw	s1,0(a4)
2041b3de:	9436                	add	s0,s0,a3
2041b3e0:	4696                	lw	a3,68(sp)
2041b3e2:	c4a2                	sw	s0,72(sp)
2041b3e4:	461d                	li	a2,7
2041b3e6:	0685                	addi	a3,a3,1
2041b3e8:	c2b6                	sw	a3,68(sp)
2041b3ea:	0721                	addi	a4,a4,8
2041b3ec:	00d65963          	ble	a3,a2,2041b3fe <_svfiprintf_r+0x564>
2041b3f0:	0090                	addi	a2,sp,64
2041b3f2:	85ca                	mv	a1,s2
2041b3f4:	8556                	mv	a0,s5
2041b3f6:	3a85                	jal	2041ad66 <__ssprint_r>
2041b3f8:	2a051d63          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b3fc:	875a                	mv	a4,s6
2041b3fe:	004d7793          	andi	a5,s10,4
2041b402:	26079963          	bnez	a5,2041b674 <_svfiprintf_r+0x7da>
2041b406:	47e2                	lw	a5,24(sp)
2041b408:	00fa5363          	ble	a5,s4,2041b40e <_svfiprintf_r+0x574>
2041b40c:	8a3e                	mv	s4,a5
2041b40e:	47a6                	lw	a5,72(sp)
2041b410:	9bd2                	add	s7,s7,s4
2041b412:	c799                	beqz	a5,2041b420 <_svfiprintf_r+0x586>
2041b414:	0090                	addi	a2,sp,64
2041b416:	85ca                	mv	a1,s2
2041b418:	8556                	mv	a0,s5
2041b41a:	32b1                	jal	2041ad66 <__ssprint_r>
2041b41c:	28051b63          	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b420:	c282                	sw	zero,68(sp)
2041b422:	84e2                	mv	s1,s8
2041b424:	875a                	mv	a4,s6
2041b426:	bced                	j	2041af20 <_svfiprintf_r+0x86>
2041b428:	8526                	mv	a0,s1
2041b42a:	c83a                	sw	a4,16(sp)
2041b42c:	c00f80ef          	jal	ra,2041382c <strlen>
2041b430:	842a                	mv	s0,a0
2041b432:	4c81                	li	s9,0
2041b434:	4742                	lw	a4,16(sp)
2041b436:	bd3d                	j	2041b274 <_svfiprintf_r+0x3da>
2041b438:	010d6d13          	ori	s10,s10,16
2041b43c:	020d7693          	andi	a3,s10,32
2041b440:	ca99                	beqz	a3,2041b456 <_svfiprintf_r+0x5bc>
2041b442:	049d                	addi	s1,s1,7
2041b444:	98e1                	andi	s1,s1,-8
2041b446:	0004a883          	lw	a7,0(s1)
2041b44a:	0044ac83          	lw	s9,4(s1)
2041b44e:	00848c13          	addi	s8,s1,8
2041b452:	4685                	li	a3,1
2041b454:	b359                	j	2041b1da <_svfiprintf_r+0x340>
2041b456:	010d7693          	andi	a3,s10,16
2041b45a:	00448c13          	addi	s8,s1,4
2041b45e:	c681                	beqz	a3,2041b466 <_svfiprintf_r+0x5cc>
2041b460:	0004a883          	lw	a7,0(s1)
2041b464:	a031                	j	2041b470 <_svfiprintf_r+0x5d6>
2041b466:	040d7693          	andi	a3,s10,64
2041b46a:	c689                	beqz	a3,2041b474 <_svfiprintf_r+0x5da>
2041b46c:	0004d883          	lhu	a7,0(s1)
2041b470:	4c81                	li	s9,0
2041b472:	b7c5                	j	2041b452 <_svfiprintf_r+0x5b8>
2041b474:	200d7693          	andi	a3,s10,512
2041b478:	d6e5                	beqz	a3,2041b460 <_svfiprintf_r+0x5c6>
2041b47a:	0004c883          	lbu	a7,0(s1)
2041b47e:	bfcd                	j	2041b470 <_svfiprintf_r+0x5d6>
2041b480:	204226b7          	lui	a3,0x20422
2041b484:	d1068693          	addi	a3,a3,-752 # 20421d10 <zeroes.4369+0x50>
2041b488:	b625                	j	2041afb0 <_svfiprintf_r+0x116>
2041b48a:	010d7693          	andi	a3,s10,16
2041b48e:	00448c13          	addi	s8,s1,4
2041b492:	c681                	beqz	a3,2041b49a <_svfiprintf_r+0x600>
2041b494:	0004a883          	lw	a7,0(s1)
2041b498:	a031                	j	2041b4a4 <_svfiprintf_r+0x60a>
2041b49a:	040d7693          	andi	a3,s10,64
2041b49e:	c689                	beqz	a3,2041b4a8 <_svfiprintf_r+0x60e>
2041b4a0:	0004d883          	lhu	a7,0(s1)
2041b4a4:	4c81                	li	s9,0
2041b4a6:	b615                	j	2041afca <_svfiprintf_r+0x130>
2041b4a8:	200d7693          	andi	a3,s10,512
2041b4ac:	d6e5                	beqz	a3,2041b494 <_svfiprintf_r+0x5fa>
2041b4ae:	0004c883          	lbu	a7,0(s1)
2041b4b2:	bfcd                	j	2041b4a4 <_svfiprintf_r+0x60a>
2041b4b4:	866a                	mv	a2,s10
2041b4b6:	4685                	li	a3,1
2041b4b8:	b33d                	j	2041b1e6 <_svfiprintf_r+0x34c>
2041b4ba:	4605                	li	a2,1
2041b4bc:	c6c68ae3          	beq	a3,a2,2041b130 <_svfiprintf_r+0x296>
2041b4c0:	4609                	li	a2,2
2041b4c2:	0ec68163          	beq	a3,a2,2041b5a4 <_svfiprintf_r+0x70a>
2041b4c6:	1994                	addi	a3,sp,240
2041b4c8:	01dc9593          	slli	a1,s9,0x1d
2041b4cc:	0078f613          	andi	a2,a7,7
2041b4d0:	0038d893          	srli	a7,a7,0x3
2041b4d4:	03060613          	addi	a2,a2,48
2041b4d8:	0115e8b3          	or	a7,a1,a7
2041b4dc:	003cdc93          	srli	s9,s9,0x3
2041b4e0:	fec68fa3          	sb	a2,-1(a3)
2041b4e4:	0198e5b3          	or	a1,a7,s9
2041b4e8:	fff68493          	addi	s1,a3,-1
2041b4ec:	e18d                	bnez	a1,2041b50e <_svfiprintf_r+0x674>
2041b4ee:	001d7593          	andi	a1,s10,1
2041b4f2:	c989                	beqz	a1,2041b504 <_svfiprintf_r+0x66a>
2041b4f4:	03000593          	li	a1,48
2041b4f8:	00b60663          	beq	a2,a1,2041b504 <_svfiprintf_r+0x66a>
2041b4fc:	feb48fa3          	sb	a1,-1(s1)
2041b500:	ffe68493          	addi	s1,a3,-2
2041b504:	199c                	addi	a5,sp,240
2041b506:	8ca2                	mv	s9,s0
2041b508:	40978433          	sub	s0,a5,s1
2041b50c:	b3a5                	j	2041b274 <_svfiprintf_r+0x3da>
2041b50e:	86a6                	mv	a3,s1
2041b510:	bf65                	j	2041b4c8 <_svfiprintf_r+0x62e>
2041b512:	400d7793          	andi	a5,s10,1024
2041b516:	4d81                	li	s11,0
2041b518:	0f010e13          	addi	t3,sp,240
2041b51c:	cc3e                	sw	a5,24(sp)
2041b51e:	8546                	mv	a0,a7
2041b520:	4629                	li	a2,10
2041b522:	4681                	li	a3,0
2041b524:	85e6                	mv	a1,s9
2041b526:	fffe0493          	addi	s1,t3,-1
2041b52a:	c83a                	sw	a4,16(sp)
2041b52c:	c446                	sw	a7,8(sp)
2041b52e:	ca72                	sw	t3,20(sp)
2041b530:	7c3000ef          	jal	ra,2041c4f2 <__umoddi3>
2041b534:	4e52                	lw	t3,20(sp)
2041b536:	47e2                	lw	a5,24(sp)
2041b538:	03050513          	addi	a0,a0,48
2041b53c:	feae0fa3          	sb	a0,-1(t3)
2041b540:	0d85                	addi	s11,s11,1
2041b542:	4742                	lw	a4,16(sp)
2041b544:	48a2                	lw	a7,8(sp)
2041b546:	c3a9                	beqz	a5,2041b588 <_svfiprintf_r+0x6ee>
2041b548:	47f2                	lw	a5,28(sp)
2041b54a:	0007c683          	lbu	a3,0(a5)
2041b54e:	03b69d63          	bne	a3,s11,2041b588 <_svfiprintf_r+0x6ee>
2041b552:	0ff00793          	li	a5,255
2041b556:	02fd8963          	beq	s11,a5,2041b588 <_svfiprintf_r+0x6ee>
2041b55a:	000c9563          	bnez	s9,2041b564 <_svfiprintf_r+0x6ca>
2041b55e:	47a5                	li	a5,9
2041b560:	0317f463          	bleu	a7,a5,2041b588 <_svfiprintf_r+0x6ee>
2041b564:	5782                	lw	a5,32(sp)
2041b566:	55a2                	lw	a1,40(sp)
2041b568:	c83a                	sw	a4,16(sp)
2041b56a:	8c9d                	sub	s1,s1,a5
2041b56c:	863e                	mv	a2,a5
2041b56e:	8526                	mv	a0,s1
2041b570:	c446                	sw	a7,8(sp)
2041b572:	af6f80ef          	jal	ra,20413868 <strncpy>
2041b576:	47f2                	lw	a5,28(sp)
2041b578:	4d81                	li	s11,0
2041b57a:	4742                	lw	a4,16(sp)
2041b57c:	0017c683          	lbu	a3,1(a5)
2041b580:	48a2                	lw	a7,8(sp)
2041b582:	c299                	beqz	a3,2041b588 <_svfiprintf_r+0x6ee>
2041b584:	0785                	addi	a5,a5,1
2041b586:	ce3e                	sw	a5,28(sp)
2041b588:	8546                	mv	a0,a7
2041b58a:	85e6                	mv	a1,s9
2041b58c:	4629                	li	a2,10
2041b58e:	4681                	li	a3,0
2041b590:	c83a                	sw	a4,16(sp)
2041b592:	403000ef          	jal	ra,2041c194 <__udivdi3>
2041b596:	8cae                	mv	s9,a1
2041b598:	8dc9                	or	a1,a1,a0
2041b59a:	88aa                	mv	a7,a0
2041b59c:	4742                	lw	a4,16(sp)
2041b59e:	d1bd                	beqz	a1,2041b504 <_svfiprintf_r+0x66a>
2041b5a0:	8e26                	mv	t3,s1
2041b5a2:	bfb5                	j	2041b51e <_svfiprintf_r+0x684>
2041b5a4:	1984                	addi	s1,sp,240
2041b5a6:	5792                	lw	a5,36(sp)
2041b5a8:	00f8f693          	andi	a3,a7,15
2041b5ac:	14fd                	addi	s1,s1,-1
2041b5ae:	96be                	add	a3,a3,a5
2041b5b0:	0006c683          	lbu	a3,0(a3)
2041b5b4:	0048d893          	srli	a7,a7,0x4
2041b5b8:	00d48023          	sb	a3,0(s1)
2041b5bc:	01cc9693          	slli	a3,s9,0x1c
2041b5c0:	0116e8b3          	or	a7,a3,a7
2041b5c4:	004cdc93          	srli	s9,s9,0x4
2041b5c8:	0198e6b3          	or	a3,a7,s9
2041b5cc:	fee9                	bnez	a3,2041b5a6 <_svfiprintf_r+0x70c>
2041b5ce:	bf1d                	j	2041b504 <_svfiprintf_r+0x66a>
2041b5d0:	1984                	addi	s1,sp,240
2041b5d2:	fa8d                	bnez	a3,2041b504 <_svfiprintf_r+0x66a>
2041b5d4:	8a05                	andi	a2,a2,1
2041b5d6:	d61d                	beqz	a2,2041b504 <_svfiprintf_r+0x66a>
2041b5d8:	03000693          	li	a3,48
2041b5dc:	0ed107a3          	sb	a3,239(sp)
2041b5e0:	b68d                	j	2041b142 <_svfiprintf_r+0x2a8>
2041b5e2:	12060b63          	beqz	a2,2041b718 <_svfiprintf_r+0x87e>
2041b5e6:	08c10623          	sb	a2,140(sp)
2041b5ea:	02010da3          	sb	zero,59(sp)
2041b5ee:	8c26                	mv	s8,s1
2041b5f0:	bcf5                	j	2041b0ec <_svfiprintf_r+0x252>
2041b5f2:	05c1                	addi	a1,a1,16
2041b5f4:	01172223          	sw	a7,4(a4)
2041b5f8:	c4ae                	sw	a1,72(sp)
2041b5fa:	c2b2                	sw	a2,68(sp)
2041b5fc:	02c35163          	ble	a2,t1,2041b61e <_svfiprintf_r+0x784>
2041b600:	0090                	addi	a2,sp,64
2041b602:	85ca                	mv	a1,s2
2041b604:	8556                	mv	a0,s5
2041b606:	c81a                	sw	t1,16(sp)
2041b608:	ca36                	sw	a3,20(sp)
2041b60a:	c642                	sw	a6,12(sp)
2041b60c:	c446                	sw	a7,8(sp)
2041b60e:	f58ff0ef          	jal	ra,2041ad66 <__ssprint_r>
2041b612:	4342                	lw	t1,16(sp)
2041b614:	46d2                	lw	a3,20(sp)
2041b616:	4832                	lw	a6,12(sp)
2041b618:	48a2                	lw	a7,8(sp)
2041b61a:	ed41                	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b61c:	855a                	mv	a0,s6
2041b61e:	16c1                	addi	a3,a3,-16
2041b620:	872a                	mv	a4,a0
2041b622:	b949                	j	2041b2b4 <_svfiprintf_r+0x41a>
2041b624:	0641                	addi	a2,a2,16
2041b626:	01072223          	sw	a6,4(a4)
2041b62a:	c4b2                	sw	a2,72(sp)
2041b62c:	c2b6                	sw	a3,68(sp)
2041b62e:	00d8dd63          	ble	a3,a7,2041b648 <_svfiprintf_r+0x7ae>
2041b632:	0090                	addi	a2,sp,64
2041b634:	85ca                	mv	a1,s2
2041b636:	8556                	mv	a0,s5
2041b638:	c642                	sw	a6,12(sp)
2041b63a:	c446                	sw	a7,8(sp)
2041b63c:	f2aff0ef          	jal	ra,2041ad66 <__ssprint_r>
2041b640:	4832                	lw	a6,12(sp)
2041b642:	48a2                	lw	a7,8(sp)
2041b644:	e53d                	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b646:	85da                	mv	a1,s6
2041b648:	1dc1                	addi	s11,s11,-16
2041b64a:	872e                	mv	a4,a1
2041b64c:	bb01                	j	2041b35c <_svfiprintf_r+0x4c2>
2041b64e:	0641                	addi	a2,a2,16
2041b650:	01b72223          	sw	s11,4(a4)
2041b654:	c4b2                	sw	a2,72(sp)
2041b656:	c2b6                	sw	a3,68(sp)
2041b658:	00d85b63          	ble	a3,a6,2041b66e <_svfiprintf_r+0x7d4>
2041b65c:	0090                	addi	a2,sp,64
2041b65e:	85ca                	mv	a1,s2
2041b660:	8556                	mv	a0,s5
2041b662:	c642                	sw	a6,12(sp)
2041b664:	f02ff0ef          	jal	ra,2041ad66 <__ssprint_r>
2041b668:	4832                	lw	a6,12(sp)
2041b66a:	e521                	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b66c:	85da                	mv	a1,s6
2041b66e:	1cc1                	addi	s9,s9,-16
2041b670:	872e                	mv	a4,a1
2041b672:	b33d                	j	2041b3a0 <_svfiprintf_r+0x506>
2041b674:	47e2                	lw	a5,24(sp)
2041b676:	40fa0433          	sub	s0,s4,a5
2041b67a:	d88056e3          	blez	s0,2041b406 <_svfiprintf_r+0x56c>
2041b67e:	204227b7          	lui	a5,0x20422
2041b682:	4cc1                	li	s9,16
2041b684:	66c78493          	addi	s1,a5,1644 # 2042266c <blanks.4345>
2041b688:	4d9d                	li	s11,7
2041b68a:	4796                	lw	a5,68(sp)
2041b68c:	c304                	sw	s1,0(a4)
2041b68e:	46a6                	lw	a3,72(sp)
2041b690:	0785                	addi	a5,a5,1
2041b692:	068cc263          	blt	s9,s0,2041b6f6 <_svfiprintf_r+0x85c>
2041b696:	c340                	sw	s0,4(a4)
2041b698:	9436                	add	s0,s0,a3
2041b69a:	c4a2                	sw	s0,72(sp)
2041b69c:	c2be                	sw	a5,68(sp)
2041b69e:	471d                	li	a4,7
2041b6a0:	d6f753e3          	ble	a5,a4,2041b406 <_svfiprintf_r+0x56c>
2041b6a4:	0090                	addi	a2,sp,64
2041b6a6:	85ca                	mv	a1,s2
2041b6a8:	8556                	mv	a0,s5
2041b6aa:	ebcff0ef          	jal	ra,2041ad66 <__ssprint_r>
2041b6ae:	d4050ce3          	beqz	a0,2041b406 <_svfiprintf_r+0x56c>
2041b6b2:	00c95783          	lhu	a5,12(s2)
2041b6b6:	0407f793          	andi	a5,a5,64
2041b6ba:	840791e3          	bnez	a5,2041aefc <_svfiprintf_r+0x62>
2041b6be:	12c12083          	lw	ra,300(sp)
2041b6c2:	12812403          	lw	s0,296(sp)
2041b6c6:	855e                	mv	a0,s7
2041b6c8:	12412483          	lw	s1,292(sp)
2041b6cc:	12012903          	lw	s2,288(sp)
2041b6d0:	11c12983          	lw	s3,284(sp)
2041b6d4:	11812a03          	lw	s4,280(sp)
2041b6d8:	11412a83          	lw	s5,276(sp)
2041b6dc:	11012b03          	lw	s6,272(sp)
2041b6e0:	10c12b83          	lw	s7,268(sp)
2041b6e4:	10812c03          	lw	s8,264(sp)
2041b6e8:	10412c83          	lw	s9,260(sp)
2041b6ec:	10012d03          	lw	s10,256(sp)
2041b6f0:	5dfe                	lw	s11,252(sp)
2041b6f2:	6155                	addi	sp,sp,304
2041b6f4:	8082                	ret
2041b6f6:	06c1                	addi	a3,a3,16
2041b6f8:	01972223          	sw	s9,4(a4)
2041b6fc:	c4b6                	sw	a3,72(sp)
2041b6fe:	c2be                	sw	a5,68(sp)
2041b700:	0721                	addi	a4,a4,8
2041b702:	00fdd963          	ble	a5,s11,2041b714 <_svfiprintf_r+0x87a>
2041b706:	0090                	addi	a2,sp,64
2041b708:	85ca                	mv	a1,s2
2041b70a:	8556                	mv	a0,s5
2041b70c:	e5aff0ef          	jal	ra,2041ad66 <__ssprint_r>
2041b710:	f14d                	bnez	a0,2041b6b2 <_svfiprintf_r+0x818>
2041b712:	875a                	mv	a4,s6
2041b714:	1441                	addi	s0,s0,-16
2041b716:	bf95                	j	2041b68a <_svfiprintf_r+0x7f0>
2041b718:	47a6                	lw	a5,72(sp)
2041b71a:	dfc1                	beqz	a5,2041b6b2 <_svfiprintf_r+0x818>
2041b71c:	0090                	addi	a2,sp,64
2041b71e:	85ca                	mv	a1,s2
2041b720:	8556                	mv	a0,s5
2041b722:	e44ff0ef          	jal	ra,2041ad66 <__ssprint_r>
2041b726:	b771                	j	2041b6b2 <_svfiprintf_r+0x818>

2041b728 <__swbuf_r>:
2041b728:	1101                	addi	sp,sp,-32
2041b72a:	cc22                	sw	s0,24(sp)
2041b72c:	ca26                	sw	s1,20(sp)
2041b72e:	c84a                	sw	s2,16(sp)
2041b730:	ce06                	sw	ra,28(sp)
2041b732:	c64e                	sw	s3,12(sp)
2041b734:	892a                	mv	s2,a0
2041b736:	84ae                	mv	s1,a1
2041b738:	8432                	mv	s0,a2
2041b73a:	c509                	beqz	a0,2041b744 <__swbuf_r+0x1c>
2041b73c:	5d1c                	lw	a5,56(a0)
2041b73e:	e399                	bnez	a5,2041b744 <__swbuf_r+0x1c>
2041b740:	8d8fc0ef          	jal	ra,20417818 <__sinit>
2041b744:	4c1c                	lw	a5,24(s0)
2041b746:	c41c                	sw	a5,8(s0)
2041b748:	00c45783          	lhu	a5,12(s0)
2041b74c:	8ba1                	andi	a5,a5,8
2041b74e:	c3b5                	beqz	a5,2041b7b2 <__swbuf_r+0x8a>
2041b750:	481c                	lw	a5,16(s0)
2041b752:	c3a5                	beqz	a5,2041b7b2 <__swbuf_r+0x8a>
2041b754:	00c41783          	lh	a5,12(s0)
2041b758:	0ff4f993          	andi	s3,s1,255
2041b75c:	0ff4f493          	andi	s1,s1,255
2041b760:	01279713          	slli	a4,a5,0x12
2041b764:	06075563          	bgez	a4,2041b7ce <__swbuf_r+0xa6>
2041b768:	481c                	lw	a5,16(s0)
2041b76a:	4008                	lw	a0,0(s0)
2041b76c:	8d1d                	sub	a0,a0,a5
2041b76e:	485c                	lw	a5,20(s0)
2041b770:	00f54763          	blt	a0,a5,2041b77e <__swbuf_r+0x56>
2041b774:	85a2                	mv	a1,s0
2041b776:	854a                	mv	a0,s2
2041b778:	f8dfb0ef          	jal	ra,20417704 <_fflush_r>
2041b77c:	e121                	bnez	a0,2041b7bc <__swbuf_r+0x94>
2041b77e:	441c                	lw	a5,8(s0)
2041b780:	0505                	addi	a0,a0,1
2041b782:	17fd                	addi	a5,a5,-1
2041b784:	c41c                	sw	a5,8(s0)
2041b786:	401c                	lw	a5,0(s0)
2041b788:	00178713          	addi	a4,a5,1
2041b78c:	c018                	sw	a4,0(s0)
2041b78e:	01378023          	sb	s3,0(a5)
2041b792:	485c                	lw	a5,20(s0)
2041b794:	00a78963          	beq	a5,a0,2041b7a6 <__swbuf_r+0x7e>
2041b798:	00c45783          	lhu	a5,12(s0)
2041b79c:	8b85                	andi	a5,a5,1
2041b79e:	c385                	beqz	a5,2041b7be <__swbuf_r+0x96>
2041b7a0:	47a9                	li	a5,10
2041b7a2:	00f49e63          	bne	s1,a5,2041b7be <__swbuf_r+0x96>
2041b7a6:	85a2                	mv	a1,s0
2041b7a8:	854a                	mv	a0,s2
2041b7aa:	f5bfb0ef          	jal	ra,20417704 <_fflush_r>
2041b7ae:	c901                	beqz	a0,2041b7be <__swbuf_r+0x96>
2041b7b0:	a031                	j	2041b7bc <__swbuf_r+0x94>
2041b7b2:	85a2                	mv	a1,s0
2041b7b4:	854a                	mv	a0,s2
2041b7b6:	c05fb0ef          	jal	ra,204173ba <__swsetup_r>
2041b7ba:	dd49                	beqz	a0,2041b754 <__swbuf_r+0x2c>
2041b7bc:	54fd                	li	s1,-1
2041b7be:	40f2                	lw	ra,28(sp)
2041b7c0:	4462                	lw	s0,24(sp)
2041b7c2:	8526                	mv	a0,s1
2041b7c4:	4942                	lw	s2,16(sp)
2041b7c6:	44d2                	lw	s1,20(sp)
2041b7c8:	49b2                	lw	s3,12(sp)
2041b7ca:	6105                	addi	sp,sp,32
2041b7cc:	8082                	ret
2041b7ce:	6709                	lui	a4,0x2
2041b7d0:	8fd9                	or	a5,a5,a4
2041b7d2:	00f41623          	sh	a5,12(s0)
2041b7d6:	507c                	lw	a5,100(s0)
2041b7d8:	7779                	lui	a4,0xffffe
2041b7da:	177d                	addi	a4,a4,-1
2041b7dc:	8ff9                	and	a5,a5,a4
2041b7de:	d07c                	sw	a5,100(s0)
2041b7e0:	b761                	j	2041b768 <__swbuf_r+0x40>

2041b7e2 <__swbuf>:
2041b7e2:	862e                	mv	a2,a1
2041b7e4:	85aa                	mv	a1,a0
2041b7e6:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041b7ea:	bf3d                	j	2041b728 <__swbuf_r>

2041b7ec <_wcrtomb_r>:
2041b7ec:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
2041b7f0:	1101                	addi	sp,sp,-32
2041b7f2:	cc22                	sw	s0,24(sp)
2041b7f4:	ca26                	sw	s1,20(sp)
2041b7f6:	ce06                	sw	ra,28(sp)
2041b7f8:	842a                	mv	s0,a0
2041b7fa:	84b6                	mv	s1,a3
2041b7fc:	5bdc                	lw	a5,52(a5)
2041b7fe:	e995                	bnez	a1,2041b832 <_wcrtomb_r+0x46>
2041b800:	e789                	bnez	a5,2041b80a <_wcrtomb_r+0x1e>
2041b802:	800007b7          	lui	a5,0x80000
2041b806:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
2041b80a:	0e07a783          	lw	a5,224(a5)
2041b80e:	86a6                	mv	a3,s1
2041b810:	4601                	li	a2,0
2041b812:	004c                	addi	a1,sp,4
2041b814:	8522                	mv	a0,s0
2041b816:	9782                	jalr	a5
2041b818:	57fd                	li	a5,-1
2041b81a:	00f51763          	bne	a0,a5,2041b828 <_wcrtomb_r+0x3c>
2041b81e:	0004a023          	sw	zero,0(s1)
2041b822:	08a00793          	li	a5,138
2041b826:	c01c                	sw	a5,0(s0)
2041b828:	40f2                	lw	ra,28(sp)
2041b82a:	4462                	lw	s0,24(sp)
2041b82c:	44d2                	lw	s1,20(sp)
2041b82e:	6105                	addi	sp,sp,32
2041b830:	8082                	ret
2041b832:	e789                	bnez	a5,2041b83c <_wcrtomb_r+0x50>
2041b834:	800007b7          	lui	a5,0x80000
2041b838:	42878793          	addi	a5,a5,1064 # 80000428 <pulp__FC+0x80000429>
2041b83c:	0e07a783          	lw	a5,224(a5)
2041b840:	86a6                	mv	a3,s1
2041b842:	bfc9                	j	2041b814 <_wcrtomb_r+0x28>

2041b844 <wcrtomb>:
2041b844:	86b2                	mv	a3,a2
2041b846:	862e                	mv	a2,a1
2041b848:	85aa                	mv	a1,a0
2041b84a:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041b84e:	bf79                	j	2041b7ec <_wcrtomb_r>

2041b850 <_write_r>:
2041b850:	1141                	addi	sp,sp,-16
2041b852:	c422                	sw	s0,8(sp)
2041b854:	c226                	sw	s1,4(sp)
2041b856:	84aa                	mv	s1,a0
2041b858:	852e                	mv	a0,a1
2041b85a:	85b2                	mv	a1,a2
2041b85c:	8636                	mv	a2,a3
2041b85e:	c606                	sw	ra,12(sp)
2041b860:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041b864:	e4df60ef          	jal	ra,204126b0 <__wrap_write>
2041b868:	57fd                	li	a5,-1
2041b86a:	00f51663          	bne	a0,a5,2041b876 <_write_r+0x26>
2041b86e:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041b872:	c391                	beqz	a5,2041b876 <_write_r+0x26>
2041b874:	c09c                	sw	a5,0(s1)
2041b876:	40b2                	lw	ra,12(sp)
2041b878:	4422                	lw	s0,8(sp)
2041b87a:	4492                	lw	s1,4(sp)
2041b87c:	0141                	addi	sp,sp,16
2041b87e:	8082                	ret

2041b880 <_calloc_r>:
2041b880:	02c585b3          	mul	a1,a1,a2
2041b884:	1141                	addi	sp,sp,-16
2041b886:	c422                	sw	s0,8(sp)
2041b888:	c606                	sw	ra,12(sp)
2041b88a:	f73fd0ef          	jal	ra,204197fc <_malloc_r>
2041b88e:	842a                	mv	s0,a0
2041b890:	cd05                	beqz	a0,2041b8c8 <_calloc_r+0x48>
2041b892:	ffc52603          	lw	a2,-4(a0)
2041b896:	02400713          	li	a4,36
2041b89a:	9a71                	andi	a2,a2,-4
2041b89c:	1671                	addi	a2,a2,-4
2041b89e:	04c76963          	bltu	a4,a2,2041b8f0 <_calloc_r+0x70>
2041b8a2:	46cd                	li	a3,19
2041b8a4:	87aa                	mv	a5,a0
2041b8a6:	00c6fb63          	bleu	a2,a3,2041b8bc <_calloc_r+0x3c>
2041b8aa:	00052023          	sw	zero,0(a0)
2041b8ae:	00052223          	sw	zero,4(a0)
2041b8b2:	47ed                	li	a5,27
2041b8b4:	00c7ef63          	bltu	a5,a2,2041b8d2 <_calloc_r+0x52>
2041b8b8:	00850793          	addi	a5,a0,8
2041b8bc:	0007a023          	sw	zero,0(a5)
2041b8c0:	0007a223          	sw	zero,4(a5)
2041b8c4:	0007a423          	sw	zero,8(a5)
2041b8c8:	8522                	mv	a0,s0
2041b8ca:	40b2                	lw	ra,12(sp)
2041b8cc:	4422                	lw	s0,8(sp)
2041b8ce:	0141                	addi	sp,sp,16
2041b8d0:	8082                	ret
2041b8d2:	00052423          	sw	zero,8(a0)
2041b8d6:	00052623          	sw	zero,12(a0)
2041b8da:	01050793          	addi	a5,a0,16
2041b8de:	fce61fe3          	bne	a2,a4,2041b8bc <_calloc_r+0x3c>
2041b8e2:	00052823          	sw	zero,16(a0)
2041b8e6:	01850793          	addi	a5,a0,24
2041b8ea:	00052a23          	sw	zero,20(a0)
2041b8ee:	b7f9                	j	2041b8bc <_calloc_r+0x3c>
2041b8f0:	4581                	li	a1,0
2041b8f2:	ca1f70ef          	jal	ra,20413592 <memset>
2041b8f6:	bfc9                	j	2041b8c8 <_calloc_r+0x48>

2041b8f8 <_close_r>:
2041b8f8:	1141                	addi	sp,sp,-16
2041b8fa:	c422                	sw	s0,8(sp)
2041b8fc:	c226                	sw	s1,4(sp)
2041b8fe:	84aa                	mv	s1,a0
2041b900:	852e                	mv	a0,a1
2041b902:	c606                	sw	ra,12(sp)
2041b904:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041b908:	2181                	jal	2041bd48 <__wrap_close>
2041b90a:	57fd                	li	a5,-1
2041b90c:	00f51663          	bne	a0,a5,2041b918 <_close_r+0x20>
2041b910:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041b914:	c391                	beqz	a5,2041b918 <_close_r+0x20>
2041b916:	c09c                	sw	a5,0(s1)
2041b918:	40b2                	lw	ra,12(sp)
2041b91a:	4422                	lw	s0,8(sp)
2041b91c:	4492                	lw	s1,4(sp)
2041b91e:	0141                	addi	sp,sp,16
2041b920:	8082                	ret

2041b922 <_fclose_r>:
2041b922:	1141                	addi	sp,sp,-16
2041b924:	c606                	sw	ra,12(sp)
2041b926:	c422                	sw	s0,8(sp)
2041b928:	c226                	sw	s1,4(sp)
2041b92a:	c04a                	sw	s2,0(sp)
2041b92c:	e989                	bnez	a1,2041b93e <_fclose_r+0x1c>
2041b92e:	4901                	li	s2,0
2041b930:	40b2                	lw	ra,12(sp)
2041b932:	4422                	lw	s0,8(sp)
2041b934:	854a                	mv	a0,s2
2041b936:	4492                	lw	s1,4(sp)
2041b938:	4902                	lw	s2,0(sp)
2041b93a:	0141                	addi	sp,sp,16
2041b93c:	8082                	ret
2041b93e:	84aa                	mv	s1,a0
2041b940:	842e                	mv	s0,a1
2041b942:	c509                	beqz	a0,2041b94c <_fclose_r+0x2a>
2041b944:	5d1c                	lw	a5,56(a0)
2041b946:	e399                	bnez	a5,2041b94c <_fclose_r+0x2a>
2041b948:	ed1fb0ef          	jal	ra,20417818 <__sinit>
2041b94c:	00c41783          	lh	a5,12(s0)
2041b950:	dff9                	beqz	a5,2041b92e <_fclose_r+0xc>
2041b952:	85a2                	mv	a1,s0
2041b954:	8526                	mv	a0,s1
2041b956:	c55fb0ef          	jal	ra,204175aa <__sflush_r>
2041b95a:	545c                	lw	a5,44(s0)
2041b95c:	892a                	mv	s2,a0
2041b95e:	c799                	beqz	a5,2041b96c <_fclose_r+0x4a>
2041b960:	4c4c                	lw	a1,28(s0)
2041b962:	8526                	mv	a0,s1
2041b964:	9782                	jalr	a5
2041b966:	00055363          	bgez	a0,2041b96c <_fclose_r+0x4a>
2041b96a:	597d                	li	s2,-1
2041b96c:	00c45783          	lhu	a5,12(s0)
2041b970:	0807f793          	andi	a5,a5,128
2041b974:	c789                	beqz	a5,2041b97e <_fclose_r+0x5c>
2041b976:	480c                	lw	a1,16(s0)
2041b978:	8526                	mv	a0,s1
2041b97a:	96afc0ef          	jal	ra,20417ae4 <_free_r>
2041b97e:	580c                	lw	a1,48(s0)
2041b980:	c991                	beqz	a1,2041b994 <_fclose_r+0x72>
2041b982:	04040793          	addi	a5,s0,64
2041b986:	00f58563          	beq	a1,a5,2041b990 <_fclose_r+0x6e>
2041b98a:	8526                	mv	a0,s1
2041b98c:	958fc0ef          	jal	ra,20417ae4 <_free_r>
2041b990:	02042823          	sw	zero,48(s0)
2041b994:	406c                	lw	a1,68(s0)
2041b996:	c591                	beqz	a1,2041b9a2 <_fclose_r+0x80>
2041b998:	8526                	mv	a0,s1
2041b99a:	94afc0ef          	jal	ra,20417ae4 <_free_r>
2041b99e:	04042223          	sw	zero,68(s0)
2041b9a2:	f5ffb0ef          	jal	ra,20417900 <__sfp_lock_acquire>
2041b9a6:	00041623          	sh	zero,12(s0)
2041b9aa:	f59fb0ef          	jal	ra,20417902 <__sfp_lock_release>
2041b9ae:	b749                	j	2041b930 <_fclose_r+0xe>

2041b9b0 <fclose>:
2041b9b0:	85aa                	mv	a1,a0
2041b9b2:	8981a503          	lw	a0,-1896(gp) # 80000a38 <_impure_ptr>
2041b9b6:	b7b5                	j	2041b922 <_fclose_r>

2041b9b8 <_fstat_r>:
2041b9b8:	1141                	addi	sp,sp,-16
2041b9ba:	c422                	sw	s0,8(sp)
2041b9bc:	c226                	sw	s1,4(sp)
2041b9be:	84aa                	mv	s1,a0
2041b9c0:	852e                	mv	a0,a1
2041b9c2:	85b2                	mv	a1,a2
2041b9c4:	c606                	sw	ra,12(sp)
2041b9c6:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041b9ca:	2cfd                	jal	2041bcc8 <__wrap_fstat>
2041b9cc:	57fd                	li	a5,-1
2041b9ce:	00f51663          	bne	a0,a5,2041b9da <_fstat_r+0x22>
2041b9d2:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041b9d6:	c391                	beqz	a5,2041b9da <_fstat_r+0x22>
2041b9d8:	c09c                	sw	a5,0(s1)
2041b9da:	40b2                	lw	ra,12(sp)
2041b9dc:	4422                	lw	s0,8(sp)
2041b9de:	4492                	lw	s1,4(sp)
2041b9e0:	0141                	addi	sp,sp,16
2041b9e2:	8082                	ret

2041b9e4 <_isatty_r>:
2041b9e4:	1141                	addi	sp,sp,-16
2041b9e6:	c422                	sw	s0,8(sp)
2041b9e8:	c226                	sw	s1,4(sp)
2041b9ea:	84aa                	mv	s1,a0
2041b9ec:	852e                	mv	a0,a1
2041b9ee:	c606                	sw	ra,12(sp)
2041b9f0:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041b9f4:	d95f60ef          	jal	ra,20412788 <__wrap_isatty>
2041b9f8:	57fd                	li	a5,-1
2041b9fa:	00f51663          	bne	a0,a5,2041ba06 <_isatty_r+0x22>
2041b9fe:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041ba02:	c391                	beqz	a5,2041ba06 <_isatty_r+0x22>
2041ba04:	c09c                	sw	a5,0(s1)
2041ba06:	40b2                	lw	ra,12(sp)
2041ba08:	4422                	lw	s0,8(sp)
2041ba0a:	4492                	lw	s1,4(sp)
2041ba0c:	0141                	addi	sp,sp,16
2041ba0e:	8082                	ret

2041ba10 <_lseek_r>:
2041ba10:	1141                	addi	sp,sp,-16
2041ba12:	c422                	sw	s0,8(sp)
2041ba14:	c226                	sw	s1,4(sp)
2041ba16:	84aa                	mv	s1,a0
2041ba18:	852e                	mv	a0,a1
2041ba1a:	85b2                	mv	a1,a2
2041ba1c:	8636                	mv	a2,a3
2041ba1e:	c606                	sw	ra,12(sp)
2041ba20:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041ba24:	2a15                	jal	2041bb58 <__wrap_lseek>
2041ba26:	57fd                	li	a5,-1
2041ba28:	00f51663          	bne	a0,a5,2041ba34 <_lseek_r+0x24>
2041ba2c:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041ba30:	c391                	beqz	a5,2041ba34 <_lseek_r+0x24>
2041ba32:	c09c                	sw	a5,0(s1)
2041ba34:	40b2                	lw	ra,12(sp)
2041ba36:	4422                	lw	s0,8(sp)
2041ba38:	4492                	lw	s1,4(sp)
2041ba3a:	0141                	addi	sp,sp,16
2041ba3c:	8082                	ret

2041ba3e <_read_r>:
2041ba3e:	1141                	addi	sp,sp,-16
2041ba40:	c422                	sw	s0,8(sp)
2041ba42:	c226                	sw	s1,4(sp)
2041ba44:	84aa                	mv	s1,a0
2041ba46:	852e                	mv	a0,a1
2041ba48:	85b2                	mv	a1,a2
2041ba4a:	8636                	mv	a2,a3
2041ba4c:	c606                	sw	ra,12(sp)
2041ba4e:	d401ae23          	sw	zero,-676(gp) # 80000efc <errno>
2041ba52:	2abd                	jal	2041bbd0 <__wrap_read>
2041ba54:	57fd                	li	a5,-1
2041ba56:	00f51663          	bne	a0,a5,2041ba62 <_read_r+0x24>
2041ba5a:	d5c1a783          	lw	a5,-676(gp) # 80000efc <errno>
2041ba5e:	c391                	beqz	a5,2041ba62 <_read_r+0x24>
2041ba60:	c09c                	sw	a5,0(s1)
2041ba62:	40b2                	lw	ra,12(sp)
2041ba64:	4422                	lw	s0,8(sp)
2041ba66:	4492                	lw	s1,4(sp)
2041ba68:	0141                	addi	sp,sp,16
2041ba6a:	8082                	ret

2041ba6c <cleanup_glue>:
2041ba6c:	1141                	addi	sp,sp,-16
2041ba6e:	c422                	sw	s0,8(sp)
2041ba70:	842e                	mv	s0,a1
2041ba72:	418c                	lw	a1,0(a1)
2041ba74:	c226                	sw	s1,4(sp)
2041ba76:	c606                	sw	ra,12(sp)
2041ba78:	84aa                	mv	s1,a0
2041ba7a:	c191                	beqz	a1,2041ba7e <cleanup_glue+0x12>
2041ba7c:	3fc5                	jal	2041ba6c <cleanup_glue>
2041ba7e:	85a2                	mv	a1,s0
2041ba80:	4422                	lw	s0,8(sp)
2041ba82:	40b2                	lw	ra,12(sp)
2041ba84:	8526                	mv	a0,s1
2041ba86:	4492                	lw	s1,4(sp)
2041ba88:	0141                	addi	sp,sp,16
2041ba8a:	85afc06f          	j	20417ae4 <_free_r>

2041ba8e <_reclaim_reent>:
2041ba8e:	8981a783          	lw	a5,-1896(gp) # 80000a38 <_impure_ptr>
2041ba92:	08a78f63          	beq	a5,a0,2041bb30 <_reclaim_reent+0xa2>
2041ba96:	457c                	lw	a5,76(a0)
2041ba98:	1101                	addi	sp,sp,-32
2041ba9a:	cc22                	sw	s0,24(sp)
2041ba9c:	ca26                	sw	s1,20(sp)
2041ba9e:	c84a                	sw	s2,16(sp)
2041baa0:	ce06                	sw	ra,28(sp)
2041baa2:	c64e                	sw	s3,12(sp)
2041baa4:	842a                	mv	s0,a0
2041baa6:	4481                	li	s1,0
2041baa8:	08000913          	li	s2,128
2041baac:	eb85                	bnez	a5,2041badc <_reclaim_reent+0x4e>
2041baae:	402c                	lw	a1,64(s0)
2041bab0:	c581                	beqz	a1,2041bab8 <_reclaim_reent+0x2a>
2041bab2:	8522                	mv	a0,s0
2041bab4:	830fc0ef          	jal	ra,20417ae4 <_free_r>
2041bab8:	14842583          	lw	a1,328(s0)
2041babc:	cd95                	beqz	a1,2041baf8 <_reclaim_reent+0x6a>
2041babe:	14c40493          	addi	s1,s0,332
2041bac2:	02958b63          	beq	a1,s1,2041baf8 <_reclaim_reent+0x6a>
2041bac6:	0005a903          	lw	s2,0(a1)
2041baca:	8522                	mv	a0,s0
2041bacc:	818fc0ef          	jal	ra,20417ae4 <_free_r>
2041bad0:	85ca                	mv	a1,s2
2041bad2:	bfc5                	j	2041bac2 <_reclaim_reent+0x34>
2041bad4:	95a6                	add	a1,a1,s1
2041bad6:	418c                	lw	a1,0(a1)
2041bad8:	e989                	bnez	a1,2041baea <_reclaim_reent+0x5c>
2041bada:	0491                	addi	s1,s1,4
2041badc:	446c                	lw	a1,76(s0)
2041bade:	ff249be3          	bne	s1,s2,2041bad4 <_reclaim_reent+0x46>
2041bae2:	8522                	mv	a0,s0
2041bae4:	800fc0ef          	jal	ra,20417ae4 <_free_r>
2041bae8:	b7d9                	j	2041baae <_reclaim_reent+0x20>
2041baea:	0005a983          	lw	s3,0(a1)
2041baee:	8522                	mv	a0,s0
2041baf0:	ff5fb0ef          	jal	ra,20417ae4 <_free_r>
2041baf4:	85ce                	mv	a1,s3
2041baf6:	b7cd                	j	2041bad8 <_reclaim_reent+0x4a>
2041baf8:	486c                	lw	a1,84(s0)
2041bafa:	c581                	beqz	a1,2041bb02 <_reclaim_reent+0x74>
2041bafc:	8522                	mv	a0,s0
2041bafe:	fe7fb0ef          	jal	ra,20417ae4 <_free_r>
2041bb02:	5c1c                	lw	a5,56(s0)
2041bb04:	cf99                	beqz	a5,2041bb22 <_reclaim_reent+0x94>
2041bb06:	5c5c                	lw	a5,60(s0)
2041bb08:	8522                	mv	a0,s0
2041bb0a:	9782                	jalr	a5
2041bb0c:	2e042583          	lw	a1,736(s0)
2041bb10:	c989                	beqz	a1,2041bb22 <_reclaim_reent+0x94>
2041bb12:	8522                	mv	a0,s0
2041bb14:	4462                	lw	s0,24(sp)
2041bb16:	40f2                	lw	ra,28(sp)
2041bb18:	44d2                	lw	s1,20(sp)
2041bb1a:	4942                	lw	s2,16(sp)
2041bb1c:	49b2                	lw	s3,12(sp)
2041bb1e:	6105                	addi	sp,sp,32
2041bb20:	b7b1                	j	2041ba6c <cleanup_glue>
2041bb22:	40f2                	lw	ra,28(sp)
2041bb24:	4462                	lw	s0,24(sp)
2041bb26:	44d2                	lw	s1,20(sp)
2041bb28:	4942                	lw	s2,16(sp)
2041bb2a:	49b2                	lw	s3,12(sp)
2041bb2c:	6105                	addi	sp,sp,32
2041bb2e:	8082                	ret
2041bb30:	8082                	ret
	...

2041bb34 <_stub>:
{
2041bb34:	fe010113          	addi	sp,sp,-32
2041bb38:	00812e23          	sw	s0,28(sp)
2041bb3c:	02010413          	addi	s0,sp,32
2041bb40:	fea42623          	sw	a0,-20(s0)
  return -1;
2041bb44:	fff00793          	li	a5,-1
}
2041bb48:	00078513          	mv	a0,a5
2041bb4c:	01c12403          	lw	s0,28(sp)
2041bb50:	02010113          	addi	sp,sp,32
2041bb54:	00008067          	ret

2041bb58 <__wrap_lseek>:
#include <sys/types.h>
#include "stub.h"
#include "weak_under_alias.h"

off_t __wrap_lseek(int fd, off_t ptr, int dir)
{
2041bb58:	fe010113          	addi	sp,sp,-32
2041bb5c:	00112e23          	sw	ra,28(sp)
2041bb60:	00812c23          	sw	s0,24(sp)
2041bb64:	02010413          	addi	s0,sp,32
2041bb68:	fea42623          	sw	a0,-20(s0)
2041bb6c:	feb42423          	sw	a1,-24(s0)
2041bb70:	fec42223          	sw	a2,-28(s0)
  if (isatty(fd))
2041bb74:	fec42503          	lw	a0,-20(s0)
2041bb78:	c11f60ef          	jal	ra,20412788 <__wrap_isatty>
2041bb7c:	00050793          	mv	a5,a0
2041bb80:	00078663          	beqz	a5,2041bb8c <__wrap_lseek+0x34>
    return 0;
2041bb84:	00000793          	li	a5,0
2041bb88:	0100006f          	j	2041bb98 <__wrap_lseek+0x40>

  return _stub(EBADF);
2041bb8c:	00900513          	li	a0,9
2041bb90:	fa5ff0ef          	jal	ra,2041bb34 <_stub>
2041bb94:	00050793          	mv	a5,a0
}
2041bb98:	00078513          	mv	a0,a5
2041bb9c:	01c12083          	lw	ra,28(sp)
2041bba0:	01812403          	lw	s0,24(sp)
2041bba4:	02010113          	addi	sp,sp,32
2041bba8:	00008067          	ret

2041bbac <_stub>:
{
2041bbac:	fe010113          	addi	sp,sp,-32
2041bbb0:	00812e23          	sw	s0,28(sp)
2041bbb4:	02010413          	addi	s0,sp,32
2041bbb8:	fea42623          	sw	a0,-20(s0)
  return -1;
2041bbbc:	fff00793          	li	a5,-1
}
2041bbc0:	00078513          	mv	a0,a5
2041bbc4:	01c12403          	lw	s0,28(sp)
2041bbc8:	02010113          	addi	sp,sp,32
2041bbcc:	00008067          	ret

2041bbd0 <__wrap_read>:
#include "platform.h"
#include "stub.h"
#include "weak_under_alias.h"

ssize_t __wrap_read(int fd, void* ptr, size_t len)
{
2041bbd0:	fd010113          	addi	sp,sp,-48
2041bbd4:	02112623          	sw	ra,44(sp)
2041bbd8:	02812423          	sw	s0,40(sp)
2041bbdc:	03010413          	addi	s0,sp,48
2041bbe0:	fca42e23          	sw	a0,-36(s0)
2041bbe4:	fcb42c23          	sw	a1,-40(s0)
2041bbe8:	fcc42a23          	sw	a2,-44(s0)
  uint8_t * current = (uint8_t *)ptr;
2041bbec:	fd842783          	lw	a5,-40(s0)
2041bbf0:	fef42623          	sw	a5,-20(s0)
  volatile uint32_t * uart_rx = (uint32_t *)(UART0_CTRL_ADDR + UART_REG_RXFIFO);
2041bbf4:	100137b7          	lui	a5,0x10013
2041bbf8:	00478793          	addi	a5,a5,4 # 10013004 <__stack_size+0x1000f004>
2041bbfc:	fef42223          	sw	a5,-28(s0)
  volatile uint8_t * uart_rx_cnt = (uint8_t *)(UART0_CTRL_ADDR + UART_REG_RXCTRL + 2);
2041bc00:	100137b7          	lui	a5,0x10013
2041bc04:	00e78793          	addi	a5,a5,14 # 1001300e <__stack_size+0x1000f00e>
2041bc08:	fef42023          	sw	a5,-32(s0)

  ssize_t result = 0;
2041bc0c:	fe042423          	sw	zero,-24(s0)

  if (isatty(fd)) {
2041bc10:	fdc42503          	lw	a0,-36(s0)
2041bc14:	b75f60ef          	jal	ra,20412788 <__wrap_isatty>
2041bc18:	00050793          	mv	a5,a0
2041bc1c:	06078463          	beqz	a5,2041bc84 <__wrap_read+0xb4>
    for (current = (uint8_t *)ptr;
2041bc20:	fd842783          	lw	a5,-40(s0)
2041bc24:	fef42623          	sw	a5,-20(s0)
2041bc28:	0300006f          	j	2041bc58 <__wrap_read+0x88>
        (current < ((uint8_t *)ptr) + len) && (*uart_rx_cnt > 0);
        current ++) {
      *current = *uart_rx;
2041bc2c:	fe442783          	lw	a5,-28(s0)
2041bc30:	0007a783          	lw	a5,0(a5)
2041bc34:	0ff7f713          	andi	a4,a5,255
2041bc38:	fec42783          	lw	a5,-20(s0)
2041bc3c:	00e78023          	sb	a4,0(a5)
      result++;
2041bc40:	fe842783          	lw	a5,-24(s0)
2041bc44:	00178793          	addi	a5,a5,1
2041bc48:	fef42423          	sw	a5,-24(s0)
        current ++) {
2041bc4c:	fec42783          	lw	a5,-20(s0)
2041bc50:	00178793          	addi	a5,a5,1
2041bc54:	fef42623          	sw	a5,-20(s0)
        (current < ((uint8_t *)ptr) + len) && (*uart_rx_cnt > 0);
2041bc58:	fd842703          	lw	a4,-40(s0)
2041bc5c:	fd442783          	lw	a5,-44(s0)
2041bc60:	00f707b3          	add	a5,a4,a5
    for (current = (uint8_t *)ptr;
2041bc64:	fec42703          	lw	a4,-20(s0)
2041bc68:	00f77a63          	bleu	a5,a4,2041bc7c <__wrap_read+0xac>
        (current < ((uint8_t *)ptr) + len) && (*uart_rx_cnt > 0);
2041bc6c:	fe042783          	lw	a5,-32(s0)
2041bc70:	0007c783          	lbu	a5,0(a5)
2041bc74:	0ff7f793          	andi	a5,a5,255
2041bc78:	fa079ae3          	bnez	a5,2041bc2c <__wrap_read+0x5c>
    }
    return result;
2041bc7c:	fe842783          	lw	a5,-24(s0)
2041bc80:	0100006f          	j	2041bc90 <__wrap_read+0xc0>
  }

  return _stub(EBADF);
2041bc84:	00900513          	li	a0,9
2041bc88:	f25ff0ef          	jal	ra,2041bbac <_stub>
2041bc8c:	00050793          	mv	a5,a0
}
2041bc90:	00078513          	mv	a0,a5
2041bc94:	02c12083          	lw	ra,44(sp)
2041bc98:	02812403          	lw	s0,40(sp)
2041bc9c:	03010113          	addi	sp,sp,48
2041bca0:	00008067          	ret

2041bca4 <_stub>:
{
2041bca4:	fe010113          	addi	sp,sp,-32
2041bca8:	00812e23          	sw	s0,28(sp)
2041bcac:	02010413          	addi	s0,sp,32
2041bcb0:	fea42623          	sw	a0,-20(s0)
  return -1;
2041bcb4:	fff00793          	li	a5,-1
}
2041bcb8:	00078513          	mv	a0,a5
2041bcbc:	01c12403          	lw	s0,28(sp)
2041bcc0:	02010113          	addi	sp,sp,32
2041bcc4:	00008067          	ret

2041bcc8 <__wrap_fstat>:
#include <sys/stat.h>
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_fstat(int fd, struct stat* st)
{
2041bcc8:	fe010113          	addi	sp,sp,-32
2041bccc:	00112e23          	sw	ra,28(sp)
2041bcd0:	00812c23          	sw	s0,24(sp)
2041bcd4:	02010413          	addi	s0,sp,32
2041bcd8:	fea42623          	sw	a0,-20(s0)
2041bcdc:	feb42423          	sw	a1,-24(s0)
  if (isatty(fd)) {
2041bce0:	fec42503          	lw	a0,-20(s0)
2041bce4:	aa5f60ef          	jal	ra,20412788 <__wrap_isatty>
2041bce8:	00050793          	mv	a5,a0
2041bcec:	00078c63          	beqz	a5,2041bd04 <__wrap_fstat+0x3c>
    st->st_mode = S_IFCHR;
2041bcf0:	fe842783          	lw	a5,-24(s0)
2041bcf4:	00002737          	lui	a4,0x2
2041bcf8:	00e7a223          	sw	a4,4(a5)
    return 0;
2041bcfc:	00000793          	li	a5,0
2041bd00:	0100006f          	j	2041bd10 <__wrap_fstat+0x48>
  }

  return _stub(EBADF);
2041bd04:	00900513          	li	a0,9
2041bd08:	f9dff0ef          	jal	ra,2041bca4 <_stub>
2041bd0c:	00050793          	mv	a5,a0
}
2041bd10:	00078513          	mv	a0,a5
2041bd14:	01c12083          	lw	ra,28(sp)
2041bd18:	01812403          	lw	s0,24(sp)
2041bd1c:	02010113          	addi	sp,sp,32
2041bd20:	00008067          	ret

2041bd24 <_stub>:
{
2041bd24:	fe010113          	addi	sp,sp,-32
2041bd28:	00812e23          	sw	s0,28(sp)
2041bd2c:	02010413          	addi	s0,sp,32
2041bd30:	fea42623          	sw	a0,-20(s0)
  return -1;
2041bd34:	fff00793          	li	a5,-1
}
2041bd38:	00078513          	mv	a0,a5
2041bd3c:	01c12403          	lw	s0,28(sp)
2041bd40:	02010113          	addi	sp,sp,32
2041bd44:	00008067          	ret

2041bd48 <__wrap_close>:
#include <errno.h>
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_close(int fd)
{
2041bd48:	fe010113          	addi	sp,sp,-32
2041bd4c:	00112e23          	sw	ra,28(sp)
2041bd50:	00812c23          	sw	s0,24(sp)
2041bd54:	02010413          	addi	s0,sp,32
2041bd58:	fea42623          	sw	a0,-20(s0)
  return _stub(EBADF);
2041bd5c:	00900513          	li	a0,9
2041bd60:	fc5ff0ef          	jal	ra,2041bd24 <_stub>
2041bd64:	00050793          	mv	a5,a0
}
2041bd68:	00078513          	mv	a0,a5
2041bd6c:	01c12083          	lw	ra,28(sp)
2041bd70:	01812403          	lw	s0,24(sp)
2041bd74:	02010113          	addi	sp,sp,32
2041bd78:	00008067          	ret

2041bd7c <__wrap_getpid>:
/* See LICENSE of license details. */
#include "weak_under_alias.h"

int __wrap_getpid(void)
{
2041bd7c:	ff010113          	addi	sp,sp,-16
2041bd80:	00812623          	sw	s0,12(sp)
2041bd84:	01010413          	addi	s0,sp,16
  return 1;
2041bd88:	00100793          	li	a5,1
}
2041bd8c:	00078513          	mv	a0,a5
2041bd90:	00c12403          	lw	s0,12(sp)
2041bd94:	01010113          	addi	sp,sp,16
2041bd98:	00008067          	ret

2041bd9c <_stub>:
{
2041bd9c:	fe010113          	addi	sp,sp,-32
2041bda0:	00812e23          	sw	s0,28(sp)
2041bda4:	02010413          	addi	s0,sp,32
2041bda8:	fea42623          	sw	a0,-20(s0)
  return -1;
2041bdac:	fff00793          	li	a5,-1
}
2041bdb0:	00078513          	mv	a0,a5
2041bdb4:	01c12403          	lw	s0,28(sp)
2041bdb8:	02010113          	addi	sp,sp,32
2041bdbc:	00008067          	ret

2041bdc0 <__wrap_kill>:
#include <errno.h>
#include "stub.h"
#include "weak_under_alias.h"

int __wrap_kill(int pid, int sig)
{
2041bdc0:	fe010113          	addi	sp,sp,-32
2041bdc4:	00112e23          	sw	ra,28(sp)
2041bdc8:	00812c23          	sw	s0,24(sp)
2041bdcc:	02010413          	addi	s0,sp,32
2041bdd0:	fea42623          	sw	a0,-20(s0)
2041bdd4:	feb42423          	sw	a1,-24(s0)
  return _stub(EINVAL);
2041bdd8:	01600513          	li	a0,22
2041bddc:	fc1ff0ef          	jal	ra,2041bd9c <_stub>
2041bde0:	00050793          	mv	a5,a0
}
2041bde4:	00078513          	mv	a0,a5
2041bde8:	01c12083          	lw	ra,28(sp)
2041bdec:	01812403          	lw	s0,24(sp)
2041bdf0:	02010113          	addi	sp,sp,32
2041bdf4:	00008067          	ret

2041bdf8 <__divdi3>:
2041bdf8:	4301                	li	t1,0
2041bdfa:	0005db63          	bgez	a1,2041be10 <__divdi3+0x18>
2041bdfe:	40a00533          	neg	a0,a0
2041be02:	00a03833          	snez	a6,a0
2041be06:	40b00733          	neg	a4,a1
2041be0a:	410705b3          	sub	a1,a4,a6
2041be0e:	537d                	li	t1,-1
2041be10:	0006db63          	bgez	a3,2041be26 <__divdi3+0x2e>
2041be14:	40c00633          	neg	a2,a2
2041be18:	00c037b3          	snez	a5,a2
2041be1c:	40d006b3          	neg	a3,a3
2041be20:	fff34313          	not	t1,t1
2041be24:	8e9d                	sub	a3,a3,a5
2041be26:	8832                	mv	a6,a2
2041be28:	8736                	mv	a4,a3
2041be2a:	88aa                	mv	a7,a0
2041be2c:	8e2e                	mv	t3,a1
2041be2e:	20069f63          	bnez	a3,2041c04c <__divdi3+0x254>
2041be32:	204226b7          	lui	a3,0x20422
2041be36:	74068693          	addi	a3,a3,1856 # 20422740 <__clz_tab>
2041be3a:	0ac5ff63          	bleu	a2,a1,2041bef8 <__divdi3+0x100>
2041be3e:	67c1                	lui	a5,0x10
2041be40:	0af67563          	bleu	a5,a2,2041beea <__divdi3+0xf2>
2041be44:	0ff00e93          	li	t4,255
2041be48:	00cebeb3          	sltu	t4,t4,a2
2041be4c:	0e8e                	slli	t4,t4,0x3
2041be4e:	01d657b3          	srl	a5,a2,t4
2041be52:	96be                	add	a3,a3,a5
2041be54:	0006c703          	lbu	a4,0(a3)
2041be58:	02000793          	li	a5,32
2041be5c:	9eba                	add	t4,t4,a4
2041be5e:	41d787b3          	sub	a5,a5,t4
2041be62:	cb99                	beqz	a5,2041be78 <__divdi3+0x80>
2041be64:	00f59733          	sll	a4,a1,a5
2041be68:	01d55eb3          	srl	t4,a0,t4
2041be6c:	00f61833          	sll	a6,a2,a5
2041be70:	00eeee33          	or	t3,t4,a4
2041be74:	00f518b3          	sll	a7,a0,a5
2041be78:	01085613          	srli	a2,a6,0x10
2041be7c:	02ce5733          	divu	a4,t3,a2
2041be80:	01081593          	slli	a1,a6,0x10
2041be84:	81c1                	srli	a1,a1,0x10
2041be86:	0108d693          	srli	a3,a7,0x10
2041be8a:	02ce77b3          	remu	a5,t3,a2
2041be8e:	02e58533          	mul	a0,a1,a4
2041be92:	07c2                	slli	a5,a5,0x10
2041be94:	8edd                	or	a3,a3,a5
2041be96:	87ba                	mv	a5,a4
2041be98:	00a6fc63          	bleu	a0,a3,2041beb0 <__divdi3+0xb8>
2041be9c:	96c2                	add	a3,a3,a6
2041be9e:	fff70793          	addi	a5,a4,-1 # 1fff <__stack_size-0x2001>
2041bea2:	0106e763          	bltu	a3,a6,2041beb0 <__divdi3+0xb8>
2041bea6:	00a6f563          	bleu	a0,a3,2041beb0 <__divdi3+0xb8>
2041beaa:	ffe70793          	addi	a5,a4,-2
2041beae:	96c2                	add	a3,a3,a6
2041beb0:	8e89                	sub	a3,a3,a0
2041beb2:	02c6f733          	remu	a4,a3,a2
2041beb6:	08c2                	slli	a7,a7,0x10
2041beb8:	0108d893          	srli	a7,a7,0x10
2041bebc:	02c6d6b3          	divu	a3,a3,a2
2041bec0:	0742                	slli	a4,a4,0x10
2041bec2:	011768b3          	or	a7,a4,a7
2041bec6:	02d585b3          	mul	a1,a1,a3
2041beca:	8536                	mv	a0,a3
2041becc:	00b8fb63          	bleu	a1,a7,2041bee2 <__divdi3+0xea>
2041bed0:	98c2                	add	a7,a7,a6
2041bed2:	fff68513          	addi	a0,a3,-1
2041bed6:	0108e663          	bltu	a7,a6,2041bee2 <__divdi3+0xea>
2041beda:	00b8f463          	bleu	a1,a7,2041bee2 <__divdi3+0xea>
2041bede:	ffe68513          	addi	a0,a3,-2
2041bee2:	07c2                	slli	a5,a5,0x10
2041bee4:	8fc9                	or	a5,a5,a0
2041bee6:	4e01                	li	t3,0
2041bee8:	a845                	j	2041bf98 <__divdi3+0x1a0>
2041beea:	010007b7          	lui	a5,0x1000
2041beee:	4ec1                	li	t4,16
2041bef0:	f4f66fe3          	bltu	a2,a5,2041be4e <__divdi3+0x56>
2041bef4:	4ee1                	li	t4,24
2041bef6:	bfa1                	j	2041be4e <__divdi3+0x56>
2041bef8:	e601                	bnez	a2,2041bf00 <__divdi3+0x108>
2041befa:	4805                	li	a6,1
2041befc:	02e85833          	divu	a6,a6,a4
2041bf00:	67c1                	lui	a5,0x10
2041bf02:	0af87763          	bleu	a5,a6,2041bfb0 <__divdi3+0x1b8>
2041bf06:	0ff00793          	li	a5,255
2041bf0a:	0107f363          	bleu	a6,a5,2041bf10 <__divdi3+0x118>
2041bf0e:	4721                	li	a4,8
2041bf10:	00e857b3          	srl	a5,a6,a4
2041bf14:	96be                	add	a3,a3,a5
2041bf16:	0006c783          	lbu	a5,0(a3)
2041bf1a:	02000693          	li	a3,32
2041bf1e:	97ba                	add	a5,a5,a4
2041bf20:	8e9d                	sub	a3,a3,a5
2041bf22:	eed1                	bnez	a3,2041bfbe <__divdi3+0x1c6>
2041bf24:	41058733          	sub	a4,a1,a6
2041bf28:	4e05                	li	t3,1
2041bf2a:	01085613          	srli	a2,a6,0x10
2041bf2e:	01081593          	slli	a1,a6,0x10
2041bf32:	81c1                	srli	a1,a1,0x10
2041bf34:	0108d693          	srli	a3,a7,0x10
2041bf38:	02c777b3          	remu	a5,a4,a2
2041bf3c:	02c75733          	divu	a4,a4,a2
2041bf40:	07c2                	slli	a5,a5,0x10
2041bf42:	8edd                	or	a3,a3,a5
2041bf44:	02e58533          	mul	a0,a1,a4
2041bf48:	87ba                	mv	a5,a4
2041bf4a:	00a6fc63          	bleu	a0,a3,2041bf62 <__divdi3+0x16a>
2041bf4e:	96c2                	add	a3,a3,a6
2041bf50:	fff70793          	addi	a5,a4,-1
2041bf54:	0106e763          	bltu	a3,a6,2041bf62 <__divdi3+0x16a>
2041bf58:	00a6f563          	bleu	a0,a3,2041bf62 <__divdi3+0x16a>
2041bf5c:	ffe70793          	addi	a5,a4,-2
2041bf60:	96c2                	add	a3,a3,a6
2041bf62:	8e89                	sub	a3,a3,a0
2041bf64:	02c6f733          	remu	a4,a3,a2
2041bf68:	08c2                	slli	a7,a7,0x10
2041bf6a:	0108d893          	srli	a7,a7,0x10
2041bf6e:	02c6d6b3          	divu	a3,a3,a2
2041bf72:	0742                	slli	a4,a4,0x10
2041bf74:	011768b3          	or	a7,a4,a7
2041bf78:	02d585b3          	mul	a1,a1,a3
2041bf7c:	8536                	mv	a0,a3
2041bf7e:	00b8fb63          	bleu	a1,a7,2041bf94 <__divdi3+0x19c>
2041bf82:	98c2                	add	a7,a7,a6
2041bf84:	fff68513          	addi	a0,a3,-1
2041bf88:	0108e663          	bltu	a7,a6,2041bf94 <__divdi3+0x19c>
2041bf8c:	00b8f463          	bleu	a1,a7,2041bf94 <__divdi3+0x19c>
2041bf90:	ffe68513          	addi	a0,a3,-2
2041bf94:	07c2                	slli	a5,a5,0x10
2041bf96:	8fc9                	or	a5,a5,a0
2041bf98:	853e                	mv	a0,a5
2041bf9a:	85f2                	mv	a1,t3
2041bf9c:	00030963          	beqz	t1,2041bfae <__divdi3+0x1b6>
2041bfa0:	40f00533          	neg	a0,a5
2041bfa4:	00a037b3          	snez	a5,a0
2041bfa8:	41c005b3          	neg	a1,t3
2041bfac:	8d9d                	sub	a1,a1,a5
2041bfae:	8082                	ret
2041bfb0:	010007b7          	lui	a5,0x1000
2041bfb4:	4741                	li	a4,16
2041bfb6:	f4f86de3          	bltu	a6,a5,2041bf10 <__divdi3+0x118>
2041bfba:	4761                	li	a4,24
2041bfbc:	bf91                	j	2041bf10 <__divdi3+0x118>
2041bfbe:	00d81833          	sll	a6,a6,a3
2041bfc2:	00f5deb3          	srl	t4,a1,a5
2041bfc6:	00d518b3          	sll	a7,a0,a3
2041bfca:	00f557b3          	srl	a5,a0,a5
2041bfce:	01085513          	srli	a0,a6,0x10
2041bfd2:	00d59733          	sll	a4,a1,a3
2041bfd6:	02aed5b3          	divu	a1,t4,a0
2041bfda:	00e7e633          	or	a2,a5,a4
2041bfde:	01081713          	slli	a4,a6,0x10
2041bfe2:	8341                	srli	a4,a4,0x10
2041bfe4:	01065793          	srli	a5,a2,0x10
2041bfe8:	02aef6b3          	remu	a3,t4,a0
2041bfec:	8e2e                	mv	t3,a1
2041bfee:	02b70eb3          	mul	t4,a4,a1
2041bff2:	06c2                	slli	a3,a3,0x10
2041bff4:	8fd5                	or	a5,a5,a3
2041bff6:	01d7fc63          	bleu	t4,a5,2041c00e <__divdi3+0x216>
2041bffa:	97c2                	add	a5,a5,a6
2041bffc:	fff58e13          	addi	t3,a1,-1
2041c000:	0107e763          	bltu	a5,a6,2041c00e <__divdi3+0x216>
2041c004:	01d7f563          	bleu	t4,a5,2041c00e <__divdi3+0x216>
2041c008:	ffe58e13          	addi	t3,a1,-2
2041c00c:	97c2                	add	a5,a5,a6
2041c00e:	41d787b3          	sub	a5,a5,t4
2041c012:	02a7f5b3          	remu	a1,a5,a0
2041c016:	0642                	slli	a2,a2,0x10
2041c018:	8241                	srli	a2,a2,0x10
2041c01a:	02a7d7b3          	divu	a5,a5,a0
2041c01e:	05c2                	slli	a1,a1,0x10
2041c020:	8dd1                	or	a1,a1,a2
2041c022:	02f70733          	mul	a4,a4,a5
2041c026:	86be                	mv	a3,a5
2041c028:	00e5fc63          	bleu	a4,a1,2041c040 <__divdi3+0x248>
2041c02c:	95c2                	add	a1,a1,a6
2041c02e:	fff78693          	addi	a3,a5,-1 # ffffff <__stack_size+0xffbfff>
2041c032:	0105e763          	bltu	a1,a6,2041c040 <__divdi3+0x248>
2041c036:	00e5f563          	bleu	a4,a1,2041c040 <__divdi3+0x248>
2041c03a:	ffe78693          	addi	a3,a5,-2
2041c03e:	95c2                	add	a1,a1,a6
2041c040:	0e42                	slli	t3,t3,0x10
2041c042:	40e58733          	sub	a4,a1,a4
2041c046:	00de6e33          	or	t3,t3,a3
2041c04a:	b5c5                	j	2041bf2a <__divdi3+0x132>
2041c04c:	14d5e163          	bltu	a1,a3,2041c18e <__divdi3+0x396>
2041c050:	67c1                	lui	a5,0x10
2041c052:	02f6ff63          	bleu	a5,a3,2041c090 <__divdi3+0x298>
2041c056:	0ff00813          	li	a6,255
2041c05a:	00d838b3          	sltu	a7,a6,a3
2041c05e:	088e                	slli	a7,a7,0x3
2041c060:	20422737          	lui	a4,0x20422
2041c064:	0116d7b3          	srl	a5,a3,a7
2041c068:	74070713          	addi	a4,a4,1856 # 20422740 <__clz_tab>
2041c06c:	97ba                	add	a5,a5,a4
2041c06e:	0007c803          	lbu	a6,0(a5) # 10000 <__stack_size+0xc000>
2041c072:	02000e13          	li	t3,32
2041c076:	9846                	add	a6,a6,a7
2041c078:	410e0e33          	sub	t3,t3,a6
2041c07c:	020e1163          	bnez	t3,2041c09e <__divdi3+0x2a6>
2041c080:	4785                	li	a5,1
2041c082:	f0b6ebe3          	bltu	a3,a1,2041bf98 <__divdi3+0x1a0>
2041c086:	00c53633          	sltu	a2,a0,a2
2041c08a:	00164793          	xori	a5,a2,1
2041c08e:	b729                	j	2041bf98 <__divdi3+0x1a0>
2041c090:	010007b7          	lui	a5,0x1000
2041c094:	48c1                	li	a7,16
2041c096:	fcf6e5e3          	bltu	a3,a5,2041c060 <__divdi3+0x268>
2041c09a:	48e1                	li	a7,24
2041c09c:	b7d1                	j	2041c060 <__divdi3+0x268>
2041c09e:	010657b3          	srl	a5,a2,a6
2041c0a2:	01c696b3          	sll	a3,a3,t3
2041c0a6:	8edd                	or	a3,a3,a5
2041c0a8:	0106df13          	srli	t5,a3,0x10
2041c0ac:	0105d7b3          	srl	a5,a1,a6
2041c0b0:	03e7f8b3          	remu	a7,a5,t5
2041c0b4:	01069e93          	slli	t4,a3,0x10
2041c0b8:	010ede93          	srli	t4,t4,0x10
2041c0bc:	01c59733          	sll	a4,a1,t3
2041c0c0:	01055833          	srl	a6,a0,a6
2041c0c4:	00e86733          	or	a4,a6,a4
2041c0c8:	01075813          	srli	a6,a4,0x10
2041c0cc:	01c61633          	sll	a2,a2,t3
2041c0d0:	03e7d7b3          	divu	a5,a5,t5
2041c0d4:	08c2                	slli	a7,a7,0x10
2041c0d6:	0108e833          	or	a6,a7,a6
2041c0da:	02fe8fb3          	mul	t6,t4,a5
2041c0de:	85be                	mv	a1,a5
2041c0e0:	01f87c63          	bleu	t6,a6,2041c0f8 <__divdi3+0x300>
2041c0e4:	9836                	add	a6,a6,a3
2041c0e6:	fff78593          	addi	a1,a5,-1 # ffffff <__stack_size+0xffbfff>
2041c0ea:	00d86763          	bltu	a6,a3,2041c0f8 <__divdi3+0x300>
2041c0ee:	01f87563          	bleu	t6,a6,2041c0f8 <__divdi3+0x300>
2041c0f2:	ffe78593          	addi	a1,a5,-2
2041c0f6:	9836                	add	a6,a6,a3
2041c0f8:	41f80833          	sub	a6,a6,t6
2041c0fc:	03e878b3          	remu	a7,a6,t5
2041c100:	0742                	slli	a4,a4,0x10
2041c102:	8341                	srli	a4,a4,0x10
2041c104:	03e85833          	divu	a6,a6,t5
2041c108:	08c2                	slli	a7,a7,0x10
2041c10a:	00e8e733          	or	a4,a7,a4
2041c10e:	030e8eb3          	mul	t4,t4,a6
2041c112:	87c2                	mv	a5,a6
2041c114:	01d77c63          	bleu	t4,a4,2041c12c <__divdi3+0x334>
2041c118:	9736                	add	a4,a4,a3
2041c11a:	fff80793          	addi	a5,a6,-1 # 7fefffff <__fini_array_end+0x5fadd743>
2041c11e:	00d76763          	bltu	a4,a3,2041c12c <__divdi3+0x334>
2041c122:	01d77563          	bleu	t4,a4,2041c12c <__divdi3+0x334>
2041c126:	ffe80793          	addi	a5,a6,-2
2041c12a:	9736                	add	a4,a4,a3
2041c12c:	05c2                	slli	a1,a1,0x10
2041c12e:	6f41                	lui	t5,0x10
2041c130:	8fcd                	or	a5,a5,a1
2041c132:	ffff0593          	addi	a1,t5,-1 # ffff <__stack_size+0xbfff>
2041c136:	00b7f8b3          	and	a7,a5,a1
2041c13a:	0107d813          	srli	a6,a5,0x10
2041c13e:	8df1                	and	a1,a1,a2
2041c140:	8241                	srli	a2,a2,0x10
2041c142:	41d70733          	sub	a4,a4,t4
2041c146:	02b88eb3          	mul	t4,a7,a1
2041c14a:	02b805b3          	mul	a1,a6,a1
2041c14e:	010ed693          	srli	a3,t4,0x10
2041c152:	02c888b3          	mul	a7,a7,a2
2041c156:	98ae                	add	a7,a7,a1
2041c158:	96c6                	add	a3,a3,a7
2041c15a:	02c80833          	mul	a6,a6,a2
2041c15e:	00b6f363          	bleu	a1,a3,2041c164 <__divdi3+0x36c>
2041c162:	987a                	add	a6,a6,t5
2041c164:	0106d613          	srli	a2,a3,0x10
2041c168:	9832                	add	a6,a6,a2
2041c16a:	03076063          	bltu	a4,a6,2041c18a <__divdi3+0x392>
2041c16e:	d7071ce3          	bne	a4,a6,2041bee6 <__divdi3+0xee>
2041c172:	6741                	lui	a4,0x10
2041c174:	177d                	addi	a4,a4,-1
2041c176:	8ef9                	and	a3,a3,a4
2041c178:	06c2                	slli	a3,a3,0x10
2041c17a:	00eefeb3          	and	t4,t4,a4
2041c17e:	01c51533          	sll	a0,a0,t3
2041c182:	96f6                	add	a3,a3,t4
2041c184:	4e01                	li	t3,0
2041c186:	e0d579e3          	bleu	a3,a0,2041bf98 <__divdi3+0x1a0>
2041c18a:	17fd                	addi	a5,a5,-1
2041c18c:	bba9                	j	2041bee6 <__divdi3+0xee>
2041c18e:	4e01                	li	t3,0
2041c190:	4781                	li	a5,0
2041c192:	b519                	j	2041bf98 <__divdi3+0x1a0>

2041c194 <__udivdi3>:
2041c194:	87ae                	mv	a5,a1
2041c196:	8832                	mv	a6,a2
2041c198:	88b6                	mv	a7,a3
2041c19a:	832a                	mv	t1,a0
2041c19c:	20069663          	bnez	a3,2041c3a8 <__udivdi3+0x214>
2041c1a0:	20422737          	lui	a4,0x20422
2041c1a4:	74070713          	addi	a4,a4,1856 # 20422740 <__clz_tab>
2041c1a8:	0ac5fe63          	bleu	a2,a1,2041c264 <__udivdi3+0xd0>
2041c1ac:	66c1                	lui	a3,0x10
2041c1ae:	0ad67463          	bleu	a3,a2,2041c256 <__udivdi3+0xc2>
2041c1b2:	0ff00693          	li	a3,255
2041c1b6:	00c6b6b3          	sltu	a3,a3,a2
2041c1ba:	068e                	slli	a3,a3,0x3
2041c1bc:	00d658b3          	srl	a7,a2,a3
2041c1c0:	9746                	add	a4,a4,a7
2041c1c2:	00074703          	lbu	a4,0(a4)
2041c1c6:	96ba                	add	a3,a3,a4
2041c1c8:	02000713          	li	a4,32
2041c1cc:	8f15                	sub	a4,a4,a3
2041c1ce:	cb19                	beqz	a4,2041c1e4 <__udivdi3+0x50>
2041c1d0:	00e797b3          	sll	a5,a5,a4
2041c1d4:	00d556b3          	srl	a3,a0,a3
2041c1d8:	00e61833          	sll	a6,a2,a4
2041c1dc:	00f6e5b3          	or	a1,a3,a5
2041c1e0:	00e51333          	sll	t1,a0,a4
2041c1e4:	01085513          	srli	a0,a6,0x10
2041c1e8:	02a5d7b3          	divu	a5,a1,a0
2041c1ec:	01081613          	slli	a2,a6,0x10
2041c1f0:	8241                	srli	a2,a2,0x10
2041c1f2:	01035693          	srli	a3,t1,0x10
2041c1f6:	02a5f733          	remu	a4,a1,a0
2041c1fa:	02f605b3          	mul	a1,a2,a5
2041c1fe:	0742                	slli	a4,a4,0x10
2041c200:	8ed9                	or	a3,a3,a4
2041c202:	873e                	mv	a4,a5
2041c204:	00b6fc63          	bleu	a1,a3,2041c21c <__udivdi3+0x88>
2041c208:	96c2                	add	a3,a3,a6
2041c20a:	fff78713          	addi	a4,a5,-1
2041c20e:	0106e763          	bltu	a3,a6,2041c21c <__udivdi3+0x88>
2041c212:	00b6f563          	bleu	a1,a3,2041c21c <__udivdi3+0x88>
2041c216:	ffe78713          	addi	a4,a5,-2
2041c21a:	96c2                	add	a3,a3,a6
2041c21c:	8e8d                	sub	a3,a3,a1
2041c21e:	02a6f7b3          	remu	a5,a3,a0
2041c222:	0342                	slli	t1,t1,0x10
2041c224:	01035313          	srli	t1,t1,0x10
2041c228:	02a6d6b3          	divu	a3,a3,a0
2041c22c:	07c2                	slli	a5,a5,0x10
2041c22e:	0067e333          	or	t1,a5,t1
2041c232:	02d605b3          	mul	a1,a2,a3
2041c236:	8536                	mv	a0,a3
2041c238:	00b37b63          	bleu	a1,t1,2041c24e <__udivdi3+0xba>
2041c23c:	9342                	add	t1,t1,a6
2041c23e:	fff68513          	addi	a0,a3,-1 # ffff <__stack_size+0xbfff>
2041c242:	01036663          	bltu	t1,a6,2041c24e <__udivdi3+0xba>
2041c246:	00b37463          	bleu	a1,t1,2041c24e <__udivdi3+0xba>
2041c24a:	ffe68513          	addi	a0,a3,-2
2041c24e:	0742                	slli	a4,a4,0x10
2041c250:	8f49                	or	a4,a4,a0
2041c252:	4581                	li	a1,0
2041c254:	a84d                	j	2041c306 <__udivdi3+0x172>
2041c256:	010008b7          	lui	a7,0x1000
2041c25a:	46c1                	li	a3,16
2041c25c:	f71660e3          	bltu	a2,a7,2041c1bc <__udivdi3+0x28>
2041c260:	46e1                	li	a3,24
2041c262:	bfa9                	j	2041c1bc <__udivdi3+0x28>
2041c264:	e601                	bnez	a2,2041c26c <__udivdi3+0xd8>
2041c266:	4685                	li	a3,1
2041c268:	02c6d833          	divu	a6,a3,a2
2041c26c:	66c1                	lui	a3,0x10
2041c26e:	08d87e63          	bleu	a3,a6,2041c30a <__udivdi3+0x176>
2041c272:	0ff00693          	li	a3,255
2041c276:	0106f363          	bleu	a6,a3,2041c27c <__udivdi3+0xe8>
2041c27a:	48a1                	li	a7,8
2041c27c:	011856b3          	srl	a3,a6,a7
2041c280:	9736                	add	a4,a4,a3
2041c282:	00074683          	lbu	a3,0(a4)
2041c286:	02000713          	li	a4,32
2041c28a:	96c6                	add	a3,a3,a7
2041c28c:	8f15                	sub	a4,a4,a3
2041c28e:	e749                	bnez	a4,2041c318 <__udivdi3+0x184>
2041c290:	410787b3          	sub	a5,a5,a6
2041c294:	4585                	li	a1,1
2041c296:	01085613          	srli	a2,a6,0x10
2041c29a:	01081893          	slli	a7,a6,0x10
2041c29e:	0108d893          	srli	a7,a7,0x10
2041c2a2:	01035693          	srli	a3,t1,0x10
2041c2a6:	02c7f733          	remu	a4,a5,a2
2041c2aa:	02c7d7b3          	divu	a5,a5,a2
2041c2ae:	0742                	slli	a4,a4,0x10
2041c2b0:	8ed9                	or	a3,a3,a4
2041c2b2:	02f88533          	mul	a0,a7,a5
2041c2b6:	873e                	mv	a4,a5
2041c2b8:	00a6fc63          	bleu	a0,a3,2041c2d0 <__udivdi3+0x13c>
2041c2bc:	96c2                	add	a3,a3,a6
2041c2be:	fff78713          	addi	a4,a5,-1
2041c2c2:	0106e763          	bltu	a3,a6,2041c2d0 <__udivdi3+0x13c>
2041c2c6:	00a6f563          	bleu	a0,a3,2041c2d0 <__udivdi3+0x13c>
2041c2ca:	ffe78713          	addi	a4,a5,-2
2041c2ce:	96c2                	add	a3,a3,a6
2041c2d0:	8e89                	sub	a3,a3,a0
2041c2d2:	02c6f7b3          	remu	a5,a3,a2
2041c2d6:	0342                	slli	t1,t1,0x10
2041c2d8:	01035313          	srli	t1,t1,0x10
2041c2dc:	02c6d6b3          	divu	a3,a3,a2
2041c2e0:	07c2                	slli	a5,a5,0x10
2041c2e2:	0067e333          	or	t1,a5,t1
2041c2e6:	02d888b3          	mul	a7,a7,a3
2041c2ea:	8536                	mv	a0,a3
2041c2ec:	01137b63          	bleu	a7,t1,2041c302 <__udivdi3+0x16e>
2041c2f0:	9342                	add	t1,t1,a6
2041c2f2:	fff68513          	addi	a0,a3,-1 # ffff <__stack_size+0xbfff>
2041c2f6:	01036663          	bltu	t1,a6,2041c302 <__udivdi3+0x16e>
2041c2fa:	01137463          	bleu	a7,t1,2041c302 <__udivdi3+0x16e>
2041c2fe:	ffe68513          	addi	a0,a3,-2
2041c302:	0742                	slli	a4,a4,0x10
2041c304:	8f49                	or	a4,a4,a0
2041c306:	853a                	mv	a0,a4
2041c308:	8082                	ret
2041c30a:	010006b7          	lui	a3,0x1000
2041c30e:	48c1                	li	a7,16
2041c310:	f6d866e3          	bltu	a6,a3,2041c27c <__udivdi3+0xe8>
2041c314:	48e1                	li	a7,24
2041c316:	b79d                	j	2041c27c <__udivdi3+0xe8>
2041c318:	00e81833          	sll	a6,a6,a4
2041c31c:	00d7d5b3          	srl	a1,a5,a3
2041c320:	00e51333          	sll	t1,a0,a4
2041c324:	00d556b3          	srl	a3,a0,a3
2041c328:	01085513          	srli	a0,a6,0x10
2041c32c:	00e797b3          	sll	a5,a5,a4
2041c330:	02a5f733          	remu	a4,a1,a0
2041c334:	00f6e8b3          	or	a7,a3,a5
2041c338:	01081793          	slli	a5,a6,0x10
2041c33c:	83c1                	srli	a5,a5,0x10
2041c33e:	0108d613          	srli	a2,a7,0x10
2041c342:	02a5d5b3          	divu	a1,a1,a0
2041c346:	0742                	slli	a4,a4,0x10
2041c348:	8f51                	or	a4,a4,a2
2041c34a:	02b786b3          	mul	a3,a5,a1
2041c34e:	862e                	mv	a2,a1
2041c350:	00d77c63          	bleu	a3,a4,2041c368 <__udivdi3+0x1d4>
2041c354:	9742                	add	a4,a4,a6
2041c356:	fff58613          	addi	a2,a1,-1
2041c35a:	01076763          	bltu	a4,a6,2041c368 <__udivdi3+0x1d4>
2041c35e:	00d77563          	bleu	a3,a4,2041c368 <__udivdi3+0x1d4>
2041c362:	ffe58613          	addi	a2,a1,-2
2041c366:	9742                	add	a4,a4,a6
2041c368:	40d706b3          	sub	a3,a4,a3
2041c36c:	02a6f733          	remu	a4,a3,a0
2041c370:	08c2                	slli	a7,a7,0x10
2041c372:	0108d893          	srli	a7,a7,0x10
2041c376:	02a6d6b3          	divu	a3,a3,a0
2041c37a:	0742                	slli	a4,a4,0x10
2041c37c:	02d785b3          	mul	a1,a5,a3
2041c380:	011767b3          	or	a5,a4,a7
2041c384:	8736                	mv	a4,a3
2041c386:	00b7fc63          	bleu	a1,a5,2041c39e <__udivdi3+0x20a>
2041c38a:	97c2                	add	a5,a5,a6
2041c38c:	fff68713          	addi	a4,a3,-1 # ffffff <__stack_size+0xffbfff>
2041c390:	0107e763          	bltu	a5,a6,2041c39e <__udivdi3+0x20a>
2041c394:	00b7f563          	bleu	a1,a5,2041c39e <__udivdi3+0x20a>
2041c398:	ffe68713          	addi	a4,a3,-2
2041c39c:	97c2                	add	a5,a5,a6
2041c39e:	8f8d                	sub	a5,a5,a1
2041c3a0:	01061593          	slli	a1,a2,0x10
2041c3a4:	8dd9                	or	a1,a1,a4
2041c3a6:	bdc5                	j	2041c296 <__udivdi3+0x102>
2041c3a8:	14d5e263          	bltu	a1,a3,2041c4ec <__udivdi3+0x358>
2041c3ac:	6741                	lui	a4,0x10
2041c3ae:	02e6fe63          	bleu	a4,a3,2041c3ea <__udivdi3+0x256>
2041c3b2:	0ff00813          	li	a6,255
2041c3b6:	00d83733          	sltu	a4,a6,a3
2041c3ba:	070e                	slli	a4,a4,0x3
2041c3bc:	20422837          	lui	a6,0x20422
2041c3c0:	74080813          	addi	a6,a6,1856 # 20422740 <__clz_tab>
2041c3c4:	00e6d5b3          	srl	a1,a3,a4
2041c3c8:	95c2                	add	a1,a1,a6
2041c3ca:	0005c803          	lbu	a6,0(a1)
2041c3ce:	02000593          	li	a1,32
2041c3d2:	983a                	add	a6,a6,a4
2041c3d4:	410585b3          	sub	a1,a1,a6
2041c3d8:	e185                	bnez	a1,2041c3f8 <__udivdi3+0x264>
2041c3da:	4705                	li	a4,1
2041c3dc:	f2f6e5e3          	bltu	a3,a5,2041c306 <__udivdi3+0x172>
2041c3e0:	00c53533          	sltu	a0,a0,a2
2041c3e4:	00154713          	xori	a4,a0,1
2041c3e8:	bf39                	j	2041c306 <__udivdi3+0x172>
2041c3ea:	010005b7          	lui	a1,0x1000
2041c3ee:	4741                	li	a4,16
2041c3f0:	fcb6e6e3          	bltu	a3,a1,2041c3bc <__udivdi3+0x228>
2041c3f4:	4761                	li	a4,24
2041c3f6:	b7d9                	j	2041c3bc <__udivdi3+0x228>
2041c3f8:	01065733          	srl	a4,a2,a6
2041c3fc:	00b696b3          	sll	a3,a3,a1
2041c400:	8ed9                	or	a3,a3,a4
2041c402:	0106de93          	srli	t4,a3,0x10
2041c406:	0107d733          	srl	a4,a5,a6
2041c40a:	03d778b3          	remu	a7,a4,t4
2041c40e:	00b797b3          	sll	a5,a5,a1
2041c412:	01055833          	srl	a6,a0,a6
2041c416:	00f86333          	or	t1,a6,a5
2041c41a:	01069793          	slli	a5,a3,0x10
2041c41e:	83c1                	srli	a5,a5,0x10
2041c420:	01035813          	srli	a6,t1,0x10
2041c424:	00b61633          	sll	a2,a2,a1
2041c428:	03d75733          	divu	a4,a4,t4
2041c42c:	08c2                	slli	a7,a7,0x10
2041c42e:	0108e833          	or	a6,a7,a6
2041c432:	02e78f33          	mul	t5,a5,a4
2041c436:	8e3a                	mv	t3,a4
2041c438:	01e87c63          	bleu	t5,a6,2041c450 <__udivdi3+0x2bc>
2041c43c:	9836                	add	a6,a6,a3
2041c43e:	fff70e13          	addi	t3,a4,-1 # ffff <__stack_size+0xbfff>
2041c442:	00d86763          	bltu	a6,a3,2041c450 <__udivdi3+0x2bc>
2041c446:	01e87563          	bleu	t5,a6,2041c450 <__udivdi3+0x2bc>
2041c44a:	ffe70e13          	addi	t3,a4,-2
2041c44e:	9836                	add	a6,a6,a3
2041c450:	41e80833          	sub	a6,a6,t5
2041c454:	03d878b3          	remu	a7,a6,t4
2041c458:	03d85833          	divu	a6,a6,t4
2041c45c:	08c2                	slli	a7,a7,0x10
2041c45e:	03078eb3          	mul	t4,a5,a6
2041c462:	01031793          	slli	a5,t1,0x10
2041c466:	83c1                	srli	a5,a5,0x10
2041c468:	00f8e7b3          	or	a5,a7,a5
2041c46c:	8742                	mv	a4,a6
2041c46e:	01d7fc63          	bleu	t4,a5,2041c486 <__udivdi3+0x2f2>
2041c472:	97b6                	add	a5,a5,a3
2041c474:	fff80713          	addi	a4,a6,-1
2041c478:	00d7e763          	bltu	a5,a3,2041c486 <__udivdi3+0x2f2>
2041c47c:	01d7f563          	bleu	t4,a5,2041c486 <__udivdi3+0x2f2>
2041c480:	ffe80713          	addi	a4,a6,-2
2041c484:	97b6                	add	a5,a5,a3
2041c486:	0e42                	slli	t3,t3,0x10
2041c488:	41d787b3          	sub	a5,a5,t4
2041c48c:	6ec1                	lui	t4,0x10
2041c48e:	00ee6733          	or	a4,t3,a4
2041c492:	fffe8813          	addi	a6,t4,-1 # ffff <__stack_size+0xbfff>
2041c496:	01077333          	and	t1,a4,a6
2041c49a:	01075893          	srli	a7,a4,0x10
2041c49e:	01067833          	and	a6,a2,a6
2041c4a2:	8241                	srli	a2,a2,0x10
2041c4a4:	03030e33          	mul	t3,t1,a6
2041c4a8:	03088833          	mul	a6,a7,a6
2041c4ac:	010e5693          	srli	a3,t3,0x10
2041c4b0:	02c30333          	mul	t1,t1,a2
2041c4b4:	9342                	add	t1,t1,a6
2041c4b6:	969a                	add	a3,a3,t1
2041c4b8:	02c888b3          	mul	a7,a7,a2
2041c4bc:	0106f363          	bleu	a6,a3,2041c4c2 <__udivdi3+0x32e>
2041c4c0:	98f6                	add	a7,a7,t4
2041c4c2:	0106d613          	srli	a2,a3,0x10
2041c4c6:	98b2                	add	a7,a7,a2
2041c4c8:	0317e063          	bltu	a5,a7,2041c4e8 <__udivdi3+0x354>
2041c4cc:	d91793e3          	bne	a5,a7,2041c252 <__udivdi3+0xbe>
2041c4d0:	67c1                	lui	a5,0x10
2041c4d2:	17fd                	addi	a5,a5,-1
2041c4d4:	8efd                	and	a3,a3,a5
2041c4d6:	06c2                	slli	a3,a3,0x10
2041c4d8:	00fe7e33          	and	t3,t3,a5
2041c4dc:	00b51533          	sll	a0,a0,a1
2041c4e0:	96f2                	add	a3,a3,t3
2041c4e2:	4581                	li	a1,0
2041c4e4:	e2d571e3          	bleu	a3,a0,2041c306 <__udivdi3+0x172>
2041c4e8:	177d                	addi	a4,a4,-1
2041c4ea:	b3a5                	j	2041c252 <__udivdi3+0xbe>
2041c4ec:	4581                	li	a1,0
2041c4ee:	4701                	li	a4,0
2041c4f0:	bd19                	j	2041c306 <__udivdi3+0x172>

2041c4f2 <__umoddi3>:
2041c4f2:	88b2                	mv	a7,a2
2041c4f4:	8736                	mv	a4,a3
2041c4f6:	87aa                	mv	a5,a0
2041c4f8:	882e                	mv	a6,a1
2041c4fa:	1c069863          	bnez	a3,2041c6ca <__umoddi3+0x1d8>
2041c4fe:	204226b7          	lui	a3,0x20422
2041c502:	74068693          	addi	a3,a3,1856 # 20422740 <__clz_tab>
2041c506:	0ac5f863          	bleu	a2,a1,2041c5b6 <__umoddi3+0xc4>
2041c50a:	6341                	lui	t1,0x10
2041c50c:	08667e63          	bleu	t1,a2,2041c5a8 <__umoddi3+0xb6>
2041c510:	0ff00313          	li	t1,255
2041c514:	00c37363          	bleu	a2,t1,2041c51a <__umoddi3+0x28>
2041c518:	4721                	li	a4,8
2041c51a:	00e65333          	srl	t1,a2,a4
2041c51e:	969a                	add	a3,a3,t1
2041c520:	0006ce03          	lbu	t3,0(a3)
2041c524:	02000313          	li	t1,32
2041c528:	9e3a                	add	t3,t3,a4
2041c52a:	41c30333          	sub	t1,t1,t3
2041c52e:	00030c63          	beqz	t1,2041c546 <__umoddi3+0x54>
2041c532:	006595b3          	sll	a1,a1,t1
2041c536:	01c55e33          	srl	t3,a0,t3
2041c53a:	006618b3          	sll	a7,a2,t1
2041c53e:	00be6833          	or	a6,t3,a1
2041c542:	006517b3          	sll	a5,a0,t1
2041c546:	0108d613          	srli	a2,a7,0x10
2041c54a:	02c87733          	remu	a4,a6,a2
2041c54e:	01089513          	slli	a0,a7,0x10
2041c552:	8141                	srli	a0,a0,0x10
2041c554:	0107d693          	srli	a3,a5,0x10
2041c558:	02c85833          	divu	a6,a6,a2
2041c55c:	0742                	slli	a4,a4,0x10
2041c55e:	8ed9                	or	a3,a3,a4
2041c560:	03050833          	mul	a6,a0,a6
2041c564:	0106f863          	bleu	a6,a3,2041c574 <__umoddi3+0x82>
2041c568:	96c6                	add	a3,a3,a7
2041c56a:	0116e563          	bltu	a3,a7,2041c574 <__umoddi3+0x82>
2041c56e:	0106f363          	bleu	a6,a3,2041c574 <__umoddi3+0x82>
2041c572:	96c6                	add	a3,a3,a7
2041c574:	410686b3          	sub	a3,a3,a6
2041c578:	02c6f733          	remu	a4,a3,a2
2041c57c:	07c2                	slli	a5,a5,0x10
2041c57e:	83c1                	srli	a5,a5,0x10
2041c580:	02c6d6b3          	divu	a3,a3,a2
2041c584:	02d506b3          	mul	a3,a0,a3
2041c588:	01071513          	slli	a0,a4,0x10
2041c58c:	8fc9                	or	a5,a5,a0
2041c58e:	00d7f863          	bleu	a3,a5,2041c59e <__umoddi3+0xac>
2041c592:	97c6                	add	a5,a5,a7
2041c594:	0117e563          	bltu	a5,a7,2041c59e <__umoddi3+0xac>
2041c598:	00d7f363          	bleu	a3,a5,2041c59e <__umoddi3+0xac>
2041c59c:	97c6                	add	a5,a5,a7
2041c59e:	8f95                	sub	a5,a5,a3
2041c5a0:	0067d533          	srl	a0,a5,t1
2041c5a4:	4581                	li	a1,0
2041c5a6:	8082                	ret
2041c5a8:	01000337          	lui	t1,0x1000
2041c5ac:	4741                	li	a4,16
2041c5ae:	f66666e3          	bltu	a2,t1,2041c51a <__umoddi3+0x28>
2041c5b2:	4761                	li	a4,24
2041c5b4:	b79d                	j	2041c51a <__umoddi3+0x28>
2041c5b6:	e601                	bnez	a2,2041c5be <__umoddi3+0xcc>
2041c5b8:	4605                	li	a2,1
2041c5ba:	031658b3          	divu	a7,a2,a7
2041c5be:	6641                	lui	a2,0x10
2041c5c0:	08c8f363          	bleu	a2,a7,2041c646 <__umoddi3+0x154>
2041c5c4:	0ff00613          	li	a2,255
2041c5c8:	01167363          	bleu	a7,a2,2041c5ce <__umoddi3+0xdc>
2041c5cc:	4721                	li	a4,8
2041c5ce:	00e8d633          	srl	a2,a7,a4
2041c5d2:	96b2                	add	a3,a3,a2
2041c5d4:	0006ce03          	lbu	t3,0(a3)
2041c5d8:	02000313          	li	t1,32
2041c5dc:	9e3a                	add	t3,t3,a4
2041c5de:	41c30333          	sub	t1,t1,t3
2041c5e2:	06031963          	bnez	t1,2041c654 <__umoddi3+0x162>
2041c5e6:	411585b3          	sub	a1,a1,a7
2041c5ea:	0108d713          	srli	a4,a7,0x10
2041c5ee:	01089513          	slli	a0,a7,0x10
2041c5f2:	8141                	srli	a0,a0,0x10
2041c5f4:	0107d613          	srli	a2,a5,0x10
2041c5f8:	02e5f6b3          	remu	a3,a1,a4
2041c5fc:	02e5d5b3          	divu	a1,a1,a4
2041c600:	06c2                	slli	a3,a3,0x10
2041c602:	8ed1                	or	a3,a3,a2
2041c604:	02b505b3          	mul	a1,a0,a1
2041c608:	00b6f863          	bleu	a1,a3,2041c618 <__umoddi3+0x126>
2041c60c:	96c6                	add	a3,a3,a7
2041c60e:	0116e563          	bltu	a3,a7,2041c618 <__umoddi3+0x126>
2041c612:	00b6f363          	bleu	a1,a3,2041c618 <__umoddi3+0x126>
2041c616:	96c6                	add	a3,a3,a7
2041c618:	40b685b3          	sub	a1,a3,a1
2041c61c:	02e5f6b3          	remu	a3,a1,a4
2041c620:	07c2                	slli	a5,a5,0x10
2041c622:	83c1                	srli	a5,a5,0x10
2041c624:	02e5d5b3          	divu	a1,a1,a4
2041c628:	02b505b3          	mul	a1,a0,a1
2041c62c:	01069513          	slli	a0,a3,0x10
2041c630:	8fc9                	or	a5,a5,a0
2041c632:	00b7f863          	bleu	a1,a5,2041c642 <__umoddi3+0x150>
2041c636:	97c6                	add	a5,a5,a7
2041c638:	0117e563          	bltu	a5,a7,2041c642 <__umoddi3+0x150>
2041c63c:	00b7f363          	bleu	a1,a5,2041c642 <__umoddi3+0x150>
2041c640:	97c6                	add	a5,a5,a7
2041c642:	8f8d                	sub	a5,a5,a1
2041c644:	bfb1                	j	2041c5a0 <__umoddi3+0xae>
2041c646:	01000637          	lui	a2,0x1000
2041c64a:	4741                	li	a4,16
2041c64c:	f8c8e1e3          	bltu	a7,a2,2041c5ce <__umoddi3+0xdc>
2041c650:	4761                	li	a4,24
2041c652:	bfb5                	j	2041c5ce <__umoddi3+0xdc>
2041c654:	006898b3          	sll	a7,a7,t1
2041c658:	01c5d733          	srl	a4,a1,t3
2041c65c:	006517b3          	sll	a5,a0,t1
2041c660:	01c55e33          	srl	t3,a0,t3
2041c664:	0108d513          	srli	a0,a7,0x10
2041c668:	02a776b3          	remu	a3,a4,a0
2041c66c:	006595b3          	sll	a1,a1,t1
2041c670:	00be6e33          	or	t3,t3,a1
2041c674:	01089593          	slli	a1,a7,0x10
2041c678:	81c1                	srli	a1,a1,0x10
2041c67a:	010e5613          	srli	a2,t3,0x10
2041c67e:	02a75733          	divu	a4,a4,a0
2041c682:	06c2                	slli	a3,a3,0x10
2041c684:	8ed1                	or	a3,a3,a2
2041c686:	02e58733          	mul	a4,a1,a4
2041c68a:	00e6f863          	bleu	a4,a3,2041c69a <__umoddi3+0x1a8>
2041c68e:	96c6                	add	a3,a3,a7
2041c690:	0116e563          	bltu	a3,a7,2041c69a <__umoddi3+0x1a8>
2041c694:	00e6f363          	bleu	a4,a3,2041c69a <__umoddi3+0x1a8>
2041c698:	96c6                	add	a3,a3,a7
2041c69a:	40e68633          	sub	a2,a3,a4
2041c69e:	02a676b3          	remu	a3,a2,a0
2041c6a2:	0e42                	slli	t3,t3,0x10
2041c6a4:	010e5e13          	srli	t3,t3,0x10
2041c6a8:	02a65633          	divu	a2,a2,a0
2041c6ac:	06c2                	slli	a3,a3,0x10
2041c6ae:	02c58633          	mul	a2,a1,a2
2041c6b2:	01c6e5b3          	or	a1,a3,t3
2041c6b6:	00c5f863          	bleu	a2,a1,2041c6c6 <__umoddi3+0x1d4>
2041c6ba:	95c6                	add	a1,a1,a7
2041c6bc:	0115e563          	bltu	a1,a7,2041c6c6 <__umoddi3+0x1d4>
2041c6c0:	00c5f363          	bleu	a2,a1,2041c6c6 <__umoddi3+0x1d4>
2041c6c4:	95c6                	add	a1,a1,a7
2041c6c6:	8d91                	sub	a1,a1,a2
2041c6c8:	b70d                	j	2041c5ea <__umoddi3+0xf8>
2041c6ca:	ecd5eee3          	bltu	a1,a3,2041c5a6 <__umoddi3+0xb4>
2041c6ce:	6741                	lui	a4,0x10
2041c6d0:	04e6f563          	bleu	a4,a3,2041c71a <__umoddi3+0x228>
2041c6d4:	0ff00e93          	li	t4,255
2041c6d8:	00deb733          	sltu	a4,t4,a3
2041c6dc:	070e                	slli	a4,a4,0x3
2041c6de:	20422337          	lui	t1,0x20422
2041c6e2:	00e6d8b3          	srl	a7,a3,a4
2041c6e6:	74030313          	addi	t1,t1,1856 # 20422740 <__clz_tab>
2041c6ea:	989a                	add	a7,a7,t1
2041c6ec:	0008ce83          	lbu	t4,0(a7) # 1000000 <__stack_size+0xffc000>
2041c6f0:	02000e13          	li	t3,32
2041c6f4:	9eba                	add	t4,t4,a4
2041c6f6:	41de0e33          	sub	t3,t3,t4
2041c6fa:	020e1763          	bnez	t3,2041c728 <__umoddi3+0x236>
2041c6fe:	00b6e463          	bltu	a3,a1,2041c706 <__umoddi3+0x214>
2041c702:	00c56963          	bltu	a0,a2,2041c714 <__umoddi3+0x222>
2041c706:	40c507b3          	sub	a5,a0,a2
2041c70a:	8d95                	sub	a1,a1,a3
2041c70c:	00f53533          	sltu	a0,a0,a5
2041c710:	40a58833          	sub	a6,a1,a0
2041c714:	853e                	mv	a0,a5
2041c716:	85c2                	mv	a1,a6
2041c718:	b579                	j	2041c5a6 <__umoddi3+0xb4>
2041c71a:	010008b7          	lui	a7,0x1000
2041c71e:	4741                	li	a4,16
2041c720:	fb16efe3          	bltu	a3,a7,2041c6de <__umoddi3+0x1ec>
2041c724:	4761                	li	a4,24
2041c726:	bf65                	j	2041c6de <__umoddi3+0x1ec>
2041c728:	01d65733          	srl	a4,a2,t4
2041c72c:	01c696b3          	sll	a3,a3,t3
2041c730:	8ed9                	or	a3,a3,a4
2041c732:	01d557b3          	srl	a5,a0,t4
2041c736:	01d5d733          	srl	a4,a1,t4
2041c73a:	01c595b3          	sll	a1,a1,t3
2041c73e:	8fcd                	or	a5,a5,a1
2041c740:	0106d593          	srli	a1,a3,0x10
2041c744:	02b77333          	remu	t1,a4,a1
2041c748:	01069f13          	slli	t5,a3,0x10
2041c74c:	010f5f13          	srli	t5,t5,0x10
2041c750:	0107d893          	srli	a7,a5,0x10
2041c754:	01c61633          	sll	a2,a2,t3
2041c758:	01c51533          	sll	a0,a0,t3
2041c75c:	02b75733          	divu	a4,a4,a1
2041c760:	0342                	slli	t1,t1,0x10
2041c762:	011368b3          	or	a7,t1,a7
2041c766:	02ef0833          	mul	a6,t5,a4
2041c76a:	833a                	mv	t1,a4
2041c76c:	0108fc63          	bleu	a6,a7,2041c784 <__umoddi3+0x292>
2041c770:	98b6                	add	a7,a7,a3
2041c772:	fff70313          	addi	t1,a4,-1 # ffff <__stack_size+0xbfff>
2041c776:	00d8e763          	bltu	a7,a3,2041c784 <__umoddi3+0x292>
2041c77a:	0108f563          	bleu	a6,a7,2041c784 <__umoddi3+0x292>
2041c77e:	ffe70313          	addi	t1,a4,-2
2041c782:	98b6                	add	a7,a7,a3
2041c784:	410888b3          	sub	a7,a7,a6
2041c788:	02b8ffb3          	remu	t6,a7,a1
2041c78c:	02b8d8b3          	divu	a7,a7,a1
2041c790:	0fc2                	slli	t6,t6,0x10
2041c792:	031f05b3          	mul	a1,t5,a7
2041c796:	01079f13          	slli	t5,a5,0x10
2041c79a:	010f5f13          	srli	t5,t5,0x10
2041c79e:	01efef33          	or	t5,t6,t5
2041c7a2:	8746                	mv	a4,a7
2041c7a4:	00bf7c63          	bleu	a1,t5,2041c7bc <__umoddi3+0x2ca>
2041c7a8:	9f36                	add	t5,t5,a3
2041c7aa:	fff88713          	addi	a4,a7,-1 # ffffff <__stack_size+0xffbfff>
2041c7ae:	00df6763          	bltu	t5,a3,2041c7bc <__umoddi3+0x2ca>
2041c7b2:	00bf7563          	bleu	a1,t5,2041c7bc <__umoddi3+0x2ca>
2041c7b6:	ffe88713          	addi	a4,a7,-2
2041c7ba:	9f36                	add	t5,t5,a3
2041c7bc:	0342                	slli	t1,t1,0x10
2041c7be:	68c1                	lui	a7,0x10
2041c7c0:	00e36333          	or	t1,t1,a4
2041c7c4:	fff88793          	addi	a5,a7,-1 # ffff <__stack_size+0xbfff>
2041c7c8:	01065813          	srli	a6,a2,0x10
2041c7cc:	40bf0f33          	sub	t5,t5,a1
2041c7d0:	00f375b3          	and	a1,t1,a5
2041c7d4:	01035313          	srli	t1,t1,0x10
2041c7d8:	8ff1                	and	a5,a5,a2
2041c7da:	02f58733          	mul	a4,a1,a5
2041c7de:	02f307b3          	mul	a5,t1,a5
2041c7e2:	030585b3          	mul	a1,a1,a6
2041c7e6:	03030333          	mul	t1,t1,a6
2041c7ea:	95be                	add	a1,a1,a5
2041c7ec:	01075813          	srli	a6,a4,0x10
2041c7f0:	982e                	add	a6,a6,a1
2041c7f2:	00f87363          	bleu	a5,a6,2041c7f8 <__umoddi3+0x306>
2041c7f6:	9346                	add	t1,t1,a7
2041c7f8:	67c1                	lui	a5,0x10
2041c7fa:	17fd                	addi	a5,a5,-1
2041c7fc:	01085593          	srli	a1,a6,0x10
2041c800:	00f87833          	and	a6,a6,a5
2041c804:	0842                	slli	a6,a6,0x10
2041c806:	8f7d                	and	a4,a4,a5
2041c808:	959a                	add	a1,a1,t1
2041c80a:	9742                	add	a4,a4,a6
2041c80c:	00bf6663          	bltu	t5,a1,2041c818 <__umoddi3+0x326>
2041c810:	00bf1b63          	bne	t5,a1,2041c826 <__umoddi3+0x334>
2041c814:	00e57963          	bleu	a4,a0,2041c826 <__umoddi3+0x334>
2041c818:	40c70633          	sub	a2,a4,a2
2041c81c:	00c73733          	sltu	a4,a4,a2
2041c820:	8d95                	sub	a1,a1,a3
2041c822:	8d99                	sub	a1,a1,a4
2041c824:	8732                	mv	a4,a2
2041c826:	40e50733          	sub	a4,a0,a4
2041c82a:	00e53533          	sltu	a0,a0,a4
2041c82e:	40bf05b3          	sub	a1,t5,a1
2041c832:	8d89                	sub	a1,a1,a0
2041c834:	01d597b3          	sll	a5,a1,t4
2041c838:	01c75733          	srl	a4,a4,t3
2041c83c:	00e7e533          	or	a0,a5,a4
2041c840:	01c5d5b3          	srl	a1,a1,t3
2041c844:	b38d                	j	2041c5a6 <__umoddi3+0xb4>

2041c846 <__adddf3>:
2041c846:	00100837          	lui	a6,0x100
2041c84a:	187d                	addi	a6,a6,-1
2041c84c:	1101                	addi	sp,sp,-32
2041c84e:	00b878b3          	and	a7,a6,a1
2041c852:	0145d713          	srli	a4,a1,0x14
2041c856:	01d55793          	srli	a5,a0,0x1d
2041c85a:	c84a                	sw	s2,16(sp)
2041c85c:	7ff77913          	andi	s2,a4,2047
2041c860:	00389713          	slli	a4,a7,0x3
2041c864:	00d87833          	and	a6,a6,a3
2041c868:	8fd9                	or	a5,a5,a4
2041c86a:	0146d713          	srli	a4,a3,0x14
2041c86e:	080e                	slli	a6,a6,0x3
2041c870:	ca26                	sw	s1,20(sp)
2041c872:	7ff77713          	andi	a4,a4,2047
2041c876:	01f6d893          	srli	a7,a3,0x1f
2041c87a:	ce06                	sw	ra,28(sp)
2041c87c:	01d65693          	srli	a3,a2,0x1d
2041c880:	cc22                	sw	s0,24(sp)
2041c882:	c64e                	sw	s3,12(sp)
2041c884:	01f5d493          	srli	s1,a1,0x1f
2041c888:	0106e333          	or	t1,a3,a6
2041c88c:	050e                	slli	a0,a0,0x3
2041c88e:	060e                	slli	a2,a2,0x3
2041c890:	40e90833          	sub	a6,s2,a4
2041c894:	2d149a63          	bne	s1,a7,2041cb68 <__adddf3+0x322>
2041c898:	17005963          	blez	a6,2041ca0a <__adddf3+0x1c4>
2041c89c:	e76d                	bnez	a4,2041c986 <__adddf3+0x140>
2041c89e:	00c36733          	or	a4,t1,a2
2041c8a2:	e751                	bnez	a4,2041c92e <__adddf3+0xe8>
2041c8a4:	7ff00693          	li	a3,2047
2041c8a8:	8742                	mv	a4,a6
2041c8aa:	26d81163          	bne	a6,a3,2041cb0c <__adddf3+0x2c6>
2041c8ae:	00a7e6b3          	or	a3,a5,a0
2041c8b2:	24069d63          	bnez	a3,2041cb0c <__adddf3+0x2c6>
2041c8b6:	4781                	li	a5,0
2041c8b8:	4501                	li	a0,0
2041c8ba:	00879693          	slli	a3,a5,0x8
2041c8be:	0006db63          	bgez	a3,2041c8d4 <__adddf3+0x8e>
2041c8c2:	0705                	addi	a4,a4,1
2041c8c4:	7ff00693          	li	a3,2047
2041c8c8:	5ad70963          	beq	a4,a3,2041ce7a <__adddf3+0x634>
2041c8cc:	ff8006b7          	lui	a3,0xff800
2041c8d0:	16fd                	addi	a3,a3,-1
2041c8d2:	8ff5                	and	a5,a5,a3
2041c8d4:	01d79693          	slli	a3,a5,0x1d
2041c8d8:	810d                	srli	a0,a0,0x3
2041c8da:	8d55                	or	a0,a0,a3
2041c8dc:	7ff00693          	li	a3,2047
2041c8e0:	838d                	srli	a5,a5,0x3
2041c8e2:	00d71963          	bne	a4,a3,2041c8f4 <__adddf3+0xae>
2041c8e6:	8d5d                	or	a0,a0,a5
2041c8e8:	4781                	li	a5,0
2041c8ea:	c509                	beqz	a0,2041c8f4 <__adddf3+0xae>
2041c8ec:	000807b7          	lui	a5,0x80
2041c8f0:	4501                	li	a0,0
2041c8f2:	4481                	li	s1,0
2041c8f4:	001006b7          	lui	a3,0x100
2041c8f8:	16fd                	addi	a3,a3,-1
2041c8fa:	8ff5                	and	a5,a5,a3
2041c8fc:	801006b7          	lui	a3,0x80100
2041c900:	7ff77713          	andi	a4,a4,2047
2041c904:	16fd                	addi	a3,a3,-1
2041c906:	0752                	slli	a4,a4,0x14
2041c908:	8ff5                	and	a5,a5,a3
2041c90a:	8fd9                	or	a5,a5,a4
2041c90c:	80000737          	lui	a4,0x80000
2041c910:	fff74713          	not	a4,a4
2041c914:	40f2                	lw	ra,28(sp)
2041c916:	4462                	lw	s0,24(sp)
2041c918:	01f49593          	slli	a1,s1,0x1f
2041c91c:	8ff9                	and	a5,a5,a4
2041c91e:	00b7e733          	or	a4,a5,a1
2041c922:	44d2                	lw	s1,20(sp)
2041c924:	4942                	lw	s2,16(sp)
2041c926:	49b2                	lw	s3,12(sp)
2041c928:	85ba                	mv	a1,a4
2041c92a:	6105                	addi	sp,sp,32
2041c92c:	8082                	ret
2041c92e:	fff80593          	addi	a1,a6,-1 # fffff <__stack_size+0xfbfff>
2041c932:	ed9d                	bnez	a1,2041c970 <__adddf3+0x12a>
2041c934:	962a                	add	a2,a2,a0
2041c936:	00a63533          	sltu	a0,a2,a0
2041c93a:	979a                	add	a5,a5,t1
2041c93c:	97aa                	add	a5,a5,a0
2041c93e:	4705                	li	a4,1
2041c940:	8532                	mv	a0,a2
2041c942:	00879693          	slli	a3,a5,0x8
2041c946:	1c06d363          	bgez	a3,2041cb0c <__adddf3+0x2c6>
2041c94a:	0705                	addi	a4,a4,1
2041c94c:	7ff00693          	li	a3,2047
2041c950:	f6d703e3          	beq	a4,a3,2041c8b6 <__adddf3+0x70>
2041c954:	ff8006b7          	lui	a3,0xff800
2041c958:	16fd                	addi	a3,a3,-1
2041c95a:	8efd                	and	a3,a3,a5
2041c95c:	00155593          	srli	a1,a0,0x1
2041c960:	8905                	andi	a0,a0,1
2041c962:	01f69793          	slli	a5,a3,0x1f
2041c966:	8d4d                	or	a0,a0,a1
2041c968:	8d5d                	or	a0,a0,a5
2041c96a:	0016d793          	srli	a5,a3,0x1
2041c96e:	aa79                	j	2041cb0c <__adddf3+0x2c6>
2041c970:	7ff00713          	li	a4,2047
2041c974:	02e81263          	bne	a6,a4,2041c998 <__adddf3+0x152>
2041c978:	00a7e733          	or	a4,a5,a0
2041c97c:	4c070f63          	beqz	a4,2041ce5a <__adddf3+0x614>
2041c980:	7ff00713          	li	a4,2047
2041c984:	a261                	j	2041cb0c <__adddf3+0x2c6>
2041c986:	7ff00713          	li	a4,2047
2041c98a:	fee907e3          	beq	s2,a4,2041c978 <__adddf3+0x132>
2041c98e:	00800737          	lui	a4,0x800
2041c992:	00e36333          	or	t1,t1,a4
2041c996:	85c2                	mv	a1,a6
2041c998:	03800713          	li	a4,56
2041c99c:	06b74263          	blt	a4,a1,2041ca00 <__adddf3+0x1ba>
2041c9a0:	477d                	li	a4,31
2041c9a2:	02b74b63          	blt	a4,a1,2041c9d8 <__adddf3+0x192>
2041c9a6:	02000713          	li	a4,32
2041c9aa:	8f0d                	sub	a4,a4,a1
2041c9ac:	00b656b3          	srl	a3,a2,a1
2041c9b0:	00e31833          	sll	a6,t1,a4
2041c9b4:	00e61633          	sll	a2,a2,a4
2041c9b8:	00d86833          	or	a6,a6,a3
2041c9bc:	00c03633          	snez	a2,a2
2041c9c0:	00c86833          	or	a6,a6,a2
2041c9c4:	00b355b3          	srl	a1,t1,a1
2041c9c8:	982a                	add	a6,a6,a0
2041c9ca:	95be                	add	a1,a1,a5
2041c9cc:	00a837b3          	sltu	a5,a6,a0
2041c9d0:	97ae                	add	a5,a5,a1
2041c9d2:	8542                	mv	a0,a6
2041c9d4:	874a                	mv	a4,s2
2041c9d6:	b7b5                	j	2041c942 <__adddf3+0xfc>
2041c9d8:	02000713          	li	a4,32
2041c9dc:	00b35833          	srl	a6,t1,a1
2041c9e0:	4681                	li	a3,0
2041c9e2:	00e58863          	beq	a1,a4,2041c9f2 <__adddf3+0x1ac>
2041c9e6:	04000693          	li	a3,64
2041c9ea:	40b685b3          	sub	a1,a3,a1
2041c9ee:	00b316b3          	sll	a3,t1,a1
2041c9f2:	8e55                	or	a2,a2,a3
2041c9f4:	00c03633          	snez	a2,a2
2041c9f8:	00c86833          	or	a6,a6,a2
2041c9fc:	4581                	li	a1,0
2041c9fe:	b7e9                	j	2041c9c8 <__adddf3+0x182>
2041ca00:	00c36833          	or	a6,t1,a2
2041ca04:	01003833          	snez	a6,a6
2041ca08:	bfd5                	j	2041c9fc <__adddf3+0x1b6>
2041ca0a:	0c080163          	beqz	a6,2041cacc <__adddf3+0x286>
2041ca0e:	06091e63          	bnez	s2,2041ca8a <__adddf3+0x244>
2041ca12:	00a7e6b3          	or	a3,a5,a0
2041ca16:	ee89                	bnez	a3,2041ca30 <__adddf3+0x1ea>
2041ca18:	7ff00793          	li	a5,2047
2041ca1c:	00f71763          	bne	a4,a5,2041ca2a <__adddf3+0x1e4>
2041ca20:	00c36533          	or	a0,t1,a2
2041ca24:	4781                	li	a5,0
2041ca26:	e8050ae3          	beqz	a0,2041c8ba <__adddf3+0x74>
2041ca2a:	879a                	mv	a5,t1
2041ca2c:	8532                	mv	a0,a2
2041ca2e:	a8f9                	j	2041cb0c <__adddf3+0x2c6>
2041ca30:	56fd                	li	a3,-1
2041ca32:	00d81863          	bne	a6,a3,2041ca42 <__adddf3+0x1fc>
2041ca36:	9532                	add	a0,a0,a2
2041ca38:	979a                	add	a5,a5,t1
2041ca3a:	00c53633          	sltu	a2,a0,a2
2041ca3e:	97b2                	add	a5,a5,a2
2041ca40:	b709                	j	2041c942 <__adddf3+0xfc>
2041ca42:	7ff00693          	li	a3,2047
2041ca46:	fff84813          	not	a6,a6
2041ca4a:	fcd70be3          	beq	a4,a3,2041ca20 <__adddf3+0x1da>
2041ca4e:	03800693          	li	a3,56
2041ca52:	0706c963          	blt	a3,a6,2041cac4 <__adddf3+0x27e>
2041ca56:	46fd                	li	a3,31
2041ca58:	0506c363          	blt	a3,a6,2041ca9e <__adddf3+0x258>
2041ca5c:	02000593          	li	a1,32
2041ca60:	410585b3          	sub	a1,a1,a6
2041ca64:	010558b3          	srl	a7,a0,a6
2041ca68:	00b796b3          	sll	a3,a5,a1
2041ca6c:	00b51533          	sll	a0,a0,a1
2041ca70:	0116e6b3          	or	a3,a3,a7
2041ca74:	00a03533          	snez	a0,a0
2041ca78:	8d55                	or	a0,a0,a3
2041ca7a:	0107d833          	srl	a6,a5,a6
2041ca7e:	9532                	add	a0,a0,a2
2041ca80:	981a                	add	a6,a6,t1
2041ca82:	00c537b3          	sltu	a5,a0,a2
2041ca86:	97c2                	add	a5,a5,a6
2041ca88:	bd6d                	j	2041c942 <__adddf3+0xfc>
2041ca8a:	7ff00693          	li	a3,2047
2041ca8e:	f8d709e3          	beq	a4,a3,2041ca20 <__adddf3+0x1da>
2041ca92:	008006b7          	lui	a3,0x800
2041ca96:	41000833          	neg	a6,a6
2041ca9a:	8fd5                	or	a5,a5,a3
2041ca9c:	bf4d                	j	2041ca4e <__adddf3+0x208>
2041ca9e:	02000893          	li	a7,32
2041caa2:	0107d6b3          	srl	a3,a5,a6
2041caa6:	4581                	li	a1,0
2041caa8:	01180863          	beq	a6,a7,2041cab8 <__adddf3+0x272>
2041caac:	04000593          	li	a1,64
2041cab0:	41058833          	sub	a6,a1,a6
2041cab4:	010795b3          	sll	a1,a5,a6
2041cab8:	8d4d                	or	a0,a0,a1
2041caba:	00a03533          	snez	a0,a0
2041cabe:	8d55                	or	a0,a0,a3
2041cac0:	4801                	li	a6,0
2041cac2:	bf75                	j	2041ca7e <__adddf3+0x238>
2041cac4:	8d5d                	or	a0,a0,a5
2041cac6:	00a03533          	snez	a0,a0
2041caca:	bfdd                	j	2041cac0 <__adddf3+0x27a>
2041cacc:	00190713          	addi	a4,s2,1
2041cad0:	7ff77593          	andi	a1,a4,2047
2041cad4:	4685                	li	a3,1
2041cad6:	06b6c863          	blt	a3,a1,2041cb46 <__adddf3+0x300>
2041cada:	00a7e733          	or	a4,a5,a0
2041cade:	04091763          	bnez	s2,2041cb2c <__adddf3+0x2e6>
2041cae2:	36070663          	beqz	a4,2041ce4e <__adddf3+0x608>
2041cae6:	00c366b3          	or	a3,t1,a2
2041caea:	4701                	li	a4,0
2041caec:	c285                	beqz	a3,2041cb0c <__adddf3+0x2c6>
2041caee:	962a                	add	a2,a2,a0
2041caf0:	00a63533          	sltu	a0,a2,a0
2041caf4:	979a                	add	a5,a5,t1
2041caf6:	97aa                	add	a5,a5,a0
2041caf8:	00879593          	slli	a1,a5,0x8
2041cafc:	8532                	mv	a0,a2
2041cafe:	0005d763          	bgez	a1,2041cb0c <__adddf3+0x2c6>
2041cb02:	ff800737          	lui	a4,0xff800
2041cb06:	177d                	addi	a4,a4,-1
2041cb08:	8ff9                	and	a5,a5,a4
2041cb0a:	4705                	li	a4,1
2041cb0c:	00757693          	andi	a3,a0,7
2041cb10:	da0685e3          	beqz	a3,2041c8ba <__adddf3+0x74>
2041cb14:	00f57693          	andi	a3,a0,15
2041cb18:	4611                	li	a2,4
2041cb1a:	dac680e3          	beq	a3,a2,2041c8ba <__adddf3+0x74>
2041cb1e:	00450693          	addi	a3,a0,4
2041cb22:	00a6b533          	sltu	a0,a3,a0
2041cb26:	97aa                	add	a5,a5,a0
2041cb28:	8536                	mv	a0,a3
2041cb2a:	bb41                	j	2041c8ba <__adddf3+0x74>
2041cb2c:	32070463          	beqz	a4,2041ce54 <__adddf3+0x60e>
2041cb30:	00c36833          	or	a6,t1,a2
2041cb34:	e40806e3          	beqz	a6,2041c980 <__adddf3+0x13a>
2041cb38:	004007b7          	lui	a5,0x400
2041cb3c:	4501                	li	a0,0
2041cb3e:	7ff00713          	li	a4,2047
2041cb42:	4481                	li	s1,0
2041cb44:	bb9d                	j	2041c8ba <__adddf3+0x74>
2041cb46:	7ff00693          	li	a3,2047
2041cb4a:	d6d706e3          	beq	a4,a3,2041c8b6 <__adddf3+0x70>
2041cb4e:	962a                	add	a2,a2,a0
2041cb50:	00678833          	add	a6,a5,t1
2041cb54:	00a637b3          	sltu	a5,a2,a0
2041cb58:	983e                	add	a6,a6,a5
2041cb5a:	01f81513          	slli	a0,a6,0x1f
2041cb5e:	8205                	srli	a2,a2,0x1
2041cb60:	8d51                	or	a0,a0,a2
2041cb62:	00185793          	srli	a5,a6,0x1
2041cb66:	b75d                	j	2041cb0c <__adddf3+0x2c6>
2041cb68:	0d005863          	blez	a6,2041cc38 <__adddf3+0x3f2>
2041cb6c:	e359                	bnez	a4,2041cbf2 <__adddf3+0x3ac>
2041cb6e:	00c36733          	or	a4,t1,a2
2041cb72:	d20709e3          	beqz	a4,2041c8a4 <__adddf3+0x5e>
2041cb76:	fff80693          	addi	a3,a6,-1
2041cb7a:	e68d                	bnez	a3,2041cba4 <__adddf3+0x35e>
2041cb7c:	40c50633          	sub	a2,a0,a2
2041cb80:	00c53533          	sltu	a0,a0,a2
2041cb84:	406787b3          	sub	a5,a5,t1
2041cb88:	8f89                	sub	a5,a5,a0
2041cb8a:	4705                	li	a4,1
2041cb8c:	8532                	mv	a0,a2
2041cb8e:	00879593          	slli	a1,a5,0x8
2041cb92:	f605dde3          	bgez	a1,2041cb0c <__adddf3+0x2c6>
2041cb96:	00800437          	lui	s0,0x800
2041cb9a:	147d                	addi	s0,s0,-1
2041cb9c:	8c7d                	and	s0,s0,a5
2041cb9e:	89aa                	mv	s3,a0
2041cba0:	893a                	mv	s2,a4
2041cba2:	aafd                	j	2041cda0 <__adddf3+0x55a>
2041cba4:	7ff00713          	li	a4,2047
2041cba8:	dce808e3          	beq	a6,a4,2041c978 <__adddf3+0x132>
2041cbac:	03800713          	li	a4,56
2041cbb0:	06d74f63          	blt	a4,a3,2041cc2e <__adddf3+0x3e8>
2041cbb4:	477d                	li	a4,31
2041cbb6:	04d74863          	blt	a4,a3,2041cc06 <__adddf3+0x3c0>
2041cbba:	02000713          	li	a4,32
2041cbbe:	8f15                	sub	a4,a4,a3
2041cbc0:	00d655b3          	srl	a1,a2,a3
2041cbc4:	00e31833          	sll	a6,t1,a4
2041cbc8:	00e61633          	sll	a2,a2,a4
2041cbcc:	00b86833          	or	a6,a6,a1
2041cbd0:	00c03633          	snez	a2,a2
2041cbd4:	00c86833          	or	a6,a6,a2
2041cbd8:	00d356b3          	srl	a3,t1,a3
2041cbdc:	41050833          	sub	a6,a0,a6
2041cbe0:	40d786b3          	sub	a3,a5,a3
2041cbe4:	010537b3          	sltu	a5,a0,a6
2041cbe8:	40f687b3          	sub	a5,a3,a5
2041cbec:	8542                	mv	a0,a6
2041cbee:	874a                	mv	a4,s2
2041cbf0:	bf79                	j	2041cb8e <__adddf3+0x348>
2041cbf2:	7ff00713          	li	a4,2047
2041cbf6:	d8e901e3          	beq	s2,a4,2041c978 <__adddf3+0x132>
2041cbfa:	00800737          	lui	a4,0x800
2041cbfe:	00e36333          	or	t1,t1,a4
2041cc02:	86c2                	mv	a3,a6
2041cc04:	b765                	j	2041cbac <__adddf3+0x366>
2041cc06:	02000713          	li	a4,32
2041cc0a:	00d35833          	srl	a6,t1,a3
2041cc0e:	4401                	li	s0,0
2041cc10:	00e68863          	beq	a3,a4,2041cc20 <__adddf3+0x3da>
2041cc14:	04000413          	li	s0,64
2041cc18:	40d406b3          	sub	a3,s0,a3
2041cc1c:	00d31433          	sll	s0,t1,a3
2041cc20:	8e41                	or	a2,a2,s0
2041cc22:	00c03633          	snez	a2,a2
2041cc26:	00c86833          	or	a6,a6,a2
2041cc2a:	4681                	li	a3,0
2041cc2c:	bf45                	j	2041cbdc <__adddf3+0x396>
2041cc2e:	00c36833          	or	a6,t1,a2
2041cc32:	01003833          	snez	a6,a6
2041cc36:	bfd5                	j	2041cc2a <__adddf3+0x3e4>
2041cc38:	0c080663          	beqz	a6,2041cd04 <__adddf3+0x4be>
2041cc3c:	08091363          	bnez	s2,2041ccc2 <__adddf3+0x47c>
2041cc40:	00a7e6b3          	or	a3,a5,a0
2041cc44:	ee81                	bnez	a3,2041cc5c <__adddf3+0x416>
2041cc46:	7ff00793          	li	a5,2047
2041cc4a:	00f71663          	bne	a4,a5,2041cc56 <__adddf3+0x410>
2041cc4e:	00c36533          	or	a0,t1,a2
2041cc52:	20050963          	beqz	a0,2041ce64 <__adddf3+0x61e>
2041cc56:	879a                	mv	a5,t1
2041cc58:	8532                	mv	a0,a2
2041cc5a:	a8c1                	j	2041cd2a <__adddf3+0x4e4>
2041cc5c:	56fd                	li	a3,-1
2041cc5e:	00d81b63          	bne	a6,a3,2041cc74 <__adddf3+0x42e>
2041cc62:	40a60533          	sub	a0,a2,a0
2041cc66:	40f307b3          	sub	a5,t1,a5
2041cc6a:	00a63633          	sltu	a2,a2,a0
2041cc6e:	8f91                	sub	a5,a5,a2
2041cc70:	84c6                	mv	s1,a7
2041cc72:	bf31                	j	2041cb8e <__adddf3+0x348>
2041cc74:	7ff00693          	li	a3,2047
2041cc78:	fff84813          	not	a6,a6
2041cc7c:	fcd709e3          	beq	a4,a3,2041cc4e <__adddf3+0x408>
2041cc80:	03800693          	li	a3,56
2041cc84:	0706cc63          	blt	a3,a6,2041ccfc <__adddf3+0x4b6>
2041cc88:	46fd                	li	a3,31
2041cc8a:	0506c663          	blt	a3,a6,2041ccd6 <__adddf3+0x490>
2041cc8e:	02000593          	li	a1,32
2041cc92:	410585b3          	sub	a1,a1,a6
2041cc96:	01055e33          	srl	t3,a0,a6
2041cc9a:	00b796b3          	sll	a3,a5,a1
2041cc9e:	00b51533          	sll	a0,a0,a1
2041cca2:	01c6e6b3          	or	a3,a3,t3
2041cca6:	00a03533          	snez	a0,a0
2041ccaa:	8d55                	or	a0,a0,a3
2041ccac:	0107d833          	srl	a6,a5,a6
2041ccb0:	40a60533          	sub	a0,a2,a0
2041ccb4:	41030833          	sub	a6,t1,a6
2041ccb8:	00a637b3          	sltu	a5,a2,a0
2041ccbc:	40f807b3          	sub	a5,a6,a5
2041ccc0:	bf45                	j	2041cc70 <__adddf3+0x42a>
2041ccc2:	7ff00693          	li	a3,2047
2041ccc6:	f8d704e3          	beq	a4,a3,2041cc4e <__adddf3+0x408>
2041ccca:	008006b7          	lui	a3,0x800
2041ccce:	41000833          	neg	a6,a6
2041ccd2:	8fd5                	or	a5,a5,a3
2041ccd4:	b775                	j	2041cc80 <__adddf3+0x43a>
2041ccd6:	02000e13          	li	t3,32
2041ccda:	0107d6b3          	srl	a3,a5,a6
2041ccde:	4581                	li	a1,0
2041cce0:	01c80863          	beq	a6,t3,2041ccf0 <__adddf3+0x4aa>
2041cce4:	04000593          	li	a1,64
2041cce8:	41058833          	sub	a6,a1,a6
2041ccec:	010795b3          	sll	a1,a5,a6
2041ccf0:	8d4d                	or	a0,a0,a1
2041ccf2:	00a03533          	snez	a0,a0
2041ccf6:	8d55                	or	a0,a0,a3
2041ccf8:	4801                	li	a6,0
2041ccfa:	bf5d                	j	2041ccb0 <__adddf3+0x46a>
2041ccfc:	8d5d                	or	a0,a0,a5
2041ccfe:	00a03533          	snez	a0,a0
2041cd02:	bfdd                	j	2041ccf8 <__adddf3+0x4b2>
2041cd04:	00190713          	addi	a4,s2,1
2041cd08:	7ff77713          	andi	a4,a4,2047
2041cd0c:	4685                	li	a3,1
2041cd0e:	06e6c563          	blt	a3,a4,2041cd78 <__adddf3+0x532>
2041cd12:	00a7e6b3          	or	a3,a5,a0
2041cd16:	00c36733          	or	a4,t1,a2
2041cd1a:	04091563          	bnez	s2,2041cd64 <__adddf3+0x51e>
2041cd1e:	ea81                	bnez	a3,2041cd2e <__adddf3+0x4e8>
2041cd20:	14070563          	beqz	a4,2041ce6a <__adddf3+0x624>
2041cd24:	879a                	mv	a5,t1
2041cd26:	8532                	mv	a0,a2
2041cd28:	4701                	li	a4,0
2041cd2a:	84c6                	mv	s1,a7
2041cd2c:	b3c5                	j	2041cb0c <__adddf3+0x2c6>
2041cd2e:	cb0d                	beqz	a4,2041cd60 <__adddf3+0x51a>
2041cd30:	40c506b3          	sub	a3,a0,a2
2041cd34:	00d535b3          	sltu	a1,a0,a3
2041cd38:	40678733          	sub	a4,a5,t1
2041cd3c:	8f0d                	sub	a4,a4,a1
2041cd3e:	00871593          	slli	a1,a4,0x8
2041cd42:	0005da63          	bgez	a1,2041cd56 <__adddf3+0x510>
2041cd46:	40a60533          	sub	a0,a2,a0
2041cd4a:	40f307b3          	sub	a5,t1,a5
2041cd4e:	00a63633          	sltu	a2,a2,a0
2041cd52:	8f91                	sub	a5,a5,a2
2041cd54:	bfd1                	j	2041cd28 <__adddf3+0x4e2>
2041cd56:	00e6e533          	or	a0,a3,a4
2041cd5a:	c155                	beqz	a0,2041cdfe <__adddf3+0x5b8>
2041cd5c:	87ba                	mv	a5,a4
2041cd5e:	8536                	mv	a0,a3
2041cd60:	4701                	li	a4,0
2041cd62:	b36d                	j	2041cb0c <__adddf3+0x2c6>
2041cd64:	e699                	bnez	a3,2041cd72 <__adddf3+0x52c>
2041cd66:	10070663          	beqz	a4,2041ce72 <__adddf3+0x62c>
2041cd6a:	879a                	mv	a5,t1
2041cd6c:	8532                	mv	a0,a2
2041cd6e:	84c6                	mv	s1,a7
2041cd70:	b901                	j	2041c980 <__adddf3+0x13a>
2041cd72:	c00707e3          	beqz	a4,2041c980 <__adddf3+0x13a>
2041cd76:	b3c9                	j	2041cb38 <__adddf3+0x2f2>
2041cd78:	40c509b3          	sub	s3,a0,a2
2041cd7c:	40678433          	sub	s0,a5,t1
2041cd80:	01353833          	sltu	a6,a0,s3
2041cd84:	41040433          	sub	s0,s0,a6
2041cd88:	00841693          	slli	a3,s0,0x8
2041cd8c:	0606d663          	bgez	a3,2041cdf8 <__adddf3+0x5b2>
2041cd90:	40a609b3          	sub	s3,a2,a0
2041cd94:	40f30433          	sub	s0,t1,a5
2041cd98:	013637b3          	sltu	a5,a2,s3
2041cd9c:	8c1d                	sub	s0,s0,a5
2041cd9e:	84c6                	mv	s1,a7
2041cda0:	c02d                	beqz	s0,2041ce02 <__adddf3+0x5bc>
2041cda2:	8522                	mv	a0,s0
2041cda4:	77f020ef          	jal	ra,2041fd22 <__clzsi2>
2041cda8:	ff850713          	addi	a4,a0,-8
2041cdac:	47fd                	li	a5,31
2041cdae:	06e7c063          	blt	a5,a4,2041ce0e <__adddf3+0x5c8>
2041cdb2:	02000793          	li	a5,32
2041cdb6:	8f99                	sub	a5,a5,a4
2041cdb8:	00e41433          	sll	s0,s0,a4
2041cdbc:	00f9d7b3          	srl	a5,s3,a5
2041cdc0:	8c5d                	or	s0,s0,a5
2041cdc2:	00e99533          	sll	a0,s3,a4
2041cdc6:	07274d63          	blt	a4,s2,2041ce40 <__adddf3+0x5fa>
2041cdca:	41270733          	sub	a4,a4,s2
2041cdce:	00170793          	addi	a5,a4,1 # 800001 <__stack_size+0x7fc001>
2041cdd2:	46fd                	li	a3,31
2041cdd4:	04f6c363          	blt	a3,a5,2041ce1a <__adddf3+0x5d4>
2041cdd8:	02000713          	li	a4,32
2041cddc:	8f1d                	sub	a4,a4,a5
2041cdde:	00f55633          	srl	a2,a0,a5
2041cde2:	00e416b3          	sll	a3,s0,a4
2041cde6:	00e51533          	sll	a0,a0,a4
2041cdea:	8ed1                	or	a3,a3,a2
2041cdec:	00a03533          	snez	a0,a0
2041cdf0:	8d55                	or	a0,a0,a3
2041cdf2:	00f457b3          	srl	a5,s0,a5
2041cdf6:	b7ad                	j	2041cd60 <__adddf3+0x51a>
2041cdf8:	0089e533          	or	a0,s3,s0
2041cdfc:	f155                	bnez	a0,2041cda0 <__adddf3+0x55a>
2041cdfe:	4781                	li	a5,0
2041ce00:	a0bd                	j	2041ce6e <__adddf3+0x628>
2041ce02:	854e                	mv	a0,s3
2041ce04:	71f020ef          	jal	ra,2041fd22 <__clzsi2>
2041ce08:	02050513          	addi	a0,a0,32
2041ce0c:	bf71                	j	2041cda8 <__adddf3+0x562>
2041ce0e:	fd850413          	addi	s0,a0,-40
2041ce12:	00899433          	sll	s0,s3,s0
2041ce16:	4501                	li	a0,0
2041ce18:	b77d                	j	2041cdc6 <__adddf3+0x580>
2041ce1a:	1705                	addi	a4,a4,-31
2041ce1c:	02000613          	li	a2,32
2041ce20:	00e45733          	srl	a4,s0,a4
2041ce24:	4681                	li	a3,0
2041ce26:	00c78763          	beq	a5,a2,2041ce34 <__adddf3+0x5ee>
2041ce2a:	04000693          	li	a3,64
2041ce2e:	8e9d                	sub	a3,a3,a5
2041ce30:	00d416b3          	sll	a3,s0,a3
2041ce34:	8d55                	or	a0,a0,a3
2041ce36:	00a03533          	snez	a0,a0
2041ce3a:	8d59                	or	a0,a0,a4
2041ce3c:	4781                	li	a5,0
2041ce3e:	b70d                	j	2041cd60 <__adddf3+0x51a>
2041ce40:	ff8007b7          	lui	a5,0xff800
2041ce44:	17fd                	addi	a5,a5,-1
2041ce46:	40e90733          	sub	a4,s2,a4
2041ce4a:	8fe1                	and	a5,a5,s0
2041ce4c:	b1c1                	j	2041cb0c <__adddf3+0x2c6>
2041ce4e:	879a                	mv	a5,t1
2041ce50:	8532                	mv	a0,a2
2041ce52:	b739                	j	2041cd60 <__adddf3+0x51a>
2041ce54:	879a                	mv	a5,t1
2041ce56:	8532                	mv	a0,a2
2041ce58:	b625                	j	2041c980 <__adddf3+0x13a>
2041ce5a:	4781                	li	a5,0
2041ce5c:	4501                	li	a0,0
2041ce5e:	7ff00713          	li	a4,2047
2041ce62:	bca1                	j	2041c8ba <__adddf3+0x74>
2041ce64:	4781                	li	a5,0
2041ce66:	84c6                	mv	s1,a7
2041ce68:	bc89                	j	2041c8ba <__adddf3+0x74>
2041ce6a:	4781                	li	a5,0
2041ce6c:	4501                	li	a0,0
2041ce6e:	4701                	li	a4,0
2041ce70:	b9c9                	j	2041cb42 <__adddf3+0x2fc>
2041ce72:	4501                	li	a0,0
2041ce74:	004007b7          	lui	a5,0x400
2041ce78:	b1d9                	j	2041cb3e <__adddf3+0x2f8>
2041ce7a:	4781                	li	a5,0
2041ce7c:	4501                	li	a0,0
2041ce7e:	bc99                	j	2041c8d4 <__adddf3+0x8e>

2041ce80 <__divdf3>:
2041ce80:	7179                	addi	sp,sp,-48
2041ce82:	d422                	sw	s0,40(sp)
2041ce84:	d226                	sw	s1,36(sp)
2041ce86:	c85a                	sw	s6,16(sp)
2041ce88:	842a                	mv	s0,a0
2041ce8a:	8b2a                	mv	s6,a0
2041ce8c:	001004b7          	lui	s1,0x100
2041ce90:	0145d513          	srli	a0,a1,0x14
2041ce94:	d04a                	sw	s2,32(sp)
2041ce96:	ce4e                	sw	s3,28(sp)
2041ce98:	c65e                	sw	s7,12(sp)
2041ce9a:	14fd                	addi	s1,s1,-1
2041ce9c:	d606                	sw	ra,44(sp)
2041ce9e:	cc52                	sw	s4,24(sp)
2041cea0:	ca56                	sw	s5,20(sp)
2041cea2:	7ff57513          	andi	a0,a0,2047
2041cea6:	8bb2                	mv	s7,a2
2041cea8:	89b6                	mv	s3,a3
2041ceaa:	8ced                	and	s1,s1,a1
2041ceac:	01f5d913          	srli	s2,a1,0x1f
2041ceb0:	c151                	beqz	a0,2041cf34 <__divdf3+0xb4>
2041ceb2:	7ff00793          	li	a5,2047
2041ceb6:	0cf50a63          	beq	a0,a5,2041cf8a <__divdf3+0x10a>
2041ceba:	048e                	slli	s1,s1,0x3
2041cebc:	008006b7          	lui	a3,0x800
2041cec0:	8cd5                	or	s1,s1,a3
2041cec2:	01db5a93          	srli	s5,s6,0x1d
2041cec6:	009aeab3          	or	s5,s5,s1
2041ceca:	003b1413          	slli	s0,s6,0x3
2041cece:	c0150a13          	addi	s4,a0,-1023
2041ced2:	4b01                	li	s6,0
2041ced4:	0149d513          	srli	a0,s3,0x14
2041ced8:	001004b7          	lui	s1,0x100
2041cedc:	14fd                	addi	s1,s1,-1
2041cede:	7ff57513          	andi	a0,a0,2047
2041cee2:	0134f4b3          	and	s1,s1,s3
2041cee6:	8fde                	mv	t6,s7
2041cee8:	01f9d993          	srli	s3,s3,0x1f
2041ceec:	c169                	beqz	a0,2041cfae <__divdf3+0x12e>
2041ceee:	7ff00793          	li	a5,2047
2041cef2:	10f50663          	beq	a0,a5,2041cffe <__divdf3+0x17e>
2041cef6:	008007b7          	lui	a5,0x800
2041cefa:	048e                	slli	s1,s1,0x3
2041cefc:	8cdd                	or	s1,s1,a5
2041cefe:	01dbd793          	srli	a5,s7,0x1d
2041cf02:	8fc5                	or	a5,a5,s1
2041cf04:	003b9f93          	slli	t6,s7,0x3
2041cf08:	c0150513          	addi	a0,a0,-1023
2041cf0c:	4701                	li	a4,0
2041cf0e:	002b1693          	slli	a3,s6,0x2
2041cf12:	8ed9                	or	a3,a3,a4
2041cf14:	16fd                	addi	a3,a3,-1
2041cf16:	45b9                	li	a1,14
2041cf18:	01394633          	xor	a2,s2,s3
2041cf1c:	40aa0533          	sub	a0,s4,a0
2041cf20:	10d5e063          	bltu	a1,a3,2041d020 <__divdf3+0x1a0>
2041cf24:	204225b7          	lui	a1,0x20422
2041cf28:	068a                	slli	a3,a3,0x2
2041cf2a:	68c58593          	addi	a1,a1,1676 # 2042268c <zeroes.4346+0x10>
2041cf2e:	96ae                	add	a3,a3,a1
2041cf30:	4294                	lw	a3,0(a3)
2041cf32:	8682                	jr	a3
2041cf34:	0164eab3          	or	s5,s1,s6
2041cf38:	060a8263          	beqz	s5,2041cf9c <__divdf3+0x11c>
2041cf3c:	c89d                	beqz	s1,2041cf72 <__divdf3+0xf2>
2041cf3e:	8526                	mv	a0,s1
2041cf40:	5e3020ef          	jal	ra,2041fd22 <__clzsi2>
2041cf44:	ff550793          	addi	a5,a0,-11
2041cf48:	4771                	li	a4,28
2041cf4a:	02f74a63          	blt	a4,a5,2041cf7e <__divdf3+0xfe>
2041cf4e:	4af5                	li	s5,29
2041cf50:	ff850413          	addi	s0,a0,-8
2041cf54:	40fa8ab3          	sub	s5,s5,a5
2041cf58:	008494b3          	sll	s1,s1,s0
2041cf5c:	015b5ab3          	srl	s5,s6,s5
2041cf60:	009aeab3          	or	s5,s5,s1
2041cf64:	008b1433          	sll	s0,s6,s0
2041cf68:	c0d00a13          	li	s4,-1011
2041cf6c:	40aa0a33          	sub	s4,s4,a0
2041cf70:	b78d                	j	2041ced2 <__divdf3+0x52>
2041cf72:	855a                	mv	a0,s6
2041cf74:	5af020ef          	jal	ra,2041fd22 <__clzsi2>
2041cf78:	02050513          	addi	a0,a0,32
2041cf7c:	b7e1                	j	2041cf44 <__divdf3+0xc4>
2041cf7e:	fd850493          	addi	s1,a0,-40
2041cf82:	009b1ab3          	sll	s5,s6,s1
2041cf86:	4401                	li	s0,0
2041cf88:	b7c5                	j	2041cf68 <__divdf3+0xe8>
2041cf8a:	0164eab3          	or	s5,s1,s6
2041cf8e:	000a8b63          	beqz	s5,2041cfa4 <__divdf3+0x124>
2041cf92:	8aa6                	mv	s5,s1
2041cf94:	7ff00a13          	li	s4,2047
2041cf98:	4b0d                	li	s6,3
2041cf9a:	bf2d                	j	2041ced4 <__divdf3+0x54>
2041cf9c:	4401                	li	s0,0
2041cf9e:	4a01                	li	s4,0
2041cfa0:	4b05                	li	s6,1
2041cfa2:	bf0d                	j	2041ced4 <__divdf3+0x54>
2041cfa4:	4401                	li	s0,0
2041cfa6:	7ff00a13          	li	s4,2047
2041cfaa:	4b09                	li	s6,2
2041cfac:	b725                	j	2041ced4 <__divdf3+0x54>
2041cfae:	0174e7b3          	or	a5,s1,s7
2041cfb2:	cfb1                	beqz	a5,2041d00e <__divdf3+0x18e>
2041cfb4:	c88d                	beqz	s1,2041cfe6 <__divdf3+0x166>
2041cfb6:	8526                	mv	a0,s1
2041cfb8:	56b020ef          	jal	ra,2041fd22 <__clzsi2>
2041cfbc:	ff550713          	addi	a4,a0,-11
2041cfc0:	47f1                	li	a5,28
2041cfc2:	02e7c863          	blt	a5,a4,2041cff2 <__divdf3+0x172>
2041cfc6:	47f5                	li	a5,29
2041cfc8:	ff850f93          	addi	t6,a0,-8
2041cfcc:	8f99                	sub	a5,a5,a4
2041cfce:	01f494b3          	sll	s1,s1,t6
2041cfd2:	00fbd7b3          	srl	a5,s7,a5
2041cfd6:	8fc5                	or	a5,a5,s1
2041cfd8:	01fb9fb3          	sll	t6,s7,t6
2041cfdc:	c0d00613          	li	a2,-1011
2041cfe0:	40a60533          	sub	a0,a2,a0
2041cfe4:	b725                	j	2041cf0c <__divdf3+0x8c>
2041cfe6:	855e                	mv	a0,s7
2041cfe8:	53b020ef          	jal	ra,2041fd22 <__clzsi2>
2041cfec:	02050513          	addi	a0,a0,32
2041cff0:	b7f1                	j	2041cfbc <__divdf3+0x13c>
2041cff2:	fd850793          	addi	a5,a0,-40
2041cff6:	00fb97b3          	sll	a5,s7,a5
2041cffa:	4f81                	li	t6,0
2041cffc:	b7c5                	j	2041cfdc <__divdf3+0x15c>
2041cffe:	0174e7b3          	or	a5,s1,s7
2041d002:	cb91                	beqz	a5,2041d016 <__divdf3+0x196>
2041d004:	87a6                	mv	a5,s1
2041d006:	7ff00513          	li	a0,2047
2041d00a:	470d                	li	a4,3
2041d00c:	b709                	j	2041cf0e <__divdf3+0x8e>
2041d00e:	4f81                	li	t6,0
2041d010:	4501                	li	a0,0
2041d012:	4705                	li	a4,1
2041d014:	bded                	j	2041cf0e <__divdf3+0x8e>
2041d016:	4f81                	li	t6,0
2041d018:	7ff00513          	li	a0,2047
2041d01c:	4709                	li	a4,2
2041d01e:	bdc5                	j	2041cf0e <__divdf3+0x8e>
2041d020:	0157e663          	bltu	a5,s5,2041d02c <__divdf3+0x1ac>
2041d024:	2afa9663          	bne	s5,a5,2041d2d0 <__divdf3+0x450>
2041d028:	2bf46463          	bltu	s0,t6,2041d2d0 <__divdf3+0x450>
2041d02c:	01fa9593          	slli	a1,s5,0x1f
2041d030:	00145693          	srli	a3,s0,0x1
2041d034:	01f41713          	slli	a4,s0,0x1f
2041d038:	001ada93          	srli	s5,s5,0x1
2041d03c:	00d5e433          	or	s0,a1,a3
2041d040:	07a2                	slli	a5,a5,0x8
2041d042:	018fd813          	srli	a6,t6,0x18
2041d046:	00f86833          	or	a6,a6,a5
2041d04a:	01085e93          	srli	t4,a6,0x10
2041d04e:	03dad5b3          	divu	a1,s5,t4
2041d052:	01081e13          	slli	t3,a6,0x10
2041d056:	010e5e13          	srli	t3,t3,0x10
2041d05a:	01045693          	srli	a3,s0,0x10
2041d05e:	008f9893          	slli	a7,t6,0x8
2041d062:	03daf4b3          	remu	s1,s5,t4
2041d066:	8fae                	mv	t6,a1
2041d068:	02be07b3          	mul	a5,t3,a1
2041d06c:	04c2                	slli	s1,s1,0x10
2041d06e:	8ec5                	or	a3,a3,s1
2041d070:	00f6fc63          	bleu	a5,a3,2041d088 <__divdf3+0x208>
2041d074:	96c2                	add	a3,a3,a6
2041d076:	fff58f93          	addi	t6,a1,-1
2041d07a:	0106e763          	bltu	a3,a6,2041d088 <__divdf3+0x208>
2041d07e:	00f6f563          	bleu	a5,a3,2041d088 <__divdf3+0x208>
2041d082:	ffe58f93          	addi	t6,a1,-2
2041d086:	96c2                	add	a3,a3,a6
2041d088:	8e9d                	sub	a3,a3,a5
2041d08a:	03d6d333          	divu	t1,a3,t4
2041d08e:	0442                	slli	s0,s0,0x10
2041d090:	8041                	srli	s0,s0,0x10
2041d092:	03d6f6b3          	remu	a3,a3,t4
2041d096:	879a                	mv	a5,t1
2041d098:	026e05b3          	mul	a1,t3,t1
2041d09c:	06c2                	slli	a3,a3,0x10
2041d09e:	8ec1                	or	a3,a3,s0
2041d0a0:	00b6fc63          	bleu	a1,a3,2041d0b8 <__divdf3+0x238>
2041d0a4:	96c2                	add	a3,a3,a6
2041d0a6:	fff30793          	addi	a5,t1,-1
2041d0aa:	0106e763          	bltu	a3,a6,2041d0b8 <__divdf3+0x238>
2041d0ae:	00b6f563          	bleu	a1,a3,2041d0b8 <__divdf3+0x238>
2041d0b2:	ffe30793          	addi	a5,t1,-2
2041d0b6:	96c2                	add	a3,a3,a6
2041d0b8:	40b68433          	sub	s0,a3,a1
2041d0bc:	0fc2                	slli	t6,t6,0x10
2041d0be:	65c1                	lui	a1,0x10
2041d0c0:	00ffefb3          	or	t6,t6,a5
2041d0c4:	fff58313          	addi	t1,a1,-1 # ffff <__stack_size+0xbfff>
2041d0c8:	010fd693          	srli	a3,t6,0x10
2041d0cc:	006ff7b3          	and	a5,t6,t1
2041d0d0:	0108df13          	srli	t5,a7,0x10
2041d0d4:	0068f333          	and	t1,a7,t1
2041d0d8:	026783b3          	mul	t2,a5,t1
2041d0dc:	026684b3          	mul	s1,a3,t1
2041d0e0:	02ff07b3          	mul	a5,t5,a5
2041d0e4:	03e682b3          	mul	t0,a3,t5
2041d0e8:	009786b3          	add	a3,a5,s1
2041d0ec:	0103d793          	srli	a5,t2,0x10
2041d0f0:	97b6                	add	a5,a5,a3
2041d0f2:	0097f363          	bleu	s1,a5,2041d0f8 <__divdf3+0x278>
2041d0f6:	92ae                	add	t0,t0,a1
2041d0f8:	0107d693          	srli	a3,a5,0x10
2041d0fc:	9696                	add	a3,a3,t0
2041d0fe:	62c1                	lui	t0,0x10
2041d100:	12fd                	addi	t0,t0,-1
2041d102:	0057f5b3          	and	a1,a5,t0
2041d106:	05c2                	slli	a1,a1,0x10
2041d108:	0053f3b3          	and	t2,t2,t0
2041d10c:	959e                	add	a1,a1,t2
2041d10e:	00d46763          	bltu	s0,a3,2041d11c <__divdf3+0x29c>
2041d112:	87fe                	mv	a5,t6
2041d114:	02d41e63          	bne	s0,a3,2041d150 <__divdf3+0x2d0>
2041d118:	02b77c63          	bleu	a1,a4,2041d150 <__divdf3+0x2d0>
2041d11c:	9746                	add	a4,a4,a7
2041d11e:	011732b3          	sltu	t0,a4,a7
2041d122:	92c2                	add	t0,t0,a6
2041d124:	9416                	add	s0,s0,t0
2041d126:	ffff8793          	addi	a5,t6,-1
2041d12a:	00886663          	bltu	a6,s0,2041d136 <__divdf3+0x2b6>
2041d12e:	02881163          	bne	a6,s0,2041d150 <__divdf3+0x2d0>
2041d132:	01176f63          	bltu	a4,a7,2041d150 <__divdf3+0x2d0>
2041d136:	00d46663          	bltu	s0,a3,2041d142 <__divdf3+0x2c2>
2041d13a:	00869b63          	bne	a3,s0,2041d150 <__divdf3+0x2d0>
2041d13e:	00b77963          	bleu	a1,a4,2041d150 <__divdf3+0x2d0>
2041d142:	9746                	add	a4,a4,a7
2041d144:	ffef8793          	addi	a5,t6,-2
2041d148:	01173fb3          	sltu	t6,a4,a7
2041d14c:	9fc2                	add	t6,t6,a6
2041d14e:	947e                	add	s0,s0,t6
2041d150:	40b705b3          	sub	a1,a4,a1
2041d154:	8c15                	sub	s0,s0,a3
2041d156:	00b73733          	sltu	a4,a4,a1
2041d15a:	8c19                	sub	s0,s0,a4
2041d15c:	5ffd                	li	t6,-1
2041d15e:	0e880663          	beq	a6,s0,2041d24a <__divdf3+0x3ca>
2041d162:	03d452b3          	divu	t0,s0,t4
2041d166:	0105d693          	srli	a3,a1,0x10
2041d16a:	03d47433          	remu	s0,s0,t4
2041d16e:	8716                	mv	a4,t0
2041d170:	025e0fb3          	mul	t6,t3,t0
2041d174:	0442                	slli	s0,s0,0x10
2041d176:	8c55                	or	s0,s0,a3
2041d178:	01f47c63          	bleu	t6,s0,2041d190 <__divdf3+0x310>
2041d17c:	9442                	add	s0,s0,a6
2041d17e:	fff28713          	addi	a4,t0,-1 # ffff <__stack_size+0xbfff>
2041d182:	01046763          	bltu	s0,a6,2041d190 <__divdf3+0x310>
2041d186:	01f47563          	bleu	t6,s0,2041d190 <__divdf3+0x310>
2041d18a:	ffe28713          	addi	a4,t0,-2
2041d18e:	9442                	add	s0,s0,a6
2041d190:	41f40433          	sub	s0,s0,t6
2041d194:	03d456b3          	divu	a3,s0,t4
2041d198:	05c2                	slli	a1,a1,0x10
2041d19a:	81c1                	srli	a1,a1,0x10
2041d19c:	03d47433          	remu	s0,s0,t4
2041d1a0:	02de0e33          	mul	t3,t3,a3
2041d1a4:	0442                	slli	s0,s0,0x10
2041d1a6:	8c4d                	or	s0,s0,a1
2041d1a8:	85b6                	mv	a1,a3
2041d1aa:	01c47c63          	bleu	t3,s0,2041d1c2 <__divdf3+0x342>
2041d1ae:	9442                	add	s0,s0,a6
2041d1b0:	fff68593          	addi	a1,a3,-1 # 7fffff <__stack_size+0x7fbfff>
2041d1b4:	01046763          	bltu	s0,a6,2041d1c2 <__divdf3+0x342>
2041d1b8:	01c47563          	bleu	t3,s0,2041d1c2 <__divdf3+0x342>
2041d1bc:	ffe68593          	addi	a1,a3,-2
2041d1c0:	9442                	add	s0,s0,a6
2041d1c2:	0742                	slli	a4,a4,0x10
2041d1c4:	8dd9                	or	a1,a1,a4
2041d1c6:	01059713          	slli	a4,a1,0x10
2041d1ca:	8341                	srli	a4,a4,0x10
2041d1cc:	41c40433          	sub	s0,s0,t3
2041d1d0:	0105de13          	srli	t3,a1,0x10
2041d1d4:	02670eb3          	mul	t4,a4,t1
2041d1d8:	026e0333          	mul	t1,t3,t1
2041d1dc:	03cf0e33          	mul	t3,t5,t3
2041d1e0:	02ef0f33          	mul	t5,t5,a4
2041d1e4:	010ed713          	srli	a4,t4,0x10
2041d1e8:	9f1a                	add	t5,t5,t1
2041d1ea:	977a                	add	a4,a4,t5
2041d1ec:	00677463          	bleu	t1,a4,2041d1f4 <__divdf3+0x374>
2041d1f0:	66c1                	lui	a3,0x10
2041d1f2:	9e36                	add	t3,t3,a3
2041d1f4:	01075313          	srli	t1,a4,0x10
2041d1f8:	9372                	add	t1,t1,t3
2041d1fa:	6e41                	lui	t3,0x10
2041d1fc:	1e7d                	addi	t3,t3,-1
2041d1fe:	01c776b3          	and	a3,a4,t3
2041d202:	06c2                	slli	a3,a3,0x10
2041d204:	01cefeb3          	and	t4,t4,t3
2041d208:	96f6                	add	a3,a3,t4
2041d20a:	00646663          	bltu	s0,t1,2041d216 <__divdf3+0x396>
2041d20e:	8fae                	mv	t6,a1
2041d210:	02641b63          	bne	s0,t1,2041d246 <__divdf3+0x3c6>
2041d214:	ca9d                	beqz	a3,2041d24a <__divdf3+0x3ca>
2041d216:	9442                	add	s0,s0,a6
2041d218:	fff58f93          	addi	t6,a1,-1
2041d21c:	03046163          	bltu	s0,a6,2041d23e <__divdf3+0x3be>
2041d220:	00646663          	bltu	s0,t1,2041d22c <__divdf3+0x3ac>
2041d224:	02641163          	bne	s0,t1,2041d246 <__divdf3+0x3c6>
2041d228:	00d8fd63          	bleu	a3,a7,2041d242 <__divdf3+0x3c2>
2041d22c:	00189713          	slli	a4,a7,0x1
2041d230:	011738b3          	sltu	a7,a4,a7
2041d234:	9846                	add	a6,a6,a7
2041d236:	ffe58f93          	addi	t6,a1,-2
2041d23a:	9442                	add	s0,s0,a6
2041d23c:	88ba                	mv	a7,a4
2041d23e:	00641463          	bne	s0,t1,2041d246 <__divdf3+0x3c6>
2041d242:	01168463          	beq	a3,a7,2041d24a <__divdf3+0x3ca>
2041d246:	001fef93          	ori	t6,t6,1
2041d24a:	3ff50693          	addi	a3,a0,1023
2041d24e:	0ad05c63          	blez	a3,2041d306 <__divdf3+0x486>
2041d252:	007ff713          	andi	a4,t6,7
2041d256:	cf01                	beqz	a4,2041d26e <__divdf3+0x3ee>
2041d258:	00fff713          	andi	a4,t6,15
2041d25c:	4591                	li	a1,4
2041d25e:	00b70863          	beq	a4,a1,2041d26e <__divdf3+0x3ee>
2041d262:	004f8593          	addi	a1,t6,4
2041d266:	01f5bfb3          	sltu	t6,a1,t6
2041d26a:	97fe                	add	a5,a5,t6
2041d26c:	8fae                	mv	t6,a1
2041d26e:	00779713          	slli	a4,a5,0x7
2041d272:	00075863          	bgez	a4,2041d282 <__divdf3+0x402>
2041d276:	ff000737          	lui	a4,0xff000
2041d27a:	177d                	addi	a4,a4,-1
2041d27c:	8ff9                	and	a5,a5,a4
2041d27e:	40050693          	addi	a3,a0,1024
2041d282:	7fe00713          	li	a4,2046
2041d286:	10d74b63          	blt	a4,a3,2041d39c <__divdf3+0x51c>
2041d28a:	01d79713          	slli	a4,a5,0x1d
2041d28e:	003fdf93          	srli	t6,t6,0x3
2041d292:	01f76733          	or	a4,a4,t6
2041d296:	838d                	srli	a5,a5,0x3
2041d298:	001005b7          	lui	a1,0x100
2041d29c:	15fd                	addi	a1,a1,-1
2041d29e:	8fed                	and	a5,a5,a1
2041d2a0:	801005b7          	lui	a1,0x80100
2041d2a4:	15fd                	addi	a1,a1,-1
2041d2a6:	7ff6f693          	andi	a3,a3,2047
2041d2aa:	06d2                	slli	a3,a3,0x14
2041d2ac:	8fed                	and	a5,a5,a1
2041d2ae:	50b2                	lw	ra,44(sp)
2041d2b0:	5422                	lw	s0,40(sp)
2041d2b2:	067e                	slli	a2,a2,0x1f
2041d2b4:	8fd5                	or	a5,a5,a3
2041d2b6:	00c7e6b3          	or	a3,a5,a2
2041d2ba:	5492                	lw	s1,36(sp)
2041d2bc:	5902                	lw	s2,32(sp)
2041d2be:	49f2                	lw	s3,28(sp)
2041d2c0:	4a62                	lw	s4,24(sp)
2041d2c2:	4ad2                	lw	s5,20(sp)
2041d2c4:	4b42                	lw	s6,16(sp)
2041d2c6:	4bb2                	lw	s7,12(sp)
2041d2c8:	853a                	mv	a0,a4
2041d2ca:	85b6                	mv	a1,a3
2041d2cc:	6145                	addi	sp,sp,48
2041d2ce:	8082                	ret
2041d2d0:	157d                	addi	a0,a0,-1
2041d2d2:	4701                	li	a4,0
2041d2d4:	b3b5                	j	2041d040 <__divdf3+0x1c0>
2041d2d6:	864a                	mv	a2,s2
2041d2d8:	87d6                	mv	a5,s5
2041d2da:	8fa2                	mv	t6,s0
2041d2dc:	875a                	mv	a4,s6
2041d2de:	4689                	li	a3,2
2041d2e0:	0ad70e63          	beq	a4,a3,2041d39c <__divdf3+0x51c>
2041d2e4:	468d                	li	a3,3
2041d2e6:	0ad70463          	beq	a4,a3,2041d38e <__divdf3+0x50e>
2041d2ea:	4685                	li	a3,1
2041d2ec:	f4d71fe3          	bne	a4,a3,2041d24a <__divdf3+0x3ca>
2041d2f0:	4781                	li	a5,0
2041d2f2:	4701                	li	a4,0
2041d2f4:	a0bd                	j	2041d362 <__divdf3+0x4e2>
2041d2f6:	864e                	mv	a2,s3
2041d2f8:	b7dd                	j	2041d2de <__divdf3+0x45e>
2041d2fa:	000807b7          	lui	a5,0x80
2041d2fe:	4f81                	li	t6,0
2041d300:	4601                	li	a2,0
2041d302:	470d                	li	a4,3
2041d304:	bfe9                	j	2041d2de <__divdf3+0x45e>
2041d306:	4585                	li	a1,1
2041d308:	8d95                	sub	a1,a1,a3
2041d30a:	03800713          	li	a4,56
2041d30e:	feb741e3          	blt	a4,a1,2041d2f0 <__divdf3+0x470>
2041d312:	477d                	li	a4,31
2041d314:	04b74963          	blt	a4,a1,2041d366 <__divdf3+0x4e6>
2041d318:	41e50513          	addi	a0,a0,1054
2041d31c:	00a79733          	sll	a4,a5,a0
2041d320:	00bfd6b3          	srl	a3,t6,a1
2041d324:	00af9533          	sll	a0,t6,a0
2041d328:	8f55                	or	a4,a4,a3
2041d32a:	00a03533          	snez	a0,a0
2041d32e:	8f49                	or	a4,a4,a0
2041d330:	00b7d7b3          	srl	a5,a5,a1
2041d334:	00777693          	andi	a3,a4,7
2041d338:	ce81                	beqz	a3,2041d350 <__divdf3+0x4d0>
2041d33a:	00f77693          	andi	a3,a4,15
2041d33e:	4591                	li	a1,4
2041d340:	00b68863          	beq	a3,a1,2041d350 <__divdf3+0x4d0>
2041d344:	00470693          	addi	a3,a4,4 # ff000004 <pulp__FC+0xff000005>
2041d348:	00e6b733          	sltu	a4,a3,a4
2041d34c:	97ba                	add	a5,a5,a4
2041d34e:	8736                	mv	a4,a3
2041d350:	00879693          	slli	a3,a5,0x8
2041d354:	0406c963          	bltz	a3,2041d3a6 <__divdf3+0x526>
2041d358:	01d79693          	slli	a3,a5,0x1d
2041d35c:	830d                	srli	a4,a4,0x3
2041d35e:	8f55                	or	a4,a4,a3
2041d360:	838d                	srli	a5,a5,0x3
2041d362:	4681                	li	a3,0
2041d364:	bf15                	j	2041d298 <__divdf3+0x418>
2041d366:	5705                	li	a4,-31
2041d368:	8f15                	sub	a4,a4,a3
2041d36a:	02000813          	li	a6,32
2041d36e:	00e7d733          	srl	a4,a5,a4
2041d372:	4681                	li	a3,0
2041d374:	01058663          	beq	a1,a6,2041d380 <__divdf3+0x500>
2041d378:	43e50513          	addi	a0,a0,1086
2041d37c:	00a796b3          	sll	a3,a5,a0
2041d380:	01f6e533          	or	a0,a3,t6
2041d384:	00a03533          	snez	a0,a0
2041d388:	8f49                	or	a4,a4,a0
2041d38a:	4781                	li	a5,0
2041d38c:	b765                	j	2041d334 <__divdf3+0x4b4>
2041d38e:	000807b7          	lui	a5,0x80
2041d392:	4701                	li	a4,0
2041d394:	7ff00693          	li	a3,2047
2041d398:	4601                	li	a2,0
2041d39a:	bdfd                	j	2041d298 <__divdf3+0x418>
2041d39c:	4781                	li	a5,0
2041d39e:	4701                	li	a4,0
2041d3a0:	7ff00693          	li	a3,2047
2041d3a4:	bdd5                	j	2041d298 <__divdf3+0x418>
2041d3a6:	4781                	li	a5,0
2041d3a8:	4701                	li	a4,0
2041d3aa:	4685                	li	a3,1
2041d3ac:	b5f5                	j	2041d298 <__divdf3+0x418>

2041d3ae <__ledf2>:
2041d3ae:	0145d713          	srli	a4,a1,0x14
2041d3b2:	001007b7          	lui	a5,0x100
2041d3b6:	17fd                	addi	a5,a5,-1
2041d3b8:	0146d813          	srli	a6,a3,0x14
2041d3bc:	88aa                	mv	a7,a0
2041d3be:	8eaa                	mv	t4,a0
2041d3c0:	7ff77713          	andi	a4,a4,2047
2041d3c4:	7ff00513          	li	a0,2047
2041d3c8:	00b7f333          	and	t1,a5,a1
2041d3cc:	8f32                	mv	t5,a2
2041d3ce:	8ff5                	and	a5,a5,a3
2041d3d0:	81fd                	srli	a1,a1,0x1f
2041d3d2:	7ff87813          	andi	a6,a6,2047
2041d3d6:	82fd                	srli	a3,a3,0x1f
2041d3d8:	00a71863          	bne	a4,a0,2041d3e8 <__ledf2+0x3a>
2041d3dc:	01136e33          	or	t3,t1,a7
2041d3e0:	4509                	li	a0,2
2041d3e2:	060e0363          	beqz	t3,2041d448 <__ledf2+0x9a>
2041d3e6:	8082                	ret
2041d3e8:	00a81663          	bne	a6,a0,2041d3f4 <__ledf2+0x46>
2041d3ec:	8e5d                	or	a2,a2,a5
2041d3ee:	4509                	li	a0,2
2041d3f0:	c235                	beqz	a2,2041d454 <__ledf2+0xa6>
2041d3f2:	8082                	ret
2041d3f4:	ef21                	bnez	a4,2041d44c <__ledf2+0x9e>
2041d3f6:	01136533          	or	a0,t1,a7
2041d3fa:	00153513          	seqz	a0,a0
2041d3fe:	00081463          	bnez	a6,2041d406 <__ledf2+0x58>
2041d402:	8e5d                	or	a2,a2,a5
2041d404:	c221                	beqz	a2,2041d444 <__ledf2+0x96>
2041d406:	e511                	bnez	a0,2041d412 <__ledf2+0x64>
2041d408:	00d58863          	beq	a1,a3,2041d418 <__ledf2+0x6a>
2041d40c:	4505                	li	a0,1
2041d40e:	e199                	bnez	a1,2041d414 <__ledf2+0x66>
2041d410:	8082                	ret
2041d412:	fefd                	bnez	a3,2041d410 <__ledf2+0x62>
2041d414:	557d                	li	a0,-1
2041d416:	8082                	ret
2041d418:	fee84ae3          	blt	a6,a4,2041d40c <__ledf2+0x5e>
2041d41c:	01075663          	ble	a6,a4,2041d428 <__ledf2+0x7a>
2041d420:	557d                	li	a0,-1
2041d422:	d5fd                	beqz	a1,2041d410 <__ledf2+0x62>
2041d424:	4505                	li	a0,1
2041d426:	8082                	ret
2041d428:	fe67e2e3          	bltu	a5,t1,2041d40c <__ledf2+0x5e>
2041d42c:	00f31863          	bne	t1,a5,2041d43c <__ledf2+0x8e>
2041d430:	fddf6ee3          	bltu	t5,t4,2041d40c <__ledf2+0x5e>
2041d434:	4501                	li	a0,0
2041d436:	ffeee5e3          	bltu	t4,t5,2041d420 <__ledf2+0x72>
2041d43a:	bfd9                	j	2041d410 <__ledf2+0x62>
2041d43c:	fef362e3          	bltu	t1,a5,2041d420 <__ledf2+0x72>
2041d440:	4501                	li	a0,0
2041d442:	8082                	ret
2041d444:	fd75                	bnez	a0,2041d440 <__ledf2+0x92>
2041d446:	b7d9                	j	2041d40c <__ledf2+0x5e>
2041d448:	fae802e3          	beq	a6,a4,2041d3ec <__ledf2+0x3e>
2041d44c:	4501                	li	a0,0
2041d44e:	fa080ae3          	beqz	a6,2041d402 <__ledf2+0x54>
2041d452:	bf5d                	j	2041d408 <__ledf2+0x5a>
2041d454:	fb55                	bnez	a4,2041d408 <__ledf2+0x5a>
2041d456:	01136533          	or	a0,t1,a7
2041d45a:	00153513          	seqz	a0,a0
2041d45e:	b765                	j	2041d406 <__ledf2+0x58>

2041d460 <__muldf3>:
2041d460:	7179                	addi	sp,sp,-48
2041d462:	d04a                	sw	s2,32(sp)
2041d464:	ca56                	sw	s5,20(sp)
2041d466:	00100937          	lui	s2,0x100
2041d46a:	0145da93          	srli	s5,a1,0x14
2041d46e:	ce4e                	sw	s3,28(sp)
2041d470:	cc52                	sw	s4,24(sp)
2041d472:	c85a                	sw	s6,16(sp)
2041d474:	c65e                	sw	s7,12(sp)
2041d476:	197d                	addi	s2,s2,-1
2041d478:	d606                	sw	ra,44(sp)
2041d47a:	d422                	sw	s0,40(sp)
2041d47c:	d226                	sw	s1,36(sp)
2041d47e:	7ffafa93          	andi	s5,s5,2047
2041d482:	8b2a                	mv	s6,a0
2041d484:	8bb2                	mv	s7,a2
2041d486:	8a36                	mv	s4,a3
2041d488:	00b97933          	and	s2,s2,a1
2041d48c:	01f5d993          	srli	s3,a1,0x1f
2041d490:	080a8763          	beqz	s5,2041d51e <__muldf3+0xbe>
2041d494:	7ff00793          	li	a5,2047
2041d498:	0cfa8c63          	beq	s5,a5,2041d570 <__muldf3+0x110>
2041d49c:	008004b7          	lui	s1,0x800
2041d4a0:	090e                	slli	s2,s2,0x3
2041d4a2:	00996933          	or	s2,s2,s1
2041d4a6:	01d55493          	srli	s1,a0,0x1d
2041d4aa:	0124e4b3          	or	s1,s1,s2
2041d4ae:	00351413          	slli	s0,a0,0x3
2041d4b2:	c01a8a93          	addi	s5,s5,-1023
2041d4b6:	4b01                	li	s6,0
2041d4b8:	014a5513          	srli	a0,s4,0x14
2041d4bc:	00100937          	lui	s2,0x100
2041d4c0:	197d                	addi	s2,s2,-1
2041d4c2:	7ff57513          	andi	a0,a0,2047
2041d4c6:	01497933          	and	s2,s2,s4
2041d4ca:	875e                	mv	a4,s7
2041d4cc:	01fa5a13          	srli	s4,s4,0x1f
2041d4d0:	c171                	beqz	a0,2041d594 <__muldf3+0x134>
2041d4d2:	7ff00793          	li	a5,2047
2041d4d6:	10f50963          	beq	a0,a5,2041d5e8 <__muldf3+0x188>
2041d4da:	008007b7          	lui	a5,0x800
2041d4de:	090e                	slli	s2,s2,0x3
2041d4e0:	00f96933          	or	s2,s2,a5
2041d4e4:	01dbd793          	srli	a5,s7,0x1d
2041d4e8:	0127e7b3          	or	a5,a5,s2
2041d4ec:	003b9713          	slli	a4,s7,0x3
2041d4f0:	c0150513          	addi	a0,a0,-1023
2041d4f4:	4681                	li	a3,0
2041d4f6:	002b1613          	slli	a2,s6,0x2
2041d4fa:	8e55                	or	a2,a2,a3
2041d4fc:	9556                	add	a0,a0,s5
2041d4fe:	167d                	addi	a2,a2,-1
2041d500:	45b9                	li	a1,14
2041d502:	0149c833          	xor	a6,s3,s4
2041d506:	00150893          	addi	a7,a0,1
2041d50a:	10c5e063          	bltu	a1,a2,2041d60a <__muldf3+0x1aa>
2041d50e:	204225b7          	lui	a1,0x20422
2041d512:	060a                	slli	a2,a2,0x2
2041d514:	6c858593          	addi	a1,a1,1736 # 204226c8 <zeroes.4346+0x4c>
2041d518:	962e                	add	a2,a2,a1
2041d51a:	4210                	lw	a2,0(a2)
2041d51c:	8602                	jr	a2
2041d51e:	00a964b3          	or	s1,s2,a0
2041d522:	c0a5                	beqz	s1,2041d582 <__muldf3+0x122>
2041d524:	02090b63          	beqz	s2,2041d55a <__muldf3+0xfa>
2041d528:	854a                	mv	a0,s2
2041d52a:	7f8020ef          	jal	ra,2041fd22 <__clzsi2>
2041d52e:	ff550793          	addi	a5,a0,-11
2041d532:	4771                	li	a4,28
2041d534:	02f74863          	blt	a4,a5,2041d564 <__muldf3+0x104>
2041d538:	44f5                	li	s1,29
2041d53a:	ff850413          	addi	s0,a0,-8
2041d53e:	8c9d                	sub	s1,s1,a5
2041d540:	00891933          	sll	s2,s2,s0
2041d544:	009b54b3          	srl	s1,s6,s1
2041d548:	0124e4b3          	or	s1,s1,s2
2041d54c:	008b1433          	sll	s0,s6,s0
2041d550:	c0d00a93          	li	s5,-1011
2041d554:	40aa8ab3          	sub	s5,s5,a0
2041d558:	bfb9                	j	2041d4b6 <__muldf3+0x56>
2041d55a:	7c8020ef          	jal	ra,2041fd22 <__clzsi2>
2041d55e:	02050513          	addi	a0,a0,32
2041d562:	b7f1                	j	2041d52e <__muldf3+0xce>
2041d564:	fd850493          	addi	s1,a0,-40
2041d568:	009b14b3          	sll	s1,s6,s1
2041d56c:	4401                	li	s0,0
2041d56e:	b7cd                	j	2041d550 <__muldf3+0xf0>
2041d570:	00a964b3          	or	s1,s2,a0
2041d574:	c899                	beqz	s1,2041d58a <__muldf3+0x12a>
2041d576:	842a                	mv	s0,a0
2041d578:	84ca                	mv	s1,s2
2041d57a:	7ff00a93          	li	s5,2047
2041d57e:	4b0d                	li	s6,3
2041d580:	bf25                	j	2041d4b8 <__muldf3+0x58>
2041d582:	4401                	li	s0,0
2041d584:	4a81                	li	s5,0
2041d586:	4b05                	li	s6,1
2041d588:	bf05                	j	2041d4b8 <__muldf3+0x58>
2041d58a:	4401                	li	s0,0
2041d58c:	7ff00a93          	li	s5,2047
2041d590:	4b09                	li	s6,2
2041d592:	b71d                	j	2041d4b8 <__muldf3+0x58>
2041d594:	017967b3          	or	a5,s2,s7
2041d598:	c3a5                	beqz	a5,2041d5f8 <__muldf3+0x198>
2041d59a:	02090b63          	beqz	s2,2041d5d0 <__muldf3+0x170>
2041d59e:	854a                	mv	a0,s2
2041d5a0:	782020ef          	jal	ra,2041fd22 <__clzsi2>
2041d5a4:	ff550693          	addi	a3,a0,-11
2041d5a8:	47f1                	li	a5,28
2041d5aa:	02d7c963          	blt	a5,a3,2041d5dc <__muldf3+0x17c>
2041d5ae:	47f5                	li	a5,29
2041d5b0:	ff850713          	addi	a4,a0,-8
2041d5b4:	8f95                	sub	a5,a5,a3
2041d5b6:	00e91933          	sll	s2,s2,a4
2041d5ba:	00fbd7b3          	srl	a5,s7,a5
2041d5be:	0127e7b3          	or	a5,a5,s2
2041d5c2:	00eb9733          	sll	a4,s7,a4
2041d5c6:	c0d00693          	li	a3,-1011
2041d5ca:	40a68533          	sub	a0,a3,a0
2041d5ce:	b71d                	j	2041d4f4 <__muldf3+0x94>
2041d5d0:	855e                	mv	a0,s7
2041d5d2:	750020ef          	jal	ra,2041fd22 <__clzsi2>
2041d5d6:	02050513          	addi	a0,a0,32
2041d5da:	b7e9                	j	2041d5a4 <__muldf3+0x144>
2041d5dc:	fd850793          	addi	a5,a0,-40
2041d5e0:	00fb97b3          	sll	a5,s7,a5
2041d5e4:	4701                	li	a4,0
2041d5e6:	b7c5                	j	2041d5c6 <__muldf3+0x166>
2041d5e8:	017967b3          	or	a5,s2,s7
2041d5ec:	cb91                	beqz	a5,2041d600 <__muldf3+0x1a0>
2041d5ee:	87ca                	mv	a5,s2
2041d5f0:	7ff00513          	li	a0,2047
2041d5f4:	468d                	li	a3,3
2041d5f6:	b701                	j	2041d4f6 <__muldf3+0x96>
2041d5f8:	4701                	li	a4,0
2041d5fa:	4501                	li	a0,0
2041d5fc:	4685                	li	a3,1
2041d5fe:	bde5                	j	2041d4f6 <__muldf3+0x96>
2041d600:	4701                	li	a4,0
2041d602:	7ff00513          	li	a0,2047
2041d606:	4689                	li	a3,2
2041d608:	b5fd                	j	2041d4f6 <__muldf3+0x96>
2041d60a:	66c1                	lui	a3,0x10
2041d60c:	fff68313          	addi	t1,a3,-1 # ffff <__stack_size+0xbfff>
2041d610:	01045613          	srli	a2,s0,0x10
2041d614:	01075293          	srli	t0,a4,0x10
2041d618:	00647433          	and	s0,s0,t1
2041d61c:	006773b3          	and	t2,a4,t1
2041d620:	028285b3          	mul	a1,t0,s0
2041d624:	02740733          	mul	a4,s0,t2
2041d628:	02760e33          	mul	t3,a2,t2
2041d62c:	01c58eb3          	add	t4,a1,t3
2041d630:	01075593          	srli	a1,a4,0x10
2041d634:	95f6                	add	a1,a1,t4
2041d636:	02560f33          	mul	t5,a2,t0
2041d63a:	01c5f363          	bleu	t3,a1,2041d640 <__muldf3+0x1e0>
2041d63e:	9f36                	add	t5,t5,a3
2041d640:	0065feb3          	and	t4,a1,t1
2041d644:	00677733          	and	a4,a4,t1
2041d648:	0ec2                	slli	t4,t4,0x10
2041d64a:	0107d913          	srli	s2,a5,0x10
2041d64e:	9eba                	add	t4,t4,a4
2041d650:	0067f733          	and	a4,a5,t1
2041d654:	0105de13          	srli	t3,a1,0x10
2041d658:	028707b3          	mul	a5,a4,s0
2041d65c:	02e606b3          	mul	a3,a2,a4
2041d660:	02890433          	mul	s0,s2,s0
2041d664:	00d405b3          	add	a1,s0,a3
2041d668:	0107d413          	srli	s0,a5,0x10
2041d66c:	942e                	add	s0,s0,a1
2041d66e:	03260633          	mul	a2,a2,s2
2041d672:	00d47463          	bleu	a3,s0,2041d67a <__muldf3+0x21a>
2041d676:	66c1                	lui	a3,0x10
2041d678:	9636                	add	a2,a2,a3
2041d67a:	01045693          	srli	a3,s0,0x10
2041d67e:	6341                	lui	t1,0x10
2041d680:	9636                	add	a2,a2,a3
2041d682:	fff30693          	addi	a3,t1,-1 # ffff <__stack_size+0xbfff>
2041d686:	8c75                	and	s0,s0,a3
2041d688:	8ff5                	and	a5,a5,a3
2041d68a:	0442                	slli	s0,s0,0x10
2041d68c:	0104df93          	srli	t6,s1,0x10
2041d690:	943e                	add	s0,s0,a5
2041d692:	8cf5                	and	s1,s1,a3
2041d694:	027486b3          	mul	a3,s1,t2
2041d698:	008e09b3          	add	s3,t3,s0
2041d69c:	027f83b3          	mul	t2,t6,t2
2041d6a0:	02928e33          	mul	t3,t0,s1
2041d6a4:	03f287b3          	mul	a5,t0,t6
2041d6a8:	007e02b3          	add	t0,t3,t2
2041d6ac:	0106de13          	srli	t3,a3,0x10
2041d6b0:	9e16                	add	t3,t3,t0
2041d6b2:	007e7363          	bleu	t2,t3,2041d6b8 <__muldf3+0x258>
2041d6b6:	979a                	add	a5,a5,t1
2041d6b8:	010e5293          	srli	t0,t3,0x10
2041d6bc:	65c1                	lui	a1,0x10
2041d6be:	92be                	add	t0,t0,a5
2041d6c0:	fff58793          	addi	a5,a1,-1 # ffff <__stack_size+0xbfff>
2041d6c4:	02e483b3          	mul	t2,s1,a4
2041d6c8:	00fe7333          	and	t1,t3,a5
2041d6cc:	8efd                	and	a3,a3,a5
2041d6ce:	0342                	slli	t1,t1,0x10
2041d6d0:	9336                	add	t1,t1,a3
2041d6d2:	02ef8733          	mul	a4,t6,a4
2041d6d6:	0103d693          	srli	a3,t2,0x10
2041d6da:	029904b3          	mul	s1,s2,s1
2041d6de:	94ba                	add	s1,s1,a4
2041d6e0:	94b6                	add	s1,s1,a3
2041d6e2:	03f90fb3          	mul	t6,s2,t6
2041d6e6:	00e4f363          	bleu	a4,s1,2041d6ec <__muldf3+0x28c>
2041d6ea:	9fae                	add	t6,t6,a1
2041d6ec:	66c1                	lui	a3,0x10
2041d6ee:	16fd                	addi	a3,a3,-1
2041d6f0:	00d4f5b3          	and	a1,s1,a3
2041d6f4:	05c2                	slli	a1,a1,0x10
2041d6f6:	00d3f6b3          	and	a3,t2,a3
2041d6fa:	013f0e33          	add	t3,t5,s3
2041d6fe:	95b6                	add	a1,a1,a3
2041d700:	00c586b3          	add	a3,a1,a2
2041d704:	008e3433          	sltu	s0,t3,s0
2041d708:	008687b3          	add	a5,a3,s0
2041d70c:	9e1a                	add	t3,t3,t1
2041d70e:	006e3333          	sltu	t1,t3,t1
2041d712:	005785b3          	add	a1,a5,t0
2041d716:	00c6b6b3          	sltu	a3,a3,a2
2041d71a:	00658f33          	add	t5,a1,t1
2041d71e:	8636                	mv	a2,a3
2041d720:	0087b6b3          	sltu	a3,a5,s0
2041d724:	0055b7b3          	sltu	a5,a1,t0
2041d728:	85be                	mv	a1,a5
2041d72a:	006f37b3          	sltu	a5,t5,t1
2041d72e:	8ed1                	or	a3,a3,a2
2041d730:	0ff6f693          	andi	a3,a3,255
2041d734:	80c1                	srli	s1,s1,0x10
2041d736:	8fcd                	or	a5,a5,a1
2041d738:	96a6                	add	a3,a3,s1
2041d73a:	0ff7f793          	andi	a5,a5,255
2041d73e:	97b6                	add	a5,a5,a3
2041d740:	97fe                	add	a5,a5,t6
2041d742:	017f5713          	srli	a4,t5,0x17
2041d746:	07a6                	slli	a5,a5,0x9
2041d748:	8fd9                	or	a5,a5,a4
2041d74a:	009e1713          	slli	a4,t3,0x9
2041d74e:	01d76733          	or	a4,a4,t4
2041d752:	00e03733          	snez	a4,a4
2041d756:	017e5e13          	srli	t3,t3,0x17
2041d75a:	01c76733          	or	a4,a4,t3
2041d75e:	0f26                	slli	t5,t5,0x9
2041d760:	00779693          	slli	a3,a5,0x7
2041d764:	01e76733          	or	a4,a4,t5
2041d768:	0a06de63          	bgez	a3,2041d824 <__muldf3+0x3c4>
2041d76c:	00175693          	srli	a3,a4,0x1
2041d770:	8b05                	andi	a4,a4,1
2041d772:	8f55                	or	a4,a4,a3
2041d774:	01f79693          	slli	a3,a5,0x1f
2041d778:	8f55                	or	a4,a4,a3
2041d77a:	8385                	srli	a5,a5,0x1
2041d77c:	3ff88613          	addi	a2,a7,1023
2041d780:	0ac05463          	blez	a2,2041d828 <__muldf3+0x3c8>
2041d784:	00777693          	andi	a3,a4,7
2041d788:	ce81                	beqz	a3,2041d7a0 <__muldf3+0x340>
2041d78a:	00f77693          	andi	a3,a4,15
2041d78e:	4591                	li	a1,4
2041d790:	00b68863          	beq	a3,a1,2041d7a0 <__muldf3+0x340>
2041d794:	00470693          	addi	a3,a4,4
2041d798:	00e6b733          	sltu	a4,a3,a4
2041d79c:	97ba                	add	a5,a5,a4
2041d79e:	8736                	mv	a4,a3
2041d7a0:	00779693          	slli	a3,a5,0x7
2041d7a4:	0006d863          	bgez	a3,2041d7b4 <__muldf3+0x354>
2041d7a8:	ff0006b7          	lui	a3,0xff000
2041d7ac:	16fd                	addi	a3,a3,-1
2041d7ae:	8ff5                	and	a5,a5,a3
2041d7b0:	40088613          	addi	a2,a7,1024
2041d7b4:	7fe00693          	li	a3,2046
2041d7b8:	10c6c263          	blt	a3,a2,2041d8bc <__muldf3+0x45c>
2041d7bc:	00375693          	srli	a3,a4,0x3
2041d7c0:	01d79713          	slli	a4,a5,0x1d
2041d7c4:	8f55                	or	a4,a4,a3
2041d7c6:	838d                	srli	a5,a5,0x3
2041d7c8:	001006b7          	lui	a3,0x100
2041d7cc:	16fd                	addi	a3,a3,-1
2041d7ce:	8ff5                	and	a5,a5,a3
2041d7d0:	7ff67693          	andi	a3,a2,2047
2041d7d4:	80100637          	lui	a2,0x80100
2041d7d8:	167d                	addi	a2,a2,-1
2041d7da:	06d2                	slli	a3,a3,0x14
2041d7dc:	50b2                	lw	ra,44(sp)
2041d7de:	5422                	lw	s0,40(sp)
2041d7e0:	8ff1                	and	a5,a5,a2
2041d7e2:	087e                	slli	a6,a6,0x1f
2041d7e4:	8fd5                	or	a5,a5,a3
2041d7e6:	0107e6b3          	or	a3,a5,a6
2041d7ea:	5492                	lw	s1,36(sp)
2041d7ec:	5902                	lw	s2,32(sp)
2041d7ee:	49f2                	lw	s3,28(sp)
2041d7f0:	4a62                	lw	s4,24(sp)
2041d7f2:	4ad2                	lw	s5,20(sp)
2041d7f4:	4b42                	lw	s6,16(sp)
2041d7f6:	4bb2                	lw	s7,12(sp)
2041d7f8:	853a                	mv	a0,a4
2041d7fa:	85b6                	mv	a1,a3
2041d7fc:	6145                	addi	sp,sp,48
2041d7fe:	8082                	ret
2041d800:	884e                	mv	a6,s3
2041d802:	87a6                	mv	a5,s1
2041d804:	8722                	mv	a4,s0
2041d806:	86da                	mv	a3,s6
2041d808:	4609                	li	a2,2
2041d80a:	0ac68963          	beq	a3,a2,2041d8bc <__muldf3+0x45c>
2041d80e:	460d                	li	a2,3
2041d810:	08c68f63          	beq	a3,a2,2041d8ae <__muldf3+0x44e>
2041d814:	4605                	li	a2,1
2041d816:	f6c693e3          	bne	a3,a2,2041d77c <__muldf3+0x31c>
2041d81a:	4781                	li	a5,0
2041d81c:	4701                	li	a4,0
2041d81e:	a09d                	j	2041d884 <__muldf3+0x424>
2041d820:	8852                	mv	a6,s4
2041d822:	b7dd                	j	2041d808 <__muldf3+0x3a8>
2041d824:	88aa                	mv	a7,a0
2041d826:	bf99                	j	2041d77c <__muldf3+0x31c>
2041d828:	4585                	li	a1,1
2041d82a:	8d91                	sub	a1,a1,a2
2041d82c:	03800693          	li	a3,56
2041d830:	feb6c5e3          	blt	a3,a1,2041d81a <__muldf3+0x3ba>
2041d834:	46fd                	li	a3,31
2041d836:	04b6c963          	blt	a3,a1,2041d888 <__muldf3+0x428>
2041d83a:	41e88893          	addi	a7,a7,1054
2041d83e:	011796b3          	sll	a3,a5,a7
2041d842:	00b75633          	srl	a2,a4,a1
2041d846:	01171733          	sll	a4,a4,a7
2041d84a:	8ed1                	or	a3,a3,a2
2041d84c:	00e03733          	snez	a4,a4
2041d850:	8f55                	or	a4,a4,a3
2041d852:	00b7d7b3          	srl	a5,a5,a1
2041d856:	00777693          	andi	a3,a4,7
2041d85a:	ce81                	beqz	a3,2041d872 <__muldf3+0x412>
2041d85c:	00f77693          	andi	a3,a4,15
2041d860:	4611                	li	a2,4
2041d862:	00c68863          	beq	a3,a2,2041d872 <__muldf3+0x412>
2041d866:	00470693          	addi	a3,a4,4
2041d86a:	00e6b733          	sltu	a4,a3,a4
2041d86e:	97ba                	add	a5,a5,a4
2041d870:	8736                	mv	a4,a3
2041d872:	00879693          	slli	a3,a5,0x8
2041d876:	0406c863          	bltz	a3,2041d8c6 <__muldf3+0x466>
2041d87a:	01d79693          	slli	a3,a5,0x1d
2041d87e:	830d                	srli	a4,a4,0x3
2041d880:	8f55                	or	a4,a4,a3
2041d882:	838d                	srli	a5,a5,0x3
2041d884:	4601                	li	a2,0
2041d886:	b789                	j	2041d7c8 <__muldf3+0x368>
2041d888:	5685                	li	a3,-31
2041d88a:	8e91                	sub	a3,a3,a2
2041d88c:	02000513          	li	a0,32
2041d890:	00d7d6b3          	srl	a3,a5,a3
2041d894:	4601                	li	a2,0
2041d896:	00a58663          	beq	a1,a0,2041d8a2 <__muldf3+0x442>
2041d89a:	43e88893          	addi	a7,a7,1086
2041d89e:	01179633          	sll	a2,a5,a7
2041d8a2:	8f51                	or	a4,a4,a2
2041d8a4:	00e03733          	snez	a4,a4
2041d8a8:	8f55                	or	a4,a4,a3
2041d8aa:	4781                	li	a5,0
2041d8ac:	b76d                	j	2041d856 <__muldf3+0x3f6>
2041d8ae:	000807b7          	lui	a5,0x80
2041d8b2:	4701                	li	a4,0
2041d8b4:	7ff00613          	li	a2,2047
2041d8b8:	4801                	li	a6,0
2041d8ba:	b739                	j	2041d7c8 <__muldf3+0x368>
2041d8bc:	4781                	li	a5,0
2041d8be:	4701                	li	a4,0
2041d8c0:	7ff00613          	li	a2,2047
2041d8c4:	b711                	j	2041d7c8 <__muldf3+0x368>
2041d8c6:	4781                	li	a5,0
2041d8c8:	4701                	li	a4,0
2041d8ca:	4605                	li	a2,1
2041d8cc:	bdf5                	j	2041d7c8 <__muldf3+0x368>

2041d8ce <__floatsidf>:
2041d8ce:	1141                	addi	sp,sp,-16
2041d8d0:	c606                	sw	ra,12(sp)
2041d8d2:	c422                	sw	s0,8(sp)
2041d8d4:	c226                	sw	s1,4(sp)
2041d8d6:	c925                	beqz	a0,2041d946 <__floatsidf+0x78>
2041d8d8:	842a                	mv	s0,a0
2041d8da:	01f55493          	srli	s1,a0,0x1f
2041d8de:	00055463          	bgez	a0,2041d8e6 <__floatsidf+0x18>
2041d8e2:	40a00433          	neg	s0,a0
2041d8e6:	8522                	mv	a0,s0
2041d8e8:	43a020ef          	jal	ra,2041fd22 <__clzsi2>
2041d8ec:	41e00713          	li	a4,1054
2041d8f0:	47a9                	li	a5,10
2041d8f2:	8f09                	sub	a4,a4,a0
2041d8f4:	04a7c463          	blt	a5,a0,2041d93c <__floatsidf+0x6e>
2041d8f8:	47ad                	li	a5,11
2041d8fa:	8f89                	sub	a5,a5,a0
2041d8fc:	0555                	addi	a0,a0,21
2041d8fe:	00f457b3          	srl	a5,s0,a5
2041d902:	00a41433          	sll	s0,s0,a0
2041d906:	00100537          	lui	a0,0x100
2041d90a:	157d                	addi	a0,a0,-1
2041d90c:	801006b7          	lui	a3,0x80100
2041d910:	8fe9                	and	a5,a5,a0
2041d912:	7ff77713          	andi	a4,a4,2047
2041d916:	16fd                	addi	a3,a3,-1
2041d918:	0752                	slli	a4,a4,0x14
2041d91a:	8ff5                	and	a5,a5,a3
2041d91c:	8fd9                	or	a5,a5,a4
2041d91e:	80000737          	lui	a4,0x80000
2041d922:	fff74713          	not	a4,a4
2041d926:	8522                	mv	a0,s0
2041d928:	40b2                	lw	ra,12(sp)
2041d92a:	4422                	lw	s0,8(sp)
2041d92c:	04fe                	slli	s1,s1,0x1f
2041d92e:	8ff9                	and	a5,a5,a4
2041d930:	0097e733          	or	a4,a5,s1
2041d934:	85ba                	mv	a1,a4
2041d936:	4492                	lw	s1,4(sp)
2041d938:	0141                	addi	sp,sp,16
2041d93a:	8082                	ret
2041d93c:	1555                	addi	a0,a0,-11
2041d93e:	00a417b3          	sll	a5,s0,a0
2041d942:	4401                	li	s0,0
2041d944:	b7c9                	j	2041d906 <__floatsidf+0x38>
2041d946:	4781                	li	a5,0
2041d948:	4401                	li	s0,0
2041d94a:	4701                	li	a4,0
2041d94c:	4481                	li	s1,0
2041d94e:	bf65                	j	2041d906 <__floatsidf+0x38>

2041d950 <__eqtf2>:
2041d950:	455c                	lw	a5,12(a0)
2041d952:	0005af03          	lw	t5,0(a1)
2041d956:	0045af83          	lw	t6,4(a1)
2041d95a:	0085a283          	lw	t0,8(a1)
2041d95e:	45cc                	lw	a1,12(a1)
2041d960:	6721                	lui	a4,0x8
2041d962:	0107d693          	srli	a3,a5,0x10
2041d966:	177d                	addi	a4,a4,-1
2041d968:	01079813          	slli	a6,a5,0x10
2041d96c:	01059e93          	slli	t4,a1,0x10
2041d970:	01f7d613          	srli	a2,a5,0x1f
2041d974:	8ef9                	and	a3,a3,a4
2041d976:	0105d793          	srli	a5,a1,0x10
2041d97a:	1141                	addi	sp,sp,-16
2041d97c:	00052883          	lw	a7,0(a0) # 100000 <__stack_size+0xfc000>
2041d980:	00452303          	lw	t1,4(a0)
2041d984:	00852e03          	lw	t3,8(a0)
2041d988:	01085813          	srli	a6,a6,0x10
2041d98c:	010ede93          	srli	t4,t4,0x10
2041d990:	8ff9                	and	a5,a5,a4
2041d992:	81fd                	srli	a1,a1,0x1f
2041d994:	00e69d63          	bne	a3,a4,2041d9ae <__eqtf2+0x5e>
2041d998:	0068e733          	or	a4,a7,t1
2041d99c:	01c76733          	or	a4,a4,t3
2041d9a0:	01076733          	or	a4,a4,a6
2041d9a4:	4505                	li	a0,1
2041d9a6:	e721                	bnez	a4,2041d9ee <__eqtf2+0x9e>
2041d9a8:	04d79363          	bne	a5,a3,2041d9ee <__eqtf2+0x9e>
2041d9ac:	a019                	j	2041d9b2 <__eqtf2+0x62>
2041d9ae:	00e79a63          	bne	a5,a4,2041d9c2 <__eqtf2+0x72>
2041d9b2:	01ff6733          	or	a4,t5,t6
2041d9b6:	00576733          	or	a4,a4,t0
2041d9ba:	01d76733          	or	a4,a4,t4
2041d9be:	4505                	li	a0,1
2041d9c0:	e71d                	bnez	a4,2041d9ee <__eqtf2+0x9e>
2041d9c2:	4505                	li	a0,1
2041d9c4:	02d79563          	bne	a5,a3,2041d9ee <__eqtf2+0x9e>
2041d9c8:	03e89363          	bne	a7,t5,2041d9ee <__eqtf2+0x9e>
2041d9cc:	03f31163          	bne	t1,t6,2041d9ee <__eqtf2+0x9e>
2041d9d0:	005e1f63          	bne	t3,t0,2041d9ee <__eqtf2+0x9e>
2041d9d4:	01d81d63          	bne	a6,t4,2041d9ee <__eqtf2+0x9e>
2041d9d8:	00b60d63          	beq	a2,a1,2041d9f2 <__eqtf2+0xa2>
2041d9dc:	eb89                	bnez	a5,2041d9ee <__eqtf2+0x9e>
2041d9de:	0068e533          	or	a0,a7,t1
2041d9e2:	01c56533          	or	a0,a0,t3
2041d9e6:	01056533          	or	a0,a0,a6
2041d9ea:	00a03533          	snez	a0,a0
2041d9ee:	0141                	addi	sp,sp,16
2041d9f0:	8082                	ret
2041d9f2:	4501                	li	a0,0
2041d9f4:	bfed                	j	2041d9ee <__eqtf2+0x9e>

2041d9f6 <__getf2>:
2041d9f6:	455c                	lw	a5,12(a0)
2041d9f8:	00c5a883          	lw	a7,12(a1)
2041d9fc:	00052f03          	lw	t5,0(a0)
2041da00:	4150                	lw	a2,4(a0)
2041da02:	00852803          	lw	a6,8(a0)
2041da06:	6521                	lui	a0,0x8
2041da08:	0107d713          	srli	a4,a5,0x10
2041da0c:	157d                	addi	a0,a0,-1
2041da0e:	01089e93          	slli	t4,a7,0x10
2041da12:	0108d693          	srli	a3,a7,0x10
2041da16:	0005a283          	lw	t0,0(a1)
2041da1a:	0045a303          	lw	t1,4(a1)
2041da1e:	0085ae03          	lw	t3,8(a1)
2041da22:	8f69                	and	a4,a4,a0
2041da24:	01079593          	slli	a1,a5,0x10
2041da28:	1141                	addi	sp,sp,-16
2041da2a:	81c1                	srli	a1,a1,0x10
2041da2c:	83fd                	srli	a5,a5,0x1f
2041da2e:	010ede93          	srli	t4,t4,0x10
2041da32:	8ee9                	and	a3,a3,a0
2041da34:	01f8d893          	srli	a7,a7,0x1f
2041da38:	00a71d63          	bne	a4,a0,2041da52 <__getf2+0x5c>
2041da3c:	00cf6fb3          	or	t6,t5,a2
2041da40:	010fefb3          	or	t6,t6,a6
2041da44:	00bfefb3          	or	t6,t6,a1
2041da48:	5579                	li	a0,-2
2041da4a:	0a0f8763          	beqz	t6,2041daf8 <__getf2+0x102>
2041da4e:	0141                	addi	sp,sp,16
2041da50:	8082                	ret
2041da52:	02a69463          	bne	a3,a0,2041da7a <__getf2+0x84>
2041da56:	0062efb3          	or	t6,t0,t1
2041da5a:	01cfefb3          	or	t6,t6,t3
2041da5e:	01dfefb3          	or	t6,t6,t4
2041da62:	5579                	li	a0,-2
2041da64:	fe0f95e3          	bnez	t6,2041da4e <__getf2+0x58>
2041da68:	eb1d                	bnez	a4,2041da9e <__getf2+0xa8>
2041da6a:	00cf6533          	or	a0,t5,a2
2041da6e:	01056533          	or	a0,a0,a6
2041da72:	8d4d                	or	a0,a0,a1
2041da74:	00153513          	seqz	a0,a0
2041da78:	a015                	j	2041da9c <__getf2+0xa6>
2041da7a:	e349                	bnez	a4,2041dafc <__getf2+0x106>
2041da7c:	00cf6533          	or	a0,t5,a2
2041da80:	01056533          	or	a0,a0,a6
2041da84:	8d4d                	or	a0,a0,a1
2041da86:	00153513          	seqz	a0,a0
2041da8a:	ea89                	bnez	a3,2041da9c <__getf2+0xa6>
2041da8c:	0062efb3          	or	t6,t0,t1
2041da90:	01cfefb3          	or	t6,t6,t3
2041da94:	01dfefb3          	or	t6,t6,t4
2041da98:	040f8e63          	beqz	t6,2041daf4 <__getf2+0xfe>
2041da9c:	e511                	bnez	a0,2041daa8 <__getf2+0xb2>
2041da9e:	01178963          	beq	a5,a7,2041dab0 <__getf2+0xba>
2041daa2:	4505                	li	a0,1
2041daa4:	d7cd                	beqz	a5,2041da4e <__getf2+0x58>
2041daa6:	a019                	j	2041daac <__getf2+0xb6>
2041daa8:	fa0893e3          	bnez	a7,2041da4e <__getf2+0x58>
2041daac:	557d                	li	a0,-1
2041daae:	b745                	j	2041da4e <__getf2+0x58>
2041dab0:	fee6c9e3          	blt	a3,a4,2041daa2 <__getf2+0xac>
2041dab4:	00d75663          	ble	a3,a4,2041dac0 <__getf2+0xca>
2041dab8:	557d                	li	a0,-1
2041daba:	dbd1                	beqz	a5,2041da4e <__getf2+0x58>
2041dabc:	4505                	li	a0,1
2041dabe:	bf41                	j	2041da4e <__getf2+0x58>
2041dac0:	febee1e3          	bltu	t4,a1,2041daa2 <__getf2+0xac>
2041dac4:	03d59463          	bne	a1,t4,2041daec <__getf2+0xf6>
2041dac8:	fd0e6de3          	bltu	t3,a6,2041daa2 <__getf2+0xac>
2041dacc:	03c81b63          	bne	a6,t3,2041db02 <__getf2+0x10c>
2041dad0:	fcc369e3          	bltu	t1,a2,2041daa2 <__getf2+0xac>
2041dad4:	00661463          	bne	a2,t1,2041dadc <__getf2+0xe6>
2041dad8:	fde2e5e3          	bltu	t0,t5,2041daa2 <__getf2+0xac>
2041dadc:	fc666ee3          	bltu	a2,t1,2041dab8 <__getf2+0xc2>
2041dae0:	4501                	li	a0,0
2041dae2:	f66616e3          	bne	a2,t1,2041da4e <__getf2+0x58>
2041dae6:	fc5f69e3          	bltu	t5,t0,2041dab8 <__getf2+0xc2>
2041daea:	b795                	j	2041da4e <__getf2+0x58>
2041daec:	fdd5e6e3          	bltu	a1,t4,2041dab8 <__getf2+0xc2>
2041daf0:	4501                	li	a0,0
2041daf2:	bfb1                	j	2041da4e <__getf2+0x58>
2041daf4:	fd75                	bnez	a0,2041daf0 <__getf2+0xfa>
2041daf6:	b775                	j	2041daa2 <__getf2+0xac>
2041daf8:	f4e68fe3          	beq	a3,a4,2041da56 <__getf2+0x60>
2041dafc:	4501                	li	a0,0
2041dafe:	d6d9                	beqz	a3,2041da8c <__getf2+0x96>
2041db00:	bf79                	j	2041da9e <__getf2+0xa8>
2041db02:	fbc86be3          	bltu	a6,t3,2041dab8 <__getf2+0xc2>
2041db06:	b7ed                	j	2041daf0 <__getf2+0xfa>

2041db08 <__letf2>:
2041db08:	455c                	lw	a5,12(a0)
2041db0a:	00c5a883          	lw	a7,12(a1)
2041db0e:	00052f03          	lw	t5,0(a0) # 8000 <__stack_size+0x4000>
2041db12:	4150                	lw	a2,4(a0)
2041db14:	00852803          	lw	a6,8(a0)
2041db18:	6521                	lui	a0,0x8
2041db1a:	0107d713          	srli	a4,a5,0x10
2041db1e:	157d                	addi	a0,a0,-1
2041db20:	01089e93          	slli	t4,a7,0x10
2041db24:	0108d693          	srli	a3,a7,0x10
2041db28:	0005a283          	lw	t0,0(a1)
2041db2c:	0045a303          	lw	t1,4(a1)
2041db30:	0085ae03          	lw	t3,8(a1)
2041db34:	8f69                	and	a4,a4,a0
2041db36:	01079593          	slli	a1,a5,0x10
2041db3a:	1141                	addi	sp,sp,-16
2041db3c:	81c1                	srli	a1,a1,0x10
2041db3e:	83fd                	srli	a5,a5,0x1f
2041db40:	010ede93          	srli	t4,t4,0x10
2041db44:	8ee9                	and	a3,a3,a0
2041db46:	01f8d893          	srli	a7,a7,0x1f
2041db4a:	00a71d63          	bne	a4,a0,2041db64 <__letf2+0x5c>
2041db4e:	00cf6fb3          	or	t6,t5,a2
2041db52:	010fefb3          	or	t6,t6,a6
2041db56:	00bfefb3          	or	t6,t6,a1
2041db5a:	4509                	li	a0,2
2041db5c:	0a0f8763          	beqz	t6,2041dc0a <__letf2+0x102>
2041db60:	0141                	addi	sp,sp,16
2041db62:	8082                	ret
2041db64:	02a69463          	bne	a3,a0,2041db8c <__letf2+0x84>
2041db68:	0062efb3          	or	t6,t0,t1
2041db6c:	01cfefb3          	or	t6,t6,t3
2041db70:	01dfefb3          	or	t6,t6,t4
2041db74:	4509                	li	a0,2
2041db76:	fe0f95e3          	bnez	t6,2041db60 <__letf2+0x58>
2041db7a:	eb1d                	bnez	a4,2041dbb0 <__letf2+0xa8>
2041db7c:	00cf6533          	or	a0,t5,a2
2041db80:	01056533          	or	a0,a0,a6
2041db84:	8d4d                	or	a0,a0,a1
2041db86:	00153513          	seqz	a0,a0
2041db8a:	a015                	j	2041dbae <__letf2+0xa6>
2041db8c:	e349                	bnez	a4,2041dc0e <__letf2+0x106>
2041db8e:	00cf6533          	or	a0,t5,a2
2041db92:	01056533          	or	a0,a0,a6
2041db96:	8d4d                	or	a0,a0,a1
2041db98:	00153513          	seqz	a0,a0
2041db9c:	ea89                	bnez	a3,2041dbae <__letf2+0xa6>
2041db9e:	0062efb3          	or	t6,t0,t1
2041dba2:	01cfefb3          	or	t6,t6,t3
2041dba6:	01dfefb3          	or	t6,t6,t4
2041dbaa:	040f8e63          	beqz	t6,2041dc06 <__letf2+0xfe>
2041dbae:	e511                	bnez	a0,2041dbba <__letf2+0xb2>
2041dbb0:	01178963          	beq	a5,a7,2041dbc2 <__letf2+0xba>
2041dbb4:	4505                	li	a0,1
2041dbb6:	d7cd                	beqz	a5,2041db60 <__letf2+0x58>
2041dbb8:	a019                	j	2041dbbe <__letf2+0xb6>
2041dbba:	fa0893e3          	bnez	a7,2041db60 <__letf2+0x58>
2041dbbe:	557d                	li	a0,-1
2041dbc0:	b745                	j	2041db60 <__letf2+0x58>
2041dbc2:	fee6c9e3          	blt	a3,a4,2041dbb4 <__letf2+0xac>
2041dbc6:	00d75663          	ble	a3,a4,2041dbd2 <__letf2+0xca>
2041dbca:	557d                	li	a0,-1
2041dbcc:	dbd1                	beqz	a5,2041db60 <__letf2+0x58>
2041dbce:	4505                	li	a0,1
2041dbd0:	bf41                	j	2041db60 <__letf2+0x58>
2041dbd2:	febee1e3          	bltu	t4,a1,2041dbb4 <__letf2+0xac>
2041dbd6:	03d59463          	bne	a1,t4,2041dbfe <__letf2+0xf6>
2041dbda:	fd0e6de3          	bltu	t3,a6,2041dbb4 <__letf2+0xac>
2041dbde:	03c81b63          	bne	a6,t3,2041dc14 <__letf2+0x10c>
2041dbe2:	fcc369e3          	bltu	t1,a2,2041dbb4 <__letf2+0xac>
2041dbe6:	00661463          	bne	a2,t1,2041dbee <__letf2+0xe6>
2041dbea:	fde2e5e3          	bltu	t0,t5,2041dbb4 <__letf2+0xac>
2041dbee:	fc666ee3          	bltu	a2,t1,2041dbca <__letf2+0xc2>
2041dbf2:	4501                	li	a0,0
2041dbf4:	f66616e3          	bne	a2,t1,2041db60 <__letf2+0x58>
2041dbf8:	fc5f69e3          	bltu	t5,t0,2041dbca <__letf2+0xc2>
2041dbfc:	b795                	j	2041db60 <__letf2+0x58>
2041dbfe:	fdd5e6e3          	bltu	a1,t4,2041dbca <__letf2+0xc2>
2041dc02:	4501                	li	a0,0
2041dc04:	bfb1                	j	2041db60 <__letf2+0x58>
2041dc06:	fd75                	bnez	a0,2041dc02 <__letf2+0xfa>
2041dc08:	b775                	j	2041dbb4 <__letf2+0xac>
2041dc0a:	f4e68fe3          	beq	a3,a4,2041db68 <__letf2+0x60>
2041dc0e:	4501                	li	a0,0
2041dc10:	d6d9                	beqz	a3,2041db9e <__letf2+0x96>
2041dc12:	bf79                	j	2041dbb0 <__letf2+0xa8>
2041dc14:	fbc86be3          	bltu	a6,t3,2041dbca <__letf2+0xc2>
2041dc18:	b7ed                	j	2041dc02 <__letf2+0xfa>

2041dc1a <__multf3>:
2041dc1a:	7131                	addi	sp,sp,-192
2041dc1c:	d74e                	sw	s3,172(sp)
2041dc1e:	00c5a983          	lw	s3,12(a1)
2041dc22:	4194                	lw	a3,0(a1)
2041dc24:	41dc                	lw	a5,4(a1)
2041dc26:	c42a                	sw	a0,8(sp)
2041dc28:	4588                	lw	a0,8(a1)
2041dc2a:	01099713          	slli	a4,s3,0x10
2041dc2e:	d94a                	sw	s2,176(sp)
2041dc30:	d552                	sw	s4,168(sp)
2041dc32:	d356                	sw	s5,164(sp)
2041dc34:	d15a                	sw	s6,160(sp)
2041dc36:	00062a03          	lw	s4,0(a2) # 80100000 <pulp__FC+0x80100001>
2041dc3a:	00462b03          	lw	s6,4(a2)
2041dc3e:	00862a83          	lw	s5,8(a2)
2041dc42:	00c62903          	lw	s2,12(a2)
2041dc46:	6621                	lui	a2,0x8
2041dc48:	db26                	sw	s1,180(sp)
2041dc4a:	8341                	srli	a4,a4,0x10
2041dc4c:	0109d493          	srli	s1,s3,0x10
2041dc50:	167d                	addi	a2,a2,-1
2041dc52:	d6ce                	sw	s3,108(sp)
2041dc54:	df06                	sw	ra,188(sp)
2041dc56:	dd22                	sw	s0,184(sp)
2041dc58:	cf5e                	sw	s7,156(sp)
2041dc5a:	cd62                	sw	s8,152(sp)
2041dc5c:	cb66                	sw	s9,148(sp)
2041dc5e:	c96a                	sw	s10,144(sp)
2041dc60:	c76e                	sw	s11,140(sp)
2041dc62:	d0b6                	sw	a3,96(sp)
2041dc64:	d2be                	sw	a5,100(sp)
2041dc66:	d4aa                	sw	a0,104(sp)
2041dc68:	d836                	sw	a3,48(sp)
2041dc6a:	da3e                	sw	a5,52(sp)
2041dc6c:	dc2a                	sw	a0,56(sp)
2041dc6e:	de3a                	sw	a4,60(sp)
2041dc70:	8cf1                	and	s1,s1,a2
2041dc72:	01f9d993          	srli	s3,s3,0x1f
2041dc76:	cccd                	beqz	s1,2041dd30 <__multf3+0x116>
2041dc78:	18c48563          	beq	s1,a2,2041de02 <__multf3+0x1e8>
2041dc7c:	67c1                	lui	a5,0x10
2041dc7e:	8fd9                	or	a5,a5,a4
2041dc80:	de3e                	sw	a5,60(sp)
2041dc82:	1810                	addi	a2,sp,48
2041dc84:	187c                	addi	a5,sp,60
2041dc86:	4398                	lw	a4,0(a5)
2041dc88:	ffc7a683          	lw	a3,-4(a5) # fffc <__stack_size+0xbffc>
2041dc8c:	17f1                	addi	a5,a5,-4
2041dc8e:	070e                	slli	a4,a4,0x3
2041dc90:	82f5                	srli	a3,a3,0x1d
2041dc92:	8f55                	or	a4,a4,a3
2041dc94:	c3d8                	sw	a4,4(a5)
2041dc96:	fef618e3          	bne	a2,a5,2041dc86 <__multf3+0x6c>
2041dc9a:	57c2                	lw	a5,48(sp)
2041dc9c:	7571                	lui	a0,0xffffc
2041dc9e:	0505                	addi	a0,a0,1
2041dca0:	078e                	slli	a5,a5,0x3
2041dca2:	d83e                	sw	a5,48(sp)
2041dca4:	94aa                	add	s1,s1,a0
2041dca6:	4b81                	li	s7,0
2041dca8:	01091793          	slli	a5,s2,0x10
2041dcac:	6721                	lui	a4,0x8
2041dcae:	01095513          	srli	a0,s2,0x10
2041dcb2:	83c1                	srli	a5,a5,0x10
2041dcb4:	177d                	addi	a4,a4,-1
2041dcb6:	d6ca                	sw	s2,108(sp)
2041dcb8:	d0d2                	sw	s4,96(sp)
2041dcba:	d2da                	sw	s6,100(sp)
2041dcbc:	d4d6                	sw	s5,104(sp)
2041dcbe:	c0d2                	sw	s4,64(sp)
2041dcc0:	c2da                	sw	s6,68(sp)
2041dcc2:	c4d6                	sw	s5,72(sp)
2041dcc4:	c6be                	sw	a5,76(sp)
2041dcc6:	8d79                	and	a0,a0,a4
2041dcc8:	01f95913          	srli	s2,s2,0x1f
2041dccc:	14050663          	beqz	a0,2041de18 <__multf3+0x1fe>
2041dcd0:	22e50763          	beq	a0,a4,2041defe <__multf3+0x2e4>
2041dcd4:	6ac1                	lui	s5,0x10
2041dcd6:	0157eab3          	or	s5,a5,s5
2041dcda:	c6d6                	sw	s5,76(sp)
2041dcdc:	0090                	addi	a2,sp,64
2041dcde:	00fc                	addi	a5,sp,76
2041dce0:	4398                	lw	a4,0(a5)
2041dce2:	ffc7a683          	lw	a3,-4(a5)
2041dce6:	17f1                	addi	a5,a5,-4
2041dce8:	070e                	slli	a4,a4,0x3
2041dcea:	82f5                	srli	a3,a3,0x1d
2041dcec:	8f55                	or	a4,a4,a3
2041dcee:	c3d8                	sw	a4,4(a5)
2041dcf0:	fef618e3          	bne	a2,a5,2041dce0 <__multf3+0xc6>
2041dcf4:	4786                	lw	a5,64(sp)
2041dcf6:	078e                	slli	a5,a5,0x3
2041dcf8:	c0be                	sw	a5,64(sp)
2041dcfa:	77f1                	lui	a5,0xffffc
2041dcfc:	0785                	addi	a5,a5,1
2041dcfe:	953e                	add	a0,a0,a5
2041dd00:	4701                	li	a4,0
2041dd02:	94aa                	add	s1,s1,a0
2041dd04:	002b9793          	slli	a5,s7,0x2
2041dd08:	0129c5b3          	xor	a1,s3,s2
2041dd0c:	00148613          	addi	a2,s1,1 # 800001 <__stack_size+0x7fc001>
2041dd10:	8fd9                	or	a5,a5,a4
2041dd12:	ca2e                	sw	a1,20(sp)
2041dd14:	d226                	sw	s1,36(sp)
2041dd16:	d032                	sw	a2,32(sp)
2041dd18:	17fd                	addi	a5,a5,-1
2041dd1a:	46b9                	li	a3,14
2041dd1c:	1ef6ef63          	bltu	a3,a5,2041df1a <__multf3+0x300>
2041dd20:	204226b7          	lui	a3,0x20422
2041dd24:	078a                	slli	a5,a5,0x2
2041dd26:	70468693          	addi	a3,a3,1796 # 20422704 <zeroes.4346+0x88>
2041dd2a:	97b6                	add	a5,a5,a3
2041dd2c:	439c                	lw	a5,0(a5)
2041dd2e:	8782                	jr	a5
2041dd30:	00d7e633          	or	a2,a5,a3
2041dd34:	8e49                	or	a2,a2,a0
2041dd36:	8e59                	or	a2,a2,a4
2041dd38:	ce69                	beqz	a2,2041de12 <__multf3+0x1f8>
2041dd3a:	c321                	beqz	a4,2041dd7a <__multf3+0x160>
2041dd3c:	853a                	mv	a0,a4
2041dd3e:	7e5010ef          	jal	ra,2041fd22 <__clzsi2>
2041dd42:	ff450713          	addi	a4,a0,-12 # ffffbff4 <pulp__FC+0xffffbff5>
2041dd46:	40575793          	srai	a5,a4,0x5
2041dd4a:	8b7d                	andi	a4,a4,31
2041dd4c:	cb31                	beqz	a4,2041dda0 <__multf3+0x186>
2041dd4e:	56f1                	li	a3,-4
2041dd50:	02d786b3          	mul	a3,a5,a3
2041dd54:	02000813          	li	a6,32
2041dd58:	00279593          	slli	a1,a5,0x2
2041dd5c:	5e41                	li	t3,-16
2041dd5e:	40e80833          	sub	a6,a6,a4
2041dd62:	16f1                	addi	a3,a3,-4
2041dd64:	07c69363          	bne	a3,t3,2041ddca <__multf3+0x1b0>
2041dd68:	0114                	addi	a3,sp,128
2041dd6a:	95b6                	add	a1,a1,a3
2041dd6c:	56c2                	lw	a3,48(sp)
2041dd6e:	17fd                	addi	a5,a5,-1
2041dd70:	00e69733          	sll	a4,a3,a4
2041dd74:	fae5a823          	sw	a4,-80(a1)
2041dd78:	a091                	j	2041ddbc <__multf3+0x1a2>
2041dd7a:	c511                	beqz	a0,2041dd86 <__multf3+0x16c>
2041dd7c:	7a7010ef          	jal	ra,2041fd22 <__clzsi2>
2041dd80:	02050513          	addi	a0,a0,32
2041dd84:	bf7d                	j	2041dd42 <__multf3+0x128>
2041dd86:	c799                	beqz	a5,2041dd94 <__multf3+0x17a>
2041dd88:	853e                	mv	a0,a5
2041dd8a:	799010ef          	jal	ra,2041fd22 <__clzsi2>
2041dd8e:	04050513          	addi	a0,a0,64
2041dd92:	bf45                	j	2041dd42 <__multf3+0x128>
2041dd94:	8536                	mv	a0,a3
2041dd96:	78d010ef          	jal	ra,2041fd22 <__clzsi2>
2041dd9a:	06050513          	addi	a0,a0,96
2041dd9e:	b755                	j	2041dd42 <__multf3+0x128>
2041dda0:	5671                	li	a2,-4
2041dda2:	02c78633          	mul	a2,a5,a2
2041dda6:	1818                	addi	a4,sp,48
2041dda8:	468d                	li	a3,3
2041ddaa:	00c705b3          	add	a1,a4,a2
2041ddae:	45cc                	lw	a1,12(a1)
2041ddb0:	16fd                	addi	a3,a3,-1
2041ddb2:	1771                	addi	a4,a4,-4
2041ddb4:	cb0c                	sw	a1,16(a4)
2041ddb6:	fef6dae3          	ble	a5,a3,2041ddaa <__multf3+0x190>
2041ddba:	17fd                	addi	a5,a5,-1
2041ddbc:	56fd                	li	a3,-1
2041ddbe:	02d79963          	bne	a5,a3,2041ddf0 <__multf3+0x1d6>
2041ddc2:	74f1                	lui	s1,0xffffc
2041ddc4:	04c5                	addi	s1,s1,17
2041ddc6:	8c89                	sub	s1,s1,a0
2041ddc8:	bdf9                	j	2041dca6 <__multf3+0x8c>
2041ddca:	1810                	addi	a2,sp,48
2041ddcc:	00d60333          	add	t1,a2,a3
2041ddd0:	00d588b3          	add	a7,a1,a3
2041ddd4:	98b2                	add	a7,a7,a2
2041ddd6:	00c32603          	lw	a2,12(t1)
2041ddda:	01032303          	lw	t1,16(t1)
2041ddde:	01065633          	srl	a2,a2,a6
2041dde2:	00e31333          	sll	t1,t1,a4
2041dde6:	00666633          	or	a2,a2,t1
2041ddea:	00c8a823          	sw	a2,16(a7)
2041ddee:	bf95                	j	2041dd62 <__multf3+0x148>
2041ddf0:	00279713          	slli	a4,a5,0x2
2041ddf4:	03010813          	addi	a6,sp,48
2041ddf8:	9742                	add	a4,a4,a6
2041ddfa:	00072023          	sw	zero,0(a4) # 8000 <__stack_size+0x4000>
2041ddfe:	17fd                	addi	a5,a5,-1
2041de00:	bf7d                	j	2041ddbe <__multf3+0x1a4>
2041de02:	8fd5                	or	a5,a5,a3
2041de04:	8fc9                	or	a5,a5,a0
2041de06:	8fd9                	or	a5,a5,a4
2041de08:	4b89                	li	s7,2
2041de0a:	e8078fe3          	beqz	a5,2041dca8 <__multf3+0x8e>
2041de0e:	4b8d                	li	s7,3
2041de10:	bd61                	j	2041dca8 <__multf3+0x8e>
2041de12:	4481                	li	s1,0
2041de14:	4b85                	li	s7,1
2041de16:	bd49                	j	2041dca8 <__multf3+0x8e>
2041de18:	016a6733          	or	a4,s4,s6
2041de1c:	01576733          	or	a4,a4,s5
2041de20:	8f5d                	or	a4,a4,a5
2041de22:	0e070963          	beqz	a4,2041df14 <__multf3+0x2fa>
2041de26:	c3a9                	beqz	a5,2041de68 <__multf3+0x24e>
2041de28:	853e                	mv	a0,a5
2041de2a:	6f9010ef          	jal	ra,2041fd22 <__clzsi2>
2041de2e:	ff450713          	addi	a4,a0,-12
2041de32:	40575793          	srai	a5,a4,0x5
2041de36:	8b7d                	andi	a4,a4,31
2041de38:	cf31                	beqz	a4,2041de94 <__multf3+0x27a>
2041de3a:	56f1                	li	a3,-4
2041de3c:	02d786b3          	mul	a3,a5,a3
2041de40:	02000813          	li	a6,32
2041de44:	00279593          	slli	a1,a5,0x2
2041de48:	5e41                	li	t3,-16
2041de4a:	40e80833          	sub	a6,a6,a4
2041de4e:	16f1                	addi	a3,a3,-4
2041de50:	07c69863          	bne	a3,t3,2041dec0 <__multf3+0x2a6>
2041de54:	4686                	lw	a3,64(sp)
2041de56:	08010e13          	addi	t3,sp,128
2041de5a:	95f2                	add	a1,a1,t3
2041de5c:	00e69733          	sll	a4,a3,a4
2041de60:	17fd                	addi	a5,a5,-1
2041de62:	fce5a023          	sw	a4,-64(a1)
2041de66:	a0a9                	j	2041deb0 <__multf3+0x296>
2041de68:	000a8863          	beqz	s5,2041de78 <__multf3+0x25e>
2041de6c:	8556                	mv	a0,s5
2041de6e:	6b5010ef          	jal	ra,2041fd22 <__clzsi2>
2041de72:	02050513          	addi	a0,a0,32
2041de76:	bf65                	j	2041de2e <__multf3+0x214>
2041de78:	000b0863          	beqz	s6,2041de88 <__multf3+0x26e>
2041de7c:	855a                	mv	a0,s6
2041de7e:	6a5010ef          	jal	ra,2041fd22 <__clzsi2>
2041de82:	04050513          	addi	a0,a0,64
2041de86:	b765                	j	2041de2e <__multf3+0x214>
2041de88:	8552                	mv	a0,s4
2041de8a:	699010ef          	jal	ra,2041fd22 <__clzsi2>
2041de8e:	06050513          	addi	a0,a0,96
2041de92:	bf71                	j	2041de2e <__multf3+0x214>
2041de94:	5671                	li	a2,-4
2041de96:	02c78633          	mul	a2,a5,a2
2041de9a:	0098                	addi	a4,sp,64
2041de9c:	468d                	li	a3,3
2041de9e:	00c705b3          	add	a1,a4,a2
2041dea2:	45cc                	lw	a1,12(a1)
2041dea4:	16fd                	addi	a3,a3,-1
2041dea6:	1771                	addi	a4,a4,-4
2041dea8:	cb0c                	sw	a1,16(a4)
2041deaa:	fef6dae3          	ble	a5,a3,2041de9e <__multf3+0x284>
2041deae:	17fd                	addi	a5,a5,-1
2041deb0:	56fd                	li	a3,-1
2041deb2:	02d79d63          	bne	a5,a3,2041deec <__multf3+0x2d2>
2041deb6:	77f1                	lui	a5,0xffffc
2041deb8:	07c5                	addi	a5,a5,17
2041deba:	40a78533          	sub	a0,a5,a0
2041debe:	b589                	j	2041dd00 <__multf3+0xe6>
2041dec0:	04010893          	addi	a7,sp,64
2041dec4:	00d88333          	add	t1,a7,a3
2041dec8:	00c32603          	lw	a2,12(t1)
2041decc:	01032303          	lw	t1,16(t1)
2041ded0:	00d588b3          	add	a7,a1,a3
2041ded4:	04010d13          	addi	s10,sp,64
2041ded8:	01065633          	srl	a2,a2,a6
2041dedc:	00e31333          	sll	t1,t1,a4
2041dee0:	98ea                	add	a7,a7,s10
2041dee2:	00666633          	or	a2,a2,t1
2041dee6:	00c8a823          	sw	a2,16(a7)
2041deea:	b795                	j	2041de4e <__multf3+0x234>
2041deec:	00279713          	slli	a4,a5,0x2
2041def0:	04010f93          	addi	t6,sp,64
2041def4:	977e                	add	a4,a4,t6
2041def6:	00072023          	sw	zero,0(a4)
2041defa:	17fd                	addi	a5,a5,-1
2041defc:	bf5d                	j	2041deb2 <__multf3+0x298>
2041defe:	016a6a33          	or	s4,s4,s6
2041df02:	015a6ab3          	or	s5,s4,s5
2041df06:	00faeab3          	or	s5,s5,a5
2041df0a:	4709                	li	a4,2
2041df0c:	de0a8be3          	beqz	s5,2041dd02 <__multf3+0xe8>
2041df10:	470d                	li	a4,3
2041df12:	bbc5                	j	2041dd02 <__multf3+0xe8>
2041df14:	4501                	li	a0,0
2041df16:	4705                	li	a4,1
2041df18:	b3ed                	j	2041dd02 <__multf3+0xe8>
2041df1a:	5742                	lw	a4,48(sp)
2041df1c:	4e06                	lw	t3,64(sp)
2041df1e:	6541                	lui	a0,0x10
2041df20:	fff50693          	addi	a3,a0,-1 # ffff <__stack_size+0xbfff>
2041df24:	01075293          	srli	t0,a4,0x10
2041df28:	010e5a93          	srli	s5,t3,0x10
2041df2c:	8f75                	and	a4,a4,a3
2041df2e:	00de7e33          	and	t3,t3,a3
2041df32:	02ea87b3          	mul	a5,s5,a4
2041df36:	03c70633          	mul	a2,a4,t3
2041df3a:	03c28833          	mul	a6,t0,t3
2041df3e:	010785b3          	add	a1,a5,a6
2041df42:	01065793          	srli	a5,a2,0x10
2041df46:	97ae                	add	a5,a5,a1
2041df48:	03528fb3          	mul	t6,t0,s5
2041df4c:	0107f363          	bleu	a6,a5,2041df52 <__multf3+0x338>
2041df50:	9faa                	add	t6,t6,a0
2041df52:	4f16                	lw	t5,68(sp)
2041df54:	0107db93          	srli	s7,a5,0x10
2041df58:	8ff5                	and	a5,a5,a3
2041df5a:	07c2                	slli	a5,a5,0x10
2041df5c:	8e75                	and	a2,a2,a3
2041df5e:	963e                	add	a2,a2,a5
2041df60:	010f5913          	srli	s2,t5,0x10
2041df64:	00df7f33          	and	t5,t5,a3
2041df68:	02e907b3          	mul	a5,s2,a4
2041df6c:	d432                	sw	a2,40(sp)
2041df6e:	d0b2                	sw	a2,96(sp)
2041df70:	03e706b3          	mul	a3,a4,t5
2041df74:	03e28633          	mul	a2,t0,t5
2041df78:	00c78833          	add	a6,a5,a2
2041df7c:	0106d793          	srli	a5,a3,0x10
2041df80:	97c2                	add	a5,a5,a6
2041df82:	03228b33          	mul	s6,t0,s2
2041df86:	00c7f463          	bleu	a2,a5,2041df8e <__multf3+0x374>
2041df8a:	6641                	lui	a2,0x10
2041df8c:	9b32                	add	s6,s6,a2
2041df8e:	6641                	lui	a2,0x10
2041df90:	fff60593          	addi	a1,a2,-1 # ffff <__stack_size+0xbfff>
2041df94:	00b7f833          	and	a6,a5,a1
2041df98:	0107dd93          	srli	s11,a5,0x10
2041df9c:	57d2                	lw	a5,52(sp)
2041df9e:	8eed                	and	a3,a3,a1
2041dfa0:	0842                	slli	a6,a6,0x10
2041dfa2:	0107d993          	srli	s3,a5,0x10
2041dfa6:	8dfd                	and	a1,a1,a5
2041dfa8:	9836                	add	a6,a6,a3
2041dfaa:	02ba87b3          	mul	a5,s5,a1
2041dfae:	9bc2                	add	s7,s7,a6
2041dfb0:	02be06b3          	mul	a3,t3,a1
2041dfb4:	03c98333          	mul	t1,s3,t3
2041dfb8:	006788b3          	add	a7,a5,t1
2041dfbc:	0106d793          	srli	a5,a3,0x10
2041dfc0:	97c6                	add	a5,a5,a7
2041dfc2:	033a8533          	mul	a0,s5,s3
2041dfc6:	0067f363          	bleu	t1,a5,2041dfcc <__multf3+0x3b2>
2041dfca:	9532                	add	a0,a0,a2
2041dfcc:	0107d393          	srli	t2,a5,0x10
2041dfd0:	6641                	lui	a2,0x10
2041dfd2:	93aa                	add	t2,t2,a0
2041dfd4:	fff60513          	addi	a0,a2,-1 # ffff <__stack_size+0xbfff>
2041dfd8:	00a7f8b3          	and	a7,a5,a0
2041dfdc:	8ee9                	and	a3,a3,a0
2041dfde:	08c2                	slli	a7,a7,0x10
2041dfe0:	98b6                	add	a7,a7,a3
2041dfe2:	03e987b3          	mul	a5,s3,t5
2041dfe6:	02bf06b3          	mul	a3,t5,a1
2041dfea:	02b90533          	mul	a0,s2,a1
2041dfee:	0106de93          	srli	t4,a3,0x10
2041dff2:	953e                	add	a0,a0,a5
2041dff4:	9576                	add	a0,a0,t4
2041dff6:	03390333          	mul	t1,s2,s3
2041dffa:	00f57363          	bleu	a5,a0,2041e000 <__multf3+0x3e6>
2041dffe:	9332                	add	t1,t1,a2
2041e000:	01055793          	srli	a5,a0,0x10
2041e004:	4ea6                	lw	t4,72(sp)
2041e006:	979a                	add	a5,a5,t1
2041e008:	64c1                	lui	s1,0x10
2041e00a:	c63e                	sw	a5,12(sp)
2041e00c:	fff48793          	addi	a5,s1,-1 # ffff <__stack_size+0xbfff>
2041e010:	010ed413          	srli	s0,t4,0x10
2041e014:	00fefeb3          	and	t4,t4,a5
2041e018:	8efd                	and	a3,a3,a5
2041e01a:	8d7d                	and	a0,a0,a5
2041e01c:	03d70333          	mul	t1,a4,t4
2041e020:	0542                	slli	a0,a0,0x10
2041e022:	9536                	add	a0,a0,a3
2041e024:	03d28a33          	mul	s4,t0,t4
2041e028:	01035693          	srli	a3,t1,0x10
2041e02c:	02e407b3          	mul	a5,s0,a4
2041e030:	97d2                	add	a5,a5,s4
2041e032:	97b6                	add	a5,a5,a3
2041e034:	02828633          	mul	a2,t0,s0
2041e038:	0147f363          	bleu	s4,a5,2041e03e <__multf3+0x424>
2041e03c:	9626                	add	a2,a2,s1
2041e03e:	0107d693          	srli	a3,a5,0x10
2041e042:	6c41                	lui	s8,0x10
2041e044:	96b2                	add	a3,a3,a2
2041e046:	fffc0613          	addi	a2,s8,-1 # ffff <__stack_size+0xbfff>
2041e04a:	c836                	sw	a3,16(sp)
2041e04c:	00c7f6b3          	and	a3,a5,a2
2041e050:	57e2                	lw	a5,56(sp)
2041e052:	00c37333          	and	t1,t1,a2
2041e056:	06c2                	slli	a3,a3,0x10
2041e058:	0107d493          	srli	s1,a5,0x10
2041e05c:	8e7d                	and	a2,a2,a5
2041e05e:	02ce0a33          	mul	s4,t3,a2
2041e062:	969a                	add	a3,a3,t1
2041e064:	03c48cb3          	mul	s9,s1,t3
2041e068:	010a5d13          	srli	s10,s4,0x10
2041e06c:	02ca87b3          	mul	a5,s5,a2
2041e070:	97e6                	add	a5,a5,s9
2041e072:	97ea                	add	a5,a5,s10
2041e074:	029a8333          	mul	t1,s5,s1
2041e078:	0197f363          	bleu	s9,a5,2041e07e <__multf3+0x464>
2041e07c:	9362                	add	t1,t1,s8
2041e07e:	0107dc13          	srli	s8,a5,0x10
2041e082:	9fde                	add	t6,t6,s7
2041e084:	9362                	add	t1,t1,s8
2041e086:	010fb833          	sltu	a6,t6,a6
2041e08a:	6c41                	lui	s8,0x10
2041e08c:	fffc0c93          	addi	s9,s8,-1 # ffff <__stack_size+0xbfff>
2041e090:	9dc2                	add	s11,s11,a6
2041e092:	9fc6                	add	t6,t6,a7
2041e094:	9b6e                	add	s6,s6,s11
2041e096:	0197f7b3          	and	a5,a5,s9
2041e09a:	011fb8b3          	sltu	a7,t6,a7
2041e09e:	07c2                	slli	a5,a5,0x10
2041e0a0:	019a7a33          	and	s4,s4,s9
2041e0a4:	cc7e                	sw	t6,24(sp)
2041e0a6:	d2fe                	sw	t6,100(sp)
2041e0a8:	007b0fb3          	add	t6,s6,t2
2041e0ac:	9a3e                	add	s4,s4,a5
2041e0ae:	011f87b3          	add	a5,t6,a7
2041e0b2:	007fb3b3          	sltu	t2,t6,t2
2041e0b6:	0117b8b3          	sltu	a7,a5,a7
2041e0ba:	00a78bb3          	add	s7,a5,a0
2041e0be:	0113e3b3          	or	t2,t2,a7
2041e0c2:	47b2                	lw	a5,12(sp)
2041e0c4:	0ff3f393          	andi	t2,t2,255
2041e0c8:	010b3b33          	sltu	s6,s6,a6
2041e0cc:	9b1e                	add	s6,s6,t2
2041e0ce:	4842                	lw	a6,16(sp)
2041e0d0:	00abb533          	sltu	a0,s7,a0
2041e0d4:	9b3e                	add	s6,s6,a5
2041e0d6:	00ab0db3          	add	s11,s6,a0
2041e0da:	9bb6                	add	s7,s7,a3
2041e0dc:	00dbb6b3          	sltu	a3,s7,a3
2041e0e0:	010d88b3          	add	a7,s11,a6
2041e0e4:	4fc2                	lw	t6,16(sp)
2041e0e6:	9bd2                	add	s7,s7,s4
2041e0e8:	00d88d33          	add	s10,a7,a3
2041e0ec:	014bba33          	sltu	s4,s7,s4
2041e0f0:	006d03b3          	add	t2,s10,t1
2041e0f4:	014387b3          	add	a5,t2,s4
2041e0f8:	01f8b8b3          	sltu	a7,a7,t6
2041e0fc:	0063bfb3          	sltu	t6,t2,t1
2041e100:	837e                	mv	t1,t6
2041e102:	0147bfb3          	sltu	t6,a5,s4
2041e106:	8a7e                	mv	s4,t6
2041e108:	4832                	lw	a6,12(sp)
2041e10a:	01436fb3          	or	t6,t1,s4
2041e10e:	4336                	lw	t1,76(sp)
2041e110:	010b3b33          	sltu	s6,s6,a6
2041e114:	00adb533          	sltu	a0,s11,a0
2041e118:	00dd36b3          	sltu	a3,s10,a3
2041e11c:	01035393          	srli	t2,t1,0x10
2041e120:	01937333          	and	t1,t1,s9
2041e124:	00d8e8b3          	or	a7,a7,a3
2041e128:	00ab6b33          	or	s6,s6,a0
2041e12c:	026286b3          	mul	a3,t0,t1
2041e130:	ce5e                	sw	s7,28(sp)
2041e132:	d4de                	sw	s7,104(sp)
2041e134:	0ffb7b13          	andi	s6,s6,255
2041e138:	0ff8fb93          	andi	s7,a7,255
2041e13c:	0fffff93          	andi	t6,t6,255
2041e140:	9b5e                	add	s6,s6,s7
2041e142:	01fb0bb3          	add	s7,s6,t6
2041e146:	02670533          	mul	a0,a4,t1
2041e14a:	02e38733          	mul	a4,t2,a4
2041e14e:	01055893          	srli	a7,a0,0x10
2041e152:	9736                	add	a4,a4,a3
2041e154:	98ba                	add	a7,a7,a4
2041e156:	02728fb3          	mul	t6,t0,t2
2041e15a:	00d8f363          	bleu	a3,a7,2041e160 <__multf3+0x546>
2041e15e:	9fe2                	add	t6,t6,s8
2041e160:	5a72                	lw	s4,60(sp)
2041e162:	0108d293          	srli	t0,a7,0x10
2041e166:	66c1                	lui	a3,0x10
2041e168:	fff68813          	addi	a6,a3,-1 # ffff <__stack_size+0xbfff>
2041e16c:	92fe                	add	t0,t0,t6
2041e16e:	c616                	sw	t0,12(sp)
2041e170:	010a5293          	srli	t0,s4,0x10
2041e174:	010a7a33          	and	s4,s4,a6
2041e178:	034e0733          	mul	a4,t3,s4
2041e17c:	0108f8b3          	and	a7,a7,a6
2041e180:	01057533          	and	a0,a0,a6
2041e184:	08c2                	slli	a7,a7,0x10
2041e186:	98aa                	add	a7,a7,a0
2041e188:	03c28e33          	mul	t3,t0,t3
2041e18c:	01075813          	srli	a6,a4,0x10
2041e190:	025a8b33          	mul	s6,s5,t0
2041e194:	034a8ab3          	mul	s5,s5,s4
2041e198:	9af2                	add	s5,s5,t3
2041e19a:	9ac2                	add	s5,s5,a6
2041e19c:	01caf363          	bleu	t3,s5,2041e1a2 <__multf3+0x588>
2041e1a0:	9b36                	add	s6,s6,a3
2041e1a2:	010ad693          	srli	a3,s5,0x10
2041e1a6:	96da                	add	a3,a3,s6
2041e1a8:	6b41                	lui	s6,0x10
2041e1aa:	c836                	sw	a3,16(sp)
2041e1ac:	fffb0693          	addi	a3,s6,-1 # ffff <__stack_size+0xbfff>
2041e1b0:	8f75                	and	a4,a4,a3
2041e1b2:	00daf833          	and	a6,s5,a3
2041e1b6:	03d58e33          	mul	t3,a1,t4
2041e1ba:	0842                	slli	a6,a6,0x10
2041e1bc:	983a                	add	a6,a6,a4
2041e1be:	03d98fb3          	mul	t6,s3,t4
2041e1c2:	010e5513          	srli	a0,t3,0x10
2041e1c6:	02b406b3          	mul	a3,s0,a1
2041e1ca:	96fe                	add	a3,a3,t6
2041e1cc:	96aa                	add	a3,a3,a0
2041e1ce:	02898733          	mul	a4,s3,s0
2041e1d2:	01f6f363          	bleu	t6,a3,2041e1d8 <__multf3+0x5be>
2041e1d6:	975a                	add	a4,a4,s6
2041e1d8:	0106d513          	srli	a0,a3,0x10
2041e1dc:	6b41                	lui	s6,0x10
2041e1de:	953a                	add	a0,a0,a4
2041e1e0:	fffb0713          	addi	a4,s6,-1 # ffff <__stack_size+0xbfff>
2041e1e4:	d62a                	sw	a0,44(sp)
2041e1e6:	00e6f533          	and	a0,a3,a4
2041e1ea:	00ee7e33          	and	t3,t3,a4
2041e1ee:	0542                	slli	a0,a0,0x10
2041e1f0:	9572                	add	a0,a0,t3
2041e1f2:	03e48fb3          	mul	t6,s1,t5
2041e1f6:	02cf0e33          	mul	t3,t5,a2
2041e1fa:	02c90733          	mul	a4,s2,a2
2041e1fe:	010e5693          	srli	a3,t3,0x10
2041e202:	977e                	add	a4,a4,t6
2041e204:	9736                	add	a4,a4,a3
2041e206:	02990ab3          	mul	s5,s2,s1
2041e20a:	01f77363          	bleu	t6,a4,2041e210 <__multf3+0x5f6>
2041e20e:	9ada                	add	s5,s5,s6
2041e210:	6dc1                	lui	s11,0x10
2041e212:	fffd8f93          	addi	t6,s11,-1 # ffff <__stack_size+0xbfff>
2041e216:	01f776b3          	and	a3,a4,t6
2041e21a:	01075d13          	srli	s10,a4,0x10
2041e21e:	4732                	lw	a4,12(sp)
2041e220:	9d56                	add	s10,s10,s5
2041e222:	c06a                	sw	s10,0(sp)
2041e224:	97c6                	add	a5,a5,a7
2041e226:	4d42                	lw	s10,16(sp)
2041e228:	9bba                	add	s7,s7,a4
2041e22a:	01fe7e33          	and	t3,t3,t6
2041e22e:	0117b8b3          	sltu	a7,a5,a7
2041e232:	06c2                	slli	a3,a3,0x10
2041e234:	96f2                	add	a3,a3,t3
2041e236:	011b8cb3          	add	s9,s7,a7
2041e23a:	97c2                	add	a5,a5,a6
2041e23c:	5e32                	lw	t3,44(sp)
2041e23e:	0107b833          	sltu	a6,a5,a6
2041e242:	01ac8b33          	add	s6,s9,s10
2041e246:	010b0c33          	add	s8,s6,a6
2041e24a:	97aa                	add	a5,a5,a0
2041e24c:	4f82                	lw	t6,0(sp)
2041e24e:	00a7b533          	sltu	a0,a5,a0
2041e252:	01cc0733          	add	a4,s8,t3
2041e256:	c25e                	sw	s7,4(sp)
2041e258:	00a70bb3          	add	s7,a4,a0
2041e25c:	01fb8ab3          	add	s5,s7,t6
2041e260:	4d12                	lw	s10,4(sp)
2041e262:	4fb2                	lw	t6,12(sp)
2041e264:	011cb8b3          	sltu	a7,s9,a7
2041e268:	01fd3d33          	sltu	s10,s10,t6
2041e26c:	8fea                	mv	t6,s10
2041e26e:	011fefb3          	or	t6,t6,a7
2041e272:	48c2                	lw	a7,16(sp)
2041e274:	5d32                	lw	s10,44(sp)
2041e276:	010c3833          	sltu	a6,s8,a6
2041e27a:	011b3b33          	sltu	s6,s6,a7
2041e27e:	010b6b33          	or	s6,s6,a6
2041e282:	01a73733          	sltu	a4,a4,s10
2041e286:	00abb533          	sltu	a0,s7,a0
2041e28a:	0ffb7b13          	andi	s6,s6,255
2041e28e:	0fffff93          	andi	t6,t6,255
2041e292:	9fda                	add	t6,t6,s6
2041e294:	00a76b33          	or	s6,a4,a0
2041e298:	4502                	lw	a0,0(sp)
2041e29a:	97b6                	add	a5,a5,a3
2041e29c:	00d7b6b3          	sltu	a3,a5,a3
2041e2a0:	0ffb7b13          	andi	s6,s6,255
2041e2a4:	00da8e33          	add	t3,s5,a3
2041e2a8:	9b7e                	add	s6,s6,t6
2041e2aa:	00aabfb3          	sltu	t6,s5,a0
2041e2ae:	8d7e                	mv	s10,t6
2041e2b0:	00de3fb3          	sltu	t6,t3,a3
2041e2b4:	86fe                	mv	a3,t6
2041e2b6:	00dd6fb3          	or	t6,s10,a3
2041e2ba:	03d48833          	mul	a6,s1,t4
2041e2be:	0ffffa93          	andi	s5,t6,255
2041e2c2:	d6be                	sw	a5,108(sp)
2041e2c4:	015b0fb3          	add	t6,s6,s5
2041e2c8:	02ce86b3          	mul	a3,t4,a2
2041e2cc:	02c40733          	mul	a4,s0,a2
2041e2d0:	0106d513          	srli	a0,a3,0x10
2041e2d4:	9742                	add	a4,a4,a6
2041e2d6:	972a                	add	a4,a4,a0
2041e2d8:	029408b3          	mul	a7,s0,s1
2041e2dc:	01077363          	bleu	a6,a4,2041e2e2 <__multf3+0x6c8>
2041e2e0:	98ee                	add	a7,a7,s11
2041e2e2:	01075a93          	srli	s5,a4,0x10
2041e2e6:	6841                	lui	a6,0x10
2041e2e8:	9ac6                	add	s5,s5,a7
2041e2ea:	fff80893          	addi	a7,a6,-1 # ffff <__stack_size+0xbfff>
2041e2ee:	0116f6b3          	and	a3,a3,a7
2041e2f2:	01177533          	and	a0,a4,a7
2041e2f6:	0542                	slli	a0,a0,0x10
2041e2f8:	026588b3          	mul	a7,a1,t1
2041e2fc:	9536                	add	a0,a0,a3
2041e2fe:	02698b33          	mul	s6,s3,t1
2041e302:	0108d693          	srli	a3,a7,0x10
2041e306:	02b385b3          	mul	a1,t2,a1
2041e30a:	95da                	add	a1,a1,s6
2041e30c:	96ae                	add	a3,a3,a1
2041e30e:	027989b3          	mul	s3,s3,t2
2041e312:	0166f363          	bleu	s6,a3,2041e318 <__multf3+0x6fe>
2041e316:	99c2                	add	s3,s3,a6
2041e318:	0106d713          	srli	a4,a3,0x10
2041e31c:	6841                	lui	a6,0x10
2041e31e:	99ba                	add	s3,s3,a4
2041e320:	fff80713          	addi	a4,a6,-1 # ffff <__stack_size+0xbfff>
2041e324:	00e6f5b3          	and	a1,a3,a4
2041e328:	00e8f8b3          	and	a7,a7,a4
2041e32c:	05c2                	slli	a1,a1,0x10
2041e32e:	034f0733          	mul	a4,t5,s4
2041e332:	95c6                	add	a1,a1,a7
2041e334:	03e28f33          	mul	t5,t0,t5
2041e338:	01075893          	srli	a7,a4,0x10
2041e33c:	025906b3          	mul	a3,s2,t0
2041e340:	03490933          	mul	s2,s2,s4
2041e344:	997a                	add	s2,s2,t5
2041e346:	9946                	add	s2,s2,a7
2041e348:	01e97363          	bleu	t5,s2,2041e34e <__multf3+0x734>
2041e34c:	96c2                	add	a3,a3,a6
2041e34e:	01095b13          	srli	s6,s2,0x10
2041e352:	6841                	lui	a6,0x10
2041e354:	9b36                	add	s6,s6,a3
2041e356:	fff80693          	addi	a3,a6,-1 # ffff <__stack_size+0xbfff>
2041e35a:	00d97f33          	and	t5,s2,a3
2041e35e:	8f75                	and	a4,a4,a3
2041e360:	0f42                	slli	t5,t5,0x10
2041e362:	026488b3          	mul	a7,s1,t1
2041e366:	9f3a                	add	t5,t5,a4
2041e368:	02660733          	mul	a4,a2,t1
2041e36c:	02c38633          	mul	a2,t2,a2
2041e370:	01075693          	srli	a3,a4,0x10
2041e374:	9646                	add	a2,a2,a7
2041e376:	9636                	add	a2,a2,a3
2041e378:	027484b3          	mul	s1,s1,t2
2041e37c:	01167363          	bleu	a7,a2,2041e382 <__multf3+0x768>
2041e380:	94c2                	add	s1,s1,a6
2041e382:	68c1                	lui	a7,0x10
2041e384:	01065693          	srli	a3,a2,0x10
2041e388:	fff88813          	addi	a6,a7,-1 # ffff <__stack_size+0xbfff>
2041e38c:	94b6                	add	s1,s1,a3
2041e38e:	010676b3          	and	a3,a2,a6
2041e392:	01077733          	and	a4,a4,a6
2041e396:	06c2                	slli	a3,a3,0x10
2041e398:	96ba                	add	a3,a3,a4
2041e39a:	03440833          	mul	a6,s0,s4
2041e39e:	034e8733          	mul	a4,t4,s4
2041e3a2:	03d28eb3          	mul	t4,t0,t4
2041e3a6:	01075913          	srli	s2,a4,0x10
2041e3aa:	9876                	add	a6,a6,t4
2041e3ac:	984a                	add	a6,a6,s2
2041e3ae:	02540633          	mul	a2,s0,t0
2041e3b2:	01d87363          	bleu	t4,a6,2041e3b8 <__multf3+0x79e>
2041e3b6:	9646                	add	a2,a2,a7
2041e3b8:	6bc1                	lui	s7,0x10
2041e3ba:	fffb8e93          	addi	t4,s7,-1 # ffff <__stack_size+0xbfff>
2041e3be:	9e2a                	add	t3,t3,a0
2041e3c0:	00ae3533          	sltu	a0,t3,a0
2041e3c4:	01085913          	srli	s2,a6,0x10
2041e3c8:	9fd6                	add	t6,t6,s5
2041e3ca:	01d87833          	and	a6,a6,t4
2041e3ce:	01d77733          	and	a4,a4,t4
2041e3d2:	00af8cb3          	add	s9,t6,a0
2041e3d6:	9e2e                	add	t3,t3,a1
2041e3d8:	0842                	slli	a6,a6,0x10
2041e3da:	983a                	add	a6,a6,a4
2041e3dc:	00be35b3          	sltu	a1,t3,a1
2041e3e0:	013c8733          	add	a4,s9,s3
2041e3e4:	00b70c33          	add	s8,a4,a1
2041e3e8:	9e7a                	add	t3,t3,t5
2041e3ea:	016c08b3          	add	a7,s8,s6
2041e3ee:	d8f2                	sw	t3,112(sp)
2041e3f0:	01373733          	sltu	a4,a4,s3
2041e3f4:	01ee3e33          	sltu	t3,t3,t5
2041e3f8:	00bc35b3          	sltu	a1,s8,a1
2041e3fc:	01c88f33          	add	t5,a7,t3
2041e400:	0168b8b3          	sltu	a7,a7,s6
2041e404:	015fbab3          	sltu	s5,t6,s5
2041e408:	00acb533          	sltu	a0,s9,a0
2041e40c:	8f4d                	or	a4,a4,a1
2041e40e:	8b46                	mv	s6,a7
2041e410:	034305b3          	mul	a1,t1,s4
2041e414:	01cf38b3          	sltu	a7,t5,t3
2041e418:	00aaeab3          	or	s5,s5,a0
2041e41c:	0ff77713          	andi	a4,a4,255
2041e420:	0ffafa93          	andi	s5,s5,255
2041e424:	011b68b3          	or	a7,s6,a7
2041e428:	02628333          	mul	t1,t0,t1
2041e42c:	9aba                	add	s5,s5,a4
2041e42e:	0ff8f893          	andi	a7,a7,255
2041e432:	9932                	add	s2,s2,a2
2041e434:	9ac6                	add	s5,s5,a7
2041e436:	00df0633          	add	a2,t5,a3
2041e43a:	00d636b3          	sltu	a3,a2,a3
2041e43e:	9aa6                	add	s5,s5,s1
2041e440:	9642                	add	a2,a2,a6
2041e442:	00da8733          	add	a4,s5,a3
2041e446:	025382b3          	mul	t0,t2,t0
2041e44a:	00d736b3          	sltu	a3,a4,a3
2041e44e:	01063833          	sltu	a6,a2,a6
2041e452:	974a                	add	a4,a4,s2
2041e454:	dab2                	sw	a2,116(sp)
2041e456:	01070633          	add	a2,a4,a6
2041e45a:	009ab4b3          	sltu	s1,s5,s1
2041e45e:	01273733          	sltu	a4,a4,s2
2041e462:	01063833          	sltu	a6,a2,a6
2041e466:	034383b3          	mul	t2,t2,s4
2041e46a:	8ec5                	or	a3,a3,s1
2041e46c:	01076833          	or	a6,a4,a6
2041e470:	0ff6f693          	andi	a3,a3,255
2041e474:	0ff87813          	andi	a6,a6,255
2041e478:	00638a33          	add	s4,t2,t1
2041e47c:	0105d393          	srli	t2,a1,0x10
2041e480:	93d2                	add	t2,t2,s4
2041e482:	0063f363          	bleu	t1,t2,2041e488 <__multf3+0x86e>
2041e486:	92de                	add	t0,t0,s7
2041e488:	01d3f733          	and	a4,t2,t4
2041e48c:	0742                	slli	a4,a4,0x10
2041e48e:	01d5feb3          	and	t4,a1,t4
2041e492:	9776                	add	a4,a4,t4
2041e494:	963a                	add	a2,a2,a4
2041e496:	00e63733          	sltu	a4,a2,a4
2041e49a:	0103d393          	srli	t2,t2,0x10
2041e49e:	dcb2                	sw	a2,120(sp)
2041e4a0:	55a2                	lw	a1,40(sp)
2041e4a2:	4662                	lw	a2,24(sp)
2041e4a4:	00d38eb3          	add	t4,t2,a3
2041e4a8:	46f2                	lw	a3,28(sp)
2041e4aa:	9ec2                	add	t4,t4,a6
2041e4ac:	9eba                	add	t4,t4,a4
2041e4ae:	00c5efb3          	or	t6,a1,a2
2041e4b2:	92f6                	add	t0,t0,t4
2041e4b4:	01f6ebb3          	or	s7,a3,t6
2041e4b8:	07b6                	slli	a5,a5,0xd
2041e4ba:	de96                	sw	t0,124(sp)
2041e4bc:	0177e7b3          	or	a5,a5,s7
2041e4c0:	1098                	addi	a4,sp,96
2041e4c2:	4601                	li	a2,0
2041e4c4:	4511                	li	a0,4
2041e4c6:	4754                	lw	a3,12(a4)
2041e4c8:	4b0c                	lw	a1,16(a4)
2041e4ca:	0605                	addi	a2,a2,1
2041e4cc:	82cd                	srli	a3,a3,0x13
2041e4ce:	05b6                	slli	a1,a1,0xd
2041e4d0:	8ecd                	or	a3,a3,a1
2041e4d2:	c314                	sw	a3,0(a4)
2041e4d4:	0711                	addi	a4,a4,4
2041e4d6:	fea618e3          	bne	a2,a0,2041e4c6 <__multf3+0x8ac>
2041e4da:	5706                	lw	a4,96(sp)
2041e4dc:	56a6                	lw	a3,104(sp)
2041e4de:	00f037b3          	snez	a5,a5
2041e4e2:	8fd9                	or	a5,a5,a4
2041e4e4:	ccb6                	sw	a3,88(sp)
2041e4e6:	5736                	lw	a4,108(sp)
2041e4e8:	5696                	lw	a3,100(sp)
2041e4ea:	c8be                	sw	a5,80(sp)
2041e4ec:	ceba                	sw	a4,92(sp)
2041e4ee:	cab6                	sw	a3,84(sp)
2041e4f0:	00b71813          	slli	a6,a4,0xb
2041e4f4:	16085163          	bgez	a6,2041e656 <__multf3+0xa3c>
2041e4f8:	07fe                	slli	a5,a5,0x1f
2041e4fa:	0898                	addi	a4,sp,80
2041e4fc:	4601                	li	a2,0
2041e4fe:	450d                	li	a0,3
2041e500:	4314                	lw	a3,0(a4)
2041e502:	434c                	lw	a1,4(a4)
2041e504:	0605                	addi	a2,a2,1
2041e506:	8285                	srli	a3,a3,0x1
2041e508:	05fe                	slli	a1,a1,0x1f
2041e50a:	8ecd                	or	a3,a3,a1
2041e50c:	c314                	sw	a3,0(a4)
2041e50e:	0711                	addi	a4,a4,4
2041e510:	fea618e3          	bne	a2,a0,2041e500 <__multf3+0x8e6>
2041e514:	4776                	lw	a4,92(sp)
2041e516:	00f037b3          	snez	a5,a5
2041e51a:	8305                	srli	a4,a4,0x1
2041e51c:	ceba                	sw	a4,92(sp)
2041e51e:	4746                	lw	a4,80(sp)
2041e520:	8fd9                	or	a5,a5,a4
2041e522:	c8be                	sw	a5,80(sp)
2041e524:	5d02                	lw	s10,32(sp)
2041e526:	6791                	lui	a5,0x4
2041e528:	17fd                	addi	a5,a5,-1
2041e52a:	97ea                	add	a5,a5,s10
2041e52c:	12f05f63          	blez	a5,2041e66a <__multf3+0xa50>
2041e530:	4746                	lw	a4,80(sp)
2041e532:	00777693          	andi	a3,a4,7
2041e536:	ce85                	beqz	a3,2041e56e <__multf3+0x954>
2041e538:	00f77693          	andi	a3,a4,15
2041e53c:	4611                	li	a2,4
2041e53e:	02c68863          	beq	a3,a2,2041e56e <__multf3+0x954>
2041e542:	0711                	addi	a4,a4,4
2041e544:	00473613          	sltiu	a2,a4,4
2041e548:	c8ba                	sw	a4,80(sp)
2041e54a:	4756                	lw	a4,84(sp)
2041e54c:	46e6                	lw	a3,88(sp)
2041e54e:	9732                	add	a4,a4,a2
2041e550:	caba                	sw	a4,84(sp)
2041e552:	00c73733          	sltu	a4,a4,a2
2041e556:	0ff77613          	andi	a2,a4,255
2041e55a:	00d60733          	add	a4,a2,a3
2041e55e:	ccba                	sw	a4,88(sp)
2041e560:	46f6                	lw	a3,92(sp)
2041e562:	00c73733          	sltu	a4,a4,a2
2041e566:	0ff77713          	andi	a4,a4,255
2041e56a:	9736                	add	a4,a4,a3
2041e56c:	ceba                	sw	a4,92(sp)
2041e56e:	4776                	lw	a4,92(sp)
2041e570:	00b71e13          	slli	t3,a4,0xb
2041e574:	000e5a63          	bgez	t3,2041e588 <__multf3+0x96e>
2041e578:	fff007b7          	lui	a5,0xfff00
2041e57c:	5f82                	lw	t6,32(sp)
2041e57e:	17fd                	addi	a5,a5,-1
2041e580:	8f7d                	and	a4,a4,a5
2041e582:	6791                	lui	a5,0x4
2041e584:	ceba                	sw	a4,92(sp)
2041e586:	97fe                	add	a5,a5,t6
2041e588:	0898                	addi	a4,sp,80
2041e58a:	4601                	li	a2,0
2041e58c:	450d                	li	a0,3
2041e58e:	4314                	lw	a3,0(a4)
2041e590:	434c                	lw	a1,4(a4)
2041e592:	0605                	addi	a2,a2,1
2041e594:	828d                	srli	a3,a3,0x3
2041e596:	05f6                	slli	a1,a1,0x1d
2041e598:	8ecd                	or	a3,a3,a1
2041e59a:	c314                	sw	a3,0(a4)
2041e59c:	0711                	addi	a4,a4,4
2041e59e:	fea618e3          	bne	a2,a0,2041e58e <__multf3+0x974>
2041e5a2:	6721                	lui	a4,0x8
2041e5a4:	ffe70693          	addi	a3,a4,-2 # 7ffe <__stack_size+0x3ffe>
2041e5a8:	0af6ca63          	blt	a3,a5,2041e65c <__multf3+0xa42>
2041e5ac:	4776                	lw	a4,92(sp)
2041e5ae:	830d                	srli	a4,a4,0x3
2041e5b0:	ceba                	sw	a4,92(sp)
2041e5b2:	4776                	lw	a4,92(sp)
2041e5b4:	76e1                	lui	a3,0xffff8
2041e5b6:	4552                	lw	a0,20(sp)
2041e5b8:	06e11623          	sh	a4,108(sp)
2041e5bc:	6721                	lui	a4,0x8
2041e5be:	177d                	addi	a4,a4,-1
2041e5c0:	8ff9                	and	a5,a5,a4
2041e5c2:	06e15703          	lhu	a4,110(sp)
2041e5c6:	50fa                	lw	ra,188(sp)
2041e5c8:	546a                	lw	s0,184(sp)
2041e5ca:	8f75                	and	a4,a4,a3
2041e5cc:	8fd9                	or	a5,a5,a4
2041e5ce:	0087d713          	srli	a4,a5,0x8
2041e5d2:	06f11723          	sh	a5,110(sp)
2041e5d6:	07f77713          	andi	a4,a4,127
2041e5da:	00751793          	slli	a5,a0,0x7
2041e5de:	8fd9                	or	a5,a5,a4
2041e5e0:	46a2                	lw	a3,8(sp)
2041e5e2:	06f107a3          	sb	a5,111(sp)
2041e5e6:	47c6                	lw	a5,80(sp)
2041e5e8:	54da                	lw	s1,180(sp)
2041e5ea:	594a                	lw	s2,176(sp)
2041e5ec:	c29c                	sw	a5,0(a3)
2041e5ee:	47d6                	lw	a5,84(sp)
2041e5f0:	59ba                	lw	s3,172(sp)
2041e5f2:	5a2a                	lw	s4,168(sp)
2041e5f4:	c2dc                	sw	a5,4(a3)
2041e5f6:	47e6                	lw	a5,88(sp)
2041e5f8:	5a9a                	lw	s5,164(sp)
2041e5fa:	5b0a                	lw	s6,160(sp)
2041e5fc:	c69c                	sw	a5,8(a3)
2041e5fe:	57b6                	lw	a5,108(sp)
2041e600:	4bfa                	lw	s7,156(sp)
2041e602:	4c6a                	lw	s8,152(sp)
2041e604:	c6dc                	sw	a5,12(a3)
2041e606:	4cda                	lw	s9,148(sp)
2041e608:	4d4a                	lw	s10,144(sp)
2041e60a:	4dba                	lw	s11,140(sp)
2041e60c:	8536                	mv	a0,a3
2041e60e:	6129                	addi	sp,sp,192
2041e610:	8082                	ret
2041e612:	ca4e                	sw	s3,20(sp)
2041e614:	57c2                	lw	a5,48(sp)
2041e616:	c8be                	sw	a5,80(sp)
2041e618:	57d2                	lw	a5,52(sp)
2041e61a:	cabe                	sw	a5,84(sp)
2041e61c:	57e2                	lw	a5,56(sp)
2041e61e:	ccbe                	sw	a5,88(sp)
2041e620:	57f2                	lw	a5,60(sp)
2041e622:	cebe                	sw	a5,92(sp)
2041e624:	4789                	li	a5,2
2041e626:	1afb8663          	beq	s7,a5,2041e7d2 <__multf3+0xbb8>
2041e62a:	478d                	li	a5,3
2041e62c:	1afb8a63          	beq	s7,a5,2041e7e0 <__multf3+0xbc6>
2041e630:	4785                	li	a5,1
2041e632:	eefb99e3          	bne	s7,a5,2041e524 <__multf3+0x90a>
2041e636:	ce82                	sw	zero,92(sp)
2041e638:	cc82                	sw	zero,88(sp)
2041e63a:	ca82                	sw	zero,84(sp)
2041e63c:	c882                	sw	zero,80(sp)
2041e63e:	aa8d                	j	2041e7b0 <__multf3+0xb96>
2041e640:	ca4a                	sw	s2,20(sp)
2041e642:	4786                	lw	a5,64(sp)
2041e644:	8bba                	mv	s7,a4
2041e646:	c8be                	sw	a5,80(sp)
2041e648:	4796                	lw	a5,68(sp)
2041e64a:	cabe                	sw	a5,84(sp)
2041e64c:	47a6                	lw	a5,72(sp)
2041e64e:	ccbe                	sw	a5,88(sp)
2041e650:	47b6                	lw	a5,76(sp)
2041e652:	cebe                	sw	a5,92(sp)
2041e654:	bfc1                	j	2041e624 <__multf3+0xa0a>
2041e656:	5892                	lw	a7,36(sp)
2041e658:	d046                	sw	a7,32(sp)
2041e65a:	b5e9                	j	2041e524 <__multf3+0x90a>
2041e65c:	ce82                	sw	zero,92(sp)
2041e65e:	cc82                	sw	zero,88(sp)
2041e660:	ca82                	sw	zero,84(sp)
2041e662:	c882                	sw	zero,80(sp)
2041e664:	fff70793          	addi	a5,a4,-1 # 7fff <__stack_size+0x3fff>
2041e668:	b7a9                	j	2041e5b2 <__multf3+0x998>
2041e66a:	4705                	li	a4,1
2041e66c:	40f707b3          	sub	a5,a4,a5
2041e670:	07400713          	li	a4,116
2041e674:	14f74063          	blt	a4,a5,2041e7b4 <__multf3+0xb9a>
2041e678:	4057d613          	srai	a2,a5,0x5
2041e67c:	4701                	li	a4,0
2041e67e:	8bfd                	andi	a5,a5,31
2041e680:	4681                	li	a3,0
2041e682:	00269593          	slli	a1,a3,0x2
2041e686:	06c69b63          	bne	a3,a2,2041e6fc <__multf3+0xae2>
2041e68a:	ebc1                	bnez	a5,2041e71a <__multf3+0xb00>
2041e68c:	450d                	li	a0,3
2041e68e:	0890                	addi	a2,sp,80
2041e690:	8d15                	sub	a0,a0,a3
2041e692:	06f55b63          	ble	a5,a0,2041e708 <__multf3+0xaee>
2041e696:	4791                	li	a5,4
2041e698:	40d786b3          	sub	a3,a5,a3
2041e69c:	4611                	li	a2,4
2041e69e:	0ec69063          	bne	a3,a2,2041e77e <__multf3+0xb64>
2041e6a2:	47c6                	lw	a5,80(sp)
2041e6a4:	00e03733          	snez	a4,a4
2041e6a8:	8f5d                	or	a4,a4,a5
2041e6aa:	c8ba                	sw	a4,80(sp)
2041e6ac:	00777793          	andi	a5,a4,7
2041e6b0:	cb9d                	beqz	a5,2041e6e6 <__multf3+0xacc>
2041e6b2:	00f77793          	andi	a5,a4,15
2041e6b6:	02d78863          	beq	a5,a3,2041e6e6 <__multf3+0xacc>
2041e6ba:	47d6                	lw	a5,84(sp)
2041e6bc:	0711                	addi	a4,a4,4
2041e6be:	c8ba                	sw	a4,80(sp)
2041e6c0:	00473713          	sltiu	a4,a4,4
2041e6c4:	97ba                	add	a5,a5,a4
2041e6c6:	46e6                	lw	a3,88(sp)
2041e6c8:	cabe                	sw	a5,84(sp)
2041e6ca:	00e7b7b3          	sltu	a5,a5,a4
2041e6ce:	0ff7f713          	andi	a4,a5,255
2041e6d2:	00d707b3          	add	a5,a4,a3
2041e6d6:	ccbe                	sw	a5,88(sp)
2041e6d8:	00e7b7b3          	sltu	a5,a5,a4
2041e6dc:	4776                	lw	a4,92(sp)
2041e6de:	0ff7f793          	andi	a5,a5,255
2041e6e2:	97ba                	add	a5,a5,a4
2041e6e4:	cebe                	sw	a5,92(sp)
2041e6e6:	47f6                	lw	a5,92(sp)
2041e6e8:	00c79f93          	slli	t6,a5,0xc
2041e6ec:	0a0fd263          	bgez	t6,2041e790 <__multf3+0xb76>
2041e6f0:	ce82                	sw	zero,92(sp)
2041e6f2:	cc82                	sw	zero,88(sp)
2041e6f4:	ca82                	sw	zero,84(sp)
2041e6f6:	c882                	sw	zero,80(sp)
2041e6f8:	4785                	li	a5,1
2041e6fa:	bd65                	j	2041e5b2 <__multf3+0x998>
2041e6fc:	0888                	addi	a0,sp,80
2041e6fe:	95aa                	add	a1,a1,a0
2041e700:	418c                	lw	a1,0(a1)
2041e702:	0685                	addi	a3,a3,1
2041e704:	8f4d                	or	a4,a4,a1
2041e706:	bfb5                	j	2041e682 <__multf3+0xa68>
2041e708:	00b60833          	add	a6,a2,a1
2041e70c:	00082803          	lw	a6,0(a6)
2041e710:	0785                	addi	a5,a5,1
2041e712:	0611                	addi	a2,a2,4
2041e714:	ff062e23          	sw	a6,-4(a2)
2041e718:	bfad                	j	2041e692 <__multf3+0xa78>
2041e71a:	08010893          	addi	a7,sp,128
2041e71e:	00b88633          	add	a2,a7,a1
2041e722:	fd062603          	lw	a2,-48(a2)
2041e726:	02000813          	li	a6,32
2041e72a:	40f80833          	sub	a6,a6,a5
2041e72e:	01061633          	sll	a2,a2,a6
2041e732:	8f51                	or	a4,a4,a2
2041e734:	460d                	li	a2,3
2041e736:	05010893          	addi	a7,sp,80
2041e73a:	4301                	li	t1,0
2041e73c:	8e15                	sub	a2,a2,a3
2041e73e:	00c34f63          	blt	t1,a2,2041e75c <__multf3+0xb42>
2041e742:	4591                	li	a1,4
2041e744:	40d586b3          	sub	a3,a1,a3
2041e748:	45f6                	lw	a1,92(sp)
2041e74a:	060a                	slli	a2,a2,0x2
2041e74c:	08010d13          	addi	s10,sp,128
2041e750:	966a                	add	a2,a2,s10
2041e752:	00f5d7b3          	srl	a5,a1,a5
2041e756:	fcf62823          	sw	a5,-48(a2)
2041e75a:	b789                	j	2041e69c <__multf3+0xa82>
2041e75c:	00b88e33          	add	t3,a7,a1
2041e760:	000e2503          	lw	a0,0(t3) # 10000 <__stack_size+0xc000>
2041e764:	004e2e03          	lw	t3,4(t3)
2041e768:	0305                	addi	t1,t1,1
2041e76a:	00f55533          	srl	a0,a0,a5
2041e76e:	010e1e33          	sll	t3,t3,a6
2041e772:	01c56533          	or	a0,a0,t3
2041e776:	00a8a023          	sw	a0,0(a7)
2041e77a:	0891                	addi	a7,a7,4
2041e77c:	b7c9                	j	2041e73e <__multf3+0xb24>
2041e77e:	00269793          	slli	a5,a3,0x2
2041e782:	05010e13          	addi	t3,sp,80
2041e786:	97f2                	add	a5,a5,t3
2041e788:	0007a023          	sw	zero,0(a5) # 4000 <__stack_size>
2041e78c:	0685                	addi	a3,a3,1
2041e78e:	bf01                	j	2041e69e <__multf3+0xa84>
2041e790:	089c                	addi	a5,sp,80
2041e792:	4681                	li	a3,0
2041e794:	458d                	li	a1,3
2041e796:	4398                	lw	a4,0(a5)
2041e798:	43d0                	lw	a2,4(a5)
2041e79a:	0685                	addi	a3,a3,1
2041e79c:	830d                	srli	a4,a4,0x3
2041e79e:	0676                	slli	a2,a2,0x1d
2041e7a0:	8f51                	or	a4,a4,a2
2041e7a2:	c398                	sw	a4,0(a5)
2041e7a4:	0791                	addi	a5,a5,4
2041e7a6:	feb698e3          	bne	a3,a1,2041e796 <__multf3+0xb7c>
2041e7aa:	47f6                	lw	a5,92(sp)
2041e7ac:	838d                	srli	a5,a5,0x3
2041e7ae:	cebe                	sw	a5,92(sp)
2041e7b0:	4781                	li	a5,0
2041e7b2:	b501                	j	2041e5b2 <__multf3+0x998>
2041e7b4:	47d6                	lw	a5,84(sp)
2041e7b6:	4746                	lw	a4,80(sp)
2041e7b8:	8f5d                	or	a4,a4,a5
2041e7ba:	47e6                	lw	a5,88(sp)
2041e7bc:	8f5d                	or	a4,a4,a5
2041e7be:	47f6                	lw	a5,92(sp)
2041e7c0:	8f5d                	or	a4,a4,a5
2041e7c2:	4781                	li	a5,0
2041e7c4:	de0707e3          	beqz	a4,2041e5b2 <__multf3+0x998>
2041e7c8:	ce82                	sw	zero,92(sp)
2041e7ca:	cc82                	sw	zero,88(sp)
2041e7cc:	ca82                	sw	zero,84(sp)
2041e7ce:	c882                	sw	zero,80(sp)
2041e7d0:	b3cd                	j	2041e5b2 <__multf3+0x998>
2041e7d2:	67a1                	lui	a5,0x8
2041e7d4:	ce82                	sw	zero,92(sp)
2041e7d6:	cc82                	sw	zero,88(sp)
2041e7d8:	ca82                	sw	zero,84(sp)
2041e7da:	c882                	sw	zero,80(sp)
2041e7dc:	17fd                	addi	a5,a5,-1
2041e7de:	bbd1                	j	2041e5b2 <__multf3+0x998>
2041e7e0:	67a1                	lui	a5,0x8
2041e7e2:	cebe                	sw	a5,92(sp)
2041e7e4:	cc82                	sw	zero,88(sp)
2041e7e6:	ca82                	sw	zero,84(sp)
2041e7e8:	c882                	sw	zero,80(sp)
2041e7ea:	17fd                	addi	a5,a5,-1
2041e7ec:	ca02                	sw	zero,20(sp)
2041e7ee:	b3d1                	j	2041e5b2 <__multf3+0x998>

2041e7f0 <__subtf3>:
2041e7f0:	711d                	addi	sp,sp,-96
2041e7f2:	459c                	lw	a5,8(a1)
2041e7f4:	c8ca                	sw	s2,80(sp)
2041e7f6:	00c5a903          	lw	s2,12(a1)
2041e7fa:	4194                	lw	a3,0(a1)
2041e7fc:	41d8                	lw	a4,4(a1)
2041e7fe:	caa6                	sw	s1,84(sp)
2041e800:	dc3e                	sw	a5,56(sp)
2041e802:	84aa                	mv	s1,a0
2041e804:	cc3e                	sw	a5,24(sp)
2041e806:	00062e83          	lw	t4,0(a2)
2041e80a:	01091793          	slli	a5,s2,0x10
2041e80e:	00462e03          	lw	t3,4(a2)
2041e812:	460c                	lw	a1,8(a2)
2041e814:	4648                	lw	a0,12(a2)
2041e816:	cca2                	sw	s0,88(sp)
2041e818:	83c1                	srli	a5,a5,0x10
2041e81a:	00191413          	slli	s0,s2,0x1
2041e81e:	de4a                	sw	s2,60(sp)
2041e820:	ce86                	sw	ra,92(sp)
2041e822:	c6ce                	sw	s3,76(sp)
2041e824:	c4d2                	sw	s4,72(sp)
2041e826:	c2d6                	sw	s5,68(sp)
2041e828:	d836                	sw	a3,48(sp)
2041e82a:	da3a                	sw	a4,52(sp)
2041e82c:	c836                	sw	a3,16(sp)
2041e82e:	ca3a                	sw	a4,20(sp)
2041e830:	ce3e                	sw	a5,28(sp)
2041e832:	8045                	srli	s0,s0,0x11
2041e834:	01f95913          	srli	s2,s2,0x1f
2041e838:	01010313          	addi	t1,sp,16
2041e83c:	01c10813          	addi	a6,sp,28
2041e840:	00082783          	lw	a5,0(a6)
2041e844:	ffc82703          	lw	a4,-4(a6)
2041e848:	1871                	addi	a6,a6,-4
2041e84a:	078e                	slli	a5,a5,0x3
2041e84c:	8375                	srli	a4,a4,0x1d
2041e84e:	8fd9                	or	a5,a5,a4
2041e850:	00f82223          	sw	a5,4(a6)
2041e854:	ff0316e3          	bne	t1,a6,2041e840 <__subtf3+0x50>
2041e858:	46c2                	lw	a3,16(sp)
2041e85a:	01051793          	slli	a5,a0,0x10
2041e85e:	00151613          	slli	a2,a0,0x1
2041e862:	00369893          	slli	a7,a3,0x3
2041e866:	83c1                	srli	a5,a5,0x10
2041e868:	da72                	sw	t3,52(sp)
2041e86a:	dc2e                	sw	a1,56(sp)
2041e86c:	de2a                	sw	a0,60(sp)
2041e86e:	d272                	sw	t3,36(sp)
2041e870:	d42e                	sw	a1,40(sp)
2041e872:	c846                	sw	a7,16(sp)
2041e874:	d876                	sw	t4,48(sp)
2041e876:	d076                	sw	t4,32(sp)
2041e878:	d63e                	sw	a5,44(sp)
2041e87a:	8245                	srli	a2,a2,0x11
2041e87c:	817d                	srli	a0,a0,0x1f
2041e87e:	100c                	addi	a1,sp,32
2041e880:	02c10e13          	addi	t3,sp,44
2041e884:	000e2783          	lw	a5,0(t3)
2041e888:	ffce2703          	lw	a4,-4(t3)
2041e88c:	1e71                	addi	t3,t3,-4
2041e88e:	078e                	slli	a5,a5,0x3
2041e890:	8375                	srli	a4,a4,0x1d
2041e892:	8fd9                	or	a5,a5,a4
2041e894:	00fe2223          	sw	a5,4(t3)
2041e898:	ffc596e3          	bne	a1,t3,2041e884 <__subtf3+0x94>
2041e89c:	5782                	lw	a5,32(sp)
2041e89e:	6721                	lui	a4,0x8
2041e8a0:	177d                	addi	a4,a4,-1
2041e8a2:	078e                	slli	a5,a5,0x3
2041e8a4:	d03e                	sw	a5,32(sp)
2041e8a6:	00e61963          	bne	a2,a4,2041e8b8 <__subtf3+0xc8>
2041e8aa:	56a2                	lw	a3,40(sp)
2041e8ac:	5712                	lw	a4,36(sp)
2041e8ae:	8f55                	or	a4,a4,a3
2041e8b0:	56b2                	lw	a3,44(sp)
2041e8b2:	8f55                	or	a4,a4,a3
2041e8b4:	8f5d                	or	a4,a4,a5
2041e8b6:	e319                	bnez	a4,2041e8bc <__subtf3+0xcc>
2041e8b8:	00154513          	xori	a0,a0,1
2041e8bc:	40c40733          	sub	a4,s0,a2
2041e8c0:	63251c63          	bne	a0,s2,2041eef8 <__subtf3+0x708>
2041e8c4:	20e05b63          	blez	a4,2041eada <__subtf3+0x2ea>
2041e8c8:	ee71                	bnez	a2,2041e9a4 <__subtf3+0x1b4>
2041e8ca:	5312                	lw	t1,36(sp)
2041e8cc:	5822                	lw	a6,40(sp)
2041e8ce:	5532                	lw	a0,44(sp)
2041e8d0:	010366b3          	or	a3,t1,a6
2041e8d4:	8ec9                	or	a3,a3,a0
2041e8d6:	8edd                	or	a3,a3,a5
2041e8d8:	ea91                	bnez	a3,2041e8ec <__subtf3+0xfc>
2041e8da:	47d2                	lw	a5,20(sp)
2041e8dc:	d846                	sw	a7,48(sp)
2041e8de:	843a                	mv	s0,a4
2041e8e0:	da3e                	sw	a5,52(sp)
2041e8e2:	47e2                	lw	a5,24(sp)
2041e8e4:	dc3e                	sw	a5,56(sp)
2041e8e6:	47f2                	lw	a5,28(sp)
2041e8e8:	de3e                	sw	a5,60(sp)
2041e8ea:	ac39                	j	2041eb08 <__subtf3+0x318>
2041e8ec:	fff70613          	addi	a2,a4,-1 # 7fff <__stack_size+0x3fff>
2041e8f0:	ee41                	bnez	a2,2041e988 <__subtf3+0x198>
2041e8f2:	4652                	lw	a2,20(sp)
2041e8f4:	00f886b3          	add	a3,a7,a5
2041e8f8:	0116b8b3          	sltu	a7,a3,a7
2041e8fc:	d836                	sw	a3,48(sp)
2041e8fe:	00c306b3          	add	a3,t1,a2
2041e902:	011685b3          	add	a1,a3,a7
2041e906:	00c6b6b3          	sltu	a3,a3,a2
2041e90a:	8636                	mv	a2,a3
2041e90c:	47e2                	lw	a5,24(sp)
2041e90e:	0115b6b3          	sltu	a3,a1,a7
2041e912:	8ed1                	or	a3,a3,a2
2041e914:	00f80733          	add	a4,a6,a5
2041e918:	0ff6f693          	andi	a3,a3,255
2041e91c:	00d70633          	add	a2,a4,a3
2041e920:	00f737b3          	sltu	a5,a4,a5
2041e924:	873e                	mv	a4,a5
2041e926:	00d637b3          	sltu	a5,a2,a3
2041e92a:	8fd9                	or	a5,a5,a4
2041e92c:	4772                	lw	a4,28(sp)
2041e92e:	0ff7f793          	andi	a5,a5,255
2041e932:	da2e                	sw	a1,52(sp)
2041e934:	953a                	add	a0,a0,a4
2041e936:	97aa                	add	a5,a5,a0
2041e938:	dc32                	sw	a2,56(sp)
2041e93a:	de3e                	sw	a5,60(sp)
2041e93c:	4405                	li	s0,1
2041e93e:	57f2                	lw	a5,60(sp)
2041e940:	00c79693          	slli	a3,a5,0xc
2041e944:	1c06d263          	bgez	a3,2041eb08 <__subtf3+0x318>
2041e948:	fff80737          	lui	a4,0xfff80
2041e94c:	177d                	addi	a4,a4,-1
2041e94e:	8ff9                	and	a5,a5,a4
2041e950:	de3e                	sw	a5,60(sp)
2041e952:	57c2                	lw	a5,48(sp)
2041e954:	0405                	addi	s0,s0,1
2041e956:	1818                	addi	a4,sp,48
2041e958:	07fe                	slli	a5,a5,0x1f
2041e95a:	4601                	li	a2,0
2041e95c:	450d                	li	a0,3
2041e95e:	4314                	lw	a3,0(a4)
2041e960:	434c                	lw	a1,4(a4)
2041e962:	0605                	addi	a2,a2,1
2041e964:	8285                	srli	a3,a3,0x1
2041e966:	05fe                	slli	a1,a1,0x1f
2041e968:	8ecd                	or	a3,a3,a1
2041e96a:	c314                	sw	a3,0(a4)
2041e96c:	0711                	addi	a4,a4,4
2041e96e:	fea618e3          	bne	a2,a0,2041e95e <__subtf3+0x16e>
2041e972:	5772                	lw	a4,60(sp)
2041e974:	00f037b3          	snez	a5,a5
2041e978:	8305                	srli	a4,a4,0x1
2041e97a:	de3a                	sw	a4,60(sp)
2041e97c:	5742                	lw	a4,48(sp)
2041e97e:	8fd9                	or	a5,a5,a4
2041e980:	d83e                	sw	a5,48(sp)
2041e982:	67a1                	lui	a5,0x8
2041e984:	17fd                	addi	a5,a5,-1
2041e986:	a395                	j	2041eeea <__subtf3+0x6fa>
2041e988:	67a1                	lui	a5,0x8
2041e98a:	17fd                	addi	a5,a5,-1
2041e98c:	f4f707e3          	beq	a4,a5,2041e8da <__subtf3+0xea>
2041e990:	07400793          	li	a5,116
2041e994:	02c7dd63          	ble	a2,a5,2041e9ce <__subtf3+0x1de>
2041e998:	4785                	li	a5,1
2041e99a:	d602                	sw	zero,44(sp)
2041e99c:	d402                	sw	zero,40(sp)
2041e99e:	d202                	sw	zero,36(sp)
2041e9a0:	d03e                	sw	a5,32(sp)
2041e9a2:	a085                	j	2041ea02 <__subtf3+0x212>
2041e9a4:	67a1                	lui	a5,0x8
2041e9a6:	17fd                	addi	a5,a5,-1
2041e9a8:	00f41963          	bne	s0,a5,2041e9ba <__subtf3+0x1ca>
2041e9ac:	47d2                	lw	a5,20(sp)
2041e9ae:	d846                	sw	a7,48(sp)
2041e9b0:	da3e                	sw	a5,52(sp)
2041e9b2:	47e2                	lw	a5,24(sp)
2041e9b4:	dc3e                	sw	a5,56(sp)
2041e9b6:	47f2                	lw	a5,28(sp)
2041e9b8:	a985                	j	2041ee28 <__subtf3+0x638>
2041e9ba:	57b2                	lw	a5,44(sp)
2041e9bc:	000806b7          	lui	a3,0x80
2041e9c0:	8fd5                	or	a5,a5,a3
2041e9c2:	d63e                	sw	a5,44(sp)
2041e9c4:	07400793          	li	a5,116
2041e9c8:	fce7c8e3          	blt	a5,a4,2041e998 <__subtf3+0x1a8>
2041e9cc:	863a                	mv	a2,a4
2041e9ce:	40565693          	srai	a3,a2,0x5
2041e9d2:	01f67713          	andi	a4,a2,31
2041e9d6:	4781                	li	a5,0
2041e9d8:	4601                	li	a2,0
2041e9da:	00279513          	slli	a0,a5,0x2
2041e9de:	06d79963          	bne	a5,a3,2041ea50 <__subtf3+0x260>
2041e9e2:	e749                	bnez	a4,2041ea6c <__subtf3+0x27c>
2041e9e4:	468d                	li	a3,3
2041e9e6:	8e9d                	sub	a3,a3,a5
2041e9e8:	06e6d963          	ble	a4,a3,2041ea5a <__subtf3+0x26a>
2041e9ec:	4711                	li	a4,4
2041e9ee:	40f707b3          	sub	a5,a4,a5
2041e9f2:	4691                	li	a3,4
2041e9f4:	0cd79c63          	bne	a5,a3,2041eacc <__subtf3+0x2dc>
2041e9f8:	5782                	lw	a5,32(sp)
2041e9fa:	00c03633          	snez	a2,a2
2041e9fe:	8e5d                	or	a2,a2,a5
2041ea00:	d032                	sw	a2,32(sp)
2041ea02:	47c2                	lw	a5,16(sp)
2041ea04:	5602                	lw	a2,32(sp)
2041ea06:	4752                	lw	a4,20(sp)
2041ea08:	55a2                	lw	a1,40(sp)
2041ea0a:	963e                	add	a2,a2,a5
2041ea0c:	d832                	sw	a2,48(sp)
2041ea0e:	00f63633          	sltu	a2,a2,a5
2041ea12:	5792                	lw	a5,36(sp)
2041ea14:	5532                	lw	a0,44(sp)
2041ea16:	97ba                	add	a5,a5,a4
2041ea18:	00c786b3          	add	a3,a5,a2
2041ea1c:	00e7b7b3          	sltu	a5,a5,a4
2041ea20:	873e                	mv	a4,a5
2041ea22:	00c6b7b3          	sltu	a5,a3,a2
2041ea26:	8fd9                	or	a5,a5,a4
2041ea28:	4762                	lw	a4,24(sp)
2041ea2a:	0ff7f793          	andi	a5,a5,255
2041ea2e:	da36                	sw	a3,52(sp)
2041ea30:	95ba                	add	a1,a1,a4
2041ea32:	00f586b3          	add	a3,a1,a5
2041ea36:	4672                	lw	a2,28(sp)
2041ea38:	00e5b733          	sltu	a4,a1,a4
2041ea3c:	00f6b7b3          	sltu	a5,a3,a5
2041ea40:	8fd9                	or	a5,a5,a4
2041ea42:	962a                	add	a2,a2,a0
2041ea44:	0ff7f793          	andi	a5,a5,255
2041ea48:	97b2                	add	a5,a5,a2
2041ea4a:	dc36                	sw	a3,56(sp)
2041ea4c:	de3e                	sw	a5,60(sp)
2041ea4e:	bdc5                	j	2041e93e <__subtf3+0x14e>
2041ea50:	952e                	add	a0,a0,a1
2041ea52:	4108                	lw	a0,0(a0)
2041ea54:	0785                	addi	a5,a5,1
2041ea56:	8e49                	or	a2,a2,a0
2041ea58:	b749                	j	2041e9da <__subtf3+0x1ea>
2041ea5a:	00ae0833          	add	a6,t3,a0
2041ea5e:	00082803          	lw	a6,0(a6)
2041ea62:	0705                	addi	a4,a4,1
2041ea64:	0e11                	addi	t3,t3,4
2041ea66:	ff0e2e23          	sw	a6,-4(t3)
2041ea6a:	bfbd                	j	2041e9e8 <__subtf3+0x1f8>
2041ea6c:	04010813          	addi	a6,sp,64
2041ea70:	00a806b3          	add	a3,a6,a0
2041ea74:	fe06a683          	lw	a3,-32(a3) # 7ffe0 <__stack_size+0x7bfe0>
2041ea78:	02000893          	li	a7,32
2041ea7c:	40e888b3          	sub	a7,a7,a4
2041ea80:	011696b3          	sll	a3,a3,a7
2041ea84:	8e55                	or	a2,a2,a3
2041ea86:	468d                	li	a3,3
2041ea88:	4301                	li	t1,0
2041ea8a:	8e9d                	sub	a3,a3,a5
2041ea8c:	00d34f63          	blt	t1,a3,2041eaaa <__subtf3+0x2ba>
2041ea90:	4511                	li	a0,4
2041ea92:	40f507b3          	sub	a5,a0,a5
2041ea96:	5532                	lw	a0,44(sp)
2041ea98:	068a                	slli	a3,a3,0x2
2041ea9a:	04010893          	addi	a7,sp,64
2041ea9e:	96c6                	add	a3,a3,a7
2041eaa0:	00e55733          	srl	a4,a0,a4
2041eaa4:	fee6a023          	sw	a4,-32(a3)
2041eaa8:	b7a9                	j	2041e9f2 <__subtf3+0x202>
2041eaaa:	00ae0eb3          	add	t4,t3,a0
2041eaae:	000ea803          	lw	a6,0(t4)
2041eab2:	004eae83          	lw	t4,4(t4)
2041eab6:	0305                	addi	t1,t1,1
2041eab8:	00e85833          	srl	a6,a6,a4
2041eabc:	011e9eb3          	sll	t4,t4,a7
2041eac0:	01d86833          	or	a6,a6,t4
2041eac4:	010e2023          	sw	a6,0(t3)
2041eac8:	0e11                	addi	t3,t3,4
2041eaca:	b7c9                	j	2041ea8c <__subtf3+0x29c>
2041eacc:	00279713          	slli	a4,a5,0x2
2041ead0:	972e                	add	a4,a4,a1
2041ead2:	00072023          	sw	zero,0(a4) # fff80000 <pulp__FC+0xfff80001>
2041ead6:	0785                	addi	a5,a5,1
2041ead8:	bf31                	j	2041e9f4 <__subtf3+0x204>
2041eada:	2a070c63          	beqz	a4,2041ed92 <__subtf3+0x5a2>
2041eade:	18041863          	bnez	s0,2041ec6e <__subtf3+0x47e>
2041eae2:	4552                	lw	a0,20(sp)
2041eae4:	4e62                	lw	t3,24(sp)
2041eae6:	4ef2                	lw	t4,28(sp)
2041eae8:	01c566b3          	or	a3,a0,t3
2041eaec:	01d6e6b3          	or	a3,a3,t4
2041eaf0:	0116e6b3          	or	a3,a3,a7
2041eaf4:	10069363          	bnez	a3,2041ebfa <__subtf3+0x40a>
2041eaf8:	d83e                	sw	a5,48(sp)
2041eafa:	5792                	lw	a5,36(sp)
2041eafc:	8432                	mv	s0,a2
2041eafe:	da3e                	sw	a5,52(sp)
2041eb00:	57a2                	lw	a5,40(sp)
2041eb02:	dc3e                	sw	a5,56(sp)
2041eb04:	57b2                	lw	a5,44(sp)
2041eb06:	de3e                	sw	a5,60(sp)
2041eb08:	57c2                	lw	a5,48(sp)
2041eb0a:	0077f713          	andi	a4,a5,7
2041eb0e:	cf05                	beqz	a4,2041eb46 <__subtf3+0x356>
2041eb10:	00f7f713          	andi	a4,a5,15
2041eb14:	4691                	li	a3,4
2041eb16:	02d70863          	beq	a4,a3,2041eb46 <__subtf3+0x356>
2041eb1a:	0791                	addi	a5,a5,4
2041eb1c:	0047b693          	sltiu	a3,a5,4
2041eb20:	d83e                	sw	a5,48(sp)
2041eb22:	57d2                	lw	a5,52(sp)
2041eb24:	5762                	lw	a4,56(sp)
2041eb26:	97b6                	add	a5,a5,a3
2041eb28:	da3e                	sw	a5,52(sp)
2041eb2a:	00d7b7b3          	sltu	a5,a5,a3
2041eb2e:	0ff7f693          	andi	a3,a5,255
2041eb32:	00e687b3          	add	a5,a3,a4
2041eb36:	dc3e                	sw	a5,56(sp)
2041eb38:	5772                	lw	a4,60(sp)
2041eb3a:	00d7b7b3          	sltu	a5,a5,a3
2041eb3e:	0ff7f793          	andi	a5,a5,255
2041eb42:	97ba                	add	a5,a5,a4
2041eb44:	de3e                	sw	a5,60(sp)
2041eb46:	57f2                	lw	a5,60(sp)
2041eb48:	00c79693          	slli	a3,a5,0xc
2041eb4c:	0006dc63          	bgez	a3,2041eb64 <__subtf3+0x374>
2041eb50:	6721                	lui	a4,0x8
2041eb52:	0405                	addi	s0,s0,1
2041eb54:	177d                	addi	a4,a4,-1
2041eb56:	32e408e3          	beq	s0,a4,2041f686 <__subtf3+0xe96>
2041eb5a:	fff80737          	lui	a4,0xfff80
2041eb5e:	177d                	addi	a4,a4,-1
2041eb60:	8ff9                	and	a5,a5,a4
2041eb62:	de3e                	sw	a5,60(sp)
2041eb64:	181c                	addi	a5,sp,48
2041eb66:	4681                	li	a3,0
2041eb68:	458d                	li	a1,3
2041eb6a:	4398                	lw	a4,0(a5)
2041eb6c:	43d0                	lw	a2,4(a5)
2041eb6e:	0685                	addi	a3,a3,1
2041eb70:	830d                	srli	a4,a4,0x3
2041eb72:	0676                	slli	a2,a2,0x1d
2041eb74:	8f51                	or	a4,a4,a2
2041eb76:	c398                	sw	a4,0(a5)
2041eb78:	0791                	addi	a5,a5,4
2041eb7a:	feb698e3          	bne	a3,a1,2041eb6a <__subtf3+0x37a>
2041eb7e:	57f2                	lw	a5,60(sp)
2041eb80:	66a1                	lui	a3,0x8
2041eb82:	0037d713          	srli	a4,a5,0x3
2041eb86:	de3a                	sw	a4,60(sp)
2041eb88:	fff68793          	addi	a5,a3,-1 # 7fff <__stack_size+0x3fff>
2041eb8c:	00f41e63          	bne	s0,a5,2041eba8 <__subtf3+0x3b8>
2041eb90:	5652                	lw	a2,52(sp)
2041eb92:	57c2                	lw	a5,48(sp)
2041eb94:	8fd1                	or	a5,a5,a2
2041eb96:	5662                	lw	a2,56(sp)
2041eb98:	8fd1                	or	a5,a5,a2
2041eb9a:	8fd9                	or	a5,a5,a4
2041eb9c:	c791                	beqz	a5,2041eba8 <__subtf3+0x3b8>
2041eb9e:	de36                	sw	a3,60(sp)
2041eba0:	dc02                	sw	zero,56(sp)
2041eba2:	da02                	sw	zero,52(sp)
2041eba4:	d802                	sw	zero,48(sp)
2041eba6:	4901                	li	s2,0
2041eba8:	57f2                	lw	a5,60(sp)
2041ebaa:	6521                	lui	a0,0x8
2041ebac:	157d                	addi	a0,a0,-1
2041ebae:	8d61                	and	a0,a0,s0
2041ebb0:	00e15403          	lhu	s0,14(sp)
2041ebb4:	00f11623          	sh	a5,12(sp)
2041ebb8:	77e1                	lui	a5,0xffff8
2041ebba:	8c7d                	and	s0,s0,a5
2041ebbc:	8c49                	or	s0,s0,a0
2041ebbe:	00845793          	srli	a5,s0,0x8
2041ebc2:	00791713          	slli	a4,s2,0x7
2041ebc6:	07f7f913          	andi	s2,a5,127
2041ebca:	57c2                	lw	a5,48(sp)
2041ebcc:	00811723          	sh	s0,14(sp)
2041ebd0:	00e96933          	or	s2,s2,a4
2041ebd4:	c09c                	sw	a5,0(s1)
2041ebd6:	57d2                	lw	a5,52(sp)
2041ebd8:	012107a3          	sb	s2,15(sp)
2041ebdc:	40f6                	lw	ra,92(sp)
2041ebde:	c0dc                	sw	a5,4(s1)
2041ebe0:	57e2                	lw	a5,56(sp)
2041ebe2:	4466                	lw	s0,88(sp)
2041ebe4:	8526                	mv	a0,s1
2041ebe6:	c49c                	sw	a5,8(s1)
2041ebe8:	47b2                	lw	a5,12(sp)
2041ebea:	4946                	lw	s2,80(sp)
2041ebec:	49b6                	lw	s3,76(sp)
2041ebee:	c4dc                	sw	a5,12(s1)
2041ebf0:	4a26                	lw	s4,72(sp)
2041ebf2:	44d6                	lw	s1,84(sp)
2041ebf4:	4a96                	lw	s5,68(sp)
2041ebf6:	6125                	addi	sp,sp,96
2041ebf8:	8082                	ret
2041ebfa:	56fd                	li	a3,-1
2041ebfc:	04d71963          	bne	a4,a3,2041ec4e <__subtf3+0x45e>
2041ec00:	5592                	lw	a1,36(sp)
2041ec02:	00f886b3          	add	a3,a7,a5
2041ec06:	00f6b7b3          	sltu	a5,a3,a5
2041ec0a:	d836                	sw	a3,48(sp)
2041ec0c:	00b506b3          	add	a3,a0,a1
2041ec10:	00f68533          	add	a0,a3,a5
2041ec14:	00b6b6b3          	sltu	a3,a3,a1
2041ec18:	85b6                	mv	a1,a3
2041ec1a:	00f536b3          	sltu	a3,a0,a5
2041ec1e:	57a2                	lw	a5,40(sp)
2041ec20:	8ecd                	or	a3,a3,a1
2041ec22:	00fe0733          	add	a4,t3,a5
2041ec26:	0ff6f693          	andi	a3,a3,255
2041ec2a:	00d705b3          	add	a1,a4,a3
2041ec2e:	00f737b3          	sltu	a5,a4,a5
2041ec32:	873e                	mv	a4,a5
2041ec34:	00d5b7b3          	sltu	a5,a1,a3
2041ec38:	8fd9                	or	a5,a5,a4
2041ec3a:	5732                	lw	a4,44(sp)
2041ec3c:	0ff7f793          	andi	a5,a5,255
2041ec40:	da2a                	sw	a0,52(sp)
2041ec42:	9eba                	add	t4,t4,a4
2041ec44:	dc2e                	sw	a1,56(sp)
2041ec46:	97f6                	add	a5,a5,t4
2041ec48:	de3e                	sw	a5,60(sp)
2041ec4a:	8432                	mv	s0,a2
2041ec4c:	b9cd                	j	2041e93e <__subtf3+0x14e>
2041ec4e:	66a1                	lui	a3,0x8
2041ec50:	16fd                	addi	a3,a3,-1
2041ec52:	ead603e3          	beq	a2,a3,2041eaf8 <__subtf3+0x308>
2041ec56:	fff74713          	not	a4,a4
2041ec5a:	07400793          	li	a5,116
2041ec5e:	02e7d763          	ble	a4,a5,2041ec8c <__subtf3+0x49c>
2041ec62:	4785                	li	a5,1
2041ec64:	ce02                	sw	zero,28(sp)
2041ec66:	cc02                	sw	zero,24(sp)
2041ec68:	ca02                	sw	zero,20(sp)
2041ec6a:	c83e                	sw	a5,16(sp)
2041ec6c:	a889                	j	2041ecbe <__subtf3+0x4ce>
2041ec6e:	66a1                	lui	a3,0x8
2041ec70:	16fd                	addi	a3,a3,-1
2041ec72:	e8d603e3          	beq	a2,a3,2041eaf8 <__subtf3+0x308>
2041ec76:	47f2                	lw	a5,28(sp)
2041ec78:	000806b7          	lui	a3,0x80
2041ec7c:	8fd5                	or	a5,a5,a3
2041ec7e:	ce3e                	sw	a5,28(sp)
2041ec80:	f8c00793          	li	a5,-116
2041ec84:	fcf74fe3          	blt	a4,a5,2041ec62 <__subtf3+0x472>
2041ec88:	40e00733          	neg	a4,a4
2041ec8c:	40575693          	srai	a3,a4,0x5
2041ec90:	4581                	li	a1,0
2041ec92:	8b7d                	andi	a4,a4,31
2041ec94:	4781                	li	a5,0
2041ec96:	00279513          	slli	a0,a5,0x2
2041ec9a:	06d79863          	bne	a5,a3,2041ed0a <__subtf3+0x51a>
2041ec9e:	e741                	bnez	a4,2041ed26 <__subtf3+0x536>
2041eca0:	468d                	li	a3,3
2041eca2:	8e9d                	sub	a3,a3,a5
2041eca4:	06e6d863          	ble	a4,a3,2041ed14 <__subtf3+0x524>
2041eca8:	4711                	li	a4,4
2041ecaa:	40f707b3          	sub	a5,a4,a5
2041ecae:	4691                	li	a3,4
2041ecb0:	0cd79a63          	bne	a5,a3,2041ed84 <__subtf3+0x594>
2041ecb4:	47c2                	lw	a5,16(sp)
2041ecb6:	00b035b3          	snez	a1,a1
2041ecba:	8ddd                	or	a1,a1,a5
2041ecbc:	c82e                	sw	a1,16(sp)
2041ecbe:	5782                	lw	a5,32(sp)
2041ecc0:	45c2                	lw	a1,16(sp)
2041ecc2:	5712                	lw	a4,36(sp)
2041ecc4:	4562                	lw	a0,24(sp)
2041ecc6:	95be                	add	a1,a1,a5
2041ecc8:	d82e                	sw	a1,48(sp)
2041ecca:	00f5b5b3          	sltu	a1,a1,a5
2041ecce:	47d2                	lw	a5,20(sp)
2041ecd0:	4872                	lw	a6,28(sp)
2041ecd2:	97ba                	add	a5,a5,a4
2041ecd4:	00b786b3          	add	a3,a5,a1
2041ecd8:	00e7b7b3          	sltu	a5,a5,a4
2041ecdc:	873e                	mv	a4,a5
2041ecde:	00b6b7b3          	sltu	a5,a3,a1
2041ece2:	8fd9                	or	a5,a5,a4
2041ece4:	5722                	lw	a4,40(sp)
2041ece6:	0ff7f793          	andi	a5,a5,255
2041ecea:	da36                	sw	a3,52(sp)
2041ecec:	953a                	add	a0,a0,a4
2041ecee:	00f506b3          	add	a3,a0,a5
2041ecf2:	55b2                	lw	a1,44(sp)
2041ecf4:	00e53733          	sltu	a4,a0,a4
2041ecf8:	00f6b7b3          	sltu	a5,a3,a5
2041ecfc:	8fd9                	or	a5,a5,a4
2041ecfe:	95c2                	add	a1,a1,a6
2041ed00:	0ff7f793          	andi	a5,a5,255
2041ed04:	dc36                	sw	a3,56(sp)
2041ed06:	97ae                	add	a5,a5,a1
2041ed08:	b781                	j	2041ec48 <__subtf3+0x458>
2041ed0a:	951a                	add	a0,a0,t1
2041ed0c:	4108                	lw	a0,0(a0)
2041ed0e:	0785                	addi	a5,a5,1
2041ed10:	8dc9                	or	a1,a1,a0
2041ed12:	b751                	j	2041ec96 <__subtf3+0x4a6>
2041ed14:	00a808b3          	add	a7,a6,a0
2041ed18:	0008a883          	lw	a7,0(a7)
2041ed1c:	0705                	addi	a4,a4,1
2041ed1e:	0811                	addi	a6,a6,4
2041ed20:	ff182e23          	sw	a7,-4(a6)
2041ed24:	b741                	j	2041eca4 <__subtf3+0x4b4>
2041ed26:	04010f93          	addi	t6,sp,64
2041ed2a:	00af86b3          	add	a3,t6,a0
2041ed2e:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <__stack_size+0x7bfd0>
2041ed32:	02000e13          	li	t3,32
2041ed36:	40ee0e33          	sub	t3,t3,a4
2041ed3a:	01c696b3          	sll	a3,a3,t3
2041ed3e:	8dd5                	or	a1,a1,a3
2041ed40:	468d                	li	a3,3
2041ed42:	4e81                	li	t4,0
2041ed44:	8e9d                	sub	a3,a3,a5
2041ed46:	00dece63          	blt	t4,a3,2041ed62 <__subtf3+0x572>
2041ed4a:	4511                	li	a0,4
2041ed4c:	40f507b3          	sub	a5,a0,a5
2041ed50:	068a                	slli	a3,a3,0x2
2041ed52:	0088                	addi	a0,sp,64
2041ed54:	96aa                	add	a3,a3,a0
2041ed56:	4572                	lw	a0,28(sp)
2041ed58:	00e55733          	srl	a4,a0,a4
2041ed5c:	fce6a823          	sw	a4,-48(a3)
2041ed60:	b7b9                	j	2041ecae <__subtf3+0x4be>
2041ed62:	00a80f33          	add	t5,a6,a0
2041ed66:	000f2883          	lw	a7,0(t5)
2041ed6a:	004f2f03          	lw	t5,4(t5)
2041ed6e:	0e85                	addi	t4,t4,1
2041ed70:	00e8d8b3          	srl	a7,a7,a4
2041ed74:	01cf1f33          	sll	t5,t5,t3
2041ed78:	01e8e8b3          	or	a7,a7,t5
2041ed7c:	01182023          	sw	a7,0(a6)
2041ed80:	0811                	addi	a6,a6,4
2041ed82:	b7d1                	j	2041ed46 <__subtf3+0x556>
2041ed84:	00279713          	slli	a4,a5,0x2
2041ed88:	971a                	add	a4,a4,t1
2041ed8a:	00072023          	sw	zero,0(a4) # fff80000 <pulp__FC+0xfff80001>
2041ed8e:	0785                	addi	a5,a5,1
2041ed90:	b705                	j	2041ecb0 <__subtf3+0x4c0>
2041ed92:	6f21                	lui	t5,0x8
2041ed94:	00140593          	addi	a1,s0,1 # 800001 <__stack_size+0x7fc001>
2041ed98:	ffff0e93          	addi	t4,t5,-1 # 7fff <__stack_size+0x3fff>
2041ed9c:	01d5f2b3          	and	t0,a1,t4
2041eda0:	4f85                	li	t6,1
2041eda2:	5612                	lw	a2,36(sp)
2041eda4:	5722                	lw	a4,40(sp)
2041eda6:	5832                	lw	a6,44(sp)
2041eda8:	46d2                	lw	a3,20(sp)
2041edaa:	4e62                	lw	t3,24(sp)
2041edac:	4572                	lw	a0,28(sp)
2041edae:	03010313          	addi	t1,sp,48
2041edb2:	0c5fcb63          	blt	t6,t0,2041ee88 <__subtf3+0x698>
2041edb6:	01c6e5b3          	or	a1,a3,t3
2041edba:	8dc9                	or	a1,a1,a0
2041edbc:	0115e5b3          	or	a1,a1,a7
2041edc0:	ec2d                	bnez	s0,2041ee3a <__subtf3+0x64a>
2041edc2:	e591                	bnez	a1,2041edce <__subtf3+0x5de>
2041edc4:	d83e                	sw	a5,48(sp)
2041edc6:	da32                	sw	a2,52(sp)
2041edc8:	dc3a                	sw	a4,56(sp)
2041edca:	de42                	sw	a6,60(sp)
2041edcc:	bb35                	j	2041eb08 <__subtf3+0x318>
2041edce:	00e665b3          	or	a1,a2,a4
2041edd2:	0105e5b3          	or	a1,a1,a6
2041edd6:	8ddd                	or	a1,a1,a5
2041edd8:	e591                	bnez	a1,2041ede4 <__subtf3+0x5f4>
2041edda:	d846                	sw	a7,48(sp)
2041eddc:	da36                	sw	a3,52(sp)
2041edde:	dc72                	sw	t3,56(sp)
2041ede0:	de2a                	sw	a0,60(sp)
2041ede2:	b31d                	j	2041eb08 <__subtf3+0x318>
2041ede4:	97c6                	add	a5,a5,a7
2041ede6:	0117b8b3          	sltu	a7,a5,a7
2041edea:	9636                	add	a2,a2,a3
2041edec:	011605b3          	add	a1,a2,a7
2041edf0:	00d63633          	sltu	a2,a2,a3
2041edf4:	0115b6b3          	sltu	a3,a1,a7
2041edf8:	8ed1                	or	a3,a3,a2
2041edfa:	0ff6f693          	andi	a3,a3,255
2041edfe:	da2e                	sw	a1,52(sp)
2041ee00:	01c705b3          	add	a1,a4,t3
2041ee04:	d83e                	sw	a5,48(sp)
2041ee06:	00d587b3          	add	a5,a1,a3
2041ee0a:	00d7b6b3          	sltu	a3,a5,a3
2041ee0e:	01c5b733          	sltu	a4,a1,t3
2041ee12:	8ed9                	or	a3,a3,a4
2041ee14:	dc3e                	sw	a5,56(sp)
2041ee16:	0ff6f693          	andi	a3,a3,255
2041ee1a:	00a807b3          	add	a5,a6,a0
2041ee1e:	97b6                	add	a5,a5,a3
2041ee20:	00c79613          	slli	a2,a5,0xc
2041ee24:	00064463          	bltz	a2,2041ee2c <__subtf3+0x63c>
2041ee28:	de3e                	sw	a5,60(sp)
2041ee2a:	b9f9                	j	2041eb08 <__subtf3+0x318>
2041ee2c:	fff80737          	lui	a4,0xfff80
2041ee30:	177d                	addi	a4,a4,-1
2041ee32:	8ff9                	and	a5,a5,a4
2041ee34:	de3e                	sw	a5,60(sp)
2041ee36:	4405                	li	s0,1
2041ee38:	b9c1                	j	2041eb08 <__subtf3+0x318>
2041ee3a:	e599                	bnez	a1,2041ee48 <__subtf3+0x658>
2041ee3c:	d83e                	sw	a5,48(sp)
2041ee3e:	da32                	sw	a2,52(sp)
2041ee40:	dc3a                	sw	a4,56(sp)
2041ee42:	de42                	sw	a6,60(sp)
2041ee44:	8476                	mv	s0,t4
2041ee46:	b1c9                	j	2041eb08 <__subtf3+0x318>
2041ee48:	8f51                	or	a4,a4,a2
2041ee4a:	01076733          	or	a4,a4,a6
2041ee4e:	8fd9                	or	a5,a5,a4
2041ee50:	e791                	bnez	a5,2041ee5c <__subtf3+0x66c>
2041ee52:	d846                	sw	a7,48(sp)
2041ee54:	da36                	sw	a3,52(sp)
2041ee56:	dc72                	sw	t3,56(sp)
2041ee58:	de2a                	sw	a0,60(sp)
2041ee5a:	b7ed                	j	2041ee44 <__subtf3+0x654>
2041ee5c:	de7a                	sw	t5,60(sp)
2041ee5e:	dc02                	sw	zero,56(sp)
2041ee60:	da02                	sw	zero,52(sp)
2041ee62:	d802                	sw	zero,48(sp)
2041ee64:	187c                	addi	a5,sp,60
2041ee66:	4398                	lw	a4,0(a5)
2041ee68:	ffc7a683          	lw	a3,-4(a5) # ffff7ffc <pulp__FC+0xffff7ffd>
2041ee6c:	17f1                	addi	a5,a5,-4
2041ee6e:	070e                	slli	a4,a4,0x3
2041ee70:	82f5                	srli	a3,a3,0x1d
2041ee72:	8f55                	or	a4,a4,a3
2041ee74:	c3d8                	sw	a4,4(a5)
2041ee76:	fef318e3          	bne	t1,a5,2041ee66 <__subtf3+0x676>
2041ee7a:	57c2                	lw	a5,48(sp)
2041ee7c:	6421                	lui	s0,0x8
2041ee7e:	147d                	addi	s0,s0,-1
2041ee80:	078e                	slli	a5,a5,0x3
2041ee82:	d83e                	sw	a5,48(sp)
2041ee84:	4901                	li	s2,0
2041ee86:	b149                	j	2041eb08 <__subtf3+0x318>
2041ee88:	97c6                	add	a5,a5,a7
2041ee8a:	0117b8b3          	sltu	a7,a5,a7
2041ee8e:	9636                	add	a2,a2,a3
2041ee90:	01160eb3          	add	t4,a2,a7
2041ee94:	00d63633          	sltu	a2,a2,a3
2041ee98:	011eb6b3          	sltu	a3,t4,a7
2041ee9c:	8ed1                	or	a3,a3,a2
2041ee9e:	0ff6f693          	andi	a3,a3,255
2041eea2:	9772                	add	a4,a4,t3
2041eea4:	d83e                	sw	a5,48(sp)
2041eea6:	00d707b3          	add	a5,a4,a3
2041eeaa:	00d7b6b3          	sltu	a3,a5,a3
2041eeae:	01c73733          	sltu	a4,a4,t3
2041eeb2:	8ed9                	or	a3,a3,a4
2041eeb4:	0ff6f693          	andi	a3,a3,255
2041eeb8:	9542                	add	a0,a0,a6
2041eeba:	dc3e                	sw	a5,56(sp)
2041eebc:	00a687b3          	add	a5,a3,a0
2041eec0:	de3e                	sw	a5,60(sp)
2041eec2:	da76                	sw	t4,52(sp)
2041eec4:	879a                	mv	a5,t1
2041eec6:	4681                	li	a3,0
2041eec8:	450d                	li	a0,3
2041eeca:	4398                	lw	a4,0(a5)
2041eecc:	43d0                	lw	a2,4(a5)
2041eece:	0685                	addi	a3,a3,1
2041eed0:	8305                	srli	a4,a4,0x1
2041eed2:	067e                	slli	a2,a2,0x1f
2041eed4:	8f51                	or	a4,a4,a2
2041eed6:	c398                	sw	a4,0(a5)
2041eed8:	0791                	addi	a5,a5,4
2041eeda:	fea698e3          	bne	a3,a0,2041eeca <__subtf3+0x6da>
2041eede:	57f2                	lw	a5,60(sp)
2041eee0:	842e                	mv	s0,a1
2041eee2:	8385                	srli	a5,a5,0x1
2041eee4:	de3e                	sw	a5,60(sp)
2041eee6:	67a1                	lui	a5,0x8
2041eee8:	17fd                	addi	a5,a5,-1
2041eeea:	c0f41fe3          	bne	s0,a5,2041eb08 <__subtf3+0x318>
2041eeee:	de02                	sw	zero,60(sp)
2041eef0:	dc02                	sw	zero,56(sp)
2041eef2:	da02                	sw	zero,52(sp)
2041eef4:	d802                	sw	zero,48(sp)
2041eef6:	b909                	j	2041eb08 <__subtf3+0x318>
2041eef8:	1ce05963          	blez	a4,2041f0ca <__subtf3+0x8da>
2041eefc:	e24d                	bnez	a2,2041ef9e <__subtf3+0x7ae>
2041eefe:	5512                	lw	a0,36(sp)
2041ef00:	5622                	lw	a2,40(sp)
2041ef02:	5332                	lw	t1,44(sp)
2041ef04:	00c56833          	or	a6,a0,a2
2041ef08:	00686833          	or	a6,a6,t1
2041ef0c:	00f86833          	or	a6,a6,a5
2041ef10:	9c0805e3          	beqz	a6,2041e8da <__subtf3+0xea>
2041ef14:	fff70693          	addi	a3,a4,-1 # fff7ffff <pulp__FC+0xfff80000>
2041ef18:	e6ad                	bnez	a3,2041ef82 <__subtf3+0x792>
2041ef1a:	4852                	lw	a6,20(sp)
2041ef1c:	40f887b3          	sub	a5,a7,a5
2041ef20:	00f8b733          	sltu	a4,a7,a5
2041ef24:	40a805b3          	sub	a1,a6,a0
2041ef28:	00b83e33          	sltu	t3,a6,a1
2041ef2c:	8d99                	sub	a1,a1,a4
2041ef2e:	d83e                	sw	a5,48(sp)
2041ef30:	da2e                	sw	a1,52(sp)
2041ef32:	4701                	li	a4,0
2041ef34:	00f8f663          	bleu	a5,a7,2041ef40 <__subtf3+0x750>
2041ef38:	41050733          	sub	a4,a0,a6
2041ef3c:	00173713          	seqz	a4,a4
2041ef40:	4862                	lw	a6,24(sp)
2041ef42:	01c76733          	or	a4,a4,t3
2041ef46:	40c805b3          	sub	a1,a6,a2
2041ef4a:	00b83533          	sltu	a0,a6,a1
2041ef4e:	8d99                	sub	a1,a1,a4
2041ef50:	dc2e                	sw	a1,56(sp)
2041ef52:	c709                	beqz	a4,2041ef5c <__subtf3+0x76c>
2041ef54:	41060633          	sub	a2,a2,a6
2041ef58:	00163693          	seqz	a3,a2
2041ef5c:	47f2                	lw	a5,28(sp)
2041ef5e:	8ec9                	or	a3,a3,a0
2041ef60:	4405                	li	s0,1
2041ef62:	406787b3          	sub	a5,a5,t1
2041ef66:	40d786b3          	sub	a3,a5,a3
2041ef6a:	de36                	sw	a3,60(sp)
2041ef6c:	57f2                	lw	a5,60(sp)
2041ef6e:	00c79513          	slli	a0,a5,0xc
2041ef72:	b8055be3          	bgez	a0,2041eb08 <__subtf3+0x318>
2041ef76:	00080737          	lui	a4,0x80
2041ef7a:	177d                	addi	a4,a4,-1
2041ef7c:	8ff9                	and	a5,a5,a4
2041ef7e:	de3e                	sw	a5,60(sp)
2041ef80:	ab3d                	j	2041f4be <__subtf3+0xcce>
2041ef82:	67a1                	lui	a5,0x8
2041ef84:	17fd                	addi	a5,a5,-1
2041ef86:	94f70ae3          	beq	a4,a5,2041e8da <__subtf3+0xea>
2041ef8a:	07400793          	li	a5,116
2041ef8e:	02d7d663          	ble	a3,a5,2041efba <__subtf3+0x7ca>
2041ef92:	4785                	li	a5,1
2041ef94:	d602                	sw	zero,44(sp)
2041ef96:	d402                	sw	zero,40(sp)
2041ef98:	d202                	sw	zero,36(sp)
2041ef9a:	d03e                	sw	a5,32(sp)
2041ef9c:	a881                	j	2041efec <__subtf3+0x7fc>
2041ef9e:	67a1                	lui	a5,0x8
2041efa0:	17fd                	addi	a5,a5,-1
2041efa2:	a0f405e3          	beq	s0,a5,2041e9ac <__subtf3+0x1bc>
2041efa6:	57b2                	lw	a5,44(sp)
2041efa8:	000806b7          	lui	a3,0x80
2041efac:	8fd5                	or	a5,a5,a3
2041efae:	d63e                	sw	a5,44(sp)
2041efb0:	07400793          	li	a5,116
2041efb4:	fce7cfe3          	blt	a5,a4,2041ef92 <__subtf3+0x7a2>
2041efb8:	86ba                	mv	a3,a4
2041efba:	4056d713          	srai	a4,a3,0x5
2041efbe:	4601                	li	a2,0
2041efc0:	8afd                	andi	a3,a3,31
2041efc2:	4781                	li	a5,0
2041efc4:	00279513          	slli	a0,a5,0x2
2041efc8:	06e79c63          	bne	a5,a4,2041f040 <__subtf3+0x850>
2041efcc:	eac1                	bnez	a3,2041f05c <__subtf3+0x86c>
2041efce:	470d                	li	a4,3
2041efd0:	8f1d                	sub	a4,a4,a5
2041efd2:	06d75c63          	ble	a3,a4,2041f04a <__subtf3+0x85a>
2041efd6:	4711                	li	a4,4
2041efd8:	40f707b3          	sub	a5,a4,a5
2041efdc:	4691                	li	a3,4
2041efde:	0cd79f63          	bne	a5,a3,2041f0bc <__subtf3+0x8cc>
2041efe2:	5782                	lw	a5,32(sp)
2041efe4:	00c03633          	snez	a2,a2
2041efe8:	8e5d                	or	a2,a2,a5
2041efea:	d032                	sw	a2,32(sp)
2041efec:	46d2                	lw	a3,20(sp)
2041efee:	45c2                	lw	a1,16(sp)
2041eff0:	5702                	lw	a4,32(sp)
2041eff2:	5792                	lw	a5,36(sp)
2041eff4:	40e58733          	sub	a4,a1,a4
2041eff8:	40f687b3          	sub	a5,a3,a5
2041effc:	00f6b633          	sltu	a2,a3,a5
2041f000:	00e5b6b3          	sltu	a3,a1,a4
2041f004:	40d786b3          	sub	a3,a5,a3
2041f008:	da36                	sw	a3,52(sp)
2041f00a:	d83a                	sw	a4,48(sp)
2041f00c:	4681                	li	a3,0
2041f00e:	00e5f463          	bleu	a4,a1,2041f016 <__subtf3+0x826>
2041f012:	0017b693          	seqz	a3,a5
2041f016:	8ed1                	or	a3,a3,a2
2041f018:	5722                	lw	a4,40(sp)
2041f01a:	4662                	lw	a2,24(sp)
2041f01c:	40e60733          	sub	a4,a2,a4
2041f020:	40d707b3          	sub	a5,a4,a3
2041f024:	dc3e                	sw	a5,56(sp)
2041f026:	00e635b3          	sltu	a1,a2,a4
2041f02a:	4601                	li	a2,0
2041f02c:	c299                	beqz	a3,2041f032 <__subtf3+0x842>
2041f02e:	00173613          	seqz	a2,a4
2041f032:	47f2                	lw	a5,28(sp)
2041f034:	5732                	lw	a4,44(sp)
2041f036:	8e4d                	or	a2,a2,a1
2041f038:	8f99                	sub	a5,a5,a4
2041f03a:	8f91                	sub	a5,a5,a2
2041f03c:	de3e                	sw	a5,60(sp)
2041f03e:	b73d                	j	2041ef6c <__subtf3+0x77c>
2041f040:	952e                	add	a0,a0,a1
2041f042:	4108                	lw	a0,0(a0)
2041f044:	0785                	addi	a5,a5,1
2041f046:	8e49                	or	a2,a2,a0
2041f048:	bfb5                	j	2041efc4 <__subtf3+0x7d4>
2041f04a:	00ae0833          	add	a6,t3,a0
2041f04e:	00082803          	lw	a6,0(a6)
2041f052:	0685                	addi	a3,a3,1
2041f054:	0e11                	addi	t3,t3,4
2041f056:	ff0e2e23          	sw	a6,-4(t3)
2041f05a:	bfa5                	j	2041efd2 <__subtf3+0x7e2>
2041f05c:	04010813          	addi	a6,sp,64
2041f060:	00a80733          	add	a4,a6,a0
2041f064:	fe072703          	lw	a4,-32(a4) # 7ffe0 <__stack_size+0x7bfe0>
2041f068:	02000893          	li	a7,32
2041f06c:	40d888b3          	sub	a7,a7,a3
2041f070:	01171733          	sll	a4,a4,a7
2041f074:	8e59                	or	a2,a2,a4
2041f076:	470d                	li	a4,3
2041f078:	4301                	li	t1,0
2041f07a:	8f1d                	sub	a4,a4,a5
2041f07c:	00e34f63          	blt	t1,a4,2041f09a <__subtf3+0x8aa>
2041f080:	4511                	li	a0,4
2041f082:	40f507b3          	sub	a5,a0,a5
2041f086:	5532                	lw	a0,44(sp)
2041f088:	070a                	slli	a4,a4,0x2
2041f08a:	04010893          	addi	a7,sp,64
2041f08e:	9746                	add	a4,a4,a7
2041f090:	00d556b3          	srl	a3,a0,a3
2041f094:	fed72023          	sw	a3,-32(a4)
2041f098:	b791                	j	2041efdc <__subtf3+0x7ec>
2041f09a:	00ae0eb3          	add	t4,t3,a0
2041f09e:	000ea803          	lw	a6,0(t4)
2041f0a2:	004eae83          	lw	t4,4(t4)
2041f0a6:	0305                	addi	t1,t1,1
2041f0a8:	00d85833          	srl	a6,a6,a3
2041f0ac:	011e9eb3          	sll	t4,t4,a7
2041f0b0:	01d86833          	or	a6,a6,t4
2041f0b4:	010e2023          	sw	a6,0(t3)
2041f0b8:	0e11                	addi	t3,t3,4
2041f0ba:	b7c9                	j	2041f07c <__subtf3+0x88c>
2041f0bc:	00279713          	slli	a4,a5,0x2
2041f0c0:	972e                	add	a4,a4,a1
2041f0c2:	00072023          	sw	zero,0(a4)
2041f0c6:	0785                	addi	a5,a5,1
2041f0c8:	bf19                	j	2041efde <__subtf3+0x7ee>
2041f0ca:	1e070063          	beqz	a4,2041f2aa <__subtf3+0xaba>
2041f0ce:	e455                	bnez	s0,2041f17a <__subtf3+0x98a>
2041f0d0:	4e52                	lw	t3,20(sp)
2041f0d2:	45e2                	lw	a1,24(sp)
2041f0d4:	4ef2                	lw	t4,28(sp)
2041f0d6:	00be66b3          	or	a3,t3,a1
2041f0da:	01d6e6b3          	or	a3,a3,t4
2041f0de:	0116e6b3          	or	a3,a3,a7
2041f0e2:	ea99                	bnez	a3,2041f0f8 <__subtf3+0x908>
2041f0e4:	d83e                	sw	a5,48(sp)
2041f0e6:	5792                	lw	a5,36(sp)
2041f0e8:	8432                	mv	s0,a2
2041f0ea:	da3e                	sw	a5,52(sp)
2041f0ec:	57a2                	lw	a5,40(sp)
2041f0ee:	dc3e                	sw	a5,56(sp)
2041f0f0:	57b2                	lw	a5,44(sp)
2041f0f2:	de3e                	sw	a5,60(sp)
2041f0f4:	892a                	mv	s2,a0
2041f0f6:	bc09                	j	2041eb08 <__subtf3+0x318>
2041f0f8:	56fd                	li	a3,-1
2041f0fa:	06d71063          	bne	a4,a3,2041f15a <__subtf3+0x96a>
2041f0fe:	5312                	lw	t1,36(sp)
2041f100:	411786b3          	sub	a3,a5,a7
2041f104:	00d7b733          	sltu	a4,a5,a3
2041f108:	41c30833          	sub	a6,t1,t3
2041f10c:	010338b3          	sltu	a7,t1,a6
2041f110:	40e80833          	sub	a6,a6,a4
2041f114:	d836                	sw	a3,48(sp)
2041f116:	da42                	sw	a6,52(sp)
2041f118:	4701                	li	a4,0
2041f11a:	00d7f663          	bleu	a3,a5,2041f126 <__subtf3+0x936>
2041f11e:	406e0733          	sub	a4,t3,t1
2041f122:	00173713          	seqz	a4,a4
2041f126:	01176733          	or	a4,a4,a7
2041f12a:	58a2                	lw	a7,40(sp)
2041f12c:	4681                	li	a3,0
2041f12e:	40b88833          	sub	a6,a7,a1
2041f132:	0108b333          	sltu	t1,a7,a6
2041f136:	40e80833          	sub	a6,a6,a4
2041f13a:	dc42                	sw	a6,56(sp)
2041f13c:	c709                	beqz	a4,2041f146 <__subtf3+0x956>
2041f13e:	411585b3          	sub	a1,a1,a7
2041f142:	0015b693          	seqz	a3,a1
2041f146:	57b2                	lw	a5,44(sp)
2041f148:	0066e5b3          	or	a1,a3,t1
2041f14c:	41d787b3          	sub	a5,a5,t4
2041f150:	8f8d                	sub	a5,a5,a1
2041f152:	de3e                	sw	a5,60(sp)
2041f154:	8432                	mv	s0,a2
2041f156:	892a                	mv	s2,a0
2041f158:	bd11                	j	2041ef6c <__subtf3+0x77c>
2041f15a:	66a1                	lui	a3,0x8
2041f15c:	16fd                	addi	a3,a3,-1
2041f15e:	f8d603e3          	beq	a2,a3,2041f0e4 <__subtf3+0x8f4>
2041f162:	fff74713          	not	a4,a4
2041f166:	07400793          	li	a5,116
2041f16a:	02e7d763          	ble	a4,a5,2041f198 <__subtf3+0x9a8>
2041f16e:	4785                	li	a5,1
2041f170:	ce02                	sw	zero,28(sp)
2041f172:	cc02                	sw	zero,24(sp)
2041f174:	ca02                	sw	zero,20(sp)
2041f176:	c83e                	sw	a5,16(sp)
2041f178:	a889                	j	2041f1ca <__subtf3+0x9da>
2041f17a:	66a1                	lui	a3,0x8
2041f17c:	16fd                	addi	a3,a3,-1
2041f17e:	f6d603e3          	beq	a2,a3,2041f0e4 <__subtf3+0x8f4>
2041f182:	47f2                	lw	a5,28(sp)
2041f184:	000806b7          	lui	a3,0x80
2041f188:	8fd5                	or	a5,a5,a3
2041f18a:	ce3e                	sw	a5,28(sp)
2041f18c:	f8c00793          	li	a5,-116
2041f190:	fcf74fe3          	blt	a4,a5,2041f16e <__subtf3+0x97e>
2041f194:	40e00733          	neg	a4,a4
2041f198:	40575693          	srai	a3,a4,0x5
2041f19c:	4581                	li	a1,0
2041f19e:	8b7d                	andi	a4,a4,31
2041f1a0:	4781                	li	a5,0
2041f1a2:	00279893          	slli	a7,a5,0x2
2041f1a6:	06d79b63          	bne	a5,a3,2041f21c <__subtf3+0xa2c>
2041f1aa:	eb49                	bnez	a4,2041f23c <__subtf3+0xa4c>
2041f1ac:	468d                	li	a3,3
2041f1ae:	8e9d                	sub	a3,a3,a5
2041f1b0:	06e6dd63          	ble	a4,a3,2041f22a <__subtf3+0xa3a>
2041f1b4:	4711                	li	a4,4
2041f1b6:	40f707b3          	sub	a5,a4,a5
2041f1ba:	4691                	li	a3,4
2041f1bc:	0ed79063          	bne	a5,a3,2041f29c <__subtf3+0xaac>
2041f1c0:	47c2                	lw	a5,16(sp)
2041f1c2:	00b035b3          	snez	a1,a1
2041f1c6:	8ddd                	or	a1,a1,a5
2041f1c8:	c82e                	sw	a1,16(sp)
2041f1ca:	5692                	lw	a3,36(sp)
2041f1cc:	5802                	lw	a6,32(sp)
2041f1ce:	4742                	lw	a4,16(sp)
2041f1d0:	47d2                	lw	a5,20(sp)
2041f1d2:	40e80733          	sub	a4,a6,a4
2041f1d6:	40f687b3          	sub	a5,a3,a5
2041f1da:	00f6b5b3          	sltu	a1,a3,a5
2041f1de:	00e836b3          	sltu	a3,a6,a4
2041f1e2:	40d786b3          	sub	a3,a5,a3
2041f1e6:	da36                	sw	a3,52(sp)
2041f1e8:	d83a                	sw	a4,48(sp)
2041f1ea:	4681                	li	a3,0
2041f1ec:	00e87463          	bleu	a4,a6,2041f1f4 <__subtf3+0xa04>
2041f1f0:	0017b693          	seqz	a3,a5
2041f1f4:	8ecd                	or	a3,a3,a1
2041f1f6:	4762                	lw	a4,24(sp)
2041f1f8:	55a2                	lw	a1,40(sp)
2041f1fa:	40e58733          	sub	a4,a1,a4
2041f1fe:	40d707b3          	sub	a5,a4,a3
2041f202:	dc3e                	sw	a5,56(sp)
2041f204:	00e5b833          	sltu	a6,a1,a4
2041f208:	4581                	li	a1,0
2041f20a:	c299                	beqz	a3,2041f210 <__subtf3+0xa20>
2041f20c:	00173593          	seqz	a1,a4
2041f210:	57b2                	lw	a5,44(sp)
2041f212:	4772                	lw	a4,28(sp)
2041f214:	0105e5b3          	or	a1,a1,a6
2041f218:	8f99                	sub	a5,a5,a4
2041f21a:	bf1d                	j	2041f150 <__subtf3+0x960>
2041f21c:	989a                	add	a7,a7,t1
2041f21e:	0008a883          	lw	a7,0(a7)
2041f222:	0785                	addi	a5,a5,1
2041f224:	0115e5b3          	or	a1,a1,a7
2041f228:	bfad                	j	2041f1a2 <__subtf3+0x9b2>
2041f22a:	01180e33          	add	t3,a6,a7
2041f22e:	000e2e03          	lw	t3,0(t3)
2041f232:	0705                	addi	a4,a4,1
2041f234:	0811                	addi	a6,a6,4
2041f236:	ffc82e23          	sw	t3,-4(a6)
2041f23a:	bf9d                	j	2041f1b0 <__subtf3+0x9c0>
2041f23c:	04010e13          	addi	t3,sp,64
2041f240:	011e06b3          	add	a3,t3,a7
2041f244:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <__stack_size+0x7bfd0>
2041f248:	02000e93          	li	t4,32
2041f24c:	40ee8eb3          	sub	t4,t4,a4
2041f250:	01d696b3          	sll	a3,a3,t4
2041f254:	8dd5                	or	a1,a1,a3
2041f256:	468d                	li	a3,3
2041f258:	4f01                	li	t5,0
2041f25a:	8e9d                	sub	a3,a3,a5
2041f25c:	00df4f63          	blt	t5,a3,2041f27a <__subtf3+0xa8a>
2041f260:	4811                	li	a6,4
2041f262:	40f807b3          	sub	a5,a6,a5
2041f266:	4872                	lw	a6,28(sp)
2041f268:	068a                	slli	a3,a3,0x2
2041f26a:	04010f93          	addi	t6,sp,64
2041f26e:	96fe                	add	a3,a3,t6
2041f270:	00e85733          	srl	a4,a6,a4
2041f274:	fce6a823          	sw	a4,-48(a3)
2041f278:	b789                	j	2041f1ba <__subtf3+0x9ca>
2041f27a:	01180fb3          	add	t6,a6,a7
2041f27e:	000fae03          	lw	t3,0(t6)
2041f282:	004faf83          	lw	t6,4(t6)
2041f286:	0f05                	addi	t5,t5,1
2041f288:	00ee5e33          	srl	t3,t3,a4
2041f28c:	01df9fb3          	sll	t6,t6,t4
2041f290:	01fe6e33          	or	t3,t3,t6
2041f294:	01c82023          	sw	t3,0(a6)
2041f298:	0811                	addi	a6,a6,4
2041f29a:	b7c9                	j	2041f25c <__subtf3+0xa6c>
2041f29c:	00279713          	slli	a4,a5,0x2
2041f2a0:	971a                	add	a4,a4,t1
2041f2a2:	00072023          	sw	zero,0(a4)
2041f2a6:	0785                	addi	a5,a5,1
2041f2a8:	bf11                	j	2041f1bc <__subtf3+0x9cc>
2041f2aa:	6fa1                	lui	t6,0x8
2041f2ac:	00140693          	addi	a3,s0,1 # 8001 <__stack_size+0x4001>
2041f2b0:	ffff8293          	addi	t0,t6,-1 # 7fff <__stack_size+0x3fff>
2041f2b4:	0056f6b3          	and	a3,a3,t0
2041f2b8:	4805                	li	a6,1
2041f2ba:	5592                	lw	a1,36(sp)
2041f2bc:	4652                	lw	a2,20(sp)
2041f2be:	4362                	lw	t1,24(sp)
2041f2c0:	4f72                	lw	t5,28(sp)
2041f2c2:	5e22                	lw	t3,40(sp)
2041f2c4:	5eb2                	lw	t4,44(sp)
2041f2c6:	14d84d63          	blt	a6,a3,2041f420 <__subtf3+0xc30>
2041f2ca:	01c5e833          	or	a6,a1,t3
2041f2ce:	006666b3          	or	a3,a2,t1
2041f2d2:	01d86833          	or	a6,a6,t4
2041f2d6:	01e6e6b3          	or	a3,a3,t5
2041f2da:	00f86833          	or	a6,a6,a5
2041f2de:	0116e6b3          	or	a3,a3,a7
2041f2e2:	e879                	bnez	s0,2041f3b8 <__subtf3+0xbc8>
2041f2e4:	ea91                	bnez	a3,2041f2f8 <__subtf3+0xb08>
2041f2e6:	d83e                	sw	a5,48(sp)
2041f2e8:	da2e                	sw	a1,52(sp)
2041f2ea:	dc72                	sw	t3,56(sp)
2041f2ec:	de76                	sw	t4,60(sp)
2041f2ee:	e00813e3          	bnez	a6,2041f0f4 <__subtf3+0x904>
2041f2f2:	4401                	li	s0,0
2041f2f4:	4901                	li	s2,0
2041f2f6:	b881                	j	2041eb46 <__subtf3+0x356>
2041f2f8:	00081763          	bnez	a6,2041f306 <__subtf3+0xb16>
2041f2fc:	d846                	sw	a7,48(sp)
2041f2fe:	da32                	sw	a2,52(sp)
2041f300:	dc1a                	sw	t1,56(sp)
2041f302:	de7a                	sw	t5,60(sp)
2041f304:	b011                	j	2041eb08 <__subtf3+0x318>
2041f306:	40f88833          	sub	a6,a7,a5
2041f30a:	40b602b3          	sub	t0,a2,a1
2041f30e:	0108bfb3          	sltu	t6,a7,a6
2041f312:	005636b3          	sltu	a3,a2,t0
2041f316:	41f282b3          	sub	t0,t0,t6
2041f31a:	d842                	sw	a6,48(sp)
2041f31c:	da16                	sw	t0,52(sp)
2041f31e:	4f81                	li	t6,0
2041f320:	0108f663          	bleu	a6,a7,2041f32c <__subtf3+0xb3c>
2041f324:	40c58fb3          	sub	t6,a1,a2
2041f328:	001fbf93          	seqz	t6,t6
2041f32c:	41c303b3          	sub	t2,t1,t3
2041f330:	00dfefb3          	or	t6,t6,a3
2041f334:	41f38a33          	sub	s4,t2,t6
2041f338:	dc52                	sw	s4,56(sp)
2041f33a:	00733ab3          	sltu	s5,t1,t2
2041f33e:	4981                	li	s3,0
2041f340:	000f8463          	beqz	t6,2041f348 <__subtf3+0xb58>
2041f344:	0013b993          	seqz	s3,t2
2041f348:	41df06b3          	sub	a3,t5,t4
2041f34c:	0159e9b3          	or	s3,s3,s5
2041f350:	413686b3          	sub	a3,a3,s3
2041f354:	de36                	sw	a3,60(sp)
2041f356:	00c69f93          	slli	t6,a3,0xc
2041f35a:	040fd563          	bgez	t6,2041f3a4 <__subtf3+0xbb4>
2041f35e:	411786b3          	sub	a3,a5,a7
2041f362:	40c58633          	sub	a2,a1,a2
2041f366:	00d7b833          	sltu	a6,a5,a3
2041f36a:	41060833          	sub	a6,a2,a6
2041f36e:	da42                	sw	a6,52(sp)
2041f370:	d836                	sw	a3,48(sp)
2041f372:	00c5b5b3          	sltu	a1,a1,a2
2041f376:	4801                	li	a6,0
2041f378:	00d7f463          	bleu	a3,a5,2041f380 <__subtf3+0xb90>
2041f37c:	00163813          	seqz	a6,a2
2041f380:	406e07b3          	sub	a5,t3,t1
2041f384:	00b865b3          	or	a1,a6,a1
2041f388:	00fe36b3          	sltu	a3,t3,a5
2041f38c:	8f8d                	sub	a5,a5,a1
2041f38e:	dc3e                	sw	a5,56(sp)
2041f390:	c199                	beqz	a1,2041f396 <__subtf3+0xba6>
2041f392:	0013b713          	seqz	a4,t2
2041f396:	41ee87b3          	sub	a5,t4,t5
2041f39a:	8f55                	or	a4,a4,a3
2041f39c:	40e78733          	sub	a4,a5,a4
2041f3a0:	de3a                	sw	a4,60(sp)
2041f3a2:	bb89                	j	2041f0f4 <__subtf3+0x904>
2041f3a4:	00586833          	or	a6,a6,t0
2041f3a8:	01486833          	or	a6,a6,s4
2041f3ac:	00d86833          	or	a6,a6,a3
2041f3b0:	f40801e3          	beqz	a6,2041f2f2 <__subtf3+0xb02>
2041f3b4:	f54ff06f          	j	2041eb08 <__subtf3+0x318>
2041f3b8:	03010393          	addi	t2,sp,48
2041f3bc:	ea9d                	bnez	a3,2041f3f2 <__subtf3+0xc02>
2041f3be:	02081263          	bnez	a6,2041f3e2 <__subtf3+0xbf2>
2041f3c2:	de7e                	sw	t6,60(sp)
2041f3c4:	dc02                	sw	zero,56(sp)
2041f3c6:	da02                	sw	zero,52(sp)
2041f3c8:	d802                	sw	zero,48(sp)
2041f3ca:	187c                	addi	a5,sp,60
2041f3cc:	4398                	lw	a4,0(a5)
2041f3ce:	ffc7a683          	lw	a3,-4(a5) # 7ffc <__stack_size+0x3ffc>
2041f3d2:	17f1                	addi	a5,a5,-4
2041f3d4:	070e                	slli	a4,a4,0x3
2041f3d6:	82f5                	srli	a3,a3,0x1d
2041f3d8:	8f55                	or	a4,a4,a3
2041f3da:	c3d8                	sw	a4,4(a5)
2041f3dc:	fef398e3          	bne	t2,a5,2041f3cc <__subtf3+0xbdc>
2041f3e0:	bc69                	j	2041ee7a <__subtf3+0x68a>
2041f3e2:	d83e                	sw	a5,48(sp)
2041f3e4:	da2e                	sw	a1,52(sp)
2041f3e6:	dc72                	sw	t3,56(sp)
2041f3e8:	de76                	sw	t4,60(sp)
2041f3ea:	892a                	mv	s2,a0
2041f3ec:	8416                	mv	s0,t0
2041f3ee:	f1aff06f          	j	2041eb08 <__subtf3+0x318>
2041f3f2:	00081763          	bnez	a6,2041f400 <__subtf3+0xc10>
2041f3f6:	d846                	sw	a7,48(sp)
2041f3f8:	da32                	sw	a2,52(sp)
2041f3fa:	dc1a                	sw	t1,56(sp)
2041f3fc:	de7a                	sw	t5,60(sp)
2041f3fe:	b7fd                	j	2041f3ec <__subtf3+0xbfc>
2041f400:	de7e                	sw	t6,60(sp)
2041f402:	dc02                	sw	zero,56(sp)
2041f404:	da02                	sw	zero,52(sp)
2041f406:	d802                	sw	zero,48(sp)
2041f408:	187c                	addi	a5,sp,60
2041f40a:	4398                	lw	a4,0(a5)
2041f40c:	ffc7a683          	lw	a3,-4(a5)
2041f410:	17f1                	addi	a5,a5,-4
2041f412:	070e                	slli	a4,a4,0x3
2041f414:	82f5                	srli	a3,a3,0x1d
2041f416:	8f55                	or	a4,a4,a3
2041f418:	c3d8                	sw	a4,4(a5)
2041f41a:	fef398e3          	bne	t2,a5,2041f40a <__subtf3+0xc1a>
2041f41e:	bcb1                	j	2041ee7a <__subtf3+0x68a>
2041f420:	40f88833          	sub	a6,a7,a5
2041f424:	40b602b3          	sub	t0,a2,a1
2041f428:	0108bfb3          	sltu	t6,a7,a6
2041f42c:	005636b3          	sltu	a3,a2,t0
2041f430:	41f282b3          	sub	t0,t0,t6
2041f434:	d842                	sw	a6,48(sp)
2041f436:	da16                	sw	t0,52(sp)
2041f438:	4f81                	li	t6,0
2041f43a:	0108f663          	bleu	a6,a7,2041f446 <__subtf3+0xc56>
2041f43e:	40c58fb3          	sub	t6,a1,a2
2041f442:	001fbf93          	seqz	t6,t6
2041f446:	41c303b3          	sub	t2,t1,t3
2041f44a:	00dfefb3          	or	t6,t6,a3
2041f44e:	41f38a33          	sub	s4,t2,t6
2041f452:	dc52                	sw	s4,56(sp)
2041f454:	00733ab3          	sltu	s5,t1,t2
2041f458:	4981                	li	s3,0
2041f45a:	000f8463          	beqz	t6,2041f462 <__subtf3+0xc72>
2041f45e:	0013b993          	seqz	s3,t2
2041f462:	41df06b3          	sub	a3,t5,t4
2041f466:	0159e9b3          	or	s3,s3,s5
2041f46a:	413686b3          	sub	a3,a3,s3
2041f46e:	de36                	sw	a3,60(sp)
2041f470:	00c69f93          	slli	t6,a3,0xc
2041f474:	080fd663          	bgez	t6,2041f500 <__subtf3+0xd10>
2041f478:	411786b3          	sub	a3,a5,a7
2041f47c:	40c58633          	sub	a2,a1,a2
2041f480:	00d7b833          	sltu	a6,a5,a3
2041f484:	41060833          	sub	a6,a2,a6
2041f488:	da42                	sw	a6,52(sp)
2041f48a:	d836                	sw	a3,48(sp)
2041f48c:	00c5b5b3          	sltu	a1,a1,a2
2041f490:	4801                	li	a6,0
2041f492:	00d7f463          	bleu	a3,a5,2041f49a <__subtf3+0xcaa>
2041f496:	00163813          	seqz	a6,a2
2041f49a:	406e07b3          	sub	a5,t3,t1
2041f49e:	00b865b3          	or	a1,a6,a1
2041f4a2:	00fe36b3          	sltu	a3,t3,a5
2041f4a6:	8f8d                	sub	a5,a5,a1
2041f4a8:	dc3e                	sw	a5,56(sp)
2041f4aa:	c199                	beqz	a1,2041f4b0 <__subtf3+0xcc0>
2041f4ac:	0013b713          	seqz	a4,t2
2041f4b0:	41ee87b3          	sub	a5,t4,t5
2041f4b4:	8f55                	or	a4,a4,a3
2041f4b6:	40e78733          	sub	a4,a5,a4
2041f4ba:	de3a                	sw	a4,60(sp)
2041f4bc:	892a                	mv	s2,a0
2041f4be:	5572                	lw	a0,60(sp)
2041f4c0:	c929                	beqz	a0,2041f512 <__subtf3+0xd22>
2041f4c2:	061000ef          	jal	ra,2041fd22 <__clzsi2>
2041f4c6:	1551                	addi	a0,a0,-12
2041f4c8:	02000693          	li	a3,32
2041f4cc:	02d56833          	rem	a6,a0,a3
2041f4d0:	02d547b3          	div	a5,a0,a3
2041f4d4:	06080363          	beqz	a6,2041f53a <__subtf3+0xd4a>
2041f4d8:	5771                	li	a4,-4
2041f4da:	00279593          	slli	a1,a5,0x2
2041f4de:	5e41                	li	t3,-16
2041f4e0:	410686b3          	sub	a3,a3,a6
2041f4e4:	02e78733          	mul	a4,a5,a4
2041f4e8:	1771                	addi	a4,a4,-4
2041f4ea:	0dc71263          	bne	a4,t3,2041f5ae <__subtf3+0xdbe>
2041f4ee:	5742                	lw	a4,48(sp)
2041f4f0:	0094                	addi	a3,sp,64
2041f4f2:	95b6                	add	a1,a1,a3
2041f4f4:	01071833          	sll	a6,a4,a6
2041f4f8:	17fd                	addi	a5,a5,-1
2041f4fa:	ff05a823          	sw	a6,-16(a1)
2041f4fe:	a8a1                	j	2041f556 <__subtf3+0xd66>
2041f500:	00586833          	or	a6,a6,t0
2041f504:	01486833          	or	a6,a6,s4
2041f508:	00d86833          	or	a6,a6,a3
2041f50c:	de0803e3          	beqz	a6,2041f2f2 <__subtf3+0xb02>
2041f510:	b77d                	j	2041f4be <__subtf3+0xcce>
2041f512:	5562                	lw	a0,56(sp)
2041f514:	c511                	beqz	a0,2041f520 <__subtf3+0xd30>
2041f516:	00d000ef          	jal	ra,2041fd22 <__clzsi2>
2041f51a:	02050513          	addi	a0,a0,32 # 8020 <__stack_size+0x4020>
2041f51e:	b765                	j	2041f4c6 <__subtf3+0xcd6>
2041f520:	5552                	lw	a0,52(sp)
2041f522:	c511                	beqz	a0,2041f52e <__subtf3+0xd3e>
2041f524:	7fe000ef          	jal	ra,2041fd22 <__clzsi2>
2041f528:	04050513          	addi	a0,a0,64
2041f52c:	bf69                	j	2041f4c6 <__subtf3+0xcd6>
2041f52e:	5542                	lw	a0,48(sp)
2041f530:	7f2000ef          	jal	ra,2041fd22 <__clzsi2>
2041f534:	06050513          	addi	a0,a0,96
2041f538:	b779                	j	2041f4c6 <__subtf3+0xcd6>
2041f53a:	5671                	li	a2,-4
2041f53c:	02c78633          	mul	a2,a5,a2
2041f540:	1818                	addi	a4,sp,48
2041f542:	468d                	li	a3,3
2041f544:	00c705b3          	add	a1,a4,a2
2041f548:	45cc                	lw	a1,12(a1)
2041f54a:	16fd                	addi	a3,a3,-1
2041f54c:	1771                	addi	a4,a4,-4
2041f54e:	cb0c                	sw	a1,16(a4)
2041f550:	fef6dae3          	ble	a5,a3,2041f544 <__subtf3+0xd54>
2041f554:	17fd                	addi	a5,a5,-1
2041f556:	56fd                	li	a3,-1
2041f558:	06d79e63          	bne	a5,a3,2041f5d4 <__subtf3+0xde4>
2041f55c:	10854d63          	blt	a0,s0,2041f676 <__subtf3+0xe86>
2041f560:	40850433          	sub	s0,a0,s0
2041f564:	02000713          	li	a4,32
2041f568:	0405                	addi	s0,s0,1
2041f56a:	02e447b3          	div	a5,s0,a4
2041f56e:	4501                	li	a0,0
2041f570:	02e46433          	rem	s0,s0,a4
2041f574:	4701                	li	a4,0
2041f576:	06f74863          	blt	a4,a5,2041f5e6 <__subtf3+0xdf6>
2041f57a:	873e                	mv	a4,a5
2041f57c:	0007d363          	bgez	a5,2041f582 <__subtf3+0xd92>
2041f580:	4701                	li	a4,0
2041f582:	00279313          	slli	t1,a5,0x2
2041f586:	e049                	bnez	s0,2041f608 <__subtf3+0xe18>
2041f588:	468d                	li	a3,3
2041f58a:	1818                	addi	a4,sp,48
2041f58c:	8e9d                	sub	a3,a3,a5
2041f58e:	0686d563          	ble	s0,a3,2041f5f8 <__subtf3+0xe08>
2041f592:	4711                	li	a4,4
2041f594:	40f707b3          	sub	a5,a4,a5
2041f598:	468d                	li	a3,3
2041f59a:	0cf6d663          	ble	a5,a3,2041f666 <__subtf3+0xe76>
2041f59e:	5742                	lw	a4,48(sp)
2041f5a0:	00a037b3          	snez	a5,a0
2041f5a4:	4401                	li	s0,0
2041f5a6:	8fd9                	or	a5,a5,a4
2041f5a8:	d83e                	sw	a5,48(sp)
2041f5aa:	d5eff06f          	j	2041eb08 <__subtf3+0x318>
2041f5ae:	1810                	addi	a2,sp,48
2041f5b0:	00e60333          	add	t1,a2,a4
2041f5b4:	00e588b3          	add	a7,a1,a4
2041f5b8:	98b2                	add	a7,a7,a2
2041f5ba:	00c32603          	lw	a2,12(t1)
2041f5be:	01032303          	lw	t1,16(t1)
2041f5c2:	00d65633          	srl	a2,a2,a3
2041f5c6:	01031333          	sll	t1,t1,a6
2041f5ca:	00666633          	or	a2,a2,t1
2041f5ce:	00c8a823          	sw	a2,16(a7)
2041f5d2:	bf19                	j	2041f4e8 <__subtf3+0xcf8>
2041f5d4:	00279713          	slli	a4,a5,0x2
2041f5d8:	03010813          	addi	a6,sp,48
2041f5dc:	9742                	add	a4,a4,a6
2041f5de:	00072023          	sw	zero,0(a4)
2041f5e2:	17fd                	addi	a5,a5,-1
2041f5e4:	bf95                	j	2041f558 <__subtf3+0xd68>
2041f5e6:	00271693          	slli	a3,a4,0x2
2041f5ea:	03010893          	addi	a7,sp,48
2041f5ee:	96c6                	add	a3,a3,a7
2041f5f0:	4294                	lw	a3,0(a3)
2041f5f2:	0705                	addi	a4,a4,1
2041f5f4:	8d55                	or	a0,a0,a3
2041f5f6:	b741                	j	2041f576 <__subtf3+0xd86>
2041f5f8:	00670633          	add	a2,a4,t1
2041f5fc:	4210                	lw	a2,0(a2)
2041f5fe:	0405                	addi	s0,s0,1
2041f600:	0711                	addi	a4,a4,4
2041f602:	fec72e23          	sw	a2,-4(a4)
2041f606:	b761                	j	2041f58e <__subtf3+0xd9e>
2041f608:	070a                	slli	a4,a4,0x2
2041f60a:	04010e13          	addi	t3,sp,64
2041f60e:	9772                	add	a4,a4,t3
2041f610:	ff072703          	lw	a4,-16(a4)
2041f614:	02000613          	li	a2,32
2041f618:	8e01                	sub	a2,a2,s0
2041f61a:	00c71733          	sll	a4,a4,a2
2041f61e:	8d59                	or	a0,a0,a4
2041f620:	470d                	li	a4,3
2041f622:	180c                	addi	a1,sp,48
2041f624:	4801                	li	a6,0
2041f626:	8f1d                	sub	a4,a4,a5
2041f628:	00e84f63          	blt	a6,a4,2041f646 <__subtf3+0xe56>
2041f62c:	4691                	li	a3,4
2041f62e:	40f687b3          	sub	a5,a3,a5
2041f632:	56f2                	lw	a3,60(sp)
2041f634:	070a                	slli	a4,a4,0x2
2041f636:	04010f93          	addi	t6,sp,64
2041f63a:	977e                	add	a4,a4,t6
2041f63c:	0086d433          	srl	s0,a3,s0
2041f640:	fe872823          	sw	s0,-16(a4)
2041f644:	bf91                	j	2041f598 <__subtf3+0xda8>
2041f646:	006588b3          	add	a7,a1,t1
2041f64a:	0008a683          	lw	a3,0(a7)
2041f64e:	0048a883          	lw	a7,4(a7)
2041f652:	0805                	addi	a6,a6,1
2041f654:	0086d6b3          	srl	a3,a3,s0
2041f658:	00c898b3          	sll	a7,a7,a2
2041f65c:	0116e6b3          	or	a3,a3,a7
2041f660:	c194                	sw	a3,0(a1)
2041f662:	0591                	addi	a1,a1,4
2041f664:	b7d1                	j	2041f628 <__subtf3+0xe38>
2041f666:	00279713          	slli	a4,a5,0x2
2041f66a:	1810                	addi	a2,sp,48
2041f66c:	9732                	add	a4,a4,a2
2041f66e:	00072023          	sw	zero,0(a4)
2041f672:	0785                	addi	a5,a5,1
2041f674:	b71d                	j	2041f59a <__subtf3+0xdaa>
2041f676:	57f2                	lw	a5,60(sp)
2041f678:	fff80737          	lui	a4,0xfff80
2041f67c:	177d                	addi	a4,a4,-1
2041f67e:	8c09                	sub	s0,s0,a0
2041f680:	8ff9                	and	a5,a5,a4
2041f682:	fa6ff06f          	j	2041ee28 <__subtf3+0x638>
2041f686:	de02                	sw	zero,60(sp)
2041f688:	dc02                	sw	zero,56(sp)
2041f68a:	da02                	sw	zero,52(sp)
2041f68c:	d802                	sw	zero,48(sp)
2041f68e:	cd6ff06f          	j	2041eb64 <__subtf3+0x374>

2041f692 <__fixtfsi>:
2041f692:	4158                	lw	a4,4(a0)
2041f694:	451c                	lw	a5,8(a0)
2041f696:	4550                	lw	a2,12(a0)
2041f698:	4114                	lw	a3,0(a0)
2041f69a:	1101                	addi	sp,sp,-32
2041f69c:	c23a                	sw	a4,4(sp)
2041f69e:	c43e                	sw	a5,8(sp)
2041f6a0:	ca3a                	sw	a4,20(sp)
2041f6a2:	cc3e                	sw	a5,24(sp)
2041f6a4:	6711                	lui	a4,0x4
2041f6a6:	00161793          	slli	a5,a2,0x1
2041f6aa:	c036                	sw	a3,0(sp)
2041f6ac:	c836                	sw	a3,16(sp)
2041f6ae:	c632                	sw	a2,12(sp)
2041f6b0:	0117d693          	srli	a3,a5,0x11
2041f6b4:	ffe70793          	addi	a5,a4,-2 # 3ffe <__stack_size-0x2>
2041f6b8:	4501                	li	a0,0
2041f6ba:	00d7de63          	ble	a3,a5,2041f6d6 <__fixtfsi+0x44>
2041f6be:	01d70793          	addi	a5,a4,29
2041f6c2:	01061593          	slli	a1,a2,0x10
2041f6c6:	827d                	srli	a2,a2,0x1f
2041f6c8:	00d7d963          	ble	a3,a5,2041f6da <__fixtfsi+0x48>
2041f6cc:	80000537          	lui	a0,0x80000
2041f6d0:	fff54513          	not	a0,a0
2041f6d4:	9532                	add	a0,a0,a2
2041f6d6:	6105                	addi	sp,sp,32
2041f6d8:	8082                	ret
2041f6da:	67c1                	lui	a5,0x10
2041f6dc:	81c1                	srli	a1,a1,0x10
2041f6de:	8ddd                	or	a1,a1,a5
2041f6e0:	06f70793          	addi	a5,a4,111
2041f6e4:	8f95                	sub	a5,a5,a3
2041f6e6:	4057d713          	srai	a4,a5,0x5
2041f6ea:	ce2e                	sw	a1,28(sp)
2041f6ec:	8bfd                	andi	a5,a5,31
2041f6ee:	efa5                	bnez	a5,2041f766 <__fixtfsi+0xd4>
2041f6f0:	458d                	li	a1,3
2041f6f2:	0814                	addi	a3,sp,16
2041f6f4:	00271513          	slli	a0,a4,0x2
2041f6f8:	8d99                	sub	a1,a1,a4
2041f6fa:	02f5d563          	ble	a5,a1,2041f724 <__fixtfsi+0x92>
2041f6fe:	4791                	li	a5,4
2041f700:	40e78733          	sub	a4,a5,a4
2041f704:	0814                	addi	a3,sp,16
2041f706:	00271793          	slli	a5,a4,0x2
2041f70a:	97b6                	add	a5,a5,a3
2041f70c:	4691                	li	a3,4
2041f70e:	0007a023          	sw	zero,0(a5) # 10000 <__stack_size+0xc000>
2041f712:	0705                	addi	a4,a4,1
2041f714:	0791                	addi	a5,a5,4
2041f716:	fed71ce3          	bne	a4,a3,2041f70e <__fixtfsi+0x7c>
2041f71a:	4542                	lw	a0,16(sp)
2041f71c:	de4d                	beqz	a2,2041f6d6 <__fixtfsi+0x44>
2041f71e:	40a00533          	neg	a0,a0
2041f722:	bf55                	j	2041f6d6 <__fixtfsi+0x44>
2041f724:	00a68833          	add	a6,a3,a0
2041f728:	00082803          	lw	a6,0(a6)
2041f72c:	0785                	addi	a5,a5,1
2041f72e:	0691                	addi	a3,a3,4
2041f730:	ff06ae23          	sw	a6,-4(a3)
2041f734:	b7d9                	j	2041f6fa <__fixtfsi+0x68>
2041f736:	ff052683          	lw	a3,-16(a0) # 7ffffff0 <pulp__FC+0x7ffffff1>
2041f73a:	ff072303          	lw	t1,-16(a4)
2041f73e:	011696b3          	sll	a3,a3,a7
2041f742:	00f35333          	srl	t1,t1,a5
2041f746:	0066e6b3          	or	a3,a3,t1
2041f74a:	c836                	sw	a3,16(sp)
2041f74c:	4685                	li	a3,1
2041f74e:	ff06c4e3          	blt	a3,a6,2041f736 <__fixtfsi+0xa4>
2041f752:	00168713          	addi	a4,a3,1
2041f756:	1008                	addi	a0,sp,32
2041f758:	068a                	slli	a3,a3,0x2
2041f75a:	96aa                	add	a3,a3,a0
2041f75c:	00f5d7b3          	srl	a5,a1,a5
2041f760:	fef6a823          	sw	a5,-16(a3)
2041f764:	b745                	j	2041f704 <__fixtfsi+0x72>
2041f766:	00170513          	addi	a0,a4,1
2041f76a:	480d                	li	a6,3
2041f76c:	02010313          	addi	t1,sp,32
2041f770:	40e80833          	sub	a6,a6,a4
2041f774:	050a                	slli	a0,a0,0x2
2041f776:	02000893          	li	a7,32
2041f77a:	070a                	slli	a4,a4,0x2
2041f77c:	4681                	li	a3,0
2041f77e:	951a                	add	a0,a0,t1
2041f780:	40f888b3          	sub	a7,a7,a5
2041f784:	971a                	add	a4,a4,t1
2041f786:	b7e1                	j	2041f74e <__fixtfsi+0xbc>

2041f788 <__floatsitf>:
2041f788:	7179                	addi	sp,sp,-48
2041f78a:	d226                	sw	s1,36(sp)
2041f78c:	d606                	sw	ra,44(sp)
2041f78e:	d422                	sw	s0,40(sp)
2041f790:	d04a                	sw	s2,32(sp)
2041f792:	84aa                	mv	s1,a0
2041f794:	c9f1                	beqz	a1,2041f868 <__floatsitf+0xe0>
2041f796:	842e                	mv	s0,a1
2041f798:	01f5d913          	srli	s2,a1,0x1f
2041f79c:	0005d463          	bgez	a1,2041f7a4 <__floatsitf+0x1c>
2041f7a0:	40b00433          	neg	s0,a1
2041f7a4:	8522                	mv	a0,s0
2041f7a6:	2bb5                	jal	2041fd22 <__clzsi2>
2041f7a8:	05150593          	addi	a1,a0,81
2041f7ac:	6711                	lui	a4,0x4
2041f7ae:	0779                	addi	a4,a4,30
2041f7b0:	4055d793          	srai	a5,a1,0x5
2041f7b4:	c822                	sw	s0,16(sp)
2041f7b6:	ca02                	sw	zero,20(sp)
2041f7b8:	cc02                	sw	zero,24(sp)
2041f7ba:	ce02                	sw	zero,28(sp)
2041f7bc:	89fd                	andi	a1,a1,31
2041f7be:	8f09                	sub	a4,a4,a0
2041f7c0:	c585                	beqz	a1,2041f7e8 <__floatsitf+0x60>
2041f7c2:	4689                	li	a3,2
2041f7c4:	0ad79063          	bne	a5,a3,2041f864 <__floatsitf+0xdc>
2041f7c8:	02000693          	li	a3,32
2041f7cc:	8e8d                	sub	a3,a3,a1
2041f7ce:	00d456b3          	srl	a3,s0,a3
2041f7d2:	ce36                	sw	a3,28(sp)
2041f7d4:	fff78693          	addi	a3,a5,-1
2041f7d8:	1010                	addi	a2,sp,32
2041f7da:	078a                	slli	a5,a5,0x2
2041f7dc:	97b2                	add	a5,a5,a2
2041f7de:	00b41433          	sll	s0,s0,a1
2041f7e2:	fe87a823          	sw	s0,-16(a5)
2041f7e6:	a839                	j	2041f804 <__floatsitf+0x7c>
2041f7e8:	468d                	li	a3,3
2041f7ea:	8e9d                	sub	a3,a3,a5
2041f7ec:	1010                	addi	a2,sp,32
2041f7ee:	068a                	slli	a3,a3,0x2
2041f7f0:	96b2                	add	a3,a3,a2
2041f7f2:	ff06a683          	lw	a3,-16(a3)
2041f7f6:	4609                	li	a2,2
2041f7f8:	ce36                	sw	a3,28(sp)
2041f7fa:	4689                	li	a3,2
2041f7fc:	00c79463          	bne	a5,a2,2041f804 <__floatsitf+0x7c>
2041f800:	cc22                	sw	s0,24(sp)
2041f802:	4685                	li	a3,1
2041f804:	081c                	addi	a5,sp,16
2041f806:	00269613          	slli	a2,a3,0x2
2041f80a:	963e                	add	a2,a2,a5
2041f80c:	57fd                	li	a5,-1
2041f80e:	00062023          	sw	zero,0(a2)
2041f812:	16fd                	addi	a3,a3,-1
2041f814:	1671                	addi	a2,a2,-4
2041f816:	fef69ce3          	bne	a3,a5,2041f80e <__floatsitf+0x86>
2041f81a:	47f2                	lw	a5,28(sp)
2041f81c:	66a1                	lui	a3,0x8
2041f81e:	16fd                	addi	a3,a3,-1
2041f820:	8ef9                	and	a3,a3,a4
2041f822:	00e15703          	lhu	a4,14(sp)
2041f826:	00f11623          	sh	a5,12(sp)
2041f82a:	77e1                	lui	a5,0xffff8
2041f82c:	8f7d                	and	a4,a4,a5
2041f82e:	8f55                	or	a4,a4,a3
2041f830:	00875793          	srli	a5,a4,0x8
2041f834:	00e11723          	sh	a4,14(sp)
2041f838:	07f7f793          	andi	a5,a5,127
2041f83c:	00791713          	slli	a4,s2,0x7
2041f840:	8fd9                	or	a5,a5,a4
2041f842:	00f107a3          	sb	a5,15(sp)
2041f846:	47c2                	lw	a5,16(sp)
2041f848:	50b2                	lw	ra,44(sp)
2041f84a:	5422                	lw	s0,40(sp)
2041f84c:	c09c                	sw	a5,0(s1)
2041f84e:	47d2                	lw	a5,20(sp)
2041f850:	8526                	mv	a0,s1
2041f852:	5902                	lw	s2,32(sp)
2041f854:	c0dc                	sw	a5,4(s1)
2041f856:	47e2                	lw	a5,24(sp)
2041f858:	c49c                	sw	a5,8(s1)
2041f85a:	47b2                	lw	a5,12(sp)
2041f85c:	c4dc                	sw	a5,12(s1)
2041f85e:	5492                	lw	s1,36(sp)
2041f860:	6145                	addi	sp,sp,48
2041f862:	8082                	ret
2041f864:	478d                	li	a5,3
2041f866:	b7bd                	j	2041f7d4 <__floatsitf+0x4c>
2041f868:	ce02                	sw	zero,28(sp)
2041f86a:	cc02                	sw	zero,24(sp)
2041f86c:	ca02                	sw	zero,20(sp)
2041f86e:	c802                	sw	zero,16(sp)
2041f870:	4701                	li	a4,0
2041f872:	4901                	li	s2,0
2041f874:	b75d                	j	2041f81a <__floatsitf+0x92>

2041f876 <__extenddftf2>:
2041f876:	01465793          	srli	a5,a2,0x14
2041f87a:	00100737          	lui	a4,0x100
2041f87e:	177d                	addi	a4,a4,-1
2041f880:	7ff7f793          	andi	a5,a5,2047
2041f884:	7179                	addi	sp,sp,-48
2041f886:	8f71                	and	a4,a4,a2
2041f888:	00178693          	addi	a3,a5,1 # ffff8001 <pulp__FC+0xffff8002>
2041f88c:	d422                	sw	s0,40(sp)
2041f88e:	d226                	sw	s1,36(sp)
2041f890:	01f65413          	srli	s0,a2,0x1f
2041f894:	d606                	sw	ra,44(sp)
2041f896:	c82e                	sw	a1,16(sp)
2041f898:	ca3a                	sw	a4,20(sp)
2041f89a:	ce02                	sw	zero,28(sp)
2041f89c:	cc02                	sw	zero,24(sp)
2041f89e:	7ff6f693          	andi	a3,a3,2047
2041f8a2:	4605                	li	a2,1
2041f8a4:	84aa                	mv	s1,a0
2041f8a6:	06d65563          	ble	a3,a2,2041f910 <__extenddftf2+0x9a>
2041f8aa:	6691                	lui	a3,0x4
2041f8ac:	c0068693          	addi	a3,a3,-1024 # 3c00 <__stack_size-0x400>
2041f8b0:	0045d513          	srli	a0,a1,0x4
2041f8b4:	97b6                	add	a5,a5,a3
2041f8b6:	00475693          	srli	a3,a4,0x4
2041f8ba:	0772                	slli	a4,a4,0x1c
2041f8bc:	8f49                	or	a4,a4,a0
2041f8be:	05f2                	slli	a1,a1,0x1c
2041f8c0:	ce36                	sw	a3,28(sp)
2041f8c2:	cc3a                	sw	a4,24(sp)
2041f8c4:	ca2e                	sw	a1,20(sp)
2041f8c6:	c802                	sw	zero,16(sp)
2041f8c8:	4772                	lw	a4,28(sp)
2041f8ca:	6521                	lui	a0,0x8
2041f8cc:	157d                	addi	a0,a0,-1
2041f8ce:	8fe9                	and	a5,a5,a0
2041f8d0:	00e15503          	lhu	a0,14(sp)
2041f8d4:	00e11623          	sh	a4,12(sp)
2041f8d8:	7761                	lui	a4,0xffff8
2041f8da:	8d79                	and	a0,a0,a4
2041f8dc:	8fc9                	or	a5,a5,a0
2041f8de:	00f11723          	sh	a5,14(sp)
2041f8e2:	0087d713          	srli	a4,a5,0x8
2041f8e6:	47c2                	lw	a5,16(sp)
2041f8e8:	00741613          	slli	a2,s0,0x7
2041f8ec:	07f77413          	andi	s0,a4,127
2041f8f0:	c09c                	sw	a5,0(s1)
2041f8f2:	47d2                	lw	a5,20(sp)
2041f8f4:	8c51                	or	s0,s0,a2
2041f8f6:	008107a3          	sb	s0,15(sp)
2041f8fa:	c0dc                	sw	a5,4(s1)
2041f8fc:	47e2                	lw	a5,24(sp)
2041f8fe:	50b2                	lw	ra,44(sp)
2041f900:	5422                	lw	s0,40(sp)
2041f902:	c49c                	sw	a5,8(s1)
2041f904:	47b2                	lw	a5,12(sp)
2041f906:	8526                	mv	a0,s1
2041f908:	c4dc                	sw	a5,12(s1)
2041f90a:	5492                	lw	s1,36(sp)
2041f90c:	6145                	addi	sp,sp,48
2041f90e:	8082                	ret
2041f910:	00b76533          	or	a0,a4,a1
2041f914:	e7cd                	bnez	a5,2041f9be <__extenddftf2+0x148>
2041f916:	d94d                	beqz	a0,2041f8c8 <__extenddftf2+0x52>
2041f918:	c329                	beqz	a4,2041f95a <__extenddftf2+0xe4>
2041f91a:	853a                	mv	a0,a4
2041f91c:	2119                	jal	2041fd22 <__clzsi2>
2041f91e:	03150693          	addi	a3,a0,49 # 8031 <__stack_size+0x4031>
2041f922:	4056d713          	srai	a4,a3,0x5
2041f926:	8afd                	andi	a3,a3,31
2041f928:	ce8d                	beqz	a3,2041f962 <__extenddftf2+0xec>
2041f92a:	5671                	li	a2,-4
2041f92c:	02c70633          	mul	a2,a4,a2
2041f930:	02000813          	li	a6,32
2041f934:	081c                	addi	a5,sp,16
2041f936:	5341                	li	t1,-16
2041f938:	40d80833          	sub	a6,a6,a3
2041f93c:	1671                	addi	a2,a2,-4
2041f93e:	17f1                	addi	a5,a5,-4
2041f940:	06661063          	bne	a2,t1,2041f9a0 <__extenddftf2+0x12a>
2041f944:	101c                	addi	a5,sp,32
2041f946:	fff70613          	addi	a2,a4,-1 # ffff7fff <pulp__FC+0xffff8000>
2041f94a:	070a                	slli	a4,a4,0x2
2041f94c:	973e                	add	a4,a4,a5
2041f94e:	47c2                	lw	a5,16(sp)
2041f950:	00d796b3          	sll	a3,a5,a3
2041f954:	fed72823          	sw	a3,-16(a4)
2041f958:	a025                	j	2041f980 <__extenddftf2+0x10a>
2041f95a:	26e1                	jal	2041fd22 <__clzsi2>
2041f95c:	02050513          	addi	a0,a0,32
2041f960:	bf7d                	j	2041f91e <__extenddftf2+0xa8>
2041f962:	5671                	li	a2,-4
2041f964:	02c70633          	mul	a2,a4,a2
2041f968:	0814                	addi	a3,sp,16
2041f96a:	478d                	li	a5,3
2041f96c:	00c685b3          	add	a1,a3,a2
2041f970:	45cc                	lw	a1,12(a1)
2041f972:	17fd                	addi	a5,a5,-1
2041f974:	16f1                	addi	a3,a3,-4
2041f976:	ca8c                	sw	a1,16(a3)
2041f978:	fee7dae3          	ble	a4,a5,2041f96c <__extenddftf2+0xf6>
2041f97c:	fff70613          	addi	a2,a4,-1
2041f980:	00261713          	slli	a4,a2,0x2
2041f984:	080c                	addi	a1,sp,16
2041f986:	972e                	add	a4,a4,a1
2041f988:	57fd                	li	a5,-1
2041f98a:	00072023          	sw	zero,0(a4)
2041f98e:	167d                	addi	a2,a2,-1
2041f990:	1771                	addi	a4,a4,-4
2041f992:	fef61ce3          	bne	a2,a5,2041f98a <__extenddftf2+0x114>
2041f996:	6791                	lui	a5,0x4
2041f998:	c0c78793          	addi	a5,a5,-1012 # 3c0c <__stack_size-0x3f4>
2041f99c:	8f89                	sub	a5,a5,a0
2041f99e:	b72d                	j	2041f8c8 <__extenddftf2+0x52>
2041f9a0:	080c                	addi	a1,sp,16
2041f9a2:	00c588b3          	add	a7,a1,a2
2041f9a6:	00c8a583          	lw	a1,12(a7)
2041f9aa:	0108a883          	lw	a7,16(a7)
2041f9ae:	0105d5b3          	srl	a1,a1,a6
2041f9b2:	00d898b3          	sll	a7,a7,a3
2041f9b6:	0115e5b3          	or	a1,a1,a7
2041f9ba:	cb8c                	sw	a1,16(a5)
2041f9bc:	b741                	j	2041f93c <__extenddftf2+0xc6>
2041f9be:	67a1                	lui	a5,0x8
2041f9c0:	cd11                	beqz	a0,2041f9dc <__extenddftf2+0x166>
2041f9c2:	01c71793          	slli	a5,a4,0x1c
2041f9c6:	0045d693          	srli	a3,a1,0x4
2041f9ca:	8fd5                	or	a5,a5,a3
2041f9cc:	cc3e                	sw	a5,24(sp)
2041f9ce:	8311                	srli	a4,a4,0x4
2041f9d0:	67a1                	lui	a5,0x8
2041f9d2:	05f2                	slli	a1,a1,0x1c
2041f9d4:	8f5d                	or	a4,a4,a5
2041f9d6:	ca2e                	sw	a1,20(sp)
2041f9d8:	c802                	sw	zero,16(sp)
2041f9da:	ce3a                	sw	a4,28(sp)
2041f9dc:	17fd                	addi	a5,a5,-1
2041f9de:	b5ed                	j	2041f8c8 <__extenddftf2+0x52>

2041f9e0 <__trunctfdf2>:
2041f9e0:	454c                	lw	a1,12(a0)
2041f9e2:	451c                	lw	a5,8(a0)
2041f9e4:	4158                	lw	a4,4(a0)
2041f9e6:	1101                	addi	sp,sp,-32
2041f9e8:	4114                	lw	a3,0(a0)
2041f9ea:	c43e                	sw	a5,8(sp)
2041f9ec:	cc3e                	sw	a5,24(sp)
2041f9ee:	01059793          	slli	a5,a1,0x10
2041f9f2:	c23a                	sw	a4,4(sp)
2041f9f4:	ca3a                	sw	a4,20(sp)
2041f9f6:	83c1                	srli	a5,a5,0x10
2041f9f8:	00159713          	slli	a4,a1,0x1
2041f9fc:	c62e                	sw	a1,12(sp)
2041f9fe:	c036                	sw	a3,0(sp)
2041fa00:	c836                	sw	a3,16(sp)
2041fa02:	ce3e                	sw	a5,28(sp)
2041fa04:	8345                	srli	a4,a4,0x11
2041fa06:	81fd                	srli	a1,a1,0x1f
2041fa08:	01010313          	addi	t1,sp,16
2041fa0c:	0870                	addi	a2,sp,28
2041fa0e:	421c                	lw	a5,0(a2)
2041fa10:	ffc62683          	lw	a3,-4(a2)
2041fa14:	1671                	addi	a2,a2,-4
2041fa16:	078e                	slli	a5,a5,0x3
2041fa18:	82f5                	srli	a3,a3,0x1d
2041fa1a:	8fd5                	or	a5,a5,a3
2041fa1c:	c25c                	sw	a5,4(a2)
2041fa1e:	fec318e3          	bne	t1,a2,2041fa0e <__trunctfdf2+0x2e>
2041fa22:	46c2                	lw	a3,16(sp)
2041fa24:	00170793          	addi	a5,a4,1
2041fa28:	00369513          	slli	a0,a3,0x3
2041fa2c:	66a1                	lui	a3,0x8
2041fa2e:	16fd                	addi	a3,a3,-1
2041fa30:	8ff5                	and	a5,a5,a3
2041fa32:	c82a                	sw	a0,16(sp)
2041fa34:	4685                	li	a3,1
2041fa36:	14f6d063          	ble	a5,a3,2041fb76 <__trunctfdf2+0x196>
2041fa3a:	77f1                	lui	a5,0xffffc
2041fa3c:	40078793          	addi	a5,a5,1024 # ffffc400 <pulp__FC+0xffffc401>
2041fa40:	973e                	add	a4,a4,a5
2041fa42:	7fe00793          	li	a5,2046
2041fa46:	16e7c663          	blt	a5,a4,2041fbb2 <__trunctfdf2+0x1d2>
2041fa4a:	04e05863          	blez	a4,2041fa9a <__trunctfdf2+0xba>
2041fa4e:	47e2                	lw	a5,24(sp)
2041fa50:	4672                	lw	a2,28(sp)
2041fa52:	4852                	lw	a6,20(sp)
2041fa54:	01c7d693          	srli	a3,a5,0x1c
2041fa58:	0612                	slli	a2,a2,0x4
2041fa5a:	8e55                	or	a2,a2,a3
2041fa5c:	00481693          	slli	a3,a6,0x4
2041fa60:	8ec9                	or	a3,a3,a0
2041fa62:	0792                	slli	a5,a5,0x4
2041fa64:	01c85813          	srli	a6,a6,0x1c
2041fa68:	00d036b3          	snez	a3,a3
2041fa6c:	0107e7b3          	or	a5,a5,a6
2041fa70:	8edd                	or	a3,a3,a5
2041fa72:	ca32                	sw	a2,20(sp)
2041fa74:	c836                	sw	a3,16(sp)
2041fa76:	46c2                	lw	a3,16(sp)
2041fa78:	47d2                	lw	a5,20(sp)
2041fa7a:	0076f613          	andi	a2,a3,7
2041fa7e:	12060e63          	beqz	a2,2041fbba <__trunctfdf2+0x1da>
2041fa82:	00f6f613          	andi	a2,a3,15
2041fa86:	4511                	li	a0,4
2041fa88:	12a60963          	beq	a2,a0,2041fbba <__trunctfdf2+0x1da>
2041fa8c:	00468613          	addi	a2,a3,4 # 8004 <__stack_size+0x4004>
2041fa90:	00d636b3          	sltu	a3,a2,a3
2041fa94:	97b6                	add	a5,a5,a3
2041fa96:	86b2                	mv	a3,a2
2041fa98:	a20d                	j	2041fbba <__trunctfdf2+0x1da>
2041fa9a:	fcc00793          	li	a5,-52
2041fa9e:	00f75663          	ble	a5,a4,2041faaa <__trunctfdf2+0xca>
2041faa2:	ca02                	sw	zero,20(sp)
2041faa4:	c836                	sw	a3,16(sp)
2041faa6:	4701                	li	a4,0
2041faa8:	b7f9                	j	2041fa76 <__trunctfdf2+0x96>
2041faaa:	47f2                	lw	a5,28(sp)
2041faac:	000806b7          	lui	a3,0x80
2041fab0:	4881                	li	a7,0
2041fab2:	8fd5                	or	a5,a5,a3
2041fab4:	ce3e                	sw	a5,28(sp)
2041fab6:	03d00793          	li	a5,61
2041faba:	40e78733          	sub	a4,a5,a4
2041fabe:	40575513          	srai	a0,a4,0x5
2041fac2:	879a                	mv	a5,t1
2041fac4:	8b7d                	andi	a4,a4,31
2041fac6:	4681                	li	a3,0
2041fac8:	0007a803          	lw	a6,0(a5)
2041facc:	0685                	addi	a3,a3,1
2041face:	0791                	addi	a5,a5,4
2041fad0:	0108e8b3          	or	a7,a7,a6
2041fad4:	fed51ae3          	bne	a0,a3,2041fac8 <__trunctfdf2+0xe8>
2041fad8:	00269e93          	slli	t4,a3,0x2
2041fadc:	ef1d                	bnez	a4,2041fb1a <__trunctfdf2+0x13a>
2041fade:	478d                	li	a5,3
2041fae0:	8f95                	sub	a5,a5,a3
2041fae2:	02e7d463          	ble	a4,a5,2041fb0a <__trunctfdf2+0x12a>
2041fae6:	4791                	li	a5,4
2041fae8:	40d786b3          	sub	a3,a5,a3
2041faec:	4711                	li	a4,4
2041faee:	00269793          	slli	a5,a3,0x2
2041faf2:	979a                	add	a5,a5,t1
2041faf4:	0007a023          	sw	zero,0(a5)
2041faf8:	0685                	addi	a3,a3,1
2041fafa:	fee69ae3          	bne	a3,a4,2041faee <__trunctfdf2+0x10e>
2041fafe:	4742                	lw	a4,16(sp)
2041fb00:	011037b3          	snez	a5,a7
2041fb04:	8fd9                	or	a5,a5,a4
2041fb06:	c83e                	sw	a5,16(sp)
2041fb08:	bf79                	j	2041faa6 <__trunctfdf2+0xc6>
2041fb0a:	01d60533          	add	a0,a2,t4
2041fb0e:	4108                	lw	a0,0(a0)
2041fb10:	0705                	addi	a4,a4,1
2041fb12:	0611                	addi	a2,a2,4
2041fb14:	fea62e23          	sw	a0,-4(a2)
2041fb18:	b7e9                	j	2041fae2 <__trunctfdf2+0x102>
2041fb1a:	1008                	addi	a0,sp,32
2041fb1c:	01d507b3          	add	a5,a0,t4
2041fb20:	ff07a783          	lw	a5,-16(a5)
2041fb24:	02000813          	li	a6,32
2041fb28:	40e80833          	sub	a6,a6,a4
2041fb2c:	010797b3          	sll	a5,a5,a6
2041fb30:	00f8e8b3          	or	a7,a7,a5
2041fb34:	478d                	li	a5,3
2041fb36:	4e01                	li	t3,0
2041fb38:	8f95                	sub	a5,a5,a3
2041fb3a:	00fe4e63          	blt	t3,a5,2041fb56 <__trunctfdf2+0x176>
2041fb3e:	4611                	li	a2,4
2041fb40:	40d606b3          	sub	a3,a2,a3
2041fb44:	078a                	slli	a5,a5,0x2
2041fb46:	1010                	addi	a2,sp,32
2041fb48:	97b2                	add	a5,a5,a2
2041fb4a:	4672                	lw	a2,28(sp)
2041fb4c:	00e65733          	srl	a4,a2,a4
2041fb50:	fee7a823          	sw	a4,-16(a5)
2041fb54:	bf61                	j	2041faec <__trunctfdf2+0x10c>
2041fb56:	01d60f33          	add	t5,a2,t4
2041fb5a:	000f2503          	lw	a0,0(t5)
2041fb5e:	004f2f03          	lw	t5,4(t5)
2041fb62:	0e05                	addi	t3,t3,1
2041fb64:	00e55533          	srl	a0,a0,a4
2041fb68:	010f1f33          	sll	t5,t5,a6
2041fb6c:	01e56533          	or	a0,a0,t5
2041fb70:	c208                	sw	a0,0(a2)
2041fb72:	0611                	addi	a2,a2,4
2041fb74:	b7d9                	j	2041fb3a <__trunctfdf2+0x15a>
2041fb76:	4652                	lw	a2,20(sp)
2041fb78:	47e2                	lw	a5,24(sp)
2041fb7a:	4872                	lw	a6,28(sp)
2041fb7c:	00f666b3          	or	a3,a2,a5
2041fb80:	0106e6b3          	or	a3,a3,a6
2041fb84:	8ec9                	or	a3,a3,a0
2041fb86:	e709                	bnez	a4,2041fb90 <__trunctfdf2+0x1b0>
2041fb88:	00d036b3          	snez	a3,a3
2041fb8c:	4781                	li	a5,0
2041fb8e:	b5f5                	j	2041fa7a <__trunctfdf2+0x9a>
2041fb90:	cad1                	beqz	a3,2041fc24 <__trunctfdf2+0x244>
2041fb92:	01c65693          	srli	a3,a2,0x1c
2041fb96:	0812                	slli	a6,a6,0x4
2041fb98:	00479613          	slli	a2,a5,0x4
2041fb9c:	83f1                	srli	a5,a5,0x1c
2041fb9e:	00400737          	lui	a4,0x400
2041fba2:	8ed1                	or	a3,a3,a2
2041fba4:	0107e7b3          	or	a5,a5,a6
2041fba8:	8fd9                	or	a5,a5,a4
2041fbaa:	9ae1                	andi	a3,a3,-8
2041fbac:	7ff00713          	li	a4,2047
2041fbb0:	b5e9                	j	2041fa7a <__trunctfdf2+0x9a>
2041fbb2:	4781                	li	a5,0
2041fbb4:	4681                	li	a3,0
2041fbb6:	7ff00713          	li	a4,2047
2041fbba:	00879513          	slli	a0,a5,0x8
2041fbbe:	00055b63          	bgez	a0,2041fbd4 <__trunctfdf2+0x1f4>
2041fbc2:	0705                	addi	a4,a4,1
2041fbc4:	7ff00613          	li	a2,2047
2041fbc8:	06c70063          	beq	a4,a2,2041fc28 <__trunctfdf2+0x248>
2041fbcc:	ff800637          	lui	a2,0xff800
2041fbd0:	167d                	addi	a2,a2,-1
2041fbd2:	8ff1                	and	a5,a5,a2
2041fbd4:	01d79613          	slli	a2,a5,0x1d
2041fbd8:	828d                	srli	a3,a3,0x3
2041fbda:	8ed1                	or	a3,a3,a2
2041fbdc:	7ff00613          	li	a2,2047
2041fbe0:	838d                	srli	a5,a5,0x3
2041fbe2:	00c71963          	bne	a4,a2,2041fbf4 <__trunctfdf2+0x214>
2041fbe6:	8edd                	or	a3,a3,a5
2041fbe8:	4781                	li	a5,0
2041fbea:	c689                	beqz	a3,2041fbf4 <__trunctfdf2+0x214>
2041fbec:	000807b7          	lui	a5,0x80
2041fbf0:	4681                	li	a3,0
2041fbf2:	4581                	li	a1,0
2041fbf4:	00100637          	lui	a2,0x100
2041fbf8:	167d                	addi	a2,a2,-1
2041fbfa:	8ff1                	and	a5,a5,a2
2041fbfc:	80100637          	lui	a2,0x80100
2041fc00:	7ff77713          	andi	a4,a4,2047
2041fc04:	167d                	addi	a2,a2,-1
2041fc06:	0752                	slli	a4,a4,0x14
2041fc08:	8ff1                	and	a5,a5,a2
2041fc0a:	8fd9                	or	a5,a5,a4
2041fc0c:	80000737          	lui	a4,0x80000
2041fc10:	fff74713          	not	a4,a4
2041fc14:	05fe                	slli	a1,a1,0x1f
2041fc16:	8ff9                	and	a5,a5,a4
2041fc18:	00b7e733          	or	a4,a5,a1
2041fc1c:	8536                	mv	a0,a3
2041fc1e:	85ba                	mv	a1,a4
2041fc20:	6105                	addi	sp,sp,32
2041fc22:	8082                	ret
2041fc24:	4781                	li	a5,0
2041fc26:	bf41                	j	2041fbb6 <__trunctfdf2+0x1d6>
2041fc28:	4781                	li	a5,0
2041fc2a:	4681                	li	a3,0
2041fc2c:	b765                	j	2041fbd4 <__trunctfdf2+0x1f4>
	...

2041fc30 <__mulsi3>:
2041fc30:	862a                	mv	a2,a0
2041fc32:	4501                	li	a0,0
2041fc34:	0015f693          	andi	a3,a1,1
2041fc38:	c291                	beqz	a3,2041fc3c <__mulsi3+0xc>
2041fc3a:	9532                	add	a0,a0,a2
2041fc3c:	8185                	srli	a1,a1,0x1
2041fc3e:	0606                	slli	a2,a2,0x1
2041fc40:	f9f5                	bnez	a1,2041fc34 <__mulsi3+0x4>
2041fc42:	8082                	ret
2041fc44:	0000                	unimp
	...

2041fc48 <__muldi3>:
2041fc48:	8286                	mv	t0,ra
2041fc4a:	8f2a                	mv	t5,a0
2041fc4c:	852e                	mv	a0,a1
2041fc4e:	8fb6                	mv	t6,a3
2041fc50:	85fa                	mv	a1,t5
2041fc52:	8732                	mv	a4,a2
2041fc54:	4781                	li	a5,0
2041fc56:	4381                	li	t2,0
2041fc58:	4e81                	li	t4,0
2041fc5a:	00b38833          	add	a6,t2,a1
2041fc5e:	00177e13          	andi	t3,a4,1
2041fc62:	00179893          	slli	a7,a5,0x1
2041fc66:	0005a313          	slti	t1,a1,0
2041fc6a:	8305                	srli	a4,a4,0x1
2041fc6c:	97f6                	add	a5,a5,t4
2041fc6e:	000e0763          	beqz	t3,2041fc7c <__muldi3+0x34>
2041fc72:	00783e33          	sltu	t3,a6,t2
2041fc76:	83c2                	mv	t2,a6
2041fc78:	00fe0eb3          	add	t4,t3,a5
2041fc7c:	0586                	slli	a1,a1,0x1
2041fc7e:	011367b3          	or	a5,t1,a7
2041fc82:	ff61                	bnez	a4,2041fc5a <__muldi3+0x12>
2041fc84:	c509                	beqz	a0,2041fc8e <__muldi3+0x46>
2041fc86:	85b2                	mv	a1,a2
2041fc88:	fa9ff0ef          	jal	ra,2041fc30 <__mulsi3>
2041fc8c:	9eaa                	add	t4,t4,a0
2041fc8e:	000f8763          	beqz	t6,2041fc9c <__muldi3+0x54>
2041fc92:	85fe                	mv	a1,t6
2041fc94:	857a                	mv	a0,t5
2041fc96:	f9bff0ef          	jal	ra,2041fc30 <__mulsi3>
2041fc9a:	9eaa                	add	t4,t4,a0
2041fc9c:	851e                	mv	a0,t2
2041fc9e:	85f6                	mv	a1,t4
2041fca0:	8282                	jr	t0
	...

2041fca4 <__divsi3>:
2041fca4:	02054e63          	bltz	a0,2041fce0 <__umodsi3+0x8>
2041fca8:	0405c363          	bltz	a1,2041fcee <__umodsi3+0x16>

2041fcac <__udivsi3>:
2041fcac:	862e                	mv	a2,a1
2041fcae:	85aa                	mv	a1,a0
2041fcb0:	557d                	li	a0,-1
2041fcb2:	c215                	beqz	a2,2041fcd6 <__udivsi3+0x2a>
2041fcb4:	4685                	li	a3,1
2041fcb6:	00b67863          	bleu	a1,a2,2041fcc6 <__udivsi3+0x1a>
2041fcba:	00c05663          	blez	a2,2041fcc6 <__udivsi3+0x1a>
2041fcbe:	0606                	slli	a2,a2,0x1
2041fcc0:	0686                	slli	a3,a3,0x1
2041fcc2:	feb66ce3          	bltu	a2,a1,2041fcba <__udivsi3+0xe>
2041fcc6:	4501                	li	a0,0
2041fcc8:	00c5e463          	bltu	a1,a2,2041fcd0 <__udivsi3+0x24>
2041fccc:	8d91                	sub	a1,a1,a2
2041fcce:	8d55                	or	a0,a0,a3
2041fcd0:	8285                	srli	a3,a3,0x1
2041fcd2:	8205                	srli	a2,a2,0x1
2041fcd4:	faf5                	bnez	a3,2041fcc8 <__udivsi3+0x1c>
2041fcd6:	8082                	ret

2041fcd8 <__umodsi3>:
2041fcd8:	8286                	mv	t0,ra
2041fcda:	3fc9                	jal	2041fcac <__udivsi3>
2041fcdc:	852e                	mv	a0,a1
2041fcde:	8282                	jr	t0
2041fce0:	40a00533          	neg	a0,a0
2041fce4:	0005d763          	bgez	a1,2041fcf2 <__umodsi3+0x1a>
2041fce8:	40b005b3          	neg	a1,a1
2041fcec:	b7c1                	j	2041fcac <__udivsi3>
2041fcee:	40b005b3          	neg	a1,a1
2041fcf2:	8286                	mv	t0,ra
2041fcf4:	3f65                	jal	2041fcac <__udivsi3>
2041fcf6:	40a00533          	neg	a0,a0
2041fcfa:	8282                	jr	t0

2041fcfc <__modsi3>:
2041fcfc:	8286                	mv	t0,ra
2041fcfe:	0005c763          	bltz	a1,2041fd0c <__modsi3+0x10>
2041fd02:	00054963          	bltz	a0,2041fd14 <__modsi3+0x18>
2041fd06:	375d                	jal	2041fcac <__udivsi3>
2041fd08:	852e                	mv	a0,a1
2041fd0a:	8282                	jr	t0
2041fd0c:	40b005b3          	neg	a1,a1
2041fd10:	fe055be3          	bgez	a0,2041fd06 <__modsi3+0xa>
2041fd14:	40a00533          	neg	a0,a0
2041fd18:	3f51                	jal	2041fcac <__udivsi3>
2041fd1a:	40b00533          	neg	a0,a1
2041fd1e:	8282                	jr	t0
	...

2041fd22 <__clzsi2>:
2041fd22:	67c1                	lui	a5,0x10
2041fd24:	02f57663          	bleu	a5,a0,2041fd50 <__clzsi2+0x2e>
2041fd28:	0ff00793          	li	a5,255
2041fd2c:	00a7b7b3          	sltu	a5,a5,a0
2041fd30:	078e                	slli	a5,a5,0x3
2041fd32:	02000713          	li	a4,32
2041fd36:	8f1d                	sub	a4,a4,a5
2041fd38:	00f557b3          	srl	a5,a0,a5
2041fd3c:	20422537          	lui	a0,0x20422
2041fd40:	74050513          	addi	a0,a0,1856 # 20422740 <__clz_tab>
2041fd44:	97aa                	add	a5,a5,a0
2041fd46:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xc000>
2041fd4a:	40a70533          	sub	a0,a4,a0
2041fd4e:	8082                	ret
2041fd50:	01000737          	lui	a4,0x1000
2041fd54:	47c1                	li	a5,16
2041fd56:	fce56ee3          	bltu	a0,a4,2041fd32 <__clzsi2+0x10>
2041fd5a:	47e1                	li	a5,24
2041fd5c:	bfd9                	j	2041fd32 <__clzsi2+0x10>
