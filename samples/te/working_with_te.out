@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*n: int32)], [], type="auto"),
             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*n)], [], type="auto"),
             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*n)], [], type="auto")}
  buffer_map = {A_1: A, B_1: B, C_1: C}
  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [n], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [n], [stride_1], type="auto"), C_1: C_3: Buffer(C_2, float32, [n], [stride_2], type="auto")} {
  for (i: int32, 0, n) {
    C[(i*stride_2)] = (A[(i*stride)] + B[(i*stride_1)])
  }
}


Numpy running time: 0.021095
naive: 0.001552
@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*n: int32)], [], type="auto"),
             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*n)], [], type="auto"),
             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*n)], [], type="auto")}
  buffer_map = {A_1: A, B_1: B, C_1: C}
  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [n], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [n], [stride_1], type="auto"), C_1: C_3: Buffer(C_2, float32, [n], [stride_2], type="auto")} {
  for (i: int32, 0, n) "parallel" {
    C[(i*stride_2)] = (A[(i*stride)] + B[(i*stride_1)])
  }
}


parallel: 0.001351
; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32*, i32 }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }
%closure_loop_parallel_i.outer = type { i8*, i8*, i8* }

@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@__TVMBackendParallelLaunch = linkonce dllexport local_unnamed_addr global i32 (i32 (i32, %0*, i8*)*, i8*, i32)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: (num_args == 3), myadd_parallel: num_args should be 3\00", align 1
@.str.1 = private constant [146 x i8] c"Assert fail: ((((arg.A.code == 3) || (arg.A.code == 13)) || (arg.A.code == 7)) || (arg.A.code == 4)), myadd_parallel: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [146 x i8] c"Assert fail: ((((arg.B.code == 3) || (arg.B.code == 13)) || (arg.B.code == 7)) || (arg.B.code == 4)), myadd_parallel: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [146 x i8] c"Assert fail: ((((arg.C.code == 3) || (arg.C.code == 13)) || (arg.C.code == 7)) || (arg.C.code == 4)), myadd_parallel: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [87 x i8] c"Assert fail: (1 == tir.tvm_struct_get(arg.A, 0, 4)), arg.A.ndim is expected to equal 1\00", align 1
@.str.5 = private constant [202 x i8] c"Assert fail: (((tir.tvm_struct_get(arg.A, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg.A, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg.A, 0, 7) == (uint16)1)), arg.A.dtype is expected to be float32\00", align 1
@.str.6 = private constant [139 x i8] c"Assert fail: (3276800 == int32(arg.A.shape[0])), Argument arg.A.shape[0] has an unsatisfied constraint: (3276800 == int32(arg.A.shape[0]))\00", align 1
@.str.7 = private constant [89 x i8] c"Assert fail: (1 == int32(arg.A.strides[0])), arg.A.strides: expected to be compact array\00", align 1
@.str.8 = private constant [166 x i8] c"Assert fail: ((uint64)0 == tir.tvm_struct_get(arg.A, 0, 8)), Argument arg.A.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg.A, 0, 8))\00", align 1
@.str.9 = private constant [152 x i8] c"Assert fail: (1 == tir.tvm_struct_get(arg.A, 0, 10)), Argument arg.A.device_type has an unsatisfied constraint: (1 == tir.tvm_struct_get(arg.A, 0, 10))\00", align 1
@.str.10 = private constant [87 x i8] c"Assert fail: (1 == tir.tvm_struct_get(arg.B, 0, 4)), arg.B.ndim is expected to equal 1\00", align 1
@.str.11 = private constant [202 x i8] c"Assert fail: (((tir.tvm_struct_get(arg.B, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg.B, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg.B, 0, 7) == (uint16)1)), arg.B.dtype is expected to be float32\00", align 1
@.str.12 = private constant [139 x i8] c"Assert fail: (3276800 == int32(arg.B.shape[0])), Argument arg.B.shape[0] has an unsatisfied constraint: (3276800 == int32(arg.B.shape[0]))\00", align 1
@.str.13 = private constant [89 x i8] c"Assert fail: (1 == int32(arg.B.strides[0])), arg.B.strides: expected to be compact array\00", align 1
@.str.14 = private constant [166 x i8] c"Assert fail: ((uint64)0 == tir.tvm_struct_get(arg.B, 0, 8)), Argument arg.B.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg.B, 0, 8))\00", align 1
@.str.15 = private constant [152 x i8] c"Assert fail: (1 == tir.tvm_struct_get(arg.B, 0, 10)), Argument arg.B.device_type has an unsatisfied constraint: (1 == tir.tvm_struct_get(arg.B, 0, 10))\00", align 1
@.str.16 = private constant [158 x i8] c"Assert fail: (dev_id == tir.tvm_struct_get(arg.B, 0, 9)), Argument arg.B.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg.B, 0, 9))\00", align 1
@.str.17 = private constant [87 x i8] c"Assert fail: (1 == tir.tvm_struct_get(arg.C, 0, 4)), arg.C.ndim is expected to equal 1\00", align 1
@.str.18 = private constant [202 x i8] c"Assert fail: (((tir.tvm_struct_get(arg.C, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg.C, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg.C, 0, 7) == (uint16)1)), arg.C.dtype is expected to be float32\00", align 1
@.str.19 = private constant [139 x i8] c"Assert fail: (3276800 == int32(arg.C.shape[0])), Argument arg.C.shape[0] has an unsatisfied constraint: (3276800 == int32(arg.C.shape[0]))\00", align 1
@.str.20 = private constant [89 x i8] c"Assert fail: (1 == int32(arg.C.strides[0])), arg.C.strides: expected to be compact array\00", align 1
@.str.21 = private constant [166 x i8] c"Assert fail: ((uint64)0 == tir.tvm_struct_get(arg.C, 0, 8)), Argument arg.C.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg.C, 0, 8))\00", align 1
@.str.22 = private constant [152 x i8] c"Assert fail: (1 == tir.tvm_struct_get(arg.C, 0, 10)), Argument arg.C.device_type has an unsatisfied constraint: (1 == tir.tvm_struct_get(arg.C, 0, 10))\00", align 1
@.str.23 = private constant [158 x i8] c"Assert fail: (dev_id == tir.tvm_struct_get(arg.C, 0, 9)), Argument arg.C.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg.C, 0, 9))\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [15 x i8] c"myadd_parallel\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @myadd_parallel(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %0 = icmp eq i32 %num_args, 3, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %2 = bitcast i8* %args to %1**, !dbg !18
  %arg.A63 = load %1*, %1** %2, align 8, !dbg !18
  %arg.A.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %3 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %4 = bitcast i8* %3 to %1**, !dbg !18
  %arg.B64 = load %1*, %1** %4, align 8, !dbg !18
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %arg.B.code = load i32, i32* %5, align 4, !dbg !18, !tbaa !34
  %6 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %7 = bitcast i8* %6 to %1**, !dbg !18
  %arg.C65 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %arg.C.code = load i32, i32* %8, align 4, !dbg !18, !tbaa !36
  %9 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 0, !dbg !18
  %A = load i8*, i8** %9, align 8, !dbg !18
  %ptrint = ptrtoint i8* %A to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 127, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %10 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 4, !dbg !18
  %arg.A.shape = load i64*, i64** %10, align 8, !dbg !18
  %11 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 5, !dbg !18
  %arg.A.strides = load i64*, i64** %11, align 8, !dbg !18
  %12 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %12, align 4, !dbg !18
  %13 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 0, !dbg !18
  %B = load i8*, i8** %13, align 8, !dbg !18
  %ptrint1 = ptrtoint i8* %B to i64, !dbg !18
  %maskedptr2 = and i64 %ptrint1, 127, !dbg !18
  %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond3), !dbg !18
  %14 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 4, !dbg !18
  %arg.B.shape = load i64*, i64** %14, align 8, !dbg !18
  %15 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 5, !dbg !18
  %arg.B.strides = load i64*, i64** %15, align 8, !dbg !18
  %16 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 0, !dbg !18
  %C = load i8*, i8** %16, align 8, !dbg !18
  %ptrint4 = ptrtoint i8* %C to i64, !dbg !18
  %maskedptr5 = and i64 %ptrint4, 127, !dbg !18
  %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond6), !dbg !18
  %17 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 4, !dbg !18
  %arg.C.shape = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 5, !dbg !18
  %arg.C.strides = load i64*, i64** %18, align 8, !dbg !18
  switch i32 %arg.A.code, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ], !dbg !18

assert_fail7:                                     ; preds = %assert_end
  %19 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %19(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end8:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %arg.B.code, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ], !dbg !18

assert_fail9:                                     ; preds = %assert_end8
  %20 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %20(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %arg.C.code, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ], !dbg !18

assert_fail11:                                    ; preds = %assert_end10
  %21 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %21(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  %22 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 2, !dbg !18
  %23 = load i32, i32* %22, align 4, !dbg !18
  %24 = icmp eq i32 %23, 1, !dbg !18
  br i1 %24, label %assert_end16, label %assert_fail13, !dbg !18, !prof !19

assert_fail13:                                    ; preds = %assert_end12
  %25 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %25(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end16:                                     ; preds = %assert_end12
  %26 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 3, i32 2, !dbg !18
  %27 = load i16, i16* %26, align 2, !dbg !18
  %28 = icmp eq i16 %27, 1, !dbg !18
  %29 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 3, i32 1, !dbg !18
  %30 = load i8, i8* %29, align 1, !dbg !18
  %31 = icmp eq i8 %30, 32, !dbg !18
  %32 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 3, i32 0, !dbg !18
  %33 = load i8, i8* %32, align 1, !dbg !18
  %34 = icmp eq i8 %33, 2, !dbg !18
  %35 = and i1 %31, %34, !dbg !18
  %36 = and i1 %28, %35, !dbg !18
  br i1 %36, label %assert_end18, label %assert_fail17, !dbg !18, !prof !19

assert_fail17:                                    ; preds = %assert_end16
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %37(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end18:                                     ; preds = %assert_end16
  %38 = load i64, i64* %arg.A.shape, align 8, !dbg !18, !tbaa !39
  %39 = trunc i64 %38 to i32, !dbg !18
  %40 = icmp eq i32 %39, 3276800, !dbg !18
  br i1 %40, label %assert_end20, label %assert_fail19, !dbg !18, !prof !19

assert_fail19:                                    ; preds = %assert_end18
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %41(i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end20:                                     ; preds = %assert_end18
  %42 = icmp eq i64* %arg.A.strides, null, !dbg !18
  br i1 %42, label %if_end, label %if_then, !dbg !18, !prof !49

if_then:                                          ; preds = %assert_end20
  %43 = load i64, i64* %arg.A.strides, align 8, !dbg !18, !tbaa !50
  %44 = trunc i64 %43 to i32, !dbg !18
  %45 = icmp eq i32 %44, 1, !dbg !18
  br i1 %45, label %if_end, label %assert_fail21, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end20, %if_then
  %46 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 6, !dbg !18
  %47 = load i64, i64* %46, align 8, !dbg !18
  %48 = icmp eq i64 %47, 0, !dbg !18
  br i1 %48, label %assert_end24, label %assert_fail23, !dbg !18, !prof !19

assert_fail21:                                    ; preds = %if_then
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %49(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail23:                                    ; preds = %if_end
  %50 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %50(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end24:                                     ; preds = %if_end
  %51 = getelementptr inbounds %1, %1* %arg.A63, i64 0, i32 1, i32 0, !dbg !18
  %52 = load i32, i32* %51, align 4, !dbg !18
  %53 = icmp eq i32 %52, 1, !dbg !18
  br i1 %53, label %assert_end26, label %assert_fail25, !dbg !18, !prof !19

assert_fail25:                                    ; preds = %assert_end24
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %54(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end26:                                     ; preds = %assert_end24
  %55 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 2, !dbg !18
  %56 = load i32, i32* %55, align 4, !dbg !18
  %57 = icmp eq i32 %56, 1, !dbg !18
  br i1 %57, label %assert_end30, label %assert_fail27, !dbg !18, !prof !19

assert_fail27:                                    ; preds = %assert_end26
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %58(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end30:                                     ; preds = %assert_end26
  %59 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 3, i32 2, !dbg !18
  %60 = load i16, i16* %59, align 2, !dbg !18
  %61 = icmp eq i16 %60, 1, !dbg !18
  %62 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 3, i32 1, !dbg !18
  %63 = load i8, i8* %62, align 1, !dbg !18
  %64 = icmp eq i8 %63, 32, !dbg !18
  %65 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 3, i32 0, !dbg !18
  %66 = load i8, i8* %65, align 1, !dbg !18
  %67 = icmp eq i8 %66, 2, !dbg !18
  %68 = and i1 %64, %67, !dbg !18
  %69 = and i1 %61, %68, !dbg !18
  br i1 %69, label %assert_end32, label %assert_fail31, !dbg !18, !prof !19

assert_fail31:                                    ; preds = %assert_end30
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %70(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end32:                                     ; preds = %assert_end30
  %71 = load i64, i64* %arg.B.shape, align 8, !dbg !18, !tbaa !60
  %72 = trunc i64 %71 to i32, !dbg !18
  %73 = icmp eq i32 %72, 3276800, !dbg !18
  br i1 %73, label %assert_end34, label %assert_fail33, !dbg !18, !prof !19

assert_fail33:                                    ; preds = %assert_end32
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %74(i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end34:                                     ; preds = %assert_end32
  %75 = icmp eq i64* %arg.B.strides, null, !dbg !18
  br i1 %75, label %if_end36, label %if_then35, !dbg !18, !prof !49

if_then35:                                        ; preds = %assert_end34
  %76 = load i64, i64* %arg.B.strides, align 8, !dbg !18, !tbaa !70
  %77 = trunc i64 %76 to i32, !dbg !18
  %78 = icmp eq i32 %77, 1, !dbg !18
  br i1 %78, label %if_end36, label %assert_fail37, !dbg !18, !prof !19

if_end36:                                         ; preds = %assert_end34, %if_then35
  %79 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 6, !dbg !18
  %80 = load i64, i64* %79, align 8, !dbg !18
  %81 = icmp eq i64 %80, 0, !dbg !18
  br i1 %81, label %assert_end40, label %assert_fail39, !dbg !18, !prof !19

assert_fail37:                                    ; preds = %if_then35
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %82(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail39:                                    ; preds = %if_end36
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %83(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end40:                                     ; preds = %if_end36
  %84 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 1, i32 0, !dbg !18
  %85 = load i32, i32* %84, align 4, !dbg !18
  %86 = icmp eq i32 %85, 1, !dbg !18
  br i1 %86, label %assert_end42, label %assert_fail41, !dbg !18, !prof !19

assert_fail41:                                    ; preds = %assert_end40
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end42:                                     ; preds = %assert_end40
  %88 = getelementptr inbounds %1, %1* %arg.B64, i64 0, i32 1, i32 1, !dbg !18
  %89 = load i32, i32* %88, align 4, !dbg !18
  %90 = icmp eq i32 %dev_id, %89, !dbg !18
  br i1 %90, label %assert_end44, label %assert_fail43, !dbg !18, !prof !19

assert_fail43:                                    ; preds = %assert_end42
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([158 x i8], [158 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end44:                                     ; preds = %assert_end42
  %92 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 2, !dbg !18
  %93 = load i32, i32* %92, align 4, !dbg !18
  %94 = icmp eq i32 %93, 1, !dbg !18
  br i1 %94, label %assert_end48, label %assert_fail45, !dbg !18, !prof !19

assert_fail45:                                    ; preds = %assert_end44
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %95(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %assert_end44
  %96 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 3, i32 2, !dbg !18
  %97 = load i16, i16* %96, align 2, !dbg !18
  %98 = icmp eq i16 %97, 1, !dbg !18
  %99 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 3, i32 1, !dbg !18
  %100 = load i8, i8* %99, align 1, !dbg !18
  %101 = icmp eq i8 %100, 32, !dbg !18
  %102 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 3, i32 0, !dbg !18
  %103 = load i8, i8* %102, align 1, !dbg !18
  %104 = icmp eq i8 %103, 2, !dbg !18
  %105 = and i1 %101, %104, !dbg !18
  %106 = and i1 %98, %105, !dbg !18
  br i1 %106, label %assert_end50, label %assert_fail49, !dbg !18, !prof !19

assert_fail49:                                    ; preds = %assert_end48
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %107(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end50:                                     ; preds = %assert_end48
  %108 = load i64, i64* %arg.C.shape, align 8, !dbg !18, !tbaa !80
  %109 = trunc i64 %108 to i32, !dbg !18
  %110 = icmp eq i32 %109, 3276800, !dbg !18
  br i1 %110, label %assert_end52, label %assert_fail51, !dbg !18, !prof !19

assert_fail51:                                    ; preds = %assert_end50
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %111(i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end52:                                     ; preds = %assert_end50
  %112 = icmp eq i64* %arg.C.strides, null, !dbg !18
  br i1 %112, label %if_end54, label %if_then53, !dbg !18, !prof !49

if_then53:                                        ; preds = %assert_end52
  %113 = load i64, i64* %arg.C.strides, align 8, !dbg !18, !tbaa !90
  %114 = trunc i64 %113 to i32, !dbg !18
  %115 = icmp eq i32 %114, 1, !dbg !18
  br i1 %115, label %if_end54, label %assert_fail55, !dbg !18, !prof !19

if_end54:                                         ; preds = %assert_end52, %if_then53
  %116 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 6, !dbg !18
  %117 = load i64, i64* %116, align 8, !dbg !18
  %118 = icmp eq i64 %117, 0, !dbg !18
  br i1 %118, label %assert_end58, label %assert_fail57, !dbg !18, !prof !19

assert_fail55:                                    ; preds = %if_then53
  %119 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %119(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail57:                                    ; preds = %if_end54
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %120(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end58:                                     ; preds = %if_end54
  %121 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 1, i32 0, !dbg !18
  %122 = load i32, i32* %121, align 4, !dbg !18
  %123 = icmp eq i32 %122, 1, !dbg !18
  br i1 %123, label %assert_end60, label %assert_fail59, !dbg !18, !prof !19

assert_fail59:                                    ; preds = %assert_end58
  %124 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %124(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end60:                                     ; preds = %assert_end58
  %125 = getelementptr inbounds %1, %1* %arg.C65, i64 0, i32 1, i32 1, !dbg !18
  %126 = load i32, i32* %125, align 4, !dbg !18
  %127 = icmp eq i32 %dev_id, %126, !dbg !18
  br i1 %127, label %assert_end62, label %assert_fail61, !dbg !18, !prof !19

assert_fail61:                                    ; preds = %assert_end60
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %128(i8* getelementptr inbounds ([158 x i8], [158 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end62:                                     ; preds = %assert_end60
  %129 = tail call fastcc i32 @myadd_parallel_compute_(i8* %C, i8* %A, i8* %B), !dbg !18
  ret i32 %129, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @myadd_parallel_compute_(i8* noalias align 128 %0, i8* noalias align 128 %1, i8* noalias align 128 %2) unnamed_addr #2 {
entry:
  %3 = alloca %closure_loop_parallel_i.outer, align 8
  %4 = getelementptr inbounds %closure_loop_parallel_i.outer, %closure_loop_parallel_i.outer* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %closure_loop_parallel_i.outer, %closure_loop_parallel_i.outer* %3, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %closure_loop_parallel_i.outer, %closure_loop_parallel_i.outer* %3, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  %7 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !20
  %8 = bitcast %closure_loop_parallel_i.outer* %3 to i8*
  %9 = call i32 %7(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda, i8* nonnull %8, i32 0)
  ret i32 %9
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda(i32 %task_id, %0* nocapture readonly %0, i8* nocapture readonly %1) #3 {
parallel_closure_entry:
  %2 = bitcast i8* %1 to float**
  %C1 = load float*, float** %2, align 8
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to float**
  %A2 = load float*, float** %4, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 16
  %6 = bitcast i8* %5 to float**
  %B3 = load float*, float** %6, align 8
  %7 = getelementptr inbounds %0, %0* %0, i64 0, i32 1
  %num_task = load i32, i32* %7, align 4
  %8 = add nsw i32 %num_task, 409599
  %9 = sdiv i32 %8, %num_task
  %10 = add nsw i32 %task_id, 1
  %11 = mul nsw i32 %9, %10
  %12 = icmp slt i32 %11, 409600
  %13 = select i1 %12, i32 %11, i32 409600
  %14 = mul nsw i32 %9, %task_id
  %15 = icmp slt i32 %14, 409600
  %16 = select i1 %15, i32 %14, i32 409600
  %17 = icmp slt i32 %16, %13
  br i1 %17, label %for_body_i.outer.preheader, label %for_end_i.outer, !prof !19

for_body_i.outer.preheader:                       ; preds = %parallel_closure_entry
  %18 = sext i32 %16 to i64
  %wide.trip.count = sext i32 %13 to i64
  %19 = sub nsw i64 %wide.trip.count, %18
  %20 = xor i64 %18, -1
  %21 = add nsw i64 %20, %wide.trip.count
  %xtraiter = and i64 %19, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for_body_i.outer.prol.loopexit, label %for_body_i.outer.prol

for_body_i.outer.prol:                            ; preds = %for_body_i.outer.preheader, %for_body_i.outer.prol
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for_body_i.outer.prol ], [ %18, %for_body_i.outer.preheader ]
  %i.outer4.prol = phi i32 [ %32, %for_body_i.outer.prol ], [ %16, %for_body_i.outer.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for_body_i.outer.prol ], [ %xtraiter, %for_body_i.outer.preheader ]
  %cse_var_1.prol = shl nsw i32 %i.outer4.prol, 3
  %22 = sext i32 %cse_var_1.prol to i64
  %23 = getelementptr inbounds float, float* %B3, i64 %22
  %24 = bitcast float* %23 to <8 x float>*
  %25 = load <8 x float>, <8 x float>* %24, align 32, !tbaa !100
  %26 = getelementptr inbounds float, float* %A2, i64 %22
  %27 = bitcast float* %26 to <8 x float>*
  %28 = load <8 x float>, <8 x float>* %27, align 32, !tbaa !102
  %29 = fadd <8 x float> %25, %28
  %30 = getelementptr inbounds float, float* %C1, i64 %22
  %31 = bitcast float* %30 to <8 x float>*
  store <8 x float> %29, <8 x float>* %31, align 32, !tbaa !104
  %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
  %32 = add nsw i32 %i.outer4.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for_body_i.outer.prol.loopexit, label %for_body_i.outer.prol, !llvm.loop !106

for_body_i.outer.prol.loopexit:                   ; preds = %for_body_i.outer.prol, %for_body_i.outer.preheader
  %indvars.iv.unr = phi i64 [ %18, %for_body_i.outer.preheader ], [ %indvars.iv.next.prol, %for_body_i.outer.prol ]
  %i.outer4.unr = phi i32 [ %16, %for_body_i.outer.preheader ], [ %32, %for_body_i.outer.prol ]
  %33 = icmp ult i64 %21, 3
  br i1 %33, label %for_end_i.outer, label %for_body_i.outer

for_body_i.outer:                                 ; preds = %for_body_i.outer.prol.loopexit, %for_body_i.outer
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for_body_i.outer ], [ %indvars.iv.unr, %for_body_i.outer.prol.loopexit ]
  %i.outer4 = phi i32 [ %77, %for_body_i.outer ], [ %i.outer4.unr, %for_body_i.outer.prol.loopexit ]
  %cse_var_1 = shl nsw i32 %i.outer4, 3
  %34 = sext i32 %cse_var_1 to i64
  %35 = getelementptr inbounds float, float* %B3, i64 %34
  %36 = bitcast float* %35 to <8 x float>*
  %37 = load <8 x float>, <8 x float>* %36, align 32, !tbaa !100
  %38 = getelementptr inbounds float, float* %A2, i64 %34
  %39 = bitcast float* %38 to <8 x float>*
  %40 = load <8 x float>, <8 x float>* %39, align 32, !tbaa !102
  %41 = fadd <8 x float> %37, %40
  %42 = getelementptr inbounds float, float* %C1, i64 %34
  %43 = bitcast float* %42 to <8 x float>*
  store <8 x float> %41, <8 x float>* %43, align 32, !tbaa !104
  %44 = shl i32 %i.outer4, 3
  %cse_var_1.1 = add i32 %44, 8
  %45 = sext i32 %cse_var_1.1 to i64
  %46 = getelementptr inbounds float, float* %B3, i64 %45
  %47 = bitcast float* %46 to <8 x float>*
  %48 = load <8 x float>, <8 x float>* %47, align 32, !tbaa !100
  %49 = getelementptr inbounds float, float* %A2, i64 %45
  %50 = bitcast float* %49 to <8 x float>*
  %51 = load <8 x float>, <8 x float>* %50, align 32, !tbaa !102
  %52 = fadd <8 x float> %48, %51
  %53 = getelementptr inbounds float, float* %C1, i64 %45
  %54 = bitcast float* %53 to <8 x float>*
  store <8 x float> %52, <8 x float>* %54, align 32, !tbaa !104
  %55 = shl i32 %i.outer4, 3
  %cse_var_1.2 = add i32 %55, 16
  %56 = sext i32 %cse_var_1.2 to i64
  %57 = getelementptr inbounds float, float* %B3, i64 %56
  %58 = bitcast float* %57 to <8 x float>*
  %59 = load <8 x float>, <8 x float>* %58, align 32, !tbaa !100
  %60 = getelementptr inbounds float, float* %A2, i64 %56
  %61 = bitcast float* %60 to <8 x float>*
  %62 = load <8 x float>, <8 x float>* %61, align 32, !tbaa !102
  %63 = fadd <8 x float> %59, %62
  %64 = getelementptr inbounds float, float* %C1, i64 %56
  %65 = bitcast float* %64 to <8 x float>*
  store <8 x float> %63, <8 x float>* %65, align 32, !tbaa !104
  %66 = shl i32 %i.outer4, 3
  %cse_var_1.3 = add i32 %66, 24
  %67 = sext i32 %cse_var_1.3 to i64
  %68 = getelementptr inbounds float, float* %B3, i64 %67
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 32, !tbaa !100
  %71 = getelementptr inbounds float, float* %A2, i64 %67
  %72 = bitcast float* %71 to <8 x float>*
  %73 = load <8 x float>, <8 x float>* %72, align 32, !tbaa !102
  %74 = fadd <8 x float> %70, %73
  %75 = getelementptr inbounds float, float* %C1, i64 %67
  %76 = bitcast float* %75 to <8 x float>*
  store <8 x float> %74, <8 x float>* %76, align 32, !tbaa !104
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %77 = add nsw i32 %i.outer4, 4
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, %wide.trip.count
  br i1 %exitcond.3, label %for_end_i.outer, label %for_body_i.outer, !prof !49

for_end_i.outer:                                  ; preds = %for_body_i.outer.prol.loopexit, %for_body_i.outer, %parallel_closure_entry
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="skylake" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="skylake" }
attributes #3 = { nofree norecurse nounwind "target-cpu"="skylake" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, dwoId: 1)
!1 = !DIFile(filename: "model.tvm", directory: "/tmp/")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mcpu=skylake"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "myadd_parallel", scope: !1, file: !1, type: !6, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x15a12a0.w4.b0", !25, i64 0}
!25 = !{!"0x15a12a0.w8.b0", !26, i64 0}
!26 = !{!"0x15a12a0.w16.b0", !27, i64 0}
!27 = !{!"0x15a12a0.w32.b0", !28, i64 0}
!28 = !{!"0x15a12a0.w64.b0", !29, i64 0}
!29 = !{!"0x15a12a0.w128.b0", !30, i64 0}
!30 = !{!"0x15a12a0.w256.b0", !31, i64 0}
!31 = !{!"0x15a12a0.w512.b0", !32, i64 0}
!32 = !{!"0x15a12a0.w1024.b0", !33, i64 0}
!33 = !{!"0x15a12a0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x15a12a0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x15a12a0.w4.b8", !38, i64 0}
!38 = !{!"0x15a12a0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x1b19f60.w8.b0", !41, i64 0}
!41 = !{!"0x1b19f60.w16.b0", !42, i64 0}
!42 = !{!"0x1b19f60.w32.b0", !43, i64 0}
!43 = !{!"0x1b19f60.w64.b0", !44, i64 0}
!44 = !{!"0x1b19f60.w128.b0", !45, i64 0}
!45 = !{!"0x1b19f60.w256.b0", !46, i64 0}
!46 = !{!"0x1b19f60.w512.b0", !47, i64 0}
!47 = !{!"0x1b19f60.w1024.b0", !48, i64 0}
!48 = !{!"0x1b19f60", !22, i64 0}
!49 = !{!"branch_weights", i32 1, i32 1048576}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x19459a0.w8.b0", !52, i64 0}
!52 = !{!"0x19459a0.w16.b0", !53, i64 0}
!53 = !{!"0x19459a0.w32.b0", !54, i64 0}
!54 = !{!"0x19459a0.w64.b0", !55, i64 0}
!55 = !{!"0x19459a0.w128.b0", !56, i64 0}
!56 = !{!"0x19459a0.w256.b0", !57, i64 0}
!57 = !{!"0x19459a0.w512.b0", !58, i64 0}
!58 = !{!"0x19459a0.w1024.b0", !59, i64 0}
!59 = !{!"0x19459a0", !22, i64 0}
!60 = !{!61, !61, i64 0}
!61 = !{!"0x14bed20.w8.b0", !62, i64 0}
!62 = !{!"0x14bed20.w16.b0", !63, i64 0}
!63 = !{!"0x14bed20.w32.b0", !64, i64 0}
!64 = !{!"0x14bed20.w64.b0", !65, i64 0}
!65 = !{!"0x14bed20.w128.b0", !66, i64 0}
!66 = !{!"0x14bed20.w256.b0", !67, i64 0}
!67 = !{!"0x14bed20.w512.b0", !68, i64 0}
!68 = !{!"0x14bed20.w1024.b0", !69, i64 0}
!69 = !{!"0x14bed20", !22, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"0x1ac6740.w8.b0", !72, i64 0}
!72 = !{!"0x1ac6740.w16.b0", !73, i64 0}
!73 = !{!"0x1ac6740.w32.b0", !74, i64 0}
!74 = !{!"0x1ac6740.w64.b0", !75, i64 0}
!75 = !{!"0x1ac6740.w128.b0", !76, i64 0}
!76 = !{!"0x1ac6740.w256.b0", !77, i64 0}
!77 = !{!"0x1ac6740.w512.b0", !78, i64 0}
!78 = !{!"0x1ac6740.w1024.b0", !79, i64 0}
!79 = !{!"0x1ac6740", !22, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x1a31d00.w8.b0", !82, i64 0}
!82 = !{!"0x1a31d00.w16.b0", !83, i64 0}
!83 = !{!"0x1a31d00.w32.b0", !84, i64 0}
!84 = !{!"0x1a31d00.w64.b0", !85, i64 0}
!85 = !{!"0x1a31d00.w128.b0", !86, i64 0}
!86 = !{!"0x1a31d00.w256.b0", !87, i64 0}
!87 = !{!"0x1a31d00.w512.b0", !88, i64 0}
!88 = !{!"0x1a31d00.w1024.b0", !89, i64 0}
!89 = !{!"0x1a31d00", !22, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"0x1a36b70.w8.b0", !92, i64 0}
!92 = !{!"0x1a36b70.w16.b0", !93, i64 0}
!93 = !{!"0x1a36b70.w32.b0", !94, i64 0}
!94 = !{!"0x1a36b70.w64.b0", !95, i64 0}
!95 = !{!"0x1a36b70.w128.b0", !96, i64 0}
!96 = !{!"0x1a36b70.w256.b0", !97, i64 0}
!97 = !{!"0x1a36b70.w512.b0", !98, i64 0}
!98 = !{!"0x1a36b70.w1024.b0", !99, i64 0}
!99 = !{!"0x1a36b70", !22, i64 0}
!100 = !{!101, !101, i64 0}
!101 = !{!"0x1b26430", !22, i64 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"0x1b70df0", !22, i64 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"0x183d5d0", !22, i64 0}
!106 = distinct !{!106, !107}
!107 = !{!"llvm.loop.unroll.disable"}

vector: 0.001351
@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {A: Buffer(A_2: Pointer(float32), float32, [3276800], []),
             B: Buffer(B_2: Pointer(float32), float32, [3276800], []),
             C: Buffer(C_2: Pointer(float32), float32, [3276800], [])}
  buffer_map = {A_1: A, B_1: B, C_1: C}
  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [3276800], []), B_1: B_3: Buffer(B_2, float32, [3276800], []), C_1: C_3: Buffer(C_2, float32, [3276800], [])} {
  for (i.outer: int32, 0, 409600) "parallel" {
    let cse_var_1: int32 = (i.outer*8)
    C[ramp(cse_var_1, 1, 8)] = (A[ramp(cse_var_1, 1, 8)] + B[ramp(cse_var_1, 1, 8)])
  }
}


            Operator	              Timing	         Performance
               numpy	0.021095081279054285	                 1.0
               naive	        0.0015517457	  0.0735595980633058
            parallel	         0.001351229	 0.06405422108241231
              vector	        0.0013509484	 0.06404091940339585
