stages:
  - build
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_HOME: "$CI_PROJECT_DIR/.poetry"
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: noninteractive

before_script:
  - apt-get update
  - apt-get install -y wget build-essential pkg-config python3-dev curl ninja-build cmake g++ git python3-setuptools gcc libtinfo-dev zlib1g-dev build-essential cmake libedit-dev libxml2-dev llvm-dev
  - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
  - export PATH=${POETRY_HOME}/bin:${PATH}
  - poetry config experimental.new-installer false
  - poetry install -E automate

#sca:
#  stage: build
#  image: ubuntu:latest
#  script:
#    - set -e
#    - echo "$PWD"
#  tags:
#    - docker

build_micro:
  stage: build
  image: ubuntu:20.04

  script:
    - set -e
    - poetry install -E micro
    - poetry run ./scripts/install_micro.sh
    - poetry run ./scripts/install_zephyr.sh
    - poetry run coverage run --source=hannah_tvm -m pytest test
    - poetry run coverage report
    - poetry run coverage xml
  tags:
    - docker
  interruptible: true
  coverage: '/TOTAL.*\s([.\d]+)%/'
  artifacts:
    reports:
      cobertura: coverage.xml
  cache:
    key: tvm-micro
    paths:
      - external/tvm/build

build_full:
  stage: build
  image: ubuntu:20.04
  script:
    - set -e
    - poetry run ./scripts/install_full.sh
    - poetry run coverage run --source=hannah_tvm -m pytest test
    - poetry run coverage report
    - poetry run coverage xml
  tags:
    - docker
  interruptible: true
  coverage: '/TOTAL.*\s([.\d]+)%/'
  cache:
    key: tvm-full
    paths:
      - external/tvm/build
  artifacts:
    reports:
      cobertura: coverage.xml

#build_micro_pulp:
#  stage: build
#  image: ubuntu:latest
#  script:
#    - set -e
#    - poetry run ./scripts/install_micro_pulp.sh
#  tags:
#    - docker
#  interruptible: true
